
Studio_readRPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acc4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800ae9c  0800ae9c  0000be9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aedc  0800aedc  0000c088  2**0
                  CONTENTS
  4 .ARM          00000008  0800aedc  0800aedc  0000bedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aee4  0800aee4  0000c088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aee4  0800aee4  0000bee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aee8  0800aee8  0000bee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800aeec  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001024  20000088  0800af74  0000c088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200010ac  0800af74  0000c0ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b3a8  00000000  00000000  0000c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003132  00000000  00000000  00027460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  0002a598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b0  00000000  00000000  0002bc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000290a1  00000000  00000000  0002cde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab7e  00000000  00000000  00055e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001155a8  00000000  00000000  000709ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00185fa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065d0  00000000  00000000  00185fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0018c5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000088 	.word	0x20000088
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ae84 	.word	0x0800ae84

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000008c 	.word	0x2000008c
 8000214:	0800ae84 	.word	0x0800ae84

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000e00:	f000 b96a 	b.w	80010d8 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	460c      	mov	r4, r1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d14e      	bne.n	8000ec6 <__udivmoddi4+0xaa>
 8000e28:	4694      	mov	ip, r2
 8000e2a:	458c      	cmp	ip, r1
 8000e2c:	4686      	mov	lr, r0
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	d962      	bls.n	8000efa <__udivmoddi4+0xde>
 8000e34:	b14a      	cbz	r2, 8000e4a <__udivmoddi4+0x2e>
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	4091      	lsls	r1, r2
 8000e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e44:	4319      	orrs	r1, r3
 8000e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f f68c 	uxth.w	r6, ip
 8000e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d90a      	bls.n	8000e80 <__udivmoddi4+0x64>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e72:	f080 8112 	bcs.w	800109a <__udivmoddi4+0x27e>
 8000e76:	4299      	cmp	r1, r3
 8000e78:	f240 810f 	bls.w	800109a <__udivmoddi4+0x27e>
 8000e7c:	3c02      	subs	r4, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	1a59      	subs	r1, r3, r1
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e92:	fb00 f606 	mul.w	r6, r0, r6
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d90a      	bls.n	8000eb0 <__udivmoddi4+0x94>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea2:	f080 80fc 	bcs.w	800109e <__udivmoddi4+0x282>
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	f240 80f9 	bls.w	800109e <__udivmoddi4+0x282>
 8000eac:	4463      	add	r3, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	b11d      	cbz	r5, 8000ec2 <__udivmoddi4+0xa6>
 8000eba:	40d3      	lsrs	r3, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d905      	bls.n	8000ed6 <__udivmoddi4+0xba>
 8000eca:	b10d      	cbz	r5, 8000ed0 <__udivmoddi4+0xb4>
 8000ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e7f5      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000ed6:	fab3 f183 	clz	r1, r3
 8000eda:	2900      	cmp	r1, #0
 8000edc:	d146      	bne.n	8000f6c <__udivmoddi4+0x150>
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xcc>
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	f0c0 80f0 	bcc.w	80010c8 <__udivmoddi4+0x2ac>
 8000ee8:	1a86      	subs	r6, r0, r2
 8000eea:	eb64 0303 	sbc.w	r3, r4, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d0e6      	beq.n	8000ec2 <__udivmoddi4+0xa6>
 8000ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ef8:	e7e3      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	f040 8090 	bne.w	8001020 <__udivmoddi4+0x204>
 8000f00:	eba1 040c 	sub.w	r4, r1, ip
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f16:	fb08 4416 	mls	r4, r8, r6, r4
 8000f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f1e:	fb07 f006 	mul.w	r0, r7, r6
 8000f22:	4298      	cmp	r0, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x11c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x11a>
 8000f30:	4298      	cmp	r0, r3
 8000f32:	f200 80cd 	bhi.w	80010d0 <__udivmoddi4+0x2b4>
 8000f36:	4626      	mov	r6, r4
 8000f38:	1a1c      	subs	r4, r3, r0
 8000f3a:	fa1f f38e 	uxth.w	r3, lr
 8000f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f42:	fb08 4410 	mls	r4, r8, r0, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb00 f707 	mul.w	r7, r0, r7
 8000f4e:	429f      	cmp	r7, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x148>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x146>
 8000f5c:	429f      	cmp	r7, r3
 8000f5e:	f200 80b0 	bhi.w	80010c2 <__udivmoddi4+0x2a6>
 8000f62:	4620      	mov	r0, r4
 8000f64:	1bdb      	subs	r3, r3, r7
 8000f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f6a:	e7a5      	b.n	8000eb8 <__udivmoddi4+0x9c>
 8000f6c:	f1c1 0620 	rsb	r6, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 f706 	lsr.w	r7, r2, r6
 8000f76:	431f      	orrs	r7, r3
 8000f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000f80:	ea43 030c 	orr.w	r3, r3, ip
 8000f84:	40f4      	lsrs	r4, r6
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	0c38      	lsrs	r0, r7, #16
 8000f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f90:	fbb4 fef0 	udiv	lr, r4, r0
 8000f94:	fa1f fc87 	uxth.w	ip, r7
 8000f98:	fb00 441e 	mls	r4, r0, lr, r4
 8000f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fa4:	45a1      	cmp	r9, r4
 8000fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x1a6>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fb2:	f080 8084 	bcs.w	80010be <__udivmoddi4+0x2a2>
 8000fb6:	45a1      	cmp	r9, r4
 8000fb8:	f240 8081 	bls.w	80010be <__udivmoddi4+0x2a2>
 8000fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	eba4 0409 	sub.w	r4, r4, r9
 8000fc6:	fa1f f983 	uxth.w	r9, r3
 8000fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fce:	fb00 4413 	mls	r4, r0, r3, r4
 8000fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fda:	45a4      	cmp	ip, r4
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x1d2>
 8000fde:	193c      	adds	r4, r7, r4
 8000fe0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fe4:	d267      	bcs.n	80010b6 <__udivmoddi4+0x29a>
 8000fe6:	45a4      	cmp	ip, r4
 8000fe8:	d965      	bls.n	80010b6 <__udivmoddi4+0x29a>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ff6:	eba4 040c 	sub.w	r4, r4, ip
 8000ffa:	429c      	cmp	r4, r3
 8000ffc:	46ce      	mov	lr, r9
 8000ffe:	469c      	mov	ip, r3
 8001000:	d351      	bcc.n	80010a6 <__udivmoddi4+0x28a>
 8001002:	d04e      	beq.n	80010a2 <__udivmoddi4+0x286>
 8001004:	b155      	cbz	r5, 800101c <__udivmoddi4+0x200>
 8001006:	ebb8 030e 	subs.w	r3, r8, lr
 800100a:	eb64 040c 	sbc.w	r4, r4, ip
 800100e:	fa04 f606 	lsl.w	r6, r4, r6
 8001012:	40cb      	lsrs	r3, r1
 8001014:	431e      	orrs	r6, r3
 8001016:	40cc      	lsrs	r4, r1
 8001018:	e9c5 6400 	strd	r6, r4, [r5]
 800101c:	2100      	movs	r1, #0
 800101e:	e750      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8001020:	f1c2 0320 	rsb	r3, r2, #32
 8001024:	fa20 f103 	lsr.w	r1, r0, r3
 8001028:	fa0c fc02 	lsl.w	ip, ip, r2
 800102c:	fa24 f303 	lsr.w	r3, r4, r3
 8001030:	4094      	lsls	r4, r2
 8001032:	430c      	orrs	r4, r1
 8001034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001038:	fa00 fe02 	lsl.w	lr, r0, r2
 800103c:	fa1f f78c 	uxth.w	r7, ip
 8001040:	fbb3 f0f8 	udiv	r0, r3, r8
 8001044:	fb08 3110 	mls	r1, r8, r0, r3
 8001048:	0c23      	lsrs	r3, r4, #16
 800104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104e:	fb00 f107 	mul.w	r1, r0, r7
 8001052:	4299      	cmp	r1, r3
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x24c>
 8001056:	eb1c 0303 	adds.w	r3, ip, r3
 800105a:	f100 36ff 	add.w	r6, r0, #4294967295
 800105e:	d22c      	bcs.n	80010ba <__udivmoddi4+0x29e>
 8001060:	4299      	cmp	r1, r3
 8001062:	d92a      	bls.n	80010ba <__udivmoddi4+0x29e>
 8001064:	3802      	subs	r0, #2
 8001066:	4463      	add	r3, ip
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001070:	fb08 3311 	mls	r3, r8, r1, r3
 8001074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001078:	fb01 f307 	mul.w	r3, r1, r7
 800107c:	42a3      	cmp	r3, r4
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x276>
 8001080:	eb1c 0404 	adds.w	r4, ip, r4
 8001084:	f101 36ff 	add.w	r6, r1, #4294967295
 8001088:	d213      	bcs.n	80010b2 <__udivmoddi4+0x296>
 800108a:	42a3      	cmp	r3, r4
 800108c:	d911      	bls.n	80010b2 <__udivmoddi4+0x296>
 800108e:	3902      	subs	r1, #2
 8001090:	4464      	add	r4, ip
 8001092:	1ae4      	subs	r4, r4, r3
 8001094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001098:	e739      	b.n	8000f0e <__udivmoddi4+0xf2>
 800109a:	4604      	mov	r4, r0
 800109c:	e6f0      	b.n	8000e80 <__udivmoddi4+0x64>
 800109e:	4608      	mov	r0, r1
 80010a0:	e706      	b.n	8000eb0 <__udivmoddi4+0x94>
 80010a2:	45c8      	cmp	r8, r9
 80010a4:	d2ae      	bcs.n	8001004 <__udivmoddi4+0x1e8>
 80010a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ae:	3801      	subs	r0, #1
 80010b0:	e7a8      	b.n	8001004 <__udivmoddi4+0x1e8>
 80010b2:	4631      	mov	r1, r6
 80010b4:	e7ed      	b.n	8001092 <__udivmoddi4+0x276>
 80010b6:	4603      	mov	r3, r0
 80010b8:	e799      	b.n	8000fee <__udivmoddi4+0x1d2>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e7d4      	b.n	8001068 <__udivmoddi4+0x24c>
 80010be:	46d6      	mov	lr, sl
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1a6>
 80010c2:	4463      	add	r3, ip
 80010c4:	3802      	subs	r0, #2
 80010c6:	e74d      	b.n	8000f64 <__udivmoddi4+0x148>
 80010c8:	4606      	mov	r6, r0
 80010ca:	4623      	mov	r3, r4
 80010cc:	4608      	mov	r0, r1
 80010ce:	e70f      	b.n	8000ef0 <__udivmoddi4+0xd4>
 80010d0:	3e02      	subs	r6, #2
 80010d2:	4463      	add	r3, ip
 80010d4:	e730      	b.n	8000f38 <__udivmoddi4+0x11c>
 80010d6:	bf00      	nop

080010d8 <__aeabi_idiv0>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <modbus_1t5_Timeout>:
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);
void Hearthbeat();

// function for interrupt
void modbus_1t5_Timeout()
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2201      	movs	r2, #1
 80010e6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0201 	orr.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	200000a4 	.word	0x200000a4

0800111c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <modbus_3t5_Timeout+0x1c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2201      	movs	r2, #1
 800112a:	755a      	strb	r2, [r3, #21]

}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	200000a4 	.word	0x200000a4

0800113c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f008 fc67 	bl	8009a18 <HAL_UART_GetError>
 800114a:	4603      	mov	r3, r0
 800114c:	2b20      	cmp	r3, #32
 800114e:	d101      	bne.n	8001154 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001150:	f7ff ffc4 	bl	80010dc <modbus_1t5_Timeout>

	}
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001166:	4a25      	ldr	r2, [pc, #148]	@ (80011fc <Modbus_init+0xa0>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800116c:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <Modbus_init+0xa0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	4a21      	ldr	r2, [pc, #132]	@ (8001200 <Modbus_init+0xa4>)
 800117a:	210e      	movs	r1, #14
 800117c:	4618      	mov	r0, r3
 800117e:	f006 ffa3 	bl	80080c8 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2110      	movs	r1, #16
 8001188:	4618      	mov	r0, r3
 800118a:	f008 fbef 	bl	800996c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	4618      	mov	r0, r3
 8001194:	f008 fc06 	bl	80099a4 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	4a19      	ldr	r2, [pc, #100]	@ (8001204 <Modbus_init+0xa8>)
 800119e:	2104      	movs	r1, #4
 80011a0:	4618      	mov	r0, r3
 80011a2:	f007 ff4d 	bl	8009040 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <Modbus_init+0xa0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <Modbus_init+0xa0>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <Modbus_init+0xa0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80011b8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011bc:	4413      	add	r3, r2
 80011be:	3302      	adds	r3, #2
 80011c0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011c4:	4619      	mov	r1, r3
 80011c6:	f007 fff5 	bl	80091b4 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <Modbus_init+0xa0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d10c      	bne.n	80011f4 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f005 ff43 	bl	800706c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011e6:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <Modbus_init+0xa0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f006 f99c 	bl	800752c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200000a4 	.word	0x200000a4
 8001200:	0800111d 	.word	0x0800111d
 8001204:	0800113d 	.word	0x0800113d

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800120c:	b08c      	sub	sp, #48	@ 0x30
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001210:	f002 fc25 	bl	8003a5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001214:	f000 fb28 	bl	8001868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001218:	f000 fe60 	bl	8001edc <MX_GPIO_Init>
  MX_DMA_Init();
 800121c:	f000 fe18 	bl	8001e50 <MX_DMA_Init>
  MX_TIM3_Init();
 8001220:	f000 fc4c 	bl	8001abc <MX_TIM3_Init>
  MX_TIM2_Init();
 8001224:	f000 fbf6 	bl	8001a14 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001228:	f000 fd0e 	bl	8001c48 <MX_TIM5_Init>
  MX_ADC1_Init();
 800122c:	f000 fb68 	bl	8001900 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001230:	f000 fcbc 	bl	8001bac <MX_TIM4_Init>
  MX_TIM6_Init();
 8001234:	f000 fd56 	bl	8001ce4 <MX_TIM6_Init>
  MX_TIM16_Init();
 8001238:	f000 fd8c 	bl	8001d54 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800123c:	f000 fdba 	bl	8001db4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //PWM Motor
  HAL_TIM_Base_Start(&htim3);
 8001240:	48b1      	ldr	r0, [pc, #708]	@ (8001508 <main+0x300>)
 8001242:	f005 fea3 	bl	8006f8c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001246:	2100      	movs	r1, #0
 8001248:	48af      	ldr	r0, [pc, #700]	@ (8001508 <main+0x300>)
 800124a:	f005 fff5 	bl	8007238 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 800124e:	4bae      	ldr	r3, [pc, #696]	@ (8001508 <main+0x300>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001256:	635a      	str	r2, [r3, #52]	@ 0x34

  //Read Encoder
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001258:	213c      	movs	r1, #60	@ 0x3c
 800125a:	48ac      	ldr	r0, [pc, #688]	@ (800150c <main+0x304>)
 800125c:	f006 faa8 	bl	80077b0 <HAL_TIM_Encoder_Start>

  //time microsec
  HAL_TIM_Base_Start_IT(&htim5);
 8001260:	48ab      	ldr	r0, [pc, #684]	@ (8001510 <main+0x308>)
 8001262:	f005 ff03 	bl	800706c <HAL_TIM_Base_Start_IT>

  //Read joystick
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 2);
 8001266:	2202      	movs	r2, #2
 8001268:	49aa      	ldr	r1, [pc, #680]	@ (8001514 <main+0x30c>)
 800126a:	48ab      	ldr	r0, [pc, #684]	@ (8001518 <main+0x310>)
 800126c:	f003 f864 	bl	8004338 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim4);
 8001270:	48aa      	ldr	r0, [pc, #680]	@ (800151c <main+0x314>)
 8001272:	f005 fe8b 	bl	8006f8c <HAL_TIM_Base_Start>

  //PID Control Position
  PID1.Kp = 7.5; // 7.5
 8001276:	4baa      	ldr	r3, [pc, #680]	@ (8001520 <main+0x318>)
 8001278:	4aaa      	ldr	r2, [pc, #680]	@ (8001524 <main+0x31c>)
 800127a:	619a      	str	r2, [r3, #24]
  PID1.Ki = 0.00005; // 0.0025
 800127c:	4ba8      	ldr	r3, [pc, #672]	@ (8001520 <main+0x318>)
 800127e:	4aaa      	ldr	r2, [pc, #680]	@ (8001528 <main+0x320>)
 8001280:	61da      	str	r2, [r3, #28]
  PID1.Kd = 3; // 3
 8001282:	4ba7      	ldr	r3, [pc, #668]	@ (8001520 <main+0x318>)
 8001284:	4aa9      	ldr	r2, [pc, #676]	@ (800152c <main+0x324>)
 8001286:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID1, 0);
 8001288:	2100      	movs	r1, #0
 800128a:	48a5      	ldr	r0, [pc, #660]	@ (8001520 <main+0x318>)
 800128c:	f009 fc8c 	bl	800aba8 <arm_pid_init_f32>

  //PID Control Velocity
  PID2.Kp = 0.1; //0.5
 8001290:	4ba7      	ldr	r3, [pc, #668]	@ (8001530 <main+0x328>)
 8001292:	4aa8      	ldr	r2, [pc, #672]	@ (8001534 <main+0x32c>)
 8001294:	619a      	str	r2, [r3, #24]
  PID2.Ki = 0.0006; // 0.006
 8001296:	4ba6      	ldr	r3, [pc, #664]	@ (8001530 <main+0x328>)
 8001298:	4aa7      	ldr	r2, [pc, #668]	@ (8001538 <main+0x330>)
 800129a:	61da      	str	r2, [r3, #28]
  PID2.Kd = 0.025; // 0.05
 800129c:	4ba4      	ldr	r3, [pc, #656]	@ (8001530 <main+0x328>)
 800129e:	4aa7      	ldr	r2, [pc, #668]	@ (800153c <main+0x334>)
 80012a0:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID2, 0);
 80012a2:	2100      	movs	r1, #0
 80012a4:	48a2      	ldr	r0, [pc, #648]	@ (8001530 <main+0x328>)
 80012a6:	f009 fc7f 	bl	800aba8 <arm_pid_init_f32>

  //Modbus Setting
  // manaul add
  HAL_TIM_Base_Start_IT(&htim6);
 80012aa:	48a5      	ldr	r0, [pc, #660]	@ (8001540 <main+0x338>)
 80012ac:	f005 fede 	bl	800706c <HAL_TIM_Base_Start_IT>

  //  modbus
  hmodbus.huart = &huart2;
 80012b0:	4ba4      	ldr	r3, [pc, #656]	@ (8001544 <main+0x33c>)
 80012b2:	4aa5      	ldr	r2, [pc, #660]	@ (8001548 <main+0x340>)
 80012b4:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80012b6:	4ba3      	ldr	r3, [pc, #652]	@ (8001544 <main+0x33c>)
 80012b8:	4aa4      	ldr	r2, [pc, #656]	@ (800154c <main+0x344>)
 80012ba:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80012bc:	4ba1      	ldr	r3, [pc, #644]	@ (8001544 <main+0x33c>)
 80012be:	2215      	movs	r2, #21
 80012c0:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80012c2:	4ba0      	ldr	r3, [pc, #640]	@ (8001544 <main+0x33c>)
 80012c4:	22c8      	movs	r2, #200	@ 0xc8
 80012c6:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80012c8:	49a1      	ldr	r1, [pc, #644]	@ (8001550 <main+0x348>)
 80012ca:	489e      	ldr	r0, [pc, #632]	@ (8001544 <main+0x33c>)
 80012cc:	f7ff ff46 	bl	800115c <Modbus_init>
//	  Run_jog();

	  static uint64_t timestamp = 0;
	  static uint64_t timestamp2 = 0;

	  int64_t currentTime = micros();
 80012d0:	f000 ff2c 	bl	800212c <micros>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	  if (max_velo < QEIdata.linearVel)
 80012dc:	4b9d      	ldr	r3, [pc, #628]	@ (8001554 <main+0x34c>)
 80012de:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80012e2:	4b9d      	ldr	r3, [pc, #628]	@ (8001558 <main+0x350>)
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f0:	dd03      	ble.n	80012fa <main+0xf2>
	  {
		  max_velo = QEIdata.linearVel;
 80012f2:	4b98      	ldr	r3, [pc, #608]	@ (8001554 <main+0x34c>)
 80012f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f6:	4a98      	ldr	r2, [pc, #608]	@ (8001558 <main+0x350>)
 80012f8:	6013      	str	r3, [r2, #0]
	  }
	  if(currentTime > timestamp2){
 80012fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80012fe:	4997      	ldr	r1, [pc, #604]	@ (800155c <main+0x354>)
 8001300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001304:	4290      	cmp	r0, r2
 8001306:	eb71 0303 	sbcs.w	r3, r1, r3
 800130a:	f080 8149 	bcs.w	80015a0 <main+0x398>
		  timestamp2 = currentTime + 167; //6,000 Hz
 800130e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001312:	f112 04a7 	adds.w	r4, r2, #167	@ 0xa7
 8001316:	f143 0500 	adc.w	r5, r3, #0
 800131a:	4622      	mov	r2, r4
 800131c:	462b      	mov	r3, r5
 800131e:	498f      	ldr	r1, [pc, #572]	@ (800155c <main+0x354>)
 8001320:	e9c1 2300 	strd	r2, r3, [r1]

		  //Read encoder
		  QEIEncoderPosVel_Update();
 8001324:	f000 ff1c 	bl	8002160 <QEIEncoderPosVel_Update>

		  //Create Trajectory
		  q_f = setPosition;
 8001328:	4b8d      	ldr	r3, [pc, #564]	@ (8001560 <main+0x358>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a8d      	ldr	r2, [pc, #564]	@ (8001564 <main+0x35c>)
 800132e:	6013      	str	r3, [r2, #0]
		  checkStartMoving();
 8001330:	f001 f82c 	bl	800238c <checkStartMoving>
		  createTrajectory();
 8001334:	f001 fa5a 	bl	80027ec <createTrajectory>

		  if(mode == 1){
 8001338:	4b8b      	ldr	r3, [pc, #556]	@ (8001568 <main+0x360>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	f040 80d0 	bne.w	80014e2 <main+0x2da>
			  if(fabs(setPosition - QEIdata.linearPos) < 0.1){
 8001342:	4b87      	ldr	r3, [pc, #540]	@ (8001560 <main+0x358>)
 8001344:	ed93 7a00 	vldr	s14, [r3]
 8001348:	4b82      	ldr	r3, [pc, #520]	@ (8001554 <main+0x34c>)
 800134a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800134e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001352:	eef0 7ae7 	vabs.f32	s15, s15
 8001356:	ee17 0a90 	vmov	r0, s15
 800135a:	f7ff f8c1 	bl	80004e0 <__aeabi_f2d>
 800135e:	a366      	add	r3, pc, #408	@ (adr r3, 80014f8 <main+0x2f0>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	f7ff fb86 	bl	8000a74 <__aeabi_dcmplt>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d004      	beq.n	8001378 <main+0x170>
				  Vin = 0;
 800136e:	4b7f      	ldr	r3, [pc, #508]	@ (800156c <main+0x364>)
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e099      	b.n	80014ac <main+0x2a4>
			  }
			  else if(setPosition - QEIdata.linearPos < 3 && setPosition - QEIdata.linearPos > 0.1){
 8001378:	4b79      	ldr	r3, [pc, #484]	@ (8001560 <main+0x358>)
 800137a:	ed93 7a00 	vldr	s14, [r3]
 800137e:	4b75      	ldr	r3, [pc, #468]	@ (8001554 <main+0x34c>)
 8001380:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001384:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001388:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800138c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001394:	d51a      	bpl.n	80013cc <main+0x1c4>
 8001396:	4b72      	ldr	r3, [pc, #456]	@ (8001560 <main+0x358>)
 8001398:	ed93 7a00 	vldr	s14, [r3]
 800139c:	4b6d      	ldr	r3, [pc, #436]	@ (8001554 <main+0x34c>)
 800139e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80013a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a6:	ee17 0a90 	vmov	r0, s15
 80013aa:	f7ff f899 	bl	80004e0 <__aeabi_f2d>
 80013ae:	a352      	add	r3, pc, #328	@ (adr r3, 80014f8 <main+0x2f0>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff fb7c 	bl	8000ab0 <__aeabi_dcmpgt>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d006      	beq.n	80013cc <main+0x1c4>
				  Vin = 3.2;
 80013be:	4b6b      	ldr	r3, [pc, #428]	@ (800156c <main+0x364>)
 80013c0:	4a6b      	ldr	r2, [pc, #428]	@ (8001570 <main+0x368>)
 80013c2:	601a      	str	r2, [r3, #0]
				  check = 1;
 80013c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001574 <main+0x36c>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	e06f      	b.n	80014ac <main+0x2a4>
			  }
			  else if(setPosition - QEIdata.linearPos > -3 && setPosition - QEIdata.linearPos < -0.1){
 80013cc:	4b64      	ldr	r3, [pc, #400]	@ (8001560 <main+0x358>)
 80013ce:	ed93 7a00 	vldr	s14, [r3]
 80013d2:	4b60      	ldr	r3, [pc, #384]	@ (8001554 <main+0x34c>)
 80013d4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80013d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013dc:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 80013e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e8:	dd1c      	ble.n	8001424 <main+0x21c>
 80013ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001560 <main+0x358>)
 80013ec:	ed93 7a00 	vldr	s14, [r3]
 80013f0:	4b58      	ldr	r3, [pc, #352]	@ (8001554 <main+0x34c>)
 80013f2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80013f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fa:	ee17 0a90 	vmov	r0, s15
 80013fe:	f7ff f86f 	bl	80004e0 <__aeabi_f2d>
 8001402:	a33f      	add	r3, pc, #252	@ (adr r3, 8001500 <main+0x2f8>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f7ff fb34 	bl	8000a74 <__aeabi_dcmplt>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d008      	beq.n	8001424 <main+0x21c>
			  	  Vin = -2;
 8001412:	4b56      	ldr	r3, [pc, #344]	@ (800156c <main+0x364>)
 8001414:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8001418:	601a      	str	r2, [r3, #0]
			  	  check = -1;
 800141a:	4b56      	ldr	r3, [pc, #344]	@ (8001574 <main+0x36c>)
 800141c:	f04f 32ff 	mov.w	r2, #4294967295
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	e043      	b.n	80014ac <main+0x2a4>
			  }
			  else{
				  Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 - QEIdata.linearVel);
 8001424:	4b54      	ldr	r3, [pc, #336]	@ (8001578 <main+0x370>)
 8001426:	ed93 7a00 	vldr	s14, [r3]
 800142a:	4b54      	ldr	r3, [pc, #336]	@ (800157c <main+0x374>)
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001434:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001438:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800143c:	4b45      	ldr	r3, [pc, #276]	@ (8001554 <main+0x34c>)
 800143e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001442:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001446:	4b3a      	ldr	r3, [pc, #232]	@ (8001530 <main+0x328>)
 8001448:	627b      	str	r3, [r7, #36]	@ 0x24
 800144a:	edc7 7a08 	vstr	s15, [r7, #32]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800144e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001450:	ed93 7a00 	vldr	s14, [r3]
 8001454:	edd7 7a08 	vldr	s15, [r7, #32]
 8001458:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800145c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001464:	edd3 7a03 	vldr	s15, [r3, #12]
 8001468:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800146c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001472:	edd3 6a02 	vldr	s13, [r3, #8]
 8001476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001478:	edd3 7a04 	vldr	s15, [r3, #16]
 800147c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001480:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001486:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800148a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148e:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Update state */
    S->state[1] = S->state[0];
 8001492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001498:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149c:	6a3a      	ldr	r2, [r7, #32]
 800149e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80014a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	4a30      	ldr	r2, [pc, #192]	@ (800156c <main+0x364>)
 80014aa:	6013      	str	r3, [r2, #0]
//				  Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
			  }
			  if(Vin > 24){
 80014ac:	4b2f      	ldr	r3, [pc, #188]	@ (800156c <main+0x364>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80014b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014be:	dd02      	ble.n	80014c6 <main+0x2be>
	  			  Vin = 24;
 80014c0:	4b2a      	ldr	r3, [pc, #168]	@ (800156c <main+0x364>)
 80014c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001580 <main+0x378>)
 80014c4:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 80014c6:	4b29      	ldr	r3, [pc, #164]	@ (800156c <main+0x364>)
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 80014d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d8:	d55e      	bpl.n	8001598 <main+0x390>
				  Vin = -24;
 80014da:	4b24      	ldr	r3, [pc, #144]	@ (800156c <main+0x364>)
 80014dc:	4a29      	ldr	r2, [pc, #164]	@ (8001584 <main+0x37c>)
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	e05a      	b.n	8001598 <main+0x390>
			  }
		  }
	      else if(mode == 2){ //manual (control with joy stick)
 80014e2:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <main+0x360>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d14e      	bne.n	8001588 <main+0x380>
//			  JoystickInput();
			  button_up_down_input();
 80014ea:	f001 fe0f 	bl	800310c <button_up_down_input>
			  button_reset_input(); //set 0;
 80014ee:	f001 feaf 	bl	8003250 <button_reset_input>
			  button_save_position();
 80014f2:	f001 ff11 	bl	8003318 <button_save_position>
 80014f6:	e04f      	b.n	8001598 <main+0x390>
 80014f8:	9999999a 	.word	0x9999999a
 80014fc:	3fb99999 	.word	0x3fb99999
 8001500:	9999999a 	.word	0x9999999a
 8001504:	bfb99999 	.word	0xbfb99999
 8001508:	20000240 	.word	0x20000240
 800150c:	20000174 	.word	0x20000174
 8001510:	200003d8 	.word	0x200003d8
 8001514:	20000810 	.word	0x20000810
 8001518:	200000a8 	.word	0x200000a8
 800151c:	2000030c 	.word	0x2000030c
 8001520:	20000888 	.word	0x20000888
 8001524:	40f00000 	.word	0x40f00000
 8001528:	3851b717 	.word	0x3851b717
 800152c:	40400000 	.word	0x40400000
 8001530:	200008ac 	.word	0x200008ac
 8001534:	3dcccccd 	.word	0x3dcccccd
 8001538:	3a1d4952 	.word	0x3a1d4952
 800153c:	3ccccccd 	.word	0x3ccccccd
 8001540:	200004a4 	.word	0x200004a4
 8001544:	200008e8 	.word	0x200008e8
 8001548:	2000063c 	.word	0x2000063c
 800154c:	20000570 	.word	0x20000570
 8001550:	20000dc0 	.word	0x20000dc0
 8001554:	200007c8 	.word	0x200007c8
 8001558:	200008d8 	.word	0x200008d8
 800155c:	20000f60 	.word	0x20000f60
 8001560:	200008d0 	.word	0x200008d0
 8001564:	20000824 	.word	0x20000824
 8001568:	20000000 	.word	0x20000000
 800156c:	2000081c 	.word	0x2000081c
 8001570:	404ccccd 	.word	0x404ccccd
 8001574:	20000f50 	.word	0x20000f50
 8001578:	200008d4 	.word	0x200008d4
 800157c:	20000834 	.word	0x20000834
 8001580:	41c00000 	.word	0x41c00000
 8001584:	c1c00000 	.word	0xc1c00000
		  }
		  else if(mode == 3){ //stop mode
 8001588:	4ba9      	ldr	r3, [pc, #676]	@ (8001830 <main+0x628>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b03      	cmp	r3, #3
 800158e:	d103      	bne.n	8001598 <main+0x390>
			  Vin = 0;
 8001590:	4ba8      	ldr	r3, [pc, #672]	@ (8001834 <main+0x62c>)
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
		  }

		  //software limit
		  SoftwareLimit();
 8001598:	f001 fd62 	bl	8003060 <SoftwareLimit>

		  //Drive Motor which PWM
		  DriveMotor();
 800159c:	f001 fd04 	bl	8002fa8 <DriveMotor>

	  }

	  if(currentTime > timestamp){
 80015a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80015a4:	49a4      	ldr	r1, [pc, #656]	@ (8001838 <main+0x630>)
 80015a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015aa:	4290      	cmp	r0, r2
 80015ac:	eb71 0303 	sbcs.w	r3, r1, r3
 80015b0:	f080 8127 	bcs.w	8001802 <main+0x5fa>
		  timestamp = currentTime + 4000; //250 Hz
 80015b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80015b8:	f512 687a 	adds.w	r8, r2, #4000	@ 0xfa0
 80015bc:	f143 0900 	adc.w	r9, r3, #0
 80015c0:	4642      	mov	r2, r8
 80015c2:	464b      	mov	r3, r9
 80015c4:	499c      	ldr	r1, [pc, #624]	@ (8001838 <main+0x630>)
 80015c6:	e9c1 2300 	strd	r2, r3, [r1]

		  //control mode
		  if(mode == 1){ //auto
 80015ca:	4b99      	ldr	r3, [pc, #612]	@ (8001830 <main+0x628>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	f040 8117 	bne.w	8001802 <main+0x5fa>
			  if(fabs(setPosition - QEIdata.linearPos) < 0.1){
 80015d4:	4b99      	ldr	r3, [pc, #612]	@ (800183c <main+0x634>)
 80015d6:	ed93 7a00 	vldr	s14, [r3]
 80015da:	4b99      	ldr	r3, [pc, #612]	@ (8001840 <main+0x638>)
 80015dc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80015e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e4:	eef0 7ae7 	vabs.f32	s15, s15
 80015e8:	ee17 0a90 	vmov	r0, s15
 80015ec:	f7fe ff78 	bl	80004e0 <__aeabi_f2d>
 80015f0:	a38b      	add	r3, pc, #556	@ (adr r3, 8001820 <main+0x618>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7ff fa3d 	bl	8000a74 <__aeabi_dcmplt>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d004      	beq.n	800160a <main+0x402>
				  Vin = 0;
 8001600:	4b8c      	ldr	r3, [pc, #560]	@ (8001834 <main+0x62c>)
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e0dd      	b.n	80017c6 <main+0x5be>
			  }
			  else if(setPosition - QEIdata.linearPos < 3 && setPosition - QEIdata.linearPos > 0.1){
 800160a:	4b8c      	ldr	r3, [pc, #560]	@ (800183c <main+0x634>)
 800160c:	ed93 7a00 	vldr	s14, [r3]
 8001610:	4b8b      	ldr	r3, [pc, #556]	@ (8001840 <main+0x638>)
 8001612:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800161e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001626:	d51a      	bpl.n	800165e <main+0x456>
 8001628:	4b84      	ldr	r3, [pc, #528]	@ (800183c <main+0x634>)
 800162a:	ed93 7a00 	vldr	s14, [r3]
 800162e:	4b84      	ldr	r3, [pc, #528]	@ (8001840 <main+0x638>)
 8001630:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001638:	ee17 0a90 	vmov	r0, s15
 800163c:	f7fe ff50 	bl	80004e0 <__aeabi_f2d>
 8001640:	a377      	add	r3, pc, #476	@ (adr r3, 8001820 <main+0x618>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7ff fa33 	bl	8000ab0 <__aeabi_dcmpgt>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <main+0x456>
			  	  Vin = 3.2;
 8001650:	4b78      	ldr	r3, [pc, #480]	@ (8001834 <main+0x62c>)
 8001652:	4a7c      	ldr	r2, [pc, #496]	@ (8001844 <main+0x63c>)
 8001654:	601a      	str	r2, [r3, #0]
			  	  check = 2;
 8001656:	4b7c      	ldr	r3, [pc, #496]	@ (8001848 <main+0x640>)
 8001658:	2202      	movs	r2, #2
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	e0b3      	b.n	80017c6 <main+0x5be>
			  }
			  else if(setPosition - QEIdata.linearPos > -3 && setPosition - QEIdata.linearPos < -0.1){
 800165e:	4b77      	ldr	r3, [pc, #476]	@ (800183c <main+0x634>)
 8001660:	ed93 7a00 	vldr	s14, [r3]
 8001664:	4b76      	ldr	r3, [pc, #472]	@ (8001840 <main+0x638>)
 8001666:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800166a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800166e:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 8001672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167a:	dd1c      	ble.n	80016b6 <main+0x4ae>
 800167c:	4b6f      	ldr	r3, [pc, #444]	@ (800183c <main+0x634>)
 800167e:	ed93 7a00 	vldr	s14, [r3]
 8001682:	4b6f      	ldr	r3, [pc, #444]	@ (8001840 <main+0x638>)
 8001684:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800168c:	ee17 0a90 	vmov	r0, s15
 8001690:	f7fe ff26 	bl	80004e0 <__aeabi_f2d>
 8001694:	a364      	add	r3, pc, #400	@ (adr r3, 8001828 <main+0x620>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7ff f9eb 	bl	8000a74 <__aeabi_dcmplt>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <main+0x4ae>
			  	  Vin = -2;
 80016a4:	4b63      	ldr	r3, [pc, #396]	@ (8001834 <main+0x62c>)
 80016a6:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 80016aa:	601a      	str	r2, [r3, #0]
			  	  check = -2;
 80016ac:	4b66      	ldr	r3, [pc, #408]	@ (8001848 <main+0x640>)
 80016ae:	f06f 0201 	mvn.w	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	e087      	b.n	80017c6 <main+0x5be>
			  }
			  else{
				  setVelocity = arm_pid_f32(&PID1, (setPosition + ref_p)/2 - QEIdata.linearPos);
 80016b6:	4b61      	ldr	r3, [pc, #388]	@ (800183c <main+0x634>)
 80016b8:	ed93 7a00 	vldr	s14, [r3]
 80016bc:	4b63      	ldr	r3, [pc, #396]	@ (800184c <main+0x644>)
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80016ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001840 <main+0x638>)
 80016d0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80016d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d8:	4b5d      	ldr	r3, [pc, #372]	@ (8001850 <main+0x648>)
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	edc7 7a02 	vstr	s15, [r7, #8]
    out = (S->A0 * in) +
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	ed93 7a00 	vldr	s14, [r3]
 80016e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ea:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80016fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80016fe:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	edd3 6a02 	vldr	s13, [r3, #8]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	edd3 7a04 	vldr	s15, [r3, #16]
 800170e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001712:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800171c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001720:	edc7 7a01 	vstr	s15, [r7, #4]
    S->state[1] = S->state[0];
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	615a      	str	r2, [r3, #20]
    return (out);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a46      	ldr	r2, [pc, #280]	@ (8001854 <main+0x64c>)
 800173c:	6013      	str	r3, [r2, #0]
				  Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 + QEIdata.linearVel);
 800173e:	4b45      	ldr	r3, [pc, #276]	@ (8001854 <main+0x64c>)
 8001740:	ed93 7a00 	vldr	s14, [r3]
 8001744:	4b44      	ldr	r3, [pc, #272]	@ (8001858 <main+0x650>)
 8001746:	edd3 7a00 	vldr	s15, [r3]
 800174a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001752:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001756:	4b3a      	ldr	r3, [pc, #232]	@ (8001840 <main+0x638>)
 8001758:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800175c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001760:	4b3e      	ldr	r3, [pc, #248]	@ (800185c <main+0x654>)
 8001762:	61bb      	str	r3, [r7, #24]
 8001764:	edc7 7a05 	vstr	s15, [r7, #20]
    out = (S->A0 * in) +
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	ed93 7a00 	vldr	s14, [r3]
 800176e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001772:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	edd3 6a01 	vldr	s13, [r3, #4]
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001782:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001786:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	edd3 7a04 	vldr	s15, [r3, #16]
 8001796:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800179a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80017a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a8:	edc7 7a04 	vstr	s15, [r7, #16]
    S->state[1] = S->state[0];
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	615a      	str	r2, [r3, #20]
    return (out);
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001834 <main+0x62c>)
 80017c4:	6013      	str	r3, [r2, #0]
//				  Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
			  }
			  if(Vin > 24){
 80017c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001834 <main+0x62c>)
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80017d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d8:	dd02      	ble.n	80017e0 <main+0x5d8>
				  Vin = 24;
 80017da:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <main+0x62c>)
 80017dc:	4a20      	ldr	r2, [pc, #128]	@ (8001860 <main+0x658>)
 80017de:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 80017e0:	4b14      	ldr	r3, [pc, #80]	@ (8001834 <main+0x62c>)
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 80017ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f2:	d502      	bpl.n	80017fa <main+0x5f2>
				  Vin = -24;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <main+0x62c>)
 80017f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001864 <main+0x65c>)
 80017f8:	601a      	str	r2, [r3, #0]
			  }

			  //software limit
			  SoftwareLimit();
 80017fa:	f001 fc31 	bl	8003060 <SoftwareLimit>

			  //Drive Motor which PWM
			  DriveMotor();
 80017fe:	f001 fbd3 	bl	8002fa8 <DriveMotor>
		  }

	  }

	  //Check Emergency Status
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 1){
 8001802:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180a:	f004 fae3 	bl	8005dd4 <HAL_GPIO_ReadPin>
 800180e:	4603      	mov	r3, r0
 8001810:	2b01      	cmp	r3, #1
 8001812:	f47f ad5d 	bne.w	80012d0 <main+0xc8>
		  LED_Emergency();
 8001816:	f001 fdaf 	bl	8003378 <LED_Emergency>
  {
 800181a:	e559      	b.n	80012d0 <main+0xc8>
 800181c:	f3af 8000 	nop.w
 8001820:	9999999a 	.word	0x9999999a
 8001824:	3fb99999 	.word	0x3fb99999
 8001828:	9999999a 	.word	0x9999999a
 800182c:	bfb99999 	.word	0xbfb99999
 8001830:	20000000 	.word	0x20000000
 8001834:	2000081c 	.word	0x2000081c
 8001838:	20000f68 	.word	0x20000f68
 800183c:	200008d0 	.word	0x200008d0
 8001840:	200007c8 	.word	0x200007c8
 8001844:	404ccccd 	.word	0x404ccccd
 8001848:	20000f50 	.word	0x20000f50
 800184c:	20000830 	.word	0x20000830
 8001850:	20000888 	.word	0x20000888
 8001854:	200008d4 	.word	0x200008d4
 8001858:	20000834 	.word	0x20000834
 800185c:	200008ac 	.word	0x200008ac
 8001860:	41c00000 	.word	0x41c00000
 8001864:	c1c00000 	.word	0xc1c00000

08001868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b094      	sub	sp, #80	@ 0x50
 800186c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186e:	f107 0318 	add.w	r3, r7, #24
 8001872:	2238      	movs	r2, #56	@ 0x38
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f009 f9cc 	bl	800ac14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800188a:	2000      	movs	r0, #0
 800188c:	f004 faea 	bl	8005e64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001890:	2302      	movs	r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001894:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800189a:	2340      	movs	r3, #64	@ 0x40
 800189c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189e:	2302      	movs	r3, #2
 80018a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018a2:	2302      	movs	r3, #2
 80018a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80018a6:	2304      	movs	r3, #4
 80018a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80018aa:	2355      	movs	r3, #85	@ 0x55
 80018ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ae:	2302      	movs	r3, #2
 80018b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ba:	f107 0318 	add.w	r3, r7, #24
 80018be:	4618      	mov	r0, r3
 80018c0:	f004 fb84 	bl	8005fcc <HAL_RCC_OscConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80018ca:	f001 fd7b 	bl	80033c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ce:	230f      	movs	r3, #15
 80018d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d2:	2303      	movs	r3, #3
 80018d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	2104      	movs	r1, #4
 80018e6:	4618      	mov	r0, r3
 80018e8:	f004 fe82 	bl	80065f0 <HAL_RCC_ClockConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80018f2:	f001 fd67 	bl	80033c4 <Error_Handler>
  }
}
 80018f6:	bf00      	nop
 80018f8:	3750      	adds	r7, #80	@ 0x50
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08c      	sub	sp, #48	@ 0x30
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	2220      	movs	r2, #32
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f009 f97b 	bl	800ac14 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800191e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001920:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001924:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001926:	4b38      	ldr	r3, [pc, #224]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001928:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800192c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800192e:	4b36      	ldr	r3, [pc, #216]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001934:	4b34      	ldr	r3, [pc, #208]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800193a:	4b33      	ldr	r3, [pc, #204]	@ (8001a08 <MX_ADC1_Init+0x108>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001940:	4b31      	ldr	r3, [pc, #196]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001942:	2201      	movs	r2, #1
 8001944:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001946:	4b30      	ldr	r3, [pc, #192]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001948:	2204      	movs	r2, #4
 800194a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800194c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a08 <MX_ADC1_Init+0x108>)
 800194e:	2200      	movs	r2, #0
 8001950:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001952:	4b2d      	ldr	r3, [pc, #180]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001954:	2200      	movs	r2, #0
 8001956:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001958:	4b2b      	ldr	r3, [pc, #172]	@ (8001a08 <MX_ADC1_Init+0x108>)
 800195a:	2202      	movs	r2, #2
 800195c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800195e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001966:	4b28      	ldr	r3, [pc, #160]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001968:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 800196c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800196e:	4b26      	ldr	r3, [pc, #152]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001970:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001974:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001976:	4b24      	ldr	r3, [pc, #144]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800197e:	4b22      	ldr	r3, [pc, #136]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001980:	2200      	movs	r2, #0
 8001982:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001984:	4b20      	ldr	r3, [pc, #128]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800198c:	481e      	ldr	r0, [pc, #120]	@ (8001a08 <MX_ADC1_Init+0x108>)
 800198e:	f002 fb17 	bl	8003fc0 <HAL_ADC_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001998:	f001 fd14 	bl	80033c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80019a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019a4:	4619      	mov	r1, r3
 80019a6:	4818      	ldr	r0, [pc, #96]	@ (8001a08 <MX_ADC1_Init+0x108>)
 80019a8:	f003 fb48 	bl	800503c <HAL_ADCEx_MultiModeConfigChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80019b2:	f001 fd07 	bl	80033c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <MX_ADC1_Init+0x10c>)
 80019b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019ba:	2306      	movs	r3, #6
 80019bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019c2:	237f      	movs	r3, #127	@ 0x7f
 80019c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019c6:	2304      	movs	r3, #4
 80019c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	480d      	ldr	r0, [pc, #52]	@ (8001a08 <MX_ADC1_Init+0x108>)
 80019d4:	f002 fda2 	bl	800451c <HAL_ADC_ConfigChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80019de:	f001 fcf1 	bl	80033c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <MX_ADC1_Init+0x110>)
 80019e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019e6:	230c      	movs	r3, #12
 80019e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	4619      	mov	r1, r3
 80019ee:	4806      	ldr	r0, [pc, #24]	@ (8001a08 <MX_ADC1_Init+0x108>)
 80019f0:	f002 fd94 	bl	800451c <HAL_ADC_ConfigChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80019fa:	f001 fce3 	bl	80033c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	3730      	adds	r7, #48	@ 0x30
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200000a8 	.word	0x200000a8
 8001a0c:	04300002 	.word	0x04300002
 8001a10:	14f00020 	.word	0x14f00020

08001a14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08c      	sub	sp, #48	@ 0x30
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	2224      	movs	r2, #36	@ 0x24
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f009 f8f6 	bl	800ac14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a28:	463b      	mov	r3, r7
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a32:	4b21      	ldr	r3, [pc, #132]	@ (8001ab8 <MX_TIM2_Init+0xa4>)
 8001a34:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <MX_TIM2_Init+0xa4>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab8 <MX_TIM2_Init+0xa4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a46:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab8 <MX_TIM2_Init+0xa4>)
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <MX_TIM2_Init+0xa4>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <MX_TIM2_Init+0xa4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a62:	2301      	movs	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a72:	2301      	movs	r3, #1
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a76:	2300      	movs	r3, #0
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	4619      	mov	r1, r3
 8001a84:	480c      	ldr	r0, [pc, #48]	@ (8001ab8 <MX_TIM2_Init+0xa4>)
 8001a86:	f005 fddf 	bl	8007648 <HAL_TIM_Encoder_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001a90:	f001 fc98 	bl	80033c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <MX_TIM2_Init+0xa4>)
 8001aa2:	f007 f987 	bl	8008db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001aac:	f001 fc8a 	bl	80033c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	3730      	adds	r7, #48	@ 0x30
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000174 	.word	0x20000174

08001abc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08e      	sub	sp, #56	@ 0x38
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001adc:	463b      	mov	r3, r7
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]
 8001aea:	615a      	str	r2, [r3, #20]
 8001aec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aee:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001af0:	4a2d      	ldr	r2, [pc, #180]	@ (8001ba8 <MX_TIM3_Init+0xec>)
 8001af2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001af4:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001af6:	22a9      	movs	r2, #169	@ 0xa9
 8001af8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afa:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001b00:	4b28      	ldr	r3, [pc, #160]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001b02:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b08:	4b26      	ldr	r3, [pc, #152]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0e:	4b25      	ldr	r3, [pc, #148]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b14:	4823      	ldr	r0, [pc, #140]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001b16:	f005 f9d5 	bl	8006ec4 <HAL_TIM_Base_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b20:	f001 fc50 	bl	80033c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b28:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b2e:	4619      	mov	r1, r3
 8001b30:	481c      	ldr	r0, [pc, #112]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001b32:	f006 f959 	bl	8007de8 <HAL_TIM_ConfigClockSource>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b3c:	f001 fc42 	bl	80033c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b40:	4818      	ldr	r0, [pc, #96]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001b42:	f005 fb0b 	bl	800715c <HAL_TIM_PWM_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b4c:	f001 fc3a 	bl	80033c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4811      	ldr	r0, [pc, #68]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001b60:	f007 f928 	bl	8008db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b6a:	f001 fc2b 	bl	80033c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6e:	2360      	movs	r3, #96	@ 0x60
 8001b70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001b72:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001b76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	2200      	movs	r2, #0
 8001b84:	4619      	mov	r1, r3
 8001b86:	4807      	ldr	r0, [pc, #28]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001b88:	f006 f81a 	bl	8007bc0 <HAL_TIM_PWM_ConfigChannel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001b92:	f001 fc17 	bl	80033c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b96:	4803      	ldr	r0, [pc, #12]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001b98:	f001 fda4 	bl	80036e4 <HAL_TIM_MspPostInit>

}
 8001b9c:	bf00      	nop
 8001b9e:	3738      	adds	r7, #56	@ 0x38
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000240 	.word	0x20000240
 8001ba8:	40000400 	.word	0x40000400

08001bac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bb2:	f107 0310 	add.w	r3, r7, #16
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bca:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <MX_TIM4_Init+0x98>)
 8001bce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001bd2:	22a9      	movs	r2, #169	@ 0xa9
 8001bd4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001bdc:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001bde:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001be2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be4:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bf0:	4813      	ldr	r0, [pc, #76]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001bf2:	f005 f967 	bl	8006ec4 <HAL_TIM_Base_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001bfc:	f001 fbe2 	bl	80033c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c06:	f107 0310 	add.w	r3, r7, #16
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480c      	ldr	r0, [pc, #48]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001c0e:	f006 f8eb 	bl	8007de8 <HAL_TIM_ConfigClockSource>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c18:	f001 fbd4 	bl	80033c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	4805      	ldr	r0, [pc, #20]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001c2a:	f007 f8c3 	bl	8008db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001c34:	f001 fbc6 	bl	80033c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	2000030c 	.word	0x2000030c
 8001c44:	40000800 	.word	0x40000800

08001c48 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4e:	f107 0310 	add.w	r3, r7, #16
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c66:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <MX_TIM5_Init+0x94>)
 8001c68:	4a1d      	ldr	r2, [pc, #116]	@ (8001ce0 <MX_TIM5_Init+0x98>)
 8001c6a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cdc <MX_TIM5_Init+0x94>)
 8001c6e:	22a9      	movs	r2, #169	@ 0xa9
 8001c70:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c72:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <MX_TIM5_Init+0x94>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001c78:	4b18      	ldr	r3, [pc, #96]	@ (8001cdc <MX_TIM5_Init+0x94>)
 8001c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c80:	4b16      	ldr	r3, [pc, #88]	@ (8001cdc <MX_TIM5_Init+0x94>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c86:	4b15      	ldr	r3, [pc, #84]	@ (8001cdc <MX_TIM5_Init+0x94>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c8c:	4813      	ldr	r0, [pc, #76]	@ (8001cdc <MX_TIM5_Init+0x94>)
 8001c8e:	f005 f919 	bl	8006ec4 <HAL_TIM_Base_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001c98:	f001 fb94 	bl	80033c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ca0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ca2:	f107 0310 	add.w	r3, r7, #16
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480c      	ldr	r0, [pc, #48]	@ (8001cdc <MX_TIM5_Init+0x94>)
 8001caa:	f006 f89d 	bl	8007de8 <HAL_TIM_ConfigClockSource>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001cb4:	f001 fb86 	bl	80033c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4805      	ldr	r0, [pc, #20]	@ (8001cdc <MX_TIM5_Init+0x94>)
 8001cc6:	f007 f875 	bl	8008db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001cd0:	f001 fb78 	bl	80033c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200003d8 	.word	0x200003d8
 8001ce0:	40000c00 	.word	0x40000c00

08001ce4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cf4:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <MX_TIM6_Init+0x68>)
 8001cf6:	4a16      	ldr	r2, [pc, #88]	@ (8001d50 <MX_TIM6_Init+0x6c>)
 8001cf8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1699;
 8001cfa:	4b14      	ldr	r3, [pc, #80]	@ (8001d4c <MX_TIM6_Init+0x68>)
 8001cfc:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001d00:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d02:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <MX_TIM6_Init+0x68>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 8001d08:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <MX_TIM6_Init+0x68>)
 8001d0a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001d0e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d10:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <MX_TIM6_Init+0x68>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d16:	480d      	ldr	r0, [pc, #52]	@ (8001d4c <MX_TIM6_Init+0x68>)
 8001d18:	f005 f8d4 	bl	8006ec4 <HAL_TIM_Base_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001d22:	f001 fb4f 	bl	80033c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	4619      	mov	r1, r3
 8001d32:	4806      	ldr	r0, [pc, #24]	@ (8001d4c <MX_TIM6_Init+0x68>)
 8001d34:	f007 f83e 	bl	8008db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001d3e:	f001 fb41 	bl	80033c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200004a4 	.word	0x200004a4
 8001d50:	40001000 	.word	0x40001000

08001d54 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d58:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <MX_TIM16_Init+0x58>)
 8001d5a:	4a15      	ldr	r2, [pc, #84]	@ (8001db0 <MX_TIM16_Init+0x5c>)
 8001d5c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <MX_TIM16_Init+0x58>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d64:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <MX_TIM16_Init+0x58>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <MX_TIM16_Init+0x58>)
 8001d6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d70:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <MX_TIM16_Init+0x58>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <MX_TIM16_Init+0x58>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <MX_TIM16_Init+0x58>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d84:	4809      	ldr	r0, [pc, #36]	@ (8001dac <MX_TIM16_Init+0x58>)
 8001d86:	f005 f89d 	bl	8006ec4 <HAL_TIM_Base_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001d90:	f001 fb18 	bl	80033c4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001d94:	2108      	movs	r1, #8
 8001d96:	4805      	ldr	r0, [pc, #20]	@ (8001dac <MX_TIM16_Init+0x58>)
 8001d98:	f005 fb60 	bl	800745c <HAL_TIM_OnePulse_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001da2:	f001 fb0f 	bl	80033c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000570 	.word	0x20000570
 8001db0:	40014400 	.word	0x40014400

08001db4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001db8:	4b23      	ldr	r3, [pc, #140]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001dba:	4a24      	ldr	r2, [pc, #144]	@ (8001e4c <MX_USART2_UART_Init+0x98>)
 8001dbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001dbe:	4b22      	ldr	r3, [pc, #136]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001dc0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001dc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001dc6:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001dc8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dcc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dce:	4b1e      	ldr	r3, [pc, #120]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001dd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001dde:	220c      	movs	r2, #12
 8001de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de2:	4b19      	ldr	r3, [pc, #100]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de8:	4b17      	ldr	r3, [pc, #92]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dee:	4b16      	ldr	r3, [pc, #88]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001df4:	4b14      	ldr	r3, [pc, #80]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dfa:	4b13      	ldr	r3, [pc, #76]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e00:	4811      	ldr	r0, [pc, #68]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001e02:	f007 f8bd 	bl	8008f80 <HAL_UART_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001e0c:	f001 fada 	bl	80033c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e10:	2100      	movs	r1, #0
 8001e12:	480d      	ldr	r0, [pc, #52]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001e14:	f008 fdfe 	bl	800aa14 <HAL_UARTEx_SetTxFifoThreshold>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001e1e:	f001 fad1 	bl	80033c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e22:	2100      	movs	r1, #0
 8001e24:	4808      	ldr	r0, [pc, #32]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001e26:	f008 fe33 	bl	800aa90 <HAL_UARTEx_SetRxFifoThreshold>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001e30:	f001 fac8 	bl	80033c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e34:	4804      	ldr	r0, [pc, #16]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001e36:	f008 fdb4 	bl	800a9a2 <HAL_UARTEx_DisableFifoMode>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001e40:	f001 fac0 	bl	80033c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	2000063c 	.word	0x2000063c
 8001e4c:	40004400 	.word	0x40004400

08001e50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e56:	4b20      	ldr	r3, [pc, #128]	@ (8001ed8 <MX_DMA_Init+0x88>)
 8001e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed8 <MX_DMA_Init+0x88>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <MX_DMA_Init+0x88>)
 8001e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed8 <MX_DMA_Init+0x88>)
 8001e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e72:	4a19      	ldr	r2, [pc, #100]	@ (8001ed8 <MX_DMA_Init+0x88>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e7a:	4b17      	ldr	r3, [pc, #92]	@ (8001ed8 <MX_DMA_Init+0x88>)
 8001e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e86:	4b14      	ldr	r3, [pc, #80]	@ (8001ed8 <MX_DMA_Init+0x88>)
 8001e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e8a:	4a13      	ldr	r2, [pc, #76]	@ (8001ed8 <MX_DMA_Init+0x88>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e92:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <MX_DMA_Init+0x88>)
 8001e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	200b      	movs	r0, #11
 8001ea4:	f003 faad 	bl	8005402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ea8:	200b      	movs	r0, #11
 8001eaa:	f003 fac4 	bl	8005436 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	200c      	movs	r0, #12
 8001eb4:	f003 faa5 	bl	8005402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001eb8:	200c      	movs	r0, #12
 8001eba:	f003 fabc 	bl	8005436 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2038      	movs	r0, #56	@ 0x38
 8001ec4:	f003 fa9d 	bl	8005402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001ec8:	2038      	movs	r0, #56	@ 0x38
 8001eca:	f003 fab4 	bl	8005436 <HAL_NVIC_EnableIRQ>

}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000

08001edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	@ 0x28
 8001ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
 8001ef0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef2:	4b7d      	ldr	r3, [pc, #500]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef6:	4a7c      	ldr	r2, [pc, #496]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001efe:	4b7a      	ldr	r3, [pc, #488]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f0a:	4b77      	ldr	r3, [pc, #476]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0e:	4a76      	ldr	r2, [pc, #472]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f10:	f043 0320 	orr.w	r3, r3, #32
 8001f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f16:	4b74      	ldr	r3, [pc, #464]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	4b71      	ldr	r3, [pc, #452]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f26:	4a70      	ldr	r2, [pc, #448]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f2e:	4b6e      	ldr	r3, [pc, #440]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3a:	4b6b      	ldr	r3, [pc, #428]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3e:	4a6a      	ldr	r2, [pc, #424]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f46:	4b68      	ldr	r3, [pc, #416]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f52:	4b65      	ldr	r3, [pc, #404]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f56:	4a64      	ldr	r2, [pc, #400]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f58:	f043 0308 	orr.w	r3, r3, #8
 8001f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f5e:	4b62      	ldr	r3, [pc, #392]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f244 01b0 	movw	r1, #16560	@ 0x40b0
 8001f70:	485e      	ldr	r0, [pc, #376]	@ (80020ec <MX_GPIO_Init+0x210>)
 8001f72:	f003 ff47 	bl	8005e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001f7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f80:	f003 ff40 	bl	8005e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_6, GPIO_PIN_RESET);
 8001f84:	2200      	movs	r2, #0
 8001f86:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8001f8a:	4859      	ldr	r0, [pc, #356]	@ (80020f0 <MX_GPIO_Init+0x214>)
 8001f8c:	f003 ff3a 	bl	8005e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9;
 8001f90:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8001f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4851      	ldr	r0, [pc, #324]	@ (80020ec <MX_GPIO_Init+0x210>)
 8001fa8:	f003 fd92 	bl	8005ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC4 PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001fac:	f244 03b0 	movw	r3, #16560	@ 0x40b0
 8001fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4849      	ldr	r0, [pc, #292]	@ (80020ec <MX_GPIO_Init+0x210>)
 8001fc6:	f003 fd83 	bl	8005ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001fca:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fe6:	f003 fd73 	bl	8005ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_6;
 8001fea:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8001fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4619      	mov	r1, r3
 8002002:	483b      	ldr	r0, [pc, #236]	@ (80020f0 <MX_GPIO_Init+0x214>)
 8002004:	f003 fd64 	bl	8005ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002008:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800200c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002020:	f003 fd56 	bl	8005ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002024:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800202a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800202e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002030:	2302      	movs	r3, #2
 8002032:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4619      	mov	r1, r3
 800203a:	482c      	ldr	r0, [pc, #176]	@ (80020ec <MX_GPIO_Init+0x210>)
 800203c:	f003 fd48 	bl	8005ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002040:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800204a:	2302      	movs	r3, #2
 800204c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	4619      	mov	r1, r3
 8002054:	4825      	ldr	r0, [pc, #148]	@ (80020ec <MX_GPIO_Init+0x210>)
 8002056:	f003 fd3b 	bl	8005ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800205a:	2304      	movs	r3, #4
 800205c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002062:	2302      	movs	r3, #2
 8002064:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4619      	mov	r1, r3
 800206c:	4821      	ldr	r0, [pc, #132]	@ (80020f4 <MX_GPIO_Init+0x218>)
 800206e:	f003 fd2f 	bl	8005ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002072:	2330      	movs	r3, #48	@ 0x30
 8002074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	481a      	ldr	r0, [pc, #104]	@ (80020f0 <MX_GPIO_Init+0x214>)
 8002086:	f003 fd23 	bl	8005ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800208a:	2380      	movs	r3, #128	@ 0x80
 800208c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002092:	2302      	movs	r3, #2
 8002094:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	4814      	ldr	r0, [pc, #80]	@ (80020f0 <MX_GPIO_Init+0x214>)
 800209e:	f003 fd17 	bl	8005ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4619      	mov	r1, r3
 80020b8:	480d      	ldr	r0, [pc, #52]	@ (80020f0 <MX_GPIO_Init+0x214>)
 80020ba:	f003 fd09 	bl	8005ad0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	2017      	movs	r0, #23
 80020c4:	f003 f99d 	bl	8005402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020c8:	2017      	movs	r0, #23
 80020ca:	f003 f9b4 	bl	8005436 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	2028      	movs	r0, #40	@ 0x28
 80020d4:	f003 f995 	bl	8005402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020d8:	2028      	movs	r0, #40	@ 0x28
 80020da:	f003 f9ac 	bl	8005436 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020de:	bf00      	nop
 80020e0:	3728      	adds	r7, #40	@ 0x28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	48000800 	.word	0x48000800
 80020f0:	48000400 	.word	0x48000400
 80020f4:	48000c00 	.word	0x48000c00

080020f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b4b0      	push	{r4, r5, r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a08      	ldr	r2, [pc, #32]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d108      	bne.n	800211a <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 8002108:	4b07      	ldr	r3, [pc, #28]	@ (8002128 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210e:	1e54      	subs	r4, r2, #1
 8002110:	f143 0500 	adc.w	r5, r3, #0
 8002114:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002116:	e9c3 4500 	strd	r4, r5, [r3]
//	{
//	    //check2 +=1;
//		Heartbeat();
//		Routine();
//	}
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	bcb0      	pop	{r4, r5, r7}
 8002122:	4770      	bx	lr
 8002124:	200003d8 	.word	0x200003d8
 8002128:	20000808 	.word	0x20000808

0800212c <micros>:

uint64_t micros()
{
 800212c:	b4b0      	push	{r4, r5, r7}
 800212e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8002130:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <micros+0x2c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	2200      	movs	r2, #0
 8002138:	4618      	mov	r0, r3
 800213a:	4611      	mov	r1, r2
 800213c:	4b07      	ldr	r3, [pc, #28]	@ (800215c <micros+0x30>)
 800213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002142:	1884      	adds	r4, r0, r2
 8002144:	eb41 0503 	adc.w	r5, r1, r3
 8002148:	4622      	mov	r2, r4
 800214a:	462b      	mov	r3, r5
}
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	bcb0      	pop	{r4, r5, r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	200003d8 	.word	0x200003d8
 800215c:	20000808 	.word	0x20000808

08002160 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 8002160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = micros();
 8002168:	f7ff ffe0 	bl	800212c <micros>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4971      	ldr	r1, [pc, #452]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002172:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim2);
 8002176:	4b71      	ldr	r3, [pc, #452]	@ (800233c <QEIEncoderPosVel_Update+0x1dc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217c:	4a6e      	ldr	r2, [pc, #440]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800217e:	6013      	str	r3, [r2, #0]
	//Postion 1 turn calculation
	QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 8002180:	4b6d      	ldr	r3, [pc, #436]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002188:	ee07 3a90 	vmov	s15, r3
 800218c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002190:	4b69      	ldr	r3, [pc, #420]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002192:	edc3 7a06 	vstr	s15, [r3, #24]
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8002196:	4b68      	ldr	r3, [pc, #416]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4b67      	ldr	r3, [pc, #412]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	607b      	str	r3, [r7, #4]
	//Handle Warp around
	if(diffPosition > UINT32_MAX/2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	da02      	bge.n	80021ae <QEIEncoderPosVel_Update+0x4e>
		diffPosition -=UINT32_MAX;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3301      	adds	r3, #1
 80021ac:	607b      	str	r3, [r7, #4]
	if(diffPosition < -UINT32_MAX/2)
		diffPosition +=UINT32_MAX;
	//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001; //sec
 80021ae:	4b62      	ldr	r3, [pc, #392]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 80021b0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80021b4:	4b60      	ldr	r3, [pc, #384]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 80021b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80021ba:	ebb0 0a02 	subs.w	sl, r0, r2
 80021be:	eb61 0b03 	sbc.w	fp, r1, r3
 80021c2:	4650      	mov	r0, sl
 80021c4:	4659      	mov	r1, fp
 80021c6:	f7fe f9ad 	bl	8000524 <__aeabi_ul2d>
 80021ca:	a357      	add	r3, pc, #348	@ (adr r3, 8002328 <QEIEncoderPosVel_Update+0x1c8>)
 80021cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d0:	f7fe f9de 	bl	8000590 <__aeabi_dmul>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	f7fe fca8 	bl	8000b30 <__aeabi_d2f>
 80021e0:	4603      	mov	r3, r0
 80021e2:	603b      	str	r3, [r7, #0]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;  //pulse/sec
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021ee:	ed97 7a00 	vldr	s14, [r7]
 80021f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021f6:	4b50      	ldr	r3, [pc, #320]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 80021f8:	edc3 7a07 	vstr	s15, [r3, #28]

	QEIdata.rad_s = (QEIdata.QEIAngularVelocity*2*3.14)/8192;
 80021fc:	4b4e      	ldr	r3, [pc, #312]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 80021fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8002202:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002206:	ee17 0a90 	vmov	r0, s15
 800220a:	f7fe f969 	bl	80004e0 <__aeabi_f2d>
 800220e:	a348      	add	r3, pc, #288	@ (adr r3, 8002330 <QEIEncoderPosVel_Update+0x1d0>)
 8002210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002214:	f7fe f9bc 	bl	8000590 <__aeabi_dmul>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	4b46      	ldr	r3, [pc, #280]	@ (8002340 <QEIEncoderPosVel_Update+0x1e0>)
 8002226:	f7fe fadd 	bl	80007e4 <__aeabi_ddiv>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	f7fe fc7d 	bl	8000b30 <__aeabi_d2f>
 8002236:	4603      	mov	r3, r0
 8002238:	4a3f      	ldr	r2, [pc, #252]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800223a:	6213      	str	r3, [r2, #32]
	QEIdata.rpm = (QEIdata.QEIAngularVelocity*60)/8192;
 800223c:	4b3e      	ldr	r3, [pc, #248]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800223e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002242:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002344 <QEIEncoderPosVel_Update+0x1e4>
 8002246:	ee27 7a87 	vmul.f32	s14, s15, s14
 800224a:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8002348 <QEIEncoderPosVel_Update+0x1e8>
 800224e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002252:	4b39      	ldr	r3, [pc, #228]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002254:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	QEIdata.linearVel = (QEIdata.QEIAngularVelocity*10)/8192; //velocity (mm/s)
 8002258:	4b37      	ldr	r3, [pc, #220]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800225a:	edd3 7a07 	vldr	s15, [r3, #28]
 800225e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002262:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002266:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002348 <QEIEncoderPosVel_Update+0x1e8>
 800226a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800226e:	4b32      	ldr	r3, [pc, #200]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002270:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	QEIdata.Velocity[NEW] = QEIdata.linearVel;
 8002274:	4b30      	ldr	r3, [pc, #192]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002278:	4a2f      	ldr	r2, [pc, #188]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800227a:	6313      	str	r3, [r2, #48]	@ 0x30
	QEIdata.linearAcc = (QEIdata.Velocity[NEW]-QEIdata.Velocity[OLD])/diffTime;
 800227c:	4b2e      	ldr	r3, [pc, #184]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800227e:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8002282:	4b2d      	ldr	r3, [pc, #180]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002284:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002288:	ee77 6a67 	vsub.f32	s13, s14, s15
 800228c:	ed97 7a00 	vldr	s14, [r7]
 8002290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002294:	4b28      	ldr	r3, [pc, #160]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002296:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38


	if(QEIdata.Position[NEW] < 2147483648){
 800229a:	4b27      	ldr	r3, [pc, #156]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db11      	blt.n	80022c6 <QEIEncoderPosVel_Update+0x166>
		QEIdata.linearPos = ((float)QEIdata.Position[NEW]*10)/8192; //position (mm)
 80022a2:	4b25      	ldr	r3, [pc, #148]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ae:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80022b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022b6:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8002348 <QEIEncoderPosVel_Update+0x1e8>
 80022ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022be:	4b1e      	ldr	r3, [pc, #120]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 80022c0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 80022c4:	e01c      	b.n	8002300 <QEIEncoderPosVel_Update+0x1a0>
	}
	else{
		QEIdata.linearPos = -((float)(4294967295 - QEIdata.Position[NEW])*10)/8192;
 80022c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2200      	movs	r2, #0
 80022cc:	461c      	mov	r4, r3
 80022ce:	4615      	mov	r5, r2
 80022d0:	2300      	movs	r3, #0
 80022d2:	f1d4 38ff 	rsbs	r8, r4, #4294967295
 80022d6:	eb63 0905 	sbc.w	r9, r3, r5
 80022da:	4640      	mov	r0, r8
 80022dc:	4649      	mov	r1, r9
 80022de:	f7fe fd47 	bl	8000d70 <__aeabi_l2f>
 80022e2:	ee07 0a10 	vmov	s14, r0
 80022e6:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80022ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ee:	eeb1 7a67 	vneg.f32	s14, s15
 80022f2:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002348 <QEIEncoderPosVel_Update+0x1e8>
 80022f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 80022fc:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	}

	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8002300:	4b0d      	ldr	r3, [pc, #52]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0c      	ldr	r2, [pc, #48]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002306:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8002308:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800230a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800230e:	490a      	ldr	r1, [pc, #40]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002310:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata.Velocity[OLD] = QEIdata.Velocity[NEW];
 8002314:	4b08      	ldr	r3, [pc, #32]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002318:	4a07      	ldr	r2, [pc, #28]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800231a:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002326:	bf00      	nop
 8002328:	a0b5ed8d 	.word	0xa0b5ed8d
 800232c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002330:	51eb851f 	.word	0x51eb851f
 8002334:	40091eb8 	.word	0x40091eb8
 8002338:	200007c8 	.word	0x200007c8
 800233c:	20000174 	.word	0x20000174
 8002340:	40c00000 	.word	0x40c00000
 8002344:	42700000 	.word	0x42700000
 8002348:	46000000 	.word	0x46000000

0800234c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	80fb      	strh	r3, [r7, #6]
//		}
//		else if(mode == 2){
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
//		}
//	}
	if(GPIO_Pin == GPIO_PIN_8){ //check top sensor
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800235c:	d104      	bne.n	8002368 <HAL_GPIO_EXTI_Callback+0x1c>
		S_top = 1;
 800235e:	4b09      	ldr	r3, [pc, #36]	@ (8002384 <HAL_GPIO_EXTI_Callback+0x38>)
 8002360:	2201      	movs	r2, #1
 8002362:	601a      	str	r2, [r3, #0]
		//Vin = -2;
		DriveMotor();
 8002364:	f000 fe20 	bl	8002fa8 <DriveMotor>
	}
	if(GPIO_Pin == GPIO_PIN_9){ //check down sensor
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800236e:	d104      	bne.n	800237a <HAL_GPIO_EXTI_Callback+0x2e>
		S_down = 1;
 8002370:	4b05      	ldr	r3, [pc, #20]	@ (8002388 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]
		//Vin = 2;
		DriveMotor();
 8002376:	f000 fe17 	bl	8002fa8 <DriveMotor>
	}
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200008dc 	.word	0x200008dc
 8002388:	200008e0 	.word	0x200008e0

0800238c <checkStartMoving>:

//-----------------------------------Trajectory------------------------------------------//
void checkStartMoving(){
 800238c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
	if(q_f != q_f_old){
 8002394:	4b9d      	ldr	r3, [pc, #628]	@ (800260c <checkStartMoving+0x280>)
 8002396:	ed93 7a00 	vldr	s14, [r3]
 800239a:	4b9d      	ldr	r3, [pc, #628]	@ (8002610 <checkStartMoving+0x284>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	eeb4 7a67 	vcmp.f32	s14, s15
 80023a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a8:	f000 8201 	beq.w	80027ae <checkStartMoving+0x422>
		q_i = q_f_old;   //Define q_i
 80023ac:	4b98      	ldr	r3, [pc, #608]	@ (8002610 <checkStartMoving+0x284>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a98      	ldr	r2, [pc, #608]	@ (8002614 <checkStartMoving+0x288>)
 80023b2:	6013      	str	r3, [r2, #0]
		delta_q = q_f - q_i;
 80023b4:	4b95      	ldr	r3, [pc, #596]	@ (800260c <checkStartMoving+0x280>)
 80023b6:	ed93 7a00 	vldr	s14, [r3]
 80023ba:	4b96      	ldr	r3, [pc, #600]	@ (8002614 <checkStartMoving+0x288>)
 80023bc:	edd3 7a00 	vldr	s15, [r3]
 80023c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c4:	4b94      	ldr	r3, [pc, #592]	@ (8002618 <checkStartMoving+0x28c>)
 80023c6:	edc3 7a00 	vstr	s15, [r3]
		if(delta_q < 0){
 80023ca:	4b93      	ldr	r3, [pc, #588]	@ (8002618 <checkStartMoving+0x28c>)
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	d504      	bpl.n	80023e4 <checkStartMoving+0x58>
			dir = -1;
 80023da:	4b90      	ldr	r3, [pc, #576]	@ (800261c <checkStartMoving+0x290>)
 80023dc:	f04f 32ff 	mov.w	r2, #4294967295
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	e002      	b.n	80023ea <checkStartMoving+0x5e>
		}
		else{
			dir = 1;
 80023e4:	4b8d      	ldr	r3, [pc, #564]	@ (800261c <checkStartMoving+0x290>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	601a      	str	r2, [r3, #0]
		}

		float q_check = fabs(q_d_i + q_2d_max*sqrt(fabs(delta_q)/q_2d_max)*dir);
 80023ea:	4b8d      	ldr	r3, [pc, #564]	@ (8002620 <checkStartMoving+0x294>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f876 	bl	80004e0 <__aeabi_f2d>
 80023f4:	4604      	mov	r4, r0
 80023f6:	460d      	mov	r5, r1
 80023f8:	4b8a      	ldr	r3, [pc, #552]	@ (8002624 <checkStartMoving+0x298>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f86f 	bl	80004e0 <__aeabi_f2d>
 8002402:	4680      	mov	r8, r0
 8002404:	4689      	mov	r9, r1
 8002406:	4b84      	ldr	r3, [pc, #528]	@ (8002618 <checkStartMoving+0x28c>)
 8002408:	edd3 7a00 	vldr	s15, [r3]
 800240c:	eef0 7ae7 	vabs.f32	s15, s15
 8002410:	ee17 0a90 	vmov	r0, s15
 8002414:	f7fe f864 	bl	80004e0 <__aeabi_f2d>
 8002418:	4682      	mov	sl, r0
 800241a:	468b      	mov	fp, r1
 800241c:	4b81      	ldr	r3, [pc, #516]	@ (8002624 <checkStartMoving+0x298>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f85d 	bl	80004e0 <__aeabi_f2d>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4650      	mov	r0, sl
 800242c:	4659      	mov	r1, fp
 800242e:	f7fe f9d9 	bl	80007e4 <__aeabi_ddiv>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	ec43 2b17 	vmov	d7, r2, r3
 800243a:	eeb0 0a47 	vmov.f32	s0, s14
 800243e:	eef0 0a67 	vmov.f32	s1, s15
 8002442:	f008 fc19 	bl	800ac78 <sqrt>
 8002446:	ec53 2b10 	vmov	r2, r3, d0
 800244a:	4640      	mov	r0, r8
 800244c:	4649      	mov	r1, r9
 800244e:	f7fe f89f 	bl	8000590 <__aeabi_dmul>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4690      	mov	r8, r2
 8002458:	4699      	mov	r9, r3
 800245a:	4b70      	ldr	r3, [pc, #448]	@ (800261c <checkStartMoving+0x290>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe f82c 	bl	80004bc <__aeabi_i2d>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4640      	mov	r0, r8
 800246a:	4649      	mov	r1, r9
 800246c:	f7fe f890 	bl	8000590 <__aeabi_dmul>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4620      	mov	r0, r4
 8002476:	4629      	mov	r1, r5
 8002478:	f7fd fed4 	bl	8000224 <__adddf3>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	f7fe fb54 	bl	8000b30 <__aeabi_d2f>
 8002488:	ee07 0a90 	vmov	s15, r0
 800248c:	eef0 7ae7 	vabs.f32	s15, s15
 8002490:	edc7 7a01 	vstr	s15, [r7, #4]

		if(q_check >= q_d_max){ //Accelerate to maximum speed
 8002494:	4b64      	ldr	r3, [pc, #400]	@ (8002628 <checkStartMoving+0x29c>)
 8002496:	edd3 7a00 	vldr	s15, [r3]
 800249a:	ed97 7a01 	vldr	s14, [r7, #4]
 800249e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a6:	f2c0 80cf 	blt.w	8002648 <checkStartMoving+0x2bc>
			calmode = 1;
 80024aa:	4b60      	ldr	r3, [pc, #384]	@ (800262c <checkStartMoving+0x2a0>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
			t_acc = fabs((q_d_max-q_d_i)/q_2d_max);
 80024b0:	4b5d      	ldr	r3, [pc, #372]	@ (8002628 <checkStartMoving+0x29c>)
 80024b2:	ed93 7a00 	vldr	s14, [r3]
 80024b6:	4b5a      	ldr	r3, [pc, #360]	@ (8002620 <checkStartMoving+0x294>)
 80024b8:	edd3 7a00 	vldr	s15, [r3]
 80024bc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024c0:	4b58      	ldr	r3, [pc, #352]	@ (8002624 <checkStartMoving+0x298>)
 80024c2:	ed93 7a00 	vldr	s14, [r3]
 80024c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ca:	eef0 7ae7 	vabs.f32	s15, s15
 80024ce:	4b58      	ldr	r3, [pc, #352]	@ (8002630 <checkStartMoving+0x2a4>)
 80024d0:	edc3 7a00 	vstr	s15, [r3]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 80024d4:	4b52      	ldr	r3, [pc, #328]	@ (8002620 <checkStartMoving+0x294>)
 80024d6:	ed93 7a00 	vldr	s14, [r3]
 80024da:	4b55      	ldr	r3, [pc, #340]	@ (8002630 <checkStartMoving+0x2a4>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024e4:	4b4d      	ldr	r3, [pc, #308]	@ (800261c <checkStartMoving+0x290>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	ee07 3a90 	vmov	s15, r3
 80024ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f4:	ee17 0a90 	vmov	r0, s15
 80024f8:	f7fd fff2 	bl	80004e0 <__aeabi_f2d>
 80024fc:	4604      	mov	r4, r0
 80024fe:	460d      	mov	r5, r1
 8002500:	4b48      	ldr	r3, [pc, #288]	@ (8002624 <checkStartMoving+0x298>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fd ffeb 	bl	80004e0 <__aeabi_f2d>
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	4b49      	ldr	r3, [pc, #292]	@ (8002634 <checkStartMoving+0x2a8>)
 8002510:	f7fe f83e 	bl	8000590 <__aeabi_dmul>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4690      	mov	r8, r2
 800251a:	4699      	mov	r9, r3
 800251c:	4b44      	ldr	r3, [pc, #272]	@ (8002630 <checkStartMoving+0x2a4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7fd ffdd 	bl	80004e0 <__aeabi_f2d>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4640      	mov	r0, r8
 800252c:	4649      	mov	r1, r9
 800252e:	f7fe f82f 	bl	8000590 <__aeabi_dmul>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4690      	mov	r8, r2
 8002538:	4699      	mov	r9, r3
 800253a:	4b3d      	ldr	r3, [pc, #244]	@ (8002630 <checkStartMoving+0x2a4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fd ffce 	bl	80004e0 <__aeabi_f2d>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4640      	mov	r0, r8
 800254a:	4649      	mov	r1, r9
 800254c:	f7fe f820 	bl	8000590 <__aeabi_dmul>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4690      	mov	r8, r2
 8002556:	4699      	mov	r9, r3
 8002558:	4b30      	ldr	r3, [pc, #192]	@ (800261c <checkStartMoving+0x290>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd ffad 	bl	80004bc <__aeabi_i2d>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4640      	mov	r0, r8
 8002568:	4649      	mov	r1, r9
 800256a:	f7fe f811 	bl	8000590 <__aeabi_dmul>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4620      	mov	r0, r4
 8002574:	4629      	mov	r1, r5
 8002576:	f7fd fe55 	bl	8000224 <__adddf3>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4610      	mov	r0, r2
 8002580:	4619      	mov	r1, r3
 8002582:	f7fe fad5 	bl	8000b30 <__aeabi_d2f>
 8002586:	4603      	mov	r3, r0
 8002588:	4a2b      	ldr	r2, [pc, #172]	@ (8002638 <checkStartMoving+0x2ac>)
 800258a:	6013      	str	r3, [r2, #0]
			t_const = fabs((q_f-q_i-2*q_acc)/q_d_max);
 800258c:	4b1f      	ldr	r3, [pc, #124]	@ (800260c <checkStartMoving+0x280>)
 800258e:	ed93 7a00 	vldr	s14, [r3]
 8002592:	4b20      	ldr	r3, [pc, #128]	@ (8002614 <checkStartMoving+0x288>)
 8002594:	edd3 7a00 	vldr	s15, [r3]
 8002598:	ee37 7a67 	vsub.f32	s14, s14, s15
 800259c:	4b26      	ldr	r3, [pc, #152]	@ (8002638 <checkStartMoving+0x2ac>)
 800259e:	edd3 7a00 	vldr	s15, [r3]
 80025a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002628 <checkStartMoving+0x29c>)
 80025ac:	ed93 7a00 	vldr	s14, [r3]
 80025b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025b4:	eef0 7ae7 	vabs.f32	s15, s15
 80025b8:	4b20      	ldr	r3, [pc, #128]	@ (800263c <checkStartMoving+0x2b0>)
 80025ba:	edc3 7a00 	vstr	s15, [r3]
			q_const = q_acc + q_d_max*t_const*dir;
 80025be:	4b1a      	ldr	r3, [pc, #104]	@ (8002628 <checkStartMoving+0x29c>)
 80025c0:	ed93 7a00 	vldr	s14, [r3]
 80025c4:	4b1d      	ldr	r3, [pc, #116]	@ (800263c <checkStartMoving+0x2b0>)
 80025c6:	edd3 7a00 	vldr	s15, [r3]
 80025ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ce:	4b13      	ldr	r3, [pc, #76]	@ (800261c <checkStartMoving+0x290>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	ee07 3a90 	vmov	s15, r3
 80025d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025de:	4b16      	ldr	r3, [pc, #88]	@ (8002638 <checkStartMoving+0x2ac>)
 80025e0:	edd3 7a00 	vldr	s15, [r3]
 80025e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e8:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <checkStartMoving+0x2b4>)
 80025ea:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc + t_const;
 80025ee:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <checkStartMoving+0x2a4>)
 80025f0:	edd3 7a00 	vldr	s15, [r3]
 80025f4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80025f8:	4b10      	ldr	r3, [pc, #64]	@ (800263c <checkStartMoving+0x2b0>)
 80025fa:	edd3 7a00 	vldr	s15, [r3]
 80025fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002602:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <checkStartMoving+0x2b8>)
 8002604:	edc3 7a00 	vstr	s15, [r3]
 8002608:	e0c6      	b.n	8002798 <checkStartMoving+0x40c>
 800260a:	bf00      	nop
 800260c:	20000824 	.word	0x20000824
 8002610:	2000083c 	.word	0x2000083c
 8002614:	20000828 	.word	0x20000828
 8002618:	2000082c 	.word	0x2000082c
 800261c:	20000014 	.word	0x20000014
 8002620:	20000820 	.word	0x20000820
 8002624:	2000000c 	.word	0x2000000c
 8002628:	20000008 	.word	0x20000008
 800262c:	20000010 	.word	0x20000010
 8002630:	20000840 	.word	0x20000840
 8002634:	3fe00000 	.word	0x3fe00000
 8002638:	20000844 	.word	0x20000844
 800263c:	20000848 	.word	0x20000848
 8002640:	2000084c 	.word	0x2000084c
 8002644:	20000864 	.word	0x20000864
		}
		else{ //Accelerating does not reach maximum speed
			calmode = 2;
 8002648:	4b5b      	ldr	r3, [pc, #364]	@ (80027b8 <checkStartMoving+0x42c>)
 800264a:	2202      	movs	r2, #2
 800264c:	701a      	strb	r2, [r3, #0]
			t_acc = sqrt(fabs(delta_q)/q_2d_max);
 800264e:	4b5b      	ldr	r3, [pc, #364]	@ (80027bc <checkStartMoving+0x430>)
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	eef0 7ae7 	vabs.f32	s15, s15
 8002658:	ee17 0a90 	vmov	r0, s15
 800265c:	f7fd ff40 	bl	80004e0 <__aeabi_f2d>
 8002660:	4604      	mov	r4, r0
 8002662:	460d      	mov	r5, r1
 8002664:	4b56      	ldr	r3, [pc, #344]	@ (80027c0 <checkStartMoving+0x434>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fd ff39 	bl	80004e0 <__aeabi_f2d>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4620      	mov	r0, r4
 8002674:	4629      	mov	r1, r5
 8002676:	f7fe f8b5 	bl	80007e4 <__aeabi_ddiv>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	ec43 2b17 	vmov	d7, r2, r3
 8002682:	eeb0 0a47 	vmov.f32	s0, s14
 8002686:	eef0 0a67 	vmov.f32	s1, s15
 800268a:	f008 faf5 	bl	800ac78 <sqrt>
 800268e:	ec53 2b10 	vmov	r2, r3, d0
 8002692:	4610      	mov	r0, r2
 8002694:	4619      	mov	r1, r3
 8002696:	f7fe fa4b 	bl	8000b30 <__aeabi_d2f>
 800269a:	4603      	mov	r3, r0
 800269c:	4a49      	ldr	r2, [pc, #292]	@ (80027c4 <checkStartMoving+0x438>)
 800269e:	6013      	str	r3, [r2, #0]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 80026a0:	4b49      	ldr	r3, [pc, #292]	@ (80027c8 <checkStartMoving+0x43c>)
 80026a2:	ed93 7a00 	vldr	s14, [r3]
 80026a6:	4b47      	ldr	r3, [pc, #284]	@ (80027c4 <checkStartMoving+0x438>)
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026b0:	4b46      	ldr	r3, [pc, #280]	@ (80027cc <checkStartMoving+0x440>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	ee07 3a90 	vmov	s15, r3
 80026b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c0:	ee17 0a90 	vmov	r0, s15
 80026c4:	f7fd ff0c 	bl	80004e0 <__aeabi_f2d>
 80026c8:	4604      	mov	r4, r0
 80026ca:	460d      	mov	r5, r1
 80026cc:	4b3c      	ldr	r3, [pc, #240]	@ (80027c0 <checkStartMoving+0x434>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd ff05 	bl	80004e0 <__aeabi_f2d>
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	4b3d      	ldr	r3, [pc, #244]	@ (80027d0 <checkStartMoving+0x444>)
 80026dc:	f7fd ff58 	bl	8000590 <__aeabi_dmul>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4690      	mov	r8, r2
 80026e6:	4699      	mov	r9, r3
 80026e8:	4b36      	ldr	r3, [pc, #216]	@ (80027c4 <checkStartMoving+0x438>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fd fef7 	bl	80004e0 <__aeabi_f2d>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4640      	mov	r0, r8
 80026f8:	4649      	mov	r1, r9
 80026fa:	f7fd ff49 	bl	8000590 <__aeabi_dmul>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4690      	mov	r8, r2
 8002704:	4699      	mov	r9, r3
 8002706:	4b2f      	ldr	r3, [pc, #188]	@ (80027c4 <checkStartMoving+0x438>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fd fee8 	bl	80004e0 <__aeabi_f2d>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4640      	mov	r0, r8
 8002716:	4649      	mov	r1, r9
 8002718:	f7fd ff3a 	bl	8000590 <__aeabi_dmul>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4690      	mov	r8, r2
 8002722:	4699      	mov	r9, r3
 8002724:	4b29      	ldr	r3, [pc, #164]	@ (80027cc <checkStartMoving+0x440>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd fec7 	bl	80004bc <__aeabi_i2d>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4640      	mov	r0, r8
 8002734:	4649      	mov	r1, r9
 8002736:	f7fd ff2b 	bl	8000590 <__aeabi_dmul>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4620      	mov	r0, r4
 8002740:	4629      	mov	r1, r5
 8002742:	f7fd fd6f 	bl	8000224 <__adddf3>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4610      	mov	r0, r2
 800274c:	4619      	mov	r1, r3
 800274e:	f7fe f9ef 	bl	8000b30 <__aeabi_d2f>
 8002752:	4603      	mov	r3, r0
 8002754:	4a1f      	ldr	r2, [pc, #124]	@ (80027d4 <checkStartMoving+0x448>)
 8002756:	6013      	str	r3, [r2, #0]
			q_d_acc = q_d_i + q_2d_max*t_acc*dir;
 8002758:	4b19      	ldr	r3, [pc, #100]	@ (80027c0 <checkStartMoving+0x434>)
 800275a:	ed93 7a00 	vldr	s14, [r3]
 800275e:	4b19      	ldr	r3, [pc, #100]	@ (80027c4 <checkStartMoving+0x438>)
 8002760:	edd3 7a00 	vldr	s15, [r3]
 8002764:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002768:	4b18      	ldr	r3, [pc, #96]	@ (80027cc <checkStartMoving+0x440>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	ee07 3a90 	vmov	s15, r3
 8002770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002774:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002778:	4b13      	ldr	r3, [pc, #76]	@ (80027c8 <checkStartMoving+0x43c>)
 800277a:	edd3 7a00 	vldr	s15, [r3]
 800277e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002782:	4b15      	ldr	r3, [pc, #84]	@ (80027d8 <checkStartMoving+0x44c>)
 8002784:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc;
 8002788:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <checkStartMoving+0x438>)
 800278a:	edd3 7a00 	vldr	s15, [r3]
 800278e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002792:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <checkStartMoving+0x450>)
 8002794:	edc3 7a00 	vstr	s15, [r3]
		}
		T_start = micros();
 8002798:	f7ff fcc8 	bl	800212c <micros>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	490f      	ldr	r1, [pc, #60]	@ (80027e0 <checkStartMoving+0x454>)
 80027a2:	e9c1 2300 	strd	r2, r3, [r1]
		q_f_old = q_f;
 80027a6:	4b0f      	ldr	r3, [pc, #60]	@ (80027e4 <checkStartMoving+0x458>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a0f      	ldr	r2, [pc, #60]	@ (80027e8 <checkStartMoving+0x45c>)
 80027ac:	6013      	str	r3, [r2, #0]
	}
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027b8:	20000010 	.word	0x20000010
 80027bc:	2000082c 	.word	0x2000082c
 80027c0:	2000000c 	.word	0x2000000c
 80027c4:	20000840 	.word	0x20000840
 80027c8:	20000820 	.word	0x20000820
 80027cc:	20000014 	.word	0x20000014
 80027d0:	3fe00000 	.word	0x3fe00000
 80027d4:	20000844 	.word	0x20000844
 80027d8:	20000850 	.word	0x20000850
 80027dc:	20000864 	.word	0x20000864
 80027e0:	20000858 	.word	0x20000858
 80027e4:	20000824 	.word	0x20000824
 80027e8:	2000083c 	.word	0x2000083c

080027ec <createTrajectory>:

void createTrajectory(){
 80027ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027f0:	af00      	add	r7, sp, #0
	if(calmode == 1){
 80027f2:	4b84      	ldr	r3, [pc, #528]	@ (8002a04 <createTrajectory+0x218>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	f040 822c 	bne.w	8002c54 <createTrajectory+0x468>
		t = (float)(micros()-T_start)/1000000; //sec
 80027fc:	f7ff fc96 	bl	800212c <micros>
 8002800:	4b81      	ldr	r3, [pc, #516]	@ (8002a08 <createTrajectory+0x21c>)
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	ebb0 0802 	subs.w	r8, r0, r2
 800280a:	eb61 0903 	sbc.w	r9, r1, r3
 800280e:	4640      	mov	r0, r8
 8002810:	4649      	mov	r1, r9
 8002812:	f7fe faa5 	bl	8000d60 <__aeabi_ul2f>
 8002816:	ee06 0a90 	vmov	s13, r0
 800281a:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8002a0c <createTrajectory+0x220>
 800281e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002822:	4b7b      	ldr	r3, [pc, #492]	@ (8002a10 <createTrajectory+0x224>)
 8002824:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 8002828:	4b79      	ldr	r3, [pc, #484]	@ (8002a10 <createTrajectory+0x224>)
 800282a:	edd3 7a00 	vldr	s15, [r3]
 800282e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002836:	f2c0 8094 	blt.w	8002962 <createTrajectory+0x176>
 800283a:	4b75      	ldr	r3, [pc, #468]	@ (8002a10 <createTrajectory+0x224>)
 800283c:	ed93 7a00 	vldr	s14, [r3]
 8002840:	4b74      	ldr	r3, [pc, #464]	@ (8002a14 <createTrajectory+0x228>)
 8002842:	edd3 7a00 	vldr	s15, [r3]
 8002846:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800284a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284e:	f140 8088 	bpl.w	8002962 <createTrajectory+0x176>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 8002852:	4b71      	ldr	r3, [pc, #452]	@ (8002a18 <createTrajectory+0x22c>)
 8002854:	ed93 7a00 	vldr	s14, [r3]
 8002858:	4b6d      	ldr	r3, [pc, #436]	@ (8002a10 <createTrajectory+0x224>)
 800285a:	edd3 7a00 	vldr	s15, [r3]
 800285e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002862:	4b6e      	ldr	r3, [pc, #440]	@ (8002a1c <createTrajectory+0x230>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	ee07 3a90 	vmov	s15, r3
 800286a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800286e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002872:	4b6b      	ldr	r3, [pc, #428]	@ (8002a20 <createTrajectory+0x234>)
 8002874:	edd3 7a00 	vldr	s15, [r3]
 8002878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800287c:	ee17 0a90 	vmov	r0, s15
 8002880:	f7fd fe2e 	bl	80004e0 <__aeabi_f2d>
 8002884:	4604      	mov	r4, r0
 8002886:	460d      	mov	r5, r1
 8002888:	4b66      	ldr	r3, [pc, #408]	@ (8002a24 <createTrajectory+0x238>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7fd fe27 	bl	80004e0 <__aeabi_f2d>
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	4b64      	ldr	r3, [pc, #400]	@ (8002a28 <createTrajectory+0x23c>)
 8002898:	f7fd fe7a 	bl	8000590 <__aeabi_dmul>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4690      	mov	r8, r2
 80028a2:	4699      	mov	r9, r3
 80028a4:	4b5a      	ldr	r3, [pc, #360]	@ (8002a10 <createTrajectory+0x224>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fe19 	bl	80004e0 <__aeabi_f2d>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4640      	mov	r0, r8
 80028b4:	4649      	mov	r1, r9
 80028b6:	f7fd fe6b 	bl	8000590 <__aeabi_dmul>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4690      	mov	r8, r2
 80028c0:	4699      	mov	r9, r3
 80028c2:	4b53      	ldr	r3, [pc, #332]	@ (8002a10 <createTrajectory+0x224>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fe0a 	bl	80004e0 <__aeabi_f2d>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4640      	mov	r0, r8
 80028d2:	4649      	mov	r1, r9
 80028d4:	f7fd fe5c 	bl	8000590 <__aeabi_dmul>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4690      	mov	r8, r2
 80028de:	4699      	mov	r9, r3
 80028e0:	4b4e      	ldr	r3, [pc, #312]	@ (8002a1c <createTrajectory+0x230>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fd fde9 	bl	80004bc <__aeabi_i2d>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4640      	mov	r0, r8
 80028f0:	4649      	mov	r1, r9
 80028f2:	f7fd fe4d 	bl	8000590 <__aeabi_dmul>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4620      	mov	r0, r4
 80028fc:	4629      	mov	r1, r5
 80028fe:	f7fd fc91 	bl	8000224 <__adddf3>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	f7fe f911 	bl	8000b30 <__aeabi_d2f>
 800290e:	4603      	mov	r3, r0
 8002910:	4a46      	ldr	r2, [pc, #280]	@ (8002a2c <createTrajectory+0x240>)
 8002912:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 8002914:	4b43      	ldr	r3, [pc, #268]	@ (8002a24 <createTrajectory+0x238>)
 8002916:	ed93 7a00 	vldr	s14, [r3]
 800291a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a10 <createTrajectory+0x224>)
 800291c:	edd3 7a00 	vldr	s15, [r3]
 8002920:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002924:	4b3d      	ldr	r3, [pc, #244]	@ (8002a1c <createTrajectory+0x230>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	ee07 3a90 	vmov	s15, r3
 800292c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002930:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002934:	4b38      	ldr	r3, [pc, #224]	@ (8002a18 <createTrajectory+0x22c>)
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a30 <createTrajectory+0x244>)
 8002940:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 8002944:	4b35      	ldr	r3, [pc, #212]	@ (8002a1c <createTrajectory+0x230>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002950:	4b34      	ldr	r3, [pc, #208]	@ (8002a24 <createTrajectory+0x238>)
 8002952:	edd3 7a00 	vldr	s15, [r3]
 8002956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800295a:	4b36      	ldr	r3, [pc, #216]	@ (8002a34 <createTrajectory+0x248>)
 800295c:	edc3 7a00 	vstr	s15, [r3]
 8002960:	e2fd      	b.n	8002f5e <createTrajectory+0x772>
		}
		else if((t_acc <= t) && (t < t_acc+t_const)){ //Constant Velocity Segment
 8002962:	4b2c      	ldr	r3, [pc, #176]	@ (8002a14 <createTrajectory+0x228>)
 8002964:	ed93 7a00 	vldr	s14, [r3]
 8002968:	4b29      	ldr	r3, [pc, #164]	@ (8002a10 <createTrajectory+0x224>)
 800296a:	edd3 7a00 	vldr	s15, [r3]
 800296e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002976:	d865      	bhi.n	8002a44 <createTrajectory+0x258>
 8002978:	4b26      	ldr	r3, [pc, #152]	@ (8002a14 <createTrajectory+0x228>)
 800297a:	ed93 7a00 	vldr	s14, [r3]
 800297e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a38 <createTrajectory+0x24c>)
 8002980:	edd3 7a00 	vldr	s15, [r3]
 8002984:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002988:	4b21      	ldr	r3, [pc, #132]	@ (8002a10 <createTrajectory+0x224>)
 800298a:	edd3 7a00 	vldr	s15, [r3]
 800298e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002996:	dd55      	ble.n	8002a44 <createTrajectory+0x258>
			ref_p = q_i + q_acc + q_d_max*(t-t_acc)*dir;
 8002998:	4b21      	ldr	r3, [pc, #132]	@ (8002a20 <createTrajectory+0x234>)
 800299a:	ed93 7a00 	vldr	s14, [r3]
 800299e:	4b27      	ldr	r3, [pc, #156]	@ (8002a3c <createTrajectory+0x250>)
 80029a0:	edd3 7a00 	vldr	s15, [r3]
 80029a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029a8:	4b19      	ldr	r3, [pc, #100]	@ (8002a10 <createTrajectory+0x224>)
 80029aa:	edd3 6a00 	vldr	s13, [r3]
 80029ae:	4b19      	ldr	r3, [pc, #100]	@ (8002a14 <createTrajectory+0x228>)
 80029b0:	edd3 7a00 	vldr	s15, [r3]
 80029b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029b8:	4b21      	ldr	r3, [pc, #132]	@ (8002a40 <createTrajectory+0x254>)
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029c2:	4b16      	ldr	r3, [pc, #88]	@ (8002a1c <createTrajectory+0x230>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d6:	4b15      	ldr	r3, [pc, #84]	@ (8002a2c <createTrajectory+0x240>)
 80029d8:	edc3 7a00 	vstr	s15, [r3]
			ref_v = q_d_max*dir;
 80029dc:	4b0f      	ldr	r3, [pc, #60]	@ (8002a1c <createTrajectory+0x230>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	ee07 3a90 	vmov	s15, r3
 80029e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029e8:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <createTrajectory+0x254>)
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a30 <createTrajectory+0x244>)
 80029f4:	edc3 7a00 	vstr	s15, [r3]
			ref_a = 0;
 80029f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a34 <createTrajectory+0x248>)
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	e2ad      	b.n	8002f5e <createTrajectory+0x772>
 8002a02:	bf00      	nop
 8002a04:	20000010 	.word	0x20000010
 8002a08:	20000858 	.word	0x20000858
 8002a0c:	49742400 	.word	0x49742400
 8002a10:	20000860 	.word	0x20000860
 8002a14:	20000840 	.word	0x20000840
 8002a18:	20000820 	.word	0x20000820
 8002a1c:	20000014 	.word	0x20000014
 8002a20:	20000828 	.word	0x20000828
 8002a24:	2000000c 	.word	0x2000000c
 8002a28:	3fe00000 	.word	0x3fe00000
 8002a2c:	20000830 	.word	0x20000830
 8002a30:	20000834 	.word	0x20000834
 8002a34:	20000838 	.word	0x20000838
 8002a38:	20000848 	.word	0x20000848
 8002a3c:	20000844 	.word	0x20000844
 8002a40:	20000008 	.word	0x20000008
		}
		else if((t_acc+t_const <= t) && (t < 2*t_acc+t_const)){ //Deceleration Segment
 8002a44:	4b76      	ldr	r3, [pc, #472]	@ (8002c20 <createTrajectory+0x434>)
 8002a46:	ed93 7a00 	vldr	s14, [r3]
 8002a4a:	4b76      	ldr	r3, [pc, #472]	@ (8002c24 <createTrajectory+0x438>)
 8002a4c:	edd3 7a00 	vldr	s15, [r3]
 8002a50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a54:	4b74      	ldr	r3, [pc, #464]	@ (8002c28 <createTrajectory+0x43c>)
 8002a56:	edd3 7a00 	vldr	s15, [r3]
 8002a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a62:	f200 80d8 	bhi.w	8002c16 <createTrajectory+0x42a>
 8002a66:	4b6e      	ldr	r3, [pc, #440]	@ (8002c20 <createTrajectory+0x434>)
 8002a68:	edd3 7a00 	vldr	s15, [r3]
 8002a6c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a70:	4b6c      	ldr	r3, [pc, #432]	@ (8002c24 <createTrajectory+0x438>)
 8002a72:	edd3 7a00 	vldr	s15, [r3]
 8002a76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a7a:	4b6b      	ldr	r3, [pc, #428]	@ (8002c28 <createTrajectory+0x43c>)
 8002a7c:	edd3 7a00 	vldr	s15, [r3]
 8002a80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a88:	f340 80c5 	ble.w	8002c16 <createTrajectory+0x42a>
			ref_p = q_i + q_const + q_d_max*(t-t_acc-t_const)*dir-0.5*q_2d_max*(t-t_acc-t_const)*(t-t_acc-t_const)*dir;
 8002a8c:	4b67      	ldr	r3, [pc, #412]	@ (8002c2c <createTrajectory+0x440>)
 8002a8e:	ed93 7a00 	vldr	s14, [r3]
 8002a92:	4b67      	ldr	r3, [pc, #412]	@ (8002c30 <createTrajectory+0x444>)
 8002a94:	edd3 7a00 	vldr	s15, [r3]
 8002a98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a9c:	4b62      	ldr	r3, [pc, #392]	@ (8002c28 <createTrajectory+0x43c>)
 8002a9e:	edd3 6a00 	vldr	s13, [r3]
 8002aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8002c20 <createTrajectory+0x434>)
 8002aa4:	edd3 7a00 	vldr	s15, [r3]
 8002aa8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002aac:	4b5d      	ldr	r3, [pc, #372]	@ (8002c24 <createTrajectory+0x438>)
 8002aae:	edd3 7a00 	vldr	s15, [r3]
 8002ab2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ab6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c34 <createTrajectory+0x448>)
 8002ab8:	edd3 7a00 	vldr	s15, [r3]
 8002abc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ac0:	4b5d      	ldr	r3, [pc, #372]	@ (8002c38 <createTrajectory+0x44c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	ee07 3a90 	vmov	s15, r3
 8002ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad4:	ee17 0a90 	vmov	r0, s15
 8002ad8:	f7fd fd02 	bl	80004e0 <__aeabi_f2d>
 8002adc:	4604      	mov	r4, r0
 8002ade:	460d      	mov	r5, r1
 8002ae0:	4b56      	ldr	r3, [pc, #344]	@ (8002c3c <createTrajectory+0x450>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd fcfb 	bl	80004e0 <__aeabi_f2d>
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	4b54      	ldr	r3, [pc, #336]	@ (8002c40 <createTrajectory+0x454>)
 8002af0:	f7fd fd4e 	bl	8000590 <__aeabi_dmul>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4690      	mov	r8, r2
 8002afa:	4699      	mov	r9, r3
 8002afc:	4b4a      	ldr	r3, [pc, #296]	@ (8002c28 <createTrajectory+0x43c>)
 8002afe:	ed93 7a00 	vldr	s14, [r3]
 8002b02:	4b47      	ldr	r3, [pc, #284]	@ (8002c20 <createTrajectory+0x434>)
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b0c:	4b45      	ldr	r3, [pc, #276]	@ (8002c24 <createTrajectory+0x438>)
 8002b0e:	edd3 7a00 	vldr	s15, [r3]
 8002b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b16:	ee17 0a90 	vmov	r0, s15
 8002b1a:	f7fd fce1 	bl	80004e0 <__aeabi_f2d>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4640      	mov	r0, r8
 8002b24:	4649      	mov	r1, r9
 8002b26:	f7fd fd33 	bl	8000590 <__aeabi_dmul>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4690      	mov	r8, r2
 8002b30:	4699      	mov	r9, r3
 8002b32:	4b3d      	ldr	r3, [pc, #244]	@ (8002c28 <createTrajectory+0x43c>)
 8002b34:	ed93 7a00 	vldr	s14, [r3]
 8002b38:	4b39      	ldr	r3, [pc, #228]	@ (8002c20 <createTrajectory+0x434>)
 8002b3a:	edd3 7a00 	vldr	s15, [r3]
 8002b3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b42:	4b38      	ldr	r3, [pc, #224]	@ (8002c24 <createTrajectory+0x438>)
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b4c:	ee17 0a90 	vmov	r0, s15
 8002b50:	f7fd fcc6 	bl	80004e0 <__aeabi_f2d>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4640      	mov	r0, r8
 8002b5a:	4649      	mov	r1, r9
 8002b5c:	f7fd fd18 	bl	8000590 <__aeabi_dmul>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4690      	mov	r8, r2
 8002b66:	4699      	mov	r9, r3
 8002b68:	4b33      	ldr	r3, [pc, #204]	@ (8002c38 <createTrajectory+0x44c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fd fca5 	bl	80004bc <__aeabi_i2d>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4640      	mov	r0, r8
 8002b78:	4649      	mov	r1, r9
 8002b7a:	f7fd fd09 	bl	8000590 <__aeabi_dmul>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4620      	mov	r0, r4
 8002b84:	4629      	mov	r1, r5
 8002b86:	f7fd fb4b 	bl	8000220 <__aeabi_dsub>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4610      	mov	r0, r2
 8002b90:	4619      	mov	r1, r3
 8002b92:	f7fd ffcd 	bl	8000b30 <__aeabi_d2f>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4a2a      	ldr	r2, [pc, #168]	@ (8002c44 <createTrajectory+0x458>)
 8002b9a:	6013      	str	r3, [r2, #0]
			ref_v = -q_2d_max*(t-t_acc-t_const)*dir + q_d_max*dir;
 8002b9c:	4b27      	ldr	r3, [pc, #156]	@ (8002c3c <createTrajectory+0x450>)
 8002b9e:	edd3 7a00 	vldr	s15, [r3]
 8002ba2:	eeb1 7a67 	vneg.f32	s14, s15
 8002ba6:	4b20      	ldr	r3, [pc, #128]	@ (8002c28 <createTrajectory+0x43c>)
 8002ba8:	edd3 6a00 	vldr	s13, [r3]
 8002bac:	4b1c      	ldr	r3, [pc, #112]	@ (8002c20 <createTrajectory+0x434>)
 8002bae:	edd3 7a00 	vldr	s15, [r3]
 8002bb2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c24 <createTrajectory+0x438>)
 8002bb8:	edd3 7a00 	vldr	s15, [r3]
 8002bbc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002bc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c38 <createTrajectory+0x44c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	ee07 3a90 	vmov	s15, r3
 8002bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bd4:	4b18      	ldr	r3, [pc, #96]	@ (8002c38 <createTrajectory+0x44c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	ee07 3a90 	vmov	s15, r3
 8002bdc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002be0:	4b14      	ldr	r3, [pc, #80]	@ (8002c34 <createTrajectory+0x448>)
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bee:	4b16      	ldr	r3, [pc, #88]	@ (8002c48 <createTrajectory+0x45c>)
 8002bf0:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 8002bf4:	4b11      	ldr	r3, [pc, #68]	@ (8002c3c <createTrajectory+0x450>)
 8002bf6:	edd3 7a00 	vldr	s15, [r3]
 8002bfa:	eeb1 7a67 	vneg.f32	s14, s15
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002c38 <createTrajectory+0x44c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	ee07 3a90 	vmov	s15, r3
 8002c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c4c <createTrajectory+0x460>)
 8002c10:	edc3 7a00 	vstr	s15, [r3]
 8002c14:	e1a3      	b.n	8002f5e <createTrajectory+0x772>
		}
		else{
			calmode = 3;
 8002c16:	4b0e      	ldr	r3, [pc, #56]	@ (8002c50 <createTrajectory+0x464>)
 8002c18:	2203      	movs	r2, #3
 8002c1a:	701a      	strb	r2, [r3, #0]
	else if(calmode == 3){ //stop
		ref_p = q_f;
		ref_v = 0;
		ref_a = 0;
	}
}
 8002c1c:	e19f      	b.n	8002f5e <createTrajectory+0x772>
 8002c1e:	bf00      	nop
 8002c20:	20000840 	.word	0x20000840
 8002c24:	20000848 	.word	0x20000848
 8002c28:	20000860 	.word	0x20000860
 8002c2c:	20000828 	.word	0x20000828
 8002c30:	2000084c 	.word	0x2000084c
 8002c34:	20000008 	.word	0x20000008
 8002c38:	20000014 	.word	0x20000014
 8002c3c:	2000000c 	.word	0x2000000c
 8002c40:	3fe00000 	.word	0x3fe00000
 8002c44:	20000830 	.word	0x20000830
 8002c48:	20000834 	.word	0x20000834
 8002c4c:	20000838 	.word	0x20000838
 8002c50:	20000010 	.word	0x20000010
	else if(calmode == 2){
 8002c54:	4bc3      	ldr	r3, [pc, #780]	@ (8002f64 <createTrajectory+0x778>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	f040 816f 	bne.w	8002f3c <createTrajectory+0x750>
		t = (float)(micros()-T_start)/1000000; //sec
 8002c5e:	f7ff fa65 	bl	800212c <micros>
 8002c62:	4bc1      	ldr	r3, [pc, #772]	@ (8002f68 <createTrajectory+0x77c>)
 8002c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c68:	1a84      	subs	r4, r0, r2
 8002c6a:	eb61 0503 	sbc.w	r5, r1, r3
 8002c6e:	4620      	mov	r0, r4
 8002c70:	4629      	mov	r1, r5
 8002c72:	f7fe f875 	bl	8000d60 <__aeabi_ul2f>
 8002c76:	ee06 0a90 	vmov	s13, r0
 8002c7a:	ed9f 7abc 	vldr	s14, [pc, #752]	@ 8002f6c <createTrajectory+0x780>
 8002c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c82:	4bbb      	ldr	r3, [pc, #748]	@ (8002f70 <createTrajectory+0x784>)
 8002c84:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 8002c88:	4bb9      	ldr	r3, [pc, #740]	@ (8002f70 <createTrajectory+0x784>)
 8002c8a:	edd3 7a00 	vldr	s15, [r3]
 8002c8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c96:	f2c0 8094 	blt.w	8002dc2 <createTrajectory+0x5d6>
 8002c9a:	4bb5      	ldr	r3, [pc, #724]	@ (8002f70 <createTrajectory+0x784>)
 8002c9c:	ed93 7a00 	vldr	s14, [r3]
 8002ca0:	4bb4      	ldr	r3, [pc, #720]	@ (8002f74 <createTrajectory+0x788>)
 8002ca2:	edd3 7a00 	vldr	s15, [r3]
 8002ca6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cae:	f140 8088 	bpl.w	8002dc2 <createTrajectory+0x5d6>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 8002cb2:	4bb1      	ldr	r3, [pc, #708]	@ (8002f78 <createTrajectory+0x78c>)
 8002cb4:	ed93 7a00 	vldr	s14, [r3]
 8002cb8:	4bad      	ldr	r3, [pc, #692]	@ (8002f70 <createTrajectory+0x784>)
 8002cba:	edd3 7a00 	vldr	s15, [r3]
 8002cbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cc2:	4bae      	ldr	r3, [pc, #696]	@ (8002f7c <createTrajectory+0x790>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cd2:	4bab      	ldr	r3, [pc, #684]	@ (8002f80 <createTrajectory+0x794>)
 8002cd4:	edd3 7a00 	vldr	s15, [r3]
 8002cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cdc:	ee17 0a90 	vmov	r0, s15
 8002ce0:	f7fd fbfe 	bl	80004e0 <__aeabi_f2d>
 8002ce4:	4604      	mov	r4, r0
 8002ce6:	460d      	mov	r5, r1
 8002ce8:	4ba6      	ldr	r3, [pc, #664]	@ (8002f84 <createTrajectory+0x798>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fd fbf7 	bl	80004e0 <__aeabi_f2d>
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	4ba4      	ldr	r3, [pc, #656]	@ (8002f88 <createTrajectory+0x79c>)
 8002cf8:	f7fd fc4a 	bl	8000590 <__aeabi_dmul>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4690      	mov	r8, r2
 8002d02:	4699      	mov	r9, r3
 8002d04:	4b9a      	ldr	r3, [pc, #616]	@ (8002f70 <createTrajectory+0x784>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd fbe9 	bl	80004e0 <__aeabi_f2d>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4640      	mov	r0, r8
 8002d14:	4649      	mov	r1, r9
 8002d16:	f7fd fc3b 	bl	8000590 <__aeabi_dmul>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4690      	mov	r8, r2
 8002d20:	4699      	mov	r9, r3
 8002d22:	4b93      	ldr	r3, [pc, #588]	@ (8002f70 <createTrajectory+0x784>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd fbda 	bl	80004e0 <__aeabi_f2d>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4640      	mov	r0, r8
 8002d32:	4649      	mov	r1, r9
 8002d34:	f7fd fc2c 	bl	8000590 <__aeabi_dmul>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4690      	mov	r8, r2
 8002d3e:	4699      	mov	r9, r3
 8002d40:	4b8e      	ldr	r3, [pc, #568]	@ (8002f7c <createTrajectory+0x790>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fd fbb9 	bl	80004bc <__aeabi_i2d>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4640      	mov	r0, r8
 8002d50:	4649      	mov	r1, r9
 8002d52:	f7fd fc1d 	bl	8000590 <__aeabi_dmul>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	4629      	mov	r1, r5
 8002d5e:	f7fd fa61 	bl	8000224 <__adddf3>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4610      	mov	r0, r2
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f7fd fee1 	bl	8000b30 <__aeabi_d2f>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4a86      	ldr	r2, [pc, #536]	@ (8002f8c <createTrajectory+0x7a0>)
 8002d72:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 8002d74:	4b83      	ldr	r3, [pc, #524]	@ (8002f84 <createTrajectory+0x798>)
 8002d76:	ed93 7a00 	vldr	s14, [r3]
 8002d7a:	4b7d      	ldr	r3, [pc, #500]	@ (8002f70 <createTrajectory+0x784>)
 8002d7c:	edd3 7a00 	vldr	s15, [r3]
 8002d80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d84:	4b7d      	ldr	r3, [pc, #500]	@ (8002f7c <createTrajectory+0x790>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	ee07 3a90 	vmov	s15, r3
 8002d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d94:	4b78      	ldr	r3, [pc, #480]	@ (8002f78 <createTrajectory+0x78c>)
 8002d96:	edd3 7a00 	vldr	s15, [r3]
 8002d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f90 <createTrajectory+0x7a4>)
 8002da0:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 8002da4:	4b75      	ldr	r3, [pc, #468]	@ (8002f7c <createTrajectory+0x790>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	ee07 3a90 	vmov	s15, r3
 8002dac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002db0:	4b74      	ldr	r3, [pc, #464]	@ (8002f84 <createTrajectory+0x798>)
 8002db2:	edd3 7a00 	vldr	s15, [r3]
 8002db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dba:	4b76      	ldr	r3, [pc, #472]	@ (8002f94 <createTrajectory+0x7a8>)
 8002dbc:	edc3 7a00 	vstr	s15, [r3]
 8002dc0:	e0cd      	b.n	8002f5e <createTrajectory+0x772>
		else if((t_acc <= t) && (t < t_acc*2)){
 8002dc2:	4b6c      	ldr	r3, [pc, #432]	@ (8002f74 <createTrajectory+0x788>)
 8002dc4:	ed93 7a00 	vldr	s14, [r3]
 8002dc8:	4b69      	ldr	r3, [pc, #420]	@ (8002f70 <createTrajectory+0x784>)
 8002dca:	edd3 7a00 	vldr	s15, [r3]
 8002dce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd6:	f200 80ad 	bhi.w	8002f34 <createTrajectory+0x748>
 8002dda:	4b66      	ldr	r3, [pc, #408]	@ (8002f74 <createTrajectory+0x788>)
 8002ddc:	edd3 7a00 	vldr	s15, [r3]
 8002de0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002de4:	4b62      	ldr	r3, [pc, #392]	@ (8002f70 <createTrajectory+0x784>)
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df2:	f340 809f 	ble.w	8002f34 <createTrajectory+0x748>
			ref_p = q_i + q_acc + q_d_acc*(t-t_acc) - 0.5*q_2d_max*(t-t_acc)*(t-t_acc)*dir;
 8002df6:	4b62      	ldr	r3, [pc, #392]	@ (8002f80 <createTrajectory+0x794>)
 8002df8:	ed93 7a00 	vldr	s14, [r3]
 8002dfc:	4b66      	ldr	r3, [pc, #408]	@ (8002f98 <createTrajectory+0x7ac>)
 8002dfe:	edd3 7a00 	vldr	s15, [r3]
 8002e02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e06:	4b5a      	ldr	r3, [pc, #360]	@ (8002f70 <createTrajectory+0x784>)
 8002e08:	edd3 6a00 	vldr	s13, [r3]
 8002e0c:	4b59      	ldr	r3, [pc, #356]	@ (8002f74 <createTrajectory+0x788>)
 8002e0e:	edd3 7a00 	vldr	s15, [r3]
 8002e12:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e16:	4b61      	ldr	r3, [pc, #388]	@ (8002f9c <createTrajectory+0x7b0>)
 8002e18:	edd3 7a00 	vldr	s15, [r3]
 8002e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e24:	ee17 0a90 	vmov	r0, s15
 8002e28:	f7fd fb5a 	bl	80004e0 <__aeabi_f2d>
 8002e2c:	4604      	mov	r4, r0
 8002e2e:	460d      	mov	r5, r1
 8002e30:	4b54      	ldr	r3, [pc, #336]	@ (8002f84 <createTrajectory+0x798>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fd fb53 	bl	80004e0 <__aeabi_f2d>
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	4b52      	ldr	r3, [pc, #328]	@ (8002f88 <createTrajectory+0x79c>)
 8002e40:	f7fd fba6 	bl	8000590 <__aeabi_dmul>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4690      	mov	r8, r2
 8002e4a:	4699      	mov	r9, r3
 8002e4c:	4b48      	ldr	r3, [pc, #288]	@ (8002f70 <createTrajectory+0x784>)
 8002e4e:	ed93 7a00 	vldr	s14, [r3]
 8002e52:	4b48      	ldr	r3, [pc, #288]	@ (8002f74 <createTrajectory+0x788>)
 8002e54:	edd3 7a00 	vldr	s15, [r3]
 8002e58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e5c:	ee17 0a90 	vmov	r0, s15
 8002e60:	f7fd fb3e 	bl	80004e0 <__aeabi_f2d>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4640      	mov	r0, r8
 8002e6a:	4649      	mov	r1, r9
 8002e6c:	f7fd fb90 	bl	8000590 <__aeabi_dmul>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4690      	mov	r8, r2
 8002e76:	4699      	mov	r9, r3
 8002e78:	4b3d      	ldr	r3, [pc, #244]	@ (8002f70 <createTrajectory+0x784>)
 8002e7a:	ed93 7a00 	vldr	s14, [r3]
 8002e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f74 <createTrajectory+0x788>)
 8002e80:	edd3 7a00 	vldr	s15, [r3]
 8002e84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e88:	ee17 0a90 	vmov	r0, s15
 8002e8c:	f7fd fb28 	bl	80004e0 <__aeabi_f2d>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4640      	mov	r0, r8
 8002e96:	4649      	mov	r1, r9
 8002e98:	f7fd fb7a 	bl	8000590 <__aeabi_dmul>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4690      	mov	r8, r2
 8002ea2:	4699      	mov	r9, r3
 8002ea4:	4b35      	ldr	r3, [pc, #212]	@ (8002f7c <createTrajectory+0x790>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd fb07 	bl	80004bc <__aeabi_i2d>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4640      	mov	r0, r8
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	f7fd fb6b 	bl	8000590 <__aeabi_dmul>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	f7fd f9ad 	bl	8000220 <__aeabi_dsub>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4610      	mov	r0, r2
 8002ecc:	4619      	mov	r1, r3
 8002ece:	f7fd fe2f 	bl	8000b30 <__aeabi_d2f>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8002f8c <createTrajectory+0x7a0>)
 8002ed6:	6013      	str	r3, [r2, #0]
			ref_v = q_d_acc - q_2d_max*(t-t_acc)*dir;
 8002ed8:	4b30      	ldr	r3, [pc, #192]	@ (8002f9c <createTrajectory+0x7b0>)
 8002eda:	ed93 7a00 	vldr	s14, [r3]
 8002ede:	4b24      	ldr	r3, [pc, #144]	@ (8002f70 <createTrajectory+0x784>)
 8002ee0:	edd3 6a00 	vldr	s13, [r3]
 8002ee4:	4b23      	ldr	r3, [pc, #140]	@ (8002f74 <createTrajectory+0x788>)
 8002ee6:	edd3 7a00 	vldr	s15, [r3]
 8002eea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002eee:	4b25      	ldr	r3, [pc, #148]	@ (8002f84 <createTrajectory+0x798>)
 8002ef0:	edd3 7a00 	vldr	s15, [r3]
 8002ef4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ef8:	4b20      	ldr	r3, [pc, #128]	@ (8002f7c <createTrajectory+0x790>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	ee07 3a90 	vmov	s15, r3
 8002f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f0c:	4b20      	ldr	r3, [pc, #128]	@ (8002f90 <createTrajectory+0x7a4>)
 8002f0e:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 8002f12:	4b1c      	ldr	r3, [pc, #112]	@ (8002f84 <createTrajectory+0x798>)
 8002f14:	edd3 7a00 	vldr	s15, [r3]
 8002f18:	eeb1 7a67 	vneg.f32	s14, s15
 8002f1c:	4b17      	ldr	r3, [pc, #92]	@ (8002f7c <createTrajectory+0x790>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	ee07 3a90 	vmov	s15, r3
 8002f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2c:	4b19      	ldr	r3, [pc, #100]	@ (8002f94 <createTrajectory+0x7a8>)
 8002f2e:	edc3 7a00 	vstr	s15, [r3]
 8002f32:	e014      	b.n	8002f5e <createTrajectory+0x772>
			calmode = 3;
 8002f34:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <createTrajectory+0x778>)
 8002f36:	2203      	movs	r2, #3
 8002f38:	701a      	strb	r2, [r3, #0]
}
 8002f3a:	e010      	b.n	8002f5e <createTrajectory+0x772>
	else if(calmode == 3){ //stop
 8002f3c:	4b09      	ldr	r3, [pc, #36]	@ (8002f64 <createTrajectory+0x778>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d10c      	bne.n	8002f5e <createTrajectory+0x772>
		ref_p = q_f;
 8002f44:	4b16      	ldr	r3, [pc, #88]	@ (8002fa0 <createTrajectory+0x7b4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a10      	ldr	r2, [pc, #64]	@ (8002f8c <createTrajectory+0x7a0>)
 8002f4a:	6013      	str	r3, [r2, #0]
		ref_v = 0;
 8002f4c:	4b10      	ldr	r3, [pc, #64]	@ (8002f90 <createTrajectory+0x7a4>)
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
		ref_a = 0;
 8002f54:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <createTrajectory+0x7a8>)
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
}
 8002f5c:	e7ff      	b.n	8002f5e <createTrajectory+0x772>
 8002f5e:	bf00      	nop
 8002f60:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f64:	20000010 	.word	0x20000010
 8002f68:	20000858 	.word	0x20000858
 8002f6c:	49742400 	.word	0x49742400
 8002f70:	20000860 	.word	0x20000860
 8002f74:	20000840 	.word	0x20000840
 8002f78:	20000820 	.word	0x20000820
 8002f7c:	20000014 	.word	0x20000014
 8002f80:	20000828 	.word	0x20000828
 8002f84:	2000000c 	.word	0x2000000c
 8002f88:	3fe00000 	.word	0x3fe00000
 8002f8c:	20000830 	.word	0x20000830
 8002f90:	20000834 	.word	0x20000834
 8002f94:	20000838 	.word	0x20000838
 8002f98:	20000844 	.word	0x20000844
 8002f9c:	20000850 	.word	0x20000850
 8002fa0:	20000824 	.word	0x20000824
 8002fa4:	00000000 	.word	0x00000000

08002fa8 <DriveMotor>:

//--------------------------Drive Motor----------------//

void DriveMotor(){
 8002fa8:	b598      	push	{r3, r4, r7, lr}
 8002faa:	af00      	add	r7, sp, #0
	//PWM Motor
	duty_cycle = (fabs(Vin)*100)/24;
 8002fac:	4b26      	ldr	r3, [pc, #152]	@ (8003048 <DriveMotor+0xa0>)
 8002fae:	edd3 7a00 	vldr	s15, [r3]
 8002fb2:	eef0 7ae7 	vabs.f32	s15, s15
 8002fb6:	ee17 0a90 	vmov	r0, s15
 8002fba:	f7fd fa91 	bl	80004e0 <__aeabi_f2d>
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	4b22      	ldr	r3, [pc, #136]	@ (800304c <DriveMotor+0xa4>)
 8002fc4:	f7fd fae4 	bl	8000590 <__aeabi_dmul>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8003050 <DriveMotor+0xa8>)
 8002fd6:	f7fd fc05 	bl	80007e4 <__aeabi_ddiv>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4610      	mov	r0, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f7fd fda5 	bl	8000b30 <__aeabi_d2f>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8003054 <DriveMotor+0xac>)
 8002fea:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycle*9.99);
 8002fec:	4b19      	ldr	r3, [pc, #100]	@ (8003054 <DriveMotor+0xac>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fd fa75 	bl	80004e0 <__aeabi_f2d>
 8002ff6:	a312      	add	r3, pc, #72	@ (adr r3, 8003040 <DriveMotor+0x98>)
 8002ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffc:	f7fd fac8 	bl	8000590 <__aeabi_dmul>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4914      	ldr	r1, [pc, #80]	@ (8003058 <DriveMotor+0xb0>)
 8003006:	680c      	ldr	r4, [r1, #0]
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	f7fd fd70 	bl	8000af0 <__aeabi_d2uiz>
 8003010:	4603      	mov	r3, r0
 8003012:	6363      	str	r3, [r4, #52]	@ 0x34

	//Control Motor Direction
	if(Vin < 0){
 8003014:	4b0c      	ldr	r3, [pc, #48]	@ (8003048 <DriveMotor+0xa0>)
 8003016:	edd3 7a00 	vldr	s15, [r3]
 800301a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800301e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003022:	d505      	bpl.n	8003030 <DriveMotor+0x88>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8003024:	2201      	movs	r2, #1
 8003026:	2120      	movs	r1, #32
 8003028:	480c      	ldr	r0, [pc, #48]	@ (800305c <DriveMotor+0xb4>)
 800302a:	f002 feeb 	bl	8005e04 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
	}
}
 800302e:	e004      	b.n	800303a <DriveMotor+0x92>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 8003030:	2200      	movs	r2, #0
 8003032:	2120      	movs	r1, #32
 8003034:	4809      	ldr	r0, [pc, #36]	@ (800305c <DriveMotor+0xb4>)
 8003036:	f002 fee5 	bl	8005e04 <HAL_GPIO_WritePin>
}
 800303a:	bf00      	nop
 800303c:	bd98      	pop	{r3, r4, r7, pc}
 800303e:	bf00      	nop
 8003040:	47ae147b 	.word	0x47ae147b
 8003044:	4023fae1 	.word	0x4023fae1
 8003048:	2000081c 	.word	0x2000081c
 800304c:	40590000 	.word	0x40590000
 8003050:	40380000 	.word	0x40380000
 8003054:	20000004 	.word	0x20000004
 8003058:	20000240 	.word	0x20000240
 800305c:	48000800 	.word	0x48000800

08003060 <SoftwareLimit>:

void SoftwareLimit(){
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
	if(S_top == 1 && Vin >= -2){
 8003064:	4b26      	ldr	r3, [pc, #152]	@ (8003100 <SoftwareLimit+0xa0>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d10e      	bne.n	800308a <SoftwareLimit+0x2a>
 800306c:	4b25      	ldr	r3, [pc, #148]	@ (8003104 <SoftwareLimit+0xa4>)
 800306e:	edd3 7a00 	vldr	s15, [r3]
 8003072:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800307a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307e:	db04      	blt.n	800308a <SoftwareLimit+0x2a>
		Vin = 0;
 8003080:	4b20      	ldr	r3, [pc, #128]	@ (8003104 <SoftwareLimit+0xa4>)
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	e010      	b.n	80030ac <SoftwareLimit+0x4c>
	}
	else if(S_top == 1 && Vin < -2){
 800308a:	4b1d      	ldr	r3, [pc, #116]	@ (8003100 <SoftwareLimit+0xa0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d10c      	bne.n	80030ac <SoftwareLimit+0x4c>
 8003092:	4b1c      	ldr	r3, [pc, #112]	@ (8003104 <SoftwareLimit+0xa4>)
 8003094:	edd3 7a00 	vldr	s15, [r3]
 8003098:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800309c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a4:	d502      	bpl.n	80030ac <SoftwareLimit+0x4c>
		S_top = 0;
 80030a6:	4b16      	ldr	r3, [pc, #88]	@ (8003100 <SoftwareLimit+0xa0>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
	}

	if(S_down == 1 && Vin <= 2){
 80030ac:	4b16      	ldr	r3, [pc, #88]	@ (8003108 <SoftwareLimit+0xa8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d10e      	bne.n	80030d2 <SoftwareLimit+0x72>
 80030b4:	4b13      	ldr	r3, [pc, #76]	@ (8003104 <SoftwareLimit+0xa4>)
 80030b6:	edd3 7a00 	vldr	s15, [r3]
 80030ba:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80030be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c6:	d804      	bhi.n	80030d2 <SoftwareLimit+0x72>
		Vin = 0;
 80030c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003104 <SoftwareLimit+0xa4>)
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
	}
	else if(S_down == 1 && Vin > 2){
		S_down = 0;
	}

}
 80030d0:	e011      	b.n	80030f6 <SoftwareLimit+0x96>
	else if(S_down == 1 && Vin > 2){
 80030d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003108 <SoftwareLimit+0xa8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d10d      	bne.n	80030f6 <SoftwareLimit+0x96>
 80030da:	4b0a      	ldr	r3, [pc, #40]	@ (8003104 <SoftwareLimit+0xa4>)
 80030dc:	edd3 7a00 	vldr	s15, [r3]
 80030e0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80030e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ec:	dc00      	bgt.n	80030f0 <SoftwareLimit+0x90>
}
 80030ee:	e002      	b.n	80030f6 <SoftwareLimit+0x96>
		S_down = 0;
 80030f0:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <SoftwareLimit+0xa8>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
}
 80030f6:	bf00      	nop
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	200008dc 	.word	0x200008dc
 8003104:	2000081c 	.word	0x2000081c
 8003108:	200008e0 	.word	0x200008e0

0800310c <button_up_down_input>:

	//Control x-axis by joy
	x_position += ((ADCBuffer[0]-2048)*0.005);
}

void button_up_down_input(){
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
	//check button up
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 1){
 8003110:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003114:	4843      	ldr	r0, [pc, #268]	@ (8003224 <button_up_down_input+0x118>)
 8003116:	f002 fe5d 	bl	8005dd4 <HAL_GPIO_ReadPin>
 800311a:	4603      	mov	r3, r0
 800311c:	2b01      	cmp	r3, #1
 800311e:	d113      	bne.n	8003148 <button_up_down_input+0x3c>
		set_manual_point = QEIdata.linearPos + 10; //stem 10 mm
 8003120:	4b41      	ldr	r3, [pc, #260]	@ (8003228 <button_up_down_input+0x11c>)
 8003122:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003126:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800312a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800312e:	4b3f      	ldr	r3, [pc, #252]	@ (800322c <button_up_down_input+0x120>)
 8003130:	edc3 7a00 	vstr	s15, [r3]
		check_up = 1;
 8003134:	4b3e      	ldr	r3, [pc, #248]	@ (8003230 <button_up_down_input+0x124>)
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
		B_up = 1;
 800313a:	4b3e      	ldr	r3, [pc, #248]	@ (8003234 <button_up_down_input+0x128>)
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]
		check_state_B = 1;
 8003140:	4b3d      	ldr	r3, [pc, #244]	@ (8003238 <button_up_down_input+0x12c>)
 8003142:	2201      	movs	r2, #1
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	e005      	b.n	8003154 <button_up_down_input+0x48>
	}
	else{
		B_up = 0;
 8003148:	4b3a      	ldr	r3, [pc, #232]	@ (8003234 <button_up_down_input+0x128>)
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
		check_state_B = 2;
 800314e:	4b3a      	ldr	r3, [pc, #232]	@ (8003238 <button_up_down_input+0x12c>)
 8003150:	2202      	movs	r2, #2
 8003152:	601a      	str	r2, [r3, #0]
	}
	if(QEIdata.linearPos < set_manual_point && check_up == 1){
 8003154:	4b34      	ldr	r3, [pc, #208]	@ (8003228 <button_up_down_input+0x11c>)
 8003156:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800315a:	4b34      	ldr	r3, [pc, #208]	@ (800322c <button_up_down_input+0x120>)
 800315c:	edd3 7a00 	vldr	s15, [r3]
 8003160:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003168:	d50a      	bpl.n	8003180 <button_up_down_input+0x74>
 800316a:	4b31      	ldr	r3, [pc, #196]	@ (8003230 <button_up_down_input+0x124>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d106      	bne.n	8003180 <button_up_down_input+0x74>
		Vin = 4.5;
 8003172:	4b32      	ldr	r3, [pc, #200]	@ (800323c <button_up_down_input+0x130>)
 8003174:	4a32      	ldr	r2, [pc, #200]	@ (8003240 <button_up_down_input+0x134>)
 8003176:	601a      	str	r2, [r3, #0]
		check_state_B = 3;
 8003178:	4b2f      	ldr	r3, [pc, #188]	@ (8003238 <button_up_down_input+0x12c>)
 800317a:	2203      	movs	r2, #3
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	e005      	b.n	800318c <button_up_down_input+0x80>
	}
	else{
		check_up = 0;
 8003180:	4b2b      	ldr	r3, [pc, #172]	@ (8003230 <button_up_down_input+0x124>)
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
		check_state_B = 4;
 8003186:	4b2c      	ldr	r3, [pc, #176]	@ (8003238 <button_up_down_input+0x12c>)
 8003188:	2204      	movs	r2, #4
 800318a:	601a      	str	r2, [r3, #0]
	}

	//check button down
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == 1){
 800318c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003190:	4824      	ldr	r0, [pc, #144]	@ (8003224 <button_up_down_input+0x118>)
 8003192:	f002 fe1f 	bl	8005dd4 <HAL_GPIO_ReadPin>
 8003196:	4603      	mov	r3, r0
 8003198:	2b01      	cmp	r3, #1
 800319a:	d113      	bne.n	80031c4 <button_up_down_input+0xb8>
		set_manual_point = QEIdata.linearPos - 10;
 800319c:	4b22      	ldr	r3, [pc, #136]	@ (8003228 <button_up_down_input+0x11c>)
 800319e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80031a2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80031a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031aa:	4b20      	ldr	r3, [pc, #128]	@ (800322c <button_up_down_input+0x120>)
 80031ac:	edc3 7a00 	vstr	s15, [r3]
		check_down = 1;
 80031b0:	4b24      	ldr	r3, [pc, #144]	@ (8003244 <button_up_down_input+0x138>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	701a      	strb	r2, [r3, #0]
		B_down = 1;
 80031b6:	4b24      	ldr	r3, [pc, #144]	@ (8003248 <button_up_down_input+0x13c>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]
		check_state_B = 5;
 80031bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003238 <button_up_down_input+0x12c>)
 80031be:	2205      	movs	r2, #5
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e005      	b.n	80031d0 <button_up_down_input+0xc4>
	}
	else{
		B_down = 0;
 80031c4:	4b20      	ldr	r3, [pc, #128]	@ (8003248 <button_up_down_input+0x13c>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	701a      	strb	r2, [r3, #0]
		check_state_B = 6;
 80031ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003238 <button_up_down_input+0x12c>)
 80031cc:	2206      	movs	r2, #6
 80031ce:	601a      	str	r2, [r3, #0]
	}
	if(QEIdata.linearPos > set_manual_point && check_down == 1){
 80031d0:	4b15      	ldr	r3, [pc, #84]	@ (8003228 <button_up_down_input+0x11c>)
 80031d2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80031d6:	4b15      	ldr	r3, [pc, #84]	@ (800322c <button_up_down_input+0x120>)
 80031d8:	edd3 7a00 	vldr	s15, [r3]
 80031dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e4:	dd0a      	ble.n	80031fc <button_up_down_input+0xf0>
 80031e6:	4b17      	ldr	r3, [pc, #92]	@ (8003244 <button_up_down_input+0x138>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d106      	bne.n	80031fc <button_up_down_input+0xf0>
		Vin = -3.5;
 80031ee:	4b13      	ldr	r3, [pc, #76]	@ (800323c <button_up_down_input+0x130>)
 80031f0:	4a16      	ldr	r2, [pc, #88]	@ (800324c <button_up_down_input+0x140>)
 80031f2:	601a      	str	r2, [r3, #0]
		check_state_B = 7;
 80031f4:	4b10      	ldr	r3, [pc, #64]	@ (8003238 <button_up_down_input+0x12c>)
 80031f6:	2207      	movs	r2, #7
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	e005      	b.n	8003208 <button_up_down_input+0xfc>
	}
	else{
		check_down = 0;
 80031fc:	4b11      	ldr	r3, [pc, #68]	@ (8003244 <button_up_down_input+0x138>)
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
		check_state_B = 8;
 8003202:	4b0d      	ldr	r3, [pc, #52]	@ (8003238 <button_up_down_input+0x12c>)
 8003204:	2208      	movs	r2, #8
 8003206:	601a      	str	r2, [r3, #0]
	}

	if(check_up == 0 && check_down == 0){
 8003208:	4b09      	ldr	r3, [pc, #36]	@ (8003230 <button_up_down_input+0x124>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d107      	bne.n	8003220 <button_up_down_input+0x114>
 8003210:	4b0c      	ldr	r3, [pc, #48]	@ (8003244 <button_up_down_input+0x138>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d103      	bne.n	8003220 <button_up_down_input+0x114>
		Vin = 0;
 8003218:	4b08      	ldr	r3, [pc, #32]	@ (800323c <button_up_down_input+0x130>)
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
	}
}
 8003220:	bf00      	nop
 8003222:	bd80      	pop	{r7, pc}
 8003224:	48000800 	.word	0x48000800
 8003228:	200007c8 	.word	0x200007c8
 800322c:	20000814 	.word	0x20000814
 8003230:	20000818 	.word	0x20000818
 8003234:	20000868 	.word	0x20000868
 8003238:	200008e4 	.word	0x200008e4
 800323c:	2000081c 	.word	0x2000081c
 8003240:	40900000 	.word	0x40900000
 8003244:	20000819 	.word	0x20000819
 8003248:	20000869 	.word	0x20000869
 800324c:	c0600000 	.word	0xc0600000

08003250 <button_reset_input>:

void button_reset_input(){
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
	//check button reset
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1 || set_Home_state == 1){
 8003254:	2104      	movs	r1, #4
 8003256:	4827      	ldr	r0, [pc, #156]	@ (80032f4 <button_reset_input+0xa4>)
 8003258:	f002 fdbc 	bl	8005dd4 <HAL_GPIO_ReadPin>
 800325c:	4603      	mov	r3, r0
 800325e:	2b01      	cmp	r3, #1
 8003260:	d003      	beq.n	800326a <button_reset_input+0x1a>
 8003262:	4b25      	ldr	r3, [pc, #148]	@ (80032f8 <button_reset_input+0xa8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d13e      	bne.n	80032e8 <button_reset_input+0x98>
		B_reset = 1;
 800326a:	4b24      	ldr	r3, [pc, #144]	@ (80032fc <button_reset_input+0xac>)
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 8003270:	e006      	b.n	8003280 <button_reset_input+0x30>
			Vin = -3.5;
 8003272:	4b23      	ldr	r3, [pc, #140]	@ (8003300 <button_reset_input+0xb0>)
 8003274:	4a23      	ldr	r2, [pc, #140]	@ (8003304 <button_reset_input+0xb4>)
 8003276:	601a      	str	r2, [r3, #0]
			//software limit
			SoftwareLimit();
 8003278:	f7ff fef2 	bl	8003060 <SoftwareLimit>
			//Drive Motor which PWM
			DriveMotor();
 800327c:	f7ff fe94 	bl	8002fa8 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 8003280:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003284:	4820      	ldr	r0, [pc, #128]	@ (8003308 <button_reset_input+0xb8>)
 8003286:	f002 fda5 	bl	8005dd4 <HAL_GPIO_ReadPin>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <button_reset_input+0x22>
		}

		Vin = 2.1;
 8003290:	4b1b      	ldr	r3, [pc, #108]	@ (8003300 <button_reset_input+0xb0>)
 8003292:	4a1e      	ldr	r2, [pc, #120]	@ (800330c <button_reset_input+0xbc>)
 8003294:	601a      	str	r2, [r3, #0]
		SoftwareLimit();
 8003296:	f7ff fee3 	bl	8003060 <SoftwareLimit>
		DriveMotor();
 800329a:	f7ff fe85 	bl	8002fa8 <DriveMotor>
		HAL_Delay(500);
 800329e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80032a2:	f000 fc4d 	bl	8003b40 <HAL_Delay>

		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 80032a6:	e007      	b.n	80032b8 <button_reset_input+0x68>
			Vin = -2;
 80032a8:	4b15      	ldr	r3, [pc, #84]	@ (8003300 <button_reset_input+0xb0>)
 80032aa:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 80032ae:	601a      	str	r2, [r3, #0]
			//software limit
			SoftwareLimit();
 80032b0:	f7ff fed6 	bl	8003060 <SoftwareLimit>
			//Drive Motor which PWM
			DriveMotor();
 80032b4:	f7ff fe78 	bl	8002fa8 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 80032b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032bc:	4812      	ldr	r0, [pc, #72]	@ (8003308 <button_reset_input+0xb8>)
 80032be:	f002 fd89 	bl	8005dd4 <HAL_GPIO_ReadPin>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0ef      	beq.n	80032a8 <button_reset_input+0x58>
		}
		Vin = 0;
 80032c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003300 <button_reset_input+0xb0>)
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim2, 0); //set position to 0
 80032d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003310 <button_reset_input+0xc0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2200      	movs	r2, #0
 80032d6:	625a      	str	r2, [r3, #36]	@ 0x24

		if(set_Home_state == 1){
 80032d8:	4b07      	ldr	r3, [pc, #28]	@ (80032f8 <button_reset_input+0xa8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d107      	bne.n	80032f0 <button_reset_input+0xa0>
			Home_state_triger = 1;
 80032e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003314 <button_reset_input+0xc4>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
		if(set_Home_state == 1){
 80032e6:	e003      	b.n	80032f0 <button_reset_input+0xa0>
		}
	}
	else{
		B_reset = 0;
 80032e8:	4b04      	ldr	r3, [pc, #16]	@ (80032fc <button_reset_input+0xac>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
	}
}
 80032ee:	bf00      	nop
 80032f0:	bf00      	nop
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	48000c00 	.word	0x48000c00
 80032f8:	20000f54 	.word	0x20000f54
 80032fc:	2000086a 	.word	0x2000086a
 8003300:	2000081c 	.word	0x2000081c
 8003304:	c0600000 	.word	0xc0600000
 8003308:	48000800 	.word	0x48000800
 800330c:	40066666 	.word	0x40066666
 8003310:	20000174 	.word	0x20000174
 8003314:	20000f58 	.word	0x20000f58

08003318 <button_save_position>:

void button_save_position(){
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && B_save == 0){
 800331c:	2180      	movs	r1, #128	@ 0x80
 800331e:	4811      	ldr	r0, [pc, #68]	@ (8003364 <button_save_position+0x4c>)
 8003320:	f002 fd58 	bl	8005dd4 <HAL_GPIO_ReadPin>
 8003324:	4603      	mov	r3, r0
 8003326:	2b01      	cmp	r3, #1
 8003328:	d116      	bne.n	8003358 <button_save_position+0x40>
 800332a:	4b0f      	ldr	r3, [pc, #60]	@ (8003368 <button_save_position+0x50>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d112      	bne.n	8003358 <button_save_position+0x40>
		B_save = 1;
 8003332:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <button_save_position+0x50>)
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]
		count_save += 1;
 8003338:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <button_save_position+0x54>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	3301      	adds	r3, #1
 800333e:	b2da      	uxtb	r2, r3
 8003340:	4b0a      	ldr	r3, [pc, #40]	@ (800336c <button_save_position+0x54>)
 8003342:	701a      	strb	r2, [r3, #0]
		shelves_pos[count_save] = QEIdata.linearPos;
 8003344:	4b09      	ldr	r3, [pc, #36]	@ (800336c <button_save_position+0x54>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	4b09      	ldr	r3, [pc, #36]	@ (8003370 <button_save_position+0x58>)
 800334c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800334e:	4909      	ldr	r1, [pc, #36]	@ (8003374 <button_save_position+0x5c>)
 8003350:	0083      	lsls	r3, r0, #2
 8003352:	440b      	add	r3, r1
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	e003      	b.n	8003360 <button_save_position+0x48>
	}
	else{
		B_save = 0;
 8003358:	4b03      	ldr	r3, [pc, #12]	@ (8003368 <button_save_position+0x50>)
 800335a:	2200      	movs	r2, #0
 800335c:	701a      	strb	r2, [r3, #0]
	}
}
 800335e:	bf00      	nop
 8003360:	bf00      	nop
 8003362:	bd80      	pop	{r7, pc}
 8003364:	48000400 	.word	0x48000400
 8003368:	2000086b 	.word	0x2000086b
 800336c:	2000086c 	.word	0x2000086c
 8003370:	200007c8 	.word	0x200007c8
 8003374:	20000870 	.word	0x20000870

08003378 <LED_Emergency>:
}
//-----------------------------------------------------------//

//-----------------------LED STATUS--------------------------//

void LED_Emergency(){
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 800337c:	2201      	movs	r2, #1
 800337e:	2140      	movs	r1, #64	@ 0x40
 8003380:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003384:	f002 fd3e 	bl	8005e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8003388:	2200      	movs	r2, #0
 800338a:	2180      	movs	r1, #128	@ 0x80
 800338c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003390:	f002 fd38 	bl	8005e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8003394:	2200      	movs	r2, #0
 8003396:	2140      	movs	r1, #64	@ 0x40
 8003398:	4808      	ldr	r0, [pc, #32]	@ (80033bc <LED_Emergency+0x44>)
 800339a:	f002 fd33 	bl	8005e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 800339e:	2200      	movs	r2, #0
 80033a0:	2180      	movs	r1, #128	@ 0x80
 80033a2:	4807      	ldr	r0, [pc, #28]	@ (80033c0 <LED_Emergency+0x48>)
 80033a4:	f002 fd2e 	bl	8005e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80033a8:	2200      	movs	r2, #0
 80033aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033b2:	f002 fd27 	bl	8005e04 <HAL_GPIO_WritePin>
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	48000400 	.word	0x48000400
 80033c0:	48000800 	.word	0x48000800

080033c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033c8:	b672      	cpsid	i
}
 80033ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033cc:	bf00      	nop
 80033ce:	e7fd      	b.n	80033cc <Error_Handler+0x8>

080033d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003414 <HAL_MspInit+0x44>)
 80033d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033da:	4a0e      	ldr	r2, [pc, #56]	@ (8003414 <HAL_MspInit+0x44>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80033e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003414 <HAL_MspInit+0x44>)
 80033e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	607b      	str	r3, [r7, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033ee:	4b09      	ldr	r3, [pc, #36]	@ (8003414 <HAL_MspInit+0x44>)
 80033f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f2:	4a08      	ldr	r2, [pc, #32]	@ (8003414 <HAL_MspInit+0x44>)
 80033f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80033fa:	4b06      	ldr	r3, [pc, #24]	@ (8003414 <HAL_MspInit+0x44>)
 80033fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003406:	f002 fdd1 	bl	8005fac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000

08003418 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b0a0      	sub	sp, #128	@ 0x80
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003420:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003430:	f107 0318 	add.w	r3, r7, #24
 8003434:	2254      	movs	r2, #84	@ 0x54
 8003436:	2100      	movs	r1, #0
 8003438:	4618      	mov	r0, r3
 800343a:	f007 fbeb 	bl	800ac14 <memset>
  if(hadc->Instance==ADC1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003446:	d178      	bne.n	800353a <HAL_ADC_MspInit+0x122>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003448:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800344c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800344e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003452:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003454:	f107 0318 	add.w	r3, r7, #24
 8003458:	4618      	mov	r0, r3
 800345a:	f003 fae5 	bl	8006a28 <HAL_RCCEx_PeriphCLKConfig>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003464:	f7ff ffae 	bl	80033c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003468:	4b36      	ldr	r3, [pc, #216]	@ (8003544 <HAL_ADC_MspInit+0x12c>)
 800346a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346c:	4a35      	ldr	r2, [pc, #212]	@ (8003544 <HAL_ADC_MspInit+0x12c>)
 800346e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003472:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003474:	4b33      	ldr	r3, [pc, #204]	@ (8003544 <HAL_ADC_MspInit+0x12c>)
 8003476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003480:	4b30      	ldr	r3, [pc, #192]	@ (8003544 <HAL_ADC_MspInit+0x12c>)
 8003482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003484:	4a2f      	ldr	r2, [pc, #188]	@ (8003544 <HAL_ADC_MspInit+0x12c>)
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800348c:	4b2d      	ldr	r3, [pc, #180]	@ (8003544 <HAL_ADC_MspInit+0x12c>)
 800348e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003498:	4b2a      	ldr	r3, [pc, #168]	@ (8003544 <HAL_ADC_MspInit+0x12c>)
 800349a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800349c:	4a29      	ldr	r2, [pc, #164]	@ (8003544 <HAL_ADC_MspInit+0x12c>)
 800349e:	f043 0302 	orr.w	r3, r3, #2
 80034a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034a4:	4b27      	ldr	r3, [pc, #156]	@ (8003544 <HAL_ADC_MspInit+0x12c>)
 80034a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80034b0:	2301      	movs	r3, #1
 80034b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034b4:	2303      	movs	r3, #3
 80034b6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034bc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80034c0:	4619      	mov	r1, r3
 80034c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034c6:	f002 fb03 	bl	8005ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80034ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80034ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034d0:	2303      	movs	r3, #3
 80034d2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80034dc:	4619      	mov	r1, r3
 80034de:	481a      	ldr	r0, [pc, #104]	@ (8003548 <HAL_ADC_MspInit+0x130>)
 80034e0:	f002 faf6 	bl	8005ad0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 80034e4:	4b19      	ldr	r3, [pc, #100]	@ (800354c <HAL_ADC_MspInit+0x134>)
 80034e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003550 <HAL_ADC_MspInit+0x138>)
 80034e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80034ea:	4b18      	ldr	r3, [pc, #96]	@ (800354c <HAL_ADC_MspInit+0x134>)
 80034ec:	2205      	movs	r2, #5
 80034ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034f0:	4b16      	ldr	r3, [pc, #88]	@ (800354c <HAL_ADC_MspInit+0x134>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034f6:	4b15      	ldr	r3, [pc, #84]	@ (800354c <HAL_ADC_MspInit+0x134>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80034fc:	4b13      	ldr	r3, [pc, #76]	@ (800354c <HAL_ADC_MspInit+0x134>)
 80034fe:	2280      	movs	r2, #128	@ 0x80
 8003500:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003502:	4b12      	ldr	r3, [pc, #72]	@ (800354c <HAL_ADC_MspInit+0x134>)
 8003504:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003508:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800350a:	4b10      	ldr	r3, [pc, #64]	@ (800354c <HAL_ADC_MspInit+0x134>)
 800350c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003510:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003512:	4b0e      	ldr	r3, [pc, #56]	@ (800354c <HAL_ADC_MspInit+0x134>)
 8003514:	2220      	movs	r2, #32
 8003516:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003518:	4b0c      	ldr	r3, [pc, #48]	@ (800354c <HAL_ADC_MspInit+0x134>)
 800351a:	2200      	movs	r2, #0
 800351c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800351e:	480b      	ldr	r0, [pc, #44]	@ (800354c <HAL_ADC_MspInit+0x134>)
 8003520:	f001 ffa4 	bl	800546c <HAL_DMA_Init>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 800352a:	f7ff ff4b 	bl	80033c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a06      	ldr	r2, [pc, #24]	@ (800354c <HAL_ADC_MspInit+0x134>)
 8003532:	655a      	str	r2, [r3, #84]	@ 0x54
 8003534:	4a05      	ldr	r2, [pc, #20]	@ (800354c <HAL_ADC_MspInit+0x134>)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800353a:	bf00      	nop
 800353c:	3780      	adds	r7, #128	@ 0x80
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000
 8003548:	48000400 	.word	0x48000400
 800354c:	20000114 	.word	0x20000114
 8003550:	40020408 	.word	0x40020408

08003554 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	@ 0x28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355c:	f107 0314 	add.w	r3, r7, #20
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003574:	d129      	bne.n	80035ca <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003576:	4b17      	ldr	r3, [pc, #92]	@ (80035d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8003578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357a:	4a16      	ldr	r2, [pc, #88]	@ (80035d4 <HAL_TIM_Encoder_MspInit+0x80>)
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	6593      	str	r3, [r2, #88]	@ 0x58
 8003582:	4b14      	ldr	r3, [pc, #80]	@ (80035d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800358e:	4b11      	ldr	r3, [pc, #68]	@ (80035d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8003590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003592:	4a10      	ldr	r2, [pc, #64]	@ (80035d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800359a:	4b0e      	ldr	r3, [pc, #56]	@ (80035d4 <HAL_TIM_Encoder_MspInit+0x80>)
 800359c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80035a6:	f248 0302 	movw	r3, #32770	@ 0x8002
 80035aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ac:	2302      	movs	r3, #2
 80035ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b4:	2300      	movs	r3, #0
 80035b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035b8:	2301      	movs	r3, #1
 80035ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	4619      	mov	r1, r3
 80035c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035c6:	f002 fa83 	bl	8005ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80035ca:	bf00      	nop
 80035cc:	3728      	adds	r7, #40	@ 0x28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000

080035d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a39      	ldr	r2, [pc, #228]	@ (80036cc <HAL_TIM_Base_MspInit+0xf4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d10c      	bne.n	8003604 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035ea:	4b39      	ldr	r3, [pc, #228]	@ (80036d0 <HAL_TIM_Base_MspInit+0xf8>)
 80035ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ee:	4a38      	ldr	r2, [pc, #224]	@ (80036d0 <HAL_TIM_Base_MspInit+0xf8>)
 80035f0:	f043 0302 	orr.w	r3, r3, #2
 80035f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80035f6:	4b36      	ldr	r3, [pc, #216]	@ (80036d0 <HAL_TIM_Base_MspInit+0xf8>)
 80035f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003602:	e05e      	b.n	80036c2 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM4)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a32      	ldr	r2, [pc, #200]	@ (80036d4 <HAL_TIM_Base_MspInit+0xfc>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d10c      	bne.n	8003628 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800360e:	4b30      	ldr	r3, [pc, #192]	@ (80036d0 <HAL_TIM_Base_MspInit+0xf8>)
 8003610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003612:	4a2f      	ldr	r2, [pc, #188]	@ (80036d0 <HAL_TIM_Base_MspInit+0xf8>)
 8003614:	f043 0304 	orr.w	r3, r3, #4
 8003618:	6593      	str	r3, [r2, #88]	@ 0x58
 800361a:	4b2d      	ldr	r3, [pc, #180]	@ (80036d0 <HAL_TIM_Base_MspInit+0xf8>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	69bb      	ldr	r3, [r7, #24]
}
 8003626:	e04c      	b.n	80036c2 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM5)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a2a      	ldr	r2, [pc, #168]	@ (80036d8 <HAL_TIM_Base_MspInit+0x100>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d114      	bne.n	800365c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003632:	4b27      	ldr	r3, [pc, #156]	@ (80036d0 <HAL_TIM_Base_MspInit+0xf8>)
 8003634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003636:	4a26      	ldr	r2, [pc, #152]	@ (80036d0 <HAL_TIM_Base_MspInit+0xf8>)
 8003638:	f043 0308 	orr.w	r3, r3, #8
 800363c:	6593      	str	r3, [r2, #88]	@ 0x58
 800363e:	4b24      	ldr	r3, [pc, #144]	@ (80036d0 <HAL_TIM_Base_MspInit+0xf8>)
 8003640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800364a:	2200      	movs	r2, #0
 800364c:	2100      	movs	r1, #0
 800364e:	2032      	movs	r0, #50	@ 0x32
 8003650:	f001 fed7 	bl	8005402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003654:	2032      	movs	r0, #50	@ 0x32
 8003656:	f001 feee 	bl	8005436 <HAL_NVIC_EnableIRQ>
}
 800365a:	e032      	b.n	80036c2 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM6)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a1e      	ldr	r2, [pc, #120]	@ (80036dc <HAL_TIM_Base_MspInit+0x104>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d114      	bne.n	8003690 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003666:	4b1a      	ldr	r3, [pc, #104]	@ (80036d0 <HAL_TIM_Base_MspInit+0xf8>)
 8003668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366a:	4a19      	ldr	r2, [pc, #100]	@ (80036d0 <HAL_TIM_Base_MspInit+0xf8>)
 800366c:	f043 0310 	orr.w	r3, r3, #16
 8003670:	6593      	str	r3, [r2, #88]	@ 0x58
 8003672:	4b17      	ldr	r3, [pc, #92]	@ (80036d0 <HAL_TIM_Base_MspInit+0xf8>)
 8003674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800367e:	2200      	movs	r2, #0
 8003680:	2100      	movs	r1, #0
 8003682:	2036      	movs	r0, #54	@ 0x36
 8003684:	f001 febd 	bl	8005402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003688:	2036      	movs	r0, #54	@ 0x36
 800368a:	f001 fed4 	bl	8005436 <HAL_NVIC_EnableIRQ>
}
 800368e:	e018      	b.n	80036c2 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a12      	ldr	r2, [pc, #72]	@ (80036e0 <HAL_TIM_Base_MspInit+0x108>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d113      	bne.n	80036c2 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800369a:	4b0d      	ldr	r3, [pc, #52]	@ (80036d0 <HAL_TIM_Base_MspInit+0xf8>)
 800369c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800369e:	4a0c      	ldr	r2, [pc, #48]	@ (80036d0 <HAL_TIM_Base_MspInit+0xf8>)
 80036a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80036a6:	4b0a      	ldr	r3, [pc, #40]	@ (80036d0 <HAL_TIM_Base_MspInit+0xf8>)
 80036a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80036b2:	2200      	movs	r2, #0
 80036b4:	2100      	movs	r1, #0
 80036b6:	2019      	movs	r0, #25
 80036b8:	f001 fea3 	bl	8005402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80036bc:	2019      	movs	r0, #25
 80036be:	f001 feba 	bl	8005436 <HAL_NVIC_EnableIRQ>
}
 80036c2:	bf00      	nop
 80036c4:	3720      	adds	r7, #32
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40000400 	.word	0x40000400
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40000800 	.word	0x40000800
 80036d8:	40000c00 	.word	0x40000c00
 80036dc:	40001000 	.word	0x40001000
 80036e0:	40014400 	.word	0x40014400

080036e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ec:	f107 030c 	add.w	r3, r7, #12
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a11      	ldr	r2, [pc, #68]	@ (8003748 <HAL_TIM_MspPostInit+0x64>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d11b      	bne.n	800373e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003706:	4b11      	ldr	r3, [pc, #68]	@ (800374c <HAL_TIM_MspPostInit+0x68>)
 8003708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800370a:	4a10      	ldr	r2, [pc, #64]	@ (800374c <HAL_TIM_MspPostInit+0x68>)
 800370c:	f043 0304 	orr.w	r3, r3, #4
 8003710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003712:	4b0e      	ldr	r3, [pc, #56]	@ (800374c <HAL_TIM_MspPostInit+0x68>)
 8003714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800371e:	2340      	movs	r3, #64	@ 0x40
 8003720:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003722:	2302      	movs	r3, #2
 8003724:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800372e:	2302      	movs	r3, #2
 8003730:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003732:	f107 030c 	add.w	r3, r7, #12
 8003736:	4619      	mov	r1, r3
 8003738:	4805      	ldr	r0, [pc, #20]	@ (8003750 <HAL_TIM_MspPostInit+0x6c>)
 800373a:	f002 f9c9 	bl	8005ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800373e:	bf00      	nop
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40000400 	.word	0x40000400
 800374c:	40021000 	.word	0x40021000
 8003750:	48000800 	.word	0x48000800

08003754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b09e      	sub	sp, #120	@ 0x78
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800375c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800376c:	f107 0310 	add.w	r3, r7, #16
 8003770:	2254      	movs	r2, #84	@ 0x54
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f007 fa4d 	bl	800ac14 <memset>
  if(huart->Instance==USART2)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a4d      	ldr	r2, [pc, #308]	@ (80038b4 <HAL_UART_MspInit+0x160>)
 8003780:	4293      	cmp	r3, r2
 8003782:	f040 8092 	bne.w	80038aa <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003786:	2302      	movs	r3, #2
 8003788:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800378a:	2300      	movs	r3, #0
 800378c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800378e:	f107 0310 	add.w	r3, r7, #16
 8003792:	4618      	mov	r0, r3
 8003794:	f003 f948 	bl	8006a28 <HAL_RCCEx_PeriphCLKConfig>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800379e:	f7ff fe11 	bl	80033c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037a2:	4b45      	ldr	r3, [pc, #276]	@ (80038b8 <HAL_UART_MspInit+0x164>)
 80037a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a6:	4a44      	ldr	r2, [pc, #272]	@ (80038b8 <HAL_UART_MspInit+0x164>)
 80037a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80037ae:	4b42      	ldr	r3, [pc, #264]	@ (80038b8 <HAL_UART_MspInit+0x164>)
 80037b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ba:	4b3f      	ldr	r3, [pc, #252]	@ (80038b8 <HAL_UART_MspInit+0x164>)
 80037bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037be:	4a3e      	ldr	r2, [pc, #248]	@ (80038b8 <HAL_UART_MspInit+0x164>)
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037c6:	4b3c      	ldr	r3, [pc, #240]	@ (80038b8 <HAL_UART_MspInit+0x164>)
 80037c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037d2:	230c      	movs	r3, #12
 80037d4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d6:	2302      	movs	r3, #2
 80037d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037de:	2300      	movs	r3, #0
 80037e0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037e2:	2307      	movs	r3, #7
 80037e4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80037ea:	4619      	mov	r1, r3
 80037ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037f0:	f002 f96e 	bl	8005ad0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80037f4:	4b31      	ldr	r3, [pc, #196]	@ (80038bc <HAL_UART_MspInit+0x168>)
 80037f6:	4a32      	ldr	r2, [pc, #200]	@ (80038c0 <HAL_UART_MspInit+0x16c>)
 80037f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80037fa:	4b30      	ldr	r3, [pc, #192]	@ (80038bc <HAL_UART_MspInit+0x168>)
 80037fc:	221b      	movs	r2, #27
 80037fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003800:	4b2e      	ldr	r3, [pc, #184]	@ (80038bc <HAL_UART_MspInit+0x168>)
 8003802:	2210      	movs	r2, #16
 8003804:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003806:	4b2d      	ldr	r3, [pc, #180]	@ (80038bc <HAL_UART_MspInit+0x168>)
 8003808:	2200      	movs	r2, #0
 800380a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800380c:	4b2b      	ldr	r3, [pc, #172]	@ (80038bc <HAL_UART_MspInit+0x168>)
 800380e:	2280      	movs	r2, #128	@ 0x80
 8003810:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003812:	4b2a      	ldr	r3, [pc, #168]	@ (80038bc <HAL_UART_MspInit+0x168>)
 8003814:	2200      	movs	r2, #0
 8003816:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003818:	4b28      	ldr	r3, [pc, #160]	@ (80038bc <HAL_UART_MspInit+0x168>)
 800381a:	2200      	movs	r2, #0
 800381c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800381e:	4b27      	ldr	r3, [pc, #156]	@ (80038bc <HAL_UART_MspInit+0x168>)
 8003820:	2200      	movs	r2, #0
 8003822:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003824:	4b25      	ldr	r3, [pc, #148]	@ (80038bc <HAL_UART_MspInit+0x168>)
 8003826:	2200      	movs	r2, #0
 8003828:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800382a:	4824      	ldr	r0, [pc, #144]	@ (80038bc <HAL_UART_MspInit+0x168>)
 800382c:	f001 fe1e 	bl	800546c <HAL_DMA_Init>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8003836:	f7ff fdc5 	bl	80033c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a1f      	ldr	r2, [pc, #124]	@ (80038bc <HAL_UART_MspInit+0x168>)
 800383e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003840:	4a1e      	ldr	r2, [pc, #120]	@ (80038bc <HAL_UART_MspInit+0x168>)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003846:	4b1f      	ldr	r3, [pc, #124]	@ (80038c4 <HAL_UART_MspInit+0x170>)
 8003848:	4a1f      	ldr	r2, [pc, #124]	@ (80038c8 <HAL_UART_MspInit+0x174>)
 800384a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800384c:	4b1d      	ldr	r3, [pc, #116]	@ (80038c4 <HAL_UART_MspInit+0x170>)
 800384e:	221a      	movs	r2, #26
 8003850:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003852:	4b1c      	ldr	r3, [pc, #112]	@ (80038c4 <HAL_UART_MspInit+0x170>)
 8003854:	2200      	movs	r2, #0
 8003856:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003858:	4b1a      	ldr	r3, [pc, #104]	@ (80038c4 <HAL_UART_MspInit+0x170>)
 800385a:	2200      	movs	r2, #0
 800385c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800385e:	4b19      	ldr	r3, [pc, #100]	@ (80038c4 <HAL_UART_MspInit+0x170>)
 8003860:	2280      	movs	r2, #128	@ 0x80
 8003862:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003864:	4b17      	ldr	r3, [pc, #92]	@ (80038c4 <HAL_UART_MspInit+0x170>)
 8003866:	2200      	movs	r2, #0
 8003868:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800386a:	4b16      	ldr	r3, [pc, #88]	@ (80038c4 <HAL_UART_MspInit+0x170>)
 800386c:	2200      	movs	r2, #0
 800386e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003870:	4b14      	ldr	r3, [pc, #80]	@ (80038c4 <HAL_UART_MspInit+0x170>)
 8003872:	2200      	movs	r2, #0
 8003874:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003876:	4b13      	ldr	r3, [pc, #76]	@ (80038c4 <HAL_UART_MspInit+0x170>)
 8003878:	2200      	movs	r2, #0
 800387a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800387c:	4811      	ldr	r0, [pc, #68]	@ (80038c4 <HAL_UART_MspInit+0x170>)
 800387e:	f001 fdf5 	bl	800546c <HAL_DMA_Init>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8003888:	f7ff fd9c 	bl	80033c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a0d      	ldr	r2, [pc, #52]	@ (80038c4 <HAL_UART_MspInit+0x170>)
 8003890:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003894:	4a0b      	ldr	r2, [pc, #44]	@ (80038c4 <HAL_UART_MspInit+0x170>)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800389a:	2200      	movs	r2, #0
 800389c:	2100      	movs	r1, #0
 800389e:	2026      	movs	r0, #38	@ 0x26
 80038a0:	f001 fdaf 	bl	8005402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038a4:	2026      	movs	r0, #38	@ 0x26
 80038a6:	f001 fdc6 	bl	8005436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038aa:	bf00      	nop
 80038ac:	3778      	adds	r7, #120	@ 0x78
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40004400 	.word	0x40004400
 80038b8:	40021000 	.word	0x40021000
 80038bc:	20000708 	.word	0x20000708
 80038c0:	40020008 	.word	0x40020008
 80038c4:	20000768 	.word	0x20000768
 80038c8:	4002001c 	.word	0x4002001c

080038cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038d0:	bf00      	nop
 80038d2:	e7fd      	b.n	80038d0 <NMI_Handler+0x4>

080038d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038d8:	bf00      	nop
 80038da:	e7fd      	b.n	80038d8 <HardFault_Handler+0x4>

080038dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038e0:	bf00      	nop
 80038e2:	e7fd      	b.n	80038e0 <MemManage_Handler+0x4>

080038e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <BusFault_Handler+0x4>

080038ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038f0:	bf00      	nop
 80038f2:	e7fd      	b.n	80038f0 <UsageFault_Handler+0x4>

080038f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038f8:	bf00      	nop
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003902:	b480      	push	{r7}
 8003904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003906:	bf00      	nop
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003922:	f000 f8ef 	bl	8003b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003930:	4802      	ldr	r0, [pc, #8]	@ (800393c <DMA1_Channel1_IRQHandler+0x10>)
 8003932:	f001 ff7e 	bl	8005832 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000708 	.word	0x20000708

08003940 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003944:	4802      	ldr	r0, [pc, #8]	@ (8003950 <DMA1_Channel2_IRQHandler+0x10>)
 8003946:	f001 ff74 	bl	8005832 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000768 	.word	0x20000768

08003954 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003958:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800395c:	f002 fa6a 	bl	8005e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003960:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003964:	f002 fa66 	bl	8005e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003968:	bf00      	nop
 800396a:	bd80      	pop	{r7, pc}

0800396c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003970:	4802      	ldr	r0, [pc, #8]	@ (800397c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003972:	f003 ffab 	bl	80078cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000570 	.word	0x20000570

08003980 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003984:	4802      	ldr	r0, [pc, #8]	@ (8003990 <USART2_IRQHandler+0x10>)
 8003986:	f005 fc61 	bl	800924c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	2000063c 	.word	0x2000063c

08003994 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003998:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800399c:	f002 fa4a 	bl	8005e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80039a0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80039a4:	f002 fa46 	bl	8005e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039a8:	bf00      	nop
 80039aa:	bd80      	pop	{r7, pc}

080039ac <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80039b0:	4802      	ldr	r0, [pc, #8]	@ (80039bc <TIM5_IRQHandler+0x10>)
 80039b2:	f003 ff8b 	bl	80078cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	200003d8 	.word	0x200003d8

080039c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039c4:	4802      	ldr	r0, [pc, #8]	@ (80039d0 <TIM6_DAC_IRQHandler+0x10>)
 80039c6:	f003 ff81 	bl	80078cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200004a4 	.word	0x200004a4

080039d4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039d8:	4802      	ldr	r0, [pc, #8]	@ (80039e4 <DMA2_Channel1_IRQHandler+0x10>)
 80039da:	f001 ff2a 	bl	8005832 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000114 	.word	0x20000114

080039e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80039ec:	4b06      	ldr	r3, [pc, #24]	@ (8003a08 <SystemInit+0x20>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f2:	4a05      	ldr	r2, [pc, #20]	@ (8003a08 <SystemInit+0x20>)
 80039f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80039f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	e000ed00 	.word	0xe000ed00

08003a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a0c:	480d      	ldr	r0, [pc, #52]	@ (8003a44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a0e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a10:	f7ff ffea 	bl	80039e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a14:	480c      	ldr	r0, [pc, #48]	@ (8003a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a16:	490d      	ldr	r1, [pc, #52]	@ (8003a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a18:	4a0d      	ldr	r2, [pc, #52]	@ (8003a50 <LoopForever+0xe>)
  movs r3, #0
 8003a1a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003a1c:	e002      	b.n	8003a24 <LoopCopyDataInit>

08003a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a22:	3304      	adds	r3, #4

08003a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a28:	d3f9      	bcc.n	8003a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a2c:	4c0a      	ldr	r4, [pc, #40]	@ (8003a58 <LoopForever+0x16>)
  movs r3, #0
 8003a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a30:	e001      	b.n	8003a36 <LoopFillZerobss>

08003a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a34:	3204      	adds	r2, #4

08003a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a38:	d3fb      	bcc.n	8003a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a3a:	f007 f8f9 	bl	800ac30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a3e:	f7fd fbe3 	bl	8001208 <main>

08003a42 <LoopForever>:

LoopForever:
    b LoopForever
 8003a42:	e7fe      	b.n	8003a42 <LoopForever>
  ldr   r0, =_estack
 8003a44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a4c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003a50:	0800aeec 	.word	0x0800aeec
  ldr r2, =_sbss
 8003a54:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003a58:	200010ac 	.word	0x200010ac

08003a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a5c:	e7fe      	b.n	8003a5c <ADC1_2_IRQHandler>

08003a5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a68:	2003      	movs	r0, #3
 8003a6a:	f001 fcbf 	bl	80053ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a6e:	2000      	movs	r0, #0
 8003a70:	f000 f80e 	bl	8003a90 <HAL_InitTick>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	71fb      	strb	r3, [r7, #7]
 8003a7e:	e001      	b.n	8003a84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a80:	f7ff fca6 	bl	80033d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a84:	79fb      	ldrb	r3, [r7, #7]

}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003a9c:	4b16      	ldr	r3, [pc, #88]	@ (8003af8 <HAL_InitTick+0x68>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d022      	beq.n	8003aea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003aa4:	4b15      	ldr	r3, [pc, #84]	@ (8003afc <HAL_InitTick+0x6c>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	4b13      	ldr	r3, [pc, #76]	@ (8003af8 <HAL_InitTick+0x68>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003ab0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f001 fcca 	bl	8005452 <HAL_SYSTICK_Config>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10f      	bne.n	8003ae4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b0f      	cmp	r3, #15
 8003ac8:	d809      	bhi.n	8003ade <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003aca:	2200      	movs	r2, #0
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad2:	f001 fc96 	bl	8005402 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b00 <HAL_InitTick+0x70>)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	e007      	b.n	8003aee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
 8003ae2:	e004      	b.n	8003aee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
 8003ae8:	e001      	b.n	8003aee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20000020 	.word	0x20000020
 8003afc:	20000018 	.word	0x20000018
 8003b00:	2000001c 	.word	0x2000001c

08003b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b08:	4b05      	ldr	r3, [pc, #20]	@ (8003b20 <HAL_IncTick+0x1c>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4b05      	ldr	r3, [pc, #20]	@ (8003b24 <HAL_IncTick+0x20>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4413      	add	r3, r2
 8003b12:	4a03      	ldr	r2, [pc, #12]	@ (8003b20 <HAL_IncTick+0x1c>)
 8003b14:	6013      	str	r3, [r2, #0]
}
 8003b16:	bf00      	nop
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	20000f70 	.word	0x20000f70
 8003b24:	20000020 	.word	0x20000020

08003b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b2c:	4b03      	ldr	r3, [pc, #12]	@ (8003b3c <HAL_GetTick+0x14>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000f70 	.word	0x20000f70

08003b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b48:	f7ff ffee 	bl	8003b28 <HAL_GetTick>
 8003b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b58:	d004      	beq.n	8003b64 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b5a:	4b09      	ldr	r3, [pc, #36]	@ (8003b80 <HAL_Delay+0x40>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4413      	add	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b64:	bf00      	nop
 8003b66:	f7ff ffdf 	bl	8003b28 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d8f7      	bhi.n	8003b66 <HAL_Delay+0x26>
  {
  }
}
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000020 	.word	0x20000020

08003b84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	609a      	str	r2, [r3, #8]
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3360      	adds	r3, #96	@ 0x60
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	4b08      	ldr	r3, [pc, #32]	@ (8003c30 <LL_ADC_SetOffset+0x44>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003c24:	bf00      	nop
 8003c26:	371c      	adds	r7, #28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	03fff000 	.word	0x03fff000

08003c34 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3360      	adds	r3, #96	@ 0x60
 8003c42:	461a      	mov	r2, r3
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3360      	adds	r3, #96	@ 0x60
 8003c70:	461a      	mov	r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003c8a:	bf00      	nop
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b087      	sub	sp, #28
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	3360      	adds	r3, #96	@ 0x60
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003cc0:	bf00      	nop
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3360      	adds	r3, #96	@ 0x60
 8003cdc:	461a      	mov	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003cf6:	bf00      	nop
 8003cf8:	371c      	adds	r7, #28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	615a      	str	r2, [r3, #20]
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b087      	sub	sp, #28
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3330      	adds	r3, #48	@ 0x30
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	0a1b      	lsrs	r3, r3, #8
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	4413      	add	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	211f      	movs	r1, #31
 8003d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	401a      	ands	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	0e9b      	lsrs	r3, r3, #26
 8003d86:	f003 011f 	and.w	r1, r3, #31
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f003 031f 	and.w	r3, r3, #31
 8003d90:	fa01 f303 	lsl.w	r3, r1, r3
 8003d94:	431a      	orrs	r2, r3
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b087      	sub	sp, #28
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3314      	adds	r3, #20
 8003db6:	461a      	mov	r2, r3
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	0e5b      	lsrs	r3, r3, #25
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	4413      	add	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	0d1b      	lsrs	r3, r3, #20
 8003dce:	f003 031f 	and.w	r3, r3, #31
 8003dd2:	2107      	movs	r1, #7
 8003dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	401a      	ands	r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	0d1b      	lsrs	r3, r3, #20
 8003de0:	f003 031f 	and.w	r3, r3, #31
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dea:	431a      	orrs	r2, r3
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003df0:	bf00      	nop
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e14:	43db      	mvns	r3, r3
 8003e16:	401a      	ands	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f003 0318 	and.w	r3, r3, #24
 8003e1e:	4908      	ldr	r1, [pc, #32]	@ (8003e40 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003e20:	40d9      	lsrs	r1, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	400b      	ands	r3, r1
 8003e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	0007ffff 	.word	0x0007ffff

08003e44 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 031f 	and.w	r3, r3, #31
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003e70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6093      	str	r3, [r2, #8]
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e98:	d101      	bne.n	8003e9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003ebc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ec0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ee8:	d101      	bne.n	8003eee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f10:	f043 0201 	orr.w	r2, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <LL_ADC_IsEnabled+0x18>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <LL_ADC_IsEnabled+0x1a>
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f5a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f5e:	f043 0204 	orr.w	r2, r3, #4
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d101      	bne.n	8003f8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d101      	bne.n	8003fb0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fc0:	b590      	push	{r4, r7, lr}
 8003fc2:	b089      	sub	sp, #36	@ 0x24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e1a9      	b.n	800432e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d109      	bne.n	8003ffc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff fa15 	bl	8003418 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff ff3f 	bl	8003e84 <LL_ADC_IsDeepPowerDownEnabled>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d004      	beq.n	8004016 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff ff25 	bl	8003e60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff ff5a 	bl	8003ed4 <LL_ADC_IsInternalRegulatorEnabled>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d115      	bne.n	8004052 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff ff3e 	bl	8003eac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004030:	4b9c      	ldr	r3, [pc, #624]	@ (80042a4 <HAL_ADC_Init+0x2e4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	099b      	lsrs	r3, r3, #6
 8004036:	4a9c      	ldr	r2, [pc, #624]	@ (80042a8 <HAL_ADC_Init+0x2e8>)
 8004038:	fba2 2303 	umull	r2, r3, r2, r3
 800403c:	099b      	lsrs	r3, r3, #6
 800403e:	3301      	adds	r3, #1
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004044:	e002      	b.n	800404c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	3b01      	subs	r3, #1
 800404a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f9      	bne.n	8004046 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff ff3c 	bl	8003ed4 <LL_ADC_IsInternalRegulatorEnabled>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10d      	bne.n	800407e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004066:	f043 0210 	orr.w	r2, r3, #16
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004072:	f043 0201 	orr.w	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff ff75 	bl	8003f72 <LL_ADC_REG_IsConversionOngoing>
 8004088:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b00      	cmp	r3, #0
 8004094:	f040 8142 	bne.w	800431c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f040 813e 	bne.w	800431c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80040a8:	f043 0202 	orr.w	r2, r3, #2
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff ff35 	bl	8003f24 <LL_ADC_IsEnabled>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d141      	bne.n	8004144 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040c8:	d004      	beq.n	80040d4 <HAL_ADC_Init+0x114>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a77      	ldr	r2, [pc, #476]	@ (80042ac <HAL_ADC_Init+0x2ec>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d10f      	bne.n	80040f4 <HAL_ADC_Init+0x134>
 80040d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80040d8:	f7ff ff24 	bl	8003f24 <LL_ADC_IsEnabled>
 80040dc:	4604      	mov	r4, r0
 80040de:	4873      	ldr	r0, [pc, #460]	@ (80042ac <HAL_ADC_Init+0x2ec>)
 80040e0:	f7ff ff20 	bl	8003f24 <LL_ADC_IsEnabled>
 80040e4:	4603      	mov	r3, r0
 80040e6:	4323      	orrs	r3, r4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bf0c      	ite	eq
 80040ec:	2301      	moveq	r3, #1
 80040ee:	2300      	movne	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	e012      	b.n	800411a <HAL_ADC_Init+0x15a>
 80040f4:	486e      	ldr	r0, [pc, #440]	@ (80042b0 <HAL_ADC_Init+0x2f0>)
 80040f6:	f7ff ff15 	bl	8003f24 <LL_ADC_IsEnabled>
 80040fa:	4604      	mov	r4, r0
 80040fc:	486d      	ldr	r0, [pc, #436]	@ (80042b4 <HAL_ADC_Init+0x2f4>)
 80040fe:	f7ff ff11 	bl	8003f24 <LL_ADC_IsEnabled>
 8004102:	4603      	mov	r3, r0
 8004104:	431c      	orrs	r4, r3
 8004106:	486c      	ldr	r0, [pc, #432]	@ (80042b8 <HAL_ADC_Init+0x2f8>)
 8004108:	f7ff ff0c 	bl	8003f24 <LL_ADC_IsEnabled>
 800410c:	4603      	mov	r3, r0
 800410e:	4323      	orrs	r3, r4
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d012      	beq.n	8004144 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004126:	d004      	beq.n	8004132 <HAL_ADC_Init+0x172>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a5f      	ldr	r2, [pc, #380]	@ (80042ac <HAL_ADC_Init+0x2ec>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d101      	bne.n	8004136 <HAL_ADC_Init+0x176>
 8004132:	4a62      	ldr	r2, [pc, #392]	@ (80042bc <HAL_ADC_Init+0x2fc>)
 8004134:	e000      	b.n	8004138 <HAL_ADC_Init+0x178>
 8004136:	4a62      	ldr	r2, [pc, #392]	@ (80042c0 <HAL_ADC_Init+0x300>)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	4619      	mov	r1, r3
 800413e:	4610      	mov	r0, r2
 8004140:	f7ff fd20 	bl	8003b84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	7f5b      	ldrb	r3, [r3, #29]
 8004148:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800414e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004154:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800415a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004162:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004164:	4313      	orrs	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800416e:	2b01      	cmp	r3, #1
 8004170:	d106      	bne.n	8004180 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004176:	3b01      	subs	r3, #1
 8004178:	045b      	lsls	r3, r3, #17
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4313      	orrs	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	2b00      	cmp	r3, #0
 8004186:	d009      	beq.n	800419c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004194:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4313      	orrs	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	4b48      	ldr	r3, [pc, #288]	@ (80042c4 <HAL_ADC_Init+0x304>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6812      	ldr	r2, [r2, #0]
 80041aa:	69b9      	ldr	r1, [r7, #24]
 80041ac:	430b      	orrs	r3, r1
 80041ae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff fee4 	bl	8003f98 <LL_ADC_INJ_IsConversionOngoing>
 80041d0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d17f      	bne.n	80042d8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d17c      	bne.n	80042d8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80041e2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80041ea:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80041ec:	4313      	orrs	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041fa:	f023 0302 	bic.w	r3, r3, #2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	69b9      	ldr	r1, [r7, #24]
 8004204:	430b      	orrs	r3, r1
 8004206:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d017      	beq.n	8004240 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800421e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004228:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800422c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6911      	ldr	r1, [r2, #16]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	430b      	orrs	r3, r1
 800423a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800423e:	e013      	b.n	8004268 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800424e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004260:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004264:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800426e:	2b01      	cmp	r3, #1
 8004270:	d12a      	bne.n	80042c8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800427c:	f023 0304 	bic.w	r3, r3, #4
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004288:	4311      	orrs	r1, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800428e:	4311      	orrs	r1, r2
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004294:	430a      	orrs	r2, r1
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0201 	orr.w	r2, r2, #1
 80042a0:	611a      	str	r2, [r3, #16]
 80042a2:	e019      	b.n	80042d8 <HAL_ADC_Init+0x318>
 80042a4:	20000018 	.word	0x20000018
 80042a8:	053e2d63 	.word	0x053e2d63
 80042ac:	50000100 	.word	0x50000100
 80042b0:	50000400 	.word	0x50000400
 80042b4:	50000500 	.word	0x50000500
 80042b8:	50000600 	.word	0x50000600
 80042bc:	50000300 	.word	0x50000300
 80042c0:	50000700 	.word	0x50000700
 80042c4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691a      	ldr	r2, [r3, #16]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0201 	bic.w	r2, r2, #1
 80042d6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d10c      	bne.n	80042fa <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e6:	f023 010f 	bic.w	r1, r3, #15
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	1e5a      	subs	r2, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80042f8:	e007      	b.n	800430a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 020f 	bic.w	r2, r2, #15
 8004308:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800430e:	f023 0303 	bic.w	r3, r3, #3
 8004312:	f043 0201 	orr.w	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	65da      	str	r2, [r3, #92]	@ 0x5c
 800431a:	e007      	b.n	800432c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004320:	f043 0210 	orr.w	r2, r3, #16
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800432c:	7ffb      	ldrb	r3, [r7, #31]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3724      	adds	r7, #36	@ 0x24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd90      	pop	{r4, r7, pc}
 8004336:	bf00      	nop

08004338 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800434c:	d004      	beq.n	8004358 <HAL_ADC_Start_DMA+0x20>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a5a      	ldr	r2, [pc, #360]	@ (80044bc <HAL_ADC_Start_DMA+0x184>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d101      	bne.n	800435c <HAL_ADC_Start_DMA+0x24>
 8004358:	4b59      	ldr	r3, [pc, #356]	@ (80044c0 <HAL_ADC_Start_DMA+0x188>)
 800435a:	e000      	b.n	800435e <HAL_ADC_Start_DMA+0x26>
 800435c:	4b59      	ldr	r3, [pc, #356]	@ (80044c4 <HAL_ADC_Start_DMA+0x18c>)
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff fd70 	bl	8003e44 <LL_ADC_GetMultimode>
 8004364:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff fe01 	bl	8003f72 <LL_ADC_REG_IsConversionOngoing>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	f040 809b 	bne.w	80044ae <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_ADC_Start_DMA+0x4e>
 8004382:	2302      	movs	r3, #2
 8004384:	e096      	b.n	80044b4 <HAL_ADC_Start_DMA+0x17c>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a4d      	ldr	r2, [pc, #308]	@ (80044c8 <HAL_ADC_Start_DMA+0x190>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d008      	beq.n	80043aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b05      	cmp	r3, #5
 80043a2:	d002      	beq.n	80043aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	2b09      	cmp	r3, #9
 80043a8:	d17a      	bne.n	80044a0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 fcf6 	bl	8004d9c <ADC_Enable>
 80043b0:	4603      	mov	r3, r0
 80043b2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d16d      	bne.n	8004496 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80043c2:	f023 0301 	bic.w	r3, r3, #1
 80043c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a3a      	ldr	r2, [pc, #232]	@ (80044bc <HAL_ADC_Start_DMA+0x184>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d009      	beq.n	80043ec <HAL_ADC_Start_DMA+0xb4>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a3b      	ldr	r2, [pc, #236]	@ (80044cc <HAL_ADC_Start_DMA+0x194>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d002      	beq.n	80043e8 <HAL_ADC_Start_DMA+0xb0>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	e003      	b.n	80043f0 <HAL_ADC_Start_DMA+0xb8>
 80043e8:	4b39      	ldr	r3, [pc, #228]	@ (80044d0 <HAL_ADC_Start_DMA+0x198>)
 80043ea:	e001      	b.n	80043f0 <HAL_ADC_Start_DMA+0xb8>
 80043ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	6812      	ldr	r2, [r2, #0]
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d002      	beq.n	80043fe <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d105      	bne.n	800440a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004402:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d006      	beq.n	8004424 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800441a:	f023 0206 	bic.w	r2, r3, #6
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	661a      	str	r2, [r3, #96]	@ 0x60
 8004422:	e002      	b.n	800442a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442e:	4a29      	ldr	r2, [pc, #164]	@ (80044d4 <HAL_ADC_Start_DMA+0x19c>)
 8004430:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004436:	4a28      	ldr	r2, [pc, #160]	@ (80044d8 <HAL_ADC_Start_DMA+0x1a0>)
 8004438:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443e:	4a27      	ldr	r2, [pc, #156]	@ (80044dc <HAL_ADC_Start_DMA+0x1a4>)
 8004440:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	221c      	movs	r2, #28
 8004448:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0210 	orr.w	r2, r2, #16
 8004460:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0201 	orr.w	r2, r2, #1
 8004470:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3340      	adds	r3, #64	@ 0x40
 800447c:	4619      	mov	r1, r3
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f001 f89b 	bl	80055bc <HAL_DMA_Start_IT>
 8004486:	4603      	mov	r3, r0
 8004488:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff fd5b 	bl	8003f4a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004494:	e00d      	b.n	80044b2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800449e:	e008      	b.n	80044b2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80044ac:	e001      	b.n	80044b2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80044ae:	2302      	movs	r3, #2
 80044b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	50000100 	.word	0x50000100
 80044c0:	50000300 	.word	0x50000300
 80044c4:	50000700 	.word	0x50000700
 80044c8:	50000600 	.word	0x50000600
 80044cc:	50000500 	.word	0x50000500
 80044d0:	50000400 	.word	0x50000400
 80044d4:	08004ec9 	.word	0x08004ec9
 80044d8:	08004fa1 	.word	0x08004fa1
 80044dc:	08004fbd 	.word	0x08004fbd

080044e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b0b6      	sub	sp, #216	@ 0xd8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800452c:	2300      	movs	r3, #0
 800452e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004536:	2b01      	cmp	r3, #1
 8004538:	d102      	bne.n	8004540 <HAL_ADC_ConfigChannel+0x24>
 800453a:	2302      	movs	r3, #2
 800453c:	f000 bc13 	b.w	8004d66 <HAL_ADC_ConfigChannel+0x84a>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff fd10 	bl	8003f72 <LL_ADC_REG_IsConversionOngoing>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	f040 83f3 	bne.w	8004d40 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6818      	ldr	r0, [r3, #0]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	6859      	ldr	r1, [r3, #4]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	f7ff fbf1 	bl	8003d4e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff fcfe 	bl	8003f72 <LL_ADC_REG_IsConversionOngoing>
 8004576:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fd0a 	bl	8003f98 <LL_ADC_INJ_IsConversionOngoing>
 8004584:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004588:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800458c:	2b00      	cmp	r3, #0
 800458e:	f040 81d9 	bne.w	8004944 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004592:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004596:	2b00      	cmp	r3, #0
 8004598:	f040 81d4 	bne.w	8004944 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045a4:	d10f      	bne.n	80045c6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	4619      	mov	r1, r3
 80045b2:	f7ff fbf8 	bl	8003da6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fb9f 	bl	8003d02 <LL_ADC_SetSamplingTimeCommonConfig>
 80045c4:	e00e      	b.n	80045e4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6819      	ldr	r1, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	461a      	mov	r2, r3
 80045d4:	f7ff fbe7 	bl	8003da6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2100      	movs	r1, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fb8f 	bl	8003d02 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	695a      	ldr	r2, [r3, #20]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	08db      	lsrs	r3, r3, #3
 80045f0:	f003 0303 	and.w	r3, r3, #3
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2b04      	cmp	r3, #4
 8004604:	d022      	beq.n	800464c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6919      	ldr	r1, [r3, #16]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004616:	f7ff fae9 	bl	8003bec <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6919      	ldr	r1, [r3, #16]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	461a      	mov	r2, r3
 8004628:	f7ff fb35 	bl	8003c96 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6818      	ldr	r0, [r3, #0]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004638:	2b01      	cmp	r3, #1
 800463a:	d102      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x126>
 800463c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004640:	e000      	b.n	8004644 <HAL_ADC_ConfigChannel+0x128>
 8004642:	2300      	movs	r3, #0
 8004644:	461a      	mov	r2, r3
 8004646:	f7ff fb41 	bl	8003ccc <LL_ADC_SetOffsetSaturation>
 800464a:	e17b      	b.n	8004944 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff faee 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 8004658:	4603      	mov	r3, r0
 800465a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10a      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x15c>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2100      	movs	r1, #0
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff fae3 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 800466e:	4603      	mov	r3, r0
 8004670:	0e9b      	lsrs	r3, r3, #26
 8004672:	f003 021f 	and.w	r2, r3, #31
 8004676:	e01e      	b.n	80046b6 <HAL_ADC_ConfigChannel+0x19a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2100      	movs	r1, #0
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff fad8 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 8004684:	4603      	mov	r3, r0
 8004686:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800468e:	fa93 f3a3 	rbit	r3, r3
 8004692:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004696:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800469a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800469e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80046a6:	2320      	movs	r3, #32
 80046a8:	e004      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80046aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046ae:	fab3 f383 	clz	r3, r3
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d105      	bne.n	80046ce <HAL_ADC_ConfigChannel+0x1b2>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	0e9b      	lsrs	r3, r3, #26
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	e018      	b.n	8004700 <HAL_ADC_ConfigChannel+0x1e4>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80046da:	fa93 f3a3 	rbit	r3, r3
 80046de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80046e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80046ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80046f2:	2320      	movs	r3, #32
 80046f4:	e004      	b.n	8004700 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80046f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80046fa:	fab3 f383 	clz	r3, r3
 80046fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004700:	429a      	cmp	r2, r3
 8004702:	d106      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2200      	movs	r2, #0
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff faa7 	bl	8003c60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2101      	movs	r1, #1
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff fa8b 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 800471e:	4603      	mov	r3, r0
 8004720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10a      	bne.n	800473e <HAL_ADC_ConfigChannel+0x222>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2101      	movs	r1, #1
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff fa80 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 8004734:	4603      	mov	r3, r0
 8004736:	0e9b      	lsrs	r3, r3, #26
 8004738:	f003 021f 	and.w	r2, r3, #31
 800473c:	e01e      	b.n	800477c <HAL_ADC_ConfigChannel+0x260>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2101      	movs	r1, #1
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff fa75 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 800474a:	4603      	mov	r3, r0
 800474c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004750:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800475c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004760:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004764:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800476c:	2320      	movs	r3, #32
 800476e:	e004      	b.n	800477a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004770:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004774:	fab3 f383 	clz	r3, r3
 8004778:	b2db      	uxtb	r3, r3
 800477a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004784:	2b00      	cmp	r3, #0
 8004786:	d105      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x278>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	0e9b      	lsrs	r3, r3, #26
 800478e:	f003 031f 	and.w	r3, r3, #31
 8004792:	e018      	b.n	80047c6 <HAL_ADC_ConfigChannel+0x2aa>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047a0:	fa93 f3a3 	rbit	r3, r3
 80047a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80047a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80047b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80047b8:	2320      	movs	r3, #32
 80047ba:	e004      	b.n	80047c6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80047bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047c0:	fab3 f383 	clz	r3, r3
 80047c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d106      	bne.n	80047d8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2200      	movs	r2, #0
 80047d0:	2101      	movs	r1, #1
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff fa44 	bl	8003c60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2102      	movs	r1, #2
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fa28 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10a      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x2e8>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2102      	movs	r1, #2
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff fa1d 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 80047fa:	4603      	mov	r3, r0
 80047fc:	0e9b      	lsrs	r3, r3, #26
 80047fe:	f003 021f 	and.w	r2, r3, #31
 8004802:	e01e      	b.n	8004842 <HAL_ADC_ConfigChannel+0x326>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2102      	movs	r1, #2
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff fa12 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 8004810:	4603      	mov	r3, r0
 8004812:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004816:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800481a:	fa93 f3a3 	rbit	r3, r3
 800481e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004822:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004826:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800482a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004832:	2320      	movs	r3, #32
 8004834:	e004      	b.n	8004840 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004836:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800483a:	fab3 f383 	clz	r3, r3
 800483e:	b2db      	uxtb	r3, r3
 8004840:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800484a:	2b00      	cmp	r3, #0
 800484c:	d105      	bne.n	800485a <HAL_ADC_ConfigChannel+0x33e>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	0e9b      	lsrs	r3, r3, #26
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	e016      	b.n	8004888 <HAL_ADC_ConfigChannel+0x36c>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004862:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004866:	fa93 f3a3 	rbit	r3, r3
 800486a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800486c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800486e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004872:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800487a:	2320      	movs	r3, #32
 800487c:	e004      	b.n	8004888 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800487e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004882:	fab3 f383 	clz	r3, r3
 8004886:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004888:	429a      	cmp	r2, r3
 800488a:	d106      	bne.n	800489a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2200      	movs	r2, #0
 8004892:	2102      	movs	r1, #2
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff f9e3 	bl	8003c60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2103      	movs	r1, #3
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff f9c7 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10a      	bne.n	80048c6 <HAL_ADC_ConfigChannel+0x3aa>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2103      	movs	r1, #3
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff f9bc 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 80048bc:	4603      	mov	r3, r0
 80048be:	0e9b      	lsrs	r3, r3, #26
 80048c0:	f003 021f 	and.w	r2, r3, #31
 80048c4:	e017      	b.n	80048f6 <HAL_ADC_ConfigChannel+0x3da>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2103      	movs	r1, #3
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff f9b1 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 80048d2:	4603      	mov	r3, r0
 80048d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048d8:	fa93 f3a3 	rbit	r3, r3
 80048dc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80048de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048e0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80048e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80048e8:	2320      	movs	r3, #32
 80048ea:	e003      	b.n	80048f4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80048ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048ee:	fab3 f383 	clz	r3, r3
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d105      	bne.n	800490e <HAL_ADC_ConfigChannel+0x3f2>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	0e9b      	lsrs	r3, r3, #26
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	e011      	b.n	8004932 <HAL_ADC_ConfigChannel+0x416>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004914:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004916:	fa93 f3a3 	rbit	r3, r3
 800491a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800491c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800491e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004920:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004926:	2320      	movs	r3, #32
 8004928:	e003      	b.n	8004932 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800492a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800492c:	fab3 f383 	clz	r3, r3
 8004930:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004932:	429a      	cmp	r2, r3
 8004934:	d106      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2200      	movs	r2, #0
 800493c:	2103      	movs	r1, #3
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff f98e 	bl	8003c60 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff faeb 	bl	8003f24 <LL_ADC_IsEnabled>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	f040 813d 	bne.w	8004bd0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6819      	ldr	r1, [r3, #0]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	461a      	mov	r2, r3
 8004964:	f7ff fa4a 	bl	8003dfc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4aa2      	ldr	r2, [pc, #648]	@ (8004bf8 <HAL_ADC_ConfigChannel+0x6dc>)
 800496e:	4293      	cmp	r3, r2
 8004970:	f040 812e 	bne.w	8004bd0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10b      	bne.n	800499c <HAL_ADC_ConfigChannel+0x480>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	0e9b      	lsrs	r3, r3, #26
 800498a:	3301      	adds	r3, #1
 800498c:	f003 031f 	and.w	r3, r3, #31
 8004990:	2b09      	cmp	r3, #9
 8004992:	bf94      	ite	ls
 8004994:	2301      	movls	r3, #1
 8004996:	2300      	movhi	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	e019      	b.n	80049d0 <HAL_ADC_ConfigChannel+0x4b4>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049a4:	fa93 f3a3 	rbit	r3, r3
 80049a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80049aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049ac:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80049ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80049b4:	2320      	movs	r3, #32
 80049b6:	e003      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80049b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049ba:	fab3 f383 	clz	r3, r3
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	3301      	adds	r3, #1
 80049c2:	f003 031f 	and.w	r3, r3, #31
 80049c6:	2b09      	cmp	r3, #9
 80049c8:	bf94      	ite	ls
 80049ca:	2301      	movls	r3, #1
 80049cc:	2300      	movhi	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d079      	beq.n	8004ac8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d107      	bne.n	80049f0 <HAL_ADC_ConfigChannel+0x4d4>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	0e9b      	lsrs	r3, r3, #26
 80049e6:	3301      	adds	r3, #1
 80049e8:	069b      	lsls	r3, r3, #26
 80049ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049ee:	e015      	b.n	8004a1c <HAL_ADC_ConfigChannel+0x500>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049f8:	fa93 f3a3 	rbit	r3, r3
 80049fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80049fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a00:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004a08:	2320      	movs	r3, #32
 8004a0a:	e003      	b.n	8004a14 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a0e:	fab3 f383 	clz	r3, r3
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	3301      	adds	r3, #1
 8004a16:	069b      	lsls	r3, r3, #26
 8004a18:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d109      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x520>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	0e9b      	lsrs	r3, r3, #26
 8004a2e:	3301      	adds	r3, #1
 8004a30:	f003 031f 	and.w	r3, r3, #31
 8004a34:	2101      	movs	r1, #1
 8004a36:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3a:	e017      	b.n	8004a6c <HAL_ADC_ConfigChannel+0x550>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a44:	fa93 f3a3 	rbit	r3, r3
 8004a48:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004a54:	2320      	movs	r3, #32
 8004a56:	e003      	b.n	8004a60 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004a58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a5a:	fab3 f383 	clz	r3, r3
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	3301      	adds	r3, #1
 8004a62:	f003 031f 	and.w	r3, r3, #31
 8004a66:	2101      	movs	r1, #1
 8004a68:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6c:	ea42 0103 	orr.w	r1, r2, r3
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10a      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0x576>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	0e9b      	lsrs	r3, r3, #26
 8004a82:	3301      	adds	r3, #1
 8004a84:	f003 021f 	and.w	r2, r3, #31
 8004a88:	4613      	mov	r3, r2
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	4413      	add	r3, r2
 8004a8e:	051b      	lsls	r3, r3, #20
 8004a90:	e018      	b.n	8004ac4 <HAL_ADC_ConfigChannel+0x5a8>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9a:	fa93 f3a3 	rbit	r3, r3
 8004a9e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004aaa:	2320      	movs	r3, #32
 8004aac:	e003      	b.n	8004ab6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ab0:	fab3 f383 	clz	r3, r3
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	f003 021f 	and.w	r2, r3, #31
 8004abc:	4613      	mov	r3, r2
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	4413      	add	r3, r2
 8004ac2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	e07e      	b.n	8004bc6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d107      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x5c8>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	0e9b      	lsrs	r3, r3, #26
 8004ada:	3301      	adds	r3, #1
 8004adc:	069b      	lsls	r3, r3, #26
 8004ade:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ae2:	e015      	b.n	8004b10 <HAL_ADC_ConfigChannel+0x5f4>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aec:	fa93 f3a3 	rbit	r3, r3
 8004af0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004afc:	2320      	movs	r3, #32
 8004afe:	e003      	b.n	8004b08 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b02:	fab3 f383 	clz	r3, r3
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	3301      	adds	r3, #1
 8004b0a:	069b      	lsls	r3, r3, #26
 8004b0c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <HAL_ADC_ConfigChannel+0x614>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	0e9b      	lsrs	r3, r3, #26
 8004b22:	3301      	adds	r3, #1
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	2101      	movs	r1, #1
 8004b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2e:	e017      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x644>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	fa93 f3a3 	rbit	r3, r3
 8004b3c:	61fb      	str	r3, [r7, #28]
  return result;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004b48:	2320      	movs	r3, #32
 8004b4a:	e003      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4e:	fab3 f383 	clz	r3, r3
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	3301      	adds	r3, #1
 8004b56:	f003 031f 	and.w	r3, r3, #31
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b60:	ea42 0103 	orr.w	r1, r2, r3
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10d      	bne.n	8004b8c <HAL_ADC_ConfigChannel+0x670>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	0e9b      	lsrs	r3, r3, #26
 8004b76:	3301      	adds	r3, #1
 8004b78:	f003 021f 	and.w	r2, r3, #31
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	4413      	add	r3, r2
 8004b82:	3b1e      	subs	r3, #30
 8004b84:	051b      	lsls	r3, r3, #20
 8004b86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b8a:	e01b      	b.n	8004bc4 <HAL_ADC_ConfigChannel+0x6a8>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	fa93 f3a3 	rbit	r3, r3
 8004b98:	613b      	str	r3, [r7, #16]
  return result;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004ba4:	2320      	movs	r3, #32
 8004ba6:	e003      	b.n	8004bb0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	fab3 f383 	clz	r3, r3
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	f003 021f 	and.w	r2, r3, #31
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	4413      	add	r3, r2
 8004bbc:	3b1e      	subs	r3, #30
 8004bbe:	051b      	lsls	r3, r3, #20
 8004bc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bc4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bca:	4619      	mov	r1, r3
 8004bcc:	f7ff f8eb 	bl	8003da6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	4b09      	ldr	r3, [pc, #36]	@ (8004bfc <HAL_ADC_ConfigChannel+0x6e0>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 80be 	beq.w	8004d5a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004be6:	d004      	beq.n	8004bf2 <HAL_ADC_ConfigChannel+0x6d6>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a04      	ldr	r2, [pc, #16]	@ (8004c00 <HAL_ADC_ConfigChannel+0x6e4>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d10a      	bne.n	8004c08 <HAL_ADC_ConfigChannel+0x6ec>
 8004bf2:	4b04      	ldr	r3, [pc, #16]	@ (8004c04 <HAL_ADC_ConfigChannel+0x6e8>)
 8004bf4:	e009      	b.n	8004c0a <HAL_ADC_ConfigChannel+0x6ee>
 8004bf6:	bf00      	nop
 8004bf8:	407f0000 	.word	0x407f0000
 8004bfc:	80080000 	.word	0x80080000
 8004c00:	50000100 	.word	0x50000100
 8004c04:	50000300 	.word	0x50000300
 8004c08:	4b59      	ldr	r3, [pc, #356]	@ (8004d70 <HAL_ADC_ConfigChannel+0x854>)
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe ffe0 	bl	8003bd0 <LL_ADC_GetCommonPathInternalCh>
 8004c10:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a56      	ldr	r2, [pc, #344]	@ (8004d74 <HAL_ADC_ConfigChannel+0x858>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d004      	beq.n	8004c28 <HAL_ADC_ConfigChannel+0x70c>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a55      	ldr	r2, [pc, #340]	@ (8004d78 <HAL_ADC_ConfigChannel+0x85c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d13a      	bne.n	8004c9e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d134      	bne.n	8004c9e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c3c:	d005      	beq.n	8004c4a <HAL_ADC_ConfigChannel+0x72e>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a4e      	ldr	r2, [pc, #312]	@ (8004d7c <HAL_ADC_ConfigChannel+0x860>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	f040 8085 	bne.w	8004d54 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c52:	d004      	beq.n	8004c5e <HAL_ADC_ConfigChannel+0x742>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a49      	ldr	r2, [pc, #292]	@ (8004d80 <HAL_ADC_ConfigChannel+0x864>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d101      	bne.n	8004c62 <HAL_ADC_ConfigChannel+0x746>
 8004c5e:	4a49      	ldr	r2, [pc, #292]	@ (8004d84 <HAL_ADC_ConfigChannel+0x868>)
 8004c60:	e000      	b.n	8004c64 <HAL_ADC_ConfigChannel+0x748>
 8004c62:	4a43      	ldr	r2, [pc, #268]	@ (8004d70 <HAL_ADC_ConfigChannel+0x854>)
 8004c64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4610      	mov	r0, r2
 8004c70:	f7fe ff9b 	bl	8003baa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c74:	4b44      	ldr	r3, [pc, #272]	@ (8004d88 <HAL_ADC_ConfigChannel+0x86c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	099b      	lsrs	r3, r3, #6
 8004c7a:	4a44      	ldr	r2, [pc, #272]	@ (8004d8c <HAL_ADC_ConfigChannel+0x870>)
 8004c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c80:	099b      	lsrs	r3, r3, #6
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	4613      	mov	r3, r2
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c8e:	e002      	b.n	8004c96 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1f9      	bne.n	8004c90 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c9c:	e05a      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a3b      	ldr	r2, [pc, #236]	@ (8004d90 <HAL_ADC_ConfigChannel+0x874>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d125      	bne.n	8004cf4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ca8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d11f      	bne.n	8004cf4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a31      	ldr	r2, [pc, #196]	@ (8004d80 <HAL_ADC_ConfigChannel+0x864>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d104      	bne.n	8004cc8 <HAL_ADC_ConfigChannel+0x7ac>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a34      	ldr	r2, [pc, #208]	@ (8004d94 <HAL_ADC_ConfigChannel+0x878>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d047      	beq.n	8004d58 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cd0:	d004      	beq.n	8004cdc <HAL_ADC_ConfigChannel+0x7c0>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8004d80 <HAL_ADC_ConfigChannel+0x864>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d101      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x7c4>
 8004cdc:	4a29      	ldr	r2, [pc, #164]	@ (8004d84 <HAL_ADC_ConfigChannel+0x868>)
 8004cde:	e000      	b.n	8004ce2 <HAL_ADC_ConfigChannel+0x7c6>
 8004ce0:	4a23      	ldr	r2, [pc, #140]	@ (8004d70 <HAL_ADC_ConfigChannel+0x854>)
 8004ce2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cea:	4619      	mov	r1, r3
 8004cec:	4610      	mov	r0, r2
 8004cee:	f7fe ff5c 	bl	8003baa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004cf2:	e031      	b.n	8004d58 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a27      	ldr	r2, [pc, #156]	@ (8004d98 <HAL_ADC_ConfigChannel+0x87c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d12d      	bne.n	8004d5a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004cfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d127      	bne.n	8004d5a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8004d80 <HAL_ADC_ConfigChannel+0x864>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d022      	beq.n	8004d5a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d1c:	d004      	beq.n	8004d28 <HAL_ADC_ConfigChannel+0x80c>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a17      	ldr	r2, [pc, #92]	@ (8004d80 <HAL_ADC_ConfigChannel+0x864>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d101      	bne.n	8004d2c <HAL_ADC_ConfigChannel+0x810>
 8004d28:	4a16      	ldr	r2, [pc, #88]	@ (8004d84 <HAL_ADC_ConfigChannel+0x868>)
 8004d2a:	e000      	b.n	8004d2e <HAL_ADC_ConfigChannel+0x812>
 8004d2c:	4a10      	ldr	r2, [pc, #64]	@ (8004d70 <HAL_ADC_ConfigChannel+0x854>)
 8004d2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d36:	4619      	mov	r1, r3
 8004d38:	4610      	mov	r0, r2
 8004d3a:	f7fe ff36 	bl	8003baa <LL_ADC_SetCommonPathInternalCh>
 8004d3e:	e00c      	b.n	8004d5a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d44:	f043 0220 	orr.w	r2, r3, #32
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004d52:	e002      	b.n	8004d5a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d54:	bf00      	nop
 8004d56:	e000      	b.n	8004d5a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004d62:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	37d8      	adds	r7, #216	@ 0xd8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	50000700 	.word	0x50000700
 8004d74:	c3210000 	.word	0xc3210000
 8004d78:	90c00010 	.word	0x90c00010
 8004d7c:	50000600 	.word	0x50000600
 8004d80:	50000100 	.word	0x50000100
 8004d84:	50000300 	.word	0x50000300
 8004d88:	20000018 	.word	0x20000018
 8004d8c:	053e2d63 	.word	0x053e2d63
 8004d90:	c7520000 	.word	0xc7520000
 8004d94:	50000500 	.word	0x50000500
 8004d98:	cb840000 	.word	0xcb840000

08004d9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff f8b9 	bl	8003f24 <LL_ADC_IsEnabled>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d176      	bne.n	8004ea6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	4b3c      	ldr	r3, [pc, #240]	@ (8004eb0 <ADC_Enable+0x114>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00d      	beq.n	8004de2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dca:	f043 0210 	orr.w	r2, r3, #16
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dd6:	f043 0201 	orr.w	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e062      	b.n	8004ea8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff f888 	bl	8003efc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004df4:	d004      	beq.n	8004e00 <ADC_Enable+0x64>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a2e      	ldr	r2, [pc, #184]	@ (8004eb4 <ADC_Enable+0x118>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d101      	bne.n	8004e04 <ADC_Enable+0x68>
 8004e00:	4b2d      	ldr	r3, [pc, #180]	@ (8004eb8 <ADC_Enable+0x11c>)
 8004e02:	e000      	b.n	8004e06 <ADC_Enable+0x6a>
 8004e04:	4b2d      	ldr	r3, [pc, #180]	@ (8004ebc <ADC_Enable+0x120>)
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fe fee2 	bl	8003bd0 <LL_ADC_GetCommonPathInternalCh>
 8004e0c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004e0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d013      	beq.n	8004e3e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e16:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec0 <ADC_Enable+0x124>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	099b      	lsrs	r3, r3, #6
 8004e1c:	4a29      	ldr	r2, [pc, #164]	@ (8004ec4 <ADC_Enable+0x128>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	099b      	lsrs	r3, r3, #6
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	4613      	mov	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004e30:	e002      	b.n	8004e38 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f9      	bne.n	8004e32 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004e3e:	f7fe fe73 	bl	8003b28 <HAL_GetTick>
 8004e42:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e44:	e028      	b.n	8004e98 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff f86a 	bl	8003f24 <LL_ADC_IsEnabled>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d104      	bne.n	8004e60 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff f84e 	bl	8003efc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e60:	f7fe fe62 	bl	8003b28 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d914      	bls.n	8004e98 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d00d      	beq.n	8004e98 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e80:	f043 0210 	orr.w	r2, r3, #16
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e8c:	f043 0201 	orr.w	r2, r3, #1
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e007      	b.n	8004ea8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d1cf      	bne.n	8004e46 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	8000003f 	.word	0x8000003f
 8004eb4:	50000100 	.word	0x50000100
 8004eb8:	50000300 	.word	0x50000300
 8004ebc:	50000700 	.word	0x50000700
 8004ec0:	20000018 	.word	0x20000018
 8004ec4:	053e2d63 	.word	0x053e2d63

08004ec8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eda:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d14b      	bne.n	8004f7a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d021      	beq.n	8004f40 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fe ff11 	bl	8003d28 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d032      	beq.n	8004f72 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d12b      	bne.n	8004f72 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d11f      	bne.n	8004f72 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f36:	f043 0201 	orr.w	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004f3e:	e018      	b.n	8004f72 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d111      	bne.n	8004f72 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f52:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d105      	bne.n	8004f72 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f6a:	f043 0201 	orr.w	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f7ff fab4 	bl	80044e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f78:	e00e      	b.n	8004f98 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f7ff fabe 	bl	8004508 <HAL_ADC_ErrorCallback>
}
 8004f8c:	e004      	b.n	8004f98 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
}
 8004f98:	bf00      	nop
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f7ff faa0 	bl	80044f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fb4:	bf00      	nop
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fda:	f043 0204 	orr.w	r2, r3, #4
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f7ff fa90 	bl	8004508 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fe8:	bf00      	nop
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <LL_ADC_IsEnabled>:
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <LL_ADC_IsEnabled+0x18>
 8005004:	2301      	movs	r3, #1
 8005006:	e000      	b.n	800500a <LL_ADC_IsEnabled+0x1a>
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <LL_ADC_REG_IsConversionOngoing>:
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	2b04      	cmp	r3, #4
 8005028:	d101      	bne.n	800502e <LL_ADC_REG_IsConversionOngoing+0x18>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800503c:	b590      	push	{r4, r7, lr}
 800503e:	b0a1      	sub	sp, #132	@ 0x84
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005056:	2302      	movs	r3, #2
 8005058:	e0e7      	b.n	800522a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005062:	2300      	movs	r3, #0
 8005064:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005066:	2300      	movs	r3, #0
 8005068:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005072:	d102      	bne.n	800507a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005074:	4b6f      	ldr	r3, [pc, #444]	@ (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	e009      	b.n	800508e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a6e      	ldr	r2, [pc, #440]	@ (8005238 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d102      	bne.n	800508a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005084:	4b6d      	ldr	r3, [pc, #436]	@ (800523c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005086:	60bb      	str	r3, [r7, #8]
 8005088:	e001      	b.n	800508e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800508a:	2300      	movs	r3, #0
 800508c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10b      	bne.n	80050ac <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005098:	f043 0220 	orr.w	r2, r3, #32
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e0be      	b.n	800522a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff ffb1 	bl	8005016 <LL_ADC_REG_IsConversionOngoing>
 80050b4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff ffab 	bl	8005016 <LL_ADC_REG_IsConversionOngoing>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f040 80a0 	bne.w	8005208 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80050c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f040 809c 	bne.w	8005208 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050d8:	d004      	beq.n	80050e4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a55      	ldr	r2, [pc, #340]	@ (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d101      	bne.n	80050e8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80050e4:	4b56      	ldr	r3, [pc, #344]	@ (8005240 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80050e6:	e000      	b.n	80050ea <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80050e8:	4b56      	ldr	r3, [pc, #344]	@ (8005244 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80050ea:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d04b      	beq.n	800518c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80050f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	6859      	ldr	r1, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005106:	035b      	lsls	r3, r3, #13
 8005108:	430b      	orrs	r3, r1
 800510a:	431a      	orrs	r2, r3
 800510c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800510e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005118:	d004      	beq.n	8005124 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a45      	ldr	r2, [pc, #276]	@ (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d10f      	bne.n	8005144 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005124:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005128:	f7ff ff62 	bl	8004ff0 <LL_ADC_IsEnabled>
 800512c:	4604      	mov	r4, r0
 800512e:	4841      	ldr	r0, [pc, #260]	@ (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005130:	f7ff ff5e 	bl	8004ff0 <LL_ADC_IsEnabled>
 8005134:	4603      	mov	r3, r0
 8005136:	4323      	orrs	r3, r4
 8005138:	2b00      	cmp	r3, #0
 800513a:	bf0c      	ite	eq
 800513c:	2301      	moveq	r3, #1
 800513e:	2300      	movne	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	e012      	b.n	800516a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005144:	483c      	ldr	r0, [pc, #240]	@ (8005238 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005146:	f7ff ff53 	bl	8004ff0 <LL_ADC_IsEnabled>
 800514a:	4604      	mov	r4, r0
 800514c:	483b      	ldr	r0, [pc, #236]	@ (800523c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800514e:	f7ff ff4f 	bl	8004ff0 <LL_ADC_IsEnabled>
 8005152:	4603      	mov	r3, r0
 8005154:	431c      	orrs	r4, r3
 8005156:	483c      	ldr	r0, [pc, #240]	@ (8005248 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005158:	f7ff ff4a 	bl	8004ff0 <LL_ADC_IsEnabled>
 800515c:	4603      	mov	r3, r0
 800515e:	4323      	orrs	r3, r4
 8005160:	2b00      	cmp	r3, #0
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d056      	beq.n	800521c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800516e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005176:	f023 030f 	bic.w	r3, r3, #15
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	6811      	ldr	r1, [r2, #0]
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	6892      	ldr	r2, [r2, #8]
 8005182:	430a      	orrs	r2, r1
 8005184:	431a      	orrs	r2, r3
 8005186:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005188:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800518a:	e047      	b.n	800521c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800518c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005194:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005196:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051a0:	d004      	beq.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a23      	ldr	r2, [pc, #140]	@ (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d10f      	bne.n	80051cc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80051ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80051b0:	f7ff ff1e 	bl	8004ff0 <LL_ADC_IsEnabled>
 80051b4:	4604      	mov	r4, r0
 80051b6:	481f      	ldr	r0, [pc, #124]	@ (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80051b8:	f7ff ff1a 	bl	8004ff0 <LL_ADC_IsEnabled>
 80051bc:	4603      	mov	r3, r0
 80051be:	4323      	orrs	r3, r4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	bf0c      	ite	eq
 80051c4:	2301      	moveq	r3, #1
 80051c6:	2300      	movne	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	e012      	b.n	80051f2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80051cc:	481a      	ldr	r0, [pc, #104]	@ (8005238 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80051ce:	f7ff ff0f 	bl	8004ff0 <LL_ADC_IsEnabled>
 80051d2:	4604      	mov	r4, r0
 80051d4:	4819      	ldr	r0, [pc, #100]	@ (800523c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80051d6:	f7ff ff0b 	bl	8004ff0 <LL_ADC_IsEnabled>
 80051da:	4603      	mov	r3, r0
 80051dc:	431c      	orrs	r4, r3
 80051de:	481a      	ldr	r0, [pc, #104]	@ (8005248 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80051e0:	f7ff ff06 	bl	8004ff0 <LL_ADC_IsEnabled>
 80051e4:	4603      	mov	r3, r0
 80051e6:	4323      	orrs	r3, r4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bf0c      	ite	eq
 80051ec:	2301      	moveq	r3, #1
 80051ee:	2300      	movne	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d012      	beq.n	800521c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80051f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80051fe:	f023 030f 	bic.w	r3, r3, #15
 8005202:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005204:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005206:	e009      	b.n	800521c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800520c:	f043 0220 	orr.w	r2, r3, #32
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800521a:	e000      	b.n	800521e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800521c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005226:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800522a:	4618      	mov	r0, r3
 800522c:	3784      	adds	r7, #132	@ 0x84
 800522e:	46bd      	mov	sp, r7
 8005230:	bd90      	pop	{r4, r7, pc}
 8005232:	bf00      	nop
 8005234:	50000100 	.word	0x50000100
 8005238:	50000400 	.word	0x50000400
 800523c:	50000500 	.word	0x50000500
 8005240:	50000300 	.word	0x50000300
 8005244:	50000700 	.word	0x50000700
 8005248:	50000600 	.word	0x50000600

0800524c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800525c:	4b0c      	ldr	r3, [pc, #48]	@ (8005290 <__NVIC_SetPriorityGrouping+0x44>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005268:	4013      	ands	r3, r2
 800526a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800527c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800527e:	4a04      	ldr	r2, [pc, #16]	@ (8005290 <__NVIC_SetPriorityGrouping+0x44>)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	60d3      	str	r3, [r2, #12]
}
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	e000ed00 	.word	0xe000ed00

08005294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005298:	4b04      	ldr	r3, [pc, #16]	@ (80052ac <__NVIC_GetPriorityGrouping+0x18>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	0a1b      	lsrs	r3, r3, #8
 800529e:	f003 0307 	and.w	r3, r3, #7
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	e000ed00 	.word	0xe000ed00

080052b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	db0b      	blt.n	80052da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	f003 021f 	and.w	r2, r3, #31
 80052c8:	4907      	ldr	r1, [pc, #28]	@ (80052e8 <__NVIC_EnableIRQ+0x38>)
 80052ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	2001      	movs	r0, #1
 80052d2:	fa00 f202 	lsl.w	r2, r0, r2
 80052d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	e000e100 	.word	0xe000e100

080052ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	4603      	mov	r3, r0
 80052f4:	6039      	str	r1, [r7, #0]
 80052f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	db0a      	blt.n	8005316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	b2da      	uxtb	r2, r3
 8005304:	490c      	ldr	r1, [pc, #48]	@ (8005338 <__NVIC_SetPriority+0x4c>)
 8005306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800530a:	0112      	lsls	r2, r2, #4
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	440b      	add	r3, r1
 8005310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005314:	e00a      	b.n	800532c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	b2da      	uxtb	r2, r3
 800531a:	4908      	ldr	r1, [pc, #32]	@ (800533c <__NVIC_SetPriority+0x50>)
 800531c:	79fb      	ldrb	r3, [r7, #7]
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	3b04      	subs	r3, #4
 8005324:	0112      	lsls	r2, r2, #4
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	440b      	add	r3, r1
 800532a:	761a      	strb	r2, [r3, #24]
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	e000e100 	.word	0xe000e100
 800533c:	e000ed00 	.word	0xe000ed00

08005340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005340:	b480      	push	{r7}
 8005342:	b089      	sub	sp, #36	@ 0x24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	f1c3 0307 	rsb	r3, r3, #7
 800535a:	2b04      	cmp	r3, #4
 800535c:	bf28      	it	cs
 800535e:	2304      	movcs	r3, #4
 8005360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	3304      	adds	r3, #4
 8005366:	2b06      	cmp	r3, #6
 8005368:	d902      	bls.n	8005370 <NVIC_EncodePriority+0x30>
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	3b03      	subs	r3, #3
 800536e:	e000      	b.n	8005372 <NVIC_EncodePriority+0x32>
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005374:	f04f 32ff 	mov.w	r2, #4294967295
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	43da      	mvns	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	401a      	ands	r2, r3
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005388:	f04f 31ff 	mov.w	r1, #4294967295
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	fa01 f303 	lsl.w	r3, r1, r3
 8005392:	43d9      	mvns	r1, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005398:	4313      	orrs	r3, r2
         );
}
 800539a:	4618      	mov	r0, r3
 800539c:	3724      	adds	r7, #36	@ 0x24
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053b8:	d301      	bcc.n	80053be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053ba:	2301      	movs	r3, #1
 80053bc:	e00f      	b.n	80053de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053be:	4a0a      	ldr	r2, [pc, #40]	@ (80053e8 <SysTick_Config+0x40>)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053c6:	210f      	movs	r1, #15
 80053c8:	f04f 30ff 	mov.w	r0, #4294967295
 80053cc:	f7ff ff8e 	bl	80052ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053d0:	4b05      	ldr	r3, [pc, #20]	@ (80053e8 <SysTick_Config+0x40>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053d6:	4b04      	ldr	r3, [pc, #16]	@ (80053e8 <SysTick_Config+0x40>)
 80053d8:	2207      	movs	r2, #7
 80053da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	e000e010 	.word	0xe000e010

080053ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff ff29 	bl	800524c <__NVIC_SetPriorityGrouping>
}
 80053fa:	bf00      	nop
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b086      	sub	sp, #24
 8005406:	af00      	add	r7, sp, #0
 8005408:	4603      	mov	r3, r0
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	607a      	str	r2, [r7, #4]
 800540e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005410:	f7ff ff40 	bl	8005294 <__NVIC_GetPriorityGrouping>
 8005414:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	6978      	ldr	r0, [r7, #20]
 800541c:	f7ff ff90 	bl	8005340 <NVIC_EncodePriority>
 8005420:	4602      	mov	r2, r0
 8005422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005426:	4611      	mov	r1, r2
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff ff5f 	bl	80052ec <__NVIC_SetPriority>
}
 800542e:	bf00      	nop
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b082      	sub	sp, #8
 800543a:	af00      	add	r7, sp, #0
 800543c:	4603      	mov	r3, r0
 800543e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff ff33 	bl	80052b0 <__NVIC_EnableIRQ>
}
 800544a:	bf00      	nop
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b082      	sub	sp, #8
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7ff ffa4 	bl	80053a8 <SysTick_Config>
 8005460:	4603      	mov	r3, r0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e08d      	b.n	800559a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	4b47      	ldr	r3, [pc, #284]	@ (80055a4 <HAL_DMA_Init+0x138>)
 8005486:	429a      	cmp	r2, r3
 8005488:	d80f      	bhi.n	80054aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	4b45      	ldr	r3, [pc, #276]	@ (80055a8 <HAL_DMA_Init+0x13c>)
 8005492:	4413      	add	r3, r2
 8005494:	4a45      	ldr	r2, [pc, #276]	@ (80055ac <HAL_DMA_Init+0x140>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	091b      	lsrs	r3, r3, #4
 800549c:	009a      	lsls	r2, r3, #2
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a42      	ldr	r2, [pc, #264]	@ (80055b0 <HAL_DMA_Init+0x144>)
 80054a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80054a8:	e00e      	b.n	80054c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	4b40      	ldr	r3, [pc, #256]	@ (80055b4 <HAL_DMA_Init+0x148>)
 80054b2:	4413      	add	r3, r2
 80054b4:	4a3d      	ldr	r2, [pc, #244]	@ (80055ac <HAL_DMA_Init+0x140>)
 80054b6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ba:	091b      	lsrs	r3, r3, #4
 80054bc:	009a      	lsls	r2, r3, #2
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a3c      	ldr	r2, [pc, #240]	@ (80055b8 <HAL_DMA_Init+0x14c>)
 80054c6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80054de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80054ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005504:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fa76 	bl	8005a0c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005528:	d102      	bne.n	8005530 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005538:	b2d2      	uxtb	r2, r2
 800553a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005544:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d010      	beq.n	8005570 <HAL_DMA_Init+0x104>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b04      	cmp	r3, #4
 8005554:	d80c      	bhi.n	8005570 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fa96 	bl	8005a88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800556c:	605a      	str	r2, [r3, #4]
 800556e:	e008      	b.n	8005582 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	40020407 	.word	0x40020407
 80055a8:	bffdfff8 	.word	0xbffdfff8
 80055ac:	cccccccd 	.word	0xcccccccd
 80055b0:	40020000 	.word	0x40020000
 80055b4:	bffdfbf8 	.word	0xbffdfbf8
 80055b8:	40020400 	.word	0x40020400

080055bc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d101      	bne.n	80055dc <HAL_DMA_Start_IT+0x20>
 80055d8:	2302      	movs	r3, #2
 80055da:	e066      	b.n	80056aa <HAL_DMA_Start_IT+0xee>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d155      	bne.n	800569c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0201 	bic.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 f9bb 	bl	8005990 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561e:	2b00      	cmp	r3, #0
 8005620:	d008      	beq.n	8005634 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 020e 	orr.w	r2, r2, #14
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	e00f      	b.n	8005654 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0204 	bic.w	r2, r2, #4
 8005642:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 020a 	orr.w	r2, r2, #10
 8005652:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800566c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005670:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005676:	2b00      	cmp	r3, #0
 8005678:	d007      	beq.n	800568a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005684:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005688:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0201 	orr.w	r2, r2, #1
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	e005      	b.n	80056a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80056a4:	2302      	movs	r3, #2
 80056a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b085      	sub	sp, #20
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d005      	beq.n	80056d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2204      	movs	r2, #4
 80056ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	73fb      	strb	r3, [r7, #15]
 80056d4:	e037      	b.n	8005746 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 020e 	bic.w	r2, r2, #14
 80056e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0201 	bic.w	r2, r2, #1
 8005704:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570a:	f003 021f 	and.w	r2, r3, #31
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005712:	2101      	movs	r1, #1
 8005714:	fa01 f202 	lsl.w	r2, r1, r2
 8005718:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005722:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00c      	beq.n	8005746 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005736:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800573a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005744:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005756:	7bfb      	ldrb	r3, [r7, #15]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d00d      	beq.n	8005798 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2204      	movs	r2, #4
 8005780:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	73fb      	strb	r3, [r7, #15]
 8005796:	e047      	b.n	8005828 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 020e 	bic.w	r2, r2, #14
 80057a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0201 	bic.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057cc:	f003 021f 	and.w	r2, r3, #31
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d4:	2101      	movs	r1, #1
 80057d6:	fa01 f202 	lsl.w	r2, r1, r2
 80057da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80057e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00c      	beq.n	8005808 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005806:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	4798      	blx	r3
    }
  }
  return status;
 8005828:	7bfb      	ldrb	r3, [r7, #15]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	2204      	movs	r2, #4
 8005854:	409a      	lsls	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4013      	ands	r3, r2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d026      	beq.n	80058ac <HAL_DMA_IRQHandler+0x7a>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b00      	cmp	r3, #0
 8005866:	d021      	beq.n	80058ac <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0320 	and.w	r3, r3, #32
 8005872:	2b00      	cmp	r3, #0
 8005874:	d107      	bne.n	8005886 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0204 	bic.w	r2, r2, #4
 8005884:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800588a:	f003 021f 	and.w	r2, r3, #31
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005892:	2104      	movs	r1, #4
 8005894:	fa01 f202 	lsl.w	r2, r1, r2
 8005898:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d071      	beq.n	8005986 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80058aa:	e06c      	b.n	8005986 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b0:	f003 031f 	and.w	r3, r3, #31
 80058b4:	2202      	movs	r2, #2
 80058b6:	409a      	lsls	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4013      	ands	r3, r2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d02e      	beq.n	800591e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d029      	beq.n	800591e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0320 	and.w	r3, r3, #32
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10b      	bne.n	80058f0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 020a 	bic.w	r2, r2, #10
 80058e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f4:	f003 021f 	and.w	r2, r3, #31
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fc:	2102      	movs	r1, #2
 80058fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005902:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005910:	2b00      	cmp	r3, #0
 8005912:	d038      	beq.n	8005986 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800591c:	e033      	b.n	8005986 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005922:	f003 031f 	and.w	r3, r3, #31
 8005926:	2208      	movs	r2, #8
 8005928:	409a      	lsls	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4013      	ands	r3, r2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d02a      	beq.n	8005988 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f003 0308 	and.w	r3, r3, #8
 8005938:	2b00      	cmp	r3, #0
 800593a:	d025      	beq.n	8005988 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 020e 	bic.w	r2, r2, #14
 800594a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005950:	f003 021f 	and.w	r2, r3, #31
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005958:	2101      	movs	r1, #1
 800595a:	fa01 f202 	lsl.w	r2, r1, r2
 800595e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800597a:	2b00      	cmp	r3, #0
 800597c:	d004      	beq.n	8005988 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005986:	bf00      	nop
 8005988:	bf00      	nop
}
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80059a6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d004      	beq.n	80059ba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80059b8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059be:	f003 021f 	and.w	r2, r3, #31
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c6:	2101      	movs	r1, #1
 80059c8:	fa01 f202 	lsl.w	r2, r1, r2
 80059cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	2b10      	cmp	r3, #16
 80059dc:	d108      	bne.n	80059f0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80059ee:	e007      	b.n	8005a00 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	60da      	str	r2, [r3, #12]
}
 8005a00:	bf00      	nop
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	4b16      	ldr	r3, [pc, #88]	@ (8005a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d802      	bhi.n	8005a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005a20:	4b15      	ldr	r3, [pc, #84]	@ (8005a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	e001      	b.n	8005a2a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005a26:	4b15      	ldr	r3, [pc, #84]	@ (8005a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005a28:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	3b08      	subs	r3, #8
 8005a36:	4a12      	ldr	r2, [pc, #72]	@ (8005a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005a38:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3c:	091b      	lsrs	r3, r3, #4
 8005a3e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a44:	089b      	lsrs	r3, r3, #2
 8005a46:	009a      	lsls	r2, r3, #2
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a0b      	ldr	r2, [pc, #44]	@ (8005a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005a56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f003 031f 	and.w	r3, r3, #31
 8005a5e:	2201      	movs	r2, #1
 8005a60:	409a      	lsls	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40020407 	.word	0x40020407
 8005a78:	40020800 	.word	0x40020800
 8005a7c:	40020820 	.word	0x40020820
 8005a80:	cccccccd 	.word	0xcccccccd
 8005a84:	40020880 	.word	0x40020880

08005a88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005a9c:	4413      	add	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a08      	ldr	r2, [pc, #32]	@ (8005acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005aaa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	f003 031f 	and.w	r3, r3, #31
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	409a      	lsls	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005abc:	bf00      	nop
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	1000823f 	.word	0x1000823f
 8005acc:	40020940 	.word	0x40020940

08005ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ade:	e15a      	b.n	8005d96 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8005aec:	4013      	ands	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 814c 	beq.w	8005d90 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f003 0303 	and.w	r3, r3, #3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d005      	beq.n	8005b10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d130      	bne.n	8005b72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	2203      	movs	r2, #3
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	43db      	mvns	r3, r3
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4013      	ands	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	fa02 f303 	lsl.w	r3, r2, r3
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b46:	2201      	movs	r2, #1
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	43db      	mvns	r3, r3
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	4013      	ands	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	091b      	lsrs	r3, r3, #4
 8005b5c:	f003 0201 	and.w	r2, r3, #1
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	fa02 f303 	lsl.w	r3, r2, r3
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f003 0303 	and.w	r3, r3, #3
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d017      	beq.n	8005bae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	2203      	movs	r2, #3
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	43db      	mvns	r3, r3
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4013      	ands	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d123      	bne.n	8005c02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	08da      	lsrs	r2, r3, #3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3208      	adds	r2, #8
 8005bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f003 0307 	and.w	r3, r3, #7
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	220f      	movs	r2, #15
 8005bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd6:	43db      	mvns	r3, r3
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	fa02 f303 	lsl.w	r3, r2, r3
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	08da      	lsrs	r2, r3, #3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3208      	adds	r2, #8
 8005bfc:	6939      	ldr	r1, [r7, #16]
 8005bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	2203      	movs	r2, #3
 8005c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c12:	43db      	mvns	r3, r3
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	4013      	ands	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f003 0203 	and.w	r2, r3, #3
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 80a6 	beq.w	8005d90 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c44:	4b5b      	ldr	r3, [pc, #364]	@ (8005db4 <HAL_GPIO_Init+0x2e4>)
 8005c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c48:	4a5a      	ldr	r2, [pc, #360]	@ (8005db4 <HAL_GPIO_Init+0x2e4>)
 8005c4a:	f043 0301 	orr.w	r3, r3, #1
 8005c4e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005c50:	4b58      	ldr	r3, [pc, #352]	@ (8005db4 <HAL_GPIO_Init+0x2e4>)
 8005c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	60bb      	str	r3, [r7, #8]
 8005c5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c5c:	4a56      	ldr	r2, [pc, #344]	@ (8005db8 <HAL_GPIO_Init+0x2e8>)
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	089b      	lsrs	r3, r3, #2
 8005c62:	3302      	adds	r3, #2
 8005c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f003 0303 	and.w	r3, r3, #3
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	220f      	movs	r2, #15
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005c86:	d01f      	beq.n	8005cc8 <HAL_GPIO_Init+0x1f8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a4c      	ldr	r2, [pc, #304]	@ (8005dbc <HAL_GPIO_Init+0x2ec>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d019      	beq.n	8005cc4 <HAL_GPIO_Init+0x1f4>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a4b      	ldr	r2, [pc, #300]	@ (8005dc0 <HAL_GPIO_Init+0x2f0>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d013      	beq.n	8005cc0 <HAL_GPIO_Init+0x1f0>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a4a      	ldr	r2, [pc, #296]	@ (8005dc4 <HAL_GPIO_Init+0x2f4>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00d      	beq.n	8005cbc <HAL_GPIO_Init+0x1ec>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a49      	ldr	r2, [pc, #292]	@ (8005dc8 <HAL_GPIO_Init+0x2f8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d007      	beq.n	8005cb8 <HAL_GPIO_Init+0x1e8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a48      	ldr	r2, [pc, #288]	@ (8005dcc <HAL_GPIO_Init+0x2fc>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d101      	bne.n	8005cb4 <HAL_GPIO_Init+0x1e4>
 8005cb0:	2305      	movs	r3, #5
 8005cb2:	e00a      	b.n	8005cca <HAL_GPIO_Init+0x1fa>
 8005cb4:	2306      	movs	r3, #6
 8005cb6:	e008      	b.n	8005cca <HAL_GPIO_Init+0x1fa>
 8005cb8:	2304      	movs	r3, #4
 8005cba:	e006      	b.n	8005cca <HAL_GPIO_Init+0x1fa>
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e004      	b.n	8005cca <HAL_GPIO_Init+0x1fa>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e002      	b.n	8005cca <HAL_GPIO_Init+0x1fa>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e000      	b.n	8005cca <HAL_GPIO_Init+0x1fa>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	f002 0203 	and.w	r2, r2, #3
 8005cd0:	0092      	lsls	r2, r2, #2
 8005cd2:	4093      	lsls	r3, r2
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cda:	4937      	ldr	r1, [pc, #220]	@ (8005db8 <HAL_GPIO_Init+0x2e8>)
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	089b      	lsrs	r3, r3, #2
 8005ce0:	3302      	adds	r3, #2
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ce8:	4b39      	ldr	r3, [pc, #228]	@ (8005dd0 <HAL_GPIO_Init+0x300>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005d0c:	4a30      	ldr	r2, [pc, #192]	@ (8005dd0 <HAL_GPIO_Init+0x300>)
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005d12:	4b2f      	ldr	r3, [pc, #188]	@ (8005dd0 <HAL_GPIO_Init+0x300>)
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	43db      	mvns	r3, r3
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005d36:	4a26      	ldr	r2, [pc, #152]	@ (8005dd0 <HAL_GPIO_Init+0x300>)
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005d3c:	4b24      	ldr	r3, [pc, #144]	@ (8005dd0 <HAL_GPIO_Init+0x300>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	43db      	mvns	r3, r3
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005d60:	4a1b      	ldr	r2, [pc, #108]	@ (8005dd0 <HAL_GPIO_Init+0x300>)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005d66:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd0 <HAL_GPIO_Init+0x300>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4013      	ands	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d8a:	4a11      	ldr	r2, [pc, #68]	@ (8005dd0 <HAL_GPIO_Init+0x300>)
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	3301      	adds	r3, #1
 8005d94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f47f ae9d 	bne.w	8005ae0 <HAL_GPIO_Init+0x10>
  }
}
 8005da6:	bf00      	nop
 8005da8:	bf00      	nop
 8005daa:	371c      	adds	r7, #28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	40021000 	.word	0x40021000
 8005db8:	40010000 	.word	0x40010000
 8005dbc:	48000400 	.word	0x48000400
 8005dc0:	48000800 	.word	0x48000800
 8005dc4:	48000c00 	.word	0x48000c00
 8005dc8:	48001000 	.word	0x48001000
 8005dcc:	48001400 	.word	0x48001400
 8005dd0:	40010400 	.word	0x40010400

08005dd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	887b      	ldrh	r3, [r7, #2]
 8005de6:	4013      	ands	r3, r2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005dec:	2301      	movs	r3, #1
 8005dee:	73fb      	strb	r3, [r7, #15]
 8005df0:	e001      	b.n	8005df6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005df2:	2300      	movs	r3, #0
 8005df4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	807b      	strh	r3, [r7, #2]
 8005e10:	4613      	mov	r3, r2
 8005e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e14:	787b      	ldrb	r3, [r7, #1]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e1a:	887a      	ldrh	r2, [r7, #2]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e20:	e002      	b.n	8005e28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e22:	887a      	ldrh	r2, [r7, #2]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005e3e:	4b08      	ldr	r3, [pc, #32]	@ (8005e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e40:	695a      	ldr	r2, [r3, #20]
 8005e42:	88fb      	ldrh	r3, [r7, #6]
 8005e44:	4013      	ands	r3, r2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d006      	beq.n	8005e58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e4a:	4a05      	ldr	r2, [pc, #20]	@ (8005e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e4c:	88fb      	ldrh	r3, [r7, #6]
 8005e4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e50:	88fb      	ldrh	r3, [r7, #6]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fc fa7a 	bl	800234c <HAL_GPIO_EXTI_Callback>
  }
}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	40010400 	.word	0x40010400

08005e64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d141      	bne.n	8005ef6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e72:	4b4b      	ldr	r3, [pc, #300]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e7e:	d131      	bne.n	8005ee4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e80:	4b47      	ldr	r3, [pc, #284]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e86:	4a46      	ldr	r2, [pc, #280]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e90:	4b43      	ldr	r3, [pc, #268]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e98:	4a41      	ldr	r2, [pc, #260]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ea0:	4b40      	ldr	r3, [pc, #256]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2232      	movs	r2, #50	@ 0x32
 8005ea6:	fb02 f303 	mul.w	r3, r2, r3
 8005eaa:	4a3f      	ldr	r2, [pc, #252]	@ (8005fa8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005eac:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb0:	0c9b      	lsrs	r3, r3, #18
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005eb6:	e002      	b.n	8005ebe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ebe:	4b38      	ldr	r3, [pc, #224]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eca:	d102      	bne.n	8005ed2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f2      	bne.n	8005eb8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ed2:	4b33      	ldr	r3, [pc, #204]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ede:	d158      	bne.n	8005f92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e057      	b.n	8005f94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eea:	4a2d      	ldr	r2, [pc, #180]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ef0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005ef4:	e04d      	b.n	8005f92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005efc:	d141      	bne.n	8005f82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005efe:	4b28      	ldr	r3, [pc, #160]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f0a:	d131      	bne.n	8005f70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f0c:	4b24      	ldr	r3, [pc, #144]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f12:	4a23      	ldr	r2, [pc, #140]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f1c:	4b20      	ldr	r3, [pc, #128]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f24:	4a1e      	ldr	r2, [pc, #120]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2232      	movs	r2, #50	@ 0x32
 8005f32:	fb02 f303 	mul.w	r3, r2, r3
 8005f36:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f38:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3c:	0c9b      	lsrs	r3, r3, #18
 8005f3e:	3301      	adds	r3, #1
 8005f40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f42:	e002      	b.n	8005f4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f4a:	4b15      	ldr	r3, [pc, #84]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f56:	d102      	bne.n	8005f5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1f2      	bne.n	8005f44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f5e:	4b10      	ldr	r3, [pc, #64]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f6a:	d112      	bne.n	8005f92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e011      	b.n	8005f94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f70:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f76:	4a0a      	ldr	r2, [pc, #40]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005f80:	e007      	b.n	8005f92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f82:	4b07      	ldr	r3, [pc, #28]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f8a:	4a05      	ldr	r2, [pc, #20]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f90:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	40007000 	.word	0x40007000
 8005fa4:	20000018 	.word	0x20000018
 8005fa8:	431bde83 	.word	0x431bde83

08005fac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005fb0:	4b05      	ldr	r3, [pc, #20]	@ (8005fc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	4a04      	ldr	r2, [pc, #16]	@ (8005fc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005fb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005fba:	6093      	str	r3, [r2, #8]
}
 8005fbc:	bf00      	nop
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	40007000 	.word	0x40007000

08005fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e2fe      	b.n	80065dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d075      	beq.n	80060d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fea:	4b97      	ldr	r3, [pc, #604]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 030c 	and.w	r3, r3, #12
 8005ff2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ff4:	4b94      	ldr	r3, [pc, #592]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f003 0303 	and.w	r3, r3, #3
 8005ffc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	2b0c      	cmp	r3, #12
 8006002:	d102      	bne.n	800600a <HAL_RCC_OscConfig+0x3e>
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2b03      	cmp	r3, #3
 8006008:	d002      	beq.n	8006010 <HAL_RCC_OscConfig+0x44>
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	2b08      	cmp	r3, #8
 800600e:	d10b      	bne.n	8006028 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006010:	4b8d      	ldr	r3, [pc, #564]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d05b      	beq.n	80060d4 <HAL_RCC_OscConfig+0x108>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d157      	bne.n	80060d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e2d9      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006030:	d106      	bne.n	8006040 <HAL_RCC_OscConfig+0x74>
 8006032:	4b85      	ldr	r3, [pc, #532]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a84      	ldr	r2, [pc, #528]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	e01d      	b.n	800607c <HAL_RCC_OscConfig+0xb0>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006048:	d10c      	bne.n	8006064 <HAL_RCC_OscConfig+0x98>
 800604a:	4b7f      	ldr	r3, [pc, #508]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a7e      	ldr	r2, [pc, #504]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006050:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	4b7c      	ldr	r3, [pc, #496]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a7b      	ldr	r2, [pc, #492]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 800605c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	e00b      	b.n	800607c <HAL_RCC_OscConfig+0xb0>
 8006064:	4b78      	ldr	r3, [pc, #480]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a77      	ldr	r2, [pc, #476]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 800606a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	4b75      	ldr	r3, [pc, #468]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a74      	ldr	r2, [pc, #464]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006076:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800607a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d013      	beq.n	80060ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006084:	f7fd fd50 	bl	8003b28 <HAL_GetTick>
 8006088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800608a:	e008      	b.n	800609e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800608c:	f7fd fd4c 	bl	8003b28 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b64      	cmp	r3, #100	@ 0x64
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e29e      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800609e:	4b6a      	ldr	r3, [pc, #424]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0f0      	beq.n	800608c <HAL_RCC_OscConfig+0xc0>
 80060aa:	e014      	b.n	80060d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ac:	f7fd fd3c 	bl	8003b28 <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060b4:	f7fd fd38 	bl	8003b28 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b64      	cmp	r3, #100	@ 0x64
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e28a      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060c6:	4b60      	ldr	r3, [pc, #384]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1f0      	bne.n	80060b4 <HAL_RCC_OscConfig+0xe8>
 80060d2:	e000      	b.n	80060d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d075      	beq.n	80061ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060e2:	4b59      	ldr	r3, [pc, #356]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 030c 	and.w	r3, r3, #12
 80060ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060ec:	4b56      	ldr	r3, [pc, #344]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f003 0303 	and.w	r3, r3, #3
 80060f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b0c      	cmp	r3, #12
 80060fa:	d102      	bne.n	8006102 <HAL_RCC_OscConfig+0x136>
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d002      	beq.n	8006108 <HAL_RCC_OscConfig+0x13c>
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	2b04      	cmp	r3, #4
 8006106:	d11f      	bne.n	8006148 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006108:	4b4f      	ldr	r3, [pc, #316]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006110:	2b00      	cmp	r3, #0
 8006112:	d005      	beq.n	8006120 <HAL_RCC_OscConfig+0x154>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e25d      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006120:	4b49      	ldr	r3, [pc, #292]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	061b      	lsls	r3, r3, #24
 800612e:	4946      	ldr	r1, [pc, #280]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006130:	4313      	orrs	r3, r2
 8006132:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006134:	4b45      	ldr	r3, [pc, #276]	@ (800624c <HAL_RCC_OscConfig+0x280>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4618      	mov	r0, r3
 800613a:	f7fd fca9 	bl	8003a90 <HAL_InitTick>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d043      	beq.n	80061cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e249      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d023      	beq.n	8006198 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006150:	4b3d      	ldr	r3, [pc, #244]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a3c      	ldr	r2, [pc, #240]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800615a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615c:	f7fd fce4 	bl	8003b28 <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006162:	e008      	b.n	8006176 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006164:	f7fd fce0 	bl	8003b28 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e232      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006176:	4b34      	ldr	r3, [pc, #208]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800617e:	2b00      	cmp	r3, #0
 8006180:	d0f0      	beq.n	8006164 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006182:	4b31      	ldr	r3, [pc, #196]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	061b      	lsls	r3, r3, #24
 8006190:	492d      	ldr	r1, [pc, #180]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006192:	4313      	orrs	r3, r2
 8006194:	604b      	str	r3, [r1, #4]
 8006196:	e01a      	b.n	80061ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006198:	4b2b      	ldr	r3, [pc, #172]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a2a      	ldr	r2, [pc, #168]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 800619e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a4:	f7fd fcc0 	bl	8003b28 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061ac:	f7fd fcbc 	bl	8003b28 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e20e      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061be:	4b22      	ldr	r3, [pc, #136]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f0      	bne.n	80061ac <HAL_RCC_OscConfig+0x1e0>
 80061ca:	e000      	b.n	80061ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d041      	beq.n	800625e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d01c      	beq.n	800621c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061e2:	4b19      	ldr	r3, [pc, #100]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 80061e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061e8:	4a17      	ldr	r2, [pc, #92]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 80061ea:	f043 0301 	orr.w	r3, r3, #1
 80061ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f2:	f7fd fc99 	bl	8003b28 <HAL_GetTick>
 80061f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061f8:	e008      	b.n	800620c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061fa:	f7fd fc95 	bl	8003b28 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d901      	bls.n	800620c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e1e7      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800620c:	4b0e      	ldr	r3, [pc, #56]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 800620e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0ef      	beq.n	80061fa <HAL_RCC_OscConfig+0x22e>
 800621a:	e020      	b.n	800625e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800621c:	4b0a      	ldr	r3, [pc, #40]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 800621e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006222:	4a09      	ldr	r2, [pc, #36]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006224:	f023 0301 	bic.w	r3, r3, #1
 8006228:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800622c:	f7fd fc7c 	bl	8003b28 <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006232:	e00d      	b.n	8006250 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006234:	f7fd fc78 	bl	8003b28 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d906      	bls.n	8006250 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e1ca      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
 8006246:	bf00      	nop
 8006248:	40021000 	.word	0x40021000
 800624c:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006250:	4b8c      	ldr	r3, [pc, #560]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006252:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1ea      	bne.n	8006234 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0304 	and.w	r3, r3, #4
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 80a6 	beq.w	80063b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800626c:	2300      	movs	r3, #0
 800626e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006270:	4b84      	ldr	r3, [pc, #528]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <HAL_RCC_OscConfig+0x2b4>
 800627c:	2301      	movs	r3, #1
 800627e:	e000      	b.n	8006282 <HAL_RCC_OscConfig+0x2b6>
 8006280:	2300      	movs	r3, #0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00d      	beq.n	80062a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006286:	4b7f      	ldr	r3, [pc, #508]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800628a:	4a7e      	ldr	r2, [pc, #504]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 800628c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006290:	6593      	str	r3, [r2, #88]	@ 0x58
 8006292:	4b7c      	ldr	r3, [pc, #496]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800629e:	2301      	movs	r3, #1
 80062a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062a2:	4b79      	ldr	r3, [pc, #484]	@ (8006488 <HAL_RCC_OscConfig+0x4bc>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d118      	bne.n	80062e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062ae:	4b76      	ldr	r3, [pc, #472]	@ (8006488 <HAL_RCC_OscConfig+0x4bc>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a75      	ldr	r2, [pc, #468]	@ (8006488 <HAL_RCC_OscConfig+0x4bc>)
 80062b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062ba:	f7fd fc35 	bl	8003b28 <HAL_GetTick>
 80062be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062c0:	e008      	b.n	80062d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062c2:	f7fd fc31 	bl	8003b28 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d901      	bls.n	80062d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e183      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062d4:	4b6c      	ldr	r3, [pc, #432]	@ (8006488 <HAL_RCC_OscConfig+0x4bc>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d0f0      	beq.n	80062c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d108      	bne.n	80062fa <HAL_RCC_OscConfig+0x32e>
 80062e8:	4b66      	ldr	r3, [pc, #408]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 80062ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ee:	4a65      	ldr	r2, [pc, #404]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 80062f0:	f043 0301 	orr.w	r3, r3, #1
 80062f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80062f8:	e024      	b.n	8006344 <HAL_RCC_OscConfig+0x378>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2b05      	cmp	r3, #5
 8006300:	d110      	bne.n	8006324 <HAL_RCC_OscConfig+0x358>
 8006302:	4b60      	ldr	r3, [pc, #384]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006308:	4a5e      	ldr	r2, [pc, #376]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 800630a:	f043 0304 	orr.w	r3, r3, #4
 800630e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006312:	4b5c      	ldr	r3, [pc, #368]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006318:	4a5a      	ldr	r2, [pc, #360]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 800631a:	f043 0301 	orr.w	r3, r3, #1
 800631e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006322:	e00f      	b.n	8006344 <HAL_RCC_OscConfig+0x378>
 8006324:	4b57      	ldr	r3, [pc, #348]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800632a:	4a56      	ldr	r2, [pc, #344]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 800632c:	f023 0301 	bic.w	r3, r3, #1
 8006330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006334:	4b53      	ldr	r3, [pc, #332]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800633a:	4a52      	ldr	r2, [pc, #328]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 800633c:	f023 0304 	bic.w	r3, r3, #4
 8006340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d016      	beq.n	800637a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800634c:	f7fd fbec 	bl	8003b28 <HAL_GetTick>
 8006350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006352:	e00a      	b.n	800636a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006354:	f7fd fbe8 	bl	8003b28 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006362:	4293      	cmp	r3, r2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e138      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800636a:	4b46      	ldr	r3, [pc, #280]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 800636c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0ed      	beq.n	8006354 <HAL_RCC_OscConfig+0x388>
 8006378:	e015      	b.n	80063a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800637a:	f7fd fbd5 	bl	8003b28 <HAL_GetTick>
 800637e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006380:	e00a      	b.n	8006398 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006382:	f7fd fbd1 	bl	8003b28 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006390:	4293      	cmp	r3, r2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e121      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006398:	4b3a      	ldr	r3, [pc, #232]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 800639a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1ed      	bne.n	8006382 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80063a6:	7ffb      	ldrb	r3, [r7, #31]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d105      	bne.n	80063b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ac:	4b35      	ldr	r3, [pc, #212]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 80063ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b0:	4a34      	ldr	r2, [pc, #208]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 80063b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0320 	and.w	r3, r3, #32
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d03c      	beq.n	800643e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01c      	beq.n	8006406 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063cc:	4b2d      	ldr	r3, [pc, #180]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 80063ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 80063d4:	f043 0301 	orr.w	r3, r3, #1
 80063d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063dc:	f7fd fba4 	bl	8003b28 <HAL_GetTick>
 80063e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80063e2:	e008      	b.n	80063f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063e4:	f7fd fba0 	bl	8003b28 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d901      	bls.n	80063f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e0f2      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80063f6:	4b23      	ldr	r3, [pc, #140]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 80063f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0ef      	beq.n	80063e4 <HAL_RCC_OscConfig+0x418>
 8006404:	e01b      	b.n	800643e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006406:	4b1f      	ldr	r3, [pc, #124]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006408:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800640c:	4a1d      	ldr	r2, [pc, #116]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 800640e:	f023 0301 	bic.w	r3, r3, #1
 8006412:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006416:	f7fd fb87 	bl	8003b28 <HAL_GetTick>
 800641a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800641c:	e008      	b.n	8006430 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800641e:	f7fd fb83 	bl	8003b28 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d901      	bls.n	8006430 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e0d5      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006430:	4b14      	ldr	r3, [pc, #80]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006432:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1ef      	bne.n	800641e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 80c9 	beq.w	80065da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006448:	4b0e      	ldr	r3, [pc, #56]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 030c 	and.w	r3, r3, #12
 8006450:	2b0c      	cmp	r3, #12
 8006452:	f000 8083 	beq.w	800655c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	2b02      	cmp	r3, #2
 800645c:	d15e      	bne.n	800651c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800645e:	4b09      	ldr	r3, [pc, #36]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a08      	ldr	r2, [pc, #32]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006464:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646a:	f7fd fb5d 	bl	8003b28 <HAL_GetTick>
 800646e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006470:	e00c      	b.n	800648c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006472:	f7fd fb59 	bl	8003b28 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d905      	bls.n	800648c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e0ab      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
 8006484:	40021000 	.word	0x40021000
 8006488:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800648c:	4b55      	ldr	r3, [pc, #340]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1ec      	bne.n	8006472 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006498:	4b52      	ldr	r3, [pc, #328]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	4b52      	ldr	r3, [pc, #328]	@ (80065e8 <HAL_RCC_OscConfig+0x61c>)
 800649e:	4013      	ands	r3, r2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6a11      	ldr	r1, [r2, #32]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064a8:	3a01      	subs	r2, #1
 80064aa:	0112      	lsls	r2, r2, #4
 80064ac:	4311      	orrs	r1, r2
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80064b2:	0212      	lsls	r2, r2, #8
 80064b4:	4311      	orrs	r1, r2
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80064ba:	0852      	lsrs	r2, r2, #1
 80064bc:	3a01      	subs	r2, #1
 80064be:	0552      	lsls	r2, r2, #21
 80064c0:	4311      	orrs	r1, r2
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80064c6:	0852      	lsrs	r2, r2, #1
 80064c8:	3a01      	subs	r2, #1
 80064ca:	0652      	lsls	r2, r2, #25
 80064cc:	4311      	orrs	r1, r2
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80064d2:	06d2      	lsls	r2, r2, #27
 80064d4:	430a      	orrs	r2, r1
 80064d6:	4943      	ldr	r1, [pc, #268]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064dc:	4b41      	ldr	r3, [pc, #260]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a40      	ldr	r2, [pc, #256]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 80064e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064e8:	4b3e      	ldr	r3, [pc, #248]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4a3d      	ldr	r2, [pc, #244]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 80064ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f4:	f7fd fb18 	bl	8003b28 <HAL_GetTick>
 80064f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064fc:	f7fd fb14 	bl	8003b28 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e066      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800650e:	4b35      	ldr	r3, [pc, #212]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0f0      	beq.n	80064fc <HAL_RCC_OscConfig+0x530>
 800651a:	e05e      	b.n	80065da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800651c:	4b31      	ldr	r3, [pc, #196]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a30      	ldr	r2, [pc, #192]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 8006522:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006528:	f7fd fafe 	bl	8003b28 <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006530:	f7fd fafa 	bl	8003b28 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e04c      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006542:	4b28      	ldr	r3, [pc, #160]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f0      	bne.n	8006530 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800654e:	4b25      	ldr	r3, [pc, #148]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	4924      	ldr	r1, [pc, #144]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 8006554:	4b25      	ldr	r3, [pc, #148]	@ (80065ec <HAL_RCC_OscConfig+0x620>)
 8006556:	4013      	ands	r3, r2
 8006558:	60cb      	str	r3, [r1, #12]
 800655a:	e03e      	b.n	80065da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e039      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006568:	4b1e      	ldr	r3, [pc, #120]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f003 0203 	and.w	r2, r3, #3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	429a      	cmp	r2, r3
 800657a:	d12c      	bne.n	80065d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006586:	3b01      	subs	r3, #1
 8006588:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800658a:	429a      	cmp	r2, r3
 800658c:	d123      	bne.n	80065d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006598:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800659a:	429a      	cmp	r2, r3
 800659c:	d11b      	bne.n	80065d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d113      	bne.n	80065d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b8:	085b      	lsrs	r3, r3, #1
 80065ba:	3b01      	subs	r3, #1
 80065bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80065be:	429a      	cmp	r2, r3
 80065c0:	d109      	bne.n	80065d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065cc:	085b      	lsrs	r3, r3, #1
 80065ce:	3b01      	subs	r3, #1
 80065d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d001      	beq.n	80065da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e000      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3720      	adds	r7, #32
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	40021000 	.word	0x40021000
 80065e8:	019f800c 	.word	0x019f800c
 80065ec:	feeefffc 	.word	0xfeeefffc

080065f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80065fa:	2300      	movs	r3, #0
 80065fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e11e      	b.n	8006846 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006608:	4b91      	ldr	r3, [pc, #580]	@ (8006850 <HAL_RCC_ClockConfig+0x260>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 030f 	and.w	r3, r3, #15
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d910      	bls.n	8006638 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006616:	4b8e      	ldr	r3, [pc, #568]	@ (8006850 <HAL_RCC_ClockConfig+0x260>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f023 020f 	bic.w	r2, r3, #15
 800661e:	498c      	ldr	r1, [pc, #560]	@ (8006850 <HAL_RCC_ClockConfig+0x260>)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	4313      	orrs	r3, r2
 8006624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006626:	4b8a      	ldr	r3, [pc, #552]	@ (8006850 <HAL_RCC_ClockConfig+0x260>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 030f 	and.w	r3, r3, #15
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	429a      	cmp	r2, r3
 8006632:	d001      	beq.n	8006638 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e106      	b.n	8006846 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d073      	beq.n	800672c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b03      	cmp	r3, #3
 800664a:	d129      	bne.n	80066a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800664c:	4b81      	ldr	r3, [pc, #516]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e0f4      	b.n	8006846 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800665c:	f000 f99e 	bl	800699c <RCC_GetSysClockFreqFromPLLSource>
 8006660:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	4a7c      	ldr	r2, [pc, #496]	@ (8006858 <HAL_RCC_ClockConfig+0x268>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d93f      	bls.n	80066ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800666a:	4b7a      	ldr	r3, [pc, #488]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d009      	beq.n	800668a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800667e:	2b00      	cmp	r3, #0
 8006680:	d033      	beq.n	80066ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006686:	2b00      	cmp	r3, #0
 8006688:	d12f      	bne.n	80066ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800668a:	4b72      	ldr	r3, [pc, #456]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006692:	4a70      	ldr	r2, [pc, #448]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 8006694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006698:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800669a:	2380      	movs	r3, #128	@ 0x80
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	e024      	b.n	80066ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d107      	bne.n	80066b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066a8:	4b6a      	ldr	r3, [pc, #424]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d109      	bne.n	80066c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e0c6      	b.n	8006846 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066b8:	4b66      	ldr	r3, [pc, #408]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e0be      	b.n	8006846 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80066c8:	f000 f8ce 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 80066cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	4a61      	ldr	r2, [pc, #388]	@ (8006858 <HAL_RCC_ClockConfig+0x268>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d909      	bls.n	80066ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80066d6:	4b5f      	ldr	r3, [pc, #380]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066de:	4a5d      	ldr	r2, [pc, #372]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 80066e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80066e6:	2380      	movs	r3, #128	@ 0x80
 80066e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066ea:	4b5a      	ldr	r3, [pc, #360]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f023 0203 	bic.w	r2, r3, #3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	4957      	ldr	r1, [pc, #348]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066fc:	f7fd fa14 	bl	8003b28 <HAL_GetTick>
 8006700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006702:	e00a      	b.n	800671a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006704:	f7fd fa10 	bl	8003b28 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006712:	4293      	cmp	r3, r2
 8006714:	d901      	bls.n	800671a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e095      	b.n	8006846 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800671a:	4b4e      	ldr	r3, [pc, #312]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 020c 	and.w	r2, r3, #12
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	429a      	cmp	r2, r3
 800672a:	d1eb      	bne.n	8006704 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d023      	beq.n	8006780 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006744:	4b43      	ldr	r3, [pc, #268]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	4a42      	ldr	r2, [pc, #264]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 800674a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800674e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d007      	beq.n	800676c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800675c:	4b3d      	ldr	r3, [pc, #244]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006764:	4a3b      	ldr	r2, [pc, #236]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 8006766:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800676a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800676c:	4b39      	ldr	r3, [pc, #228]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	4936      	ldr	r1, [pc, #216]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 800677a:	4313      	orrs	r3, r2
 800677c:	608b      	str	r3, [r1, #8]
 800677e:	e008      	b.n	8006792 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2b80      	cmp	r3, #128	@ 0x80
 8006784:	d105      	bne.n	8006792 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006786:	4b33      	ldr	r3, [pc, #204]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	4a32      	ldr	r2, [pc, #200]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 800678c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006790:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006792:	4b2f      	ldr	r3, [pc, #188]	@ (8006850 <HAL_RCC_ClockConfig+0x260>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 030f 	and.w	r3, r3, #15
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	429a      	cmp	r2, r3
 800679e:	d21d      	bcs.n	80067dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067a0:	4b2b      	ldr	r3, [pc, #172]	@ (8006850 <HAL_RCC_ClockConfig+0x260>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f023 020f 	bic.w	r2, r3, #15
 80067a8:	4929      	ldr	r1, [pc, #164]	@ (8006850 <HAL_RCC_ClockConfig+0x260>)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80067b0:	f7fd f9ba 	bl	8003b28 <HAL_GetTick>
 80067b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067b6:	e00a      	b.n	80067ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067b8:	f7fd f9b6 	bl	8003b28 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e03b      	b.n	8006846 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ce:	4b20      	ldr	r3, [pc, #128]	@ (8006850 <HAL_RCC_ClockConfig+0x260>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 030f 	and.w	r3, r3, #15
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d1ed      	bne.n	80067b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d008      	beq.n	80067fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	4917      	ldr	r1, [pc, #92]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0308 	and.w	r3, r3, #8
 8006802:	2b00      	cmp	r3, #0
 8006804:	d009      	beq.n	800681a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006806:	4b13      	ldr	r3, [pc, #76]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	490f      	ldr	r1, [pc, #60]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 8006816:	4313      	orrs	r3, r2
 8006818:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800681a:	f000 f825 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 800681e:	4602      	mov	r2, r0
 8006820:	4b0c      	ldr	r3, [pc, #48]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	091b      	lsrs	r3, r3, #4
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	490c      	ldr	r1, [pc, #48]	@ (800685c <HAL_RCC_ClockConfig+0x26c>)
 800682c:	5ccb      	ldrb	r3, [r1, r3]
 800682e:	f003 031f 	and.w	r3, r3, #31
 8006832:	fa22 f303 	lsr.w	r3, r2, r3
 8006836:	4a0a      	ldr	r2, [pc, #40]	@ (8006860 <HAL_RCC_ClockConfig+0x270>)
 8006838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800683a:	4b0a      	ldr	r3, [pc, #40]	@ (8006864 <HAL_RCC_ClockConfig+0x274>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f7fd f926 	bl	8003a90 <HAL_InitTick>
 8006844:	4603      	mov	r3, r0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	40022000 	.word	0x40022000
 8006854:	40021000 	.word	0x40021000
 8006858:	04c4b400 	.word	0x04c4b400
 800685c:	0800ae9c 	.word	0x0800ae9c
 8006860:	20000018 	.word	0x20000018
 8006864:	2000001c 	.word	0x2000001c

08006868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800686e:	4b2c      	ldr	r3, [pc, #176]	@ (8006920 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f003 030c 	and.w	r3, r3, #12
 8006876:	2b04      	cmp	r3, #4
 8006878:	d102      	bne.n	8006880 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800687a:	4b2a      	ldr	r3, [pc, #168]	@ (8006924 <HAL_RCC_GetSysClockFreq+0xbc>)
 800687c:	613b      	str	r3, [r7, #16]
 800687e:	e047      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006880:	4b27      	ldr	r3, [pc, #156]	@ (8006920 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 030c 	and.w	r3, r3, #12
 8006888:	2b08      	cmp	r3, #8
 800688a:	d102      	bne.n	8006892 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800688c:	4b26      	ldr	r3, [pc, #152]	@ (8006928 <HAL_RCC_GetSysClockFreq+0xc0>)
 800688e:	613b      	str	r3, [r7, #16]
 8006890:	e03e      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006892:	4b23      	ldr	r3, [pc, #140]	@ (8006920 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f003 030c 	and.w	r3, r3, #12
 800689a:	2b0c      	cmp	r3, #12
 800689c:	d136      	bne.n	800690c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800689e:	4b20      	ldr	r3, [pc, #128]	@ (8006920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80068a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	091b      	lsrs	r3, r3, #4
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	3301      	adds	r3, #1
 80068b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d10c      	bne.n	80068d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006928 <HAL_RCC_GetSysClockFreq+0xc0>)
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c4:	4a16      	ldr	r2, [pc, #88]	@ (8006920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068c6:	68d2      	ldr	r2, [r2, #12]
 80068c8:	0a12      	lsrs	r2, r2, #8
 80068ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80068ce:	fb02 f303 	mul.w	r3, r2, r3
 80068d2:	617b      	str	r3, [r7, #20]
      break;
 80068d4:	e00c      	b.n	80068f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068d6:	4a13      	ldr	r2, [pc, #76]	@ (8006924 <HAL_RCC_GetSysClockFreq+0xbc>)
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	fbb2 f3f3 	udiv	r3, r2, r3
 80068de:	4a10      	ldr	r2, [pc, #64]	@ (8006920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068e0:	68d2      	ldr	r2, [r2, #12]
 80068e2:	0a12      	lsrs	r2, r2, #8
 80068e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80068e8:	fb02 f303 	mul.w	r3, r2, r3
 80068ec:	617b      	str	r3, [r7, #20]
      break;
 80068ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80068f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	0e5b      	lsrs	r3, r3, #25
 80068f6:	f003 0303 	and.w	r3, r3, #3
 80068fa:	3301      	adds	r3, #1
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	fbb2 f3f3 	udiv	r3, r2, r3
 8006908:	613b      	str	r3, [r7, #16]
 800690a:	e001      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006910:	693b      	ldr	r3, [r7, #16]
}
 8006912:	4618      	mov	r0, r3
 8006914:	371c      	adds	r7, #28
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	40021000 	.word	0x40021000
 8006924:	00f42400 	.word	0x00f42400
 8006928:	016e3600 	.word	0x016e3600

0800692c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006930:	4b03      	ldr	r3, [pc, #12]	@ (8006940 <HAL_RCC_GetHCLKFreq+0x14>)
 8006932:	681b      	ldr	r3, [r3, #0]
}
 8006934:	4618      	mov	r0, r3
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	20000018 	.word	0x20000018

08006944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006948:	f7ff fff0 	bl	800692c <HAL_RCC_GetHCLKFreq>
 800694c:	4602      	mov	r2, r0
 800694e:	4b06      	ldr	r3, [pc, #24]	@ (8006968 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	0a1b      	lsrs	r3, r3, #8
 8006954:	f003 0307 	and.w	r3, r3, #7
 8006958:	4904      	ldr	r1, [pc, #16]	@ (800696c <HAL_RCC_GetPCLK1Freq+0x28>)
 800695a:	5ccb      	ldrb	r3, [r1, r3]
 800695c:	f003 031f 	and.w	r3, r3, #31
 8006960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006964:	4618      	mov	r0, r3
 8006966:	bd80      	pop	{r7, pc}
 8006968:	40021000 	.word	0x40021000
 800696c:	0800aeac 	.word	0x0800aeac

08006970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006974:	f7ff ffda 	bl	800692c <HAL_RCC_GetHCLKFreq>
 8006978:	4602      	mov	r2, r0
 800697a:	4b06      	ldr	r3, [pc, #24]	@ (8006994 <HAL_RCC_GetPCLK2Freq+0x24>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	0adb      	lsrs	r3, r3, #11
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	4904      	ldr	r1, [pc, #16]	@ (8006998 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006986:	5ccb      	ldrb	r3, [r1, r3]
 8006988:	f003 031f 	and.w	r3, r3, #31
 800698c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006990:	4618      	mov	r0, r3
 8006992:	bd80      	pop	{r7, pc}
 8006994:	40021000 	.word	0x40021000
 8006998:	0800aeac 	.word	0x0800aeac

0800699c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80069a2:	4b1e      	ldr	r3, [pc, #120]	@ (8006a1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f003 0303 	and.w	r3, r3, #3
 80069aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80069ac:	4b1b      	ldr	r3, [pc, #108]	@ (8006a1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	091b      	lsrs	r3, r3, #4
 80069b2:	f003 030f 	and.w	r3, r3, #15
 80069b6:	3301      	adds	r3, #1
 80069b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d10c      	bne.n	80069da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069c0:	4a17      	ldr	r2, [pc, #92]	@ (8006a20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c8:	4a14      	ldr	r2, [pc, #80]	@ (8006a1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069ca:	68d2      	ldr	r2, [r2, #12]
 80069cc:	0a12      	lsrs	r2, r2, #8
 80069ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069d2:	fb02 f303 	mul.w	r3, r2, r3
 80069d6:	617b      	str	r3, [r7, #20]
    break;
 80069d8:	e00c      	b.n	80069f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069da:	4a12      	ldr	r2, [pc, #72]	@ (8006a24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e2:	4a0e      	ldr	r2, [pc, #56]	@ (8006a1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069e4:	68d2      	ldr	r2, [r2, #12]
 80069e6:	0a12      	lsrs	r2, r2, #8
 80069e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069ec:	fb02 f303 	mul.w	r3, r2, r3
 80069f0:	617b      	str	r3, [r7, #20]
    break;
 80069f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069f4:	4b09      	ldr	r3, [pc, #36]	@ (8006a1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	0e5b      	lsrs	r3, r3, #25
 80069fa:	f003 0303 	and.w	r3, r3, #3
 80069fe:	3301      	adds	r3, #1
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006a0e:	687b      	ldr	r3, [r7, #4]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	371c      	adds	r7, #28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	40021000 	.word	0x40021000
 8006a20:	016e3600 	.word	0x016e3600
 8006a24:	00f42400 	.word	0x00f42400

08006a28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a30:	2300      	movs	r3, #0
 8006a32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a34:	2300      	movs	r3, #0
 8006a36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 8098 	beq.w	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a46:	2300      	movs	r3, #0
 8006a48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a4a:	4b43      	ldr	r3, [pc, #268]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10d      	bne.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a56:	4b40      	ldr	r3, [pc, #256]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a60:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a62:	4b3d      	ldr	r3, [pc, #244]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a6a:	60bb      	str	r3, [r7, #8]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a72:	4b3a      	ldr	r3, [pc, #232]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a39      	ldr	r2, [pc, #228]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a7e:	f7fd f853 	bl	8003b28 <HAL_GetTick>
 8006a82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a84:	e009      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a86:	f7fd f84f 	bl	8003b28 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d902      	bls.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	74fb      	strb	r3, [r7, #19]
        break;
 8006a98:	e005      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a9a:	4b30      	ldr	r3, [pc, #192]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0ef      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006aa6:	7cfb      	ldrb	r3, [r7, #19]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d159      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006aac:	4b2a      	ldr	r3, [pc, #168]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ab6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d01e      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d019      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ac8:	4b23      	ldr	r3, [pc, #140]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ace:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ad2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ad4:	4b20      	ldr	r3, [pc, #128]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ada:	4a1f      	ldr	r2, [pc, #124]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ae0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aea:	4a1b      	ldr	r2, [pc, #108]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006af0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006af4:	4a18      	ldr	r2, [pc, #96]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d016      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b06:	f7fd f80f 	bl	8003b28 <HAL_GetTick>
 8006b0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b0c:	e00b      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b0e:	f7fd f80b 	bl	8003b28 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d902      	bls.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	74fb      	strb	r3, [r7, #19]
            break;
 8006b24:	e006      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b26:	4b0c      	ldr	r3, [pc, #48]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0ec      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006b34:	7cfb      	ldrb	r3, [r7, #19]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10b      	bne.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b3a:	4b07      	ldr	r3, [pc, #28]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b48:	4903      	ldr	r1, [pc, #12]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006b50:	e008      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b52:	7cfb      	ldrb	r3, [r7, #19]
 8006b54:	74bb      	strb	r3, [r7, #18]
 8006b56:	e005      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006b58:	40021000 	.word	0x40021000
 8006b5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b60:	7cfb      	ldrb	r3, [r7, #19]
 8006b62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b64:	7c7b      	ldrb	r3, [r7, #17]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d105      	bne.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b6a:	4ba7      	ldr	r3, [pc, #668]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b6e:	4aa6      	ldr	r2, [pc, #664]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b74:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00a      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b82:	4ba1      	ldr	r3, [pc, #644]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b88:	f023 0203 	bic.w	r2, r3, #3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	499d      	ldr	r1, [pc, #628]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00a      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ba4:	4b98      	ldr	r3, [pc, #608]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006baa:	f023 020c 	bic.w	r2, r3, #12
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	4995      	ldr	r1, [pc, #596]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0304 	and.w	r3, r3, #4
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00a      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006bc6:	4b90      	ldr	r3, [pc, #576]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bcc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	498c      	ldr	r1, [pc, #560]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0308 	and.w	r3, r3, #8
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00a      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006be8:	4b87      	ldr	r3, [pc, #540]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	4984      	ldr	r1, [pc, #528]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0310 	and.w	r3, r3, #16
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c0a:	4b7f      	ldr	r3, [pc, #508]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	497b      	ldr	r1, [pc, #492]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0320 	and.w	r3, r3, #32
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c2c:	4b76      	ldr	r3, [pc, #472]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	4973      	ldr	r1, [pc, #460]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c4e:	4b6e      	ldr	r3, [pc, #440]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	496a      	ldr	r1, [pc, #424]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00a      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c70:	4b65      	ldr	r3, [pc, #404]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c76:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	4962      	ldr	r1, [pc, #392]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00a      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c92:	4b5d      	ldr	r3, [pc, #372]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca0:	4959      	ldr	r1, [pc, #356]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00a      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006cb4:	4b54      	ldr	r3, [pc, #336]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cba:	f023 0203 	bic.w	r2, r3, #3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc2:	4951      	ldr	r1, [pc, #324]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00a      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cdc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce4:	4948      	ldr	r1, [pc, #288]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d015      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cf8:	4b43      	ldr	r3, [pc, #268]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d06:	4940      	ldr	r1, [pc, #256]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d16:	d105      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d18:	4b3b      	ldr	r3, [pc, #236]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	4a3a      	ldr	r2, [pc, #232]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d015      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006d30:	4b35      	ldr	r3, [pc, #212]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d3e:	4932      	ldr	r1, [pc, #200]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d4e:	d105      	bne.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d50:	4b2d      	ldr	r3, [pc, #180]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	4a2c      	ldr	r2, [pc, #176]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d5a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d015      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d68:	4b27      	ldr	r3, [pc, #156]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d76:	4924      	ldr	r1, [pc, #144]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d86:	d105      	bne.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d88:	4b1f      	ldr	r3, [pc, #124]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d92:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d015      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006da0:	4b19      	ldr	r3, [pc, #100]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006da6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dae:	4916      	ldr	r1, [pc, #88]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dbe:	d105      	bne.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dc0:	4b11      	ldr	r3, [pc, #68]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	4a10      	ldr	r2, [pc, #64]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d019      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dde:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de6:	4908      	ldr	r1, [pc, #32]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006df6:	d109      	bne.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006df8:	4b03      	ldr	r3, [pc, #12]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	4a02      	ldr	r2, [pc, #8]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e02:	60d3      	str	r3, [r2, #12]
 8006e04:	e002      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006e06:	bf00      	nop
 8006e08:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d015      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006e18:	4b29      	ldr	r3, [pc, #164]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e1e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e26:	4926      	ldr	r1, [pc, #152]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e36:	d105      	bne.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e38:	4b21      	ldr	r3, [pc, #132]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	4a20      	ldr	r2, [pc, #128]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e42:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d015      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006e50:	4b1b      	ldr	r3, [pc, #108]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e56:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e5e:	4918      	ldr	r1, [pc, #96]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e6e:	d105      	bne.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e70:	4b13      	ldr	r3, [pc, #76]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	4a12      	ldr	r2, [pc, #72]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e7a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d015      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006e88:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e96:	490a      	ldr	r1, [pc, #40]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ea2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ea6:	d105      	bne.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ea8:	4b05      	ldr	r3, [pc, #20]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	4a04      	ldr	r2, [pc, #16]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006eae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eb2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006eb4:	7cbb      	ldrb	r3, [r7, #18]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	40021000 	.word	0x40021000

08006ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e054      	b.n	8006f80 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d111      	bne.n	8006f06 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 feec 	bl	8008cc8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d102      	bne.n	8006efe <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a23      	ldr	r2, [pc, #140]	@ (8006f88 <HAL_TIM_Base_Init+0xc4>)
 8006efc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2202      	movs	r2, #2
 8006f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	3304      	adds	r3, #4
 8006f16:	4619      	mov	r1, r3
 8006f18:	4610      	mov	r0, r2
 8006f1a:	f001 fa35 	bl	8008388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	080035d9 	.word	0x080035d9

08006f8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d001      	beq.n	8006fa4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e04c      	b.n	800703e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a26      	ldr	r2, [pc, #152]	@ (800704c <HAL_TIM_Base_Start+0xc0>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d022      	beq.n	8006ffc <HAL_TIM_Base_Start+0x70>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fbe:	d01d      	beq.n	8006ffc <HAL_TIM_Base_Start+0x70>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a22      	ldr	r2, [pc, #136]	@ (8007050 <HAL_TIM_Base_Start+0xc4>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d018      	beq.n	8006ffc <HAL_TIM_Base_Start+0x70>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a21      	ldr	r2, [pc, #132]	@ (8007054 <HAL_TIM_Base_Start+0xc8>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d013      	beq.n	8006ffc <HAL_TIM_Base_Start+0x70>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8007058 <HAL_TIM_Base_Start+0xcc>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d00e      	beq.n	8006ffc <HAL_TIM_Base_Start+0x70>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a1e      	ldr	r2, [pc, #120]	@ (800705c <HAL_TIM_Base_Start+0xd0>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d009      	beq.n	8006ffc <HAL_TIM_Base_Start+0x70>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a1c      	ldr	r2, [pc, #112]	@ (8007060 <HAL_TIM_Base_Start+0xd4>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d004      	beq.n	8006ffc <HAL_TIM_Base_Start+0x70>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8007064 <HAL_TIM_Base_Start+0xd8>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d115      	bne.n	8007028 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	4b19      	ldr	r3, [pc, #100]	@ (8007068 <HAL_TIM_Base_Start+0xdc>)
 8007004:	4013      	ands	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b06      	cmp	r3, #6
 800700c:	d015      	beq.n	800703a <HAL_TIM_Base_Start+0xae>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007014:	d011      	beq.n	800703a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f042 0201 	orr.w	r2, r2, #1
 8007024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007026:	e008      	b.n	800703a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 0201 	orr.w	r2, r2, #1
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	e000      	b.n	800703c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800703a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	40012c00 	.word	0x40012c00
 8007050:	40000400 	.word	0x40000400
 8007054:	40000800 	.word	0x40000800
 8007058:	40000c00 	.word	0x40000c00
 800705c:	40013400 	.word	0x40013400
 8007060:	40014000 	.word	0x40014000
 8007064:	40015000 	.word	0x40015000
 8007068:	00010007 	.word	0x00010007

0800706c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b01      	cmp	r3, #1
 800707e:	d001      	beq.n	8007084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e054      	b.n	800712e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0201 	orr.w	r2, r2, #1
 800709a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a26      	ldr	r2, [pc, #152]	@ (800713c <HAL_TIM_Base_Start_IT+0xd0>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d022      	beq.n	80070ec <HAL_TIM_Base_Start_IT+0x80>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ae:	d01d      	beq.n	80070ec <HAL_TIM_Base_Start_IT+0x80>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a22      	ldr	r2, [pc, #136]	@ (8007140 <HAL_TIM_Base_Start_IT+0xd4>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d018      	beq.n	80070ec <HAL_TIM_Base_Start_IT+0x80>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a21      	ldr	r2, [pc, #132]	@ (8007144 <HAL_TIM_Base_Start_IT+0xd8>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d013      	beq.n	80070ec <HAL_TIM_Base_Start_IT+0x80>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a1f      	ldr	r2, [pc, #124]	@ (8007148 <HAL_TIM_Base_Start_IT+0xdc>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d00e      	beq.n	80070ec <HAL_TIM_Base_Start_IT+0x80>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a1e      	ldr	r2, [pc, #120]	@ (800714c <HAL_TIM_Base_Start_IT+0xe0>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d009      	beq.n	80070ec <HAL_TIM_Base_Start_IT+0x80>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a1c      	ldr	r2, [pc, #112]	@ (8007150 <HAL_TIM_Base_Start_IT+0xe4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d004      	beq.n	80070ec <HAL_TIM_Base_Start_IT+0x80>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1b      	ldr	r2, [pc, #108]	@ (8007154 <HAL_TIM_Base_Start_IT+0xe8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d115      	bne.n	8007118 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689a      	ldr	r2, [r3, #8]
 80070f2:	4b19      	ldr	r3, [pc, #100]	@ (8007158 <HAL_TIM_Base_Start_IT+0xec>)
 80070f4:	4013      	ands	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2b06      	cmp	r3, #6
 80070fc:	d015      	beq.n	800712a <HAL_TIM_Base_Start_IT+0xbe>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007104:	d011      	beq.n	800712a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f042 0201 	orr.w	r2, r2, #1
 8007114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007116:	e008      	b.n	800712a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f042 0201 	orr.w	r2, r2, #1
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	e000      	b.n	800712c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	40012c00 	.word	0x40012c00
 8007140:	40000400 	.word	0x40000400
 8007144:	40000800 	.word	0x40000800
 8007148:	40000c00 	.word	0x40000c00
 800714c:	40013400 	.word	0x40013400
 8007150:	40014000 	.word	0x40014000
 8007154:	40015000 	.word	0x40015000
 8007158:	00010007 	.word	0x00010007

0800715c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e054      	b.n	8007218 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d111      	bne.n	800719e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f001 fda0 	bl	8008cc8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800718c:	2b00      	cmp	r3, #0
 800718e:	d102      	bne.n	8007196 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a23      	ldr	r2, [pc, #140]	@ (8007220 <HAL_TIM_PWM_Init+0xc4>)
 8007194:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2202      	movs	r2, #2
 80071a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	3304      	adds	r3, #4
 80071ae:	4619      	mov	r1, r3
 80071b0:	4610      	mov	r0, r2
 80071b2:	f001 f8e9 	bl	8008388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	08007225 	.word	0x08007225

08007224 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d109      	bne.n	800725c <HAL_TIM_PWM_Start+0x24>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b01      	cmp	r3, #1
 8007252:	bf14      	ite	ne
 8007254:	2301      	movne	r3, #1
 8007256:	2300      	moveq	r3, #0
 8007258:	b2db      	uxtb	r3, r3
 800725a:	e03c      	b.n	80072d6 <HAL_TIM_PWM_Start+0x9e>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2b04      	cmp	r3, #4
 8007260:	d109      	bne.n	8007276 <HAL_TIM_PWM_Start+0x3e>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b01      	cmp	r3, #1
 800726c:	bf14      	ite	ne
 800726e:	2301      	movne	r3, #1
 8007270:	2300      	moveq	r3, #0
 8007272:	b2db      	uxtb	r3, r3
 8007274:	e02f      	b.n	80072d6 <HAL_TIM_PWM_Start+0x9e>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b08      	cmp	r3, #8
 800727a:	d109      	bne.n	8007290 <HAL_TIM_PWM_Start+0x58>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b01      	cmp	r3, #1
 8007286:	bf14      	ite	ne
 8007288:	2301      	movne	r3, #1
 800728a:	2300      	moveq	r3, #0
 800728c:	b2db      	uxtb	r3, r3
 800728e:	e022      	b.n	80072d6 <HAL_TIM_PWM_Start+0x9e>
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	2b0c      	cmp	r3, #12
 8007294:	d109      	bne.n	80072aa <HAL_TIM_PWM_Start+0x72>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b01      	cmp	r3, #1
 80072a0:	bf14      	ite	ne
 80072a2:	2301      	movne	r3, #1
 80072a4:	2300      	moveq	r3, #0
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	e015      	b.n	80072d6 <HAL_TIM_PWM_Start+0x9e>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b10      	cmp	r3, #16
 80072ae:	d109      	bne.n	80072c4 <HAL_TIM_PWM_Start+0x8c>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	bf14      	ite	ne
 80072bc:	2301      	movne	r3, #1
 80072be:	2300      	moveq	r3, #0
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	e008      	b.n	80072d6 <HAL_TIM_PWM_Start+0x9e>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	bf14      	ite	ne
 80072d0:	2301      	movne	r3, #1
 80072d2:	2300      	moveq	r3, #0
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e0a6      	b.n	800742c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d104      	bne.n	80072ee <HAL_TIM_PWM_Start+0xb6>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072ec:	e023      	b.n	8007336 <HAL_TIM_PWM_Start+0xfe>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b04      	cmp	r3, #4
 80072f2:	d104      	bne.n	80072fe <HAL_TIM_PWM_Start+0xc6>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072fc:	e01b      	b.n	8007336 <HAL_TIM_PWM_Start+0xfe>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b08      	cmp	r3, #8
 8007302:	d104      	bne.n	800730e <HAL_TIM_PWM_Start+0xd6>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800730c:	e013      	b.n	8007336 <HAL_TIM_PWM_Start+0xfe>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2b0c      	cmp	r3, #12
 8007312:	d104      	bne.n	800731e <HAL_TIM_PWM_Start+0xe6>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800731c:	e00b      	b.n	8007336 <HAL_TIM_PWM_Start+0xfe>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b10      	cmp	r3, #16
 8007322:	d104      	bne.n	800732e <HAL_TIM_PWM_Start+0xf6>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800732c:	e003      	b.n	8007336 <HAL_TIM_PWM_Start+0xfe>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2202      	movs	r2, #2
 8007332:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2201      	movs	r2, #1
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	4618      	mov	r0, r3
 8007340:	f001 fc9c 	bl	8008c7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a3a      	ldr	r2, [pc, #232]	@ (8007434 <HAL_TIM_PWM_Start+0x1fc>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d018      	beq.n	8007380 <HAL_TIM_PWM_Start+0x148>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a39      	ldr	r2, [pc, #228]	@ (8007438 <HAL_TIM_PWM_Start+0x200>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d013      	beq.n	8007380 <HAL_TIM_PWM_Start+0x148>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a37      	ldr	r2, [pc, #220]	@ (800743c <HAL_TIM_PWM_Start+0x204>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d00e      	beq.n	8007380 <HAL_TIM_PWM_Start+0x148>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a36      	ldr	r2, [pc, #216]	@ (8007440 <HAL_TIM_PWM_Start+0x208>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d009      	beq.n	8007380 <HAL_TIM_PWM_Start+0x148>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a34      	ldr	r2, [pc, #208]	@ (8007444 <HAL_TIM_PWM_Start+0x20c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d004      	beq.n	8007380 <HAL_TIM_PWM_Start+0x148>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a33      	ldr	r2, [pc, #204]	@ (8007448 <HAL_TIM_PWM_Start+0x210>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d101      	bne.n	8007384 <HAL_TIM_PWM_Start+0x14c>
 8007380:	2301      	movs	r3, #1
 8007382:	e000      	b.n	8007386 <HAL_TIM_PWM_Start+0x14e>
 8007384:	2300      	movs	r3, #0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d007      	beq.n	800739a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007398:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a25      	ldr	r2, [pc, #148]	@ (8007434 <HAL_TIM_PWM_Start+0x1fc>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d022      	beq.n	80073ea <HAL_TIM_PWM_Start+0x1b2>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ac:	d01d      	beq.n	80073ea <HAL_TIM_PWM_Start+0x1b2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a26      	ldr	r2, [pc, #152]	@ (800744c <HAL_TIM_PWM_Start+0x214>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d018      	beq.n	80073ea <HAL_TIM_PWM_Start+0x1b2>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a24      	ldr	r2, [pc, #144]	@ (8007450 <HAL_TIM_PWM_Start+0x218>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d013      	beq.n	80073ea <HAL_TIM_PWM_Start+0x1b2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a23      	ldr	r2, [pc, #140]	@ (8007454 <HAL_TIM_PWM_Start+0x21c>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d00e      	beq.n	80073ea <HAL_TIM_PWM_Start+0x1b2>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a19      	ldr	r2, [pc, #100]	@ (8007438 <HAL_TIM_PWM_Start+0x200>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d009      	beq.n	80073ea <HAL_TIM_PWM_Start+0x1b2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a18      	ldr	r2, [pc, #96]	@ (800743c <HAL_TIM_PWM_Start+0x204>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d004      	beq.n	80073ea <HAL_TIM_PWM_Start+0x1b2>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a18      	ldr	r2, [pc, #96]	@ (8007448 <HAL_TIM_PWM_Start+0x210>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d115      	bne.n	8007416 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	4b19      	ldr	r3, [pc, #100]	@ (8007458 <HAL_TIM_PWM_Start+0x220>)
 80073f2:	4013      	ands	r3, r2
 80073f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b06      	cmp	r3, #6
 80073fa:	d015      	beq.n	8007428 <HAL_TIM_PWM_Start+0x1f0>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007402:	d011      	beq.n	8007428 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0201 	orr.w	r2, r2, #1
 8007412:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007414:	e008      	b.n	8007428 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f042 0201 	orr.w	r2, r2, #1
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	e000      	b.n	800742a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007428:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	40012c00 	.word	0x40012c00
 8007438:	40013400 	.word	0x40013400
 800743c:	40014000 	.word	0x40014000
 8007440:	40014400 	.word	0x40014400
 8007444:	40014800 	.word	0x40014800
 8007448:	40015000 	.word	0x40015000
 800744c:	40000400 	.word	0x40000400
 8007450:	40000800 	.word	0x40000800
 8007454:	40000c00 	.word	0x40000c00
 8007458:	00010007 	.word	0x00010007

0800745c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e04c      	b.n	800750a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d111      	bne.n	80074a0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f001 fc1f 	bl	8008cc8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800748e:	2b00      	cmp	r3, #0
 8007490:	d102      	bne.n	8007498 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a1f      	ldr	r2, [pc, #124]	@ (8007514 <HAL_TIM_OnePulse_Init+0xb8>)
 8007496:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	3304      	adds	r3, #4
 80074b0:	4619      	mov	r1, r3
 80074b2:	4610      	mov	r0, r2
 80074b4:	f000 ff68 	bl	8008388 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 0208 	bic.w	r2, r2, #8
 80074c6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6819      	ldr	r1, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	430a      	orrs	r2, r1
 80074d6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	08007519 	.word	0x08007519

08007518 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800753c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007544:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800754c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007554:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d108      	bne.n	800756e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800755c:	7bbb      	ldrb	r3, [r7, #14]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d105      	bne.n	800756e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007562:	7b7b      	ldrb	r3, [r7, #13]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d102      	bne.n	800756e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007568:	7b3b      	ldrb	r3, [r7, #12]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d001      	beq.n	8007572 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e059      	b.n	8007626 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2202      	movs	r2, #2
 8007576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2202      	movs	r2, #2
 800757e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2202      	movs	r2, #2
 8007586:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2202      	movs	r2, #2
 800758e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f042 0202 	orr.w	r2, r2, #2
 80075a0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68da      	ldr	r2, [r3, #12]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f042 0204 	orr.w	r2, r2, #4
 80075b0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2201      	movs	r2, #1
 80075b8:	2100      	movs	r1, #0
 80075ba:	4618      	mov	r0, r3
 80075bc:	f001 fb5e 	bl	8008c7c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2201      	movs	r2, #1
 80075c6:	2104      	movs	r1, #4
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 fb57 	bl	8008c7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a17      	ldr	r2, [pc, #92]	@ (8007630 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d018      	beq.n	800760a <HAL_TIM_OnePulse_Start_IT+0xde>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a15      	ldr	r2, [pc, #84]	@ (8007634 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d013      	beq.n	800760a <HAL_TIM_OnePulse_Start_IT+0xde>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a14      	ldr	r2, [pc, #80]	@ (8007638 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00e      	beq.n	800760a <HAL_TIM_OnePulse_Start_IT+0xde>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a12      	ldr	r2, [pc, #72]	@ (800763c <HAL_TIM_OnePulse_Start_IT+0x110>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d009      	beq.n	800760a <HAL_TIM_OnePulse_Start_IT+0xde>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a11      	ldr	r2, [pc, #68]	@ (8007640 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d004      	beq.n	800760a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a0f      	ldr	r2, [pc, #60]	@ (8007644 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d101      	bne.n	800760e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800760a:	2301      	movs	r3, #1
 800760c:	e000      	b.n	8007610 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800760e:	2300      	movs	r3, #0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d007      	beq.n	8007624 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007622:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	40012c00 	.word	0x40012c00
 8007634:	40013400 	.word	0x40013400
 8007638:	40014000 	.word	0x40014000
 800763c:	40014400 	.word	0x40014400
 8007640:	40014800 	.word	0x40014800
 8007644:	40015000 	.word	0x40015000

08007648 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e0a2      	b.n	80077a2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d111      	bne.n	800768c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f001 fb29 	bl	8008cc8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800767a:	2b00      	cmp	r3, #0
 800767c:	d102      	bne.n	8007684 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a4a      	ldr	r2, [pc, #296]	@ (80077ac <HAL_TIM_Encoder_Init+0x164>)
 8007682:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2202      	movs	r2, #2
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	6812      	ldr	r2, [r2, #0]
 800769e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80076a2:	f023 0307 	bic.w	r3, r3, #7
 80076a6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	3304      	adds	r3, #4
 80076b0:	4619      	mov	r1, r3
 80076b2:	4610      	mov	r0, r2
 80076b4:	f000 fe68 	bl	8008388 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076e0:	f023 0303 	bic.w	r3, r3, #3
 80076e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	689a      	ldr	r2, [r3, #8]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	4313      	orrs	r3, r2
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80076fe:	f023 030c 	bic.w	r3, r3, #12
 8007702:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800770a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800770e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	68da      	ldr	r2, [r3, #12]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	021b      	lsls	r3, r3, #8
 800771a:	4313      	orrs	r3, r2
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	4313      	orrs	r3, r2
 8007720:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	011a      	lsls	r2, r3, #4
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	031b      	lsls	r3, r3, #12
 800772e:	4313      	orrs	r3, r2
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800773c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007744:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	011b      	lsls	r3, r3, #4
 8007750:	4313      	orrs	r3, r2
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	4313      	orrs	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	08003555 	.word	0x08003555

080077b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80077c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80077c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d110      	bne.n	8007802 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d102      	bne.n	80077ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80077e6:	7b7b      	ldrb	r3, [r7, #13]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d001      	beq.n	80077f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e069      	b.n	80078c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007800:	e031      	b.n	8007866 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b04      	cmp	r3, #4
 8007806:	d110      	bne.n	800782a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007808:	7bbb      	ldrb	r3, [r7, #14]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d102      	bne.n	8007814 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800780e:	7b3b      	ldrb	r3, [r7, #12]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d001      	beq.n	8007818 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e055      	b.n	80078c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2202      	movs	r2, #2
 8007824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007828:	e01d      	b.n	8007866 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d108      	bne.n	8007842 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d105      	bne.n	8007842 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007836:	7b7b      	ldrb	r3, [r7, #13]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d102      	bne.n	8007842 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800783c:	7b3b      	ldrb	r3, [r7, #12]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d001      	beq.n	8007846 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e03e      	b.n	80078c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2202      	movs	r2, #2
 800784a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2202      	movs	r2, #2
 8007852:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2202      	movs	r2, #2
 800785a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2202      	movs	r2, #2
 8007862:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <HAL_TIM_Encoder_Start+0xc4>
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2b04      	cmp	r3, #4
 8007870:	d008      	beq.n	8007884 <HAL_TIM_Encoder_Start+0xd4>
 8007872:	e00f      	b.n	8007894 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2201      	movs	r2, #1
 800787a:	2100      	movs	r1, #0
 800787c:	4618      	mov	r0, r3
 800787e:	f001 f9fd 	bl	8008c7c <TIM_CCxChannelCmd>
      break;
 8007882:	e016      	b.n	80078b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2201      	movs	r2, #1
 800788a:	2104      	movs	r1, #4
 800788c:	4618      	mov	r0, r3
 800788e:	f001 f9f5 	bl	8008c7c <TIM_CCxChannelCmd>
      break;
 8007892:	e00e      	b.n	80078b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2201      	movs	r2, #1
 800789a:	2100      	movs	r1, #0
 800789c:	4618      	mov	r0, r3
 800789e:	f001 f9ed 	bl	8008c7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2201      	movs	r2, #1
 80078a8:	2104      	movs	r1, #4
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 f9e6 	bl	8008c7c <TIM_CCxChannelCmd>
      break;
 80078b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f042 0201 	orr.w	r2, r2, #1
 80078c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d026      	beq.n	800793c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f003 0302 	and.w	r3, r3, #2
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d021      	beq.n	800793c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f06f 0202 	mvn.w	r2, #2
 8007900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	f003 0303 	and.w	r3, r3, #3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d005      	beq.n	8007922 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	4798      	blx	r3
 8007920:	e009      	b.n	8007936 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f003 0304 	and.w	r3, r3, #4
 8007942:	2b00      	cmp	r3, #0
 8007944:	d026      	beq.n	8007994 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f003 0304 	and.w	r3, r3, #4
 800794c:	2b00      	cmp	r3, #0
 800794e:	d021      	beq.n	8007994 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f06f 0204 	mvn.w	r2, #4
 8007958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2202      	movs	r2, #2
 800795e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800796a:	2b00      	cmp	r3, #0
 800796c:	d005      	beq.n	800797a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	4798      	blx	r3
 8007978:	e009      	b.n	800798e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	f003 0308 	and.w	r3, r3, #8
 800799a:	2b00      	cmp	r3, #0
 800799c:	d026      	beq.n	80079ec <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f003 0308 	and.w	r3, r3, #8
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d021      	beq.n	80079ec <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f06f 0208 	mvn.w	r2, #8
 80079b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2204      	movs	r2, #4
 80079b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	f003 0303 	and.w	r3, r3, #3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d005      	beq.n	80079d2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	4798      	blx	r3
 80079d0:	e009      	b.n	80079e6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f003 0310 	and.w	r3, r3, #16
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d026      	beq.n	8007a44 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f003 0310 	and.w	r3, r3, #16
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d021      	beq.n	8007a44 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f06f 0210 	mvn.w	r2, #16
 8007a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2208      	movs	r2, #8
 8007a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d005      	beq.n	8007a2a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	4798      	blx	r3
 8007a28:	e009      	b.n	8007a3e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00e      	beq.n	8007a6c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d009      	beq.n	8007a6c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f06f 0201 	mvn.w	r2, #1
 8007a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d104      	bne.n	8007a80 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00e      	beq.n	8007a9e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d009      	beq.n	8007a9e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00e      	beq.n	8007ac6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d009      	beq.n	8007ac6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00e      	beq.n	8007aee <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d009      	beq.n	8007aee <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	f003 0320 	and.w	r3, r3, #32
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00e      	beq.n	8007b16 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f003 0320 	and.w	r3, r3, #32
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d009      	beq.n	8007b16 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f06f 0220 	mvn.w	r2, #32
 8007b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00e      	beq.n	8007b3e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d009      	beq.n	8007b3e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00e      	beq.n	8007b66 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d009      	beq.n	8007b66 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00e      	beq.n	8007b8e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d009      	beq.n	8007b8e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00e      	beq.n	8007bb6 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d009      	beq.n	8007bb6 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bb6:	bf00      	nop
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d101      	bne.n	8007bde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007bda:	2302      	movs	r3, #2
 8007bdc:	e0ff      	b.n	8007dde <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b14      	cmp	r3, #20
 8007bea:	f200 80f0 	bhi.w	8007dce <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007bee:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf4:	08007c49 	.word	0x08007c49
 8007bf8:	08007dcf 	.word	0x08007dcf
 8007bfc:	08007dcf 	.word	0x08007dcf
 8007c00:	08007dcf 	.word	0x08007dcf
 8007c04:	08007c89 	.word	0x08007c89
 8007c08:	08007dcf 	.word	0x08007dcf
 8007c0c:	08007dcf 	.word	0x08007dcf
 8007c10:	08007dcf 	.word	0x08007dcf
 8007c14:	08007ccb 	.word	0x08007ccb
 8007c18:	08007dcf 	.word	0x08007dcf
 8007c1c:	08007dcf 	.word	0x08007dcf
 8007c20:	08007dcf 	.word	0x08007dcf
 8007c24:	08007d0b 	.word	0x08007d0b
 8007c28:	08007dcf 	.word	0x08007dcf
 8007c2c:	08007dcf 	.word	0x08007dcf
 8007c30:	08007dcf 	.word	0x08007dcf
 8007c34:	08007d4d 	.word	0x08007d4d
 8007c38:	08007dcf 	.word	0x08007dcf
 8007c3c:	08007dcf 	.word	0x08007dcf
 8007c40:	08007dcf 	.word	0x08007dcf
 8007c44:	08007d8d 	.word	0x08007d8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68b9      	ldr	r1, [r7, #8]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 fc4e 	bl	80084f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	699a      	ldr	r2, [r3, #24]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f042 0208 	orr.w	r2, r2, #8
 8007c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	699a      	ldr	r2, [r3, #24]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f022 0204 	bic.w	r2, r2, #4
 8007c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6999      	ldr	r1, [r3, #24]
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	691a      	ldr	r2, [r3, #16]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	430a      	orrs	r2, r1
 8007c84:	619a      	str	r2, [r3, #24]
      break;
 8007c86:	e0a5      	b.n	8007dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68b9      	ldr	r1, [r7, #8]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 fcc8 	bl	8008624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	699a      	ldr	r2, [r3, #24]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699a      	ldr	r2, [r3, #24]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6999      	ldr	r1, [r3, #24]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	021a      	lsls	r2, r3, #8
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	430a      	orrs	r2, r1
 8007cc6:	619a      	str	r2, [r3, #24]
      break;
 8007cc8:	e084      	b.n	8007dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68b9      	ldr	r1, [r7, #8]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 fd3b 	bl	800874c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69da      	ldr	r2, [r3, #28]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f042 0208 	orr.w	r2, r2, #8
 8007ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69da      	ldr	r2, [r3, #28]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 0204 	bic.w	r2, r2, #4
 8007cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	69d9      	ldr	r1, [r3, #28]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	691a      	ldr	r2, [r3, #16]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	430a      	orrs	r2, r1
 8007d06:	61da      	str	r2, [r3, #28]
      break;
 8007d08:	e064      	b.n	8007dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68b9      	ldr	r1, [r7, #8]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 fdad 	bl	8008870 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69da      	ldr	r2, [r3, #28]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	69da      	ldr	r2, [r3, #28]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	69d9      	ldr	r1, [r3, #28]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	021a      	lsls	r2, r3, #8
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	61da      	str	r2, [r3, #28]
      break;
 8007d4a:	e043      	b.n	8007dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68b9      	ldr	r1, [r7, #8]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 fe20 	bl	8008998 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f042 0208 	orr.w	r2, r2, #8
 8007d66:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f022 0204 	bic.w	r2, r2, #4
 8007d76:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	691a      	ldr	r2, [r3, #16]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007d8a:	e023      	b.n	8007dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68b9      	ldr	r1, [r7, #8]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 fe6a 	bl	8008a6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007da6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007db6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	021a      	lsls	r2, r3, #8
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007dcc:	e002      	b.n	8007dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop

08007de8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d101      	bne.n	8007e04 <HAL_TIM_ConfigClockSource+0x1c>
 8007e00:	2302      	movs	r3, #2
 8007e02:	e0f6      	b.n	8007ff2 <HAL_TIM_ConfigClockSource+0x20a>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007e22:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a6f      	ldr	r2, [pc, #444]	@ (8007ffc <HAL_TIM_ConfigClockSource+0x214>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	f000 80c1 	beq.w	8007fc6 <HAL_TIM_ConfigClockSource+0x1de>
 8007e44:	4a6d      	ldr	r2, [pc, #436]	@ (8007ffc <HAL_TIM_ConfigClockSource+0x214>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	f200 80c6 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e4c:	4a6c      	ldr	r2, [pc, #432]	@ (8008000 <HAL_TIM_ConfigClockSource+0x218>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	f000 80b9 	beq.w	8007fc6 <HAL_TIM_ConfigClockSource+0x1de>
 8007e54:	4a6a      	ldr	r2, [pc, #424]	@ (8008000 <HAL_TIM_ConfigClockSource+0x218>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	f200 80be 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e5c:	4a69      	ldr	r2, [pc, #420]	@ (8008004 <HAL_TIM_ConfigClockSource+0x21c>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	f000 80b1 	beq.w	8007fc6 <HAL_TIM_ConfigClockSource+0x1de>
 8007e64:	4a67      	ldr	r2, [pc, #412]	@ (8008004 <HAL_TIM_ConfigClockSource+0x21c>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	f200 80b6 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e6c:	4a66      	ldr	r2, [pc, #408]	@ (8008008 <HAL_TIM_ConfigClockSource+0x220>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	f000 80a9 	beq.w	8007fc6 <HAL_TIM_ConfigClockSource+0x1de>
 8007e74:	4a64      	ldr	r2, [pc, #400]	@ (8008008 <HAL_TIM_ConfigClockSource+0x220>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	f200 80ae 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e7c:	4a63      	ldr	r2, [pc, #396]	@ (800800c <HAL_TIM_ConfigClockSource+0x224>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	f000 80a1 	beq.w	8007fc6 <HAL_TIM_ConfigClockSource+0x1de>
 8007e84:	4a61      	ldr	r2, [pc, #388]	@ (800800c <HAL_TIM_ConfigClockSource+0x224>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	f200 80a6 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e8c:	4a60      	ldr	r2, [pc, #384]	@ (8008010 <HAL_TIM_ConfigClockSource+0x228>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	f000 8099 	beq.w	8007fc6 <HAL_TIM_ConfigClockSource+0x1de>
 8007e94:	4a5e      	ldr	r2, [pc, #376]	@ (8008010 <HAL_TIM_ConfigClockSource+0x228>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	f200 809e 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e9c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007ea0:	f000 8091 	beq.w	8007fc6 <HAL_TIM_ConfigClockSource+0x1de>
 8007ea4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007ea8:	f200 8096 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007eac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007eb0:	f000 8089 	beq.w	8007fc6 <HAL_TIM_ConfigClockSource+0x1de>
 8007eb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007eb8:	f200 808e 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec0:	d03e      	beq.n	8007f40 <HAL_TIM_ConfigClockSource+0x158>
 8007ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec6:	f200 8087 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ece:	f000 8086 	beq.w	8007fde <HAL_TIM_ConfigClockSource+0x1f6>
 8007ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ed6:	d87f      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ed8:	2b70      	cmp	r3, #112	@ 0x70
 8007eda:	d01a      	beq.n	8007f12 <HAL_TIM_ConfigClockSource+0x12a>
 8007edc:	2b70      	cmp	r3, #112	@ 0x70
 8007ede:	d87b      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ee0:	2b60      	cmp	r3, #96	@ 0x60
 8007ee2:	d050      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x19e>
 8007ee4:	2b60      	cmp	r3, #96	@ 0x60
 8007ee6:	d877      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ee8:	2b50      	cmp	r3, #80	@ 0x50
 8007eea:	d03c      	beq.n	8007f66 <HAL_TIM_ConfigClockSource+0x17e>
 8007eec:	2b50      	cmp	r3, #80	@ 0x50
 8007eee:	d873      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ef0:	2b40      	cmp	r3, #64	@ 0x40
 8007ef2:	d058      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0x1be>
 8007ef4:	2b40      	cmp	r3, #64	@ 0x40
 8007ef6:	d86f      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ef8:	2b30      	cmp	r3, #48	@ 0x30
 8007efa:	d064      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x1de>
 8007efc:	2b30      	cmp	r3, #48	@ 0x30
 8007efe:	d86b      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f00:	2b20      	cmp	r3, #32
 8007f02:	d060      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x1de>
 8007f04:	2b20      	cmp	r3, #32
 8007f06:	d867      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d05c      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x1de>
 8007f0c:	2b10      	cmp	r3, #16
 8007f0e:	d05a      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x1de>
 8007f10:	e062      	b.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f22:	f000 fe8b 	bl	8008c3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	609a      	str	r2, [r3, #8]
      break;
 8007f3e:	e04f      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f50:	f000 fe74 	bl	8008c3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689a      	ldr	r2, [r3, #8]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f62:	609a      	str	r2, [r3, #8]
      break;
 8007f64:	e03c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f72:	461a      	mov	r2, r3
 8007f74:	f000 fde6 	bl	8008b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2150      	movs	r1, #80	@ 0x50
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 fe3f 	bl	8008c02 <TIM_ITRx_SetConfig>
      break;
 8007f84:	e02c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f92:	461a      	mov	r2, r3
 8007f94:	f000 fe05 	bl	8008ba2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2160      	movs	r1, #96	@ 0x60
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 fe2f 	bl	8008c02 <TIM_ITRx_SetConfig>
      break;
 8007fa4:	e01c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f000 fdc6 	bl	8008b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2140      	movs	r1, #64	@ 0x40
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 fe1f 	bl	8008c02 <TIM_ITRx_SetConfig>
      break;
 8007fc4:	e00c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	f000 fe16 	bl	8008c02 <TIM_ITRx_SetConfig>
      break;
 8007fd6:	e003      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	73fb      	strb	r3, [r7, #15]
      break;
 8007fdc:	e000      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007fde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	00100070 	.word	0x00100070
 8008000:	00100060 	.word	0x00100060
 8008004:	00100050 	.word	0x00100050
 8008008:	00100040 	.word	0x00100040
 800800c:	00100030 	.word	0x00100030
 8008010:	00100020 	.word	0x00100020

08008014 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	460b      	mov	r3, r1
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e14a      	b.n	800837a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	f040 80dd 	bne.w	80082ac <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80080f2:	7afb      	ldrb	r3, [r7, #11]
 80080f4:	2b1f      	cmp	r3, #31
 80080f6:	f200 80d6 	bhi.w	80082a6 <HAL_TIM_RegisterCallback+0x1de>
 80080fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008100 <HAL_TIM_RegisterCallback+0x38>)
 80080fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008100:	08008181 	.word	0x08008181
 8008104:	08008189 	.word	0x08008189
 8008108:	08008191 	.word	0x08008191
 800810c:	08008199 	.word	0x08008199
 8008110:	080081a1 	.word	0x080081a1
 8008114:	080081a9 	.word	0x080081a9
 8008118:	080081b1 	.word	0x080081b1
 800811c:	080081b9 	.word	0x080081b9
 8008120:	080081c1 	.word	0x080081c1
 8008124:	080081c9 	.word	0x080081c9
 8008128:	080081d1 	.word	0x080081d1
 800812c:	080081d9 	.word	0x080081d9
 8008130:	080081e1 	.word	0x080081e1
 8008134:	080081e9 	.word	0x080081e9
 8008138:	080081f3 	.word	0x080081f3
 800813c:	080081fd 	.word	0x080081fd
 8008140:	08008207 	.word	0x08008207
 8008144:	08008211 	.word	0x08008211
 8008148:	0800821b 	.word	0x0800821b
 800814c:	08008225 	.word	0x08008225
 8008150:	0800822f 	.word	0x0800822f
 8008154:	08008239 	.word	0x08008239
 8008158:	08008243 	.word	0x08008243
 800815c:	0800824d 	.word	0x0800824d
 8008160:	08008257 	.word	0x08008257
 8008164:	08008261 	.word	0x08008261
 8008168:	0800826b 	.word	0x0800826b
 800816c:	08008275 	.word	0x08008275
 8008170:	0800827f 	.word	0x0800827f
 8008174:	08008289 	.word	0x08008289
 8008178:	08008293 	.word	0x08008293
 800817c:	0800829d 	.word	0x0800829d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008186:	e0f7      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800818e:	e0f3      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008196:	e0ef      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800819e:	e0eb      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80081a6:	e0e7      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80081ae:	e0e3      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80081b6:	e0df      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80081be:	e0db      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80081c6:	e0d7      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80081ce:	e0d3      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80081d6:	e0cf      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80081de:	e0cb      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80081e6:	e0c7      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80081f0:	e0c2      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80081fa:	e0bd      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008204:	e0b8      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800820e:	e0b3      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008218:	e0ae      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008222:	e0a9      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800822c:	e0a4      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008236:	e09f      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008240:	e09a      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800824a:	e095      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008254:	e090      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800825e:	e08b      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008268:	e086      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008272:	e081      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800827c:	e07c      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008286:	e077      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008290:	e072      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800829a:	e06d      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80082a4:	e068      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	75fb      	strb	r3, [r7, #23]
        break;
 80082aa:	e065      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d15d      	bne.n	8008374 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80082b8:	7afb      	ldrb	r3, [r7, #11]
 80082ba:	2b0d      	cmp	r3, #13
 80082bc:	d857      	bhi.n	800836e <HAL_TIM_RegisterCallback+0x2a6>
 80082be:	a201      	add	r2, pc, #4	@ (adr r2, 80082c4 <HAL_TIM_RegisterCallback+0x1fc>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082fd 	.word	0x080082fd
 80082c8:	08008305 	.word	0x08008305
 80082cc:	0800830d 	.word	0x0800830d
 80082d0:	08008315 	.word	0x08008315
 80082d4:	0800831d 	.word	0x0800831d
 80082d8:	08008325 	.word	0x08008325
 80082dc:	0800832d 	.word	0x0800832d
 80082e0:	08008335 	.word	0x08008335
 80082e4:	0800833d 	.word	0x0800833d
 80082e8:	08008345 	.word	0x08008345
 80082ec:	0800834d 	.word	0x0800834d
 80082f0:	08008355 	.word	0x08008355
 80082f4:	0800835d 	.word	0x0800835d
 80082f8:	08008365 	.word	0x08008365
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008302:	e039      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800830a:	e035      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008312:	e031      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800831a:	e02d      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008322:	e029      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800832a:	e025      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008332:	e021      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800833a:	e01d      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008342:	e019      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800834a:	e015      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008352:	e011      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800835a:	e00d      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008362:	e009      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800836c:	e004      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	75fb      	strb	r3, [r7, #23]
        break;
 8008372:	e001      	b.n	8008378 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008378:	7dfb      	ldrb	r3, [r7, #23]
}
 800837a:	4618      	mov	r0, r3
 800837c:	371c      	adds	r7, #28
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop

08008388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a4c      	ldr	r2, [pc, #304]	@ (80084cc <TIM_Base_SetConfig+0x144>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d017      	beq.n	80083d0 <TIM_Base_SetConfig+0x48>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083a6:	d013      	beq.n	80083d0 <TIM_Base_SetConfig+0x48>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a49      	ldr	r2, [pc, #292]	@ (80084d0 <TIM_Base_SetConfig+0x148>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00f      	beq.n	80083d0 <TIM_Base_SetConfig+0x48>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a48      	ldr	r2, [pc, #288]	@ (80084d4 <TIM_Base_SetConfig+0x14c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d00b      	beq.n	80083d0 <TIM_Base_SetConfig+0x48>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a47      	ldr	r2, [pc, #284]	@ (80084d8 <TIM_Base_SetConfig+0x150>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d007      	beq.n	80083d0 <TIM_Base_SetConfig+0x48>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a46      	ldr	r2, [pc, #280]	@ (80084dc <TIM_Base_SetConfig+0x154>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d003      	beq.n	80083d0 <TIM_Base_SetConfig+0x48>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a45      	ldr	r2, [pc, #276]	@ (80084e0 <TIM_Base_SetConfig+0x158>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d108      	bne.n	80083e2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	4313      	orrs	r3, r2
 80083e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a39      	ldr	r2, [pc, #228]	@ (80084cc <TIM_Base_SetConfig+0x144>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d023      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083f0:	d01f      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a36      	ldr	r2, [pc, #216]	@ (80084d0 <TIM_Base_SetConfig+0x148>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d01b      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a35      	ldr	r2, [pc, #212]	@ (80084d4 <TIM_Base_SetConfig+0x14c>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d017      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a34      	ldr	r2, [pc, #208]	@ (80084d8 <TIM_Base_SetConfig+0x150>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d013      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a33      	ldr	r2, [pc, #204]	@ (80084dc <TIM_Base_SetConfig+0x154>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d00f      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a33      	ldr	r2, [pc, #204]	@ (80084e4 <TIM_Base_SetConfig+0x15c>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d00b      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a32      	ldr	r2, [pc, #200]	@ (80084e8 <TIM_Base_SetConfig+0x160>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d007      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a31      	ldr	r2, [pc, #196]	@ (80084ec <TIM_Base_SetConfig+0x164>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d003      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a2c      	ldr	r2, [pc, #176]	@ (80084e0 <TIM_Base_SetConfig+0x158>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d108      	bne.n	8008444 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	4313      	orrs	r3, r2
 8008442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a18      	ldr	r2, [pc, #96]	@ (80084cc <TIM_Base_SetConfig+0x144>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d013      	beq.n	8008498 <TIM_Base_SetConfig+0x110>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a1a      	ldr	r2, [pc, #104]	@ (80084dc <TIM_Base_SetConfig+0x154>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d00f      	beq.n	8008498 <TIM_Base_SetConfig+0x110>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a1a      	ldr	r2, [pc, #104]	@ (80084e4 <TIM_Base_SetConfig+0x15c>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d00b      	beq.n	8008498 <TIM_Base_SetConfig+0x110>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a19      	ldr	r2, [pc, #100]	@ (80084e8 <TIM_Base_SetConfig+0x160>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d007      	beq.n	8008498 <TIM_Base_SetConfig+0x110>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a18      	ldr	r2, [pc, #96]	@ (80084ec <TIM_Base_SetConfig+0x164>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d003      	beq.n	8008498 <TIM_Base_SetConfig+0x110>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a13      	ldr	r2, [pc, #76]	@ (80084e0 <TIM_Base_SetConfig+0x158>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d103      	bne.n	80084a0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	691a      	ldr	r2, [r3, #16]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d105      	bne.n	80084be <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	f023 0201 	bic.w	r2, r3, #1
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	611a      	str	r2, [r3, #16]
  }
}
 80084be:	bf00      	nop
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	40012c00 	.word	0x40012c00
 80084d0:	40000400 	.word	0x40000400
 80084d4:	40000800 	.word	0x40000800
 80084d8:	40000c00 	.word	0x40000c00
 80084dc:	40013400 	.word	0x40013400
 80084e0:	40015000 	.word	0x40015000
 80084e4:	40014000 	.word	0x40014000
 80084e8:	40014400 	.word	0x40014400
 80084ec:	40014800 	.word	0x40014800

080084f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a1b      	ldr	r3, [r3, #32]
 8008504:	f023 0201 	bic.w	r2, r3, #1
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800851e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f023 0303 	bic.w	r3, r3, #3
 800852a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	4313      	orrs	r3, r2
 8008534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	f023 0302 	bic.w	r3, r3, #2
 800853c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	4313      	orrs	r3, r2
 8008546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a30      	ldr	r2, [pc, #192]	@ (800860c <TIM_OC1_SetConfig+0x11c>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d013      	beq.n	8008578 <TIM_OC1_SetConfig+0x88>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a2f      	ldr	r2, [pc, #188]	@ (8008610 <TIM_OC1_SetConfig+0x120>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d00f      	beq.n	8008578 <TIM_OC1_SetConfig+0x88>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a2e      	ldr	r2, [pc, #184]	@ (8008614 <TIM_OC1_SetConfig+0x124>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d00b      	beq.n	8008578 <TIM_OC1_SetConfig+0x88>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a2d      	ldr	r2, [pc, #180]	@ (8008618 <TIM_OC1_SetConfig+0x128>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d007      	beq.n	8008578 <TIM_OC1_SetConfig+0x88>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a2c      	ldr	r2, [pc, #176]	@ (800861c <TIM_OC1_SetConfig+0x12c>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d003      	beq.n	8008578 <TIM_OC1_SetConfig+0x88>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a2b      	ldr	r2, [pc, #172]	@ (8008620 <TIM_OC1_SetConfig+0x130>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d10c      	bne.n	8008592 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	f023 0308 	bic.w	r3, r3, #8
 800857e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	4313      	orrs	r3, r2
 8008588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	f023 0304 	bic.w	r3, r3, #4
 8008590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a1d      	ldr	r2, [pc, #116]	@ (800860c <TIM_OC1_SetConfig+0x11c>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d013      	beq.n	80085c2 <TIM_OC1_SetConfig+0xd2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a1c      	ldr	r2, [pc, #112]	@ (8008610 <TIM_OC1_SetConfig+0x120>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d00f      	beq.n	80085c2 <TIM_OC1_SetConfig+0xd2>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008614 <TIM_OC1_SetConfig+0x124>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d00b      	beq.n	80085c2 <TIM_OC1_SetConfig+0xd2>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a1a      	ldr	r2, [pc, #104]	@ (8008618 <TIM_OC1_SetConfig+0x128>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d007      	beq.n	80085c2 <TIM_OC1_SetConfig+0xd2>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a19      	ldr	r2, [pc, #100]	@ (800861c <TIM_OC1_SetConfig+0x12c>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d003      	beq.n	80085c2 <TIM_OC1_SetConfig+0xd2>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a18      	ldr	r2, [pc, #96]	@ (8008620 <TIM_OC1_SetConfig+0x130>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d111      	bne.n	80085e6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80085d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	4313      	orrs	r3, r2
 80085da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	621a      	str	r2, [r3, #32]
}
 8008600:	bf00      	nop
 8008602:	371c      	adds	r7, #28
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	40012c00 	.word	0x40012c00
 8008610:	40013400 	.word	0x40013400
 8008614:	40014000 	.word	0x40014000
 8008618:	40014400 	.word	0x40014400
 800861c:	40014800 	.word	0x40014800
 8008620:	40015000 	.word	0x40015000

08008624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	f023 0210 	bic.w	r2, r3, #16
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008652:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800865e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	021b      	lsls	r3, r3, #8
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	4313      	orrs	r3, r2
 800866a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f023 0320 	bic.w	r3, r3, #32
 8008672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	011b      	lsls	r3, r3, #4
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	4313      	orrs	r3, r2
 800867e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a2c      	ldr	r2, [pc, #176]	@ (8008734 <TIM_OC2_SetConfig+0x110>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d007      	beq.n	8008698 <TIM_OC2_SetConfig+0x74>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a2b      	ldr	r2, [pc, #172]	@ (8008738 <TIM_OC2_SetConfig+0x114>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d003      	beq.n	8008698 <TIM_OC2_SetConfig+0x74>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a2a      	ldr	r2, [pc, #168]	@ (800873c <TIM_OC2_SetConfig+0x118>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d10d      	bne.n	80086b4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800869e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	011b      	lsls	r3, r3, #4
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a1f      	ldr	r2, [pc, #124]	@ (8008734 <TIM_OC2_SetConfig+0x110>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d013      	beq.n	80086e4 <TIM_OC2_SetConfig+0xc0>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a1e      	ldr	r2, [pc, #120]	@ (8008738 <TIM_OC2_SetConfig+0x114>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d00f      	beq.n	80086e4 <TIM_OC2_SetConfig+0xc0>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a1e      	ldr	r2, [pc, #120]	@ (8008740 <TIM_OC2_SetConfig+0x11c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d00b      	beq.n	80086e4 <TIM_OC2_SetConfig+0xc0>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a1d      	ldr	r2, [pc, #116]	@ (8008744 <TIM_OC2_SetConfig+0x120>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d007      	beq.n	80086e4 <TIM_OC2_SetConfig+0xc0>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a1c      	ldr	r2, [pc, #112]	@ (8008748 <TIM_OC2_SetConfig+0x124>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d003      	beq.n	80086e4 <TIM_OC2_SetConfig+0xc0>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a17      	ldr	r2, [pc, #92]	@ (800873c <TIM_OC2_SetConfig+0x118>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d113      	bne.n	800870c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	621a      	str	r2, [r3, #32]
}
 8008726:	bf00      	nop
 8008728:	371c      	adds	r7, #28
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	40012c00 	.word	0x40012c00
 8008738:	40013400 	.word	0x40013400
 800873c:	40015000 	.word	0x40015000
 8008740:	40014000 	.word	0x40014000
 8008744:	40014400 	.word	0x40014400
 8008748:	40014800 	.word	0x40014800

0800874c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800874c:	b480      	push	{r7}
 800874e:	b087      	sub	sp, #28
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a1b      	ldr	r3, [r3, #32]
 800875a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a1b      	ldr	r3, [r3, #32]
 8008760:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800877a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800877e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f023 0303 	bic.w	r3, r3, #3
 8008786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	4313      	orrs	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	021b      	lsls	r3, r3, #8
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a2b      	ldr	r2, [pc, #172]	@ (8008858 <TIM_OC3_SetConfig+0x10c>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d007      	beq.n	80087be <TIM_OC3_SetConfig+0x72>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a2a      	ldr	r2, [pc, #168]	@ (800885c <TIM_OC3_SetConfig+0x110>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d003      	beq.n	80087be <TIM_OC3_SetConfig+0x72>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a29      	ldr	r2, [pc, #164]	@ (8008860 <TIM_OC3_SetConfig+0x114>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d10d      	bne.n	80087da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80087c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	021b      	lsls	r3, r3, #8
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80087d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a1e      	ldr	r2, [pc, #120]	@ (8008858 <TIM_OC3_SetConfig+0x10c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d013      	beq.n	800880a <TIM_OC3_SetConfig+0xbe>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a1d      	ldr	r2, [pc, #116]	@ (800885c <TIM_OC3_SetConfig+0x110>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d00f      	beq.n	800880a <TIM_OC3_SetConfig+0xbe>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008864 <TIM_OC3_SetConfig+0x118>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d00b      	beq.n	800880a <TIM_OC3_SetConfig+0xbe>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008868 <TIM_OC3_SetConfig+0x11c>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d007      	beq.n	800880a <TIM_OC3_SetConfig+0xbe>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a1b      	ldr	r2, [pc, #108]	@ (800886c <TIM_OC3_SetConfig+0x120>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d003      	beq.n	800880a <TIM_OC3_SetConfig+0xbe>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a16      	ldr	r2, [pc, #88]	@ (8008860 <TIM_OC3_SetConfig+0x114>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d113      	bne.n	8008832 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	011b      	lsls	r3, r3, #4
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	4313      	orrs	r3, r2
 8008824:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	011b      	lsls	r3, r3, #4
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	4313      	orrs	r3, r2
 8008830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	697a      	ldr	r2, [r7, #20]
 800884a:	621a      	str	r2, [r3, #32]
}
 800884c:	bf00      	nop
 800884e:	371c      	adds	r7, #28
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr
 8008858:	40012c00 	.word	0x40012c00
 800885c:	40013400 	.word	0x40013400
 8008860:	40015000 	.word	0x40015000
 8008864:	40014000 	.word	0x40014000
 8008868:	40014400 	.word	0x40014400
 800886c:	40014800 	.word	0x40014800

08008870 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008870:	b480      	push	{r7}
 8008872:	b087      	sub	sp, #28
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800889e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	021b      	lsls	r3, r3, #8
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80088be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	031b      	lsls	r3, r3, #12
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a2c      	ldr	r2, [pc, #176]	@ (8008980 <TIM_OC4_SetConfig+0x110>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d007      	beq.n	80088e4 <TIM_OC4_SetConfig+0x74>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a2b      	ldr	r2, [pc, #172]	@ (8008984 <TIM_OC4_SetConfig+0x114>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d003      	beq.n	80088e4 <TIM_OC4_SetConfig+0x74>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a2a      	ldr	r2, [pc, #168]	@ (8008988 <TIM_OC4_SetConfig+0x118>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d10d      	bne.n	8008900 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80088ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	031b      	lsls	r3, r3, #12
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a1f      	ldr	r2, [pc, #124]	@ (8008980 <TIM_OC4_SetConfig+0x110>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d013      	beq.n	8008930 <TIM_OC4_SetConfig+0xc0>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a1e      	ldr	r2, [pc, #120]	@ (8008984 <TIM_OC4_SetConfig+0x114>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d00f      	beq.n	8008930 <TIM_OC4_SetConfig+0xc0>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a1e      	ldr	r2, [pc, #120]	@ (800898c <TIM_OC4_SetConfig+0x11c>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d00b      	beq.n	8008930 <TIM_OC4_SetConfig+0xc0>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a1d      	ldr	r2, [pc, #116]	@ (8008990 <TIM_OC4_SetConfig+0x120>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d007      	beq.n	8008930 <TIM_OC4_SetConfig+0xc0>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a1c      	ldr	r2, [pc, #112]	@ (8008994 <TIM_OC4_SetConfig+0x124>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d003      	beq.n	8008930 <TIM_OC4_SetConfig+0xc0>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a17      	ldr	r2, [pc, #92]	@ (8008988 <TIM_OC4_SetConfig+0x118>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d113      	bne.n	8008958 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008936:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800893e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	695b      	ldr	r3, [r3, #20]
 8008944:	019b      	lsls	r3, r3, #6
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	4313      	orrs	r3, r2
 800894a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	019b      	lsls	r3, r3, #6
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	4313      	orrs	r3, r2
 8008956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	621a      	str	r2, [r3, #32]
}
 8008972:	bf00      	nop
 8008974:	371c      	adds	r7, #28
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	40012c00 	.word	0x40012c00
 8008984:	40013400 	.word	0x40013400
 8008988:	40015000 	.word	0x40015000
 800898c:	40014000 	.word	0x40014000
 8008990:	40014400 	.word	0x40014400
 8008994:	40014800 	.word	0x40014800

08008998 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6a1b      	ldr	r3, [r3, #32]
 80089ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80089dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	041b      	lsls	r3, r3, #16
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a19      	ldr	r2, [pc, #100]	@ (8008a54 <TIM_OC5_SetConfig+0xbc>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d013      	beq.n	8008a1a <TIM_OC5_SetConfig+0x82>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a18      	ldr	r2, [pc, #96]	@ (8008a58 <TIM_OC5_SetConfig+0xc0>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d00f      	beq.n	8008a1a <TIM_OC5_SetConfig+0x82>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a17      	ldr	r2, [pc, #92]	@ (8008a5c <TIM_OC5_SetConfig+0xc4>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d00b      	beq.n	8008a1a <TIM_OC5_SetConfig+0x82>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a16      	ldr	r2, [pc, #88]	@ (8008a60 <TIM_OC5_SetConfig+0xc8>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d007      	beq.n	8008a1a <TIM_OC5_SetConfig+0x82>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a15      	ldr	r2, [pc, #84]	@ (8008a64 <TIM_OC5_SetConfig+0xcc>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d003      	beq.n	8008a1a <TIM_OC5_SetConfig+0x82>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a14      	ldr	r2, [pc, #80]	@ (8008a68 <TIM_OC5_SetConfig+0xd0>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d109      	bne.n	8008a2e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	021b      	lsls	r3, r3, #8
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	621a      	str	r2, [r3, #32]
}
 8008a48:	bf00      	nop
 8008a4a:	371c      	adds	r7, #28
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr
 8008a54:	40012c00 	.word	0x40012c00
 8008a58:	40013400 	.word	0x40013400
 8008a5c:	40014000 	.word	0x40014000
 8008a60:	40014400 	.word	0x40014400
 8008a64:	40014800 	.word	0x40014800
 8008a68:	40015000 	.word	0x40015000

08008a6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b087      	sub	sp, #28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a1b      	ldr	r3, [r3, #32]
 8008a80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	021b      	lsls	r3, r3, #8
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	051b      	lsls	r3, r3, #20
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8008b2c <TIM_OC6_SetConfig+0xc0>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d013      	beq.n	8008af0 <TIM_OC6_SetConfig+0x84>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a19      	ldr	r2, [pc, #100]	@ (8008b30 <TIM_OC6_SetConfig+0xc4>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d00f      	beq.n	8008af0 <TIM_OC6_SetConfig+0x84>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a18      	ldr	r2, [pc, #96]	@ (8008b34 <TIM_OC6_SetConfig+0xc8>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d00b      	beq.n	8008af0 <TIM_OC6_SetConfig+0x84>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a17      	ldr	r2, [pc, #92]	@ (8008b38 <TIM_OC6_SetConfig+0xcc>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d007      	beq.n	8008af0 <TIM_OC6_SetConfig+0x84>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a16      	ldr	r2, [pc, #88]	@ (8008b3c <TIM_OC6_SetConfig+0xd0>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d003      	beq.n	8008af0 <TIM_OC6_SetConfig+0x84>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a15      	ldr	r2, [pc, #84]	@ (8008b40 <TIM_OC6_SetConfig+0xd4>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d109      	bne.n	8008b04 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008af6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	695b      	ldr	r3, [r3, #20]
 8008afc:	029b      	lsls	r3, r3, #10
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685a      	ldr	r2, [r3, #4]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	621a      	str	r2, [r3, #32]
}
 8008b1e:	bf00      	nop
 8008b20:	371c      	adds	r7, #28
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	40012c00 	.word	0x40012c00
 8008b30:	40013400 	.word	0x40013400
 8008b34:	40014000 	.word	0x40014000
 8008b38:	40014400 	.word	0x40014400
 8008b3c:	40014800 	.word	0x40014800
 8008b40:	40015000 	.word	0x40015000

08008b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6a1b      	ldr	r3, [r3, #32]
 8008b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6a1b      	ldr	r3, [r3, #32]
 8008b5a:	f023 0201 	bic.w	r2, r3, #1
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	011b      	lsls	r3, r3, #4
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f023 030a 	bic.w	r3, r3, #10
 8008b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	621a      	str	r2, [r3, #32]
}
 8008b96:	bf00      	nop
 8008b98:	371c      	adds	r7, #28
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b087      	sub	sp, #28
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	f023 0210 	bic.w	r2, r3, #16
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008bcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	031b      	lsls	r3, r3, #12
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008bde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	011b      	lsls	r3, r3, #4
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	621a      	str	r2, [r3, #32]
}
 8008bf6:	bf00      	nop
 8008bf8:	371c      	adds	r7, #28
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b085      	sub	sp, #20
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008c18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	f043 0307 	orr.w	r3, r3, #7
 8008c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	609a      	str	r2, [r3, #8]
}
 8008c30:	bf00      	nop
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b087      	sub	sp, #28
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
 8008c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	021a      	lsls	r2, r3, #8
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	431a      	orrs	r2, r3
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	697a      	ldr	r2, [r7, #20]
 8008c6e:	609a      	str	r2, [r3, #8]
}
 8008c70:	bf00      	nop
 8008c72:	371c      	adds	r7, #28
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b087      	sub	sp, #28
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	f003 031f 	and.w	r3, r3, #31
 8008c8e:	2201      	movs	r2, #1
 8008c90:	fa02 f303 	lsl.w	r3, r2, r3
 8008c94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6a1a      	ldr	r2, [r3, #32]
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	43db      	mvns	r3, r3
 8008c9e:	401a      	ands	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6a1a      	ldr	r2, [r3, #32]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	f003 031f 	and.w	r3, r3, #31
 8008cae:	6879      	ldr	r1, [r7, #4]
 8008cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb4:	431a      	orrs	r2, r3
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	621a      	str	r2, [r3, #32]
}
 8008cba:	bf00      	nop
 8008cbc:	371c      	adds	r7, #28
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
	...

08008cc8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a26      	ldr	r2, [pc, #152]	@ (8008d6c <TIM_ResetCallback+0xa4>)
 8008cd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a25      	ldr	r2, [pc, #148]	@ (8008d70 <TIM_ResetCallback+0xa8>)
 8008cdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a24      	ldr	r2, [pc, #144]	@ (8008d74 <TIM_ResetCallback+0xac>)
 8008ce4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a23      	ldr	r2, [pc, #140]	@ (8008d78 <TIM_ResetCallback+0xb0>)
 8008cec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a22      	ldr	r2, [pc, #136]	@ (8008d7c <TIM_ResetCallback+0xb4>)
 8008cf4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a21      	ldr	r2, [pc, #132]	@ (8008d80 <TIM_ResetCallback+0xb8>)
 8008cfc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a20      	ldr	r2, [pc, #128]	@ (8008d84 <TIM_ResetCallback+0xbc>)
 8008d04:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8008d88 <TIM_ResetCallback+0xc0>)
 8008d0c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a1e      	ldr	r2, [pc, #120]	@ (8008d8c <TIM_ResetCallback+0xc4>)
 8008d14:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8008d90 <TIM_ResetCallback+0xc8>)
 8008d1c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a1c      	ldr	r2, [pc, #112]	@ (8008d94 <TIM_ResetCallback+0xcc>)
 8008d24:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8008d98 <TIM_ResetCallback+0xd0>)
 8008d2c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a1a      	ldr	r2, [pc, #104]	@ (8008d9c <TIM_ResetCallback+0xd4>)
 8008d34:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a19      	ldr	r2, [pc, #100]	@ (8008da0 <TIM_ResetCallback+0xd8>)
 8008d3c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a18      	ldr	r2, [pc, #96]	@ (8008da4 <TIM_ResetCallback+0xdc>)
 8008d44:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a17      	ldr	r2, [pc, #92]	@ (8008da8 <TIM_ResetCallback+0xe0>)
 8008d4c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a16      	ldr	r2, [pc, #88]	@ (8008dac <TIM_ResetCallback+0xe4>)
 8008d54:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a15      	ldr	r2, [pc, #84]	@ (8008db0 <TIM_ResetCallback+0xe8>)
 8008d5c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	080020f9 	.word	0x080020f9
 8008d70:	08008015 	.word	0x08008015
 8008d74:	0800808d 	.word	0x0800808d
 8008d78:	080080a1 	.word	0x080080a1
 8008d7c:	0800803d 	.word	0x0800803d
 8008d80:	08008051 	.word	0x08008051
 8008d84:	08008029 	.word	0x08008029
 8008d88:	08008065 	.word	0x08008065
 8008d8c:	08008079 	.word	0x08008079
 8008d90:	080080b5 	.word	0x080080b5
 8008d94:	08008ee1 	.word	0x08008ee1
 8008d98:	08008ef5 	.word	0x08008ef5
 8008d9c:	08008f09 	.word	0x08008f09
 8008da0:	08008f1d 	.word	0x08008f1d
 8008da4:	08008f31 	.word	0x08008f31
 8008da8:	08008f45 	.word	0x08008f45
 8008dac:	08008f59 	.word	0x08008f59
 8008db0:	08008f6d 	.word	0x08008f6d

08008db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d101      	bne.n	8008dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008dc8:	2302      	movs	r3, #2
 8008dca:	e074      	b.n	8008eb6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a34      	ldr	r2, [pc, #208]	@ (8008ec4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d009      	beq.n	8008e0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a33      	ldr	r2, [pc, #204]	@ (8008ec8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d004      	beq.n	8008e0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a31      	ldr	r2, [pc, #196]	@ (8008ecc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d108      	bne.n	8008e1c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008e10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a21      	ldr	r2, [pc, #132]	@ (8008ec4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d022      	beq.n	8008e8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e4c:	d01d      	beq.n	8008e8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a1f      	ldr	r2, [pc, #124]	@ (8008ed0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d018      	beq.n	8008e8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ed4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d013      	beq.n	8008e8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a1c      	ldr	r2, [pc, #112]	@ (8008ed8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d00e      	beq.n	8008e8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a15      	ldr	r2, [pc, #84]	@ (8008ec8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d009      	beq.n	8008e8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a18      	ldr	r2, [pc, #96]	@ (8008edc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d004      	beq.n	8008e8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a11      	ldr	r2, [pc, #68]	@ (8008ecc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d10c      	bne.n	8008ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	68ba      	ldr	r2, [r7, #8]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3714      	adds	r7, #20
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	40012c00 	.word	0x40012c00
 8008ec8:	40013400 	.word	0x40013400
 8008ecc:	40015000 	.word	0x40015000
 8008ed0:	40000400 	.word	0x40000400
 8008ed4:	40000800 	.word	0x40000800
 8008ed8:	40000c00 	.word	0x40000c00
 8008edc:	40014000 	.word	0x40014000

08008ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008f38:	bf00      	nop
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008f4c:	bf00      	nop
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008f74:	bf00      	nop
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e050      	b.n	8009034 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d114      	bne.n	8008fc6 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fd45 	bl	8009a34 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d103      	bne.n	8008fbc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a21      	ldr	r2, [pc, #132]	@ (800903c <HAL_UART_Init+0xbc>)
 8008fb8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2224      	movs	r2, #36	@ 0x24
 8008fca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f022 0201 	bic.w	r2, r2, #1
 8008fdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d002      	beq.n	8008fec <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f001 f872 	bl	800a0d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fd73 	bl	8009ad8 <UART_SetConfig>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d101      	bne.n	8008ffc <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e01b      	b.n	8009034 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	685a      	ldr	r2, [r3, #4]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800900a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	689a      	ldr	r2, [r3, #8]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800901a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f042 0201 	orr.w	r2, r2, #1
 800902a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 f8f1 	bl	800a214 <UART_CheckIdleState>
 8009032:	4603      	mov	r3, r0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	08003755 	.word	0x08003755

08009040 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009040:	b480      	push	{r7}
 8009042:	b087      	sub	sp, #28
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	460b      	mov	r3, r1
 800904a:	607a      	str	r2, [r7, #4]
 800904c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d109      	bne.n	800906c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800905e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e09c      	b.n	80091a6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009072:	2b20      	cmp	r3, #32
 8009074:	d16c      	bne.n	8009150 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009076:	7afb      	ldrb	r3, [r7, #11]
 8009078:	2b0c      	cmp	r3, #12
 800907a:	d85e      	bhi.n	800913a <HAL_UART_RegisterCallback+0xfa>
 800907c:	a201      	add	r2, pc, #4	@ (adr r2, 8009084 <HAL_UART_RegisterCallback+0x44>)
 800907e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009082:	bf00      	nop
 8009084:	080090b9 	.word	0x080090b9
 8009088:	080090c3 	.word	0x080090c3
 800908c:	080090cd 	.word	0x080090cd
 8009090:	080090d7 	.word	0x080090d7
 8009094:	080090e1 	.word	0x080090e1
 8009098:	080090eb 	.word	0x080090eb
 800909c:	080090f5 	.word	0x080090f5
 80090a0:	080090ff 	.word	0x080090ff
 80090a4:	08009109 	.word	0x08009109
 80090a8:	08009113 	.word	0x08009113
 80090ac:	0800911d 	.word	0x0800911d
 80090b0:	08009127 	.word	0x08009127
 80090b4:	08009131 	.word	0x08009131
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80090c0:	e070      	b.n	80091a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80090ca:	e06b      	b.n	80091a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80090d4:	e066      	b.n	80091a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80090de:	e061      	b.n	80091a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80090e8:	e05c      	b.n	80091a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80090f2:	e057      	b.n	80091a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80090fc:	e052      	b.n	80091a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009106:	e04d      	b.n	80091a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009110:	e048      	b.n	80091a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800911a:	e043      	b.n	80091a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009124:	e03e      	b.n	80091a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800912e:	e039      	b.n	80091a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009138:	e034      	b.n	80091a4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009140:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	75fb      	strb	r3, [r7, #23]
        break;
 800914e:	e029      	b.n	80091a4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009156:	2b00      	cmp	r3, #0
 8009158:	d11a      	bne.n	8009190 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800915a:	7afb      	ldrb	r3, [r7, #11]
 800915c:	2b0b      	cmp	r3, #11
 800915e:	d002      	beq.n	8009166 <HAL_UART_RegisterCallback+0x126>
 8009160:	2b0c      	cmp	r3, #12
 8009162:	d005      	beq.n	8009170 <HAL_UART_RegisterCallback+0x130>
 8009164:	e009      	b.n	800917a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800916e:	e019      	b.n	80091a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009178:	e014      	b.n	80091a4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009180:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	75fb      	strb	r3, [r7, #23]
        break;
 800918e:	e009      	b.n	80091a4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009196:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	371c      	adds	r7, #28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop

080091b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b08a      	sub	sp, #40	@ 0x28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	4613      	mov	r3, r2
 80091c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091c8:	2b20      	cmp	r3, #32
 80091ca:	d137      	bne.n	800923c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d002      	beq.n	80091d8 <HAL_UART_Receive_DMA+0x24>
 80091d2:	88fb      	ldrh	r3, [r7, #6]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d101      	bne.n	80091dc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e030      	b.n	800923e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a18      	ldr	r2, [pc, #96]	@ (8009248 <HAL_UART_Receive_DMA+0x94>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d01f      	beq.n	800922c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d018      	beq.n	800922c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	e853 3f00 	ldrex	r3, [r3]
 8009206:	613b      	str	r3, [r7, #16]
   return(result);
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800920e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	461a      	mov	r2, r3
 8009216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009218:	623b      	str	r3, [r7, #32]
 800921a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921c:	69f9      	ldr	r1, [r7, #28]
 800921e:	6a3a      	ldr	r2, [r7, #32]
 8009220:	e841 2300 	strex	r3, r2, [r1]
 8009224:	61bb      	str	r3, [r7, #24]
   return(result);
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1e6      	bne.n	80091fa <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800922c:	88fb      	ldrh	r3, [r7, #6]
 800922e:	461a      	mov	r2, r3
 8009230:	68b9      	ldr	r1, [r7, #8]
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f001 f906 	bl	800a444 <UART_Start_Receive_DMA>
 8009238:	4603      	mov	r3, r0
 800923a:	e000      	b.n	800923e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800923c:	2302      	movs	r3, #2
  }
}
 800923e:	4618      	mov	r0, r3
 8009240:	3728      	adds	r7, #40	@ 0x28
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	40008000 	.word	0x40008000

0800924c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b0ba      	sub	sp, #232	@ 0xe8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	69db      	ldr	r3, [r3, #28]
 800925a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009272:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009276:	f640 030f 	movw	r3, #2063	@ 0x80f
 800927a:	4013      	ands	r3, r2
 800927c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009280:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009284:	2b00      	cmp	r3, #0
 8009286:	d11b      	bne.n	80092c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800928c:	f003 0320 	and.w	r3, r3, #32
 8009290:	2b00      	cmp	r3, #0
 8009292:	d015      	beq.n	80092c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009298:	f003 0320 	and.w	r3, r3, #32
 800929c:	2b00      	cmp	r3, #0
 800929e:	d105      	bne.n	80092ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80092a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d009      	beq.n	80092c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f000 82f3 	beq.w	800989c <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	4798      	blx	r3
      }
      return;
 80092be:	e2ed      	b.n	800989c <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80092c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f000 8129 	beq.w	800951c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80092ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80092ce:	4b90      	ldr	r3, [pc, #576]	@ (8009510 <HAL_UART_IRQHandler+0x2c4>)
 80092d0:	4013      	ands	r3, r2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d106      	bne.n	80092e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80092d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80092da:	4b8e      	ldr	r3, [pc, #568]	@ (8009514 <HAL_UART_IRQHandler+0x2c8>)
 80092dc:	4013      	ands	r3, r2
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 811c 	beq.w	800951c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092e8:	f003 0301 	and.w	r3, r3, #1
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d011      	beq.n	8009314 <HAL_UART_IRQHandler+0xc8>
 80092f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00b      	beq.n	8009314 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2201      	movs	r2, #1
 8009302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800930a:	f043 0201 	orr.w	r2, r3, #1
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009318:	f003 0302 	and.w	r3, r3, #2
 800931c:	2b00      	cmp	r3, #0
 800931e:	d011      	beq.n	8009344 <HAL_UART_IRQHandler+0xf8>
 8009320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009324:	f003 0301 	and.w	r3, r3, #1
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00b      	beq.n	8009344 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2202      	movs	r2, #2
 8009332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800933a:	f043 0204 	orr.w	r2, r3, #4
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009348:	f003 0304 	and.w	r3, r3, #4
 800934c:	2b00      	cmp	r3, #0
 800934e:	d011      	beq.n	8009374 <HAL_UART_IRQHandler+0x128>
 8009350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009354:	f003 0301 	and.w	r3, r3, #1
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00b      	beq.n	8009374 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2204      	movs	r2, #4
 8009362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800936a:	f043 0202 	orr.w	r2, r3, #2
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009378:	f003 0308 	and.w	r3, r3, #8
 800937c:	2b00      	cmp	r3, #0
 800937e:	d017      	beq.n	80093b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009384:	f003 0320 	and.w	r3, r3, #32
 8009388:	2b00      	cmp	r3, #0
 800938a:	d105      	bne.n	8009398 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800938c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009390:	4b5f      	ldr	r3, [pc, #380]	@ (8009510 <HAL_UART_IRQHandler+0x2c4>)
 8009392:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00b      	beq.n	80093b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2208      	movs	r2, #8
 800939e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093a6:	f043 0208 	orr.w	r2, r3, #8
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80093b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d012      	beq.n	80093e2 <HAL_UART_IRQHandler+0x196>
 80093bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00c      	beq.n	80093e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80093d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d8:	f043 0220 	orr.w	r2, r3, #32
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f000 8259 	beq.w	80098a0 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093f2:	f003 0320 	and.w	r3, r3, #32
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d013      	beq.n	8009422 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093fe:	f003 0320 	and.w	r3, r3, #32
 8009402:	2b00      	cmp	r3, #0
 8009404:	d105      	bne.n	8009412 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800940a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d007      	beq.n	8009422 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009416:	2b00      	cmp	r3, #0
 8009418:	d003      	beq.n	8009422 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009428:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009436:	2b40      	cmp	r3, #64	@ 0x40
 8009438:	d005      	beq.n	8009446 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800943a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800943e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009442:	2b00      	cmp	r3, #0
 8009444:	d058      	beq.n	80094f8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f001 f8e3 	bl	800a612 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009456:	2b40      	cmp	r3, #64	@ 0x40
 8009458:	d148      	bne.n	80094ec <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	3308      	adds	r3, #8
 8009460:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009464:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009468:	e853 3f00 	ldrex	r3, [r3]
 800946c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009470:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009478:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	3308      	adds	r3, #8
 8009482:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009486:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800948a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009492:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009496:	e841 2300 	strex	r3, r2, [r1]
 800949a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800949e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1d9      	bne.n	800945a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d017      	beq.n	80094e0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094b6:	4a18      	ldr	r2, [pc, #96]	@ (8009518 <HAL_UART_IRQHandler+0x2cc>)
 80094b8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7fc f94f 	bl	8005764 <HAL_DMA_Abort_IT>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d01f      	beq.n	800950c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80094da:	4610      	mov	r0, r2
 80094dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094de:	e015      	b.n	800950c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ea:	e00f      	b.n	800950c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094f6:	e009      	b.n	800950c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800950a:	e1c9      	b.n	80098a0 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800950c:	bf00      	nop
    return;
 800950e:	e1c7      	b.n	80098a0 <HAL_UART_IRQHandler+0x654>
 8009510:	10000001 	.word	0x10000001
 8009514:	04000120 	.word	0x04000120
 8009518:	0800a8dd 	.word	0x0800a8dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009520:	2b01      	cmp	r3, #1
 8009522:	f040 8157 	bne.w	80097d4 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800952a:	f003 0310 	and.w	r3, r3, #16
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 8150 	beq.w	80097d4 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009538:	f003 0310 	and.w	r3, r3, #16
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 8149 	beq.w	80097d4 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2210      	movs	r2, #16
 8009548:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009554:	2b40      	cmp	r3, #64	@ 0x40
 8009556:	f040 80bd 	bne.w	80096d4 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009568:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800956c:	2b00      	cmp	r3, #0
 800956e:	f000 8199 	beq.w	80098a4 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009578:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800957c:	429a      	cmp	r2, r3
 800957e:	f080 8191 	bcs.w	80098a4 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009588:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f003 0320 	and.w	r3, r3, #32
 800959a:	2b00      	cmp	r3, #0
 800959c:	f040 8087 	bne.w	80096ae <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80095ac:	e853 3f00 	ldrex	r3, [r3]
 80095b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80095b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	461a      	mov	r2, r3
 80095c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80095ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80095ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80095d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80095da:	e841 2300 	strex	r3, r2, [r1]
 80095de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80095e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1da      	bne.n	80095a0 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	3308      	adds	r3, #8
 80095f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80095f4:	e853 3f00 	ldrex	r3, [r3]
 80095f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80095fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095fc:	f023 0301 	bic.w	r3, r3, #1
 8009600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	3308      	adds	r3, #8
 800960a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800960e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009612:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009614:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009616:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009620:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e1      	bne.n	80095ea <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3308      	adds	r3, #8
 800962c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009630:	e853 3f00 	ldrex	r3, [r3]
 8009634:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800963c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3308      	adds	r3, #8
 8009646:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800964a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800964c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009650:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009652:	e841 2300 	strex	r3, r2, [r1]
 8009656:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009658:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1e3      	bne.n	8009626 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2220      	movs	r2, #32
 8009662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009672:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009674:	e853 3f00 	ldrex	r3, [r3]
 8009678:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800967a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800967c:	f023 0310 	bic.w	r3, r3, #16
 8009680:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	461a      	mov	r2, r3
 800968a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800968e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009690:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009692:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009694:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009696:	e841 2300 	strex	r3, r2, [r1]
 800969a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800969c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1e4      	bne.n	800966c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fc f802 	bl	80056b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2202      	movs	r2, #2
 80096b2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80096c6:	b292      	uxth	r2, r2
 80096c8:	1a8a      	subs	r2, r1, r2
 80096ca:	b292      	uxth	r2, r2
 80096cc:	4611      	mov	r1, r2
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80096d2:	e0e7      	b.n	80098a4 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f000 80d9 	beq.w	80098a8 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 80096f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 80d4 	beq.w	80098a8 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009708:	e853 3f00 	ldrex	r3, [r3]
 800970c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800970e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009710:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009714:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	461a      	mov	r2, r3
 800971e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009722:	647b      	str	r3, [r7, #68]	@ 0x44
 8009724:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009726:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009728:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800972a:	e841 2300 	strex	r3, r2, [r1]
 800972e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1e4      	bne.n	8009700 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	3308      	adds	r3, #8
 800973c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009740:	e853 3f00 	ldrex	r3, [r3]
 8009744:	623b      	str	r3, [r7, #32]
   return(result);
 8009746:	6a3b      	ldr	r3, [r7, #32]
 8009748:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800974c:	f023 0301 	bic.w	r3, r3, #1
 8009750:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3308      	adds	r3, #8
 800975a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800975e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009760:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009762:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009764:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009766:	e841 2300 	strex	r3, r2, [r1]
 800976a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800976c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1e1      	bne.n	8009736 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2220      	movs	r2, #32
 8009776:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	e853 3f00 	ldrex	r3, [r3]
 8009792:	60fb      	str	r3, [r7, #12]
   return(result);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f023 0310 	bic.w	r3, r3, #16
 800979a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	461a      	mov	r2, r3
 80097a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80097a8:	61fb      	str	r3, [r7, #28]
 80097aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ac:	69b9      	ldr	r1, [r7, #24]
 80097ae:	69fa      	ldr	r2, [r7, #28]
 80097b0:	e841 2300 	strex	r3, r2, [r1]
 80097b4:	617b      	str	r3, [r7, #20]
   return(result);
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1e4      	bne.n	8009786 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2202      	movs	r2, #2
 80097c0:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80097c8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80097cc:	4611      	mov	r1, r2
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097d2:	e069      	b.n	80098a8 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80097d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d010      	beq.n	8009802 <HAL_UART_IRQHandler+0x5b6>
 80097e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00a      	beq.n	8009802 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80097f4:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009800:	e055      	b.n	80098ae <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800980a:	2b00      	cmp	r3, #0
 800980c:	d014      	beq.n	8009838 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800980e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009816:	2b00      	cmp	r3, #0
 8009818:	d105      	bne.n	8009826 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800981a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800981e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d008      	beq.n	8009838 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800982a:	2b00      	cmp	r3, #0
 800982c:	d03e      	beq.n	80098ac <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	4798      	blx	r3
    }
    return;
 8009836:	e039      	b.n	80098ac <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800983c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009840:	2b00      	cmp	r3, #0
 8009842:	d009      	beq.n	8009858 <HAL_UART_IRQHandler+0x60c>
 8009844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800984c:	2b00      	cmp	r3, #0
 800984e:	d003      	beq.n	8009858 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f001 f85b 	bl	800a90c <UART_EndTransmit_IT>
    return;
 8009856:	e02a      	b.n	80098ae <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800985c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00b      	beq.n	800987c <HAL_UART_IRQHandler+0x630>
 8009864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009868:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d005      	beq.n	800987c <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800987a:	e018      	b.n	80098ae <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800987c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009880:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009884:	2b00      	cmp	r3, #0
 8009886:	d012      	beq.n	80098ae <HAL_UART_IRQHandler+0x662>
 8009888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800988c:	2b00      	cmp	r3, #0
 800988e:	da0e      	bge.n	80098ae <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800989a:	e008      	b.n	80098ae <HAL_UART_IRQHandler+0x662>
      return;
 800989c:	bf00      	nop
 800989e:	e006      	b.n	80098ae <HAL_UART_IRQHandler+0x662>
    return;
 80098a0:	bf00      	nop
 80098a2:	e004      	b.n	80098ae <HAL_UART_IRQHandler+0x662>
      return;
 80098a4:	bf00      	nop
 80098a6:	e002      	b.n	80098ae <HAL_UART_IRQHandler+0x662>
      return;
 80098a8:	bf00      	nop
 80098aa:	e000      	b.n	80098ae <HAL_UART_IRQHandler+0x662>
    return;
 80098ac:	bf00      	nop
  }
}
 80098ae:	37e8      	adds	r7, #232	@ 0xe8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80098f8:	bf00      	nop
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800990c:	bf00      	nop
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	460b      	mov	r3, r1
 800995e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a09      	ldr	r2, [pc, #36]	@ (80099a0 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d009      	beq.n	8009994 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	683a      	ldr	r2, [r7, #0]
 8009990:	430a      	orrs	r2, r1
 8009992:	615a      	str	r2, [r3, #20]
  }
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr
 80099a0:	40008000 	.word	0x40008000

080099a4 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a18      	ldr	r2, [pc, #96]	@ (8009a14 <HAL_UART_EnableReceiverTimeout+0x70>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d027      	beq.n	8009a06 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099bc:	2b20      	cmp	r3, #32
 80099be:	d120      	bne.n	8009a02 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d101      	bne.n	80099ce <HAL_UART_EnableReceiverTimeout+0x2a>
 80099ca:	2302      	movs	r3, #2
 80099cc:	e01c      	b.n	8009a08 <HAL_UART_EnableReceiverTimeout+0x64>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2224      	movs	r2, #36	@ 0x24
 80099da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80099ec:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2220      	movs	r2, #32
 80099f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 80099fe:	2300      	movs	r3, #0
 8009a00:	e002      	b.n	8009a08 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009a02:	2302      	movs	r3, #2
 8009a04:	e000      	b.n	8009a08 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
  }
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr
 8009a14:	40008000 	.word	0x40008000

08009a18 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
	...

08009a34 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8009aa8 <UART_InitCallbacksToDefault+0x74>)
 8009a40:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a19      	ldr	r2, [pc, #100]	@ (8009aac <UART_InitCallbacksToDefault+0x78>)
 8009a48:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a18      	ldr	r2, [pc, #96]	@ (8009ab0 <UART_InitCallbacksToDefault+0x7c>)
 8009a50:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a17      	ldr	r2, [pc, #92]	@ (8009ab4 <UART_InitCallbacksToDefault+0x80>)
 8009a58:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a16      	ldr	r2, [pc, #88]	@ (8009ab8 <UART_InitCallbacksToDefault+0x84>)
 8009a60:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a15      	ldr	r2, [pc, #84]	@ (8009abc <UART_InitCallbacksToDefault+0x88>)
 8009a68:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a14      	ldr	r2, [pc, #80]	@ (8009ac0 <UART_InitCallbacksToDefault+0x8c>)
 8009a70:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a13      	ldr	r2, [pc, #76]	@ (8009ac4 <UART_InitCallbacksToDefault+0x90>)
 8009a78:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a12      	ldr	r2, [pc, #72]	@ (8009ac8 <UART_InitCallbacksToDefault+0x94>)
 8009a80:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a11      	ldr	r2, [pc, #68]	@ (8009acc <UART_InitCallbacksToDefault+0x98>)
 8009a88:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a10      	ldr	r2, [pc, #64]	@ (8009ad0 <UART_InitCallbacksToDefault+0x9c>)
 8009a90:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a0f      	ldr	r2, [pc, #60]	@ (8009ad4 <UART_InitCallbacksToDefault+0xa0>)
 8009a98:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009a9c:	bf00      	nop
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	080098c9 	.word	0x080098c9
 8009aac:	080098b5 	.word	0x080098b5
 8009ab0:	080098f1 	.word	0x080098f1
 8009ab4:	080098dd 	.word	0x080098dd
 8009ab8:	08009905 	.word	0x08009905
 8009abc:	08009919 	.word	0x08009919
 8009ac0:	0800992d 	.word	0x0800992d
 8009ac4:	08009941 	.word	0x08009941
 8009ac8:	0800a967 	.word	0x0800a967
 8009acc:	0800a97b 	.word	0x0800a97b
 8009ad0:	0800a98f 	.word	0x0800a98f
 8009ad4:	08009955 	.word	0x08009955

08009ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009adc:	b08c      	sub	sp, #48	@ 0x30
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	689a      	ldr	r2, [r3, #8]
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	431a      	orrs	r2, r3
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	695b      	ldr	r3, [r3, #20]
 8009af6:	431a      	orrs	r2, r3
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	69db      	ldr	r3, [r3, #28]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	4baa      	ldr	r3, [pc, #680]	@ (8009db0 <UART_SetConfig+0x2d8>)
 8009b08:	4013      	ands	r3, r2
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	6812      	ldr	r2, [r2, #0]
 8009b0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b10:	430b      	orrs	r3, r1
 8009b12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	68da      	ldr	r2, [r3, #12]
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a9f      	ldr	r2, [pc, #636]	@ (8009db4 <UART_SetConfig+0x2dc>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d004      	beq.n	8009b44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b40:	4313      	orrs	r3, r2
 8009b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009b4e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	6812      	ldr	r2, [r2, #0]
 8009b56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b58:	430b      	orrs	r3, r1
 8009b5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b62:	f023 010f 	bic.w	r1, r3, #15
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	430a      	orrs	r2, r1
 8009b70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a90      	ldr	r2, [pc, #576]	@ (8009db8 <UART_SetConfig+0x2e0>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d125      	bne.n	8009bc8 <UART_SetConfig+0xf0>
 8009b7c:	4b8f      	ldr	r3, [pc, #572]	@ (8009dbc <UART_SetConfig+0x2e4>)
 8009b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b82:	f003 0303 	and.w	r3, r3, #3
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d81a      	bhi.n	8009bc0 <UART_SetConfig+0xe8>
 8009b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b90 <UART_SetConfig+0xb8>)
 8009b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b90:	08009ba1 	.word	0x08009ba1
 8009b94:	08009bb1 	.word	0x08009bb1
 8009b98:	08009ba9 	.word	0x08009ba9
 8009b9c:	08009bb9 	.word	0x08009bb9
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ba6:	e116      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009ba8:	2302      	movs	r3, #2
 8009baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bae:	e112      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009bb0:	2304      	movs	r3, #4
 8009bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bb6:	e10e      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009bb8:	2308      	movs	r3, #8
 8009bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bbe:	e10a      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009bc0:	2310      	movs	r3, #16
 8009bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bc6:	e106      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a7c      	ldr	r2, [pc, #496]	@ (8009dc0 <UART_SetConfig+0x2e8>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d138      	bne.n	8009c44 <UART_SetConfig+0x16c>
 8009bd2:	4b7a      	ldr	r3, [pc, #488]	@ (8009dbc <UART_SetConfig+0x2e4>)
 8009bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bd8:	f003 030c 	and.w	r3, r3, #12
 8009bdc:	2b0c      	cmp	r3, #12
 8009bde:	d82d      	bhi.n	8009c3c <UART_SetConfig+0x164>
 8009be0:	a201      	add	r2, pc, #4	@ (adr r2, 8009be8 <UART_SetConfig+0x110>)
 8009be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be6:	bf00      	nop
 8009be8:	08009c1d 	.word	0x08009c1d
 8009bec:	08009c3d 	.word	0x08009c3d
 8009bf0:	08009c3d 	.word	0x08009c3d
 8009bf4:	08009c3d 	.word	0x08009c3d
 8009bf8:	08009c2d 	.word	0x08009c2d
 8009bfc:	08009c3d 	.word	0x08009c3d
 8009c00:	08009c3d 	.word	0x08009c3d
 8009c04:	08009c3d 	.word	0x08009c3d
 8009c08:	08009c25 	.word	0x08009c25
 8009c0c:	08009c3d 	.word	0x08009c3d
 8009c10:	08009c3d 	.word	0x08009c3d
 8009c14:	08009c3d 	.word	0x08009c3d
 8009c18:	08009c35 	.word	0x08009c35
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c22:	e0d8      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009c24:	2302      	movs	r3, #2
 8009c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c2a:	e0d4      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009c2c:	2304      	movs	r3, #4
 8009c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c32:	e0d0      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009c34:	2308      	movs	r3, #8
 8009c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c3a:	e0cc      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009c3c:	2310      	movs	r3, #16
 8009c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c42:	e0c8      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a5e      	ldr	r2, [pc, #376]	@ (8009dc4 <UART_SetConfig+0x2ec>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d125      	bne.n	8009c9a <UART_SetConfig+0x1c2>
 8009c4e:	4b5b      	ldr	r3, [pc, #364]	@ (8009dbc <UART_SetConfig+0x2e4>)
 8009c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009c58:	2b30      	cmp	r3, #48	@ 0x30
 8009c5a:	d016      	beq.n	8009c8a <UART_SetConfig+0x1b2>
 8009c5c:	2b30      	cmp	r3, #48	@ 0x30
 8009c5e:	d818      	bhi.n	8009c92 <UART_SetConfig+0x1ba>
 8009c60:	2b20      	cmp	r3, #32
 8009c62:	d00a      	beq.n	8009c7a <UART_SetConfig+0x1a2>
 8009c64:	2b20      	cmp	r3, #32
 8009c66:	d814      	bhi.n	8009c92 <UART_SetConfig+0x1ba>
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <UART_SetConfig+0x19a>
 8009c6c:	2b10      	cmp	r3, #16
 8009c6e:	d008      	beq.n	8009c82 <UART_SetConfig+0x1aa>
 8009c70:	e00f      	b.n	8009c92 <UART_SetConfig+0x1ba>
 8009c72:	2300      	movs	r3, #0
 8009c74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c78:	e0ad      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009c7a:	2302      	movs	r3, #2
 8009c7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c80:	e0a9      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009c82:	2304      	movs	r3, #4
 8009c84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c88:	e0a5      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009c8a:	2308      	movs	r3, #8
 8009c8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c90:	e0a1      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009c92:	2310      	movs	r3, #16
 8009c94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c98:	e09d      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a4a      	ldr	r2, [pc, #296]	@ (8009dc8 <UART_SetConfig+0x2f0>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d125      	bne.n	8009cf0 <UART_SetConfig+0x218>
 8009ca4:	4b45      	ldr	r3, [pc, #276]	@ (8009dbc <UART_SetConfig+0x2e4>)
 8009ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009caa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009cae:	2bc0      	cmp	r3, #192	@ 0xc0
 8009cb0:	d016      	beq.n	8009ce0 <UART_SetConfig+0x208>
 8009cb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009cb4:	d818      	bhi.n	8009ce8 <UART_SetConfig+0x210>
 8009cb6:	2b80      	cmp	r3, #128	@ 0x80
 8009cb8:	d00a      	beq.n	8009cd0 <UART_SetConfig+0x1f8>
 8009cba:	2b80      	cmp	r3, #128	@ 0x80
 8009cbc:	d814      	bhi.n	8009ce8 <UART_SetConfig+0x210>
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d002      	beq.n	8009cc8 <UART_SetConfig+0x1f0>
 8009cc2:	2b40      	cmp	r3, #64	@ 0x40
 8009cc4:	d008      	beq.n	8009cd8 <UART_SetConfig+0x200>
 8009cc6:	e00f      	b.n	8009ce8 <UART_SetConfig+0x210>
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cce:	e082      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cd6:	e07e      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009cd8:	2304      	movs	r3, #4
 8009cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cde:	e07a      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009ce0:	2308      	movs	r3, #8
 8009ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ce6:	e076      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009ce8:	2310      	movs	r3, #16
 8009cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cee:	e072      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a35      	ldr	r2, [pc, #212]	@ (8009dcc <UART_SetConfig+0x2f4>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d12a      	bne.n	8009d50 <UART_SetConfig+0x278>
 8009cfa:	4b30      	ldr	r3, [pc, #192]	@ (8009dbc <UART_SetConfig+0x2e4>)
 8009cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d08:	d01a      	beq.n	8009d40 <UART_SetConfig+0x268>
 8009d0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d0e:	d81b      	bhi.n	8009d48 <UART_SetConfig+0x270>
 8009d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d14:	d00c      	beq.n	8009d30 <UART_SetConfig+0x258>
 8009d16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d1a:	d815      	bhi.n	8009d48 <UART_SetConfig+0x270>
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d003      	beq.n	8009d28 <UART_SetConfig+0x250>
 8009d20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d24:	d008      	beq.n	8009d38 <UART_SetConfig+0x260>
 8009d26:	e00f      	b.n	8009d48 <UART_SetConfig+0x270>
 8009d28:	2300      	movs	r3, #0
 8009d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d2e:	e052      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009d30:	2302      	movs	r3, #2
 8009d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d36:	e04e      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009d38:	2304      	movs	r3, #4
 8009d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d3e:	e04a      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009d40:	2308      	movs	r3, #8
 8009d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d46:	e046      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009d48:	2310      	movs	r3, #16
 8009d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d4e:	e042      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a17      	ldr	r2, [pc, #92]	@ (8009db4 <UART_SetConfig+0x2dc>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d13a      	bne.n	8009dd0 <UART_SetConfig+0x2f8>
 8009d5a:	4b18      	ldr	r3, [pc, #96]	@ (8009dbc <UART_SetConfig+0x2e4>)
 8009d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009d64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d68:	d01a      	beq.n	8009da0 <UART_SetConfig+0x2c8>
 8009d6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d6e:	d81b      	bhi.n	8009da8 <UART_SetConfig+0x2d0>
 8009d70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d74:	d00c      	beq.n	8009d90 <UART_SetConfig+0x2b8>
 8009d76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d7a:	d815      	bhi.n	8009da8 <UART_SetConfig+0x2d0>
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d003      	beq.n	8009d88 <UART_SetConfig+0x2b0>
 8009d80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d84:	d008      	beq.n	8009d98 <UART_SetConfig+0x2c0>
 8009d86:	e00f      	b.n	8009da8 <UART_SetConfig+0x2d0>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d8e:	e022      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009d90:	2302      	movs	r3, #2
 8009d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d96:	e01e      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009d98:	2304      	movs	r3, #4
 8009d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d9e:	e01a      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009da0:	2308      	movs	r3, #8
 8009da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009da6:	e016      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009da8:	2310      	movs	r3, #16
 8009daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dae:	e012      	b.n	8009dd6 <UART_SetConfig+0x2fe>
 8009db0:	cfff69f3 	.word	0xcfff69f3
 8009db4:	40008000 	.word	0x40008000
 8009db8:	40013800 	.word	0x40013800
 8009dbc:	40021000 	.word	0x40021000
 8009dc0:	40004400 	.word	0x40004400
 8009dc4:	40004800 	.word	0x40004800
 8009dc8:	40004c00 	.word	0x40004c00
 8009dcc:	40005000 	.word	0x40005000
 8009dd0:	2310      	movs	r3, #16
 8009dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4aae      	ldr	r2, [pc, #696]	@ (800a094 <UART_SetConfig+0x5bc>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	f040 8097 	bne.w	8009f10 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009de2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009de6:	2b08      	cmp	r3, #8
 8009de8:	d823      	bhi.n	8009e32 <UART_SetConfig+0x35a>
 8009dea:	a201      	add	r2, pc, #4	@ (adr r2, 8009df0 <UART_SetConfig+0x318>)
 8009dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df0:	08009e15 	.word	0x08009e15
 8009df4:	08009e33 	.word	0x08009e33
 8009df8:	08009e1d 	.word	0x08009e1d
 8009dfc:	08009e33 	.word	0x08009e33
 8009e00:	08009e23 	.word	0x08009e23
 8009e04:	08009e33 	.word	0x08009e33
 8009e08:	08009e33 	.word	0x08009e33
 8009e0c:	08009e33 	.word	0x08009e33
 8009e10:	08009e2b 	.word	0x08009e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e14:	f7fc fd96 	bl	8006944 <HAL_RCC_GetPCLK1Freq>
 8009e18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e1a:	e010      	b.n	8009e3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e1c:	4b9e      	ldr	r3, [pc, #632]	@ (800a098 <UART_SetConfig+0x5c0>)
 8009e1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e20:	e00d      	b.n	8009e3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e22:	f7fc fd21 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8009e26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e28:	e009      	b.n	8009e3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e30:	e005      	b.n	8009e3e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009e32:	2300      	movs	r3, #0
 8009e34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009e3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f000 8130 	beq.w	800a0a6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e4a:	4a94      	ldr	r2, [pc, #592]	@ (800a09c <UART_SetConfig+0x5c4>)
 8009e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e50:	461a      	mov	r2, r3
 8009e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e54:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e58:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	685a      	ldr	r2, [r3, #4]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	005b      	lsls	r3, r3, #1
 8009e62:	4413      	add	r3, r2
 8009e64:	69ba      	ldr	r2, [r7, #24]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d305      	bcc.n	8009e76 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e70:	69ba      	ldr	r2, [r7, #24]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d903      	bls.n	8009e7e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009e7c:	e113      	b.n	800a0a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e80:	2200      	movs	r2, #0
 8009e82:	60bb      	str	r3, [r7, #8]
 8009e84:	60fa      	str	r2, [r7, #12]
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e8a:	4a84      	ldr	r2, [pc, #528]	@ (800a09c <UART_SetConfig+0x5c4>)
 8009e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	2200      	movs	r2, #0
 8009e94:	603b      	str	r3, [r7, #0]
 8009e96:	607a      	str	r2, [r7, #4]
 8009e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ea0:	f7f6 ffa4 	bl	8000dec <__aeabi_uldivmod>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	4619      	mov	r1, r3
 8009eac:	f04f 0200 	mov.w	r2, #0
 8009eb0:	f04f 0300 	mov.w	r3, #0
 8009eb4:	020b      	lsls	r3, r1, #8
 8009eb6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009eba:	0202      	lsls	r2, r0, #8
 8009ebc:	6979      	ldr	r1, [r7, #20]
 8009ebe:	6849      	ldr	r1, [r1, #4]
 8009ec0:	0849      	lsrs	r1, r1, #1
 8009ec2:	2000      	movs	r0, #0
 8009ec4:	460c      	mov	r4, r1
 8009ec6:	4605      	mov	r5, r0
 8009ec8:	eb12 0804 	adds.w	r8, r2, r4
 8009ecc:	eb43 0905 	adc.w	r9, r3, r5
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	469a      	mov	sl, r3
 8009ed8:	4693      	mov	fp, r2
 8009eda:	4652      	mov	r2, sl
 8009edc:	465b      	mov	r3, fp
 8009ede:	4640      	mov	r0, r8
 8009ee0:	4649      	mov	r1, r9
 8009ee2:	f7f6 ff83 	bl	8000dec <__aeabi_uldivmod>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	460b      	mov	r3, r1
 8009eea:	4613      	mov	r3, r2
 8009eec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009eee:	6a3b      	ldr	r3, [r7, #32]
 8009ef0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ef4:	d308      	bcc.n	8009f08 <UART_SetConfig+0x430>
 8009ef6:	6a3b      	ldr	r3, [r7, #32]
 8009ef8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009efc:	d204      	bcs.n	8009f08 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	6a3a      	ldr	r2, [r7, #32]
 8009f04:	60da      	str	r2, [r3, #12]
 8009f06:	e0ce      	b.n	800a0a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009f0e:	e0ca      	b.n	800a0a6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	69db      	ldr	r3, [r3, #28]
 8009f14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f18:	d166      	bne.n	8009fe8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009f1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009f1e:	2b08      	cmp	r3, #8
 8009f20:	d827      	bhi.n	8009f72 <UART_SetConfig+0x49a>
 8009f22:	a201      	add	r2, pc, #4	@ (adr r2, 8009f28 <UART_SetConfig+0x450>)
 8009f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f28:	08009f4d 	.word	0x08009f4d
 8009f2c:	08009f55 	.word	0x08009f55
 8009f30:	08009f5d 	.word	0x08009f5d
 8009f34:	08009f73 	.word	0x08009f73
 8009f38:	08009f63 	.word	0x08009f63
 8009f3c:	08009f73 	.word	0x08009f73
 8009f40:	08009f73 	.word	0x08009f73
 8009f44:	08009f73 	.word	0x08009f73
 8009f48:	08009f6b 	.word	0x08009f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f4c:	f7fc fcfa 	bl	8006944 <HAL_RCC_GetPCLK1Freq>
 8009f50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f52:	e014      	b.n	8009f7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f54:	f7fc fd0c 	bl	8006970 <HAL_RCC_GetPCLK2Freq>
 8009f58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f5a:	e010      	b.n	8009f7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f5c:	4b4e      	ldr	r3, [pc, #312]	@ (800a098 <UART_SetConfig+0x5c0>)
 8009f5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f60:	e00d      	b.n	8009f7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f62:	f7fc fc81 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8009f66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f68:	e009      	b.n	8009f7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f70:	e005      	b.n	8009f7e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009f72:	2300      	movs	r3, #0
 8009f74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009f7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 8090 	beq.w	800a0a6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f8a:	4a44      	ldr	r2, [pc, #272]	@ (800a09c <UART_SetConfig+0x5c4>)
 8009f8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f90:	461a      	mov	r2, r3
 8009f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f94:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f98:	005a      	lsls	r2, r3, #1
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	085b      	lsrs	r3, r3, #1
 8009fa0:	441a      	add	r2, r3
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009faa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	2b0f      	cmp	r3, #15
 8009fb0:	d916      	bls.n	8009fe0 <UART_SetConfig+0x508>
 8009fb2:	6a3b      	ldr	r3, [r7, #32]
 8009fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fb8:	d212      	bcs.n	8009fe0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	f023 030f 	bic.w	r3, r3, #15
 8009fc2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
 8009fc6:	085b      	lsrs	r3, r3, #1
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	f003 0307 	and.w	r3, r3, #7
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	8bfb      	ldrh	r3, [r7, #30]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	8bfa      	ldrh	r2, [r7, #30]
 8009fdc:	60da      	str	r2, [r3, #12]
 8009fde:	e062      	b.n	800a0a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009fe6:	e05e      	b.n	800a0a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fe8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009fec:	2b08      	cmp	r3, #8
 8009fee:	d828      	bhi.n	800a042 <UART_SetConfig+0x56a>
 8009ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8009ff8 <UART_SetConfig+0x520>)
 8009ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff6:	bf00      	nop
 8009ff8:	0800a01d 	.word	0x0800a01d
 8009ffc:	0800a025 	.word	0x0800a025
 800a000:	0800a02d 	.word	0x0800a02d
 800a004:	0800a043 	.word	0x0800a043
 800a008:	0800a033 	.word	0x0800a033
 800a00c:	0800a043 	.word	0x0800a043
 800a010:	0800a043 	.word	0x0800a043
 800a014:	0800a043 	.word	0x0800a043
 800a018:	0800a03b 	.word	0x0800a03b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a01c:	f7fc fc92 	bl	8006944 <HAL_RCC_GetPCLK1Freq>
 800a020:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a022:	e014      	b.n	800a04e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a024:	f7fc fca4 	bl	8006970 <HAL_RCC_GetPCLK2Freq>
 800a028:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a02a:	e010      	b.n	800a04e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a02c:	4b1a      	ldr	r3, [pc, #104]	@ (800a098 <UART_SetConfig+0x5c0>)
 800a02e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a030:	e00d      	b.n	800a04e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a032:	f7fc fc19 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 800a036:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a038:	e009      	b.n	800a04e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a03a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a03e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a040:	e005      	b.n	800a04e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a042:	2300      	movs	r3, #0
 800a044:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a04c:	bf00      	nop
    }

    if (pclk != 0U)
 800a04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a050:	2b00      	cmp	r3, #0
 800a052:	d028      	beq.n	800a0a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a058:	4a10      	ldr	r2, [pc, #64]	@ (800a09c <UART_SetConfig+0x5c4>)
 800a05a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a05e:	461a      	mov	r2, r3
 800a060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a062:	fbb3 f2f2 	udiv	r2, r3, r2
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	085b      	lsrs	r3, r3, #1
 800a06c:	441a      	add	r2, r3
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	fbb2 f3f3 	udiv	r3, r2, r3
 800a076:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a078:	6a3b      	ldr	r3, [r7, #32]
 800a07a:	2b0f      	cmp	r3, #15
 800a07c:	d910      	bls.n	800a0a0 <UART_SetConfig+0x5c8>
 800a07e:	6a3b      	ldr	r3, [r7, #32]
 800a080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a084:	d20c      	bcs.n	800a0a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a086:	6a3b      	ldr	r3, [r7, #32]
 800a088:	b29a      	uxth	r2, r3
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	60da      	str	r2, [r3, #12]
 800a090:	e009      	b.n	800a0a6 <UART_SetConfig+0x5ce>
 800a092:	bf00      	nop
 800a094:	40008000 	.word	0x40008000
 800a098:	00f42400 	.word	0x00f42400
 800a09c:	0800aeb4 	.word	0x0800aeb4
      }
      else
      {
        ret = HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a0c2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3730      	adds	r7, #48	@ 0x30
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a0d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0dc:	f003 0308 	and.w	r3, r3, #8
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d00a      	beq.n	800a0fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0fe:	f003 0301 	and.w	r3, r3, #1
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00a      	beq.n	800a11c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	430a      	orrs	r2, r1
 800a11a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a120:	f003 0302 	and.w	r3, r3, #2
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00a      	beq.n	800a13e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	430a      	orrs	r2, r1
 800a13c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a142:	f003 0304 	and.w	r3, r3, #4
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00a      	beq.n	800a160 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	430a      	orrs	r2, r1
 800a15e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a164:	f003 0310 	and.w	r3, r3, #16
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d00a      	beq.n	800a182 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	430a      	orrs	r2, r1
 800a180:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a186:	f003 0320 	and.w	r3, r3, #32
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00a      	beq.n	800a1a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	430a      	orrs	r2, r1
 800a1a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d01a      	beq.n	800a1e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	430a      	orrs	r2, r1
 800a1c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1ce:	d10a      	bne.n	800a1e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	430a      	orrs	r2, r1
 800a1e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00a      	beq.n	800a208 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	430a      	orrs	r2, r1
 800a206:	605a      	str	r2, [r3, #4]
  }
}
 800a208:	bf00      	nop
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b098      	sub	sp, #96	@ 0x60
 800a218:	af02      	add	r7, sp, #8
 800a21a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a224:	f7f9 fc80 	bl	8003b28 <HAL_GetTick>
 800a228:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f003 0308 	and.w	r3, r3, #8
 800a234:	2b08      	cmp	r3, #8
 800a236:	d12f      	bne.n	800a298 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a238:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a240:	2200      	movs	r2, #0
 800a242:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f88e 	bl	800a368 <UART_WaitOnFlagUntilTimeout>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d022      	beq.n	800a298 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25a:	e853 3f00 	ldrex	r3, [r3]
 800a25e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a262:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a266:	653b      	str	r3, [r7, #80]	@ 0x50
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	461a      	mov	r2, r3
 800a26e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a270:	647b      	str	r3, [r7, #68]	@ 0x44
 800a272:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a274:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a276:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a278:	e841 2300 	strex	r3, r2, [r1]
 800a27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a27e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1e6      	bne.n	800a252 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2220      	movs	r2, #32
 800a288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a294:	2303      	movs	r3, #3
 800a296:	e063      	b.n	800a360 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0304 	and.w	r3, r3, #4
 800a2a2:	2b04      	cmp	r3, #4
 800a2a4:	d149      	bne.n	800a33a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 f857 	bl	800a368 <UART_WaitOnFlagUntilTimeout>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d03c      	beq.n	800a33a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c8:	e853 3f00 	ldrex	r3, [r3]
 800a2cc:	623b      	str	r3, [r7, #32]
   return(result);
 800a2ce:	6a3b      	ldr	r3, [r7, #32]
 800a2d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2de:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2e6:	e841 2300 	strex	r3, r2, [r1]
 800a2ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1e6      	bne.n	800a2c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3308      	adds	r3, #8
 800a2f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	e853 3f00 	ldrex	r3, [r3]
 800a300:	60fb      	str	r3, [r7, #12]
   return(result);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f023 0301 	bic.w	r3, r3, #1
 800a308:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	3308      	adds	r3, #8
 800a310:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a312:	61fa      	str	r2, [r7, #28]
 800a314:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a316:	69b9      	ldr	r1, [r7, #24]
 800a318:	69fa      	ldr	r2, [r7, #28]
 800a31a:	e841 2300 	strex	r3, r2, [r1]
 800a31e:	617b      	str	r3, [r7, #20]
   return(result);
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1e5      	bne.n	800a2f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2220      	movs	r2, #32
 800a32a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a336:	2303      	movs	r3, #3
 800a338:	e012      	b.n	800a360 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2220      	movs	r2, #32
 800a33e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2220      	movs	r2, #32
 800a346:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3758      	adds	r7, #88	@ 0x58
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	603b      	str	r3, [r7, #0]
 800a374:	4613      	mov	r3, r2
 800a376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a378:	e04f      	b.n	800a41a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a380:	d04b      	beq.n	800a41a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a382:	f7f9 fbd1 	bl	8003b28 <HAL_GetTick>
 800a386:	4602      	mov	r2, r0
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	69ba      	ldr	r2, [r7, #24]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d302      	bcc.n	800a398 <UART_WaitOnFlagUntilTimeout+0x30>
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d101      	bne.n	800a39c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a398:	2303      	movs	r3, #3
 800a39a:	e04e      	b.n	800a43a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 0304 	and.w	r3, r3, #4
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d037      	beq.n	800a41a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	2b80      	cmp	r3, #128	@ 0x80
 800a3ae:	d034      	beq.n	800a41a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	2b40      	cmp	r3, #64	@ 0x40
 800a3b4:	d031      	beq.n	800a41a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	69db      	ldr	r3, [r3, #28]
 800a3bc:	f003 0308 	and.w	r3, r3, #8
 800a3c0:	2b08      	cmp	r3, #8
 800a3c2:	d110      	bne.n	800a3e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2208      	movs	r2, #8
 800a3ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f000 f920 	bl	800a612 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2208      	movs	r2, #8
 800a3d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e029      	b.n	800a43a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	69db      	ldr	r3, [r3, #28]
 800a3ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3f4:	d111      	bne.n	800a41a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a3fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f000 f906 	bl	800a612 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2220      	movs	r2, #32
 800a40a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2200      	movs	r2, #0
 800a412:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a416:	2303      	movs	r3, #3
 800a418:	e00f      	b.n	800a43a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	69da      	ldr	r2, [r3, #28]
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	4013      	ands	r3, r2
 800a424:	68ba      	ldr	r2, [r7, #8]
 800a426:	429a      	cmp	r2, r3
 800a428:	bf0c      	ite	eq
 800a42a:	2301      	moveq	r3, #1
 800a42c:	2300      	movne	r3, #0
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	461a      	mov	r2, r3
 800a432:	79fb      	ldrb	r3, [r7, #7]
 800a434:	429a      	cmp	r2, r3
 800a436:	d0a0      	beq.n	800a37a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a438:	2300      	movs	r3, #0
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
	...

0800a444 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b096      	sub	sp, #88	@ 0x58
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	4613      	mov	r3, r2
 800a450:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	88fa      	ldrh	r2, [r7, #6]
 800a45c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2222      	movs	r2, #34	@ 0x22
 800a46c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a476:	2b00      	cmp	r3, #0
 800a478:	d02d      	beq.n	800a4d6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a480:	4a40      	ldr	r2, [pc, #256]	@ (800a584 <UART_Start_Receive_DMA+0x140>)
 800a482:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a48a:	4a3f      	ldr	r2, [pc, #252]	@ (800a588 <UART_Start_Receive_DMA+0x144>)
 800a48c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a494:	4a3d      	ldr	r2, [pc, #244]	@ (800a58c <UART_Start_Receive_DMA+0x148>)
 800a496:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a49e:	2200      	movs	r2, #0
 800a4a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	3324      	adds	r3, #36	@ 0x24
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	88fb      	ldrh	r3, [r7, #6]
 800a4b8:	f7fb f880 	bl	80055bc <HAL_DMA_Start_IT>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d009      	beq.n	800a4d6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2210      	movs	r2, #16
 800a4c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2220      	movs	r2, #32
 800a4ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e051      	b.n	800a57a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	691b      	ldr	r3, [r3, #16]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d018      	beq.n	800a510 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4e6:	e853 3f00 	ldrex	r3, [r3]
 800a4ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4f2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4fe:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a500:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a502:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a504:	e841 2300 	strex	r3, r2, [r1]
 800a508:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a50a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d1e6      	bne.n	800a4de <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3308      	adds	r3, #8
 800a516:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a51a:	e853 3f00 	ldrex	r3, [r3]
 800a51e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a522:	f043 0301 	orr.w	r3, r3, #1
 800a526:	653b      	str	r3, [r7, #80]	@ 0x50
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	3308      	adds	r3, #8
 800a52e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a530:	637a      	str	r2, [r7, #52]	@ 0x34
 800a532:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a534:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a536:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a538:	e841 2300 	strex	r3, r2, [r1]
 800a53c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1e5      	bne.n	800a510 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	3308      	adds	r3, #8
 800a54a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	e853 3f00 	ldrex	r3, [r3]
 800a552:	613b      	str	r3, [r7, #16]
   return(result);
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a55a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	3308      	adds	r3, #8
 800a562:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a564:	623a      	str	r2, [r7, #32]
 800a566:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a568:	69f9      	ldr	r1, [r7, #28]
 800a56a:	6a3a      	ldr	r2, [r7, #32]
 800a56c:	e841 2300 	strex	r3, r2, [r1]
 800a570:	61bb      	str	r3, [r7, #24]
   return(result);
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1e5      	bne.n	800a544 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3758      	adds	r7, #88	@ 0x58
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	0800a6df 	.word	0x0800a6df
 800a588:	0800a813 	.word	0x0800a813
 800a58c:	0800a859 	.word	0x0800a859

0800a590 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a590:	b480      	push	{r7}
 800a592:	b08f      	sub	sp, #60	@ 0x3c
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59e:	6a3b      	ldr	r3, [r7, #32]
 800a5a0:	e853 3f00 	ldrex	r3, [r3]
 800a5a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a5ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5b8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a5bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5be:	e841 2300 	strex	r3, r2, [r1]
 800a5c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1e6      	bne.n	800a598 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	3308      	adds	r3, #8
 800a5d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	e853 3f00 	ldrex	r3, [r3]
 800a5d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a5e0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	3308      	adds	r3, #8
 800a5e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5ea:	61ba      	str	r2, [r7, #24]
 800a5ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ee:	6979      	ldr	r1, [r7, #20]
 800a5f0:	69ba      	ldr	r2, [r7, #24]
 800a5f2:	e841 2300 	strex	r3, r2, [r1]
 800a5f6:	613b      	str	r3, [r7, #16]
   return(result);
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1e5      	bne.n	800a5ca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2220      	movs	r2, #32
 800a602:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a606:	bf00      	nop
 800a608:	373c      	adds	r7, #60	@ 0x3c
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr

0800a612 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a612:	b480      	push	{r7}
 800a614:	b095      	sub	sp, #84	@ 0x54
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a622:	e853 3f00 	ldrex	r3, [r3]
 800a626:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a62e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	461a      	mov	r2, r3
 800a636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a638:	643b      	str	r3, [r7, #64]	@ 0x40
 800a63a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a63e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a640:	e841 2300 	strex	r3, r2, [r1]
 800a644:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1e6      	bne.n	800a61a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	3308      	adds	r3, #8
 800a652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	e853 3f00 	ldrex	r3, [r3]
 800a65a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a662:	f023 0301 	bic.w	r3, r3, #1
 800a666:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3308      	adds	r3, #8
 800a66e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a670:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a672:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a674:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a678:	e841 2300 	strex	r3, r2, [r1]
 800a67c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1e3      	bne.n	800a64c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d118      	bne.n	800a6be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	e853 3f00 	ldrex	r3, [r3]
 800a698:	60bb      	str	r3, [r7, #8]
   return(result);
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	f023 0310 	bic.w	r3, r3, #16
 800a6a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6aa:	61bb      	str	r3, [r7, #24]
 800a6ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ae:	6979      	ldr	r1, [r7, #20]
 800a6b0:	69ba      	ldr	r2, [r7, #24]
 800a6b2:	e841 2300 	strex	r3, r2, [r1]
 800a6b6:	613b      	str	r3, [r7, #16]
   return(result);
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1e6      	bne.n	800a68c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2220      	movs	r2, #32
 800a6c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a6d2:	bf00      	nop
 800a6d4:	3754      	adds	r7, #84	@ 0x54
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b09c      	sub	sp, #112	@ 0x70
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ea:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f003 0320 	and.w	r3, r3, #32
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d171      	bne.n	800a7de <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a6fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a70a:	e853 3f00 	ldrex	r3, [r3]
 800a70e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a712:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a716:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a718:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	461a      	mov	r2, r3
 800a71e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a720:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a722:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a724:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a726:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a728:	e841 2300 	strex	r3, r2, [r1]
 800a72c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a72e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a730:	2b00      	cmp	r3, #0
 800a732:	d1e6      	bne.n	800a702 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	3308      	adds	r3, #8
 800a73a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a73e:	e853 3f00 	ldrex	r3, [r3]
 800a742:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a746:	f023 0301 	bic.w	r3, r3, #1
 800a74a:	667b      	str	r3, [r7, #100]	@ 0x64
 800a74c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	3308      	adds	r3, #8
 800a752:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a754:	647a      	str	r2, [r7, #68]	@ 0x44
 800a756:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a758:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a75a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a75c:	e841 2300 	strex	r3, r2, [r1]
 800a760:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a764:	2b00      	cmp	r3, #0
 800a766:	d1e5      	bne.n	800a734 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a768:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	3308      	adds	r3, #8
 800a76e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a772:	e853 3f00 	ldrex	r3, [r3]
 800a776:	623b      	str	r3, [r7, #32]
   return(result);
 800a778:	6a3b      	ldr	r3, [r7, #32]
 800a77a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a77e:	663b      	str	r3, [r7, #96]	@ 0x60
 800a780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	3308      	adds	r3, #8
 800a786:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a788:	633a      	str	r2, [r7, #48]	@ 0x30
 800a78a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a78e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a790:	e841 2300 	strex	r3, r2, [r1]
 800a794:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1e5      	bne.n	800a768 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a79c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a79e:	2220      	movs	r2, #32
 800a7a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d118      	bne.n	800a7de <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	e853 3f00 	ldrex	r3, [r3]
 800a7b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f023 0310 	bic.w	r3, r3, #16
 800a7c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a7c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7ca:	61fb      	str	r3, [r7, #28]
 800a7cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ce:	69b9      	ldr	r1, [r7, #24]
 800a7d0:	69fa      	ldr	r2, [r7, #28]
 800a7d2:	e841 2300 	strex	r3, r2, [r1]
 800a7d6:	617b      	str	r3, [r7, #20]
   return(result);
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d1e6      	bne.n	800a7ac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d109      	bne.n	800a800 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a7ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a7f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a7f4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a7fc:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7fe:	e004      	b.n	800a80a <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800a800:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a802:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a806:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a808:	4798      	blx	r3
}
 800a80a:	bf00      	nop
 800a80c:	3770      	adds	r7, #112	@ 0x70
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b084      	sub	sp, #16
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a81e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2201      	movs	r2, #1
 800a824:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d10b      	bne.n	800a846 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a83a:	0852      	lsrs	r2, r2, #1
 800a83c:	b292      	uxth	r2, r2
 800a83e:	4611      	mov	r1, r2
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a844:	e004      	b.n	800a850 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	4798      	blx	r3
}
 800a850:	bf00      	nop
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b086      	sub	sp, #24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a864:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a86c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a874:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a880:	2b80      	cmp	r3, #128	@ 0x80
 800a882:	d109      	bne.n	800a898 <UART_DMAError+0x40>
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	2b21      	cmp	r3, #33	@ 0x21
 800a888:	d106      	bne.n	800a898 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a892:	6978      	ldr	r0, [r7, #20]
 800a894:	f7ff fe7c 	bl	800a590 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8a2:	2b40      	cmp	r3, #64	@ 0x40
 800a8a4:	d109      	bne.n	800a8ba <UART_DMAError+0x62>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2b22      	cmp	r3, #34	@ 0x22
 800a8aa:	d106      	bne.n	800a8ba <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a8b4:	6978      	ldr	r0, [r7, #20]
 800a8b6:	f7ff feac 	bl	800a612 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8c0:	f043 0210 	orr.w	r2, r3, #16
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a8d0:	6978      	ldr	r0, [r7, #20]
 800a8d2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8d4:	bf00      	nop
 800a8d6:	3718      	adds	r7, #24
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a904:	bf00      	nop
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b088      	sub	sp, #32
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	e853 3f00 	ldrex	r3, [r3]
 800a920:	60bb      	str	r3, [r7, #8]
   return(result);
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a928:	61fb      	str	r3, [r7, #28]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	461a      	mov	r2, r3
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	61bb      	str	r3, [r7, #24]
 800a934:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a936:	6979      	ldr	r1, [r7, #20]
 800a938:	69ba      	ldr	r2, [r7, #24]
 800a93a:	e841 2300 	strex	r3, r2, [r1]
 800a93e:	613b      	str	r3, [r7, #16]
   return(result);
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1e6      	bne.n	800a914 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2220      	movs	r2, #32
 800a94a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a95e:	bf00      	nop
 800a960:	3720      	adds	r7, #32
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a966:	b480      	push	{r7}
 800a968:	b083      	sub	sp, #12
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a96e:	bf00      	nop
 800a970:	370c      	adds	r7, #12
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr

0800a97a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a97a:	b480      	push	{r7}
 800a97c:	b083      	sub	sp, #12
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a982:	bf00      	nop
 800a984:	370c      	adds	r7, #12
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a98e:	b480      	push	{r7}
 800a990:	b083      	sub	sp, #12
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a996:	bf00      	nop
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr

0800a9a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a9a2:	b480      	push	{r7}
 800a9a4:	b085      	sub	sp, #20
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d101      	bne.n	800a9b8 <HAL_UARTEx_DisableFifoMode+0x16>
 800a9b4:	2302      	movs	r3, #2
 800a9b6:	e027      	b.n	800aa08 <HAL_UARTEx_DisableFifoMode+0x66>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2224      	movs	r2, #36	@ 0x24
 800a9c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f022 0201 	bic.w	r2, r2, #1
 800a9de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a9e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2220      	movs	r2, #32
 800a9fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa06:	2300      	movs	r3, #0
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3714      	adds	r7, #20
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d101      	bne.n	800aa2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aa28:	2302      	movs	r3, #2
 800aa2a:	e02d      	b.n	800aa88 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2224      	movs	r2, #36	@ 0x24
 800aa38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f022 0201 	bic.w	r2, r2, #1
 800aa52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	683a      	ldr	r2, [r7, #0]
 800aa64:	430a      	orrs	r2, r1
 800aa66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 f84f 	bl	800ab0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2220      	movs	r2, #32
 800aa7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d101      	bne.n	800aaa8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	e02d      	b.n	800ab04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2224      	movs	r2, #36	@ 0x24
 800aab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f022 0201 	bic.w	r2, r2, #1
 800aace:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	683a      	ldr	r2, [r7, #0]
 800aae0:	430a      	orrs	r2, r1
 800aae2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f811 	bl	800ab0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2220      	movs	r2, #32
 800aaf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d108      	bne.n	800ab2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ab2c:	e031      	b.n	800ab92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ab2e:	2308      	movs	r3, #8
 800ab30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ab32:	2308      	movs	r3, #8
 800ab34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	0e5b      	lsrs	r3, r3, #25
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	f003 0307 	and.w	r3, r3, #7
 800ab44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	0f5b      	lsrs	r3, r3, #29
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	f003 0307 	and.w	r3, r3, #7
 800ab54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab56:	7bbb      	ldrb	r3, [r7, #14]
 800ab58:	7b3a      	ldrb	r2, [r7, #12]
 800ab5a:	4911      	ldr	r1, [pc, #68]	@ (800aba0 <UARTEx_SetNbDataToProcess+0x94>)
 800ab5c:	5c8a      	ldrb	r2, [r1, r2]
 800ab5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab62:	7b3a      	ldrb	r2, [r7, #12]
 800ab64:	490f      	ldr	r1, [pc, #60]	@ (800aba4 <UARTEx_SetNbDataToProcess+0x98>)
 800ab66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab68:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab74:	7bfb      	ldrb	r3, [r7, #15]
 800ab76:	7b7a      	ldrb	r2, [r7, #13]
 800ab78:	4909      	ldr	r1, [pc, #36]	@ (800aba0 <UARTEx_SetNbDataToProcess+0x94>)
 800ab7a:	5c8a      	ldrb	r2, [r1, r2]
 800ab7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab80:	7b7a      	ldrb	r2, [r7, #13]
 800ab82:	4908      	ldr	r1, [pc, #32]	@ (800aba4 <UARTEx_SetNbDataToProcess+0x98>)
 800ab84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab86:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ab92:	bf00      	nop
 800ab94:	3714      	adds	r7, #20
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	0800aecc 	.word	0x0800aecc
 800aba4:	0800aed4 	.word	0x0800aed4

0800aba8 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	ed93 7a06 	vldr	s14, [r3, #24]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	edd3 7a07 	vldr	s15, [r3, #28]
 800abbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	edd3 7a08 	vldr	s15, [r3, #32]
 800abc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	edd3 7a06 	vldr	s15, [r3, #24]
 800abd8:	eeb1 7a67 	vneg.f32	s14, s15
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	edd3 7a08 	vldr	s15, [r3, #32]
 800abe2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800abe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6a1a      	ldr	r2, [r3, #32]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d006      	beq.n	800ac0c <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	330c      	adds	r3, #12
 800ac02:	220c      	movs	r2, #12
 800ac04:	2100      	movs	r1, #0
 800ac06:	4618      	mov	r0, r3
 800ac08:	f000 f804 	bl	800ac14 <memset>
  }

}
 800ac0c:	bf00      	nop
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <memset>:
 800ac14:	4402      	add	r2, r0
 800ac16:	4603      	mov	r3, r0
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d100      	bne.n	800ac1e <memset+0xa>
 800ac1c:	4770      	bx	lr
 800ac1e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac22:	e7f9      	b.n	800ac18 <memset+0x4>

0800ac24 <__errno>:
 800ac24:	4b01      	ldr	r3, [pc, #4]	@ (800ac2c <__errno+0x8>)
 800ac26:	6818      	ldr	r0, [r3, #0]
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	20000024 	.word	0x20000024

0800ac30 <__libc_init_array>:
 800ac30:	b570      	push	{r4, r5, r6, lr}
 800ac32:	4d0d      	ldr	r5, [pc, #52]	@ (800ac68 <__libc_init_array+0x38>)
 800ac34:	4c0d      	ldr	r4, [pc, #52]	@ (800ac6c <__libc_init_array+0x3c>)
 800ac36:	1b64      	subs	r4, r4, r5
 800ac38:	10a4      	asrs	r4, r4, #2
 800ac3a:	2600      	movs	r6, #0
 800ac3c:	42a6      	cmp	r6, r4
 800ac3e:	d109      	bne.n	800ac54 <__libc_init_array+0x24>
 800ac40:	4d0b      	ldr	r5, [pc, #44]	@ (800ac70 <__libc_init_array+0x40>)
 800ac42:	4c0c      	ldr	r4, [pc, #48]	@ (800ac74 <__libc_init_array+0x44>)
 800ac44:	f000 f91e 	bl	800ae84 <_init>
 800ac48:	1b64      	subs	r4, r4, r5
 800ac4a:	10a4      	asrs	r4, r4, #2
 800ac4c:	2600      	movs	r6, #0
 800ac4e:	42a6      	cmp	r6, r4
 800ac50:	d105      	bne.n	800ac5e <__libc_init_array+0x2e>
 800ac52:	bd70      	pop	{r4, r5, r6, pc}
 800ac54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac58:	4798      	blx	r3
 800ac5a:	3601      	adds	r6, #1
 800ac5c:	e7ee      	b.n	800ac3c <__libc_init_array+0xc>
 800ac5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac62:	4798      	blx	r3
 800ac64:	3601      	adds	r6, #1
 800ac66:	e7f2      	b.n	800ac4e <__libc_init_array+0x1e>
 800ac68:	0800aee4 	.word	0x0800aee4
 800ac6c:	0800aee4 	.word	0x0800aee4
 800ac70:	0800aee4 	.word	0x0800aee4
 800ac74:	0800aee8 	.word	0x0800aee8

0800ac78 <sqrt>:
 800ac78:	b538      	push	{r3, r4, r5, lr}
 800ac7a:	ed2d 8b02 	vpush	{d8}
 800ac7e:	ec55 4b10 	vmov	r4, r5, d0
 800ac82:	f000 f825 	bl	800acd0 <__ieee754_sqrt>
 800ac86:	4622      	mov	r2, r4
 800ac88:	462b      	mov	r3, r5
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	eeb0 8a40 	vmov.f32	s16, s0
 800ac92:	eef0 8a60 	vmov.f32	s17, s1
 800ac96:	f7f5 ff15 	bl	8000ac4 <__aeabi_dcmpun>
 800ac9a:	b990      	cbnz	r0, 800acc2 <sqrt+0x4a>
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	2300      	movs	r3, #0
 800aca0:	4620      	mov	r0, r4
 800aca2:	4629      	mov	r1, r5
 800aca4:	f7f5 fee6 	bl	8000a74 <__aeabi_dcmplt>
 800aca8:	b158      	cbz	r0, 800acc2 <sqrt+0x4a>
 800acaa:	f7ff ffbb 	bl	800ac24 <__errno>
 800acae:	2321      	movs	r3, #33	@ 0x21
 800acb0:	6003      	str	r3, [r0, #0]
 800acb2:	2200      	movs	r2, #0
 800acb4:	2300      	movs	r3, #0
 800acb6:	4610      	mov	r0, r2
 800acb8:	4619      	mov	r1, r3
 800acba:	f7f5 fd93 	bl	80007e4 <__aeabi_ddiv>
 800acbe:	ec41 0b18 	vmov	d8, r0, r1
 800acc2:	eeb0 0a48 	vmov.f32	s0, s16
 800acc6:	eef0 0a68 	vmov.f32	s1, s17
 800acca:	ecbd 8b02 	vpop	{d8}
 800acce:	bd38      	pop	{r3, r4, r5, pc}

0800acd0 <__ieee754_sqrt>:
 800acd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd4:	4a68      	ldr	r2, [pc, #416]	@ (800ae78 <__ieee754_sqrt+0x1a8>)
 800acd6:	ec55 4b10 	vmov	r4, r5, d0
 800acda:	43aa      	bics	r2, r5
 800acdc:	462b      	mov	r3, r5
 800acde:	4621      	mov	r1, r4
 800ace0:	d110      	bne.n	800ad04 <__ieee754_sqrt+0x34>
 800ace2:	4622      	mov	r2, r4
 800ace4:	4620      	mov	r0, r4
 800ace6:	4629      	mov	r1, r5
 800ace8:	f7f5 fc52 	bl	8000590 <__aeabi_dmul>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	4620      	mov	r0, r4
 800acf2:	4629      	mov	r1, r5
 800acf4:	f7f5 fa96 	bl	8000224 <__adddf3>
 800acf8:	4604      	mov	r4, r0
 800acfa:	460d      	mov	r5, r1
 800acfc:	ec45 4b10 	vmov	d0, r4, r5
 800ad00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad04:	2d00      	cmp	r5, #0
 800ad06:	dc0e      	bgt.n	800ad26 <__ieee754_sqrt+0x56>
 800ad08:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ad0c:	4322      	orrs	r2, r4
 800ad0e:	d0f5      	beq.n	800acfc <__ieee754_sqrt+0x2c>
 800ad10:	b19d      	cbz	r5, 800ad3a <__ieee754_sqrt+0x6a>
 800ad12:	4622      	mov	r2, r4
 800ad14:	4620      	mov	r0, r4
 800ad16:	4629      	mov	r1, r5
 800ad18:	f7f5 fa82 	bl	8000220 <__aeabi_dsub>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	460b      	mov	r3, r1
 800ad20:	f7f5 fd60 	bl	80007e4 <__aeabi_ddiv>
 800ad24:	e7e8      	b.n	800acf8 <__ieee754_sqrt+0x28>
 800ad26:	152a      	asrs	r2, r5, #20
 800ad28:	d115      	bne.n	800ad56 <__ieee754_sqrt+0x86>
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	e009      	b.n	800ad42 <__ieee754_sqrt+0x72>
 800ad2e:	0acb      	lsrs	r3, r1, #11
 800ad30:	3a15      	subs	r2, #21
 800ad32:	0549      	lsls	r1, r1, #21
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d0fa      	beq.n	800ad2e <__ieee754_sqrt+0x5e>
 800ad38:	e7f7      	b.n	800ad2a <__ieee754_sqrt+0x5a>
 800ad3a:	462a      	mov	r2, r5
 800ad3c:	e7fa      	b.n	800ad34 <__ieee754_sqrt+0x64>
 800ad3e:	005b      	lsls	r3, r3, #1
 800ad40:	3001      	adds	r0, #1
 800ad42:	02dc      	lsls	r4, r3, #11
 800ad44:	d5fb      	bpl.n	800ad3e <__ieee754_sqrt+0x6e>
 800ad46:	1e44      	subs	r4, r0, #1
 800ad48:	1b12      	subs	r2, r2, r4
 800ad4a:	f1c0 0420 	rsb	r4, r0, #32
 800ad4e:	fa21 f404 	lsr.w	r4, r1, r4
 800ad52:	4323      	orrs	r3, r4
 800ad54:	4081      	lsls	r1, r0
 800ad56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad5a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ad5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad62:	07d2      	lsls	r2, r2, #31
 800ad64:	bf5c      	itt	pl
 800ad66:	005b      	lslpl	r3, r3, #1
 800ad68:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ad6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad70:	bf58      	it	pl
 800ad72:	0049      	lslpl	r1, r1, #1
 800ad74:	2600      	movs	r6, #0
 800ad76:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ad7a:	106d      	asrs	r5, r5, #1
 800ad7c:	0049      	lsls	r1, r1, #1
 800ad7e:	2016      	movs	r0, #22
 800ad80:	4632      	mov	r2, r6
 800ad82:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ad86:	1917      	adds	r7, r2, r4
 800ad88:	429f      	cmp	r7, r3
 800ad8a:	bfde      	ittt	le
 800ad8c:	193a      	addle	r2, r7, r4
 800ad8e:	1bdb      	suble	r3, r3, r7
 800ad90:	1936      	addle	r6, r6, r4
 800ad92:	0fcf      	lsrs	r7, r1, #31
 800ad94:	3801      	subs	r0, #1
 800ad96:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ad9a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ad9e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ada2:	d1f0      	bne.n	800ad86 <__ieee754_sqrt+0xb6>
 800ada4:	4604      	mov	r4, r0
 800ada6:	2720      	movs	r7, #32
 800ada8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800adac:	429a      	cmp	r2, r3
 800adae:	eb00 0e0c 	add.w	lr, r0, ip
 800adb2:	db02      	blt.n	800adba <__ieee754_sqrt+0xea>
 800adb4:	d113      	bne.n	800adde <__ieee754_sqrt+0x10e>
 800adb6:	458e      	cmp	lr, r1
 800adb8:	d811      	bhi.n	800adde <__ieee754_sqrt+0x10e>
 800adba:	f1be 0f00 	cmp.w	lr, #0
 800adbe:	eb0e 000c 	add.w	r0, lr, ip
 800adc2:	da42      	bge.n	800ae4a <__ieee754_sqrt+0x17a>
 800adc4:	2800      	cmp	r0, #0
 800adc6:	db40      	blt.n	800ae4a <__ieee754_sqrt+0x17a>
 800adc8:	f102 0801 	add.w	r8, r2, #1
 800adcc:	1a9b      	subs	r3, r3, r2
 800adce:	458e      	cmp	lr, r1
 800add0:	bf88      	it	hi
 800add2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800add6:	eba1 010e 	sub.w	r1, r1, lr
 800adda:	4464      	add	r4, ip
 800addc:	4642      	mov	r2, r8
 800adde:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ade2:	3f01      	subs	r7, #1
 800ade4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ade8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800adec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800adf0:	d1dc      	bne.n	800adac <__ieee754_sqrt+0xdc>
 800adf2:	4319      	orrs	r1, r3
 800adf4:	d01b      	beq.n	800ae2e <__ieee754_sqrt+0x15e>
 800adf6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ae7c <__ieee754_sqrt+0x1ac>
 800adfa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ae80 <__ieee754_sqrt+0x1b0>
 800adfe:	e9da 0100 	ldrd	r0, r1, [sl]
 800ae02:	e9db 2300 	ldrd	r2, r3, [fp]
 800ae06:	f7f5 fa0b 	bl	8000220 <__aeabi_dsub>
 800ae0a:	e9da 8900 	ldrd	r8, r9, [sl]
 800ae0e:	4602      	mov	r2, r0
 800ae10:	460b      	mov	r3, r1
 800ae12:	4640      	mov	r0, r8
 800ae14:	4649      	mov	r1, r9
 800ae16:	f7f5 fe37 	bl	8000a88 <__aeabi_dcmple>
 800ae1a:	b140      	cbz	r0, 800ae2e <__ieee754_sqrt+0x15e>
 800ae1c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ae20:	e9da 0100 	ldrd	r0, r1, [sl]
 800ae24:	e9db 2300 	ldrd	r2, r3, [fp]
 800ae28:	d111      	bne.n	800ae4e <__ieee754_sqrt+0x17e>
 800ae2a:	3601      	adds	r6, #1
 800ae2c:	463c      	mov	r4, r7
 800ae2e:	1072      	asrs	r2, r6, #1
 800ae30:	0863      	lsrs	r3, r4, #1
 800ae32:	07f1      	lsls	r1, r6, #31
 800ae34:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ae38:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ae3c:	bf48      	it	mi
 800ae3e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ae42:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ae46:	4618      	mov	r0, r3
 800ae48:	e756      	b.n	800acf8 <__ieee754_sqrt+0x28>
 800ae4a:	4690      	mov	r8, r2
 800ae4c:	e7be      	b.n	800adcc <__ieee754_sqrt+0xfc>
 800ae4e:	f7f5 f9e9 	bl	8000224 <__adddf3>
 800ae52:	e9da 8900 	ldrd	r8, r9, [sl]
 800ae56:	4602      	mov	r2, r0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	4640      	mov	r0, r8
 800ae5c:	4649      	mov	r1, r9
 800ae5e:	f7f5 fe09 	bl	8000a74 <__aeabi_dcmplt>
 800ae62:	b120      	cbz	r0, 800ae6e <__ieee754_sqrt+0x19e>
 800ae64:	1ca0      	adds	r0, r4, #2
 800ae66:	bf08      	it	eq
 800ae68:	3601      	addeq	r6, #1
 800ae6a:	3402      	adds	r4, #2
 800ae6c:	e7df      	b.n	800ae2e <__ieee754_sqrt+0x15e>
 800ae6e:	1c63      	adds	r3, r4, #1
 800ae70:	f023 0401 	bic.w	r4, r3, #1
 800ae74:	e7db      	b.n	800ae2e <__ieee754_sqrt+0x15e>
 800ae76:	bf00      	nop
 800ae78:	7ff00000 	.word	0x7ff00000
 800ae7c:	20000080 	.word	0x20000080
 800ae80:	20000078 	.word	0x20000078

0800ae84 <_init>:
 800ae84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae86:	bf00      	nop
 800ae88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae8a:	bc08      	pop	{r3}
 800ae8c:	469e      	mov	lr, r3
 800ae8e:	4770      	bx	lr

0800ae90 <_fini>:
 800ae90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae92:	bf00      	nop
 800ae94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae96:	bc08      	pop	{r3}
 800ae98:	469e      	mov	lr, r3
 800ae9a:	4770      	bx	lr
