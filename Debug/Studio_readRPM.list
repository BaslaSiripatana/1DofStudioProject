
Studio_readRPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbd8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800cdb0  0800cdb0  0000ddb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce14  0800ce14  0000e2f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce14  0800ce14  0000de14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce1c  0800ce1c  0000e2f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce1c  0800ce1c  0000de1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce20  0800ce20  0000de20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f0  20000000  0800ce24  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a4  200002f0  0800d114  0000e2f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001594  0800d114  0000e594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e2f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021a89  00000000  00000000  0000e320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003660  00000000  00000000  0002fda9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  00033410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000134c  00000000  00000000  00034c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029664  00000000  00000000  00035fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f8bc  00000000  00000000  0005f648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116e8a  00000000  00000000  0007ef04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00195d8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f9c  00000000  00000000  00195dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0019cd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002f0 	.word	0x200002f0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800cd98 	.word	0x0800cd98

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002f4 	.word	0x200002f4
 8000214:	0800cd98 	.word	0x0800cd98

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000e00:	f000 b96a 	b.w	80010d8 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	460c      	mov	r4, r1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d14e      	bne.n	8000ec6 <__udivmoddi4+0xaa>
 8000e28:	4694      	mov	ip, r2
 8000e2a:	458c      	cmp	ip, r1
 8000e2c:	4686      	mov	lr, r0
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	d962      	bls.n	8000efa <__udivmoddi4+0xde>
 8000e34:	b14a      	cbz	r2, 8000e4a <__udivmoddi4+0x2e>
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	4091      	lsls	r1, r2
 8000e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e44:	4319      	orrs	r1, r3
 8000e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f f68c 	uxth.w	r6, ip
 8000e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d90a      	bls.n	8000e80 <__udivmoddi4+0x64>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e72:	f080 8112 	bcs.w	800109a <__udivmoddi4+0x27e>
 8000e76:	4299      	cmp	r1, r3
 8000e78:	f240 810f 	bls.w	800109a <__udivmoddi4+0x27e>
 8000e7c:	3c02      	subs	r4, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	1a59      	subs	r1, r3, r1
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e92:	fb00 f606 	mul.w	r6, r0, r6
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d90a      	bls.n	8000eb0 <__udivmoddi4+0x94>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ea2:	f080 80fc 	bcs.w	800109e <__udivmoddi4+0x282>
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	f240 80f9 	bls.w	800109e <__udivmoddi4+0x282>
 8000eac:	4463      	add	r3, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	b11d      	cbz	r5, 8000ec2 <__udivmoddi4+0xa6>
 8000eba:	40d3      	lsrs	r3, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d905      	bls.n	8000ed6 <__udivmoddi4+0xba>
 8000eca:	b10d      	cbz	r5, 8000ed0 <__udivmoddi4+0xb4>
 8000ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e7f5      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000ed6:	fab3 f183 	clz	r1, r3
 8000eda:	2900      	cmp	r1, #0
 8000edc:	d146      	bne.n	8000f6c <__udivmoddi4+0x150>
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xcc>
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	f0c0 80f0 	bcc.w	80010c8 <__udivmoddi4+0x2ac>
 8000ee8:	1a86      	subs	r6, r0, r2
 8000eea:	eb64 0303 	sbc.w	r3, r4, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d0e6      	beq.n	8000ec2 <__udivmoddi4+0xa6>
 8000ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ef8:	e7e3      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	f040 8090 	bne.w	8001020 <__udivmoddi4+0x204>
 8000f00:	eba1 040c 	sub.w	r4, r1, ip
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f16:	fb08 4416 	mls	r4, r8, r6, r4
 8000f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f1e:	fb07 f006 	mul.w	r0, r7, r6
 8000f22:	4298      	cmp	r0, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x11c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x11a>
 8000f30:	4298      	cmp	r0, r3
 8000f32:	f200 80cd 	bhi.w	80010d0 <__udivmoddi4+0x2b4>
 8000f36:	4626      	mov	r6, r4
 8000f38:	1a1c      	subs	r4, r3, r0
 8000f3a:	fa1f f38e 	uxth.w	r3, lr
 8000f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f42:	fb08 4410 	mls	r4, r8, r0, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb00 f707 	mul.w	r7, r0, r7
 8000f4e:	429f      	cmp	r7, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x148>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x146>
 8000f5c:	429f      	cmp	r7, r3
 8000f5e:	f200 80b0 	bhi.w	80010c2 <__udivmoddi4+0x2a6>
 8000f62:	4620      	mov	r0, r4
 8000f64:	1bdb      	subs	r3, r3, r7
 8000f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f6a:	e7a5      	b.n	8000eb8 <__udivmoddi4+0x9c>
 8000f6c:	f1c1 0620 	rsb	r6, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 f706 	lsr.w	r7, r2, r6
 8000f76:	431f      	orrs	r7, r3
 8000f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000f80:	ea43 030c 	orr.w	r3, r3, ip
 8000f84:	40f4      	lsrs	r4, r6
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	0c38      	lsrs	r0, r7, #16
 8000f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f90:	fbb4 fef0 	udiv	lr, r4, r0
 8000f94:	fa1f fc87 	uxth.w	ip, r7
 8000f98:	fb00 441e 	mls	r4, r0, lr, r4
 8000f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fa4:	45a1      	cmp	r9, r4
 8000fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x1a6>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000fb2:	f080 8084 	bcs.w	80010be <__udivmoddi4+0x2a2>
 8000fb6:	45a1      	cmp	r9, r4
 8000fb8:	f240 8081 	bls.w	80010be <__udivmoddi4+0x2a2>
 8000fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	eba4 0409 	sub.w	r4, r4, r9
 8000fc6:	fa1f f983 	uxth.w	r9, r3
 8000fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fce:	fb00 4413 	mls	r4, r0, r3, r4
 8000fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fda:	45a4      	cmp	ip, r4
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x1d2>
 8000fde:	193c      	adds	r4, r7, r4
 8000fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000fe4:	d267      	bcs.n	80010b6 <__udivmoddi4+0x29a>
 8000fe6:	45a4      	cmp	ip, r4
 8000fe8:	d965      	bls.n	80010b6 <__udivmoddi4+0x29a>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ff6:	eba4 040c 	sub.w	r4, r4, ip
 8000ffa:	429c      	cmp	r4, r3
 8000ffc:	46ce      	mov	lr, r9
 8000ffe:	469c      	mov	ip, r3
 8001000:	d351      	bcc.n	80010a6 <__udivmoddi4+0x28a>
 8001002:	d04e      	beq.n	80010a2 <__udivmoddi4+0x286>
 8001004:	b155      	cbz	r5, 800101c <__udivmoddi4+0x200>
 8001006:	ebb8 030e 	subs.w	r3, r8, lr
 800100a:	eb64 040c 	sbc.w	r4, r4, ip
 800100e:	fa04 f606 	lsl.w	r6, r4, r6
 8001012:	40cb      	lsrs	r3, r1
 8001014:	431e      	orrs	r6, r3
 8001016:	40cc      	lsrs	r4, r1
 8001018:	e9c5 6400 	strd	r6, r4, [r5]
 800101c:	2100      	movs	r1, #0
 800101e:	e750      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8001020:	f1c2 0320 	rsb	r3, r2, #32
 8001024:	fa20 f103 	lsr.w	r1, r0, r3
 8001028:	fa0c fc02 	lsl.w	ip, ip, r2
 800102c:	fa24 f303 	lsr.w	r3, r4, r3
 8001030:	4094      	lsls	r4, r2
 8001032:	430c      	orrs	r4, r1
 8001034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001038:	fa00 fe02 	lsl.w	lr, r0, r2
 800103c:	fa1f f78c 	uxth.w	r7, ip
 8001040:	fbb3 f0f8 	udiv	r0, r3, r8
 8001044:	fb08 3110 	mls	r1, r8, r0, r3
 8001048:	0c23      	lsrs	r3, r4, #16
 800104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104e:	fb00 f107 	mul.w	r1, r0, r7
 8001052:	4299      	cmp	r1, r3
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x24c>
 8001056:	eb1c 0303 	adds.w	r3, ip, r3
 800105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800105e:	d22c      	bcs.n	80010ba <__udivmoddi4+0x29e>
 8001060:	4299      	cmp	r1, r3
 8001062:	d92a      	bls.n	80010ba <__udivmoddi4+0x29e>
 8001064:	3802      	subs	r0, #2
 8001066:	4463      	add	r3, ip
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001070:	fb08 3311 	mls	r3, r8, r1, r3
 8001074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001078:	fb01 f307 	mul.w	r3, r1, r7
 800107c:	42a3      	cmp	r3, r4
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x276>
 8001080:	eb1c 0404 	adds.w	r4, ip, r4
 8001084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001088:	d213      	bcs.n	80010b2 <__udivmoddi4+0x296>
 800108a:	42a3      	cmp	r3, r4
 800108c:	d911      	bls.n	80010b2 <__udivmoddi4+0x296>
 800108e:	3902      	subs	r1, #2
 8001090:	4464      	add	r4, ip
 8001092:	1ae4      	subs	r4, r4, r3
 8001094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001098:	e739      	b.n	8000f0e <__udivmoddi4+0xf2>
 800109a:	4604      	mov	r4, r0
 800109c:	e6f0      	b.n	8000e80 <__udivmoddi4+0x64>
 800109e:	4608      	mov	r0, r1
 80010a0:	e706      	b.n	8000eb0 <__udivmoddi4+0x94>
 80010a2:	45c8      	cmp	r8, r9
 80010a4:	d2ae      	bcs.n	8001004 <__udivmoddi4+0x1e8>
 80010a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ae:	3801      	subs	r0, #1
 80010b0:	e7a8      	b.n	8001004 <__udivmoddi4+0x1e8>
 80010b2:	4631      	mov	r1, r6
 80010b4:	e7ed      	b.n	8001092 <__udivmoddi4+0x276>
 80010b6:	4603      	mov	r3, r0
 80010b8:	e799      	b.n	8000fee <__udivmoddi4+0x1d2>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e7d4      	b.n	8001068 <__udivmoddi4+0x24c>
 80010be:	46d6      	mov	lr, sl
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1a6>
 80010c2:	4463      	add	r3, ip
 80010c4:	3802      	subs	r0, #2
 80010c6:	e74d      	b.n	8000f64 <__udivmoddi4+0x148>
 80010c8:	4606      	mov	r6, r0
 80010ca:	4623      	mov	r3, r4
 80010cc:	4608      	mov	r0, r1
 80010ce:	e70f      	b.n	8000ef0 <__udivmoddi4+0xd4>
 80010d0:	3e02      	subs	r6, #2
 80010d2:	4463      	add	r3, ip
 80010d4:	e730      	b.n	8000f38 <__udivmoddi4+0x11c>
 80010d6:	bf00      	nop

080010d8 <__aeabi_idiv0>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <modbus_1t5_Timeout>:
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);
void Hearthbeat();

// function for interrupt
void modbus_1t5_Timeout()
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2201      	movs	r2, #1
 80010e6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0201 	orr.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	2000030c 	.word	0x2000030c

0800111c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <modbus_3t5_Timeout+0x1c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2201      	movs	r2, #1
 800112a:	755a      	strb	r2, [r3, #21]

}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	2000030c 	.word	0x2000030c

0800113c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f009 fec3 	bl	800aed0 <HAL_UART_GetError>
 800114a:	4603      	mov	r3, r0
 800114c:	2b20      	cmp	r3, #32
 800114e:	d101      	bne.n	8001154 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001150:	f7ff ffc4 	bl	80010dc <modbus_1t5_Timeout>

	}
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001166:	4a25      	ldr	r2, [pc, #148]	@ (80011fc <Modbus_init+0xa0>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800116c:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <Modbus_init+0xa0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	4a21      	ldr	r2, [pc, #132]	@ (8001200 <Modbus_init+0xa4>)
 800117a:	210e      	movs	r1, #14
 800117c:	4618      	mov	r0, r3
 800117e:	f008 f97f 	bl	8009480 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2110      	movs	r1, #16
 8001188:	4618      	mov	r0, r3
 800118a:	f009 fe4b 	bl	800ae24 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	4618      	mov	r0, r3
 8001194:	f009 fe62 	bl	800ae5c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	4a19      	ldr	r2, [pc, #100]	@ (8001204 <Modbus_init+0xa8>)
 800119e:	2104      	movs	r1, #4
 80011a0:	4618      	mov	r0, r3
 80011a2:	f009 f929 	bl	800a3f8 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <Modbus_init+0xa0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <Modbus_init+0xa0>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <Modbus_init+0xa0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80011b8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011bc:	4413      	add	r3, r2
 80011be:	3302      	adds	r3, #2
 80011c0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011c4:	4619      	mov	r1, r3
 80011c6:	f009 fa51 	bl	800a66c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <Modbus_init+0xa0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d10c      	bne.n	80011f4 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f007 f91f 	bl	8008424 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011e6:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <Modbus_init+0xa0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f007 fb78 	bl	80088e4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	2000030c 	.word	0x2000030c
 8001200:	0800111d 	.word	0x0800111d
 8001204:	0800113d 	.word	0x0800113d

08001208 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001214:	23ff      	movs	r3, #255	@ 0xff
 8001216:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001218:	23ff      	movs	r3, #255	@ 0xff
 800121a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800121c:	e013      	b.n	8001246 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	781a      	ldrb	r2, [r3, #0]
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	4053      	eors	r3, r2
 800122a:	b2db      	uxtb	r3, r3
 800122c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800122e:	4a0f      	ldr	r2, [pc, #60]	@ (800126c <CRC16+0x64>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4413      	add	r3, r2
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	4053      	eors	r3, r2
 800123a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800123c:	4a0c      	ldr	r2, [pc, #48]	@ (8001270 <CRC16+0x68>)
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	4413      	add	r3, r2
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001246:	883b      	ldrh	r3, [r7, #0]
 8001248:	1e5a      	subs	r2, r3, #1
 800124a:	803a      	strh	r2, [r7, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1e6      	bne.n	800121e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	7bbb      	ldrb	r3, [r7, #14]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21b      	sxth	r3, r3
 800125e:	b29b      	uxth	r3, r3
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	20000100 	.word	0x20000100
 8001270:	20000000 	.word	0x20000000

08001274 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800127a:	4b7e      	ldr	r3, [pc, #504]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	7ddb      	ldrb	r3, [r3, #23]
 8001280:	3b01      	subs	r3, #1
 8001282:	2b03      	cmp	r3, #3
 8001284:	d80a      	bhi.n	800129c <Modbus_Protocal_Worker+0x28>
 8001286:	a201      	add	r2, pc, #4	@ (adr r2, 800128c <Modbus_Protocal_Worker+0x18>)
 8001288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128c:	080012a7 	.word	0x080012a7
 8001290:	0800143b 	.word	0x0800143b
 8001294:	08001333 	.word	0x08001333
 8001298:	08001377 	.word	0x08001377
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 800129c:	4b75      	ldr	r3, [pc, #468]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2201      	movs	r2, #1
 80012a2:	75da      	strb	r2, [r3, #23]
		break;
 80012a4:	e0e1      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80012a6:	4b73      	ldr	r3, [pc, #460]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80012b2:	4b70      	ldr	r3, [pc, #448]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2202      	movs	r2, #2
 80012b8:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80012ba:	f000 f9cd 	bl	8001658 <Modbus_Emission>
 80012be:	e018      	b.n	80012f2 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80012c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80012ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d00b      	beq.n	80012f2 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80012da:	4b66      	ldr	r3, [pc, #408]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2200      	movs	r2, #0
 80012e0:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80012e2:	4b64      	ldr	r3, [pc, #400]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2200      	movs	r2, #0
 80012e8:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80012ea:	4b62      	ldr	r3, [pc, #392]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2203      	movs	r2, #3
 80012f0:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80012f2:	4b60      	ldr	r3, [pc, #384]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012fc:	2b20      	cmp	r3, #32
 80012fe:	f040 80ad 	bne.w	800145c <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001302:	4b5c      	ldr	r3, [pc, #368]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2200      	movs	r2, #0
 8001308:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800130c:	4b59      	ldr	r3, [pc, #356]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001312:	4b58      	ldr	r3, [pc, #352]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b57      	ldr	r3, [pc, #348]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800131e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001322:	4413      	add	r3, r2
 8001324:	3302      	adds	r3, #2
 8001326:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800132a:	4619      	mov	r1, r3
 800132c:	f009 f99e 	bl	800a66c <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001330:	e094      	b.n	800145c <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001332:	4b50      	ldr	r3, [pc, #320]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	7d1b      	ldrb	r3, [r3, #20]
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 8091 	beq.w	8001460 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800133e:	4b4d      	ldr	r3, [pc, #308]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	22fe      	movs	r2, #254	@ 0xfe
 8001344:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001346:	4b4b      	ldr	r3, [pc, #300]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001350:	4b48      	ldr	r3, [pc, #288]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001360:	4b44      	ldr	r3, [pc, #272]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001362:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001364:	1a8a      	subs	r2, r1, r2
 8001366:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001368:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800136c:	4b41      	ldr	r3, [pc, #260]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2204      	movs	r2, #4
 8001372:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001374:	e074      	b.n	8001460 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001376:	4b3f      	ldr	r3, [pc, #252]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800137e:	f113 0f02 	cmn.w	r3, #2
 8001382:	d150      	bne.n	8001426 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001384:	4b3b      	ldr	r3, [pc, #236]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2200      	movs	r2, #0
 800138a:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 800138c:	4b39      	ldr	r3, [pc, #228]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001394:	4b37      	ldr	r3, [pc, #220]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800139c:	3b02      	subs	r3, #2
 800139e:	4619      	mov	r1, r3
 80013a0:	4610      	mov	r0, r2
 80013a2:	f7ff ff31 	bl	8001208 <CRC16>
 80013a6:	4603      	mov	r3, r0
 80013a8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013aa:	793a      	ldrb	r2, [r7, #4]
 80013ac:	4b31      	ldr	r3, [pc, #196]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013ae:	6819      	ldr	r1, [r3, #0]
 80013b0:	4b30      	ldr	r3, [pc, #192]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013b8:	3b02      	subs	r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d10c      	bne.n	80013de <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80013c4:	797a      	ldrb	r2, [r7, #5]
 80013c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013c8:	6819      	ldr	r1, [r3, #0]
 80013ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013d2:	3b01      	subs	r3, #1
 80013d4:	440b      	add	r3, r1
 80013d6:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d004      	beq.n	80013e8 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80013de:	4b25      	ldr	r3, [pc, #148]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	22ff      	movs	r2, #255	@ 0xff
 80013e4:	759a      	strb	r2, [r3, #22]
				break;
 80013e6:	e040      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80013e8:	4b22      	ldr	r3, [pc, #136]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80013f0:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d113      	bne.n	8001422 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80013fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001402:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800140a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800140c:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001414:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001416:	461a      	mov	r2, r3
 8001418:	f00b fbaa 	bl	800cb70 <memcpy>

			//execute command
			Modbus_frame_response();
 800141c:	f000 f904 	bl	8001628 <Modbus_frame_response>
 8001420:	e001      	b.n	8001426 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001422:	bf00      	nop
					}
		break;


	}
}
 8001424:	e021      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8001426:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	7d5b      	ldrb	r3, [r3, #21]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d019      	beq.n	8001464 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001430:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2201      	movs	r2, #1
 8001436:	75da      	strb	r2, [r3, #23]
		break;
 8001438:	e014      	b.n	8001464 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800143a:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001444:	2b20      	cmp	r3, #32
 8001446:	d10f      	bne.n	8001468 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001448:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001452:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2201      	movs	r2, #1
 8001458:	75da      	strb	r2, [r3, #23]
		break;
 800145a:	e005      	b.n	8001468 <Modbus_Protocal_Worker+0x1f4>
		break;
 800145c:	bf00      	nop
 800145e:	e004      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		break;
 8001460:	bf00      	nop
 8001462:	e002      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		break;
 8001464:	bf00      	nop
 8001466:	e000      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		break;
 8001468:	bf00      	nop
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000030c 	.word	0x2000030c

08001478 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800147e:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <modbusWrite1Register+0x7c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	7e5b      	ldrb	r3, [r3, #25]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	b29b      	uxth	r3, r3
 8001488:	4a1a      	ldr	r2, [pc, #104]	@ (80014f4 <modbusWrite1Register+0x7c>)
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	7e92      	ldrb	r2, [r2, #26]
 800148e:	4413      	add	r3, r2
 8001490:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001492:	88fa      	ldrh	r2, [r7, #6]
 8001494:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <modbusWrite1Register+0x7c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	429a      	cmp	r2, r3
 800149c:	d903      	bls.n	80014a6 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800149e:	2002      	movs	r0, #2
 80014a0:	f000 f8a0 	bl	80015e4 <ModbusErrorReply>
			 return;
 80014a4:	e023      	b.n	80014ee <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80014a6:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	440b      	add	r3, r1
 80014b6:	7ed2      	ldrb	r2, [r2, #27]
 80014b8:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6859      	ldr	r1, [r3, #4]
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	440b      	add	r3, r1
 80014ca:	7f12      	ldrb	r2, [r2, #28]
 80014cc:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80014d6:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80014dc:	2208      	movs	r2, #8
 80014de:	4619      	mov	r1, r3
 80014e0:	f00b fb46 	bl	800cb70 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2205      	movs	r2, #5
 80014ea:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	2000030c 	.word	0x2000030c

080014f8 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80014fe:	4b38      	ldr	r3, [pc, #224]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	7edb      	ldrb	r3, [r3, #27]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b29b      	uxth	r3, r3
 8001508:	4a35      	ldr	r2, [pc, #212]	@ (80015e0 <modbusRead1Register+0xe8>)
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	7f12      	ldrb	r2, [r2, #28]
 800150e:	4413      	add	r3, r2
 8001510:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001512:	4b33      	ldr	r3, [pc, #204]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	7e5b      	ldrb	r3, [r3, #25]
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	b29b      	uxth	r3, r3
 800151c:	4a30      	ldr	r2, [pc, #192]	@ (80015e0 <modbusRead1Register+0xe8>)
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	7e92      	ldrb	r2, [r2, #26]
 8001522:	4413      	add	r3, r2
 8001524:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <modbusRead1Register+0x3a>
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	2b7d      	cmp	r3, #125	@ 0x7d
 8001530:	d903      	bls.n	800153a <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001532:	2003      	movs	r0, #3
 8001534:	f000 f856 	bl	80015e4 <ModbusErrorReply>
		 return;
 8001538:	e04e      	b.n	80015d8 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800153a:	88ba      	ldrh	r2, [r7, #4]
 800153c:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <modbusRead1Register+0xe8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	429a      	cmp	r2, r3
 8001544:	d808      	bhi.n	8001558 <modbusRead1Register+0x60>
 8001546:	88ba      	ldrh	r2, [r7, #4]
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	4413      	add	r3, r2
 800154c:	461a      	mov	r2, r3
 800154e:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	429a      	cmp	r2, r3
 8001556:	d903      	bls.n	8001560 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001558:	2002      	movs	r0, #2
 800155a:	f000 f843 	bl	80015e4 <ModbusErrorReply>
		 return;
 800155e:	e03b      	b.n	80015d8 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001560:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2203      	movs	r2, #3
 8001566:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0052      	lsls	r2, r2, #1
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800157a:	2400      	movs	r4, #0
 800157c:	e020      	b.n	80015c0 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800157e:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	88bb      	ldrh	r3, [r7, #4]
 8001586:	4423      	add	r3, r4
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	18d1      	adds	r1, r2, r3
 800158c:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <modbusRead1Register+0xe8>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	1c63      	adds	r3, r4, #1
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	7849      	ldrb	r1, [r1, #1]
 8001596:	4413      	add	r3, r2
 8001598:	460a      	mov	r2, r1
 800159a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <modbusRead1Register+0xe8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	88bb      	ldrh	r3, [r7, #4]
 80015a6:	4423      	add	r3, r4
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	18d1      	adds	r1, r2, r3
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <modbusRead1Register+0xe8>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	0063      	lsls	r3, r4, #1
 80015b2:	3303      	adds	r3, #3
 80015b4:	7809      	ldrb	r1, [r1, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	460a      	mov	r2, r1
 80015ba:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80015be:	3401      	adds	r4, #1
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	429c      	cmp	r4, r3
 80015c4:	dbdb      	blt.n	800157e <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	3301      	adds	r3, #1
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b04      	ldr	r3, [pc, #16]	@ (80015e0 <modbusRead1Register+0xe8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	0052      	lsls	r2, r2, #1
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000030c 	.word	0x2000030c

080015e4 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80015ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001624 <ModbusErrorReply+0x40>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	7e1a      	ldrb	r2, [r3, #24]
 80015f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <ModbusErrorReply+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001602:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <ModbusErrorReply+0x40>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	79fa      	ldrb	r2, [r7, #7]
 8001608:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 800160c:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <ModbusErrorReply+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2202      	movs	r2, #2
 8001612:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	2000030c 	.word	0x2000030c

08001628 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 800162c:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <Modbus_frame_response+0x2c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	7e1b      	ldrb	r3, [r3, #24]
 8001632:	2b03      	cmp	r3, #3
 8001634:	d004      	beq.n	8001640 <Modbus_frame_response+0x18>
 8001636:	2b06      	cmp	r3, #6
 8001638:	d105      	bne.n	8001646 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800163a:	f7ff ff1d 	bl	8001478 <modbusWrite1Register>
		break;
 800163e:	e006      	b.n	800164e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001640:	f7ff ff5a 	bl	80014f8 <modbusRead1Register>
		break;
 8001644:	e003      	b.n	800164e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001646:	2001      	movs	r0, #1
 8001648:	f7ff ffcc 	bl	80015e4 <ModbusErrorReply>
		break;
 800164c:	bf00      	nop

	}
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000030c 	.word	0x2000030c

08001658 <Modbus_Emission>:

void Modbus_Emission()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800165e:	4b38      	ldr	r3, [pc, #224]	@ (8001740 <Modbus_Emission+0xe8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001668:	2b20      	cmp	r3, #32
 800166a:	d15d      	bne.n	8001728 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800166c:	4b34      	ldr	r3, [pc, #208]	@ (8001740 <Modbus_Emission+0xe8>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b33      	ldr	r3, [pc, #204]	@ (8001740 <Modbus_Emission+0xe8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800167a:	4b31      	ldr	r3, [pc, #196]	@ (8001740 <Modbus_Emission+0xe8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001682:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001684:	4b2e      	ldr	r3, [pc, #184]	@ (8001740 <Modbus_Emission+0xe8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 800168c:	4b2c      	ldr	r3, [pc, #176]	@ (8001740 <Modbus_Emission+0xe8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001694:	461a      	mov	r2, r3
 8001696:	f00b fa6b 	bl	800cb70 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800169a:	4b29      	ldr	r3, [pc, #164]	@ (8001740 <Modbus_Emission+0xe8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b26      	ldr	r3, [pc, #152]	@ (8001740 <Modbus_Emission+0xe8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3203      	adds	r2, #3
 80016aa:	b292      	uxth	r2, r2
 80016ac:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016b0:	4b23      	ldr	r3, [pc, #140]	@ (8001740 <Modbus_Emission+0xe8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80016b8:	4b21      	ldr	r3, [pc, #132]	@ (8001740 <Modbus_Emission+0xe8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016c0:	3b02      	subs	r3, #2
 80016c2:	4619      	mov	r1, r3
 80016c4:	4610      	mov	r0, r2
 80016c6:	f7ff fd9f 	bl	8001208 <CRC16>
 80016ca:	4603      	mov	r3, r0
 80016cc:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80016ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <Modbus_Emission+0xe8>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <Modbus_Emission+0xe8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80016da:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80016dc:	7939      	ldrb	r1, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	460a      	mov	r2, r1
 80016e2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80016e6:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <Modbus_Emission+0xe8>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <Modbus_Emission+0xe8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80016f2:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80016f4:	7979      	ldrb	r1, [r7, #5]
 80016f6:	4413      	add	r3, r2
 80016f8:	460a      	mov	r2, r1
 80016fa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80016fe:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <Modbus_Emission+0xe8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001708:	2b20      	cmp	r3, #32
 800170a:	d10d      	bne.n	8001728 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <Modbus_Emission+0xe8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <Modbus_Emission+0xe8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <Modbus_Emission+0xe8>)
 800171c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800171e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001722:	461a      	mov	r2, r3
 8001724:	f008 ff22 	bl	800a56c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <Modbus_Emission+0xe8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2200      	movs	r2, #0
 800172e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <Modbus_Emission+0xe8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2200      	movs	r2, #0
 8001736:	755a      	strb	r2, [r3, #21]

}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2000030c 	.word	0x2000030c

08001744 <KalmanFilter_Init>:

void KalmanFilter_Init(KalmanFilter* kf, float32_t* A_data, float32_t* B_data, float32_t* C_data,
                       float32_t* G_data, float32_t* Q_data, float32_t* R_data, float32_t* P_data,
                       float32_t* x_data, float32_t* K_data, float32_t* temp1_data,
                       float32_t* temp2_data, float32_t* temp3_data, float32_t* temp4_data,
                       float32_t* temp5_data, float32_t* temp6_data, float32_t* S_data) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
    arm_mat_init_f32(&kf->A, 3, 3, A_data);
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2203      	movs	r2, #3
 8001758:	2103      	movs	r1, #3
 800175a:	f00a fd52 	bl	800c202 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, 3, 1, B_data);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f103 0008 	add.w	r0, r3, #8
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	2103      	movs	r1, #3
 800176a:	f00a fd4a 	bl	800c202 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->C, 1, 3, C_data);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f103 0010 	add.w	r0, r3, #16
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2203      	movs	r2, #3
 8001778:	2101      	movs	r1, #1
 800177a:	f00a fd42 	bl	800c202 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->G, 3, 1, G_data); // Process noise gain matrix is now 3x1
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f103 0018 	add.w	r0, r3, #24
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2201      	movs	r2, #1
 8001788:	2103      	movs	r1, #3
 800178a:	f00a fd3a 	bl	800c202 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, 1, 1, Q_data); // Process noise covariance is now 1x1
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f103 0020 	add.w	r0, r3, #32
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	2201      	movs	r2, #1
 8001798:	2101      	movs	r1, #1
 800179a:	f00a fd32 	bl	800c202 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, 1, 1, R_data);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	2201      	movs	r2, #1
 80017a8:	2101      	movs	r1, #1
 80017aa:	f00a fd2a 	bl	800c202 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, 3, 3, P_data);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80017b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b6:	2203      	movs	r2, #3
 80017b8:	2103      	movs	r1, #3
 80017ba:	f00a fd22 	bl	800c202 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->x, 3, 1, x_data);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80017c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c6:	2201      	movs	r2, #1
 80017c8:	2103      	movs	r1, #3
 80017ca:	f00a fd1a 	bl	800c202 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, 3, 1, K_data); // Initialize K matrix
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80017d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d6:	2201      	movs	r2, #1
 80017d8:	2103      	movs	r1, #3
 80017da:	f00a fd12 	bl	800c202 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp1, 3, 3, temp1_data);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80017e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017e6:	2203      	movs	r2, #3
 80017e8:	2103      	movs	r1, #3
 80017ea:	f00a fd0a 	bl	800c202 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, 3, 3, temp2_data);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80017f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017f6:	2203      	movs	r2, #3
 80017f8:	2103      	movs	r1, #3
 80017fa:	f00a fd02 	bl	800c202 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, 3, 1, temp3_data);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8001804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001806:	2201      	movs	r2, #1
 8001808:	2103      	movs	r1, #3
 800180a:	f00a fcfa 	bl	800c202 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp4, 1, 1, temp4_data);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8001814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001816:	2201      	movs	r2, #1
 8001818:	2101      	movs	r1, #1
 800181a:	f00a fcf2 	bl	800c202 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp5, 3, 1, temp5_data);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f103 0078 	add.w	r0, r3, #120	@ 0x78
 8001824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001826:	2201      	movs	r2, #1
 8001828:	2103      	movs	r1, #3
 800182a:	f00a fcea 	bl	800c202 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp6, 1, 3, temp6_data);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8001834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001836:	2203      	movs	r2, #3
 8001838:	2101      	movs	r1, #1
 800183a:	f00a fce2 	bl	800c202 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->S, 1, 1, S_data);  // Initialize S matrix
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8001844:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001846:	2201      	movs	r2, #1
 8001848:	2101      	movs	r1, #1
 800184a:	f00a fcda 	bl	800c202 <arm_mat_init_f32>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <KalmanFilter_Predict>:

void KalmanFilter_Predict(KalmanFilter* kf, float32_t* u_data, float32_t* w_data) {
 8001856:	b580      	push	{r7, lr}
 8001858:	b088      	sub	sp, #32
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
    arm_matrix_instance_f32 u;
    arm_matrix_instance_f32 w;
    arm_mat_init_f32(&u, 1, 1, u_data);
 8001862:	f107 0018 	add.w	r0, r7, #24
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	2201      	movs	r2, #1
 800186a:	2101      	movs	r1, #1
 800186c:	f00a fcc9 	bl	800c202 <arm_mat_init_f32>
    arm_mat_init_f32(&w, 1, 1, w_data);
 8001870:	f107 0010 	add.w	r0, r7, #16
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	2101      	movs	r1, #1
 800187a:	f00a fcc2 	bl	800c202 <arm_mat_init_f32>

    // x = A * x + B * u + G * w
    arm_mat_mult_f32(&kf->A, &kf->x, &kf->temp3);
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3368      	adds	r3, #104	@ 0x68
 800188a:	461a      	mov	r2, r3
 800188c:	f00b f848 	bl	800c920 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->B, &u, &kf->temp5);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f103 0008 	add.w	r0, r3, #8
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f103 0278 	add.w	r2, r3, #120	@ 0x78
 800189c:	f107 0318 	add.w	r3, r7, #24
 80018a0:	4619      	mov	r1, r3
 80018a2:	f00b f83d 	bl	800c920 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->temp5, &kf->temp3);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3368      	adds	r3, #104	@ 0x68
 80018b6:	461a      	mov	r2, r3
 80018b8:	f00a fc68 	bl	800c18c <arm_mat_add_f32>
    arm_mat_mult_f32(&kf->G, &w, &kf->temp5);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f103 0018 	add.w	r0, r3, #24
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f103 0278 	add.w	r2, r3, #120	@ 0x78
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	4619      	mov	r1, r3
 80018ce:	f00b f827 	bl	800c920 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->temp5, &kf->x);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	3338      	adds	r3, #56	@ 0x38
 80018e2:	461a      	mov	r2, r3
 80018e4:	f00a fc52 	bl	800c18c <arm_mat_add_f32>

    // P = A * P * A^T + G * Q * G^T
    arm_mat_mult_f32(&kf->A, &kf->P, &kf->temp1);
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3358      	adds	r3, #88	@ 0x58
 80018f4:	461a      	mov	r2, r3
 80018f6:	f00b f813 	bl	800c920 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &kf->temp2);
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	3360      	adds	r3, #96	@ 0x60
 8001900:	4619      	mov	r1, r3
 8001902:	4610      	mov	r0, r2
 8001904:	f00b f8c1 	bl	800ca8a <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	3330      	adds	r3, #48	@ 0x30
 8001918:	461a      	mov	r2, r3
 800191a:	f00b f801 	bl	800c920 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->G, &kf->Q, &kf->temp3);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f103 0018 	add.w	r0, r3, #24
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f103 0120 	add.w	r1, r3, #32
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3368      	adds	r3, #104	@ 0x68
 800192e:	461a      	mov	r2, r3
 8001930:	f00a fff6 	bl	800c920 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->G, &kf->temp6);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f103 0218 	add.w	r2, r3, #24
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3380      	adds	r3, #128	@ 0x80
 800193e:	4619      	mov	r1, r3
 8001940:	4610      	mov	r0, r2
 8001942:	f00b f8a2 	bl	800ca8a <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp3, &kf->temp6, &kf->temp1);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3358      	adds	r3, #88	@ 0x58
 8001956:	461a      	mov	r2, r3
 8001958:	f00a ffe2 	bl	800c920 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->P, &kf->temp1, &kf->P);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3330      	adds	r3, #48	@ 0x30
 800196c:	461a      	mov	r2, r3
 800196e:	f00a fc0d 	bl	800c18c <arm_mat_add_f32>
}
 8001972:	bf00      	nop
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <KalmanFilter_Update>:

void KalmanFilter_Update(KalmanFilter* kf, float32_t* y_data) {
 800197c:	b5b0      	push	{r4, r5, r7, lr}
 800197e:	b090      	sub	sp, #64	@ 0x40
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
    // Innovation residual: y - C * x
    arm_matrix_instance_f32 y;
    arm_mat_init_f32(&y, 1, 1, y_data);
 8001986:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	2101      	movs	r1, #1
 8001990:	f00a fc37 	bl	800c202 <arm_mat_init_f32>
    arm_mat_mult_f32(&kf->C, &kf->x, &kf->temp4);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f103 0010 	add.w	r0, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3370      	adds	r3, #112	@ 0x70
 80019a4:	461a      	mov	r2, r3
 80019a6:	f00a ffbb 	bl	800c920 <arm_mat_mult_f32>
    arm_mat_sub_f32(&y, &kf->temp4, &y);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80019b0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80019b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019b8:	4618      	mov	r0, r3
 80019ba:	f00b f82b 	bl	800ca14 <arm_mat_sub_f32>

    // Innovation covariance: S = C * P * C^T + R
    arm_mat_mult_f32(&kf->C, &kf->P, &kf->temp6);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f103 0010 	add.w	r0, r3, #16
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3380      	adds	r3, #128	@ 0x80
 80019ce:	461a      	mov	r2, r3
 80019d0:	f00a ffa6 	bl	800c920 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->C, &kf->temp3);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f103 0210 	add.w	r2, r3, #16
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3368      	adds	r3, #104	@ 0x68
 80019de:	4619      	mov	r1, r3
 80019e0:	4610      	mov	r0, r2
 80019e2:	f00b f852 	bl	800ca8a <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp6, &kf->temp3, &kf->S);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3350      	adds	r3, #80	@ 0x50
 80019f6:	461a      	mov	r2, r3
 80019f8:	f00a ff92 	bl	800c920 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->S, &kf->R, &kf->S);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3350      	adds	r3, #80	@ 0x50
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f00a fbbd 	bl	800c18c <arm_mat_add_f32>

    // Kalman gain: K = P * C^T * S^-1
    arm_mat_inverse_f32(&kf->S, &kf->temp4);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3370      	adds	r3, #112	@ 0x70
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4610      	mov	r0, r2
 8001a20:	f00a fc07 	bl	800c232 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&kf->P, &kf->temp3, &kf->temp5);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3378      	adds	r3, #120	@ 0x78
 8001a34:	461a      	mov	r2, r3
 8001a36:	f00a ff73 	bl	800c920 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->temp5, &kf->temp4, &kf->K);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f103 0078 	add.w	r0, r3, #120	@ 0x78
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3340      	adds	r3, #64	@ 0x40
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	f00a ff68 	bl	800c920 <arm_mat_mult_f32>

    // Corrected state estimate: x = x + K * y
    arm_mat_mult_f32(&kf->K, &y, &kf->temp3);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001a5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a60:	4619      	mov	r1, r3
 8001a62:	f00a ff5d 	bl	800c920 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->x, &kf->temp3, &kf->x);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3338      	adds	r3, #56	@ 0x38
 8001a76:	461a      	mov	r2, r3
 8001a78:	f00a fb88 	bl	800c18c <arm_mat_add_f32>

    // Corrected estimate covariance: P = (I - K * C) * P
    arm_matrix_instance_f32 I;
    float32_t I_data[9] = {1, 0, 0, 0, 1, 0, 0, 0, 1};
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <KalmanFilter_Update+0x170>)
 8001a7e:	f107 040c 	add.w	r4, r7, #12
 8001a82:	461d      	mov	r5, r3
 8001a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a8c:	682b      	ldr	r3, [r5, #0]
 8001a8e:	6023      	str	r3, [r4, #0]
    arm_mat_init_f32(&I, 3, 3, I_data);
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001a98:	2203      	movs	r2, #3
 8001a9a:	2103      	movs	r1, #3
 8001a9c:	f00a fbb1 	bl	800c202 <arm_mat_init_f32>
    arm_mat_mult_f32(&kf->K, &kf->C, &kf->temp1);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f103 0110 	add.w	r1, r3, #16
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3358      	adds	r3, #88	@ 0x58
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	f00a ff35 	bl	800c920 <arm_mat_mult_f32>
    arm_mat_sub_f32(&I, &kf->temp1, &kf->temp2);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8001ac2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f00a ffa4 	bl	800ca14 <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->temp2, &kf->P, &kf->P);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3330      	adds	r3, #48	@ 0x30
 8001adc:	461a      	mov	r2, r3
 8001ade:	f00a ff1f 	bl	800c920 <arm_mat_mult_f32>
}
 8001ae2:	bf00      	nop
 8001ae4:	3740      	adds	r7, #64	@ 0x40
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aea:	bf00      	nop
 8001aec:	0800cdb0 	.word	0x0800cdb0

08001af0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001af4:	b098      	sub	sp, #96	@ 0x60
 8001af6:	af0e      	add	r7, sp, #56	@ 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af8:	f003 f98d 	bl	8004e16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001afc:	f000 fb6e 	bl	80021dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b00:	f000 fef8 	bl	80028f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b04:	f000 feb0 	bl	8002868 <MX_DMA_Init>
  MX_TIM3_Init();
 8001b08:	f000 fc92 	bl	8002430 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001b0c:	f000 fc3c 	bl	8002388 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001b10:	f000 fd54 	bl	80025bc <MX_TIM5_Init>
  MX_ADC1_Init();
 8001b14:	f000 fbae 	bl	8002274 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001b18:	f000 fd02 	bl	8002520 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001b1c:	f000 fd9c 	bl	8002658 <MX_TIM6_Init>
  MX_TIM16_Init();
 8001b20:	f000 fe24 	bl	800276c <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001b24:	f000 fe52 	bl	80027cc <MX_USART2_UART_Init>
  MX_TIM15_Init();
 8001b28:	f000 fdce 	bl	80026c8 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  //PWM Motor
  HAL_TIM_Base_Start(&htim3);
 8001b2c:	48ac      	ldr	r0, [pc, #688]	@ (8001de0 <main+0x2f0>)
 8001b2e:	f006 fc09 	bl	8008344 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b32:	2100      	movs	r1, #0
 8001b34:	48aa      	ldr	r0, [pc, #680]	@ (8001de0 <main+0x2f0>)
 8001b36:	f006 fd5b 	bl	80085f0 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001b3a:	4ba9      	ldr	r3, [pc, #676]	@ (8001de0 <main+0x2f0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	635a      	str	r2, [r3, #52]	@ 0x34

  //Read Encoder
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001b42:	213c      	movs	r1, #60	@ 0x3c
 8001b44:	48a7      	ldr	r0, [pc, #668]	@ (8001de4 <main+0x2f4>)
 8001b46:	f007 f80f 	bl	8008b68 <HAL_TIM_Encoder_Start>

  //time microsec
  HAL_TIM_Base_Start_IT(&htim5);
 8001b4a:	48a7      	ldr	r0, [pc, #668]	@ (8001de8 <main+0x2f8>)
 8001b4c:	f006 fc6a 	bl	8008424 <HAL_TIM_Base_Start_IT>

  //Read joystick
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 2);
 8001b50:	2202      	movs	r2, #2
 8001b52:	49a6      	ldr	r1, [pc, #664]	@ (8001dec <main+0x2fc>)
 8001b54:	48a6      	ldr	r0, [pc, #664]	@ (8001df0 <main+0x300>)
 8001b56:	f003 fdcb 	bl	80056f0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim4);
 8001b5a:	48a6      	ldr	r0, [pc, #664]	@ (8001df4 <main+0x304>)
 8001b5c:	f006 fbf2 	bl	8008344 <HAL_TIM_Base_Start>

  //PID Control Position
//  PID1.Kp = 0.05; // 7.5
//  PID1.Ki = 0.0005; // 0.0025
//  PID1.Kd = 0.1; // 3
  PID1.Kp = 3; // 7.5
 8001b60:	4ba5      	ldr	r3, [pc, #660]	@ (8001df8 <main+0x308>)
 8001b62:	4aa6      	ldr	r2, [pc, #664]	@ (8001dfc <main+0x30c>)
 8001b64:	619a      	str	r2, [r3, #24]
  PID1.Ki = 0.0001; // 0.0025
 8001b66:	4ba4      	ldr	r3, [pc, #656]	@ (8001df8 <main+0x308>)
 8001b68:	4aa5      	ldr	r2, [pc, #660]	@ (8001e00 <main+0x310>)
 8001b6a:	61da      	str	r2, [r3, #28]
  PID1.Kd = 0; // 3
 8001b6c:	4ba2      	ldr	r3, [pc, #648]	@ (8001df8 <main+0x308>)
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID1, 0);
 8001b74:	2100      	movs	r1, #0
 8001b76:	48a0      	ldr	r0, [pc, #640]	@ (8001df8 <main+0x308>)
 8001b78:	f00a fad2 	bl	800c120 <arm_pid_init_f32>

  //PID Control Velocity
  PID2.Kp = 0.3; //0.5
 8001b7c:	4ba1      	ldr	r3, [pc, #644]	@ (8001e04 <main+0x314>)
 8001b7e:	4aa2      	ldr	r2, [pc, #648]	@ (8001e08 <main+0x318>)
 8001b80:	619a      	str	r2, [r3, #24]
  PID2.Ki = 0.0005; // 0.006
 8001b82:	4ba0      	ldr	r3, [pc, #640]	@ (8001e04 <main+0x314>)
 8001b84:	4aa1      	ldr	r2, [pc, #644]	@ (8001e0c <main+0x31c>)
 8001b86:	61da      	str	r2, [r3, #28]
  PID2.Kd = 0; // 0.05
 8001b88:	4b9e      	ldr	r3, [pc, #632]	@ (8001e04 <main+0x314>)
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID2, 0);
 8001b90:	2100      	movs	r1, #0
 8001b92:	489c      	ldr	r0, [pc, #624]	@ (8001e04 <main+0x314>)
 8001b94:	f00a fac4 	bl	800c120 <arm_pid_init_f32>

  //Modbus Setting
  // manaul add
  HAL_TIM_Base_Start_IT(&htim6);
 8001b98:	489d      	ldr	r0, [pc, #628]	@ (8001e10 <main+0x320>)
 8001b9a:	f006 fc43 	bl	8008424 <HAL_TIM_Base_Start_IT>

  //  modbus
  hmodbus.huart = &huart2;
 8001b9e:	4b9d      	ldr	r3, [pc, #628]	@ (8001e14 <main+0x324>)
 8001ba0:	4a9d      	ldr	r2, [pc, #628]	@ (8001e18 <main+0x328>)
 8001ba2:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8001ba4:	4b9b      	ldr	r3, [pc, #620]	@ (8001e14 <main+0x324>)
 8001ba6:	4a9d      	ldr	r2, [pc, #628]	@ (8001e1c <main+0x32c>)
 8001ba8:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8001baa:	4b9a      	ldr	r3, [pc, #616]	@ (8001e14 <main+0x324>)
 8001bac:	2215      	movs	r2, #21
 8001bae:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8001bb0:	4b98      	ldr	r3, [pc, #608]	@ (8001e14 <main+0x324>)
 8001bb2:	22c8      	movs	r2, #200	@ 0xc8
 8001bb4:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001bb6:	499a      	ldr	r1, [pc, #616]	@ (8001e20 <main+0x330>)
 8001bb8:	4896      	ldr	r0, [pc, #600]	@ (8001e14 <main+0x324>)
 8001bba:	f7ff facf 	bl	800115c <Modbus_init>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bc4:	4897      	ldr	r0, [pc, #604]	@ (8001e24 <main+0x334>)
 8001bc6:	f005 faf9 	bl	80071bc <HAL_GPIO_WritePin>


  //-----Kalman filter--------//
  // Initialize the Kalman filter
  KalmanFilter_Init(&kf, A_data, B_data, C_data, G_data, Q_data, R_data, P_data, x_data, K_data, temp1_data, temp2_data, temp3_data, temp4_data, temp5_data, temp6_data, S_data);
 8001bca:	4b97      	ldr	r3, [pc, #604]	@ (8001e28 <main+0x338>)
 8001bcc:	930c      	str	r3, [sp, #48]	@ 0x30
 8001bce:	4b97      	ldr	r3, [pc, #604]	@ (8001e2c <main+0x33c>)
 8001bd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001bd2:	4b97      	ldr	r3, [pc, #604]	@ (8001e30 <main+0x340>)
 8001bd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8001bd6:	4b97      	ldr	r3, [pc, #604]	@ (8001e34 <main+0x344>)
 8001bd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8001bda:	4b97      	ldr	r3, [pc, #604]	@ (8001e38 <main+0x348>)
 8001bdc:	9308      	str	r3, [sp, #32]
 8001bde:	4b97      	ldr	r3, [pc, #604]	@ (8001e3c <main+0x34c>)
 8001be0:	9307      	str	r3, [sp, #28]
 8001be2:	4b97      	ldr	r3, [pc, #604]	@ (8001e40 <main+0x350>)
 8001be4:	9306      	str	r3, [sp, #24]
 8001be6:	4b97      	ldr	r3, [pc, #604]	@ (8001e44 <main+0x354>)
 8001be8:	9305      	str	r3, [sp, #20]
 8001bea:	4b97      	ldr	r3, [pc, #604]	@ (8001e48 <main+0x358>)
 8001bec:	9304      	str	r3, [sp, #16]
 8001bee:	4b97      	ldr	r3, [pc, #604]	@ (8001e4c <main+0x35c>)
 8001bf0:	9303      	str	r3, [sp, #12]
 8001bf2:	4b97      	ldr	r3, [pc, #604]	@ (8001e50 <main+0x360>)
 8001bf4:	9302      	str	r3, [sp, #8]
 8001bf6:	4b97      	ldr	r3, [pc, #604]	@ (8001e54 <main+0x364>)
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	4b97      	ldr	r3, [pc, #604]	@ (8001e58 <main+0x368>)
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	4b97      	ldr	r3, [pc, #604]	@ (8001e5c <main+0x36c>)
 8001c00:	4a97      	ldr	r2, [pc, #604]	@ (8001e60 <main+0x370>)
 8001c02:	4998      	ldr	r1, [pc, #608]	@ (8001e64 <main+0x374>)
 8001c04:	4898      	ldr	r0, [pc, #608]	@ (8001e68 <main+0x378>)
 8001c06:	f7ff fd9d 	bl	8001744 <KalmanFilter_Init>

  // Update Kalman every 0.001 s (1,000 Hz)
  HAL_TIM_Base_Start_IT(&htim15);
 8001c0a:	4898      	ldr	r0, [pc, #608]	@ (8001e6c <main+0x37c>)
 8001c0c:	f006 fc0a 	bl	8008424 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  count_check += 1;
 8001c10:	4b97      	ldr	r3, [pc, #604]	@ (8001e70 <main+0x380>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3301      	adds	r3, #1
 8001c16:	4a96      	ldr	r2, [pc, #600]	@ (8001e70 <main+0x380>)
 8001c18:	6013      	str	r3, [r2, #0]

	  //------Modbus Function------//
	  Modbus_Protocal_Worker();
 8001c1a:	f7ff fb2b 	bl	8001274 <Modbus_Protocal_Worker>
	  check_vaccum_status();
 8001c1e:	f002 fa13 	bl	8004048 <check_vaccum_status>
	  check_gripper_status();
 8001c22:	f002 faaf 	bl	8004184 <check_gripper_status>
	  set_shelf();
 8001c26:	f002 fb55 	bl	80042d4 <set_shelf>
	  Pointmode();
 8001c2a:	f002 fbfd 	bl	8004428 <Pointmode>
	  Home();
 8001c2e:	f002 fc79 	bl	8004524 <Home>
//	  Run_jog();

	  static uint64_t timestamp = 0;
	  static uint64_t timestamp2 = 0;

	  currentTime = micros();
 8001c32:	f000 ffaf 	bl	8002b94 <micros>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	498e      	ldr	r1, [pc, #568]	@ (8001e74 <main+0x384>)
 8001c3c:	e9c1 2300 	strd	r2, r3, [r1]
	  if (max_velo < QEIdata.linearVel)
 8001c40:	4b8d      	ldr	r3, [pc, #564]	@ (8001e78 <main+0x388>)
 8001c42:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001c46:	4b8d      	ldr	r3, [pc, #564]	@ (8001e7c <main+0x38c>)
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c54:	dd03      	ble.n	8001c5e <main+0x16e>
	  {
		  max_velo = QEIdata.linearVel;
 8001c56:	4b88      	ldr	r3, [pc, #544]	@ (8001e78 <main+0x388>)
 8001c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5a:	4a88      	ldr	r2, [pc, #544]	@ (8001e7c <main+0x38c>)
 8001c5c:	6013      	str	r3, [r2, #0]
	  }

	  if(currentTime > timestamp2){
 8001c5e:	4b85      	ldr	r3, [pc, #532]	@ (8001e74 <main+0x384>)
 8001c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	4b85      	ldr	r3, [pc, #532]	@ (8001e80 <main+0x390>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	4282      	cmp	r2, r0
 8001c70:	418b      	sbcs	r3, r1
 8001c72:	f080 8158 	bcs.w	8001f26 <main+0x436>
		  timestamp2 = currentTime + 167; //6,000 Hz
 8001c76:	4b7f      	ldr	r3, [pc, #508]	@ (8001e74 <main+0x384>)
 8001c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7c:	f112 04a7 	adds.w	r4, r2, #167	@ 0xa7
 8001c80:	f143 0500 	adc.w	r5, r3, #0
 8001c84:	4622      	mov	r2, r4
 8001c86:	462b      	mov	r3, r5
 8001c88:	497d      	ldr	r1, [pc, #500]	@ (8001e80 <main+0x390>)
 8001c8a:	e9c1 2300 	strd	r2, r3, [r1]

		  //Read encoder
		  QEIEncoderPosVel_Update();
 8001c8e:	f000 ff97 	bl	8002bc0 <QEIEncoderPosVel_Update>

		  //Create Trajectory
		  q_f = setPosition;
 8001c92:	4b7c      	ldr	r3, [pc, #496]	@ (8001e84 <main+0x394>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a7c      	ldr	r2, [pc, #496]	@ (8001e88 <main+0x398>)
 8001c98:	6013      	str	r3, [r2, #0]
		  checkStartMoving();
 8001c9a:	f001 f8bd 	bl	8002e18 <checkStartMoving>
		  createTrajectory();
 8001c9e:	f001 faeb 	bl	8003278 <createTrajectory>

		  if(mode == 1){
 8001ca2:	4b7a      	ldr	r3, [pc, #488]	@ (8001e8c <main+0x39c>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	f040 8085 	bne.w	8001db6 <main+0x2c6>
			  LED_Auto();
 8001cac:	f002 fcf4 	bl	8004698 <LED_Auto>
			  if(fabs(setPosition - QEIdata.linearPos) <= 0.1 || setPosition == 0){
 8001cb0:	4b74      	ldr	r3, [pc, #464]	@ (8001e84 <main+0x394>)
 8001cb2:	ed93 7a00 	vldr	s14, [r3]
 8001cb6:	4b70      	ldr	r3, [pc, #448]	@ (8001e78 <main+0x388>)
 8001cb8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc0:	eef0 7ae7 	vabs.f32	s15, s15
 8001cc4:	ee17 0a90 	vmov	r0, s15
 8001cc8:	f7fe fc0a 	bl	80004e0 <__aeabi_f2d>
 8001ccc:	a342      	add	r3, pc, #264	@ (adr r3, 8001dd8 <main+0x2e8>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe fed9 	bl	8000a88 <__aeabi_dcmple>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d107      	bne.n	8001cec <main+0x1fc>
 8001cdc:	4b69      	ldr	r3, [pc, #420]	@ (8001e84 <main+0x394>)
 8001cde:	edd3 7a00 	vldr	s15, [r3]
 8001ce2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cea:	d104      	bne.n	8001cf6 <main+0x206>
				  Vin = 0;
 8001cec:	4b68      	ldr	r3, [pc, #416]	@ (8001e90 <main+0x3a0>)
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	e043      	b.n	8001d7e <main+0x28e>
//			  else if(setPosition - QEIdata.linearPos >= -5 && setPosition - QEIdata.linearPos < -0.1){
//			  	  Vin = -1.35;
//			  	  check = -1;
//			  }
			  else{
				  Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 - QEIdata.linearVel);
 8001cf6:	4b67      	ldr	r3, [pc, #412]	@ (8001e94 <main+0x3a4>)
 8001cf8:	ed93 7a00 	vldr	s14, [r3]
 8001cfc:	4b66      	ldr	r3, [pc, #408]	@ (8001e98 <main+0x3a8>)
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d06:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001d0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d0e:	4b5a      	ldr	r3, [pc, #360]	@ (8001e78 <main+0x388>)
 8001d10:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001d14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d18:	4b3a      	ldr	r3, [pc, #232]	@ (8001e04 <main+0x314>)
 8001d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d1c:	edc7 7a08 	vstr	s15, [r7, #32]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d22:	ed93 7a00 	vldr	s14, [r3]
 8001d26:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d2a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d36:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001d3e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d44:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d60:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Update state */
    S->state[1] = S->state[0];
 8001d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	6a3a      	ldr	r2, [r7, #32]
 8001d70:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	4a45      	ldr	r2, [pc, #276]	@ (8001e90 <main+0x3a0>)
 8001d7c:	6013      	str	r3, [r2, #0]
				  //Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
			  }
			  if(Vin > 24){
 8001d7e:	4b44      	ldr	r3, [pc, #272]	@ (8001e90 <main+0x3a0>)
 8001d80:	edd3 7a00 	vldr	s15, [r3]
 8001d84:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8001d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d90:	dd02      	ble.n	8001d98 <main+0x2a8>
	  			  Vin = 24;
 8001d92:	4b3f      	ldr	r3, [pc, #252]	@ (8001e90 <main+0x3a0>)
 8001d94:	4a41      	ldr	r2, [pc, #260]	@ (8001e9c <main+0x3ac>)
 8001d96:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 8001d98:	4b3d      	ldr	r3, [pc, #244]	@ (8001e90 <main+0x3a0>)
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 8001da2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001daa:	f140 809b 	bpl.w	8001ee4 <main+0x3f4>
				  Vin = -24;
 8001dae:	4b38      	ldr	r3, [pc, #224]	@ (8001e90 <main+0x3a0>)
 8001db0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ea0 <main+0x3b0>)
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	e096      	b.n	8001ee4 <main+0x3f4>
			  }
		  }
	      else if(mode == 2){ //manual (control with joy stick)
 8001db6:	4b35      	ldr	r3, [pc, #212]	@ (8001e8c <main+0x39c>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d172      	bne.n	8001ea4 <main+0x3b4>
	    	  LED_Manual();
 8001dbe:	f002 fc91 	bl	80046e4 <LED_Manual>
			  JoystickInput();
 8001dc2:	f001 fee9 	bl	8003b98 <JoystickInput>
			  button_up_down_input();
 8001dc6:	f001 ff47 	bl	8003c58 <button_up_down_input>
			  button_reset_input(); //set 0;
 8001dca:	f001 ffe7 	bl	8003d9c <button_reset_input>
			  button_save_position();
 8001dce:	f002 f86b 	bl	8003ea8 <button_save_position>
 8001dd2:	e087      	b.n	8001ee4 <main+0x3f4>
 8001dd4:	f3af 8000 	nop.w
 8001dd8:	9999999a 	.word	0x9999999a
 8001ddc:	3fb99999 	.word	0x3fb99999
 8001de0:	200004a8 	.word	0x200004a8
 8001de4:	200003dc 	.word	0x200003dc
 8001de8:	20000640 	.word	0x20000640
 8001dec:	20000b48 	.word	0x20000b48
 8001df0:	20000310 	.word	0x20000310
 8001df4:	20000574 	.word	0x20000574
 8001df8:	20000bd4 	.word	0x20000bd4
 8001dfc:	40400000 	.word	0x40400000
 8001e00:	38d1b717 	.word	0x38d1b717
 8001e04:	20000bf8 	.word	0x20000bf8
 8001e08:	3e99999a 	.word	0x3e99999a
 8001e0c:	3a03126f 	.word	0x3a03126f
 8001e10:	2000070c 	.word	0x2000070c
 8001e14:	20000c3c 	.word	0x20000c3c
 8001e18:	20000970 	.word	0x20000970
 8001e1c:	200008a4 	.word	0x200008a4
 8001e20:	20001114 	.word	0x20001114
 8001e24:	48000400 	.word	0x48000400
 8001e28:	2000131c 	.word	0x2000131c
 8001e2c:	20001384 	.word	0x20001384
 8001e30:	20001378 	.word	0x20001378
 8001e34:	20001374 	.word	0x20001374
 8001e38:	20001368 	.word	0x20001368
 8001e3c:	20001344 	.word	0x20001344
 8001e40:	20001320 	.word	0x20001320
 8001e44:	20001310 	.word	0x20001310
 8001e48:	20001304 	.word	0x20001304
 8001e4c:	2000025c 	.word	0x2000025c
 8001e50:	20000258 	.word	0x20000258
 8001e54:	20000254 	.word	0x20000254
 8001e58:	20000248 	.word	0x20000248
 8001e5c:	2000023c 	.word	0x2000023c
 8001e60:	200012f8 	.word	0x200012f8
 8001e64:	20000218 	.word	0x20000218
 8001e68:	200013b4 	.word	0x200013b4
 8001e6c:	200007d8 	.word	0x200007d8
 8001e70:	20001440 	.word	0x20001440
 8001e74:	200012f0 	.word	0x200012f0
 8001e78:	20000b00 	.word	0x20000b00
 8001e7c:	20000c24 	.word	0x20000c24
 8001e80:	20001448 	.word	0x20001448
 8001e84:	20000c1c 	.word	0x20000c1c
 8001e88:	20000b6c 	.word	0x20000b6c
 8001e8c:	20000200 	.word	0x20000200
 8001e90:	20000b60 	.word	0x20000b60
 8001e94:	20000c20 	.word	0x20000c20
 8001e98:	20000b7c 	.word	0x20000b7c
 8001e9c:	41c00000 	.word	0x41c00000
 8001ea0:	c1c00000 	.word	0xc1c00000
		  }
		  else if(mode == 3){ //stop mode
 8001ea4:	4bb4      	ldr	r3, [pc, #720]	@ (8002178 <main+0x688>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d104      	bne.n	8001eb6 <main+0x3c6>
			  Vin = Vin_force;
 8001eac:	4bb3      	ldr	r3, [pc, #716]	@ (800217c <main+0x68c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4ab3      	ldr	r2, [pc, #716]	@ (8002180 <main+0x690>)
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	e016      	b.n	8001ee4 <main+0x3f4>

//			  if(QEIdata.linearPos >= 40){
//				  Vin = 0;
//			  }
		  }
		  else if(mode == 4){ //Emergency mode
 8001eb6:	4bb0      	ldr	r3, [pc, #704]	@ (8002178 <main+0x688>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d112      	bne.n	8001ee4 <main+0x3f4>
			  Vin = 0;
 8001ebe:	4bb0      	ldr	r3, [pc, #704]	@ (8002180 <main+0x690>)
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
			  LED_Emergency();
 8001ec6:	f002 fb75 	bl	80045b4 <LED_Emergency>

			  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1){
 8001eca:	2104      	movs	r1, #4
 8001ecc:	48ad      	ldr	r0, [pc, #692]	@ (8002184 <main+0x694>)
 8001ece:	f005 f95d 	bl	800718c <HAL_GPIO_ReadPin>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <main+0x3f4>
				  mode = 2;
 8001ed8:	4ba7      	ldr	r3, [pc, #668]	@ (8002178 <main+0x688>)
 8001eda:	2202      	movs	r2, #2
 8001edc:	701a      	strb	r2, [r3, #0]
				  emergency_reset = 1;
 8001ede:	4baa      	ldr	r3, [pc, #680]	@ (8002188 <main+0x698>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
			  }
		  }

		  if(mode == 1){
 8001ee4:	4ba4      	ldr	r3, [pc, #656]	@ (8002178 <main+0x688>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d118      	bne.n	8001f1e <main+0x42e>
			  if(QEIdata.linearPos < -0.5 || QEIdata.linearPos > 450){
 8001eec:	4ba7      	ldr	r3, [pc, #668]	@ (800218c <main+0x69c>)
 8001eee:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ef2:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efe:	d409      	bmi.n	8001f14 <main+0x424>
 8001f00:	4ba2      	ldr	r3, [pc, #648]	@ (800218c <main+0x69c>)
 8001f02:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001f06:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8002190 <main+0x6a0>
 8001f0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f12:	dd06      	ble.n	8001f22 <main+0x432>
				  Vin = 0;
 8001f14:	4b9a      	ldr	r3, [pc, #616]	@ (8002180 <main+0x690>)
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	e001      	b.n	8001f22 <main+0x432>
			  }
		  }
		  else{
			  //software limit
			  SoftwareLimit();
 8001f1e:	f001 fde3 	bl	8003ae8 <SoftwareLimit>
		  }

		  //Drive Motor which PWM
		  DriveMotor();
 8001f22:	f001 fd85 	bl	8003a30 <DriveMotor>

	  }

	  if(currentTime > timestamp){
 8001f26:	4b9b      	ldr	r3, [pc, #620]	@ (8002194 <main+0x6a4>)
 8001f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4b99      	ldr	r3, [pc, #612]	@ (8002198 <main+0x6a8>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	4282      	cmp	r2, r0
 8001f38:	418b      	sbcs	r3, r1
 8001f3a:	f080 80f0 	bcs.w	800211e <main+0x62e>
		  timestamp = currentTime + 4000; //250 Hz
 8001f3e:	4b95      	ldr	r3, [pc, #596]	@ (8002194 <main+0x6a4>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f512 687a 	adds.w	r8, r2, #4000	@ 0xfa0
 8001f48:	f143 0900 	adc.w	r9, r3, #0
 8001f4c:	4642      	mov	r2, r8
 8001f4e:	464b      	mov	r3, r9
 8001f50:	4991      	ldr	r1, [pc, #580]	@ (8002198 <main+0x6a8>)
 8001f52:	e9c1 2300 	strd	r2, r3, [r1]

		  //control mode
		  if(mode == 1){ //auto
 8001f56:	4b88      	ldr	r3, [pc, #544]	@ (8002178 <main+0x688>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	f040 80df 	bne.w	800211e <main+0x62e>
			  if(fabs(setPosition - QEIdata.linearPos) <= 0.2 || setPosition == 0){
 8001f60:	4b8e      	ldr	r3, [pc, #568]	@ (800219c <main+0x6ac>)
 8001f62:	ed93 7a00 	vldr	s14, [r3]
 8001f66:	4b89      	ldr	r3, [pc, #548]	@ (800218c <main+0x69c>)
 8001f68:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f70:	eef0 7ae7 	vabs.f32	s15, s15
 8001f74:	ee17 0a90 	vmov	r0, s15
 8001f78:	f7fe fab2 	bl	80004e0 <__aeabi_f2d>
 8001f7c:	a37c      	add	r3, pc, #496	@ (adr r3, 8002170 <main+0x680>)
 8001f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f82:	f7fe fd81 	bl	8000a88 <__aeabi_dcmple>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d107      	bne.n	8001f9c <main+0x4ac>
 8001f8c:	4b83      	ldr	r3, [pc, #524]	@ (800219c <main+0x6ac>)
 8001f8e:	edd3 7a00 	vldr	s15, [r3]
 8001f92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9a:	d104      	bne.n	8001fa6 <main+0x4b6>
				  Vin = 0;
 8001f9c:	4b78      	ldr	r3, [pc, #480]	@ (8002180 <main+0x690>)
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	e087      	b.n	80020b6 <main+0x5c6>
//			  else if(setPosition - QEIdata.linearPos >= -5 && setPosition - QEIdata.linearPos < -0.1){
//				  Vin = -1.5;
//				  check = -1;
//			  }
			  else{
				  setVelocity = arm_pid_f32(&PID1, (setPosition + ref_p)/2 - QEIdata.linearPos);
 8001fa6:	4b7d      	ldr	r3, [pc, #500]	@ (800219c <main+0x6ac>)
 8001fa8:	ed93 7a00 	vldr	s14, [r3]
 8001fac:	4b7c      	ldr	r3, [pc, #496]	@ (80021a0 <main+0x6b0>)
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001fba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fbe:	4b73      	ldr	r3, [pc, #460]	@ (800218c <main+0x69c>)
 8001fc0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc8:	4b76      	ldr	r3, [pc, #472]	@ (80021a4 <main+0x6b4>)
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	edc7 7a02 	vstr	s15, [r7, #8]
    out = (S->A0 * in) +
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	ed93 7a00 	vldr	s14, [r3]
 8001fd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fda:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	edd3 6a01 	vldr	s13, [r3, #4]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fea:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001fee:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002002:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800200c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002010:	edc7 7a01 	vstr	s15, [r7, #4]
    S->state[1] = S->state[0];
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	615a      	str	r2, [r3, #20]
    return (out);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a5f      	ldr	r2, [pc, #380]	@ (80021a8 <main+0x6b8>)
 800202c:	6013      	str	r3, [r2, #0]
				  Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 + QEIdata.linearVel);
 800202e:	4b5e      	ldr	r3, [pc, #376]	@ (80021a8 <main+0x6b8>)
 8002030:	ed93 7a00 	vldr	s14, [r3]
 8002034:	4b5d      	ldr	r3, [pc, #372]	@ (80021ac <main+0x6bc>)
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002042:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002046:	4b51      	ldr	r3, [pc, #324]	@ (800218c <main+0x69c>)
 8002048:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800204c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002050:	4b57      	ldr	r3, [pc, #348]	@ (80021b0 <main+0x6c0>)
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	edc7 7a05 	vstr	s15, [r7, #20]
    out = (S->A0 * in) +
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	ed93 7a00 	vldr	s14, [r3]
 800205e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002062:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	edd3 6a01 	vldr	s13, [r3, #4]
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002072:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002076:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	edd3 7a04 	vldr	s15, [r3, #16]
 8002086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800208a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002098:	edc7 7a04 	vstr	s15, [r7, #16]
    S->state[1] = S->state[0];
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	615a      	str	r2, [r3, #20]
    return (out);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4a33      	ldr	r2, [pc, #204]	@ (8002180 <main+0x690>)
 80020b4:	6013      	str	r3, [r2, #0]
				  //Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
			  }

			  if(Vin > 24){
 80020b6:	4b32      	ldr	r3, [pc, #200]	@ (8002180 <main+0x690>)
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80020c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c8:	dd02      	ble.n	80020d0 <main+0x5e0>
				  Vin = 24;
 80020ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002180 <main+0x690>)
 80020cc:	4a39      	ldr	r2, [pc, #228]	@ (80021b4 <main+0x6c4>)
 80020ce:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 80020d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002180 <main+0x690>)
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 80020da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e2:	d502      	bpl.n	80020ea <main+0x5fa>
				  Vin = -24;
 80020e4:	4b26      	ldr	r3, [pc, #152]	@ (8002180 <main+0x690>)
 80020e6:	4a34      	ldr	r2, [pc, #208]	@ (80021b8 <main+0x6c8>)
 80020e8:	601a      	str	r2, [r3, #0]
			  }

			  if(QEIdata.linearPos < -0.5 || QEIdata.linearPos > 450){
 80020ea:	4b28      	ldr	r3, [pc, #160]	@ (800218c <main+0x69c>)
 80020ec:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80020f0:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80020f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fc:	d409      	bmi.n	8002112 <main+0x622>
 80020fe:	4b23      	ldr	r3, [pc, #140]	@ (800218c <main+0x69c>)
 8002100:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002104:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002190 <main+0x6a0>
 8002108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800210c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002110:	dd03      	ble.n	800211a <main+0x62a>
			 	  Vin = 0;
 8002112:	4b1b      	ldr	r3, [pc, #108]	@ (8002180 <main+0x690>)
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
			  }

			  //Drive Motor which PWM
			  DriveMotor();
 800211a:	f001 fc89 	bl	8003a30 <DriveMotor>
		  }

	  }

	  if((currentTime > timestamp_savestate)&& (trigger_savestate == 1)){
 800211e:	4b1d      	ldr	r3, [pc, #116]	@ (8002194 <main+0x6a4>)
 8002120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	4b24      	ldr	r3, [pc, #144]	@ (80021bc <main+0x6cc>)
 800212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212e:	4282      	cmp	r2, r0
 8002130:	418b      	sbcs	r3, r1
 8002132:	f4bf ad6d 	bcs.w	8001c10 <main+0x120>
 8002136:	4b22      	ldr	r3, [pc, #136]	@ (80021c0 <main+0x6d0>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b01      	cmp	r3, #1
 800213c:	f47f ad68 	bne.w	8001c10 <main+0x120>
		   S_top = S_top_savestate;
 8002140:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <main+0x6d4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a20      	ldr	r2, [pc, #128]	@ (80021c8 <main+0x6d8>)
 8002146:	6013      	str	r3, [r2, #0]
		   S_down = S_down_savestate;
 8002148:	4b20      	ldr	r3, [pc, #128]	@ (80021cc <main+0x6dc>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a20      	ldr	r2, [pc, #128]	@ (80021d0 <main+0x6e0>)
 800214e:	6013      	str	r3, [r2, #0]
		   mode = mode_savestate;
 8002150:	4b20      	ldr	r3, [pc, #128]	@ (80021d4 <main+0x6e4>)
 8002152:	781a      	ldrb	r2, [r3, #0]
 8002154:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <main+0x688>)
 8002156:	701a      	strb	r2, [r3, #0]
		   trigger_savestate = 0;
 8002158:	4b19      	ldr	r3, [pc, #100]	@ (80021c0 <main+0x6d0>)
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
		   check_noise += 1;
 800215e:	4b1e      	ldr	r3, [pc, #120]	@ (80021d8 <main+0x6e8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	3301      	adds	r3, #1
 8002164:	4a1c      	ldr	r2, [pc, #112]	@ (80021d8 <main+0x6e8>)
 8002166:	6013      	str	r3, [r2, #0]
  {
 8002168:	e552      	b.n	8001c10 <main+0x120>
 800216a:	bf00      	nop
 800216c:	f3af 8000 	nop.w
 8002170:	9999999a 	.word	0x9999999a
 8002174:	3fc99999 	.word	0x3fc99999
 8002178:	20000200 	.word	0x20000200
 800217c:	20000b64 	.word	0x20000b64
 8002180:	20000b60 	.word	0x20000b60
 8002184:	48000c00 	.word	0x48000c00
 8002188:	20000bb4 	.word	0x20000bb4
 800218c:	20000b00 	.word	0x20000b00
 8002190:	43e10000 	.word	0x43e10000
 8002194:	200012f0 	.word	0x200012f0
 8002198:	20001450 	.word	0x20001450
 800219c:	20000c1c 	.word	0x20000c1c
 80021a0:	20000b78 	.word	0x20000b78
 80021a4:	20000bd4 	.word	0x20000bd4
 80021a8:	20000c20 	.word	0x20000c20
 80021ac:	20000b7c 	.word	0x20000b7c
 80021b0:	20000bf8 	.word	0x20000bf8
 80021b4:	41c00000 	.word	0x41c00000
 80021b8:	c1c00000 	.word	0xc1c00000
 80021bc:	200012d0 	.word	0x200012d0
 80021c0:	200012e8 	.word	0x200012e8
 80021c4:	20000c30 	.word	0x20000c30
 80021c8:	20000c28 	.word	0x20000c28
 80021cc:	20000c34 	.word	0x20000c34
 80021d0:	20000c2c 	.word	0x20000c2c
 80021d4:	20000201 	.word	0x20000201
 80021d8:	200012ec 	.word	0x200012ec

080021dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b094      	sub	sp, #80	@ 0x50
 80021e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021e2:	f107 0318 	add.w	r3, r7, #24
 80021e6:	2238      	movs	r2, #56	@ 0x38
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f00a fc8e 	bl	800cb0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
 80021fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80021fe:	2000      	movs	r0, #0
 8002200:	f005 f80c 	bl	800721c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002204:	2302      	movs	r3, #2
 8002206:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002208:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800220e:	2340      	movs	r3, #64	@ 0x40
 8002210:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002212:	2302      	movs	r3, #2
 8002214:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002216:	2302      	movs	r3, #2
 8002218:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800221a:	2304      	movs	r3, #4
 800221c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800221e:	2355      	movs	r3, #85	@ 0x55
 8002220:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002222:	2302      	movs	r3, #2
 8002224:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002226:	2302      	movs	r3, #2
 8002228:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800222a:	2302      	movs	r3, #2
 800222c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800222e:	f107 0318 	add.w	r3, r7, #24
 8002232:	4618      	mov	r0, r3
 8002234:	f005 f8a6 	bl	8007384 <HAL_RCC_OscConfig>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800223e:	f002 fa77 	bl	8004730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002242:	230f      	movs	r3, #15
 8002244:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002246:	2303      	movs	r3, #3
 8002248:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	2104      	movs	r1, #4
 800225a:	4618      	mov	r0, r3
 800225c:	f005 fba4 	bl	80079a8 <HAL_RCC_ClockConfig>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002266:	f002 fa63 	bl	8004730 <Error_Handler>
  }
}
 800226a:	bf00      	nop
 800226c:	3750      	adds	r7, #80	@ 0x50
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08c      	sub	sp, #48	@ 0x30
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800227a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	2220      	movs	r2, #32
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f00a fc3d 	bl	800cb0c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002292:	4b3a      	ldr	r3, [pc, #232]	@ (800237c <MX_ADC1_Init+0x108>)
 8002294:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002298:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800229a:	4b38      	ldr	r3, [pc, #224]	@ (800237c <MX_ADC1_Init+0x108>)
 800229c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80022a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022a2:	4b36      	ldr	r3, [pc, #216]	@ (800237c <MX_ADC1_Init+0x108>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022a8:	4b34      	ldr	r3, [pc, #208]	@ (800237c <MX_ADC1_Init+0x108>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80022ae:	4b33      	ldr	r3, [pc, #204]	@ (800237c <MX_ADC1_Init+0x108>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80022b4:	4b31      	ldr	r3, [pc, #196]	@ (800237c <MX_ADC1_Init+0x108>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022ba:	4b30      	ldr	r3, [pc, #192]	@ (800237c <MX_ADC1_Init+0x108>)
 80022bc:	2204      	movs	r2, #4
 80022be:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80022c0:	4b2e      	ldr	r3, [pc, #184]	@ (800237c <MX_ADC1_Init+0x108>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022c6:	4b2d      	ldr	r3, [pc, #180]	@ (800237c <MX_ADC1_Init+0x108>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80022cc:	4b2b      	ldr	r3, [pc, #172]	@ (800237c <MX_ADC1_Init+0x108>)
 80022ce:	2202      	movs	r2, #2
 80022d0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022d2:	4b2a      	ldr	r3, [pc, #168]	@ (800237c <MX_ADC1_Init+0x108>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80022da:	4b28      	ldr	r3, [pc, #160]	@ (800237c <MX_ADC1_Init+0x108>)
 80022dc:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 80022e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80022e2:	4b26      	ldr	r3, [pc, #152]	@ (800237c <MX_ADC1_Init+0x108>)
 80022e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80022ea:	4b24      	ldr	r3, [pc, #144]	@ (800237c <MX_ADC1_Init+0x108>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80022f2:	4b22      	ldr	r3, [pc, #136]	@ (800237c <MX_ADC1_Init+0x108>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80022f8:	4b20      	ldr	r3, [pc, #128]	@ (800237c <MX_ADC1_Init+0x108>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002300:	481e      	ldr	r0, [pc, #120]	@ (800237c <MX_ADC1_Init+0x108>)
 8002302:	f003 f839 	bl	8005378 <HAL_ADC_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800230c:	f002 fa10 	bl	8004730 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002314:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002318:	4619      	mov	r1, r3
 800231a:	4818      	ldr	r0, [pc, #96]	@ (800237c <MX_ADC1_Init+0x108>)
 800231c:	f004 f86a 	bl	80063f4 <HAL_ADCEx_MultiModeConfigChannel>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8002326:	f002 fa03 	bl	8004730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800232a:	4b15      	ldr	r3, [pc, #84]	@ (8002380 <MX_ADC1_Init+0x10c>)
 800232c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800232e:	2306      	movs	r3, #6
 8002330:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002336:	237f      	movs	r3, #127	@ 0x7f
 8002338:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800233a:	2304      	movs	r3, #4
 800233c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	4619      	mov	r1, r3
 8002346:	480d      	ldr	r0, [pc, #52]	@ (800237c <MX_ADC1_Init+0x108>)
 8002348:	f003 fac4 	bl	80058d4 <HAL_ADC_ConfigChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8002352:	f002 f9ed 	bl	8004730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002356:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <MX_ADC1_Init+0x110>)
 8002358:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800235a:	230c      	movs	r3, #12
 800235c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	4619      	mov	r1, r3
 8002362:	4806      	ldr	r0, [pc, #24]	@ (800237c <MX_ADC1_Init+0x108>)
 8002364:	f003 fab6 	bl	80058d4 <HAL_ADC_ConfigChannel>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800236e:	f002 f9df 	bl	8004730 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002372:	bf00      	nop
 8002374:	3730      	adds	r7, #48	@ 0x30
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000310 	.word	0x20000310
 8002380:	04300002 	.word	0x04300002
 8002384:	14f00020 	.word	0x14f00020

08002388 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08c      	sub	sp, #48	@ 0x30
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	2224      	movs	r2, #36	@ 0x24
 8002394:	2100      	movs	r1, #0
 8002396:	4618      	mov	r0, r3
 8002398:	f00a fbb8 	bl	800cb0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239c:	463b      	mov	r3, r7
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023a6:	4b21      	ldr	r3, [pc, #132]	@ (800242c <MX_TIM2_Init+0xa4>)
 80023a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023ae:	4b1f      	ldr	r3, [pc, #124]	@ (800242c <MX_TIM2_Init+0xa4>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b4:	4b1d      	ldr	r3, [pc, #116]	@ (800242c <MX_TIM2_Init+0xa4>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80023ba:	4b1c      	ldr	r3, [pc, #112]	@ (800242c <MX_TIM2_Init+0xa4>)
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c2:	4b1a      	ldr	r3, [pc, #104]	@ (800242c <MX_TIM2_Init+0xa4>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c8:	4b18      	ldr	r3, [pc, #96]	@ (800242c <MX_TIM2_Init+0xa4>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023ce:	2303      	movs	r3, #3
 80023d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023d6:	2301      	movs	r3, #1
 80023d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80023de:	2302      	movs	r3, #2
 80023e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023e2:	2300      	movs	r3, #0
 80023e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023e6:	2301      	movs	r3, #1
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023ea:	2300      	movs	r3, #0
 80023ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80023f2:	f107 030c 	add.w	r3, r7, #12
 80023f6:	4619      	mov	r1, r3
 80023f8:	480c      	ldr	r0, [pc, #48]	@ (800242c <MX_TIM2_Init+0xa4>)
 80023fa:	f006 fb01 	bl	8008a00 <HAL_TIM_Encoder_Init>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002404:	f002 f994 	bl	8004730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002408:	2300      	movs	r3, #0
 800240a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002410:	463b      	mov	r3, r7
 8002412:	4619      	mov	r1, r3
 8002414:	4805      	ldr	r0, [pc, #20]	@ (800242c <MX_TIM2_Init+0xa4>)
 8002416:	f007 fea9 	bl	800a16c <HAL_TIMEx_MasterConfigSynchronization>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002420:	f002 f986 	bl	8004730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002424:	bf00      	nop
 8002426:	3730      	adds	r7, #48	@ 0x30
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	200003dc 	.word	0x200003dc

08002430 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08e      	sub	sp, #56	@ 0x38
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002436:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002444:	f107 031c 	add.w	r3, r7, #28
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002450:	463b      	mov	r3, r7
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
 800245c:	611a      	str	r2, [r3, #16]
 800245e:	615a      	str	r2, [r3, #20]
 8002460:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002462:	4b2d      	ldr	r3, [pc, #180]	@ (8002518 <MX_TIM3_Init+0xe8>)
 8002464:	4a2d      	ldr	r2, [pc, #180]	@ (800251c <MX_TIM3_Init+0xec>)
 8002466:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8002468:	4b2b      	ldr	r3, [pc, #172]	@ (8002518 <MX_TIM3_Init+0xe8>)
 800246a:	22a9      	movs	r2, #169	@ 0xa9
 800246c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246e:	4b2a      	ldr	r3, [pc, #168]	@ (8002518 <MX_TIM3_Init+0xe8>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002474:	4b28      	ldr	r3, [pc, #160]	@ (8002518 <MX_TIM3_Init+0xe8>)
 8002476:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800247a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247c:	4b26      	ldr	r3, [pc, #152]	@ (8002518 <MX_TIM3_Init+0xe8>)
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002482:	4b25      	ldr	r3, [pc, #148]	@ (8002518 <MX_TIM3_Init+0xe8>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002488:	4823      	ldr	r0, [pc, #140]	@ (8002518 <MX_TIM3_Init+0xe8>)
 800248a:	f005 fef7 	bl	800827c <HAL_TIM_Base_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002494:	f002 f94c 	bl	8004730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002498:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800249c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800249e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024a2:	4619      	mov	r1, r3
 80024a4:	481c      	ldr	r0, [pc, #112]	@ (8002518 <MX_TIM3_Init+0xe8>)
 80024a6:	f006 fe7b 	bl	80091a0 <HAL_TIM_ConfigClockSource>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80024b0:	f002 f93e 	bl	8004730 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024b4:	4818      	ldr	r0, [pc, #96]	@ (8002518 <MX_TIM3_Init+0xe8>)
 80024b6:	f006 f82d 	bl	8008514 <HAL_TIM_PWM_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80024c0:	f002 f936 	bl	8004730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024cc:	f107 031c 	add.w	r3, r7, #28
 80024d0:	4619      	mov	r1, r3
 80024d2:	4811      	ldr	r0, [pc, #68]	@ (8002518 <MX_TIM3_Init+0xe8>)
 80024d4:	f007 fe4a 	bl	800a16c <HAL_TIMEx_MasterConfigSynchronization>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80024de:	f002 f927 	bl	8004730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024e2:	2360      	movs	r3, #96	@ 0x60
 80024e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80024e6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80024ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024f4:	463b      	mov	r3, r7
 80024f6:	2200      	movs	r2, #0
 80024f8:	4619      	mov	r1, r3
 80024fa:	4807      	ldr	r0, [pc, #28]	@ (8002518 <MX_TIM3_Init+0xe8>)
 80024fc:	f006 fd3c 	bl	8008f78 <HAL_TIM_PWM_ConfigChannel>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002506:	f002 f913 	bl	8004730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800250a:	4803      	ldr	r0, [pc, #12]	@ (8002518 <MX_TIM3_Init+0xe8>)
 800250c:	f002 fabc 	bl	8004a88 <HAL_TIM_MspPostInit>

}
 8002510:	bf00      	nop
 8002512:	3738      	adds	r7, #56	@ 0x38
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	200004a8 	.word	0x200004a8
 800251c:	40000400 	.word	0x40000400

08002520 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002526:	f107 0310 	add.w	r3, r7, #16
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800253e:	4b1d      	ldr	r3, [pc, #116]	@ (80025b4 <MX_TIM4_Init+0x94>)
 8002540:	4a1d      	ldr	r2, [pc, #116]	@ (80025b8 <MX_TIM4_Init+0x98>)
 8002542:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8002544:	4b1b      	ldr	r3, [pc, #108]	@ (80025b4 <MX_TIM4_Init+0x94>)
 8002546:	22a9      	movs	r2, #169	@ 0xa9
 8002548:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254a:	4b1a      	ldr	r3, [pc, #104]	@ (80025b4 <MX_TIM4_Init+0x94>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002550:	4b18      	ldr	r3, [pc, #96]	@ (80025b4 <MX_TIM4_Init+0x94>)
 8002552:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002556:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002558:	4b16      	ldr	r3, [pc, #88]	@ (80025b4 <MX_TIM4_Init+0x94>)
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255e:	4b15      	ldr	r3, [pc, #84]	@ (80025b4 <MX_TIM4_Init+0x94>)
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002564:	4813      	ldr	r0, [pc, #76]	@ (80025b4 <MX_TIM4_Init+0x94>)
 8002566:	f005 fe89 	bl	800827c <HAL_TIM_Base_Init>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002570:	f002 f8de 	bl	8004730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002574:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002578:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800257a:	f107 0310 	add.w	r3, r7, #16
 800257e:	4619      	mov	r1, r3
 8002580:	480c      	ldr	r0, [pc, #48]	@ (80025b4 <MX_TIM4_Init+0x94>)
 8002582:	f006 fe0d 	bl	80091a0 <HAL_TIM_ConfigClockSource>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800258c:	f002 f8d0 	bl	8004730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002590:	2320      	movs	r3, #32
 8002592:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	4619      	mov	r1, r3
 800259c:	4805      	ldr	r0, [pc, #20]	@ (80025b4 <MX_TIM4_Init+0x94>)
 800259e:	f007 fde5 	bl	800a16c <HAL_TIMEx_MasterConfigSynchronization>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80025a8:	f002 f8c2 	bl	8004730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025ac:	bf00      	nop
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000574 	.word	0x20000574
 80025b8:	40000800 	.word	0x40000800

080025bc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c2:	f107 0310 	add.w	r3, r7, #16
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025da:	4b1d      	ldr	r3, [pc, #116]	@ (8002650 <MX_TIM5_Init+0x94>)
 80025dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002654 <MX_TIM5_Init+0x98>)
 80025de:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80025e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <MX_TIM5_Init+0x94>)
 80025e2:	22a9      	movs	r2, #169	@ 0xa9
 80025e4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002650 <MX_TIM5_Init+0x94>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80025ec:	4b18      	ldr	r3, [pc, #96]	@ (8002650 <MX_TIM5_Init+0x94>)
 80025ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025f2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f4:	4b16      	ldr	r3, [pc, #88]	@ (8002650 <MX_TIM5_Init+0x94>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fa:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <MX_TIM5_Init+0x94>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002600:	4813      	ldr	r0, [pc, #76]	@ (8002650 <MX_TIM5_Init+0x94>)
 8002602:	f005 fe3b 	bl	800827c <HAL_TIM_Base_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800260c:	f002 f890 	bl	8004730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002610:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002614:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002616:	f107 0310 	add.w	r3, r7, #16
 800261a:	4619      	mov	r1, r3
 800261c:	480c      	ldr	r0, [pc, #48]	@ (8002650 <MX_TIM5_Init+0x94>)
 800261e:	f006 fdbf 	bl	80091a0 <HAL_TIM_ConfigClockSource>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002628:	f002 f882 	bl	8004730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800262c:	2300      	movs	r3, #0
 800262e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	4619      	mov	r1, r3
 8002638:	4805      	ldr	r0, [pc, #20]	@ (8002650 <MX_TIM5_Init+0x94>)
 800263a:	f007 fd97 	bl	800a16c <HAL_TIMEx_MasterConfigSynchronization>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002644:	f002 f874 	bl	8004730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002648:	bf00      	nop
 800264a:	3720      	adds	r7, #32
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000640 	.word	0x20000640
 8002654:	40000c00 	.word	0x40000c00

08002658 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002668:	4b15      	ldr	r3, [pc, #84]	@ (80026c0 <MX_TIM6_Init+0x68>)
 800266a:	4a16      	ldr	r2, [pc, #88]	@ (80026c4 <MX_TIM6_Init+0x6c>)
 800266c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1699;
 800266e:	4b14      	ldr	r3, [pc, #80]	@ (80026c0 <MX_TIM6_Init+0x68>)
 8002670:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002674:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002676:	4b12      	ldr	r3, [pc, #72]	@ (80026c0 <MX_TIM6_Init+0x68>)
 8002678:	2200      	movs	r2, #0
 800267a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 800267c:	4b10      	ldr	r3, [pc, #64]	@ (80026c0 <MX_TIM6_Init+0x68>)
 800267e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002682:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002684:	4b0e      	ldr	r3, [pc, #56]	@ (80026c0 <MX_TIM6_Init+0x68>)
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800268a:	480d      	ldr	r0, [pc, #52]	@ (80026c0 <MX_TIM6_Init+0x68>)
 800268c:	f005 fdf6 	bl	800827c <HAL_TIM_Base_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002696:	f002 f84b 	bl	8004730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	4619      	mov	r1, r3
 80026a6:	4806      	ldr	r0, [pc, #24]	@ (80026c0 <MX_TIM6_Init+0x68>)
 80026a8:	f007 fd60 	bl	800a16c <HAL_TIMEx_MasterConfigSynchronization>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80026b2:	f002 f83d 	bl	8004730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	2000070c 	.word	0x2000070c
 80026c4:	40001000 	.word	0x40001000

080026c8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ce:	f107 0310 	add.w	r3, r7, #16
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80026e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002764 <MX_TIM15_Init+0x9c>)
 80026e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002768 <MX_TIM15_Init+0xa0>)
 80026ea:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 169;
 80026ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002764 <MX_TIM15_Init+0x9c>)
 80026ee:	22a9      	movs	r2, #169	@ 0xa9
 80026f0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002764 <MX_TIM15_Init+0x9c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80026f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002764 <MX_TIM15_Init+0x9c>)
 80026fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026fe:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002700:	4b18      	ldr	r3, [pc, #96]	@ (8002764 <MX_TIM15_Init+0x9c>)
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002706:	4b17      	ldr	r3, [pc, #92]	@ (8002764 <MX_TIM15_Init+0x9c>)
 8002708:	2200      	movs	r2, #0
 800270a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270c:	4b15      	ldr	r3, [pc, #84]	@ (8002764 <MX_TIM15_Init+0x9c>)
 800270e:	2200      	movs	r2, #0
 8002710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002712:	4814      	ldr	r0, [pc, #80]	@ (8002764 <MX_TIM15_Init+0x9c>)
 8002714:	f005 fdb2 	bl	800827c <HAL_TIM_Base_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800271e:	f002 f807 	bl	8004730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002726:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002728:	f107 0310 	add.w	r3, r7, #16
 800272c:	4619      	mov	r1, r3
 800272e:	480d      	ldr	r0, [pc, #52]	@ (8002764 <MX_TIM15_Init+0x9c>)
 8002730:	f006 fd36 	bl	80091a0 <HAL_TIM_ConfigClockSource>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800273a:	f001 fff9 	bl	8004730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	4619      	mov	r1, r3
 800274a:	4806      	ldr	r0, [pc, #24]	@ (8002764 <MX_TIM15_Init+0x9c>)
 800274c:	f007 fd0e 	bl	800a16c <HAL_TIMEx_MasterConfigSynchronization>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002756:	f001 ffeb 	bl	8004730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800275a:	bf00      	nop
 800275c:	3720      	adds	r7, #32
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200007d8 	.word	0x200007d8
 8002768:	40014000 	.word	0x40014000

0800276c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002770:	4b14      	ldr	r3, [pc, #80]	@ (80027c4 <MX_TIM16_Init+0x58>)
 8002772:	4a15      	ldr	r2, [pc, #84]	@ (80027c8 <MX_TIM16_Init+0x5c>)
 8002774:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002776:	4b13      	ldr	r3, [pc, #76]	@ (80027c4 <MX_TIM16_Init+0x58>)
 8002778:	2200      	movs	r2, #0
 800277a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800277c:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <MX_TIM16_Init+0x58>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002782:	4b10      	ldr	r3, [pc, #64]	@ (80027c4 <MX_TIM16_Init+0x58>)
 8002784:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002788:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800278a:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <MX_TIM16_Init+0x58>)
 800278c:	2200      	movs	r2, #0
 800278e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002790:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <MX_TIM16_Init+0x58>)
 8002792:	2200      	movs	r2, #0
 8002794:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002796:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <MX_TIM16_Init+0x58>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800279c:	4809      	ldr	r0, [pc, #36]	@ (80027c4 <MX_TIM16_Init+0x58>)
 800279e:	f005 fd6d 	bl	800827c <HAL_TIM_Base_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80027a8:	f001 ffc2 	bl	8004730 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80027ac:	2108      	movs	r1, #8
 80027ae:	4805      	ldr	r0, [pc, #20]	@ (80027c4 <MX_TIM16_Init+0x58>)
 80027b0:	f006 f830 	bl	8008814 <HAL_TIM_OnePulse_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 80027ba:	f001 ffb9 	bl	8004730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200008a4 	.word	0x200008a4
 80027c8:	40014400 	.word	0x40014400

080027cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027d0:	4b23      	ldr	r3, [pc, #140]	@ (8002860 <MX_USART2_UART_Init+0x94>)
 80027d2:	4a24      	ldr	r2, [pc, #144]	@ (8002864 <MX_USART2_UART_Init+0x98>)
 80027d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80027d6:	4b22      	ldr	r3, [pc, #136]	@ (8002860 <MX_USART2_UART_Init+0x94>)
 80027d8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80027dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80027de:	4b20      	ldr	r3, [pc, #128]	@ (8002860 <MX_USART2_UART_Init+0x94>)
 80027e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027e4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002860 <MX_USART2_UART_Init+0x94>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80027ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002860 <MX_USART2_UART_Init+0x94>)
 80027ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002860 <MX_USART2_UART_Init+0x94>)
 80027f6:	220c      	movs	r2, #12
 80027f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027fa:	4b19      	ldr	r3, [pc, #100]	@ (8002860 <MX_USART2_UART_Init+0x94>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002800:	4b17      	ldr	r3, [pc, #92]	@ (8002860 <MX_USART2_UART_Init+0x94>)
 8002802:	2200      	movs	r2, #0
 8002804:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002806:	4b16      	ldr	r3, [pc, #88]	@ (8002860 <MX_USART2_UART_Init+0x94>)
 8002808:	2200      	movs	r2, #0
 800280a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800280c:	4b14      	ldr	r3, [pc, #80]	@ (8002860 <MX_USART2_UART_Init+0x94>)
 800280e:	2200      	movs	r2, #0
 8002810:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002812:	4b13      	ldr	r3, [pc, #76]	@ (8002860 <MX_USART2_UART_Init+0x94>)
 8002814:	2200      	movs	r2, #0
 8002816:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002818:	4811      	ldr	r0, [pc, #68]	@ (8002860 <MX_USART2_UART_Init+0x94>)
 800281a:	f007 fd8d 	bl	800a338 <HAL_UART_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002824:	f001 ff84 	bl	8004730 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002828:	2100      	movs	r1, #0
 800282a:	480d      	ldr	r0, [pc, #52]	@ (8002860 <MX_USART2_UART_Init+0x94>)
 800282c:	f009 fbad 	bl	800bf8a <HAL_UARTEx_SetTxFifoThreshold>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002836:	f001 ff7b 	bl	8004730 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800283a:	2100      	movs	r1, #0
 800283c:	4808      	ldr	r0, [pc, #32]	@ (8002860 <MX_USART2_UART_Init+0x94>)
 800283e:	f009 fbe2 	bl	800c006 <HAL_UARTEx_SetRxFifoThreshold>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002848:	f001 ff72 	bl	8004730 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800284c:	4804      	ldr	r0, [pc, #16]	@ (8002860 <MX_USART2_UART_Init+0x94>)
 800284e:	f009 fb63 	bl	800bf18 <HAL_UARTEx_DisableFifoMode>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002858:	f001 ff6a 	bl	8004730 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000970 	.word	0x20000970
 8002864:	40004400 	.word	0x40004400

08002868 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800286e:	4b20      	ldr	r3, [pc, #128]	@ (80028f0 <MX_DMA_Init+0x88>)
 8002870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002872:	4a1f      	ldr	r2, [pc, #124]	@ (80028f0 <MX_DMA_Init+0x88>)
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	6493      	str	r3, [r2, #72]	@ 0x48
 800287a:	4b1d      	ldr	r3, [pc, #116]	@ (80028f0 <MX_DMA_Init+0x88>)
 800287c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002886:	4b1a      	ldr	r3, [pc, #104]	@ (80028f0 <MX_DMA_Init+0x88>)
 8002888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800288a:	4a19      	ldr	r2, [pc, #100]	@ (80028f0 <MX_DMA_Init+0x88>)
 800288c:	f043 0302 	orr.w	r3, r3, #2
 8002890:	6493      	str	r3, [r2, #72]	@ 0x48
 8002892:	4b17      	ldr	r3, [pc, #92]	@ (80028f0 <MX_DMA_Init+0x88>)
 8002894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800289e:	4b14      	ldr	r3, [pc, #80]	@ (80028f0 <MX_DMA_Init+0x88>)
 80028a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a2:	4a13      	ldr	r2, [pc, #76]	@ (80028f0 <MX_DMA_Init+0x88>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80028aa:	4b11      	ldr	r3, [pc, #68]	@ (80028f0 <MX_DMA_Init+0x88>)
 80028ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80028b6:	2200      	movs	r2, #0
 80028b8:	2100      	movs	r1, #0
 80028ba:	200b      	movs	r0, #11
 80028bc:	f003 ff7d 	bl	80067ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80028c0:	200b      	movs	r0, #11
 80028c2:	f003 ff94 	bl	80067ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2100      	movs	r1, #0
 80028ca:	200c      	movs	r0, #12
 80028cc:	f003 ff75 	bl	80067ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80028d0:	200c      	movs	r0, #12
 80028d2:	f003 ff8c 	bl	80067ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2100      	movs	r1, #0
 80028da:	2038      	movs	r0, #56	@ 0x38
 80028dc:	f003 ff6d 	bl	80067ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80028e0:	2038      	movs	r0, #56	@ 0x38
 80028e2:	f003 ff84 	bl	80067ee <HAL_NVIC_EnableIRQ>

}
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000

080028f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	@ 0x28
 80028f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fa:	f107 0314 	add.w	r3, r7, #20
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	605a      	str	r2, [r3, #4]
 8002904:	609a      	str	r2, [r3, #8]
 8002906:	60da      	str	r2, [r3, #12]
 8002908:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800290a:	4b76      	ldr	r3, [pc, #472]	@ (8002ae4 <MX_GPIO_Init+0x1f0>)
 800290c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290e:	4a75      	ldr	r2, [pc, #468]	@ (8002ae4 <MX_GPIO_Init+0x1f0>)
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002916:	4b73      	ldr	r3, [pc, #460]	@ (8002ae4 <MX_GPIO_Init+0x1f0>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002922:	4b70      	ldr	r3, [pc, #448]	@ (8002ae4 <MX_GPIO_Init+0x1f0>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002926:	4a6f      	ldr	r2, [pc, #444]	@ (8002ae4 <MX_GPIO_Init+0x1f0>)
 8002928:	f043 0320 	orr.w	r3, r3, #32
 800292c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800292e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ae4 <MX_GPIO_Init+0x1f0>)
 8002930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800293a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ae4 <MX_GPIO_Init+0x1f0>)
 800293c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293e:	4a69      	ldr	r2, [pc, #420]	@ (8002ae4 <MX_GPIO_Init+0x1f0>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002946:	4b67      	ldr	r3, [pc, #412]	@ (8002ae4 <MX_GPIO_Init+0x1f0>)
 8002948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002952:	4b64      	ldr	r3, [pc, #400]	@ (8002ae4 <MX_GPIO_Init+0x1f0>)
 8002954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002956:	4a63      	ldr	r2, [pc, #396]	@ (8002ae4 <MX_GPIO_Init+0x1f0>)
 8002958:	f043 0302 	orr.w	r3, r3, #2
 800295c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800295e:	4b61      	ldr	r3, [pc, #388]	@ (8002ae4 <MX_GPIO_Init+0x1f0>)
 8002960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	607b      	str	r3, [r7, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800296a:	4b5e      	ldr	r3, [pc, #376]	@ (8002ae4 <MX_GPIO_Init+0x1f0>)
 800296c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296e:	4a5d      	ldr	r2, [pc, #372]	@ (8002ae4 <MX_GPIO_Init+0x1f0>)
 8002970:	f043 0308 	orr.w	r3, r3, #8
 8002974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002976:	4b5b      	ldr	r3, [pc, #364]	@ (8002ae4 <MX_GPIO_Init+0x1f0>)
 8002978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002982:	2200      	movs	r2, #0
 8002984:	f244 11b2 	movw	r1, #16818	@ 0x41b2
 8002988:	4857      	ldr	r0, [pc, #348]	@ (8002ae8 <MX_GPIO_Init+0x1f4>)
 800298a:	f004 fc17 	bl	80071bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800298e:	2200      	movs	r2, #0
 8002990:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8002994:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002998:	f004 fc10 	bl	80071bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_6, GPIO_PIN_RESET);
 800299c:	2200      	movs	r2, #0
 800299e:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80029a2:	4852      	ldr	r0, [pc, #328]	@ (8002aec <MX_GPIO_Init+0x1f8>)
 80029a4:	f004 fc0a 	bl	80071bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9;
 80029a8:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 80029ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	4619      	mov	r1, r3
 80029be:	484a      	ldr	r0, [pc, #296]	@ (8002ae8 <MX_GPIO_Init+0x1f4>)
 80029c0:	f004 fa62 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC1 PC4 PC5
                           PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80029c4:	f244 13b2 	movw	r3, #16818	@ 0x41b2
 80029c8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ca:	2301      	movs	r3, #1
 80029cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2300      	movs	r3, #0
 80029d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d6:	f107 0314 	add.w	r3, r7, #20
 80029da:	4619      	mov	r1, r3
 80029dc:	4842      	ldr	r0, [pc, #264]	@ (8002ae8 <MX_GPIO_Init+0x1f4>)
 80029de:	f004 fa53 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80029e2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80029e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e8:	2301      	movs	r3, #1
 80029ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f0:	2300      	movs	r3, #0
 80029f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	4619      	mov	r1, r3
 80029fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029fe:	f004 fa43 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_6;
 8002a02:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8002a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a10:	2300      	movs	r3, #0
 8002a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4834      	ldr	r0, [pc, #208]	@ (8002aec <MX_GPIO_Init+0x1f8>)
 8002a1c:	f004 fa34 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a26:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	4619      	mov	r1, r3
 8002a36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a3a:	f004 fa25 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a3e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	4619      	mov	r1, r3
 8002a52:	4825      	ldr	r0, [pc, #148]	@ (8002ae8 <MX_GPIO_Init+0x1f4>)
 8002a54:	f004 fa18 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a58:	2304      	movs	r3, #4
 8002a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a60:	2302      	movs	r3, #2
 8002a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4821      	ldr	r0, [pc, #132]	@ (8002af0 <MX_GPIO_Init+0x1fc>)
 8002a6c:	f004 fa0c 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a70:	2330      	movs	r3, #48	@ 0x30
 8002a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	4619      	mov	r1, r3
 8002a82:	481a      	ldr	r0, [pc, #104]	@ (8002aec <MX_GPIO_Init+0x1f8>)
 8002a84:	f004 fa00 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a88:	2380      	movs	r3, #128	@ 0x80
 8002a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a90:	2302      	movs	r3, #2
 8002a92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4814      	ldr	r0, [pc, #80]	@ (8002aec <MX_GPIO_Init+0x1f8>)
 8002a9c:	f004 f9f4 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002aa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002aa6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	480d      	ldr	r0, [pc, #52]	@ (8002aec <MX_GPIO_Init+0x1f8>)
 8002ab8:	f004 f9e6 	bl	8006e88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002abc:	2200      	movs	r2, #0
 8002abe:	2100      	movs	r1, #0
 8002ac0:	2017      	movs	r0, #23
 8002ac2:	f003 fe7a 	bl	80067ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002ac6:	2017      	movs	r0, #23
 8002ac8:	f003 fe91 	bl	80067ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002acc:	2200      	movs	r2, #0
 8002ace:	2100      	movs	r1, #0
 8002ad0:	2028      	movs	r0, #40	@ 0x28
 8002ad2:	f003 fe72 	bl	80067ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ad6:	2028      	movs	r0, #40	@ 0x28
 8002ad8:	f003 fe89 	bl	80067ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002adc:	bf00      	nop
 8002ade:	3728      	adds	r7, #40	@ 0x28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	48000800 	.word	0x48000800
 8002aec:	48000400 	.word	0x48000400
 8002af0:	48000c00 	.word	0x48000c00

08002af4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002af4:	b5b0      	push	{r4, r5, r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a1c      	ldr	r2, [pc, #112]	@ (8002b70 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d108      	bne.n	8002b16 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += 1;
 8002b04:	4b1b      	ldr	r3, [pc, #108]	@ (8002b74 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0a:	1c54      	adds	r4, r2, #1
 8002b0c:	f143 0500 	adc.w	r5, r3, #0
 8002b10:	4b18      	ldr	r3, [pc, #96]	@ (8002b74 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002b12:	e9c3 4500 	strd	r4, r5, [r3]
	}
//	 Check which version of the timer triggered this callback and toggle LED
	if(htim == &htim6)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a17      	ldr	r2, [pc, #92]	@ (8002b78 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d103      	bne.n	8002b26 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
	    //check2 +=1;
		Heartbeat();
 8002b1e:	f001 fa0b 	bl	8003f38 <Heartbeat>
		Routine();
 8002b22:	f001 fa17 	bl	8003f54 <Routine>
	}
	//timer IT update Kalman filter
	if(htim == &htim15)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a14      	ldr	r2, [pc, #80]	@ (8002b7c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d11c      	bne.n	8002b68 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		// Read sensor data or get measurements
		float32_t y_data[1] = {QEIdata.linearPos};
 8002b2e:	4b14      	ldr	r3, [pc, #80]	@ (8002b80 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b32:	60fb      	str	r3, [r7, #12]

		// Prediction step
		KalmanFilter_Predict(&kf, u_data, w_data);
 8002b34:	4a13      	ldr	r2, [pc, #76]	@ (8002b84 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002b36:	4914      	ldr	r1, [pc, #80]	@ (8002b88 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002b38:	4814      	ldr	r0, [pc, #80]	@ (8002b8c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b3a:	f7fe fe8c 	bl	8001856 <KalmanFilter_Predict>

		// Update step
		KalmanFilter_Update(&kf, y_data);
 8002b3e:	f107 030c 	add.w	r3, r7, #12
 8002b42:	4619      	mov	r1, r3
 8002b44:	4811      	ldr	r0, [pc, #68]	@ (8002b8c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b46:	f7fe ff19 	bl	800197c <KalmanFilter_Update>

		// Use the updated state estimate (kf.x) as needed
		estimated_state[0] = kf.x.pData[0]; // Position
 8002b4a:	4b10      	ldr	r3, [pc, #64]	@ (8002b8c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0f      	ldr	r2, [pc, #60]	@ (8002b90 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002b52:	6013      	str	r3, [r2, #0]
		estimated_state[1] = kf.x.pData[1]; // Velocity
 8002b54:	4b0d      	ldr	r3, [pc, #52]	@ (8002b8c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4a0d      	ldr	r2, [pc, #52]	@ (8002b90 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002b5c:	6053      	str	r3, [r2, #4]
		estimated_state[2] = kf.x.pData[2]; // Acceleration
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b8c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a0a      	ldr	r2, [pc, #40]	@ (8002b90 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002b66:	6093      	str	r3, [r2, #8]

	}
}
 8002b68:	bf00      	nop
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b70:	20000640 	.word	0x20000640
 8002b74:	20000b40 	.word	0x20000b40
 8002b78:	2000070c 	.word	0x2000070c
 8002b7c:	200007d8 	.word	0x200007d8
 8002b80:	20000b00 	.word	0x20000b00
 8002b84:	20000280 	.word	0x20000280
 8002b88:	2000143c 	.word	0x2000143c
 8002b8c:	200013b4 	.word	0x200013b4
 8002b90:	200013a8 	.word	0x200013a8

08002b94 <micros>:

uint64_t micros()
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+((_micros - 1) * 2,147,483,647);
 8002b98:	4b07      	ldr	r3, [pc, #28]	@ (8002bb8 <micros+0x24>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9e:	f203 2387 	addw	r3, r3, #647	@ 0x287
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
}
 8002bac:	4610      	mov	r0, r2
 8002bae:	4619      	mov	r1, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	20000640 	.word	0x20000640
 8002bbc:	00000000 	.word	0x00000000

08002bc0 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 8002bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = micros();
 8002bc8:	f7ff ffe4 	bl	8002b94 <micros>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4971      	ldr	r1, [pc, #452]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002bd2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim2);
 8002bd6:	4b71      	ldr	r3, [pc, #452]	@ (8002d9c <QEIEncoderPosVel_Update+0x1dc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	4a6e      	ldr	r2, [pc, #440]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002bde:	6013      	str	r3, [r2, #0]
	//Postion 1 turn calculation
	QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 8002be0:	4b6d      	ldr	r3, [pc, #436]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002be8:	ee07 3a90 	vmov	s15, r3
 8002bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bf0:	4b69      	ldr	r3, [pc, #420]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002bf2:	edc3 7a06 	vstr	s15, [r3, #24]
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8002bf6:	4b68      	ldr	r3, [pc, #416]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4b67      	ldr	r3, [pc, #412]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	607b      	str	r3, [r7, #4]
	//Handle Warp around
	if(diffPosition > UINT32_MAX/2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	da02      	bge.n	8002c0e <QEIEncoderPosVel_Update+0x4e>
		diffPosition -=UINT32_MAX;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	607b      	str	r3, [r7, #4]
	if(diffPosition < -UINT32_MAX/2)
		diffPosition +=UINT32_MAX;
	//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001; //sec
 8002c0e:	4b62      	ldr	r3, [pc, #392]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002c10:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002c14:	4b60      	ldr	r3, [pc, #384]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002c16:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c1a:	ebb0 0a02 	subs.w	sl, r0, r2
 8002c1e:	eb61 0b03 	sbc.w	fp, r1, r3
 8002c22:	4650      	mov	r0, sl
 8002c24:	4659      	mov	r1, fp
 8002c26:	f7fd fc7d 	bl	8000524 <__aeabi_ul2d>
 8002c2a:	a357      	add	r3, pc, #348	@ (adr r3, 8002d88 <QEIEncoderPosVel_Update+0x1c8>)
 8002c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c30:	f7fd fcae 	bl	8000590 <__aeabi_dmul>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f7fd ff78 	bl	8000b30 <__aeabi_d2f>
 8002c40:	4603      	mov	r3, r0
 8002c42:	603b      	str	r3, [r7, #0]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;  //pulse/sec
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c4e:	ed97 7a00 	vldr	s14, [r7]
 8002c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c56:	4b50      	ldr	r3, [pc, #320]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002c58:	edc3 7a07 	vstr	s15, [r3, #28]

	QEIdata.rad_s = (QEIdata.QEIAngularVelocity*2*3.14)/8192;
 8002c5c:	4b4e      	ldr	r3, [pc, #312]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002c5e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c66:	ee17 0a90 	vmov	r0, s15
 8002c6a:	f7fd fc39 	bl	80004e0 <__aeabi_f2d>
 8002c6e:	a348      	add	r3, pc, #288	@ (adr r3, 8002d90 <QEIEncoderPosVel_Update+0x1d0>)
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	f7fd fc8c 	bl	8000590 <__aeabi_dmul>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	4b46      	ldr	r3, [pc, #280]	@ (8002da0 <QEIEncoderPosVel_Update+0x1e0>)
 8002c86:	f7fd fdad 	bl	80007e4 <__aeabi_ddiv>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4610      	mov	r0, r2
 8002c90:	4619      	mov	r1, r3
 8002c92:	f7fd ff4d 	bl	8000b30 <__aeabi_d2f>
 8002c96:	4603      	mov	r3, r0
 8002c98:	4a3f      	ldr	r2, [pc, #252]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002c9a:	6213      	str	r3, [r2, #32]
	QEIdata.rpm = (QEIdata.QEIAngularVelocity*60)/8192;
 8002c9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002c9e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ca2:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002da4 <QEIEncoderPosVel_Update+0x1e4>
 8002ca6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002caa:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8002da8 <QEIEncoderPosVel_Update+0x1e8>
 8002cae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cb2:	4b39      	ldr	r3, [pc, #228]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002cb4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	QEIdata.linearVel = (QEIdata.QEIAngularVelocity*10)/8192; //velocity (mm/s)
 8002cb8:	4b37      	ldr	r3, [pc, #220]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002cba:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cbe:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002cc2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cc6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002da8 <QEIEncoderPosVel_Update+0x1e8>
 8002cca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cce:	4b32      	ldr	r3, [pc, #200]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002cd0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	QEIdata.Velocity[NEW] = QEIdata.linearVel;
 8002cd4:	4b30      	ldr	r3, [pc, #192]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd8:	4a2f      	ldr	r2, [pc, #188]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002cda:	6313      	str	r3, [r2, #48]	@ 0x30
	QEIdata.linearAcc = (QEIdata.Velocity[NEW]-QEIdata.Velocity[OLD])/diffTime;
 8002cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002cde:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8002ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002ce4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002ce8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002cec:	ed97 7a00 	vldr	s14, [r7]
 8002cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cf4:	4b28      	ldr	r3, [pc, #160]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002cf6:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38


	if(QEIdata.Position[NEW] < 2147483648){
 8002cfa:	4b27      	ldr	r3, [pc, #156]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	db11      	blt.n	8002d26 <QEIEncoderPosVel_Update+0x166>
		QEIdata.linearPos = ((float)QEIdata.Position[NEW]*10)/8192; //position (mm)
 8002d02:	4b25      	ldr	r3, [pc, #148]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d0e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002d12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d16:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8002da8 <QEIEncoderPosVel_Update+0x1e8>
 8002d1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002d20:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 8002d24:	e01c      	b.n	8002d60 <QEIEncoderPosVel_Update+0x1a0>
	}
	else{
		QEIdata.linearPos = -((float)(4294967295 - QEIdata.Position[NEW])*10)/8192;
 8002d26:	4b1c      	ldr	r3, [pc, #112]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	461c      	mov	r4, r3
 8002d2e:	4615      	mov	r5, r2
 8002d30:	2300      	movs	r3, #0
 8002d32:	f1d4 38ff 	rsbs	r8, r4, #4294967295	@ 0xffffffff
 8002d36:	eb63 0905 	sbc.w	r9, r3, r5
 8002d3a:	4640      	mov	r0, r8
 8002d3c:	4649      	mov	r1, r9
 8002d3e:	f7fe f817 	bl	8000d70 <__aeabi_l2f>
 8002d42:	ee07 0a10 	vmov	s14, r0
 8002d46:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8002d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4e:	eeb1 7a67 	vneg.f32	s14, s15
 8002d52:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002da8 <QEIEncoderPosVel_Update+0x1e8>
 8002d56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002d5c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	}

	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8002d60:	4b0d      	ldr	r3, [pc, #52]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0c      	ldr	r2, [pc, #48]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002d66:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8002d68:	4b0b      	ldr	r3, [pc, #44]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002d6a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d6e:	490a      	ldr	r1, [pc, #40]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002d70:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata.Velocity[OLD] = QEIdata.Velocity[NEW];
 8002d74:	4b08      	ldr	r3, [pc, #32]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d78:	4a07      	ldr	r2, [pc, #28]	@ (8002d98 <QEIEncoderPosVel_Update+0x1d8>)
 8002d7a:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d86:	bf00      	nop
 8002d88:	a0b5ed8d 	.word	0xa0b5ed8d
 8002d8c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002d90:	51eb851f 	.word	0x51eb851f
 8002d94:	40091eb8 	.word	0x40091eb8
 8002d98:	20000b00 	.word	0x20000b00
 8002d9c:	200003dc 	.word	0x200003dc
 8002da0:	40c00000 	.word	0x40c00000
 8002da4:	42700000 	.word	0x42700000
 8002da8:	46000000 	.word	0x46000000

08002dac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002dac:	b4b0      	push	{r4, r5, r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	80fb      	strh	r3, [r7, #6]
//		else if(mode == 2){
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
//		}
//	}

	if(GPIO_Pin == GPIO_PIN_8){ //check top sensor
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dbc:	d109      	bne.n	8002dd2 <HAL_GPIO_EXTI_Callback+0x26>
		if (start_IT > 11 )
 8002dbe:	4b13      	ldr	r3, [pc, #76]	@ (8002e0c <HAL_GPIO_EXTI_Callback+0x60>)
 8002dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc4:	2a0c      	cmp	r2, #12
 8002dc6:	f173 0300 	sbcs.w	r3, r3, #0
 8002dca:	d302      	bcc.n	8002dd2 <HAL_GPIO_EXTI_Callback+0x26>
		{
			S_top = 1;
 8002dcc:	4b10      	ldr	r3, [pc, #64]	@ (8002e10 <HAL_GPIO_EXTI_Callback+0x64>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
		}

	}
	if(GPIO_Pin == GPIO_PIN_9){ //check down sensor
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dd8:	d109      	bne.n	8002dee <HAL_GPIO_EXTI_Callback+0x42>

		if (start_IT > 11)
 8002dda:	4b0c      	ldr	r3, [pc, #48]	@ (8002e0c <HAL_GPIO_EXTI_Callback+0x60>)
 8002ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de0:	2a0c      	cmp	r2, #12
 8002de2:	f173 0300 	sbcs.w	r3, r3, #0
 8002de6:	d302      	bcc.n	8002dee <HAL_GPIO_EXTI_Callback+0x42>
		{
			S_down = 1;
 8002de8:	4b0a      	ldr	r3, [pc, #40]	@ (8002e14 <HAL_GPIO_EXTI_Callback+0x68>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	601a      	str	r2, [r3, #0]
//			mode = 4; //Emergency mode
//			Vin = 0;
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
//		}
//	}
	start_IT += 1;
 8002dee:	4b07      	ldr	r3, [pc, #28]	@ (8002e0c <HAL_GPIO_EXTI_Callback+0x60>)
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	1c54      	adds	r4, r2, #1
 8002df6:	f143 0500 	adc.w	r5, r3, #0
 8002dfa:	4b04      	ldr	r3, [pc, #16]	@ (8002e0c <HAL_GPIO_EXTI_Callback+0x60>)
 8002dfc:	e9c3 4500 	strd	r4, r5, [r3]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bcb0      	pop	{r4, r5, r7}
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	20000b58 	.word	0x20000b58
 8002e10:	20000c28 	.word	0x20000c28
 8002e14:	20000c2c 	.word	0x20000c2c

08002e18 <checkStartMoving>:

//-----------------------------------Trajectory------------------------------------------//
void checkStartMoving(){
 8002e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
	if(q_f != q_f_old){
 8002e20:	4b9d      	ldr	r3, [pc, #628]	@ (8003098 <checkStartMoving+0x280>)
 8002e22:	ed93 7a00 	vldr	s14, [r3]
 8002e26:	4b9d      	ldr	r3, [pc, #628]	@ (800309c <checkStartMoving+0x284>)
 8002e28:	edd3 7a00 	vldr	s15, [r3]
 8002e2c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e34:	f000 8201 	beq.w	800323a <checkStartMoving+0x422>
		q_i = q_f_old;   //Define q_i
 8002e38:	4b98      	ldr	r3, [pc, #608]	@ (800309c <checkStartMoving+0x284>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a98      	ldr	r2, [pc, #608]	@ (80030a0 <checkStartMoving+0x288>)
 8002e3e:	6013      	str	r3, [r2, #0]
		delta_q = q_f - q_i;
 8002e40:	4b95      	ldr	r3, [pc, #596]	@ (8003098 <checkStartMoving+0x280>)
 8002e42:	ed93 7a00 	vldr	s14, [r3]
 8002e46:	4b96      	ldr	r3, [pc, #600]	@ (80030a0 <checkStartMoving+0x288>)
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e50:	4b94      	ldr	r3, [pc, #592]	@ (80030a4 <checkStartMoving+0x28c>)
 8002e52:	edc3 7a00 	vstr	s15, [r3]
		if(delta_q < 0){
 8002e56:	4b93      	ldr	r3, [pc, #588]	@ (80030a4 <checkStartMoving+0x28c>)
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e64:	d504      	bpl.n	8002e70 <checkStartMoving+0x58>
			dir = -1;
 8002e66:	4b90      	ldr	r3, [pc, #576]	@ (80030a8 <checkStartMoving+0x290>)
 8002e68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	e002      	b.n	8002e76 <checkStartMoving+0x5e>
		}
		else{
			dir = 1;
 8002e70:	4b8d      	ldr	r3, [pc, #564]	@ (80030a8 <checkStartMoving+0x290>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
		}

		float q_check = fabs(q_d_i + q_2d_max*sqrt(fabs(delta_q)/q_2d_max)*dir);
 8002e76:	4b8d      	ldr	r3, [pc, #564]	@ (80030ac <checkStartMoving+0x294>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fd fb30 	bl	80004e0 <__aeabi_f2d>
 8002e80:	4604      	mov	r4, r0
 8002e82:	460d      	mov	r5, r1
 8002e84:	4b8a      	ldr	r3, [pc, #552]	@ (80030b0 <checkStartMoving+0x298>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fd fb29 	bl	80004e0 <__aeabi_f2d>
 8002e8e:	4680      	mov	r8, r0
 8002e90:	4689      	mov	r9, r1
 8002e92:	4b84      	ldr	r3, [pc, #528]	@ (80030a4 <checkStartMoving+0x28c>)
 8002e94:	edd3 7a00 	vldr	s15, [r3]
 8002e98:	eef0 7ae7 	vabs.f32	s15, s15
 8002e9c:	ee17 0a90 	vmov	r0, s15
 8002ea0:	f7fd fb1e 	bl	80004e0 <__aeabi_f2d>
 8002ea4:	4682      	mov	sl, r0
 8002ea6:	468b      	mov	fp, r1
 8002ea8:	4b81      	ldr	r3, [pc, #516]	@ (80030b0 <checkStartMoving+0x298>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fd fb17 	bl	80004e0 <__aeabi_f2d>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4650      	mov	r0, sl
 8002eb8:	4659      	mov	r1, fp
 8002eba:	f7fd fc93 	bl	80007e4 <__aeabi_ddiv>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	ec43 2b17 	vmov	d7, r2, r3
 8002ec6:	eeb0 0a47 	vmov.f32	s0, s14
 8002eca:	eef0 0a67 	vmov.f32	s1, s15
 8002ece:	f009 fe5d 	bl	800cb8c <sqrt>
 8002ed2:	ec53 2b10 	vmov	r2, r3, d0
 8002ed6:	4640      	mov	r0, r8
 8002ed8:	4649      	mov	r1, r9
 8002eda:	f7fd fb59 	bl	8000590 <__aeabi_dmul>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4690      	mov	r8, r2
 8002ee4:	4699      	mov	r9, r3
 8002ee6:	4b70      	ldr	r3, [pc, #448]	@ (80030a8 <checkStartMoving+0x290>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd fae6 	bl	80004bc <__aeabi_i2d>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4640      	mov	r0, r8
 8002ef6:	4649      	mov	r1, r9
 8002ef8:	f7fd fb4a 	bl	8000590 <__aeabi_dmul>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4620      	mov	r0, r4
 8002f02:	4629      	mov	r1, r5
 8002f04:	f7fd f98e 	bl	8000224 <__adddf3>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	f7fd fe0e 	bl	8000b30 <__aeabi_d2f>
 8002f14:	ee07 0a90 	vmov	s15, r0
 8002f18:	eef0 7ae7 	vabs.f32	s15, s15
 8002f1c:	edc7 7a01 	vstr	s15, [r7, #4]

		if(q_check >= q_d_max){ //Accelerate to maximum speed
 8002f20:	4b64      	ldr	r3, [pc, #400]	@ (80030b4 <checkStartMoving+0x29c>)
 8002f22:	edd3 7a00 	vldr	s15, [r3]
 8002f26:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f32:	f2c0 80cf 	blt.w	80030d4 <checkStartMoving+0x2bc>
			calmode = 1;
 8002f36:	4b60      	ldr	r3, [pc, #384]	@ (80030b8 <checkStartMoving+0x2a0>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
			t_acc = fabs((q_d_max-q_d_i)/q_2d_max);
 8002f3c:	4b5d      	ldr	r3, [pc, #372]	@ (80030b4 <checkStartMoving+0x29c>)
 8002f3e:	ed93 7a00 	vldr	s14, [r3]
 8002f42:	4b5a      	ldr	r3, [pc, #360]	@ (80030ac <checkStartMoving+0x294>)
 8002f44:	edd3 7a00 	vldr	s15, [r3]
 8002f48:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002f4c:	4b58      	ldr	r3, [pc, #352]	@ (80030b0 <checkStartMoving+0x298>)
 8002f4e:	ed93 7a00 	vldr	s14, [r3]
 8002f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f56:	eef0 7ae7 	vabs.f32	s15, s15
 8002f5a:	4b58      	ldr	r3, [pc, #352]	@ (80030bc <checkStartMoving+0x2a4>)
 8002f5c:	edc3 7a00 	vstr	s15, [r3]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 8002f60:	4b52      	ldr	r3, [pc, #328]	@ (80030ac <checkStartMoving+0x294>)
 8002f62:	ed93 7a00 	vldr	s14, [r3]
 8002f66:	4b55      	ldr	r3, [pc, #340]	@ (80030bc <checkStartMoving+0x2a4>)
 8002f68:	edd3 7a00 	vldr	s15, [r3]
 8002f6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f70:	4b4d      	ldr	r3, [pc, #308]	@ (80030a8 <checkStartMoving+0x290>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	ee07 3a90 	vmov	s15, r3
 8002f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f80:	ee17 0a90 	vmov	r0, s15
 8002f84:	f7fd faac 	bl	80004e0 <__aeabi_f2d>
 8002f88:	4604      	mov	r4, r0
 8002f8a:	460d      	mov	r5, r1
 8002f8c:	4b48      	ldr	r3, [pc, #288]	@ (80030b0 <checkStartMoving+0x298>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd faa5 	bl	80004e0 <__aeabi_f2d>
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	4b49      	ldr	r3, [pc, #292]	@ (80030c0 <checkStartMoving+0x2a8>)
 8002f9c:	f7fd faf8 	bl	8000590 <__aeabi_dmul>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4690      	mov	r8, r2
 8002fa6:	4699      	mov	r9, r3
 8002fa8:	4b44      	ldr	r3, [pc, #272]	@ (80030bc <checkStartMoving+0x2a4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd fa97 	bl	80004e0 <__aeabi_f2d>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4640      	mov	r0, r8
 8002fb8:	4649      	mov	r1, r9
 8002fba:	f7fd fae9 	bl	8000590 <__aeabi_dmul>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4690      	mov	r8, r2
 8002fc4:	4699      	mov	r9, r3
 8002fc6:	4b3d      	ldr	r3, [pc, #244]	@ (80030bc <checkStartMoving+0x2a4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd fa88 	bl	80004e0 <__aeabi_f2d>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4640      	mov	r0, r8
 8002fd6:	4649      	mov	r1, r9
 8002fd8:	f7fd fada 	bl	8000590 <__aeabi_dmul>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4690      	mov	r8, r2
 8002fe2:	4699      	mov	r9, r3
 8002fe4:	4b30      	ldr	r3, [pc, #192]	@ (80030a8 <checkStartMoving+0x290>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fa67 	bl	80004bc <__aeabi_i2d>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4640      	mov	r0, r8
 8002ff4:	4649      	mov	r1, r9
 8002ff6:	f7fd facb 	bl	8000590 <__aeabi_dmul>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4620      	mov	r0, r4
 8003000:	4629      	mov	r1, r5
 8003002:	f7fd f90f 	bl	8000224 <__adddf3>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4610      	mov	r0, r2
 800300c:	4619      	mov	r1, r3
 800300e:	f7fd fd8f 	bl	8000b30 <__aeabi_d2f>
 8003012:	4603      	mov	r3, r0
 8003014:	4a2b      	ldr	r2, [pc, #172]	@ (80030c4 <checkStartMoving+0x2ac>)
 8003016:	6013      	str	r3, [r2, #0]
			t_const = fabs((q_f-q_i-2*q_acc)/q_d_max);
 8003018:	4b1f      	ldr	r3, [pc, #124]	@ (8003098 <checkStartMoving+0x280>)
 800301a:	ed93 7a00 	vldr	s14, [r3]
 800301e:	4b20      	ldr	r3, [pc, #128]	@ (80030a0 <checkStartMoving+0x288>)
 8003020:	edd3 7a00 	vldr	s15, [r3]
 8003024:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003028:	4b26      	ldr	r3, [pc, #152]	@ (80030c4 <checkStartMoving+0x2ac>)
 800302a:	edd3 7a00 	vldr	s15, [r3]
 800302e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003032:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003036:	4b1f      	ldr	r3, [pc, #124]	@ (80030b4 <checkStartMoving+0x29c>)
 8003038:	ed93 7a00 	vldr	s14, [r3]
 800303c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003040:	eef0 7ae7 	vabs.f32	s15, s15
 8003044:	4b20      	ldr	r3, [pc, #128]	@ (80030c8 <checkStartMoving+0x2b0>)
 8003046:	edc3 7a00 	vstr	s15, [r3]
			q_const = q_acc + q_d_max*t_const*dir;
 800304a:	4b1a      	ldr	r3, [pc, #104]	@ (80030b4 <checkStartMoving+0x29c>)
 800304c:	ed93 7a00 	vldr	s14, [r3]
 8003050:	4b1d      	ldr	r3, [pc, #116]	@ (80030c8 <checkStartMoving+0x2b0>)
 8003052:	edd3 7a00 	vldr	s15, [r3]
 8003056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800305a:	4b13      	ldr	r3, [pc, #76]	@ (80030a8 <checkStartMoving+0x290>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	ee07 3a90 	vmov	s15, r3
 8003062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800306a:	4b16      	ldr	r3, [pc, #88]	@ (80030c4 <checkStartMoving+0x2ac>)
 800306c:	edd3 7a00 	vldr	s15, [r3]
 8003070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003074:	4b15      	ldr	r3, [pc, #84]	@ (80030cc <checkStartMoving+0x2b4>)
 8003076:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc + t_const;
 800307a:	4b10      	ldr	r3, [pc, #64]	@ (80030bc <checkStartMoving+0x2a4>)
 800307c:	edd3 7a00 	vldr	s15, [r3]
 8003080:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003084:	4b10      	ldr	r3, [pc, #64]	@ (80030c8 <checkStartMoving+0x2b0>)
 8003086:	edd3 7a00 	vldr	s15, [r3]
 800308a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800308e:	4b10      	ldr	r3, [pc, #64]	@ (80030d0 <checkStartMoving+0x2b8>)
 8003090:	edc3 7a00 	vstr	s15, [r3]
 8003094:	e0c6      	b.n	8003224 <checkStartMoving+0x40c>
 8003096:	bf00      	nop
 8003098:	20000b6c 	.word	0x20000b6c
 800309c:	20000b84 	.word	0x20000b84
 80030a0:	20000b70 	.word	0x20000b70
 80030a4:	20000b74 	.word	0x20000b74
 80030a8:	20000214 	.word	0x20000214
 80030ac:	20000b68 	.word	0x20000b68
 80030b0:	2000020c 	.word	0x2000020c
 80030b4:	20000208 	.word	0x20000208
 80030b8:	20000210 	.word	0x20000210
 80030bc:	20000b88 	.word	0x20000b88
 80030c0:	3fe00000 	.word	0x3fe00000
 80030c4:	20000b8c 	.word	0x20000b8c
 80030c8:	20000b90 	.word	0x20000b90
 80030cc:	20000b94 	.word	0x20000b94
 80030d0:	20000bac 	.word	0x20000bac
		}
		else{ //Accelerating does not reach maximum speed
			calmode = 2;
 80030d4:	4b5b      	ldr	r3, [pc, #364]	@ (8003244 <checkStartMoving+0x42c>)
 80030d6:	2202      	movs	r2, #2
 80030d8:	701a      	strb	r2, [r3, #0]
			t_acc = sqrt(fabs(delta_q)/q_2d_max);
 80030da:	4b5b      	ldr	r3, [pc, #364]	@ (8003248 <checkStartMoving+0x430>)
 80030dc:	edd3 7a00 	vldr	s15, [r3]
 80030e0:	eef0 7ae7 	vabs.f32	s15, s15
 80030e4:	ee17 0a90 	vmov	r0, s15
 80030e8:	f7fd f9fa 	bl	80004e0 <__aeabi_f2d>
 80030ec:	4604      	mov	r4, r0
 80030ee:	460d      	mov	r5, r1
 80030f0:	4b56      	ldr	r3, [pc, #344]	@ (800324c <checkStartMoving+0x434>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fd f9f3 	bl	80004e0 <__aeabi_f2d>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4620      	mov	r0, r4
 8003100:	4629      	mov	r1, r5
 8003102:	f7fd fb6f 	bl	80007e4 <__aeabi_ddiv>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	ec43 2b17 	vmov	d7, r2, r3
 800310e:	eeb0 0a47 	vmov.f32	s0, s14
 8003112:	eef0 0a67 	vmov.f32	s1, s15
 8003116:	f009 fd39 	bl	800cb8c <sqrt>
 800311a:	ec53 2b10 	vmov	r2, r3, d0
 800311e:	4610      	mov	r0, r2
 8003120:	4619      	mov	r1, r3
 8003122:	f7fd fd05 	bl	8000b30 <__aeabi_d2f>
 8003126:	4603      	mov	r3, r0
 8003128:	4a49      	ldr	r2, [pc, #292]	@ (8003250 <checkStartMoving+0x438>)
 800312a:	6013      	str	r3, [r2, #0]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 800312c:	4b49      	ldr	r3, [pc, #292]	@ (8003254 <checkStartMoving+0x43c>)
 800312e:	ed93 7a00 	vldr	s14, [r3]
 8003132:	4b47      	ldr	r3, [pc, #284]	@ (8003250 <checkStartMoving+0x438>)
 8003134:	edd3 7a00 	vldr	s15, [r3]
 8003138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800313c:	4b46      	ldr	r3, [pc, #280]	@ (8003258 <checkStartMoving+0x440>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	ee07 3a90 	vmov	s15, r3
 8003144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314c:	ee17 0a90 	vmov	r0, s15
 8003150:	f7fd f9c6 	bl	80004e0 <__aeabi_f2d>
 8003154:	4604      	mov	r4, r0
 8003156:	460d      	mov	r5, r1
 8003158:	4b3c      	ldr	r3, [pc, #240]	@ (800324c <checkStartMoving+0x434>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd f9bf 	bl	80004e0 <__aeabi_f2d>
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	4b3d      	ldr	r3, [pc, #244]	@ (800325c <checkStartMoving+0x444>)
 8003168:	f7fd fa12 	bl	8000590 <__aeabi_dmul>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4690      	mov	r8, r2
 8003172:	4699      	mov	r9, r3
 8003174:	4b36      	ldr	r3, [pc, #216]	@ (8003250 <checkStartMoving+0x438>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd f9b1 	bl	80004e0 <__aeabi_f2d>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4640      	mov	r0, r8
 8003184:	4649      	mov	r1, r9
 8003186:	f7fd fa03 	bl	8000590 <__aeabi_dmul>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4690      	mov	r8, r2
 8003190:	4699      	mov	r9, r3
 8003192:	4b2f      	ldr	r3, [pc, #188]	@ (8003250 <checkStartMoving+0x438>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd f9a2 	bl	80004e0 <__aeabi_f2d>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4640      	mov	r0, r8
 80031a2:	4649      	mov	r1, r9
 80031a4:	f7fd f9f4 	bl	8000590 <__aeabi_dmul>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4690      	mov	r8, r2
 80031ae:	4699      	mov	r9, r3
 80031b0:	4b29      	ldr	r3, [pc, #164]	@ (8003258 <checkStartMoving+0x440>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fd f981 	bl	80004bc <__aeabi_i2d>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4640      	mov	r0, r8
 80031c0:	4649      	mov	r1, r9
 80031c2:	f7fd f9e5 	bl	8000590 <__aeabi_dmul>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4620      	mov	r0, r4
 80031cc:	4629      	mov	r1, r5
 80031ce:	f7fd f829 	bl	8000224 <__adddf3>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4610      	mov	r0, r2
 80031d8:	4619      	mov	r1, r3
 80031da:	f7fd fca9 	bl	8000b30 <__aeabi_d2f>
 80031de:	4603      	mov	r3, r0
 80031e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003260 <checkStartMoving+0x448>)
 80031e2:	6013      	str	r3, [r2, #0]
			q_d_acc = q_d_i + q_2d_max*t_acc*dir;
 80031e4:	4b19      	ldr	r3, [pc, #100]	@ (800324c <checkStartMoving+0x434>)
 80031e6:	ed93 7a00 	vldr	s14, [r3]
 80031ea:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <checkStartMoving+0x438>)
 80031ec:	edd3 7a00 	vldr	s15, [r3]
 80031f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031f4:	4b18      	ldr	r3, [pc, #96]	@ (8003258 <checkStartMoving+0x440>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	ee07 3a90 	vmov	s15, r3
 80031fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003204:	4b13      	ldr	r3, [pc, #76]	@ (8003254 <checkStartMoving+0x43c>)
 8003206:	edd3 7a00 	vldr	s15, [r3]
 800320a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800320e:	4b15      	ldr	r3, [pc, #84]	@ (8003264 <checkStartMoving+0x44c>)
 8003210:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc;
 8003214:	4b0e      	ldr	r3, [pc, #56]	@ (8003250 <checkStartMoving+0x438>)
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800321e:	4b12      	ldr	r3, [pc, #72]	@ (8003268 <checkStartMoving+0x450>)
 8003220:	edc3 7a00 	vstr	s15, [r3]
		}
		T_start = micros();
 8003224:	f7ff fcb6 	bl	8002b94 <micros>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	490f      	ldr	r1, [pc, #60]	@ (800326c <checkStartMoving+0x454>)
 800322e:	e9c1 2300 	strd	r2, r3, [r1]
		q_f_old = q_f;
 8003232:	4b0f      	ldr	r3, [pc, #60]	@ (8003270 <checkStartMoving+0x458>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a0f      	ldr	r2, [pc, #60]	@ (8003274 <checkStartMoving+0x45c>)
 8003238:	6013      	str	r3, [r2, #0]
	}
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003244:	20000210 	.word	0x20000210
 8003248:	20000b74 	.word	0x20000b74
 800324c:	2000020c 	.word	0x2000020c
 8003250:	20000b88 	.word	0x20000b88
 8003254:	20000b68 	.word	0x20000b68
 8003258:	20000214 	.word	0x20000214
 800325c:	3fe00000 	.word	0x3fe00000
 8003260:	20000b8c 	.word	0x20000b8c
 8003264:	20000b98 	.word	0x20000b98
 8003268:	20000bac 	.word	0x20000bac
 800326c:	20000ba0 	.word	0x20000ba0
 8003270:	20000b6c 	.word	0x20000b6c
 8003274:	20000b84 	.word	0x20000b84

08003278 <createTrajectory>:

void createTrajectory(){
 8003278:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800327c:	af00      	add	r7, sp, #0
	if(calmode == 1){
 800327e:	4b84      	ldr	r3, [pc, #528]	@ (8003490 <createTrajectory+0x218>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	f040 822c 	bne.w	80036e0 <createTrajectory+0x468>
		t = (float)(micros()-T_start)/1000000; //sec
 8003288:	f7ff fc84 	bl	8002b94 <micros>
 800328c:	4b81      	ldr	r3, [pc, #516]	@ (8003494 <createTrajectory+0x21c>)
 800328e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003292:	ebb0 0802 	subs.w	r8, r0, r2
 8003296:	eb61 0903 	sbc.w	r9, r1, r3
 800329a:	4640      	mov	r0, r8
 800329c:	4649      	mov	r1, r9
 800329e:	f7fd fd5f 	bl	8000d60 <__aeabi_ul2f>
 80032a2:	ee06 0a90 	vmov	s13, r0
 80032a6:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8003498 <createTrajectory+0x220>
 80032aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032ae:	4b7b      	ldr	r3, [pc, #492]	@ (800349c <createTrajectory+0x224>)
 80032b0:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 80032b4:	4b79      	ldr	r3, [pc, #484]	@ (800349c <createTrajectory+0x224>)
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c2:	f2c0 8094 	blt.w	80033ee <createTrajectory+0x176>
 80032c6:	4b75      	ldr	r3, [pc, #468]	@ (800349c <createTrajectory+0x224>)
 80032c8:	ed93 7a00 	vldr	s14, [r3]
 80032cc:	4b74      	ldr	r3, [pc, #464]	@ (80034a0 <createTrajectory+0x228>)
 80032ce:	edd3 7a00 	vldr	s15, [r3]
 80032d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032da:	f140 8088 	bpl.w	80033ee <createTrajectory+0x176>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 80032de:	4b71      	ldr	r3, [pc, #452]	@ (80034a4 <createTrajectory+0x22c>)
 80032e0:	ed93 7a00 	vldr	s14, [r3]
 80032e4:	4b6d      	ldr	r3, [pc, #436]	@ (800349c <createTrajectory+0x224>)
 80032e6:	edd3 7a00 	vldr	s15, [r3]
 80032ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032ee:	4b6e      	ldr	r3, [pc, #440]	@ (80034a8 <createTrajectory+0x230>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032fe:	4b6b      	ldr	r3, [pc, #428]	@ (80034ac <createTrajectory+0x234>)
 8003300:	edd3 7a00 	vldr	s15, [r3]
 8003304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003308:	ee17 0a90 	vmov	r0, s15
 800330c:	f7fd f8e8 	bl	80004e0 <__aeabi_f2d>
 8003310:	4604      	mov	r4, r0
 8003312:	460d      	mov	r5, r1
 8003314:	4b66      	ldr	r3, [pc, #408]	@ (80034b0 <createTrajectory+0x238>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd f8e1 	bl	80004e0 <__aeabi_f2d>
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	4b64      	ldr	r3, [pc, #400]	@ (80034b4 <createTrajectory+0x23c>)
 8003324:	f7fd f934 	bl	8000590 <__aeabi_dmul>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4690      	mov	r8, r2
 800332e:	4699      	mov	r9, r3
 8003330:	4b5a      	ldr	r3, [pc, #360]	@ (800349c <createTrajectory+0x224>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd f8d3 	bl	80004e0 <__aeabi_f2d>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4640      	mov	r0, r8
 8003340:	4649      	mov	r1, r9
 8003342:	f7fd f925 	bl	8000590 <__aeabi_dmul>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4690      	mov	r8, r2
 800334c:	4699      	mov	r9, r3
 800334e:	4b53      	ldr	r3, [pc, #332]	@ (800349c <createTrajectory+0x224>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd f8c4 	bl	80004e0 <__aeabi_f2d>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4640      	mov	r0, r8
 800335e:	4649      	mov	r1, r9
 8003360:	f7fd f916 	bl	8000590 <__aeabi_dmul>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4690      	mov	r8, r2
 800336a:	4699      	mov	r9, r3
 800336c:	4b4e      	ldr	r3, [pc, #312]	@ (80034a8 <createTrajectory+0x230>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f7fd f8a3 	bl	80004bc <__aeabi_i2d>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4640      	mov	r0, r8
 800337c:	4649      	mov	r1, r9
 800337e:	f7fd f907 	bl	8000590 <__aeabi_dmul>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4620      	mov	r0, r4
 8003388:	4629      	mov	r1, r5
 800338a:	f7fc ff4b 	bl	8000224 <__adddf3>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4610      	mov	r0, r2
 8003394:	4619      	mov	r1, r3
 8003396:	f7fd fbcb 	bl	8000b30 <__aeabi_d2f>
 800339a:	4603      	mov	r3, r0
 800339c:	4a46      	ldr	r2, [pc, #280]	@ (80034b8 <createTrajectory+0x240>)
 800339e:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 80033a0:	4b43      	ldr	r3, [pc, #268]	@ (80034b0 <createTrajectory+0x238>)
 80033a2:	ed93 7a00 	vldr	s14, [r3]
 80033a6:	4b3d      	ldr	r3, [pc, #244]	@ (800349c <createTrajectory+0x224>)
 80033a8:	edd3 7a00 	vldr	s15, [r3]
 80033ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033b0:	4b3d      	ldr	r3, [pc, #244]	@ (80034a8 <createTrajectory+0x230>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	ee07 3a90 	vmov	s15, r3
 80033b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033c0:	4b38      	ldr	r3, [pc, #224]	@ (80034a4 <createTrajectory+0x22c>)
 80033c2:	edd3 7a00 	vldr	s15, [r3]
 80033c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ca:	4b3c      	ldr	r3, [pc, #240]	@ (80034bc <createTrajectory+0x244>)
 80033cc:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 80033d0:	4b35      	ldr	r3, [pc, #212]	@ (80034a8 <createTrajectory+0x230>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	ee07 3a90 	vmov	s15, r3
 80033d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033dc:	4b34      	ldr	r3, [pc, #208]	@ (80034b0 <createTrajectory+0x238>)
 80033de:	edd3 7a00 	vldr	s15, [r3]
 80033e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e6:	4b36      	ldr	r3, [pc, #216]	@ (80034c0 <createTrajectory+0x248>)
 80033e8:	edc3 7a00 	vstr	s15, [r3]
 80033ec:	e2fd      	b.n	80039ea <createTrajectory+0x772>
		}
		else if((t_acc <= t) && (t < t_acc+t_const)){ //Constant Velocity Segment
 80033ee:	4b2c      	ldr	r3, [pc, #176]	@ (80034a0 <createTrajectory+0x228>)
 80033f0:	ed93 7a00 	vldr	s14, [r3]
 80033f4:	4b29      	ldr	r3, [pc, #164]	@ (800349c <createTrajectory+0x224>)
 80033f6:	edd3 7a00 	vldr	s15, [r3]
 80033fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003402:	d865      	bhi.n	80034d0 <createTrajectory+0x258>
 8003404:	4b26      	ldr	r3, [pc, #152]	@ (80034a0 <createTrajectory+0x228>)
 8003406:	ed93 7a00 	vldr	s14, [r3]
 800340a:	4b2e      	ldr	r3, [pc, #184]	@ (80034c4 <createTrajectory+0x24c>)
 800340c:	edd3 7a00 	vldr	s15, [r3]
 8003410:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003414:	4b21      	ldr	r3, [pc, #132]	@ (800349c <createTrajectory+0x224>)
 8003416:	edd3 7a00 	vldr	s15, [r3]
 800341a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003422:	dd55      	ble.n	80034d0 <createTrajectory+0x258>
			ref_p = q_i + q_acc + q_d_max*(t-t_acc)*dir;
 8003424:	4b21      	ldr	r3, [pc, #132]	@ (80034ac <createTrajectory+0x234>)
 8003426:	ed93 7a00 	vldr	s14, [r3]
 800342a:	4b27      	ldr	r3, [pc, #156]	@ (80034c8 <createTrajectory+0x250>)
 800342c:	edd3 7a00 	vldr	s15, [r3]
 8003430:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003434:	4b19      	ldr	r3, [pc, #100]	@ (800349c <createTrajectory+0x224>)
 8003436:	edd3 6a00 	vldr	s13, [r3]
 800343a:	4b19      	ldr	r3, [pc, #100]	@ (80034a0 <createTrajectory+0x228>)
 800343c:	edd3 7a00 	vldr	s15, [r3]
 8003440:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003444:	4b21      	ldr	r3, [pc, #132]	@ (80034cc <createTrajectory+0x254>)
 8003446:	edd3 7a00 	vldr	s15, [r3]
 800344a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800344e:	4b16      	ldr	r3, [pc, #88]	@ (80034a8 <createTrajectory+0x230>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800345a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800345e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003462:	4b15      	ldr	r3, [pc, #84]	@ (80034b8 <createTrajectory+0x240>)
 8003464:	edc3 7a00 	vstr	s15, [r3]
			ref_v = q_d_max*dir;
 8003468:	4b0f      	ldr	r3, [pc, #60]	@ (80034a8 <createTrajectory+0x230>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	ee07 3a90 	vmov	s15, r3
 8003470:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003474:	4b15      	ldr	r3, [pc, #84]	@ (80034cc <createTrajectory+0x254>)
 8003476:	edd3 7a00 	vldr	s15, [r3]
 800347a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347e:	4b0f      	ldr	r3, [pc, #60]	@ (80034bc <createTrajectory+0x244>)
 8003480:	edc3 7a00 	vstr	s15, [r3]
			ref_a = 0;
 8003484:	4b0e      	ldr	r3, [pc, #56]	@ (80034c0 <createTrajectory+0x248>)
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	e2ad      	b.n	80039ea <createTrajectory+0x772>
 800348e:	bf00      	nop
 8003490:	20000210 	.word	0x20000210
 8003494:	20000ba0 	.word	0x20000ba0
 8003498:	49742400 	.word	0x49742400
 800349c:	20000ba8 	.word	0x20000ba8
 80034a0:	20000b88 	.word	0x20000b88
 80034a4:	20000b68 	.word	0x20000b68
 80034a8:	20000214 	.word	0x20000214
 80034ac:	20000b70 	.word	0x20000b70
 80034b0:	2000020c 	.word	0x2000020c
 80034b4:	3fe00000 	.word	0x3fe00000
 80034b8:	20000b78 	.word	0x20000b78
 80034bc:	20000b7c 	.word	0x20000b7c
 80034c0:	20000b80 	.word	0x20000b80
 80034c4:	20000b90 	.word	0x20000b90
 80034c8:	20000b8c 	.word	0x20000b8c
 80034cc:	20000208 	.word	0x20000208
		}
		else if((t_acc+t_const <= t) && (t < 2*t_acc+t_const)){ //Deceleration Segment
 80034d0:	4b76      	ldr	r3, [pc, #472]	@ (80036ac <createTrajectory+0x434>)
 80034d2:	ed93 7a00 	vldr	s14, [r3]
 80034d6:	4b76      	ldr	r3, [pc, #472]	@ (80036b0 <createTrajectory+0x438>)
 80034d8:	edd3 7a00 	vldr	s15, [r3]
 80034dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034e0:	4b74      	ldr	r3, [pc, #464]	@ (80036b4 <createTrajectory+0x43c>)
 80034e2:	edd3 7a00 	vldr	s15, [r3]
 80034e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ee:	f200 80d8 	bhi.w	80036a2 <createTrajectory+0x42a>
 80034f2:	4b6e      	ldr	r3, [pc, #440]	@ (80036ac <createTrajectory+0x434>)
 80034f4:	edd3 7a00 	vldr	s15, [r3]
 80034f8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80034fc:	4b6c      	ldr	r3, [pc, #432]	@ (80036b0 <createTrajectory+0x438>)
 80034fe:	edd3 7a00 	vldr	s15, [r3]
 8003502:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003506:	4b6b      	ldr	r3, [pc, #428]	@ (80036b4 <createTrajectory+0x43c>)
 8003508:	edd3 7a00 	vldr	s15, [r3]
 800350c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003514:	f340 80c5 	ble.w	80036a2 <createTrajectory+0x42a>
			ref_p = q_i + q_const + q_d_max*(t-t_acc-t_const)*dir-0.5*q_2d_max*(t-t_acc-t_const)*(t-t_acc-t_const)*dir;
 8003518:	4b67      	ldr	r3, [pc, #412]	@ (80036b8 <createTrajectory+0x440>)
 800351a:	ed93 7a00 	vldr	s14, [r3]
 800351e:	4b67      	ldr	r3, [pc, #412]	@ (80036bc <createTrajectory+0x444>)
 8003520:	edd3 7a00 	vldr	s15, [r3]
 8003524:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003528:	4b62      	ldr	r3, [pc, #392]	@ (80036b4 <createTrajectory+0x43c>)
 800352a:	edd3 6a00 	vldr	s13, [r3]
 800352e:	4b5f      	ldr	r3, [pc, #380]	@ (80036ac <createTrajectory+0x434>)
 8003530:	edd3 7a00 	vldr	s15, [r3]
 8003534:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003538:	4b5d      	ldr	r3, [pc, #372]	@ (80036b0 <createTrajectory+0x438>)
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003542:	4b5f      	ldr	r3, [pc, #380]	@ (80036c0 <createTrajectory+0x448>)
 8003544:	edd3 7a00 	vldr	s15, [r3]
 8003548:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800354c:	4b5d      	ldr	r3, [pc, #372]	@ (80036c4 <createTrajectory+0x44c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	ee07 3a90 	vmov	s15, r3
 8003554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800355c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003560:	ee17 0a90 	vmov	r0, s15
 8003564:	f7fc ffbc 	bl	80004e0 <__aeabi_f2d>
 8003568:	4604      	mov	r4, r0
 800356a:	460d      	mov	r5, r1
 800356c:	4b56      	ldr	r3, [pc, #344]	@ (80036c8 <createTrajectory+0x450>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f7fc ffb5 	bl	80004e0 <__aeabi_f2d>
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	4b54      	ldr	r3, [pc, #336]	@ (80036cc <createTrajectory+0x454>)
 800357c:	f7fd f808 	bl	8000590 <__aeabi_dmul>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4690      	mov	r8, r2
 8003586:	4699      	mov	r9, r3
 8003588:	4b4a      	ldr	r3, [pc, #296]	@ (80036b4 <createTrajectory+0x43c>)
 800358a:	ed93 7a00 	vldr	s14, [r3]
 800358e:	4b47      	ldr	r3, [pc, #284]	@ (80036ac <createTrajectory+0x434>)
 8003590:	edd3 7a00 	vldr	s15, [r3]
 8003594:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003598:	4b45      	ldr	r3, [pc, #276]	@ (80036b0 <createTrajectory+0x438>)
 800359a:	edd3 7a00 	vldr	s15, [r3]
 800359e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035a2:	ee17 0a90 	vmov	r0, s15
 80035a6:	f7fc ff9b 	bl	80004e0 <__aeabi_f2d>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4640      	mov	r0, r8
 80035b0:	4649      	mov	r1, r9
 80035b2:	f7fc ffed 	bl	8000590 <__aeabi_dmul>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	4690      	mov	r8, r2
 80035bc:	4699      	mov	r9, r3
 80035be:	4b3d      	ldr	r3, [pc, #244]	@ (80036b4 <createTrajectory+0x43c>)
 80035c0:	ed93 7a00 	vldr	s14, [r3]
 80035c4:	4b39      	ldr	r3, [pc, #228]	@ (80036ac <createTrajectory+0x434>)
 80035c6:	edd3 7a00 	vldr	s15, [r3]
 80035ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035ce:	4b38      	ldr	r3, [pc, #224]	@ (80036b0 <createTrajectory+0x438>)
 80035d0:	edd3 7a00 	vldr	s15, [r3]
 80035d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035d8:	ee17 0a90 	vmov	r0, s15
 80035dc:	f7fc ff80 	bl	80004e0 <__aeabi_f2d>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4640      	mov	r0, r8
 80035e6:	4649      	mov	r1, r9
 80035e8:	f7fc ffd2 	bl	8000590 <__aeabi_dmul>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4690      	mov	r8, r2
 80035f2:	4699      	mov	r9, r3
 80035f4:	4b33      	ldr	r3, [pc, #204]	@ (80036c4 <createTrajectory+0x44c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fc ff5f 	bl	80004bc <__aeabi_i2d>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4640      	mov	r0, r8
 8003604:	4649      	mov	r1, r9
 8003606:	f7fc ffc3 	bl	8000590 <__aeabi_dmul>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4620      	mov	r0, r4
 8003610:	4629      	mov	r1, r5
 8003612:	f7fc fe05 	bl	8000220 <__aeabi_dsub>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	f7fd fa87 	bl	8000b30 <__aeabi_d2f>
 8003622:	4603      	mov	r3, r0
 8003624:	4a2a      	ldr	r2, [pc, #168]	@ (80036d0 <createTrajectory+0x458>)
 8003626:	6013      	str	r3, [r2, #0]
			ref_v = -q_2d_max*(t-t_acc-t_const)*dir + q_d_max*dir;
 8003628:	4b27      	ldr	r3, [pc, #156]	@ (80036c8 <createTrajectory+0x450>)
 800362a:	edd3 7a00 	vldr	s15, [r3]
 800362e:	eeb1 7a67 	vneg.f32	s14, s15
 8003632:	4b20      	ldr	r3, [pc, #128]	@ (80036b4 <createTrajectory+0x43c>)
 8003634:	edd3 6a00 	vldr	s13, [r3]
 8003638:	4b1c      	ldr	r3, [pc, #112]	@ (80036ac <createTrajectory+0x434>)
 800363a:	edd3 7a00 	vldr	s15, [r3]
 800363e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003642:	4b1b      	ldr	r3, [pc, #108]	@ (80036b0 <createTrajectory+0x438>)
 8003644:	edd3 7a00 	vldr	s15, [r3]
 8003648:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800364c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003650:	4b1c      	ldr	r3, [pc, #112]	@ (80036c4 <createTrajectory+0x44c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	ee07 3a90 	vmov	s15, r3
 8003658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800365c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003660:	4b18      	ldr	r3, [pc, #96]	@ (80036c4 <createTrajectory+0x44c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	ee07 3a90 	vmov	s15, r3
 8003668:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800366c:	4b14      	ldr	r3, [pc, #80]	@ (80036c0 <createTrajectory+0x448>)
 800366e:	edd3 7a00 	vldr	s15, [r3]
 8003672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800367a:	4b16      	ldr	r3, [pc, #88]	@ (80036d4 <createTrajectory+0x45c>)
 800367c:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 8003680:	4b11      	ldr	r3, [pc, #68]	@ (80036c8 <createTrajectory+0x450>)
 8003682:	edd3 7a00 	vldr	s15, [r3]
 8003686:	eeb1 7a67 	vneg.f32	s14, s15
 800368a:	4b0e      	ldr	r3, [pc, #56]	@ (80036c4 <createTrajectory+0x44c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800369a:	4b0f      	ldr	r3, [pc, #60]	@ (80036d8 <createTrajectory+0x460>)
 800369c:	edc3 7a00 	vstr	s15, [r3]
 80036a0:	e1a3      	b.n	80039ea <createTrajectory+0x772>
		}
		else{
			calmode = 3;
 80036a2:	4b0e      	ldr	r3, [pc, #56]	@ (80036dc <createTrajectory+0x464>)
 80036a4:	2203      	movs	r2, #3
 80036a6:	701a      	strb	r2, [r3, #0]
	else if(calmode == 3){ //stop
		ref_p = q_f;
		ref_v = 0;
		ref_a = 0;
	}
}
 80036a8:	e19f      	b.n	80039ea <createTrajectory+0x772>
 80036aa:	bf00      	nop
 80036ac:	20000b88 	.word	0x20000b88
 80036b0:	20000b90 	.word	0x20000b90
 80036b4:	20000ba8 	.word	0x20000ba8
 80036b8:	20000b70 	.word	0x20000b70
 80036bc:	20000b94 	.word	0x20000b94
 80036c0:	20000208 	.word	0x20000208
 80036c4:	20000214 	.word	0x20000214
 80036c8:	2000020c 	.word	0x2000020c
 80036cc:	3fe00000 	.word	0x3fe00000
 80036d0:	20000b78 	.word	0x20000b78
 80036d4:	20000b7c 	.word	0x20000b7c
 80036d8:	20000b80 	.word	0x20000b80
 80036dc:	20000210 	.word	0x20000210
	else if(calmode == 2){
 80036e0:	4bc3      	ldr	r3, [pc, #780]	@ (80039f0 <createTrajectory+0x778>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	f040 816f 	bne.w	80039c8 <createTrajectory+0x750>
		t = (float)(micros()-T_start)/1000000; //sec
 80036ea:	f7ff fa53 	bl	8002b94 <micros>
 80036ee:	4bc1      	ldr	r3, [pc, #772]	@ (80039f4 <createTrajectory+0x77c>)
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	1a84      	subs	r4, r0, r2
 80036f6:	eb61 0503 	sbc.w	r5, r1, r3
 80036fa:	4620      	mov	r0, r4
 80036fc:	4629      	mov	r1, r5
 80036fe:	f7fd fb2f 	bl	8000d60 <__aeabi_ul2f>
 8003702:	ee06 0a90 	vmov	s13, r0
 8003706:	ed9f 7abc 	vldr	s14, [pc, #752]	@ 80039f8 <createTrajectory+0x780>
 800370a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800370e:	4bbb      	ldr	r3, [pc, #748]	@ (80039fc <createTrajectory+0x784>)
 8003710:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 8003714:	4bb9      	ldr	r3, [pc, #740]	@ (80039fc <createTrajectory+0x784>)
 8003716:	edd3 7a00 	vldr	s15, [r3]
 800371a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800371e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003722:	f2c0 8094 	blt.w	800384e <createTrajectory+0x5d6>
 8003726:	4bb5      	ldr	r3, [pc, #724]	@ (80039fc <createTrajectory+0x784>)
 8003728:	ed93 7a00 	vldr	s14, [r3]
 800372c:	4bb4      	ldr	r3, [pc, #720]	@ (8003a00 <createTrajectory+0x788>)
 800372e:	edd3 7a00 	vldr	s15, [r3]
 8003732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373a:	f140 8088 	bpl.w	800384e <createTrajectory+0x5d6>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 800373e:	4bb1      	ldr	r3, [pc, #708]	@ (8003a04 <createTrajectory+0x78c>)
 8003740:	ed93 7a00 	vldr	s14, [r3]
 8003744:	4bad      	ldr	r3, [pc, #692]	@ (80039fc <createTrajectory+0x784>)
 8003746:	edd3 7a00 	vldr	s15, [r3]
 800374a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800374e:	4bae      	ldr	r3, [pc, #696]	@ (8003a08 <createTrajectory+0x790>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	ee07 3a90 	vmov	s15, r3
 8003756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800375a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800375e:	4bab      	ldr	r3, [pc, #684]	@ (8003a0c <createTrajectory+0x794>)
 8003760:	edd3 7a00 	vldr	s15, [r3]
 8003764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003768:	ee17 0a90 	vmov	r0, s15
 800376c:	f7fc feb8 	bl	80004e0 <__aeabi_f2d>
 8003770:	4604      	mov	r4, r0
 8003772:	460d      	mov	r5, r1
 8003774:	4ba6      	ldr	r3, [pc, #664]	@ (8003a10 <createTrajectory+0x798>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7fc feb1 	bl	80004e0 <__aeabi_f2d>
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	4ba4      	ldr	r3, [pc, #656]	@ (8003a14 <createTrajectory+0x79c>)
 8003784:	f7fc ff04 	bl	8000590 <__aeabi_dmul>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4690      	mov	r8, r2
 800378e:	4699      	mov	r9, r3
 8003790:	4b9a      	ldr	r3, [pc, #616]	@ (80039fc <createTrajectory+0x784>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f7fc fea3 	bl	80004e0 <__aeabi_f2d>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4640      	mov	r0, r8
 80037a0:	4649      	mov	r1, r9
 80037a2:	f7fc fef5 	bl	8000590 <__aeabi_dmul>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4690      	mov	r8, r2
 80037ac:	4699      	mov	r9, r3
 80037ae:	4b93      	ldr	r3, [pc, #588]	@ (80039fc <createTrajectory+0x784>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fc fe94 	bl	80004e0 <__aeabi_f2d>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4640      	mov	r0, r8
 80037be:	4649      	mov	r1, r9
 80037c0:	f7fc fee6 	bl	8000590 <__aeabi_dmul>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4690      	mov	r8, r2
 80037ca:	4699      	mov	r9, r3
 80037cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003a08 <createTrajectory+0x790>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fc fe73 	bl	80004bc <__aeabi_i2d>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4640      	mov	r0, r8
 80037dc:	4649      	mov	r1, r9
 80037de:	f7fc fed7 	bl	8000590 <__aeabi_dmul>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4620      	mov	r0, r4
 80037e8:	4629      	mov	r1, r5
 80037ea:	f7fc fd1b 	bl	8000224 <__adddf3>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4610      	mov	r0, r2
 80037f4:	4619      	mov	r1, r3
 80037f6:	f7fd f99b 	bl	8000b30 <__aeabi_d2f>
 80037fa:	4603      	mov	r3, r0
 80037fc:	4a86      	ldr	r2, [pc, #536]	@ (8003a18 <createTrajectory+0x7a0>)
 80037fe:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 8003800:	4b83      	ldr	r3, [pc, #524]	@ (8003a10 <createTrajectory+0x798>)
 8003802:	ed93 7a00 	vldr	s14, [r3]
 8003806:	4b7d      	ldr	r3, [pc, #500]	@ (80039fc <createTrajectory+0x784>)
 8003808:	edd3 7a00 	vldr	s15, [r3]
 800380c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003810:	4b7d      	ldr	r3, [pc, #500]	@ (8003a08 <createTrajectory+0x790>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	ee07 3a90 	vmov	s15, r3
 8003818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800381c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003820:	4b78      	ldr	r3, [pc, #480]	@ (8003a04 <createTrajectory+0x78c>)
 8003822:	edd3 7a00 	vldr	s15, [r3]
 8003826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800382a:	4b7c      	ldr	r3, [pc, #496]	@ (8003a1c <createTrajectory+0x7a4>)
 800382c:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 8003830:	4b75      	ldr	r3, [pc, #468]	@ (8003a08 <createTrajectory+0x790>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	ee07 3a90 	vmov	s15, r3
 8003838:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800383c:	4b74      	ldr	r3, [pc, #464]	@ (8003a10 <createTrajectory+0x798>)
 800383e:	edd3 7a00 	vldr	s15, [r3]
 8003842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003846:	4b76      	ldr	r3, [pc, #472]	@ (8003a20 <createTrajectory+0x7a8>)
 8003848:	edc3 7a00 	vstr	s15, [r3]
 800384c:	e0cd      	b.n	80039ea <createTrajectory+0x772>
		else if((t_acc <= t) && (t < t_acc*2)){
 800384e:	4b6c      	ldr	r3, [pc, #432]	@ (8003a00 <createTrajectory+0x788>)
 8003850:	ed93 7a00 	vldr	s14, [r3]
 8003854:	4b69      	ldr	r3, [pc, #420]	@ (80039fc <createTrajectory+0x784>)
 8003856:	edd3 7a00 	vldr	s15, [r3]
 800385a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800385e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003862:	f200 80ad 	bhi.w	80039c0 <createTrajectory+0x748>
 8003866:	4b66      	ldr	r3, [pc, #408]	@ (8003a00 <createTrajectory+0x788>)
 8003868:	edd3 7a00 	vldr	s15, [r3]
 800386c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003870:	4b62      	ldr	r3, [pc, #392]	@ (80039fc <createTrajectory+0x784>)
 8003872:	edd3 7a00 	vldr	s15, [r3]
 8003876:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800387a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387e:	f340 809f 	ble.w	80039c0 <createTrajectory+0x748>
			ref_p = q_i + q_acc + q_d_acc*(t-t_acc) - 0.5*q_2d_max*(t-t_acc)*(t-t_acc)*dir;
 8003882:	4b62      	ldr	r3, [pc, #392]	@ (8003a0c <createTrajectory+0x794>)
 8003884:	ed93 7a00 	vldr	s14, [r3]
 8003888:	4b66      	ldr	r3, [pc, #408]	@ (8003a24 <createTrajectory+0x7ac>)
 800388a:	edd3 7a00 	vldr	s15, [r3]
 800388e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003892:	4b5a      	ldr	r3, [pc, #360]	@ (80039fc <createTrajectory+0x784>)
 8003894:	edd3 6a00 	vldr	s13, [r3]
 8003898:	4b59      	ldr	r3, [pc, #356]	@ (8003a00 <createTrajectory+0x788>)
 800389a:	edd3 7a00 	vldr	s15, [r3]
 800389e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80038a2:	4b61      	ldr	r3, [pc, #388]	@ (8003a28 <createTrajectory+0x7b0>)
 80038a4:	edd3 7a00 	vldr	s15, [r3]
 80038a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038b0:	ee17 0a90 	vmov	r0, s15
 80038b4:	f7fc fe14 	bl	80004e0 <__aeabi_f2d>
 80038b8:	4604      	mov	r4, r0
 80038ba:	460d      	mov	r5, r1
 80038bc:	4b54      	ldr	r3, [pc, #336]	@ (8003a10 <createTrajectory+0x798>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fc fe0d 	bl	80004e0 <__aeabi_f2d>
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	4b52      	ldr	r3, [pc, #328]	@ (8003a14 <createTrajectory+0x79c>)
 80038cc:	f7fc fe60 	bl	8000590 <__aeabi_dmul>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4690      	mov	r8, r2
 80038d6:	4699      	mov	r9, r3
 80038d8:	4b48      	ldr	r3, [pc, #288]	@ (80039fc <createTrajectory+0x784>)
 80038da:	ed93 7a00 	vldr	s14, [r3]
 80038de:	4b48      	ldr	r3, [pc, #288]	@ (8003a00 <createTrajectory+0x788>)
 80038e0:	edd3 7a00 	vldr	s15, [r3]
 80038e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038e8:	ee17 0a90 	vmov	r0, s15
 80038ec:	f7fc fdf8 	bl	80004e0 <__aeabi_f2d>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4640      	mov	r0, r8
 80038f6:	4649      	mov	r1, r9
 80038f8:	f7fc fe4a 	bl	8000590 <__aeabi_dmul>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4690      	mov	r8, r2
 8003902:	4699      	mov	r9, r3
 8003904:	4b3d      	ldr	r3, [pc, #244]	@ (80039fc <createTrajectory+0x784>)
 8003906:	ed93 7a00 	vldr	s14, [r3]
 800390a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a00 <createTrajectory+0x788>)
 800390c:	edd3 7a00 	vldr	s15, [r3]
 8003910:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003914:	ee17 0a90 	vmov	r0, s15
 8003918:	f7fc fde2 	bl	80004e0 <__aeabi_f2d>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4640      	mov	r0, r8
 8003922:	4649      	mov	r1, r9
 8003924:	f7fc fe34 	bl	8000590 <__aeabi_dmul>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4690      	mov	r8, r2
 800392e:	4699      	mov	r9, r3
 8003930:	4b35      	ldr	r3, [pc, #212]	@ (8003a08 <createTrajectory+0x790>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7fc fdc1 	bl	80004bc <__aeabi_i2d>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4640      	mov	r0, r8
 8003940:	4649      	mov	r1, r9
 8003942:	f7fc fe25 	bl	8000590 <__aeabi_dmul>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4620      	mov	r0, r4
 800394c:	4629      	mov	r1, r5
 800394e:	f7fc fc67 	bl	8000220 <__aeabi_dsub>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4610      	mov	r0, r2
 8003958:	4619      	mov	r1, r3
 800395a:	f7fd f8e9 	bl	8000b30 <__aeabi_d2f>
 800395e:	4603      	mov	r3, r0
 8003960:	4a2d      	ldr	r2, [pc, #180]	@ (8003a18 <createTrajectory+0x7a0>)
 8003962:	6013      	str	r3, [r2, #0]
			ref_v = q_d_acc - q_2d_max*(t-t_acc)*dir;
 8003964:	4b30      	ldr	r3, [pc, #192]	@ (8003a28 <createTrajectory+0x7b0>)
 8003966:	ed93 7a00 	vldr	s14, [r3]
 800396a:	4b24      	ldr	r3, [pc, #144]	@ (80039fc <createTrajectory+0x784>)
 800396c:	edd3 6a00 	vldr	s13, [r3]
 8003970:	4b23      	ldr	r3, [pc, #140]	@ (8003a00 <createTrajectory+0x788>)
 8003972:	edd3 7a00 	vldr	s15, [r3]
 8003976:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800397a:	4b25      	ldr	r3, [pc, #148]	@ (8003a10 <createTrajectory+0x798>)
 800397c:	edd3 7a00 	vldr	s15, [r3]
 8003980:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003984:	4b20      	ldr	r3, [pc, #128]	@ (8003a08 <createTrajectory+0x790>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	ee07 3a90 	vmov	s15, r3
 800398c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003990:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003994:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003998:	4b20      	ldr	r3, [pc, #128]	@ (8003a1c <createTrajectory+0x7a4>)
 800399a:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 800399e:	4b1c      	ldr	r3, [pc, #112]	@ (8003a10 <createTrajectory+0x798>)
 80039a0:	edd3 7a00 	vldr	s15, [r3]
 80039a4:	eeb1 7a67 	vneg.f32	s14, s15
 80039a8:	4b17      	ldr	r3, [pc, #92]	@ (8003a08 <createTrajectory+0x790>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	ee07 3a90 	vmov	s15, r3
 80039b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b8:	4b19      	ldr	r3, [pc, #100]	@ (8003a20 <createTrajectory+0x7a8>)
 80039ba:	edc3 7a00 	vstr	s15, [r3]
 80039be:	e014      	b.n	80039ea <createTrajectory+0x772>
			calmode = 3;
 80039c0:	4b0b      	ldr	r3, [pc, #44]	@ (80039f0 <createTrajectory+0x778>)
 80039c2:	2203      	movs	r2, #3
 80039c4:	701a      	strb	r2, [r3, #0]
}
 80039c6:	e010      	b.n	80039ea <createTrajectory+0x772>
	else if(calmode == 3){ //stop
 80039c8:	4b09      	ldr	r3, [pc, #36]	@ (80039f0 <createTrajectory+0x778>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d10c      	bne.n	80039ea <createTrajectory+0x772>
		ref_p = q_f;
 80039d0:	4b16      	ldr	r3, [pc, #88]	@ (8003a2c <createTrajectory+0x7b4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a10      	ldr	r2, [pc, #64]	@ (8003a18 <createTrajectory+0x7a0>)
 80039d6:	6013      	str	r3, [r2, #0]
		ref_v = 0;
 80039d8:	4b10      	ldr	r3, [pc, #64]	@ (8003a1c <createTrajectory+0x7a4>)
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
		ref_a = 0;
 80039e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a20 <createTrajectory+0x7a8>)
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
}
 80039e8:	e7ff      	b.n	80039ea <createTrajectory+0x772>
 80039ea:	bf00      	nop
 80039ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039f0:	20000210 	.word	0x20000210
 80039f4:	20000ba0 	.word	0x20000ba0
 80039f8:	49742400 	.word	0x49742400
 80039fc:	20000ba8 	.word	0x20000ba8
 8003a00:	20000b88 	.word	0x20000b88
 8003a04:	20000b68 	.word	0x20000b68
 8003a08:	20000214 	.word	0x20000214
 8003a0c:	20000b70 	.word	0x20000b70
 8003a10:	2000020c 	.word	0x2000020c
 8003a14:	3fe00000 	.word	0x3fe00000
 8003a18:	20000b78 	.word	0x20000b78
 8003a1c:	20000b7c 	.word	0x20000b7c
 8003a20:	20000b80 	.word	0x20000b80
 8003a24:	20000b8c 	.word	0x20000b8c
 8003a28:	20000b98 	.word	0x20000b98
 8003a2c:	20000b6c 	.word	0x20000b6c

08003a30 <DriveMotor>:

//--------------------------Drive Motor----------------//

void DriveMotor(){
 8003a30:	b598      	push	{r3, r4, r7, lr}
 8003a32:	af00      	add	r7, sp, #0
//		S_down_savestate = S_down;
//		mode_savestate = mode;
//		timestamp_savestate = micros() + 50000;
//	}
	//PWM Motor
	duty_cycle = (fabs(Vin)*100)/24;
 8003a34:	4b26      	ldr	r3, [pc, #152]	@ (8003ad0 <DriveMotor+0xa0>)
 8003a36:	edd3 7a00 	vldr	s15, [r3]
 8003a3a:	eef0 7ae7 	vabs.f32	s15, s15
 8003a3e:	ee17 0a90 	vmov	r0, s15
 8003a42:	f7fc fd4d 	bl	80004e0 <__aeabi_f2d>
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	4b22      	ldr	r3, [pc, #136]	@ (8003ad4 <DriveMotor+0xa4>)
 8003a4c:	f7fc fda0 	bl	8000590 <__aeabi_dmul>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4610      	mov	r0, r2
 8003a56:	4619      	mov	r1, r3
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad8 <DriveMotor+0xa8>)
 8003a5e:	f7fc fec1 	bl	80007e4 <__aeabi_ddiv>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4610      	mov	r0, r2
 8003a68:	4619      	mov	r1, r3
 8003a6a:	f7fd f861 	bl	8000b30 <__aeabi_d2f>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4a1a      	ldr	r2, [pc, #104]	@ (8003adc <DriveMotor+0xac>)
 8003a72:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycle*9.99);
 8003a74:	4b19      	ldr	r3, [pc, #100]	@ (8003adc <DriveMotor+0xac>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fc fd31 	bl	80004e0 <__aeabi_f2d>
 8003a7e:	a312      	add	r3, pc, #72	@ (adr r3, 8003ac8 <DriveMotor+0x98>)
 8003a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a84:	f7fc fd84 	bl	8000590 <__aeabi_dmul>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4914      	ldr	r1, [pc, #80]	@ (8003ae0 <DriveMotor+0xb0>)
 8003a8e:	680c      	ldr	r4, [r1, #0]
 8003a90:	4610      	mov	r0, r2
 8003a92:	4619      	mov	r1, r3
 8003a94:	f7fd f82c 	bl	8000af0 <__aeabi_d2uiz>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	6363      	str	r3, [r4, #52]	@ 0x34

	//Control Motor Direction
	if(Vin < 0){
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad0 <DriveMotor+0xa0>)
 8003a9e:	edd3 7a00 	vldr	s15, [r3]
 8003aa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aaa:	d505      	bpl.n	8003ab8 <DriveMotor+0x88>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8003aac:	2201      	movs	r2, #1
 8003aae:	2120      	movs	r1, #32
 8003ab0:	480c      	ldr	r0, [pc, #48]	@ (8003ae4 <DriveMotor+0xb4>)
 8003ab2:	f003 fb83 	bl	80071bc <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
	}
//	Vin_old = Vin;
}
 8003ab6:	e004      	b.n	8003ac2 <DriveMotor+0x92>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2120      	movs	r1, #32
 8003abc:	4809      	ldr	r0, [pc, #36]	@ (8003ae4 <DriveMotor+0xb4>)
 8003abe:	f003 fb7d 	bl	80071bc <HAL_GPIO_WritePin>
}
 8003ac2:	bf00      	nop
 8003ac4:	bd98      	pop	{r3, r4, r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	47ae147b 	.word	0x47ae147b
 8003acc:	4023fae1 	.word	0x4023fae1
 8003ad0:	20000b60 	.word	0x20000b60
 8003ad4:	40590000 	.word	0x40590000
 8003ad8:	40380000 	.word	0x40380000
 8003adc:	20000204 	.word	0x20000204
 8003ae0:	200004a8 	.word	0x200004a8
 8003ae4:	48000800 	.word	0x48000800

08003ae8 <SoftwareLimit>:

void SoftwareLimit(){
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
	if(S_top == 1 && Vin >= -2){
 8003aec:	4b26      	ldr	r3, [pc, #152]	@ (8003b88 <SoftwareLimit+0xa0>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d10e      	bne.n	8003b12 <SoftwareLimit+0x2a>
 8003af4:	4b25      	ldr	r3, [pc, #148]	@ (8003b8c <SoftwareLimit+0xa4>)
 8003af6:	edd3 7a00 	vldr	s15, [r3]
 8003afa:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b06:	db04      	blt.n	8003b12 <SoftwareLimit+0x2a>
		Vin = 0;
 8003b08:	4b20      	ldr	r3, [pc, #128]	@ (8003b8c <SoftwareLimit+0xa4>)
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e010      	b.n	8003b34 <SoftwareLimit+0x4c>
	}
	else if(S_top == 1 && Vin < -2){
 8003b12:	4b1d      	ldr	r3, [pc, #116]	@ (8003b88 <SoftwareLimit+0xa0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d10c      	bne.n	8003b34 <SoftwareLimit+0x4c>
 8003b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003b8c <SoftwareLimit+0xa4>)
 8003b1c:	edd3 7a00 	vldr	s15, [r3]
 8003b20:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b2c:	d502      	bpl.n	8003b34 <SoftwareLimit+0x4c>
		S_top = 0;
 8003b2e:	4b16      	ldr	r3, [pc, #88]	@ (8003b88 <SoftwareLimit+0xa0>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
	}

	if(S_down == 1 && Vin <= 2){
 8003b34:	4b16      	ldr	r3, [pc, #88]	@ (8003b90 <SoftwareLimit+0xa8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d10e      	bne.n	8003b5a <SoftwareLimit+0x72>
 8003b3c:	4b13      	ldr	r3, [pc, #76]	@ (8003b8c <SoftwareLimit+0xa4>)
 8003b3e:	edd3 7a00 	vldr	s15, [r3]
 8003b42:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4e:	d804      	bhi.n	8003b5a <SoftwareLimit+0x72>
		Vin = 0;
 8003b50:	4b0e      	ldr	r3, [pc, #56]	@ (8003b8c <SoftwareLimit+0xa4>)
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
	}
	else if(S_down == 1 && Vin > 2){
		S_down = 0;
	}

}
 8003b58:	e011      	b.n	8003b7e <SoftwareLimit+0x96>
	else if(S_down == 1 && Vin > 2){
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b90 <SoftwareLimit+0xa8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d10d      	bne.n	8003b7e <SoftwareLimit+0x96>
 8003b62:	4b0a      	ldr	r3, [pc, #40]	@ (8003b8c <SoftwareLimit+0xa4>)
 8003b64:	edd3 7a00 	vldr	s15, [r3]
 8003b68:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b74:	dc00      	bgt.n	8003b78 <SoftwareLimit+0x90>
}
 8003b76:	e002      	b.n	8003b7e <SoftwareLimit+0x96>
		S_down = 0;
 8003b78:	4b05      	ldr	r3, [pc, #20]	@ (8003b90 <SoftwareLimit+0xa8>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
}
 8003b7e:	bf00      	nop
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	20000c28 	.word	0x20000c28
 8003b8c:	20000b60 	.word	0x20000b60
 8003b90:	20000c2c 	.word	0x20000c2c
 8003b94:	00000000 	.word	0x00000000

08003b98 <JoystickInput>:


//------------------------------------Joy---------------------------------------//

void JoystickInput(){
 8003b98:	b5b0      	push	{r4, r5, r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
	//Control y-axis by joy
	Vin = (float)(ADCBuffer[1]-1850)*24/2048; //0->24V
 8003b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003c48 <JoystickInput+0xb0>)
 8003b9e:	885b      	ldrh	r3, [r3, #2]
 8003ba0:	f2a3 733a 	subw	r3, r3, #1850	@ 0x73a
 8003ba4:	ee07 3a90 	vmov	s15, r3
 8003ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bac:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8003bb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003bb4:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8003c4c <JoystickInput+0xb4>
 8003bb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bbc:	4b24      	ldr	r3, [pc, #144]	@ (8003c50 <JoystickInput+0xb8>)
 8003bbe:	edc3 7a00 	vstr	s15, [r3]
	if(Vin > -3 && Vin < 3){
 8003bc2:	4b23      	ldr	r3, [pc, #140]	@ (8003c50 <JoystickInput+0xb8>)
 8003bc4:	edd3 7a00 	vldr	s15, [r3]
 8003bc8:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 8003bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd4:	dd0d      	ble.n	8003bf2 <JoystickInput+0x5a>
 8003bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c50 <JoystickInput+0xb8>)
 8003bd8:	edd3 7a00 	vldr	s15, [r3]
 8003bdc:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003be0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be8:	d503      	bpl.n	8003bf2 <JoystickInput+0x5a>
		Vin = 0;
 8003bea:	4b19      	ldr	r3, [pc, #100]	@ (8003c50 <JoystickInput+0xb8>)
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
	}

	//Control x-axis by joy
	x_position += ((ADCBuffer[0]-2048)*0.005);
 8003bf2:	4b18      	ldr	r3, [pc, #96]	@ (8003c54 <JoystickInput+0xbc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fc fc72 	bl	80004e0 <__aeabi_f2d>
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	460d      	mov	r5, r1
 8003c00:	4b11      	ldr	r3, [pc, #68]	@ (8003c48 <JoystickInput+0xb0>)
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fc fc57 	bl	80004bc <__aeabi_i2d>
 8003c0e:	a30c      	add	r3, pc, #48	@ (adr r3, 8003c40 <JoystickInput+0xa8>)
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	f7fc fcbc 	bl	8000590 <__aeabi_dmul>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	4629      	mov	r1, r5
 8003c20:	f7fc fb00 	bl	8000224 <__adddf3>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	f7fc ff80 	bl	8000b30 <__aeabi_d2f>
 8003c30:	4603      	mov	r3, r0
 8003c32:	4a08      	ldr	r2, [pc, #32]	@ (8003c54 <JoystickInput+0xbc>)
 8003c34:	6013      	str	r3, [r2, #0]
}
 8003c36:	bf00      	nop
 8003c38:	bdb0      	pop	{r4, r5, r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	f3af 8000 	nop.w
 8003c40:	47ae147b 	.word	0x47ae147b
 8003c44:	3f747ae1 	.word	0x3f747ae1
 8003c48:	20000b48 	.word	0x20000b48
 8003c4c:	45000000 	.word	0x45000000
 8003c50:	20000b60 	.word	0x20000b60
 8003c54:	20000b4c 	.word	0x20000b4c

08003c58 <button_up_down_input>:

void button_up_down_input(){
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
	//check button up
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 1){
 8003c5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003c60:	4844      	ldr	r0, [pc, #272]	@ (8003d74 <button_up_down_input+0x11c>)
 8003c62:	f003 fa93 	bl	800718c <HAL_GPIO_ReadPin>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d113      	bne.n	8003c94 <button_up_down_input+0x3c>
		set_manual_point = QEIdata.linearPos + 10; //stem 10 mm
 8003c6c:	4b42      	ldr	r3, [pc, #264]	@ (8003d78 <button_up_down_input+0x120>)
 8003c6e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003c72:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003c76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c7a:	4b40      	ldr	r3, [pc, #256]	@ (8003d7c <button_up_down_input+0x124>)
 8003c7c:	edc3 7a00 	vstr	s15, [r3]
		check_up = 1;
 8003c80:	4b3f      	ldr	r3, [pc, #252]	@ (8003d80 <button_up_down_input+0x128>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	701a      	strb	r2, [r3, #0]
		B_up = 1;
 8003c86:	4b3f      	ldr	r3, [pc, #252]	@ (8003d84 <button_up_down_input+0x12c>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	701a      	strb	r2, [r3, #0]
		check_state_B = 1;
 8003c8c:	4b3e      	ldr	r3, [pc, #248]	@ (8003d88 <button_up_down_input+0x130>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	e005      	b.n	8003ca0 <button_up_down_input+0x48>
	}
	else{
		B_up = 0;
 8003c94:	4b3b      	ldr	r3, [pc, #236]	@ (8003d84 <button_up_down_input+0x12c>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]
		check_state_B = 2;
 8003c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d88 <button_up_down_input+0x130>)
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	601a      	str	r2, [r3, #0]
	}
	if(QEIdata.linearPos < set_manual_point && check_up == 1){
 8003ca0:	4b35      	ldr	r3, [pc, #212]	@ (8003d78 <button_up_down_input+0x120>)
 8003ca2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003ca6:	4b35      	ldr	r3, [pc, #212]	@ (8003d7c <button_up_down_input+0x124>)
 8003ca8:	edd3 7a00 	vldr	s15, [r3]
 8003cac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb4:	d50b      	bpl.n	8003cce <button_up_down_input+0x76>
 8003cb6:	4b32      	ldr	r3, [pc, #200]	@ (8003d80 <button_up_down_input+0x128>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d107      	bne.n	8003cce <button_up_down_input+0x76>
		Vin = 4;
 8003cbe:	4b33      	ldr	r3, [pc, #204]	@ (8003d8c <button_up_down_input+0x134>)
 8003cc0:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8003cc4:	601a      	str	r2, [r3, #0]
		check_state_B = 3;
 8003cc6:	4b30      	ldr	r3, [pc, #192]	@ (8003d88 <button_up_down_input+0x130>)
 8003cc8:	2203      	movs	r2, #3
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	e005      	b.n	8003cda <button_up_down_input+0x82>
	}
	else{
		check_up = 0;
 8003cce:	4b2c      	ldr	r3, [pc, #176]	@ (8003d80 <button_up_down_input+0x128>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	701a      	strb	r2, [r3, #0]
		check_state_B = 4;
 8003cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8003d88 <button_up_down_input+0x130>)
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	601a      	str	r2, [r3, #0]
	}

	//check button down
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == 1){
 8003cda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003cde:	4825      	ldr	r0, [pc, #148]	@ (8003d74 <button_up_down_input+0x11c>)
 8003ce0:	f003 fa54 	bl	800718c <HAL_GPIO_ReadPin>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d113      	bne.n	8003d12 <button_up_down_input+0xba>
		set_manual_point = QEIdata.linearPos - 10;
 8003cea:	4b23      	ldr	r3, [pc, #140]	@ (8003d78 <button_up_down_input+0x120>)
 8003cec:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003cf0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003cf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003cf8:	4b20      	ldr	r3, [pc, #128]	@ (8003d7c <button_up_down_input+0x124>)
 8003cfa:	edc3 7a00 	vstr	s15, [r3]
		check_down = 1;
 8003cfe:	4b24      	ldr	r3, [pc, #144]	@ (8003d90 <button_up_down_input+0x138>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	701a      	strb	r2, [r3, #0]
		B_down = 1;
 8003d04:	4b23      	ldr	r3, [pc, #140]	@ (8003d94 <button_up_down_input+0x13c>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	701a      	strb	r2, [r3, #0]
		check_state_B = 5;
 8003d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8003d88 <button_up_down_input+0x130>)
 8003d0c:	2205      	movs	r2, #5
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	e005      	b.n	8003d1e <button_up_down_input+0xc6>
	}
	else{
		B_down = 0;
 8003d12:	4b20      	ldr	r3, [pc, #128]	@ (8003d94 <button_up_down_input+0x13c>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	701a      	strb	r2, [r3, #0]
		check_state_B = 6;
 8003d18:	4b1b      	ldr	r3, [pc, #108]	@ (8003d88 <button_up_down_input+0x130>)
 8003d1a:	2206      	movs	r2, #6
 8003d1c:	601a      	str	r2, [r3, #0]
	}
	if(QEIdata.linearPos > set_manual_point && check_down == 1){
 8003d1e:	4b16      	ldr	r3, [pc, #88]	@ (8003d78 <button_up_down_input+0x120>)
 8003d20:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003d24:	4b15      	ldr	r3, [pc, #84]	@ (8003d7c <button_up_down_input+0x124>)
 8003d26:	edd3 7a00 	vldr	s15, [r3]
 8003d2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d32:	dd0a      	ble.n	8003d4a <button_up_down_input+0xf2>
 8003d34:	4b16      	ldr	r3, [pc, #88]	@ (8003d90 <button_up_down_input+0x138>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d106      	bne.n	8003d4a <button_up_down_input+0xf2>
		Vin = -3;
 8003d3c:	4b13      	ldr	r3, [pc, #76]	@ (8003d8c <button_up_down_input+0x134>)
 8003d3e:	4a16      	ldr	r2, [pc, #88]	@ (8003d98 <button_up_down_input+0x140>)
 8003d40:	601a      	str	r2, [r3, #0]
		check_state_B = 7;
 8003d42:	4b11      	ldr	r3, [pc, #68]	@ (8003d88 <button_up_down_input+0x130>)
 8003d44:	2207      	movs	r2, #7
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	e005      	b.n	8003d56 <button_up_down_input+0xfe>
	}
	else{
		check_down = 0;
 8003d4a:	4b11      	ldr	r3, [pc, #68]	@ (8003d90 <button_up_down_input+0x138>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
		check_state_B = 8;
 8003d50:	4b0d      	ldr	r3, [pc, #52]	@ (8003d88 <button_up_down_input+0x130>)
 8003d52:	2208      	movs	r2, #8
 8003d54:	601a      	str	r2, [r3, #0]
	}

	if(check_up == 0 && check_down == 0){
 8003d56:	4b0a      	ldr	r3, [pc, #40]	@ (8003d80 <button_up_down_input+0x128>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d107      	bne.n	8003d6e <button_up_down_input+0x116>
 8003d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d90 <button_up_down_input+0x138>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d103      	bne.n	8003d6e <button_up_down_input+0x116>
		Vin = 0;
 8003d66:	4b09      	ldr	r3, [pc, #36]	@ (8003d8c <button_up_down_input+0x134>)
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]
	}
}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	48000800 	.word	0x48000800
 8003d78:	20000b00 	.word	0x20000b00
 8003d7c:	20000b50 	.word	0x20000b50
 8003d80:	20000b54 	.word	0x20000b54
 8003d84:	20000bb0 	.word	0x20000bb0
 8003d88:	20000c38 	.word	0x20000c38
 8003d8c:	20000b60 	.word	0x20000b60
 8003d90:	20000b55 	.word	0x20000b55
 8003d94:	20000bb1 	.word	0x20000bb1
 8003d98:	c0400000 	.word	0xc0400000

08003d9c <button_reset_input>:

void button_reset_input(){
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
	//check button reset
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1 || (Home_state_triger == 0 && set_Home_state == 1) || emergency_reset == 1){
 8003da0:	2104      	movs	r1, #4
 8003da2:	4836      	ldr	r0, [pc, #216]	@ (8003e7c <button_reset_input+0xe0>)
 8003da4:	f003 f9f2 	bl	800718c <HAL_GPIO_ReadPin>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d00b      	beq.n	8003dc6 <button_reset_input+0x2a>
 8003dae:	4b34      	ldr	r3, [pc, #208]	@ (8003e80 <button_reset_input+0xe4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d103      	bne.n	8003dbe <button_reset_input+0x22>
 8003db6:	4b33      	ldr	r3, [pc, #204]	@ (8003e84 <button_reset_input+0xe8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d003      	beq.n	8003dc6 <button_reset_input+0x2a>
 8003dbe:	4b32      	ldr	r3, [pc, #200]	@ (8003e88 <button_reset_input+0xec>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d153      	bne.n	8003e6e <button_reset_input+0xd2>
		B_reset = 1;
 8003dc6:	4b31      	ldr	r3, [pc, #196]	@ (8003e8c <button_reset_input+0xf0>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 8003dcc:	e008      	b.n	8003de0 <button_reset_input+0x44>
			Modbus_Protocal_Worker();
 8003dce:	f7fd fa51 	bl	8001274 <Modbus_Protocal_Worker>
			Vin = -3.5;
 8003dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8003e90 <button_reset_input+0xf4>)
 8003dd4:	4a2f      	ldr	r2, [pc, #188]	@ (8003e94 <button_reset_input+0xf8>)
 8003dd6:	601a      	str	r2, [r3, #0]
			//software limit
			SoftwareLimit();
 8003dd8:	f7ff fe86 	bl	8003ae8 <SoftwareLimit>
			//Drive Motor which PWM
			DriveMotor();
 8003ddc:	f7ff fe28 	bl	8003a30 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 8003de0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003de4:	482c      	ldr	r0, [pc, #176]	@ (8003e98 <button_reset_input+0xfc>)
 8003de6:	f003 f9d1 	bl	800718c <HAL_GPIO_ReadPin>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0ee      	beq.n	8003dce <button_reset_input+0x32>
		}

		Vin = 2.1;
 8003df0:	4b27      	ldr	r3, [pc, #156]	@ (8003e90 <button_reset_input+0xf4>)
 8003df2:	4a2a      	ldr	r2, [pc, #168]	@ (8003e9c <button_reset_input+0x100>)
 8003df4:	601a      	str	r2, [r3, #0]
		DriveMotor();
 8003df6:	f7ff fe1b 	bl	8003a30 <DriveMotor>
		HAL_Delay(1000);
 8003dfa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003dfe:	f001 f87b 	bl	8004ef8 <HAL_Delay>
		SoftwareLimit();
 8003e02:	f7ff fe71 	bl	8003ae8 <SoftwareLimit>

		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 8003e06:	e008      	b.n	8003e1a <button_reset_input+0x7e>
			Modbus_Protocal_Worker();
 8003e08:	f7fd fa34 	bl	8001274 <Modbus_Protocal_Worker>
			Vin = -1.4;
 8003e0c:	4b20      	ldr	r3, [pc, #128]	@ (8003e90 <button_reset_input+0xf4>)
 8003e0e:	4a24      	ldr	r2, [pc, #144]	@ (8003ea0 <button_reset_input+0x104>)
 8003e10:	601a      	str	r2, [r3, #0]
			//software limit
			SoftwareLimit();
 8003e12:	f7ff fe69 	bl	8003ae8 <SoftwareLimit>
			//Drive Motor which PWM
			DriveMotor();
 8003e16:	f7ff fe0b 	bl	8003a30 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 8003e1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e1e:	481e      	ldr	r0, [pc, #120]	@ (8003e98 <button_reset_input+0xfc>)
 8003e20:	f003 f9b4 	bl	800718c <HAL_GPIO_ReadPin>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0ee      	beq.n	8003e08 <button_reset_input+0x6c>
		}
		Vin = 0;
 8003e2a:	4b19      	ldr	r3, [pc, #100]	@ (8003e90 <button_reset_input+0xf4>)
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
		HAL_Delay(500);
 8003e32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003e36:	f001 f85f 	bl	8004ef8 <HAL_Delay>
		__HAL_TIM_SET_COUNTER(&htim2, 0); //set position to 0
 8003e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea4 <button_reset_input+0x108>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	625a      	str	r2, [r3, #36]	@ 0x24

		if(Home_state_triger == 0 && set_Home_state == 1){
 8003e42:	4b0f      	ldr	r3, [pc, #60]	@ (8003e80 <button_reset_input+0xe4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <button_reset_input+0xc2>
 8003e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e84 <button_reset_input+0xe8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d105      	bne.n	8003e5e <button_reset_input+0xc2>
			Home_state_triger = 1;
 8003e52:	4b0b      	ldr	r3, [pc, #44]	@ (8003e80 <button_reset_input+0xe4>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	601a      	str	r2, [r3, #0]
			B_reset = 0;
 8003e58:	4b0c      	ldr	r3, [pc, #48]	@ (8003e8c <button_reset_input+0xf0>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]
		}

		if(emergency_reset == 1){
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e88 <button_reset_input+0xec>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d107      	bne.n	8003e76 <button_reset_input+0xda>
			emergency_reset = 0;
 8003e66:	4b08      	ldr	r3, [pc, #32]	@ (8003e88 <button_reset_input+0xec>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	701a      	strb	r2, [r3, #0]
		if(emergency_reset == 1){
 8003e6c:	e003      	b.n	8003e76 <button_reset_input+0xda>

		}
	}
	else{
		B_reset = 0;
 8003e6e:	4b07      	ldr	r3, [pc, #28]	@ (8003e8c <button_reset_input+0xf0>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	701a      	strb	r2, [r3, #0]
	}
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	48000c00 	.word	0x48000c00
 8003e80:	200012c8 	.word	0x200012c8
 8003e84:	200012c4 	.word	0x200012c4
 8003e88:	20000bb4 	.word	0x20000bb4
 8003e8c:	20000bb2 	.word	0x20000bb2
 8003e90:	20000b60 	.word	0x20000b60
 8003e94:	c0600000 	.word	0xc0600000
 8003e98:	48000800 	.word	0x48000800
 8003e9c:	40066666 	.word	0x40066666
 8003ea0:	bfb33333 	.word	0xbfb33333
 8003ea4:	200003dc 	.word	0x200003dc

08003ea8 <button_save_position>:

void button_save_position(){
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && B_save == 0 && fabs(QEIdata.linearPos-last_shelf_save) > 20){
 8003eac:	2180      	movs	r1, #128	@ 0x80
 8003eae:	481c      	ldr	r0, [pc, #112]	@ (8003f20 <button_save_position+0x78>)
 8003eb0:	f003 f96c 	bl	800718c <HAL_GPIO_ReadPin>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d12b      	bne.n	8003f12 <button_save_position+0x6a>
 8003eba:	4b1a      	ldr	r3, [pc, #104]	@ (8003f24 <button_save_position+0x7c>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d127      	bne.n	8003f12 <button_save_position+0x6a>
 8003ec2:	4b19      	ldr	r3, [pc, #100]	@ (8003f28 <button_save_position+0x80>)
 8003ec4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003ec8:	4b18      	ldr	r3, [pc, #96]	@ (8003f2c <button_save_position+0x84>)
 8003eca:	edd3 7a00 	vldr	s15, [r3]
 8003ece:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ed2:	eef0 7ae7 	vabs.f32	s15, s15
 8003ed6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee2:	dd16      	ble.n	8003f12 <button_save_position+0x6a>
		B_save = 1;
 8003ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8003f24 <button_save_position+0x7c>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	701a      	strb	r2, [r3, #0]
		count_save += 1;
 8003eea:	4b11      	ldr	r3, [pc, #68]	@ (8003f30 <button_save_position+0x88>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8003f30 <button_save_position+0x88>)
 8003ef4:	701a      	strb	r2, [r3, #0]
		shelves_pos[count_save] = QEIdata.linearPos;
 8003ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8003f30 <button_save_position+0x88>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	4b0a      	ldr	r3, [pc, #40]	@ (8003f28 <button_save_position+0x80>)
 8003efe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f00:	490c      	ldr	r1, [pc, #48]	@ (8003f34 <button_save_position+0x8c>)
 8003f02:	0083      	lsls	r3, r0, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	601a      	str	r2, [r3, #0]
		last_shelf_save =  QEIdata.linearPos;
 8003f08:	4b07      	ldr	r3, [pc, #28]	@ (8003f28 <button_save_position+0x80>)
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0c:	4a07      	ldr	r2, [pc, #28]	@ (8003f2c <button_save_position+0x84>)
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	e003      	b.n	8003f1a <button_save_position+0x72>
	}
	else{
		B_save = 0;
 8003f12:	4b04      	ldr	r3, [pc, #16]	@ (8003f24 <button_save_position+0x7c>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
	}
}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	48000400 	.word	0x48000400
 8003f24:	20000bb3 	.word	0x20000bb3
 8003f28:	20000b00 	.word	0x20000b00
 8003f2c:	20000bd0 	.word	0x20000bd0
 8003f30:	20000bb5 	.word	0x20000bb5
 8003f34:	20000bb8 	.word	0x20000bb8

08003f38 <Heartbeat>:

//-------------------------------------------------//
//-------------------------MODBUS FUNCTIONS--------------------------//
void Heartbeat(){
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16 = 22881;
 8003f3c:	4b04      	ldr	r3, [pc, #16]	@ (8003f50 <Heartbeat+0x18>)
 8003f3e:	f645 1261 	movw	r2, #22881	@ 0x5961
 8003f42:	801a      	strh	r2, [r3, #0]
}
 8003f44:	bf00      	nop
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	20001114 	.word	0x20001114

08003f54 <Routine>:

void Routine(){
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0){
 8003f58:	2110      	movs	r1, #16
 8003f5a:	4835      	ldr	r0, [pc, #212]	@ (8004030 <Routine+0xdc>)
 8003f5c:	f003 f916 	bl	800718c <HAL_GPIO_ReadPin>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d10a      	bne.n	8003f7c <Routine+0x28>
 8003f66:	2120      	movs	r1, #32
 8003f68:	4831      	ldr	r0, [pc, #196]	@ (8004030 <Routine+0xdc>)
 8003f6a:	f003 f90f 	bl	800718c <HAL_GPIO_ReadPin>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d103      	bne.n	8003f7c <Routine+0x28>
			gripper_status = 0;
 8003f74:	4b2f      	ldr	r3, [pc, #188]	@ (8004034 <Routine+0xe0>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	e010      	b.n	8003f9e <Routine+0x4a>
		}
		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1){
 8003f7c:	2110      	movs	r1, #16
 8003f7e:	482c      	ldr	r0, [pc, #176]	@ (8004030 <Routine+0xdc>)
 8003f80:	f003 f904 	bl	800718c <HAL_GPIO_ReadPin>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <Routine+0x4a>
 8003f8a:	2120      	movs	r1, #32
 8003f8c:	4828      	ldr	r0, [pc, #160]	@ (8004030 <Routine+0xdc>)
 8003f8e:	f003 f8fd 	bl	800718c <HAL_GPIO_ReadPin>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d102      	bne.n	8003f9e <Routine+0x4a>
			gripper_status = 1;
 8003f98:	4b26      	ldr	r3, [pc, #152]	@ (8004034 <Routine+0xe0>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
		}
		if (gripper_status == 0 ) // not suck  in
 8003f9e:	4b25      	ldr	r3, [pc, #148]	@ (8004034 <Routine+0xe0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <Routine+0x60>
		{
			registerFrame[0x04].U16 = 0b0000;
 8003fa6:	4b24      	ldr	r3, [pc, #144]	@ (8004038 <Routine+0xe4>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	811a      	strh	r2, [r3, #8]
			registerFrame[0x04].U16 = 0b0001;
 8003fac:	4b22      	ldr	r3, [pc, #136]	@ (8004038 <Routine+0xe4>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	811a      	strh	r2, [r3, #8]
 8003fb2:	e009      	b.n	8003fc8 <Routine+0x74>
		}
		else if (gripper_status == 1) // suck in
 8003fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8004034 <Routine+0xe0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d105      	bne.n	8003fc8 <Routine+0x74>
		{
			registerFrame[0x04].U16 = 0b0000;
 8003fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8004038 <Routine+0xe4>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	811a      	strh	r2, [r3, #8]
			registerFrame[0x04].U16 = 0b0010;
 8003fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8004038 <Routine+0xe4>)
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	811a      	strh	r2, [r3, #8]
		}
		registerFrame[0x10].U16 = Moving_status;
 8003fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800403c <Routine+0xe8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	4b1a      	ldr	r3, [pc, #104]	@ (8004038 <Routine+0xe4>)
 8003fd0:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = QEIdata.linearPos*10;
 8003fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004040 <Routine+0xec>)
 8003fd4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003fd8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003fdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fe4:	ee17 3a90 	vmov	r3, s15
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	4b13      	ldr	r3, [pc, #76]	@ (8004038 <Routine+0xe4>)
 8003fec:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[0x12].U16 = QEIdata.linearVel;
 8003fee:	4b14      	ldr	r3, [pc, #80]	@ (8004040 <Routine+0xec>)
 8003ff0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ff8:	ee17 3a90 	vmov	r3, s15
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8004038 <Routine+0xe4>)
 8004000:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[0x13].U16 = QEIdata.linearAcc;
 8004002:	4b0f      	ldr	r3, [pc, #60]	@ (8004040 <Routine+0xec>)
 8004004:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800400c:	ee17 3a90 	vmov	r3, s15
 8004010:	b29a      	uxth	r2, r3
 8004012:	4b09      	ldr	r3, [pc, #36]	@ (8004038 <Routine+0xe4>)
 8004014:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[0x40].U16 = x_position;
 8004016:	4b0b      	ldr	r3, [pc, #44]	@ (8004044 <Routine+0xf0>)
 8004018:	edd3 7a00 	vldr	s15, [r3]
 800401c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004020:	ee17 3a90 	vmov	r3, s15
 8004024:	b29a      	uxth	r2, r3
 8004026:	4b04      	ldr	r3, [pc, #16]	@ (8004038 <Routine+0xe4>)
 8004028:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
}
 800402c:	bf00      	nop
 800402e:	bd80      	pop	{r7, pc}
 8004030:	48000400 	.word	0x48000400
 8004034:	200012a8 	.word	0x200012a8
 8004038:	20001114 	.word	0x20001114
 800403c:	200012cc 	.word	0x200012cc
 8004040:	20000b00 	.word	0x20000b00
 8004044:	20000b4c 	.word	0x20000b4c

08004048 <check_vaccum_status>:

void check_vaccum_status()
{
 8004048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
	check_state = 1;
 8004050:	493e      	ldr	r1, [pc, #248]	@ (800414c <check_vaccum_status+0x104>)
 8004052:	2001      	movs	r0, #1
 8004054:	6008      	str	r0, [r1, #0]
	if(registerFrame[0x02].U16 == 0b0000){ // not suck  in
 8004056:	493e      	ldr	r1, [pc, #248]	@ (8004150 <check_vaccum_status+0x108>)
 8004058:	8889      	ldrh	r1, [r1, #4]
 800405a:	2900      	cmp	r1, #0
 800405c:	d132      	bne.n	80040c4 <check_vaccum_status+0x7c>

		vaccum_status = 0;
 800405e:	493d      	ldr	r1, [pc, #244]	@ (8004154 <check_vaccum_status+0x10c>)
 8004060:	2000      	movs	r0, #0
 8004062:	6008      	str	r0, [r1, #0]
		if (prev_vac_savestate != vaccum_status)
 8004064:	493b      	ldr	r1, [pc, #236]	@ (8004154 <check_vaccum_status+0x10c>)
 8004066:	6809      	ldr	r1, [r1, #0]
 8004068:	17c8      	asrs	r0, r1, #31
 800406a:	460a      	mov	r2, r1
 800406c:	4603      	mov	r3, r0
 800406e:	493a      	ldr	r1, [pc, #232]	@ (8004158 <check_vaccum_status+0x110>)
 8004070:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004074:	428b      	cmp	r3, r1
 8004076:	bf08      	it	eq
 8004078:	4282      	cmpeq	r2, r0
 800407a:	d01a      	beq.n	80040b2 <check_vaccum_status+0x6a>
			{
				trigger_savestate = 1;
 800407c:	4b37      	ldr	r3, [pc, #220]	@ (800415c <check_vaccum_status+0x114>)
 800407e:	2201      	movs	r2, #1
 8004080:	701a      	strb	r2, [r3, #0]
				S_top_savestate = S_top;
 8004082:	4b37      	ldr	r3, [pc, #220]	@ (8004160 <check_vaccum_status+0x118>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a37      	ldr	r2, [pc, #220]	@ (8004164 <check_vaccum_status+0x11c>)
 8004088:	6013      	str	r3, [r2, #0]
				S_down_savestate = S_down;
 800408a:	4b37      	ldr	r3, [pc, #220]	@ (8004168 <check_vaccum_status+0x120>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a37      	ldr	r2, [pc, #220]	@ (800416c <check_vaccum_status+0x124>)
 8004090:	6013      	str	r3, [r2, #0]
				mode_savestate = mode;
 8004092:	4b37      	ldr	r3, [pc, #220]	@ (8004170 <check_vaccum_status+0x128>)
 8004094:	781a      	ldrb	r2, [r3, #0]
 8004096:	4b37      	ldr	r3, [pc, #220]	@ (8004174 <check_vaccum_status+0x12c>)
 8004098:	701a      	strb	r2, [r3, #0]
				timestamp_savestate = micros() + 500000;
 800409a:	f7fe fd7b 	bl	8002b94 <micros>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4935      	ldr	r1, [pc, #212]	@ (8004178 <check_vaccum_status+0x130>)
 80040a4:	eb12 0a01 	adds.w	sl, r2, r1
 80040a8:	f143 0b00 	adc.w	fp, r3, #0
 80040ac:	4b33      	ldr	r3, [pc, #204]	@ (800417c <check_vaccum_status+0x134>)
 80040ae:	e9c3 ab00 	strd	sl, fp, [r3]
			}
		HAL_Delay(50);
 80040b2:	2032      	movs	r0, #50	@ 0x32
 80040b4:	f000 ff20 	bl	8004ef8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80040b8:	2201      	movs	r2, #1
 80040ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80040be:	4830      	ldr	r0, [pc, #192]	@ (8004180 <check_vaccum_status+0x138>)
 80040c0:	f003 f87c 	bl	80071bc <HAL_GPIO_WritePin>
	}
	if(registerFrame[0x02].U16 == 0b0001){ //suck  in
 80040c4:	4b22      	ldr	r3, [pc, #136]	@ (8004150 <check_vaccum_status+0x108>)
 80040c6:	889b      	ldrh	r3, [r3, #4]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d12f      	bne.n	800412c <check_vaccum_status+0xe4>
		vaccum_status = 1;
 80040cc:	4b21      	ldr	r3, [pc, #132]	@ (8004154 <check_vaccum_status+0x10c>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
		if (prev_vac_savestate != vaccum_status)
 80040d2:	4b20      	ldr	r3, [pc, #128]	@ (8004154 <check_vaccum_status+0x10c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	17da      	asrs	r2, r3, #31
 80040d8:	461c      	mov	r4, r3
 80040da:	4615      	mov	r5, r2
 80040dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004158 <check_vaccum_status+0x110>)
 80040de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e2:	429d      	cmp	r5, r3
 80040e4:	bf08      	it	eq
 80040e6:	4294      	cmpeq	r4, r2
 80040e8:	d01a      	beq.n	8004120 <check_vaccum_status+0xd8>
			{
				trigger_savestate = 1;
 80040ea:	4b1c      	ldr	r3, [pc, #112]	@ (800415c <check_vaccum_status+0x114>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	701a      	strb	r2, [r3, #0]
				S_top_savestate = S_top;
 80040f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004160 <check_vaccum_status+0x118>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004164 <check_vaccum_status+0x11c>)
 80040f6:	6013      	str	r3, [r2, #0]
				S_down_savestate = S_down;
 80040f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004168 <check_vaccum_status+0x120>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1b      	ldr	r2, [pc, #108]	@ (800416c <check_vaccum_status+0x124>)
 80040fe:	6013      	str	r3, [r2, #0]
				mode_savestate = mode;
 8004100:	4b1b      	ldr	r3, [pc, #108]	@ (8004170 <check_vaccum_status+0x128>)
 8004102:	781a      	ldrb	r2, [r3, #0]
 8004104:	4b1b      	ldr	r3, [pc, #108]	@ (8004174 <check_vaccum_status+0x12c>)
 8004106:	701a      	strb	r2, [r3, #0]
				timestamp_savestate = micros() + 500000;
 8004108:	f7fe fd44 	bl	8002b94 <micros>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4919      	ldr	r1, [pc, #100]	@ (8004178 <check_vaccum_status+0x130>)
 8004112:	eb12 0801 	adds.w	r8, r2, r1
 8004116:	f143 0900 	adc.w	r9, r3, #0
 800411a:	4b18      	ldr	r3, [pc, #96]	@ (800417c <check_vaccum_status+0x134>)
 800411c:	e9c3 8900 	strd	r8, r9, [r3]
			}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8004120:	2200      	movs	r2, #0
 8004122:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004126:	4816      	ldr	r0, [pc, #88]	@ (8004180 <check_vaccum_status+0x138>)
 8004128:	f003 f848 	bl	80071bc <HAL_GPIO_WritePin>
	}

	prev_vac_savestate = vaccum_status;
 800412c:	4b09      	ldr	r3, [pc, #36]	@ (8004154 <check_vaccum_status+0x10c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	17da      	asrs	r2, r3, #31
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	607a      	str	r2, [r7, #4]
 8004136:	4b08      	ldr	r3, [pc, #32]	@ (8004158 <check_vaccum_status+0x110>)
 8004138:	e9d7 1200 	ldrd	r1, r2, [r7]
 800413c:	e9c3 1200 	strd	r1, r2, [r3]
}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800414a:	bf00      	nop
 800414c:	200012ac 	.word	0x200012ac
 8004150:	20001114 	.word	0x20001114
 8004154:	200012a4 	.word	0x200012a4
 8004158:	200012d8 	.word	0x200012d8
 800415c:	200012e8 	.word	0x200012e8
 8004160:	20000c28 	.word	0x20000c28
 8004164:	20000c30 	.word	0x20000c30
 8004168:	20000c2c 	.word	0x20000c2c
 800416c:	20000c34 	.word	0x20000c34
 8004170:	20000200 	.word	0x20000200
 8004174:	20000201 	.word	0x20000201
 8004178:	0007a120 	.word	0x0007a120
 800417c:	200012d0 	.word	0x200012d0
 8004180:	48000400 	.word	0x48000400

08004184 <check_gripper_status>:

void check_gripper_status()
{
 8004184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004188:	b082      	sub	sp, #8
 800418a:	af00      	add	r7, sp, #0
	check_state = 2;
 800418c:	4943      	ldr	r1, [pc, #268]	@ (800429c <check_gripper_status+0x118>)
 800418e:	2002      	movs	r0, #2
 8004190:	6008      	str	r0, [r1, #0]

	if(registerFrame[0x03].U16 == 0b0000) //backward ,not on
 8004192:	4943      	ldr	r1, [pc, #268]	@ (80042a0 <check_gripper_status+0x11c>)
 8004194:	88c9      	ldrh	r1, [r1, #6]
 8004196:	2900      	cmp	r1, #0
 8004198:	d136      	bne.n	8004208 <check_gripper_status+0x84>
	//if(test_Gripper == 0)
	{

		gripper_status = 0;
 800419a:	4942      	ldr	r1, [pc, #264]	@ (80042a4 <check_gripper_status+0x120>)
 800419c:	2000      	movs	r0, #0
 800419e:	6008      	str	r0, [r1, #0]

		if (prev_grp_savestate != gripper_status)
 80041a0:	4940      	ldr	r1, [pc, #256]	@ (80042a4 <check_gripper_status+0x120>)
 80041a2:	6809      	ldr	r1, [r1, #0]
 80041a4:	17c8      	asrs	r0, r1, #31
 80041a6:	460a      	mov	r2, r1
 80041a8:	4603      	mov	r3, r0
 80041aa:	493f      	ldr	r1, [pc, #252]	@ (80042a8 <check_gripper_status+0x124>)
 80041ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041b0:	428b      	cmp	r3, r1
 80041b2:	bf08      	it	eq
 80041b4:	4282      	cmpeq	r2, r0
 80041b6:	d01a      	beq.n	80041ee <check_gripper_status+0x6a>
			{
					trigger_savestate = 1;
 80041b8:	4b3c      	ldr	r3, [pc, #240]	@ (80042ac <check_gripper_status+0x128>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	701a      	strb	r2, [r3, #0]
					S_top_savestate = S_top;
 80041be:	4b3c      	ldr	r3, [pc, #240]	@ (80042b0 <check_gripper_status+0x12c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a3c      	ldr	r2, [pc, #240]	@ (80042b4 <check_gripper_status+0x130>)
 80041c4:	6013      	str	r3, [r2, #0]
					S_down_savestate = S_down;
 80041c6:	4b3c      	ldr	r3, [pc, #240]	@ (80042b8 <check_gripper_status+0x134>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a3c      	ldr	r2, [pc, #240]	@ (80042bc <check_gripper_status+0x138>)
 80041cc:	6013      	str	r3, [r2, #0]
					mode_savestate = mode;
 80041ce:	4b3c      	ldr	r3, [pc, #240]	@ (80042c0 <check_gripper_status+0x13c>)
 80041d0:	781a      	ldrb	r2, [r3, #0]
 80041d2:	4b3c      	ldr	r3, [pc, #240]	@ (80042c4 <check_gripper_status+0x140>)
 80041d4:	701a      	strb	r2, [r3, #0]
					timestamp_savestate = micros() + 500000;
 80041d6:	f7fe fcdd 	bl	8002b94 <micros>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	493a      	ldr	r1, [pc, #232]	@ (80042c8 <check_gripper_status+0x144>)
 80041e0:	eb12 0a01 	adds.w	sl, r2, r1
 80041e4:	f143 0b00 	adc.w	fp, r3, #0
 80041e8:	4b38      	ldr	r3, [pc, #224]	@ (80042cc <check_gripper_status+0x148>)
 80041ea:	e9c3 ab00 	strd	sl, fp, [r3]
			}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80041ee:	2200      	movs	r2, #0
 80041f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80041f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041f8:	f002 ffe0 	bl	80071bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 80041fc:	2201      	movs	r2, #1
 80041fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004202:	4833      	ldr	r0, [pc, #204]	@ (80042d0 <check_gripper_status+0x14c>)
 8004204:	f002 ffda 	bl	80071bc <HAL_GPIO_WritePin>
	}
	if(registerFrame[0x03].U16 == 0b0001) //Forward
 8004208:	4b25      	ldr	r3, [pc, #148]	@ (80042a0 <check_gripper_status+0x11c>)
 800420a:	88db      	ldrh	r3, [r3, #6]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d136      	bne.n	800427e <check_gripper_status+0xfa>
	//if(test_Gripper == 1)
	{
		gripper_status = 1;
 8004210:	4b24      	ldr	r3, [pc, #144]	@ (80042a4 <check_gripper_status+0x120>)
 8004212:	2201      	movs	r2, #1
 8004214:	601a      	str	r2, [r3, #0]

		if (prev_grp_savestate != gripper_status)
 8004216:	4b23      	ldr	r3, [pc, #140]	@ (80042a4 <check_gripper_status+0x120>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	17da      	asrs	r2, r3, #31
 800421c:	461c      	mov	r4, r3
 800421e:	4615      	mov	r5, r2
 8004220:	4b21      	ldr	r3, [pc, #132]	@ (80042a8 <check_gripper_status+0x124>)
 8004222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004226:	429d      	cmp	r5, r3
 8004228:	bf08      	it	eq
 800422a:	4294      	cmpeq	r4, r2
 800422c:	d01a      	beq.n	8004264 <check_gripper_status+0xe0>
			{
					trigger_savestate = 1;
 800422e:	4b1f      	ldr	r3, [pc, #124]	@ (80042ac <check_gripper_status+0x128>)
 8004230:	2201      	movs	r2, #1
 8004232:	701a      	strb	r2, [r3, #0]
					S_top_savestate = S_top;
 8004234:	4b1e      	ldr	r3, [pc, #120]	@ (80042b0 <check_gripper_status+0x12c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a1e      	ldr	r2, [pc, #120]	@ (80042b4 <check_gripper_status+0x130>)
 800423a:	6013      	str	r3, [r2, #0]
					S_down_savestate = S_down;
 800423c:	4b1e      	ldr	r3, [pc, #120]	@ (80042b8 <check_gripper_status+0x134>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a1e      	ldr	r2, [pc, #120]	@ (80042bc <check_gripper_status+0x138>)
 8004242:	6013      	str	r3, [r2, #0]
					mode_savestate = mode;
 8004244:	4b1e      	ldr	r3, [pc, #120]	@ (80042c0 <check_gripper_status+0x13c>)
 8004246:	781a      	ldrb	r2, [r3, #0]
 8004248:	4b1e      	ldr	r3, [pc, #120]	@ (80042c4 <check_gripper_status+0x140>)
 800424a:	701a      	strb	r2, [r3, #0]
					timestamp_savestate = micros() + 500000;
 800424c:	f7fe fca2 	bl	8002b94 <micros>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	491c      	ldr	r1, [pc, #112]	@ (80042c8 <check_gripper_status+0x144>)
 8004256:	eb12 0801 	adds.w	r8, r2, r1
 800425a:	f143 0900 	adc.w	r9, r3, #0
 800425e:	4b1b      	ldr	r3, [pc, #108]	@ (80042cc <check_gripper_status+0x148>)
 8004260:	e9c3 8900 	strd	r8, r9, [r3]
			}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8004264:	2201      	movs	r2, #1
 8004266:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800426a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800426e:	f002 ffa5 	bl	80071bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 8004272:	2200      	movs	r2, #0
 8004274:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004278:	4815      	ldr	r0, [pc, #84]	@ (80042d0 <check_gripper_status+0x14c>)
 800427a:	f002 ff9f 	bl	80071bc <HAL_GPIO_WritePin>
	}

	prev_grp_savestate = gripper_status;
 800427e:	4b09      	ldr	r3, [pc, #36]	@ (80042a4 <check_gripper_status+0x120>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	17da      	asrs	r2, r3, #31
 8004284:	603b      	str	r3, [r7, #0]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	4b07      	ldr	r3, [pc, #28]	@ (80042a8 <check_gripper_status+0x124>)
 800428a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800428e:	e9c3 1200 	strd	r1, r2, [r3]
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800429c:	200012ac 	.word	0x200012ac
 80042a0:	20001114 	.word	0x20001114
 80042a4:	200012a8 	.word	0x200012a8
 80042a8:	200012e0 	.word	0x200012e0
 80042ac:	200012e8 	.word	0x200012e8
 80042b0:	20000c28 	.word	0x20000c28
 80042b4:	20000c30 	.word	0x20000c30
 80042b8:	20000c2c 	.word	0x20000c2c
 80042bc:	20000c34 	.word	0x20000c34
 80042c0:	20000200 	.word	0x20000200
 80042c4:	20000201 	.word	0x20000201
 80042c8:	0007a120 	.word	0x0007a120
 80042cc:	200012d0 	.word	0x200012d0
 80042d0:	48000800 	.word	0x48000800

080042d4 <set_shelf>:

void set_shelf()
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
	check_state = 3;
 80042d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004408 <set_shelf+0x134>)
 80042da:	2203      	movs	r2, #3
 80042dc:	601a      	str	r2, [r3, #0]
	if(registerFrame[0x01].U16 ==  0b0001)
 80042de:	4b4b      	ldr	r3, [pc, #300]	@ (800440c <set_shelf+0x138>)
 80042e0:	885b      	ldrh	r3, [r3, #2]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d104      	bne.n	80042f0 <set_shelf+0x1c>
	{
		set_shelf_state = 1;
 80042e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004410 <set_shelf+0x13c>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	601a      	str	r2, [r3, #0]
		LED_Manual();
 80042ec:	f000 f9fa 	bl	80046e4 <LED_Manual>
	}
	if (set_shelf_state == 1 && Enter_click == 0)
 80042f0:	4b47      	ldr	r3, [pc, #284]	@ (8004410 <set_shelf+0x13c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d11e      	bne.n	8004336 <set_shelf+0x62>
 80042f8:	4b46      	ldr	r3, [pc, #280]	@ (8004414 <set_shelf+0x140>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d11a      	bne.n	8004336 <set_shelf+0x62>
	{
			registerFrame[0x01].U16 = 0b0000;
 8004300:	4b42      	ldr	r3, [pc, #264]	@ (800440c <set_shelf+0x138>)
 8004302:	2200      	movs	r2, #0
 8004304:	805a      	strh	r2, [r3, #2]
			Moving_status = 1;
 8004306:	4b44      	ldr	r3, [pc, #272]	@ (8004418 <set_shelf+0x144>)
 8004308:	2201      	movs	r2, #1
 800430a:	601a      	str	r2, [r3, #0]
			registerFrame[0x10].U16 = Moving_status; // set shelve
 800430c:	4b42      	ldr	r3, [pc, #264]	@ (8004418 <set_shelf+0x144>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	b29a      	uxth	r2, r3
 8004312:	4b3e      	ldr	r3, [pc, #248]	@ (800440c <set_shelf+0x138>)
 8004314:	841a      	strh	r2, [r3, #32]
			mode = 2; //manual
 8004316:	4b41      	ldr	r3, [pc, #260]	@ (800441c <set_shelf+0x148>)
 8004318:	2202      	movs	r2, #2
 800431a:	701a      	strb	r2, [r3, #0]
			if(count_save == 5){
 800431c:	4b40      	ldr	r3, [pc, #256]	@ (8004420 <set_shelf+0x14c>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b05      	cmp	r3, #5
 8004322:	d108      	bne.n	8004336 <set_shelf+0x62>
				Enter_click = 1;
 8004324:	4b3b      	ldr	r3, [pc, #236]	@ (8004414 <set_shelf+0x140>)
 8004326:	2201      	movs	r2, #1
 8004328:	601a      	str	r2, [r3, #0]
				count_save = 0;
 800432a:	4b3d      	ldr	r3, [pc, #244]	@ (8004420 <set_shelf+0x14c>)
 800432c:	2200      	movs	r2, #0
 800432e:	701a      	strb	r2, [r3, #0]
				mode = 3;
 8004330:	4b3a      	ldr	r3, [pc, #232]	@ (800441c <set_shelf+0x148>)
 8004332:	2203      	movs	r2, #3
 8004334:	701a      	strb	r2, [r3, #0]
			}
	}
	if (set_shelf_state == 1 && Enter_click == 1)
 8004336:	4b36      	ldr	r3, [pc, #216]	@ (8004410 <set_shelf+0x13c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d161      	bne.n	8004402 <set_shelf+0x12e>
 800433e:	4b35      	ldr	r3, [pc, #212]	@ (8004414 <set_shelf+0x140>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d15d      	bne.n	8004402 <set_shelf+0x12e>
	{
		registerFrame[0x01].U16 = 0b0000;
 8004346:	4b31      	ldr	r3, [pc, #196]	@ (800440c <set_shelf+0x138>)
 8004348:	2200      	movs	r2, #0
 800434a:	805a      	strh	r2, [r3, #2]
		registerFrame[0x23].U16 = shelves_pos[1]*10;
 800434c:	4b35      	ldr	r3, [pc, #212]	@ (8004424 <set_shelf+0x150>)
 800434e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004352:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800435a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800435e:	ee17 3a90 	vmov	r3, s15
 8004362:	b29a      	uxth	r2, r3
 8004364:	4b29      	ldr	r3, [pc, #164]	@ (800440c <set_shelf+0x138>)
 8004366:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		registerFrame[0x24].U16 = shelves_pos[2]*10;
 800436a:	4b2e      	ldr	r3, [pc, #184]	@ (8004424 <set_shelf+0x150>)
 800436c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004370:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800437c:	ee17 3a90 	vmov	r3, s15
 8004380:	b29a      	uxth	r2, r3
 8004382:	4b22      	ldr	r3, [pc, #136]	@ (800440c <set_shelf+0x138>)
 8004384:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		registerFrame[0x25].U16 = shelves_pos[3]*10;
 8004388:	4b26      	ldr	r3, [pc, #152]	@ (8004424 <set_shelf+0x150>)
 800438a:	edd3 7a03 	vldr	s15, [r3, #12]
 800438e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800439a:	ee17 3a90 	vmov	r3, s15
 800439e:	b29a      	uxth	r2, r3
 80043a0:	4b1a      	ldr	r3, [pc, #104]	@ (800440c <set_shelf+0x138>)
 80043a2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		registerFrame[0x26].U16 = shelves_pos[4]*10;
 80043a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004424 <set_shelf+0x150>)
 80043a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80043ac:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80043b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043b8:	ee17 3a90 	vmov	r3, s15
 80043bc:	b29a      	uxth	r2, r3
 80043be:	4b13      	ldr	r3, [pc, #76]	@ (800440c <set_shelf+0x138>)
 80043c0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		registerFrame[0x27].U16 = shelves_pos[5]*10;
 80043c4:	4b17      	ldr	r3, [pc, #92]	@ (8004424 <set_shelf+0x150>)
 80043c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80043ca:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80043ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043d6:	ee17 3a90 	vmov	r3, s15
 80043da:	b29a      	uxth	r2, r3
 80043dc:	4b0b      	ldr	r3, [pc, #44]	@ (800440c <set_shelf+0x138>)
 80043de:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
		Moving_status = 0;
 80043e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004418 <set_shelf+0x144>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
		registerFrame[0x10].U16 = Moving_status;
 80043e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004418 <set_shelf+0x144>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	4b07      	ldr	r3, [pc, #28]	@ (800440c <set_shelf+0x138>)
 80043f0:	841a      	strh	r2, [r3, #32]
		set_shelf_state = 0;
 80043f2:	4b07      	ldr	r3, [pc, #28]	@ (8004410 <set_shelf+0x13c>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
		Enter_click = 0;
 80043f8:	4b06      	ldr	r3, [pc, #24]	@ (8004414 <set_shelf+0x140>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
		LED_Ready();
 80043fe:	f000 f925 	bl	800464c <LED_Ready>
	}

}
 8004402:	bf00      	nop
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	200012ac 	.word	0x200012ac
 800440c:	20001114 	.word	0x20001114
 8004410:	200012b4 	.word	0x200012b4
 8004414:	200012b0 	.word	0x200012b0
 8004418:	200012cc 	.word	0x200012cc
 800441c:	20000200 	.word	0x20000200
 8004420:	20000bb5 	.word	0x20000bb5
 8004424:	20000bb8 	.word	0x20000bb8

08004428 <Pointmode>:

void Pointmode()
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 ==  0b1000) // Run Point Mode
 800442c:	4b34      	ldr	r3, [pc, #208]	@ (8004500 <Pointmode+0xd8>)
 800442e:	885b      	ldrh	r3, [r3, #2]
 8004430:	2b08      	cmp	r3, #8
 8004432:	d116      	bne.n	8004462 <Pointmode+0x3a>
		{
			 set_point_state = 1;
 8004434:	4b33      	ldr	r3, [pc, #204]	@ (8004504 <Pointmode+0xdc>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]
			 set_point_modbus = (registerFrame[0x30].U16) / 10;
 800443a:	4b31      	ldr	r3, [pc, #196]	@ (8004500 <Pointmode+0xd8>)
 800443c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004440:	4a31      	ldr	r2, [pc, #196]	@ (8004508 <Pointmode+0xe0>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	08db      	lsrs	r3, r3, #3
 8004448:	b29b      	uxth	r3, r3
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004452:	4b2e      	ldr	r3, [pc, #184]	@ (800450c <Pointmode+0xe4>)
 8004454:	edc3 7a00 	vstr	s15, [r3]
			 registerFrame[0x01].U16 = 0b0000;
 8004458:	4b29      	ldr	r3, [pc, #164]	@ (8004500 <Pointmode+0xd8>)
 800445a:	2200      	movs	r2, #0
 800445c:	805a      	strh	r2, [r3, #2]
			 LED_Auto();
 800445e:	f000 f91b 	bl	8004698 <LED_Auto>
//			 Modbus_Protocal_Worker();
		}

	if (point_state_triger == 0 && set_point_state == 1)
 8004462:	4b2b      	ldr	r3, [pc, #172]	@ (8004510 <Pointmode+0xe8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d12b      	bne.n	80044c2 <Pointmode+0x9a>
 800446a:	4b26      	ldr	r3, [pc, #152]	@ (8004504 <Pointmode+0xdc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d127      	bne.n	80044c2 <Pointmode+0x9a>
		{
				Moving_status = 16;
 8004472:	4b28      	ldr	r3, [pc, #160]	@ (8004514 <Pointmode+0xec>)
 8004474:	2210      	movs	r2, #16
 8004476:	601a      	str	r2, [r3, #0]
				registerFrame[0x10].U16 = Moving_status;
 8004478:	4b26      	ldr	r3, [pc, #152]	@ (8004514 <Pointmode+0xec>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	b29a      	uxth	r2, r3
 800447e:	4b20      	ldr	r3, [pc, #128]	@ (8004500 <Pointmode+0xd8>)
 8004480:	841a      	strh	r2, [r3, #32]
				mode = 1;
 8004482:	4b25      	ldr	r3, [pc, #148]	@ (8004518 <Pointmode+0xf0>)
 8004484:	2201      	movs	r2, #1
 8004486:	701a      	strb	r2, [r3, #0]
				setPosition = set_point_modbus;
 8004488:	4b20      	ldr	r3, [pc, #128]	@ (800450c <Pointmode+0xe4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a23      	ldr	r2, [pc, #140]	@ (800451c <Pointmode+0xf4>)
 800448e:	6013      	str	r3, [r2, #0]
				if(fabs(setPosition-QEIdata.linearPos) <= 5){
 8004490:	4b22      	ldr	r3, [pc, #136]	@ (800451c <Pointmode+0xf4>)
 8004492:	ed93 7a00 	vldr	s14, [r3]
 8004496:	4b22      	ldr	r3, [pc, #136]	@ (8004520 <Pointmode+0xf8>)
 8004498:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800449c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044a0:	eef0 7ae7 	vabs.f32	s15, s15
 80044a4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80044a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b0:	d805      	bhi.n	80044be <Pointmode+0x96>
					mode = 3;
 80044b2:	4b19      	ldr	r3, [pc, #100]	@ (8004518 <Pointmode+0xf0>)
 80044b4:	2203      	movs	r2, #3
 80044b6:	701a      	strb	r2, [r3, #0]
					point_state_triger = 1;
 80044b8:	4b15      	ldr	r3, [pc, #84]	@ (8004510 <Pointmode+0xe8>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]
				}
				Modbus_Protocal_Worker();
 80044be:	f7fc fed9 	bl	8001274 <Modbus_Protocal_Worker>
		}
	if (point_state_triger == 1 && set_point_state == 1)
 80044c2:	4b13      	ldr	r3, [pc, #76]	@ (8004510 <Pointmode+0xe8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d118      	bne.n	80044fc <Pointmode+0xd4>
 80044ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004504 <Pointmode+0xdc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d114      	bne.n	80044fc <Pointmode+0xd4>
		{
			mode = 3;
 80044d2:	4b11      	ldr	r3, [pc, #68]	@ (8004518 <Pointmode+0xf0>)
 80044d4:	2203      	movs	r2, #3
 80044d6:	701a      	strb	r2, [r3, #0]
			Moving_status = 0;
 80044d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004514 <Pointmode+0xec>)
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]
			registerFrame[0x10].U16 = Moving_status;
 80044de:	4b0d      	ldr	r3, [pc, #52]	@ (8004514 <Pointmode+0xec>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	4b06      	ldr	r3, [pc, #24]	@ (8004500 <Pointmode+0xd8>)
 80044e6:	841a      	strh	r2, [r3, #32]
			set_point_state = 0;
 80044e8:	4b06      	ldr	r3, [pc, #24]	@ (8004504 <Pointmode+0xdc>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
			point_state_triger = 0;
 80044ee:	4b08      	ldr	r3, [pc, #32]	@ (8004510 <Pointmode+0xe8>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
			Modbus_Protocal_Worker();
 80044f4:	f7fc febe 	bl	8001274 <Modbus_Protocal_Worker>
			LED_Ready();
 80044f8:	f000 f8a8 	bl	800464c <LED_Ready>
//
		}
}
 80044fc:	bf00      	nop
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20001114 	.word	0x20001114
 8004504:	200012c0 	.word	0x200012c0
 8004508:	cccccccd 	.word	0xcccccccd
 800450c:	200012b8 	.word	0x200012b8
 8004510:	200012bc 	.word	0x200012bc
 8004514:	200012cc 	.word	0x200012cc
 8004518:	20000200 	.word	0x20000200
 800451c:	20000c1c 	.word	0x20000c1c
 8004520:	20000b00 	.word	0x20000b00

08004524 <Home>:
void Home()
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 ==  0b0010) // Run Home Mode
 8004528:	4b1d      	ldr	r3, [pc, #116]	@ (80045a0 <Home+0x7c>)
 800452a:	885b      	ldrh	r3, [r3, #2]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d107      	bne.n	8004540 <Home+0x1c>
	{
		set_Home_state = 1;
 8004530:	4b1c      	ldr	r3, [pc, #112]	@ (80045a4 <Home+0x80>)
 8004532:	2201      	movs	r2, #1
 8004534:	601a      	str	r2, [r3, #0]
		registerFrame[0x01].U16 = 0b0000;
 8004536:	4b1a      	ldr	r3, [pc, #104]	@ (80045a0 <Home+0x7c>)
 8004538:	2200      	movs	r2, #0
 800453a:	805a      	strh	r2, [r3, #2]
		LED_Homing();
 800453c:	f000 f860 	bl	8004600 <LED_Homing>
//		Modbus_Protocal_Worker();
	}
	if(Home_state_triger == 0 && set_Home_state == 1)
 8004540:	4b19      	ldr	r3, [pc, #100]	@ (80045a8 <Home+0x84>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10e      	bne.n	8004566 <Home+0x42>
 8004548:	4b16      	ldr	r3, [pc, #88]	@ (80045a4 <Home+0x80>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d10a      	bne.n	8004566 <Home+0x42>
	{
		Moving_status = 2;
 8004550:	4b16      	ldr	r3, [pc, #88]	@ (80045ac <Home+0x88>)
 8004552:	2202      	movs	r2, #2
 8004554:	601a      	str	r2, [r3, #0]
		registerFrame[0x10].U16 = Moving_status;
 8004556:	4b15      	ldr	r3, [pc, #84]	@ (80045ac <Home+0x88>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	b29a      	uxth	r2, r3
 800455c:	4b10      	ldr	r3, [pc, #64]	@ (80045a0 <Home+0x7c>)
 800455e:	841a      	strh	r2, [r3, #32]
		//set home
		mode = 2;
 8004560:	4b13      	ldr	r3, [pc, #76]	@ (80045b0 <Home+0x8c>)
 8004562:	2202      	movs	r2, #2
 8004564:	701a      	strb	r2, [r3, #0]
//		Modbus_Protocal_Worker();
	}
	if(Home_state_triger == 1 && set_Home_state == 1)
 8004566:	4b10      	ldr	r3, [pc, #64]	@ (80045a8 <Home+0x84>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d116      	bne.n	800459c <Home+0x78>
 800456e:	4b0d      	ldr	r3, [pc, #52]	@ (80045a4 <Home+0x80>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d112      	bne.n	800459c <Home+0x78>
	{
		mode = 3;
 8004576:	4b0e      	ldr	r3, [pc, #56]	@ (80045b0 <Home+0x8c>)
 8004578:	2203      	movs	r2, #3
 800457a:	701a      	strb	r2, [r3, #0]
		Moving_status = 0;
 800457c:	4b0b      	ldr	r3, [pc, #44]	@ (80045ac <Home+0x88>)
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
		registerFrame[0x10].U16 = Moving_status;
 8004582:	4b0a      	ldr	r3, [pc, #40]	@ (80045ac <Home+0x88>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	b29a      	uxth	r2, r3
 8004588:	4b05      	ldr	r3, [pc, #20]	@ (80045a0 <Home+0x7c>)
 800458a:	841a      	strh	r2, [r3, #32]
		set_Home_state = 0;
 800458c:	4b05      	ldr	r3, [pc, #20]	@ (80045a4 <Home+0x80>)
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
		Home_state_triger = 0;
 8004592:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <Home+0x84>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
//		Modbus_Protocal_Worker();
		LED_Ready();
 8004598:	f000 f858 	bl	800464c <LED_Ready>
	}
}
 800459c:	bf00      	nop
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20001114 	.word	0x20001114
 80045a4:	200012c4 	.word	0x200012c4
 80045a8:	200012c8 	.word	0x200012c8
 80045ac:	200012cc 	.word	0x200012cc
 80045b0:	20000200 	.word	0x20000200

080045b4 <LED_Emergency>:
}
//-----------------------------------------------------------//

//-----------------------LED STATUS--------------------------//

void LED_Emergency(){
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80045b8:	2200      	movs	r2, #0
 80045ba:	2140      	movs	r1, #64	@ 0x40
 80045bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045c0:	f002 fdfc 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80045c4:	2201      	movs	r2, #1
 80045c6:	2180      	movs	r1, #128	@ 0x80
 80045c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045cc:	f002 fdf6 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 80045d0:	2201      	movs	r2, #1
 80045d2:	2140      	movs	r1, #64	@ 0x40
 80045d4:	4808      	ldr	r0, [pc, #32]	@ (80045f8 <LED_Emergency+0x44>)
 80045d6:	f002 fdf1 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 80045da:	2201      	movs	r2, #1
 80045dc:	2180      	movs	r1, #128	@ 0x80
 80045de:	4807      	ldr	r0, [pc, #28]	@ (80045fc <LED_Emergency+0x48>)
 80045e0:	f002 fdec 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 80045e4:	2201      	movs	r2, #1
 80045e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045ee:	f002 fde5 	bl	80071bc <HAL_GPIO_WritePin>
}
 80045f2:	bf00      	nop
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	48000400 	.word	0x48000400
 80045fc:	48000800 	.word	0x48000800

08004600 <LED_Homing>:

void LED_Homing(){
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8004604:	2201      	movs	r2, #1
 8004606:	2140      	movs	r1, #64	@ 0x40
 8004608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800460c:	f002 fdd6 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8004610:	2200      	movs	r2, #0
 8004612:	2180      	movs	r1, #128	@ 0x80
 8004614:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004618:	f002 fdd0 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 800461c:	2201      	movs	r2, #1
 800461e:	2140      	movs	r1, #64	@ 0x40
 8004620:	4808      	ldr	r0, [pc, #32]	@ (8004644 <LED_Homing+0x44>)
 8004622:	f002 fdcb 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8004626:	2201      	movs	r2, #1
 8004628:	2180      	movs	r1, #128	@ 0x80
 800462a:	4807      	ldr	r0, [pc, #28]	@ (8004648 <LED_Homing+0x48>)
 800462c:	f002 fdc6 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8004630:	2201      	movs	r2, #1
 8004632:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004636:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800463a:	f002 fdbf 	bl	80071bc <HAL_GPIO_WritePin>
}
 800463e:	bf00      	nop
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	48000400 	.word	0x48000400
 8004648:	48000800 	.word	0x48000800

0800464c <LED_Ready>:

void LED_Ready(){
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8004650:	2201      	movs	r2, #1
 8004652:	2140      	movs	r1, #64	@ 0x40
 8004654:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004658:	f002 fdb0 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 800465c:	2201      	movs	r2, #1
 800465e:	2180      	movs	r1, #128	@ 0x80
 8004660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004664:	f002 fdaa 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8004668:	2200      	movs	r2, #0
 800466a:	2140      	movs	r1, #64	@ 0x40
 800466c:	4808      	ldr	r0, [pc, #32]	@ (8004690 <LED_Ready+0x44>)
 800466e:	f002 fda5 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8004672:	2201      	movs	r2, #1
 8004674:	2180      	movs	r1, #128	@ 0x80
 8004676:	4807      	ldr	r0, [pc, #28]	@ (8004694 <LED_Ready+0x48>)
 8004678:	f002 fda0 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 800467c:	2201      	movs	r2, #1
 800467e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004682:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004686:	f002 fd99 	bl	80071bc <HAL_GPIO_WritePin>
}
 800468a:	bf00      	nop
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	48000400 	.word	0x48000400
 8004694:	48000800 	.word	0x48000800

08004698 <LED_Auto>:

void LED_Auto(){
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 800469c:	2201      	movs	r2, #1
 800469e:	2140      	movs	r1, #64	@ 0x40
 80046a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80046a4:	f002 fd8a 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80046a8:	2201      	movs	r2, #1
 80046aa:	2180      	movs	r1, #128	@ 0x80
 80046ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80046b0:	f002 fd84 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 80046b4:	2201      	movs	r2, #1
 80046b6:	2140      	movs	r1, #64	@ 0x40
 80046b8:	4808      	ldr	r0, [pc, #32]	@ (80046dc <LED_Auto+0x44>)
 80046ba:	f002 fd7f 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80046be:	2200      	movs	r2, #0
 80046c0:	2180      	movs	r1, #128	@ 0x80
 80046c2:	4807      	ldr	r0, [pc, #28]	@ (80046e0 <LED_Auto+0x48>)
 80046c4:	f002 fd7a 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 80046c8:	2201      	movs	r2, #1
 80046ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80046ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80046d2:	f002 fd73 	bl	80071bc <HAL_GPIO_WritePin>
}
 80046d6:	bf00      	nop
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	48000400 	.word	0x48000400
 80046e0:	48000800 	.word	0x48000800

080046e4 <LED_Manual>:

void LED_Manual(){
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80046e8:	2201      	movs	r2, #1
 80046ea:	2140      	movs	r1, #64	@ 0x40
 80046ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80046f0:	f002 fd64 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80046f4:	2201      	movs	r2, #1
 80046f6:	2180      	movs	r1, #128	@ 0x80
 80046f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80046fc:	f002 fd5e 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8004700:	2201      	movs	r2, #1
 8004702:	2140      	movs	r1, #64	@ 0x40
 8004704:	4808      	ldr	r0, [pc, #32]	@ (8004728 <LED_Manual+0x44>)
 8004706:	f002 fd59 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 800470a:	2201      	movs	r2, #1
 800470c:	2180      	movs	r1, #128	@ 0x80
 800470e:	4807      	ldr	r0, [pc, #28]	@ (800472c <LED_Manual+0x48>)
 8004710:	f002 fd54 	bl	80071bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8004714:	2200      	movs	r2, #0
 8004716:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800471a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800471e:	f002 fd4d 	bl	80071bc <HAL_GPIO_WritePin>
}
 8004722:	bf00      	nop
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	48000400 	.word	0x48000400
 800472c:	48000800 	.word	0x48000800

08004730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004734:	b672      	cpsid	i
}
 8004736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004738:	bf00      	nop
 800473a:	e7fd      	b.n	8004738 <Error_Handler+0x8>

0800473c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004742:	4b0f      	ldr	r3, [pc, #60]	@ (8004780 <HAL_MspInit+0x44>)
 8004744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004746:	4a0e      	ldr	r2, [pc, #56]	@ (8004780 <HAL_MspInit+0x44>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	6613      	str	r3, [r2, #96]	@ 0x60
 800474e:	4b0c      	ldr	r3, [pc, #48]	@ (8004780 <HAL_MspInit+0x44>)
 8004750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	607b      	str	r3, [r7, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800475a:	4b09      	ldr	r3, [pc, #36]	@ (8004780 <HAL_MspInit+0x44>)
 800475c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800475e:	4a08      	ldr	r2, [pc, #32]	@ (8004780 <HAL_MspInit+0x44>)
 8004760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004764:	6593      	str	r3, [r2, #88]	@ 0x58
 8004766:	4b06      	ldr	r3, [pc, #24]	@ (8004780 <HAL_MspInit+0x44>)
 8004768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004772:	f002 fdf7 	bl	8007364 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40021000 	.word	0x40021000

08004784 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b0a0      	sub	sp, #128	@ 0x80
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800478c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	609a      	str	r2, [r3, #8]
 8004798:	60da      	str	r2, [r3, #12]
 800479a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800479c:	f107 0318 	add.w	r3, r7, #24
 80047a0:	2254      	movs	r2, #84	@ 0x54
 80047a2:	2100      	movs	r1, #0
 80047a4:	4618      	mov	r0, r3
 80047a6:	f008 f9b1 	bl	800cb0c <memset>
  if(hadc->Instance==ADC1)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047b2:	d178      	bne.n	80048a6 <HAL_ADC_MspInit+0x122>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80047b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80047ba:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80047be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047c0:	f107 0318 	add.w	r3, r7, #24
 80047c4:	4618      	mov	r0, r3
 80047c6:	f003 fb0b 	bl	8007de0 <HAL_RCCEx_PeriphCLKConfig>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80047d0:	f7ff ffae 	bl	8004730 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80047d4:	4b36      	ldr	r3, [pc, #216]	@ (80048b0 <HAL_ADC_MspInit+0x12c>)
 80047d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047d8:	4a35      	ldr	r2, [pc, #212]	@ (80048b0 <HAL_ADC_MspInit+0x12c>)
 80047da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80047de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047e0:	4b33      	ldr	r3, [pc, #204]	@ (80048b0 <HAL_ADC_MspInit+0x12c>)
 80047e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ec:	4b30      	ldr	r3, [pc, #192]	@ (80048b0 <HAL_ADC_MspInit+0x12c>)
 80047ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047f0:	4a2f      	ldr	r2, [pc, #188]	@ (80048b0 <HAL_ADC_MspInit+0x12c>)
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047f8:	4b2d      	ldr	r3, [pc, #180]	@ (80048b0 <HAL_ADC_MspInit+0x12c>)
 80047fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004804:	4b2a      	ldr	r3, [pc, #168]	@ (80048b0 <HAL_ADC_MspInit+0x12c>)
 8004806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004808:	4a29      	ldr	r2, [pc, #164]	@ (80048b0 <HAL_ADC_MspInit+0x12c>)
 800480a:	f043 0302 	orr.w	r3, r3, #2
 800480e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004810:	4b27      	ldr	r3, [pc, #156]	@ (80048b0 <HAL_ADC_MspInit+0x12c>)
 8004812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800481c:	2301      	movs	r3, #1
 800481e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004820:	2303      	movs	r3, #3
 8004822:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004824:	2300      	movs	r3, #0
 8004826:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004828:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800482c:	4619      	mov	r1, r3
 800482e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004832:	f002 fb29 	bl	8006e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004836:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800483a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800483c:	2303      	movs	r3, #3
 800483e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004840:	2300      	movs	r3, #0
 8004842:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004844:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004848:	4619      	mov	r1, r3
 800484a:	481a      	ldr	r0, [pc, #104]	@ (80048b4 <HAL_ADC_MspInit+0x130>)
 800484c:	f002 fb1c 	bl	8006e88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 8004850:	4b19      	ldr	r3, [pc, #100]	@ (80048b8 <HAL_ADC_MspInit+0x134>)
 8004852:	4a1a      	ldr	r2, [pc, #104]	@ (80048bc <HAL_ADC_MspInit+0x138>)
 8004854:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004856:	4b18      	ldr	r3, [pc, #96]	@ (80048b8 <HAL_ADC_MspInit+0x134>)
 8004858:	2205      	movs	r2, #5
 800485a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800485c:	4b16      	ldr	r3, [pc, #88]	@ (80048b8 <HAL_ADC_MspInit+0x134>)
 800485e:	2200      	movs	r2, #0
 8004860:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004862:	4b15      	ldr	r3, [pc, #84]	@ (80048b8 <HAL_ADC_MspInit+0x134>)
 8004864:	2200      	movs	r2, #0
 8004866:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004868:	4b13      	ldr	r3, [pc, #76]	@ (80048b8 <HAL_ADC_MspInit+0x134>)
 800486a:	2280      	movs	r2, #128	@ 0x80
 800486c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800486e:	4b12      	ldr	r3, [pc, #72]	@ (80048b8 <HAL_ADC_MspInit+0x134>)
 8004870:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004874:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004876:	4b10      	ldr	r3, [pc, #64]	@ (80048b8 <HAL_ADC_MspInit+0x134>)
 8004878:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800487c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800487e:	4b0e      	ldr	r3, [pc, #56]	@ (80048b8 <HAL_ADC_MspInit+0x134>)
 8004880:	2220      	movs	r2, #32
 8004882:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004884:	4b0c      	ldr	r3, [pc, #48]	@ (80048b8 <HAL_ADC_MspInit+0x134>)
 8004886:	2200      	movs	r2, #0
 8004888:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800488a:	480b      	ldr	r0, [pc, #44]	@ (80048b8 <HAL_ADC_MspInit+0x134>)
 800488c:	f001 ffca 	bl	8006824 <HAL_DMA_Init>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 8004896:	f7ff ff4b 	bl	8004730 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a06      	ldr	r2, [pc, #24]	@ (80048b8 <HAL_ADC_MspInit+0x134>)
 800489e:	655a      	str	r2, [r3, #84]	@ 0x54
 80048a0:	4a05      	ldr	r2, [pc, #20]	@ (80048b8 <HAL_ADC_MspInit+0x134>)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80048a6:	bf00      	nop
 80048a8:	3780      	adds	r7, #128	@ 0x80
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40021000 	.word	0x40021000
 80048b4:	48000400 	.word	0x48000400
 80048b8:	2000037c 	.word	0x2000037c
 80048bc:	40020408 	.word	0x40020408

080048c0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	@ 0x28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c8:	f107 0314 	add.w	r3, r7, #20
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	605a      	str	r2, [r3, #4]
 80048d2:	609a      	str	r2, [r3, #8]
 80048d4:	60da      	str	r2, [r3, #12]
 80048d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e0:	d129      	bne.n	8004936 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048e2:	4b17      	ldr	r3, [pc, #92]	@ (8004940 <HAL_TIM_Encoder_MspInit+0x80>)
 80048e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e6:	4a16      	ldr	r2, [pc, #88]	@ (8004940 <HAL_TIM_Encoder_MspInit+0x80>)
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80048ee:	4b14      	ldr	r3, [pc, #80]	@ (8004940 <HAL_TIM_Encoder_MspInit+0x80>)
 80048f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048fa:	4b11      	ldr	r3, [pc, #68]	@ (8004940 <HAL_TIM_Encoder_MspInit+0x80>)
 80048fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048fe:	4a10      	ldr	r2, [pc, #64]	@ (8004940 <HAL_TIM_Encoder_MspInit+0x80>)
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004906:	4b0e      	ldr	r3, [pc, #56]	@ (8004940 <HAL_TIM_Encoder_MspInit+0x80>)
 8004908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8004912:	f248 0302 	movw	r3, #32770	@ 0x8002
 8004916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004918:	2302      	movs	r3, #2
 800491a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491c:	2300      	movs	r3, #0
 800491e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004920:	2300      	movs	r3, #0
 8004922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004924:	2301      	movs	r3, #1
 8004926:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004928:	f107 0314 	add.w	r3, r7, #20
 800492c:	4619      	mov	r1, r3
 800492e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004932:	f002 faa9 	bl	8006e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004936:	bf00      	nop
 8004938:	3728      	adds	r7, #40	@ 0x28
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40021000 	.word	0x40021000

08004944 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a46      	ldr	r2, [pc, #280]	@ (8004a6c <HAL_TIM_Base_MspInit+0x128>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d10c      	bne.n	8004970 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004956:	4b46      	ldr	r3, [pc, #280]	@ (8004a70 <HAL_TIM_Base_MspInit+0x12c>)
 8004958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495a:	4a45      	ldr	r2, [pc, #276]	@ (8004a70 <HAL_TIM_Base_MspInit+0x12c>)
 800495c:	f043 0302 	orr.w	r3, r3, #2
 8004960:	6593      	str	r3, [r2, #88]	@ 0x58
 8004962:	4b43      	ldr	r3, [pc, #268]	@ (8004a70 <HAL_TIM_Base_MspInit+0x12c>)
 8004964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800496e:	e078      	b.n	8004a62 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a3f      	ldr	r2, [pc, #252]	@ (8004a74 <HAL_TIM_Base_MspInit+0x130>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d10c      	bne.n	8004994 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800497a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a70 <HAL_TIM_Base_MspInit+0x12c>)
 800497c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800497e:	4a3c      	ldr	r2, [pc, #240]	@ (8004a70 <HAL_TIM_Base_MspInit+0x12c>)
 8004980:	f043 0304 	orr.w	r3, r3, #4
 8004984:	6593      	str	r3, [r2, #88]	@ 0x58
 8004986:	4b3a      	ldr	r3, [pc, #232]	@ (8004a70 <HAL_TIM_Base_MspInit+0x12c>)
 8004988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	61bb      	str	r3, [r7, #24]
 8004990:	69bb      	ldr	r3, [r7, #24]
}
 8004992:	e066      	b.n	8004a62 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM5)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a37      	ldr	r2, [pc, #220]	@ (8004a78 <HAL_TIM_Base_MspInit+0x134>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d114      	bne.n	80049c8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800499e:	4b34      	ldr	r3, [pc, #208]	@ (8004a70 <HAL_TIM_Base_MspInit+0x12c>)
 80049a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a2:	4a33      	ldr	r2, [pc, #204]	@ (8004a70 <HAL_TIM_Base_MspInit+0x12c>)
 80049a4:	f043 0308 	orr.w	r3, r3, #8
 80049a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80049aa:	4b31      	ldr	r3, [pc, #196]	@ (8004a70 <HAL_TIM_Base_MspInit+0x12c>)
 80049ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80049b6:	2200      	movs	r2, #0
 80049b8:	2100      	movs	r1, #0
 80049ba:	2032      	movs	r0, #50	@ 0x32
 80049bc:	f001 fefd 	bl	80067ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80049c0:	2032      	movs	r0, #50	@ 0x32
 80049c2:	f001 ff14 	bl	80067ee <HAL_NVIC_EnableIRQ>
}
 80049c6:	e04c      	b.n	8004a62 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM6)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a2b      	ldr	r2, [pc, #172]	@ (8004a7c <HAL_TIM_Base_MspInit+0x138>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d114      	bne.n	80049fc <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80049d2:	4b27      	ldr	r3, [pc, #156]	@ (8004a70 <HAL_TIM_Base_MspInit+0x12c>)
 80049d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d6:	4a26      	ldr	r2, [pc, #152]	@ (8004a70 <HAL_TIM_Base_MspInit+0x12c>)
 80049d8:	f043 0310 	orr.w	r3, r3, #16
 80049dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80049de:	4b24      	ldr	r3, [pc, #144]	@ (8004a70 <HAL_TIM_Base_MspInit+0x12c>)
 80049e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e2:	f003 0310 	and.w	r3, r3, #16
 80049e6:	613b      	str	r3, [r7, #16]
 80049e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80049ea:	2200      	movs	r2, #0
 80049ec:	2100      	movs	r1, #0
 80049ee:	2036      	movs	r0, #54	@ 0x36
 80049f0:	f001 fee3 	bl	80067ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80049f4:	2036      	movs	r0, #54	@ 0x36
 80049f6:	f001 fefa 	bl	80067ee <HAL_NVIC_EnableIRQ>
}
 80049fa:	e032      	b.n	8004a62 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM15)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a1f      	ldr	r2, [pc, #124]	@ (8004a80 <HAL_TIM_Base_MspInit+0x13c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d114      	bne.n	8004a30 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004a06:	4b1a      	ldr	r3, [pc, #104]	@ (8004a70 <HAL_TIM_Base_MspInit+0x12c>)
 8004a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a0a:	4a19      	ldr	r2, [pc, #100]	@ (8004a70 <HAL_TIM_Base_MspInit+0x12c>)
 8004a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a10:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a12:	4b17      	ldr	r3, [pc, #92]	@ (8004a70 <HAL_TIM_Base_MspInit+0x12c>)
 8004a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8004a1e:	2200      	movs	r2, #0
 8004a20:	2100      	movs	r1, #0
 8004a22:	2018      	movs	r0, #24
 8004a24:	f001 fec9 	bl	80067ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004a28:	2018      	movs	r0, #24
 8004a2a:	f001 fee0 	bl	80067ee <HAL_NVIC_EnableIRQ>
}
 8004a2e:	e018      	b.n	8004a62 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM16)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a13      	ldr	r2, [pc, #76]	@ (8004a84 <HAL_TIM_Base_MspInit+0x140>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d113      	bne.n	8004a62 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a70 <HAL_TIM_Base_MspInit+0x12c>)
 8004a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8004a70 <HAL_TIM_Base_MspInit+0x12c>)
 8004a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a44:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a46:	4b0a      	ldr	r3, [pc, #40]	@ (8004a70 <HAL_TIM_Base_MspInit+0x12c>)
 8004a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4e:	60bb      	str	r3, [r7, #8]
 8004a50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004a52:	2200      	movs	r2, #0
 8004a54:	2100      	movs	r1, #0
 8004a56:	2019      	movs	r0, #25
 8004a58:	f001 feaf 	bl	80067ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004a5c:	2019      	movs	r0, #25
 8004a5e:	f001 fec6 	bl	80067ee <HAL_NVIC_EnableIRQ>
}
 8004a62:	bf00      	nop
 8004a64:	3720      	adds	r7, #32
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40000800 	.word	0x40000800
 8004a78:	40000c00 	.word	0x40000c00
 8004a7c:	40001000 	.word	0x40001000
 8004a80:	40014000 	.word	0x40014000
 8004a84:	40014400 	.word	0x40014400

08004a88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a90:	f107 030c 	add.w	r3, r7, #12
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	605a      	str	r2, [r3, #4]
 8004a9a:	609a      	str	r2, [r3, #8]
 8004a9c:	60da      	str	r2, [r3, #12]
 8004a9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a11      	ldr	r2, [pc, #68]	@ (8004aec <HAL_TIM_MspPostInit+0x64>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d11b      	bne.n	8004ae2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004aaa:	4b11      	ldr	r3, [pc, #68]	@ (8004af0 <HAL_TIM_MspPostInit+0x68>)
 8004aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aae:	4a10      	ldr	r2, [pc, #64]	@ (8004af0 <HAL_TIM_MspPostInit+0x68>)
 8004ab0:	f043 0304 	orr.w	r3, r3, #4
 8004ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8004af0 <HAL_TIM_MspPostInit+0x68>)
 8004ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	60bb      	str	r3, [r7, #8]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004ac2:	2340      	movs	r3, #64	@ 0x40
 8004ac4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ad6:	f107 030c 	add.w	r3, r7, #12
 8004ada:	4619      	mov	r1, r3
 8004adc:	4805      	ldr	r0, [pc, #20]	@ (8004af4 <HAL_TIM_MspPostInit+0x6c>)
 8004ade:	f002 f9d3 	bl	8006e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004ae2:	bf00      	nop
 8004ae4:	3720      	adds	r7, #32
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40021000 	.word	0x40021000
 8004af4:	48000800 	.word	0x48000800

08004af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b09e      	sub	sp, #120	@ 0x78
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	605a      	str	r2, [r3, #4]
 8004b0a:	609a      	str	r2, [r3, #8]
 8004b0c:	60da      	str	r2, [r3, #12]
 8004b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b10:	f107 0310 	add.w	r3, r7, #16
 8004b14:	2254      	movs	r2, #84	@ 0x54
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f007 fff7 	bl	800cb0c <memset>
  if(huart->Instance==USART2)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a4d      	ldr	r2, [pc, #308]	@ (8004c58 <HAL_UART_MspInit+0x160>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	f040 8092 	bne.w	8004c4e <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b32:	f107 0310 	add.w	r3, r7, #16
 8004b36:	4618      	mov	r0, r3
 8004b38:	f003 f952 	bl	8007de0 <HAL_RCCEx_PeriphCLKConfig>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004b42:	f7ff fdf5 	bl	8004730 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b46:	4b45      	ldr	r3, [pc, #276]	@ (8004c5c <HAL_UART_MspInit+0x164>)
 8004b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b4a:	4a44      	ldr	r2, [pc, #272]	@ (8004c5c <HAL_UART_MspInit+0x164>)
 8004b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b50:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b52:	4b42      	ldr	r3, [pc, #264]	@ (8004c5c <HAL_UART_MspInit+0x164>)
 8004b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b5e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c5c <HAL_UART_MspInit+0x164>)
 8004b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b62:	4a3e      	ldr	r2, [pc, #248]	@ (8004c5c <HAL_UART_MspInit+0x164>)
 8004b64:	f043 0301 	orr.w	r3, r3, #1
 8004b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b6a:	4b3c      	ldr	r3, [pc, #240]	@ (8004c5c <HAL_UART_MspInit+0x164>)
 8004b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	60bb      	str	r3, [r7, #8]
 8004b74:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004b76:	230c      	movs	r3, #12
 8004b78:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b82:	2300      	movs	r3, #0
 8004b84:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b86:	2307      	movs	r3, #7
 8004b88:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b8a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004b8e:	4619      	mov	r1, r3
 8004b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b94:	f002 f978 	bl	8006e88 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8004b98:	4b31      	ldr	r3, [pc, #196]	@ (8004c60 <HAL_UART_MspInit+0x168>)
 8004b9a:	4a32      	ldr	r2, [pc, #200]	@ (8004c64 <HAL_UART_MspInit+0x16c>)
 8004b9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004b9e:	4b30      	ldr	r3, [pc, #192]	@ (8004c60 <HAL_UART_MspInit+0x168>)
 8004ba0:	221b      	movs	r2, #27
 8004ba2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8004c60 <HAL_UART_MspInit+0x168>)
 8004ba6:	2210      	movs	r2, #16
 8004ba8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004baa:	4b2d      	ldr	r3, [pc, #180]	@ (8004c60 <HAL_UART_MspInit+0x168>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c60 <HAL_UART_MspInit+0x168>)
 8004bb2:	2280      	movs	r2, #128	@ 0x80
 8004bb4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8004c60 <HAL_UART_MspInit+0x168>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bbc:	4b28      	ldr	r3, [pc, #160]	@ (8004c60 <HAL_UART_MspInit+0x168>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004bc2:	4b27      	ldr	r3, [pc, #156]	@ (8004c60 <HAL_UART_MspInit+0x168>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004bc8:	4b25      	ldr	r3, [pc, #148]	@ (8004c60 <HAL_UART_MspInit+0x168>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004bce:	4824      	ldr	r0, [pc, #144]	@ (8004c60 <HAL_UART_MspInit+0x168>)
 8004bd0:	f001 fe28 	bl	8006824 <HAL_DMA_Init>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004bda:	f7ff fda9 	bl	8004730 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a1f      	ldr	r2, [pc, #124]	@ (8004c60 <HAL_UART_MspInit+0x168>)
 8004be2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004be4:	4a1e      	ldr	r2, [pc, #120]	@ (8004c60 <HAL_UART_MspInit+0x168>)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8004bea:	4b1f      	ldr	r3, [pc, #124]	@ (8004c68 <HAL_UART_MspInit+0x170>)
 8004bec:	4a1f      	ldr	r2, [pc, #124]	@ (8004c6c <HAL_UART_MspInit+0x174>)
 8004bee:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c68 <HAL_UART_MspInit+0x170>)
 8004bf2:	221a      	movs	r2, #26
 8004bf4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8004c68 <HAL_UART_MspInit+0x170>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8004c68 <HAL_UART_MspInit+0x170>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c02:	4b19      	ldr	r3, [pc, #100]	@ (8004c68 <HAL_UART_MspInit+0x170>)
 8004c04:	2280      	movs	r2, #128	@ 0x80
 8004c06:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c08:	4b17      	ldr	r3, [pc, #92]	@ (8004c68 <HAL_UART_MspInit+0x170>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c0e:	4b16      	ldr	r3, [pc, #88]	@ (8004c68 <HAL_UART_MspInit+0x170>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004c14:	4b14      	ldr	r3, [pc, #80]	@ (8004c68 <HAL_UART_MspInit+0x170>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c1a:	4b13      	ldr	r3, [pc, #76]	@ (8004c68 <HAL_UART_MspInit+0x170>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004c20:	4811      	ldr	r0, [pc, #68]	@ (8004c68 <HAL_UART_MspInit+0x170>)
 8004c22:	f001 fdff 	bl	8006824 <HAL_DMA_Init>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8004c2c:	f7ff fd80 	bl	8004730 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a0d      	ldr	r2, [pc, #52]	@ (8004c68 <HAL_UART_MspInit+0x170>)
 8004c34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004c38:	4a0b      	ldr	r2, [pc, #44]	@ (8004c68 <HAL_UART_MspInit+0x170>)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2100      	movs	r1, #0
 8004c42:	2026      	movs	r0, #38	@ 0x26
 8004c44:	f001 fdb9 	bl	80067ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004c48:	2026      	movs	r0, #38	@ 0x26
 8004c4a:	f001 fdd0 	bl	80067ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004c4e:	bf00      	nop
 8004c50:	3778      	adds	r7, #120	@ 0x78
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40004400 	.word	0x40004400
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	20000a3c 	.word	0x20000a3c
 8004c64:	40020008 	.word	0x40020008
 8004c68:	20000a9c 	.word	0x20000a9c
 8004c6c:	4002001c 	.word	0x4002001c

08004c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004c74:	bf00      	nop
 8004c76:	e7fd      	b.n	8004c74 <NMI_Handler+0x4>

08004c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c7c:	bf00      	nop
 8004c7e:	e7fd      	b.n	8004c7c <HardFault_Handler+0x4>

08004c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c84:	bf00      	nop
 8004c86:	e7fd      	b.n	8004c84 <MemManage_Handler+0x4>

08004c88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c8c:	bf00      	nop
 8004c8e:	e7fd      	b.n	8004c8c <BusFault_Handler+0x4>

08004c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c94:	bf00      	nop
 8004c96:	e7fd      	b.n	8004c94 <UsageFault_Handler+0x4>

08004c98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c9c:	bf00      	nop
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004caa:	bf00      	nop
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004cb8:	bf00      	nop
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004cc6:	f000 f8f9 	bl	8004ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004cca:	bf00      	nop
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004cd4:	4802      	ldr	r0, [pc, #8]	@ (8004ce0 <DMA1_Channel1_IRQHandler+0x10>)
 8004cd6:	f001 ff88 	bl	8006bea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004cda:	bf00      	nop
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000a3c 	.word	0x20000a3c

08004ce4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004ce8:	4802      	ldr	r0, [pc, #8]	@ (8004cf4 <DMA1_Channel2_IRQHandler+0x10>)
 8004cea:	f001 ff7e 	bl	8006bea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004cee:	bf00      	nop
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20000a9c 	.word	0x20000a9c

08004cf8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004cfc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004d00:	f002 fa74 	bl	80071ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004d04:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004d08:	f002 fa70 	bl	80071ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004d0c:	bf00      	nop
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8004d14:	4802      	ldr	r0, [pc, #8]	@ (8004d20 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8004d16:	f003 ffb5 	bl	8008c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8004d1a:	bf00      	nop
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	200007d8 	.word	0x200007d8

08004d24 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004d28:	4802      	ldr	r0, [pc, #8]	@ (8004d34 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004d2a:	f003 ffab 	bl	8008c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004d2e:	bf00      	nop
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	200008a4 	.word	0x200008a4

08004d38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004d3c:	4802      	ldr	r0, [pc, #8]	@ (8004d48 <USART2_IRQHandler+0x10>)
 8004d3e:	f005 fce1 	bl	800a704 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004d42:	bf00      	nop
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20000970 	.word	0x20000970

08004d4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004d50:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004d54:	f002 fa4a 	bl	80071ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004d58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004d5c:	f002 fa46 	bl	80071ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004d60:	bf00      	nop
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004d68:	4802      	ldr	r0, [pc, #8]	@ (8004d74 <TIM5_IRQHandler+0x10>)
 8004d6a:	f003 ff8b 	bl	8008c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004d6e:	bf00      	nop
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20000640 	.word	0x20000640

08004d78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004d7c:	4802      	ldr	r0, [pc, #8]	@ (8004d88 <TIM6_DAC_IRQHandler+0x10>)
 8004d7e:	f003 ff81 	bl	8008c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004d82:	bf00      	nop
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	2000070c 	.word	0x2000070c

08004d8c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004d90:	4802      	ldr	r0, [pc, #8]	@ (8004d9c <DMA2_Channel1_IRQHandler+0x10>)
 8004d92:	f001 ff2a 	bl	8006bea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004d96:	bf00      	nop
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	2000037c 	.word	0x2000037c

08004da0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004da4:	4b06      	ldr	r3, [pc, #24]	@ (8004dc0 <SystemInit+0x20>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004daa:	4a05      	ldr	r2, [pc, #20]	@ (8004dc0 <SystemInit+0x20>)
 8004dac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004db0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	e000ed00 	.word	0xe000ed00

08004dc4 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 8004dc4:	480d      	ldr	r0, [pc, #52]	@ (8004dfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004dc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004dc8:	f7ff ffea 	bl	8004da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004dcc:	480c      	ldr	r0, [pc, #48]	@ (8004e00 <LoopForever+0x6>)
  ldr r1, =_edata
 8004dce:	490d      	ldr	r1, [pc, #52]	@ (8004e04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8004e08 <LoopForever+0xe>)
  movs r3, #0
 8004dd2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004dd4:	e002      	b.n	8004ddc <LoopCopyDataInit>

08004dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dda:	3304      	adds	r3, #4

08004ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004de0:	d3f9      	bcc.n	8004dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004de2:	4a0a      	ldr	r2, [pc, #40]	@ (8004e0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004de4:	4c0a      	ldr	r4, [pc, #40]	@ (8004e10 <LoopForever+0x16>)
  movs r3, #0
 8004de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004de8:	e001      	b.n	8004dee <LoopFillZerobss>

08004dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004dec:	3204      	adds	r2, #4

08004dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004df0:	d3fb      	bcc.n	8004dea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004df2:	f007 fe99 	bl	800cb28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004df6:	f7fc fe7b 	bl	8001af0 <main>

08004dfa <LoopForever>:

LoopForever:
    b LoopForever
 8004dfa:	e7fe      	b.n	8004dfa <LoopForever>
  ldr   r0, =_estack
 8004dfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e04:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 8004e08:	0800ce24 	.word	0x0800ce24
  ldr r2, =_sbss
 8004e0c:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8004e10:	20001594 	.word	0x20001594

08004e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004e14:	e7fe      	b.n	8004e14 <ADC1_2_IRQHandler>

08004e16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b082      	sub	sp, #8
 8004e1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e20:	2003      	movs	r0, #3
 8004e22:	f001 fcbf 	bl	80067a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e26:	2000      	movs	r0, #0
 8004e28:	f000 f80e 	bl	8004e48 <HAL_InitTick>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	71fb      	strb	r3, [r7, #7]
 8004e36:	e001      	b.n	8004e3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004e38:	f7ff fc80 	bl	800473c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004e3c:	79fb      	ldrb	r3, [r7, #7]

}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004e54:	4b16      	ldr	r3, [pc, #88]	@ (8004eb0 <HAL_InitTick+0x68>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d022      	beq.n	8004ea2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004e5c:	4b15      	ldr	r3, [pc, #84]	@ (8004eb4 <HAL_InitTick+0x6c>)
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	4b13      	ldr	r3, [pc, #76]	@ (8004eb0 <HAL_InitTick+0x68>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004e68:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e70:	4618      	mov	r0, r3
 8004e72:	f001 fcca 	bl	800680a <HAL_SYSTICK_Config>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10f      	bne.n	8004e9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b0f      	cmp	r3, #15
 8004e80:	d809      	bhi.n	8004e96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e82:	2200      	movs	r2, #0
 8004e84:	6879      	ldr	r1, [r7, #4]
 8004e86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e8a:	f001 fc96 	bl	80067ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004eb8 <HAL_InitTick+0x70>)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6013      	str	r3, [r2, #0]
 8004e94:	e007      	b.n	8004ea6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	73fb      	strb	r3, [r7, #15]
 8004e9a:	e004      	b.n	8004ea6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	73fb      	strb	r3, [r7, #15]
 8004ea0:	e001      	b.n	8004ea6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	2000028c 	.word	0x2000028c
 8004eb4:	20000284 	.word	0x20000284
 8004eb8:	20000288 	.word	0x20000288

08004ebc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ec0:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <HAL_IncTick+0x1c>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	4b05      	ldr	r3, [pc, #20]	@ (8004edc <HAL_IncTick+0x20>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4413      	add	r3, r2
 8004eca:	4a03      	ldr	r2, [pc, #12]	@ (8004ed8 <HAL_IncTick+0x1c>)
 8004ecc:	6013      	str	r3, [r2, #0]
}
 8004ece:	bf00      	nop
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	20001458 	.word	0x20001458
 8004edc:	2000028c 	.word	0x2000028c

08004ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ee4:	4b03      	ldr	r3, [pc, #12]	@ (8004ef4 <HAL_GetTick+0x14>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	20001458 	.word	0x20001458

08004ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f00:	f7ff ffee 	bl	8004ee0 <HAL_GetTick>
 8004f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f10:	d004      	beq.n	8004f1c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f12:	4b09      	ldr	r3, [pc, #36]	@ (8004f38 <HAL_Delay+0x40>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4413      	add	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f1c:	bf00      	nop
 8004f1e:	f7ff ffdf 	bl	8004ee0 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d8f7      	bhi.n	8004f1e <HAL_Delay+0x26>
  {
  }
}
 8004f2e:	bf00      	nop
 8004f30:	bf00      	nop
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	2000028c 	.word	0x2000028c

08004f3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	609a      	str	r2, [r3, #8]
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	609a      	str	r2, [r3, #8]
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3360      	adds	r3, #96	@ 0x60
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	4b08      	ldr	r3, [pc, #32]	@ (8004fe8 <LL_ADC_SetOffset+0x44>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004fdc:	bf00      	nop
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	03fff000 	.word	0x03fff000

08004fec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3360      	adds	r3, #96	@ 0x60
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	3360      	adds	r3, #96	@ 0x60
 8005028:	461a      	mov	r2, r3
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	431a      	orrs	r2, r3
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005042:	bf00      	nop
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800504e:	b480      	push	{r7}
 8005050:	b087      	sub	sp, #28
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3360      	adds	r3, #96	@ 0x60
 800505e:	461a      	mov	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	431a      	orrs	r2, r3
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005078:	bf00      	nop
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3360      	adds	r3, #96	@ 0x60
 8005094:	461a      	mov	r2, r3
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	431a      	orrs	r2, r3
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80050ae:	bf00      	nop
 80050b0:	371c      	adds	r7, #28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	615a      	str	r2, [r3, #20]
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005106:	b480      	push	{r7}
 8005108:	b087      	sub	sp, #28
 800510a:	af00      	add	r7, sp, #0
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3330      	adds	r3, #48	@ 0x30
 8005116:	461a      	mov	r2, r3
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	0a1b      	lsrs	r3, r3, #8
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	f003 030c 	and.w	r3, r3, #12
 8005122:	4413      	add	r3, r2
 8005124:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	211f      	movs	r1, #31
 8005132:	fa01 f303 	lsl.w	r3, r1, r3
 8005136:	43db      	mvns	r3, r3
 8005138:	401a      	ands	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	0e9b      	lsrs	r3, r3, #26
 800513e:	f003 011f 	and.w	r1, r3, #31
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f003 031f 	and.w	r3, r3, #31
 8005148:	fa01 f303 	lsl.w	r3, r1, r3
 800514c:	431a      	orrs	r2, r3
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005152:	bf00      	nop
 8005154:	371c      	adds	r7, #28
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800515e:	b480      	push	{r7}
 8005160:	b087      	sub	sp, #28
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3314      	adds	r3, #20
 800516e:	461a      	mov	r2, r3
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	0e5b      	lsrs	r3, r3, #25
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	4413      	add	r3, r2
 800517c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	0d1b      	lsrs	r3, r3, #20
 8005186:	f003 031f 	and.w	r3, r3, #31
 800518a:	2107      	movs	r1, #7
 800518c:	fa01 f303 	lsl.w	r3, r1, r3
 8005190:	43db      	mvns	r3, r3
 8005192:	401a      	ands	r2, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	0d1b      	lsrs	r3, r3, #20
 8005198:	f003 031f 	and.w	r3, r3, #31
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	fa01 f303 	lsl.w	r3, r1, r3
 80051a2:	431a      	orrs	r2, r3
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80051a8:	bf00      	nop
 80051aa:	371c      	adds	r7, #28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051cc:	43db      	mvns	r3, r3
 80051ce:	401a      	ands	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f003 0318 	and.w	r3, r3, #24
 80051d6:	4908      	ldr	r1, [pc, #32]	@ (80051f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80051d8:	40d9      	lsrs	r1, r3
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	400b      	ands	r3, r1
 80051de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051e2:	431a      	orrs	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80051ea:	bf00      	nop
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	0007ffff 	.word	0x0007ffff

080051fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f003 031f 	and.w	r3, r3, #31
}
 800520c:	4618      	mov	r0, r3
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005228:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6093      	str	r3, [r2, #8]
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800524c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005250:	d101      	bne.n	8005256 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005274:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005278:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800529c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052a0:	d101      	bne.n	80052a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80052c8:	f043 0201 	orr.w	r2, r3, #1
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d101      	bne.n	80052f4 <LL_ADC_IsEnabled+0x18>
 80052f0:	2301      	movs	r3, #1
 80052f2:	e000      	b.n	80052f6 <LL_ADC_IsEnabled+0x1a>
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005312:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005316:	f043 0204 	orr.w	r2, r3, #4
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 0304 	and.w	r3, r3, #4
 800533a:	2b04      	cmp	r3, #4
 800533c:	d101      	bne.n	8005342 <LL_ADC_REG_IsConversionOngoing+0x18>
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b08      	cmp	r3, #8
 8005362:	d101      	bne.n	8005368 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005378:	b590      	push	{r4, r7, lr}
 800537a:	b089      	sub	sp, #36	@ 0x24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005384:	2300      	movs	r3, #0
 8005386:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e1a9      	b.n	80056e6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800539c:	2b00      	cmp	r3, #0
 800539e:	d109      	bne.n	80053b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff f9ef 	bl	8004784 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff ff3f 	bl	800523c <LL_ADC_IsDeepPowerDownEnabled>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d004      	beq.n	80053ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff ff25 	bl	8005218 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff ff5a 	bl	800528c <LL_ADC_IsInternalRegulatorEnabled>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d115      	bne.n	800540a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff ff3e 	bl	8005264 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053e8:	4b9c      	ldr	r3, [pc, #624]	@ (800565c <HAL_ADC_Init+0x2e4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	099b      	lsrs	r3, r3, #6
 80053ee:	4a9c      	ldr	r2, [pc, #624]	@ (8005660 <HAL_ADC_Init+0x2e8>)
 80053f0:	fba2 2303 	umull	r2, r3, r2, r3
 80053f4:	099b      	lsrs	r3, r3, #6
 80053f6:	3301      	adds	r3, #1
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80053fc:	e002      	b.n	8005404 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3b01      	subs	r3, #1
 8005402:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1f9      	bne.n	80053fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff ff3c 	bl	800528c <LL_ADC_IsInternalRegulatorEnabled>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10d      	bne.n	8005436 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800541e:	f043 0210 	orr.w	r2, r3, #16
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800542a:	f043 0201 	orr.w	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff ff75 	bl	800532a <LL_ADC_REG_IsConversionOngoing>
 8005440:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2b00      	cmp	r3, #0
 800544c:	f040 8142 	bne.w	80056d4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2b00      	cmp	r3, #0
 8005454:	f040 813e 	bne.w	80056d4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800545c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005460:	f043 0202 	orr.w	r2, r3, #2
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4618      	mov	r0, r3
 800546e:	f7ff ff35 	bl	80052dc <LL_ADC_IsEnabled>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d141      	bne.n	80054fc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005480:	d004      	beq.n	800548c <HAL_ADC_Init+0x114>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a77      	ldr	r2, [pc, #476]	@ (8005664 <HAL_ADC_Init+0x2ec>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d10f      	bne.n	80054ac <HAL_ADC_Init+0x134>
 800548c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005490:	f7ff ff24 	bl	80052dc <LL_ADC_IsEnabled>
 8005494:	4604      	mov	r4, r0
 8005496:	4873      	ldr	r0, [pc, #460]	@ (8005664 <HAL_ADC_Init+0x2ec>)
 8005498:	f7ff ff20 	bl	80052dc <LL_ADC_IsEnabled>
 800549c:	4603      	mov	r3, r0
 800549e:	4323      	orrs	r3, r4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bf0c      	ite	eq
 80054a4:	2301      	moveq	r3, #1
 80054a6:	2300      	movne	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	e012      	b.n	80054d2 <HAL_ADC_Init+0x15a>
 80054ac:	486e      	ldr	r0, [pc, #440]	@ (8005668 <HAL_ADC_Init+0x2f0>)
 80054ae:	f7ff ff15 	bl	80052dc <LL_ADC_IsEnabled>
 80054b2:	4604      	mov	r4, r0
 80054b4:	486d      	ldr	r0, [pc, #436]	@ (800566c <HAL_ADC_Init+0x2f4>)
 80054b6:	f7ff ff11 	bl	80052dc <LL_ADC_IsEnabled>
 80054ba:	4603      	mov	r3, r0
 80054bc:	431c      	orrs	r4, r3
 80054be:	486c      	ldr	r0, [pc, #432]	@ (8005670 <HAL_ADC_Init+0x2f8>)
 80054c0:	f7ff ff0c 	bl	80052dc <LL_ADC_IsEnabled>
 80054c4:	4603      	mov	r3, r0
 80054c6:	4323      	orrs	r3, r4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	bf0c      	ite	eq
 80054cc:	2301      	moveq	r3, #1
 80054ce:	2300      	movne	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d012      	beq.n	80054fc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054de:	d004      	beq.n	80054ea <HAL_ADC_Init+0x172>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a5f      	ldr	r2, [pc, #380]	@ (8005664 <HAL_ADC_Init+0x2ec>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d101      	bne.n	80054ee <HAL_ADC_Init+0x176>
 80054ea:	4a62      	ldr	r2, [pc, #392]	@ (8005674 <HAL_ADC_Init+0x2fc>)
 80054ec:	e000      	b.n	80054f0 <HAL_ADC_Init+0x178>
 80054ee:	4a62      	ldr	r2, [pc, #392]	@ (8005678 <HAL_ADC_Init+0x300>)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	4619      	mov	r1, r3
 80054f6:	4610      	mov	r0, r2
 80054f8:	f7ff fd20 	bl	8004f3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	7f5b      	ldrb	r3, [r3, #29]
 8005500:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005506:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800550c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005512:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800551a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800551c:	4313      	orrs	r3, r2
 800551e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005526:	2b01      	cmp	r3, #1
 8005528:	d106      	bne.n	8005538 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800552e:	3b01      	subs	r3, #1
 8005530:	045b      	lsls	r3, r3, #17
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	4313      	orrs	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d009      	beq.n	8005554 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005544:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	4313      	orrs	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	4b48      	ldr	r3, [pc, #288]	@ (800567c <HAL_ADC_Init+0x304>)
 800555c:	4013      	ands	r3, r2
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6812      	ldr	r2, [r2, #0]
 8005562:	69b9      	ldr	r1, [r7, #24]
 8005564:	430b      	orrs	r3, r1
 8005566:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff fee4 	bl	8005350 <LL_ADC_INJ_IsConversionOngoing>
 8005588:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d17f      	bne.n	8005690 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d17c      	bne.n	8005690 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800559a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80055a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80055a4:	4313      	orrs	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055b2:	f023 0302 	bic.w	r3, r3, #2
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	69b9      	ldr	r1, [r7, #24]
 80055bc:	430b      	orrs	r3, r1
 80055be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d017      	beq.n	80055f8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80055d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80055e0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80055e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6911      	ldr	r1, [r2, #16]
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6812      	ldr	r2, [r2, #0]
 80055f0:	430b      	orrs	r3, r1
 80055f2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80055f6:	e013      	b.n	8005620 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691a      	ldr	r2, [r3, #16]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005606:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005618:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800561c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005626:	2b01      	cmp	r3, #1
 8005628:	d12a      	bne.n	8005680 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005634:	f023 0304 	bic.w	r3, r3, #4
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005640:	4311      	orrs	r1, r2
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005646:	4311      	orrs	r1, r2
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800564c:	430a      	orrs	r2, r1
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0201 	orr.w	r2, r2, #1
 8005658:	611a      	str	r2, [r3, #16]
 800565a:	e019      	b.n	8005690 <HAL_ADC_Init+0x318>
 800565c:	20000284 	.word	0x20000284
 8005660:	053e2d63 	.word	0x053e2d63
 8005664:	50000100 	.word	0x50000100
 8005668:	50000400 	.word	0x50000400
 800566c:	50000500 	.word	0x50000500
 8005670:	50000600 	.word	0x50000600
 8005674:	50000300 	.word	0x50000300
 8005678:	50000700 	.word	0x50000700
 800567c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691a      	ldr	r2, [r3, #16]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0201 	bic.w	r2, r2, #1
 800568e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d10c      	bne.n	80056b2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569e:	f023 010f 	bic.w	r1, r3, #15
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	1e5a      	subs	r2, r3, #1
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80056b0:	e007      	b.n	80056c2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 020f 	bic.w	r2, r2, #15
 80056c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c6:	f023 0303 	bic.w	r3, r3, #3
 80056ca:	f043 0201 	orr.w	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80056d2:	e007      	b.n	80056e4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d8:	f043 0210 	orr.w	r2, r3, #16
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80056e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3724      	adds	r7, #36	@ 0x24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd90      	pop	{r4, r7, pc}
 80056ee:	bf00      	nop

080056f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005704:	d004      	beq.n	8005710 <HAL_ADC_Start_DMA+0x20>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a5a      	ldr	r2, [pc, #360]	@ (8005874 <HAL_ADC_Start_DMA+0x184>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d101      	bne.n	8005714 <HAL_ADC_Start_DMA+0x24>
 8005710:	4b59      	ldr	r3, [pc, #356]	@ (8005878 <HAL_ADC_Start_DMA+0x188>)
 8005712:	e000      	b.n	8005716 <HAL_ADC_Start_DMA+0x26>
 8005714:	4b59      	ldr	r3, [pc, #356]	@ (800587c <HAL_ADC_Start_DMA+0x18c>)
 8005716:	4618      	mov	r0, r3
 8005718:	f7ff fd70 	bl	80051fc <LL_ADC_GetMultimode>
 800571c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff fe01 	bl	800532a <LL_ADC_REG_IsConversionOngoing>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	f040 809b 	bne.w	8005866 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <HAL_ADC_Start_DMA+0x4e>
 800573a:	2302      	movs	r3, #2
 800573c:	e096      	b.n	800586c <HAL_ADC_Start_DMA+0x17c>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a4d      	ldr	r2, [pc, #308]	@ (8005880 <HAL_ADC_Start_DMA+0x190>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d008      	beq.n	8005762 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b05      	cmp	r3, #5
 800575a:	d002      	beq.n	8005762 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b09      	cmp	r3, #9
 8005760:	d17a      	bne.n	8005858 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 fcf6 	bl	8006154 <ADC_Enable>
 8005768:	4603      	mov	r3, r0
 800576a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800576c:	7dfb      	ldrb	r3, [r7, #23]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d16d      	bne.n	800584e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005776:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800577a:	f023 0301 	bic.w	r3, r3, #1
 800577e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a3a      	ldr	r2, [pc, #232]	@ (8005874 <HAL_ADC_Start_DMA+0x184>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d009      	beq.n	80057a4 <HAL_ADC_Start_DMA+0xb4>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a3b      	ldr	r2, [pc, #236]	@ (8005884 <HAL_ADC_Start_DMA+0x194>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d002      	beq.n	80057a0 <HAL_ADC_Start_DMA+0xb0>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	e003      	b.n	80057a8 <HAL_ADC_Start_DMA+0xb8>
 80057a0:	4b39      	ldr	r3, [pc, #228]	@ (8005888 <HAL_ADC_Start_DMA+0x198>)
 80057a2:	e001      	b.n	80057a8 <HAL_ADC_Start_DMA+0xb8>
 80057a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d002      	beq.n	80057b6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d105      	bne.n	80057c2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ba:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d006      	beq.n	80057dc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057d2:	f023 0206 	bic.w	r2, r3, #6
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	661a      	str	r2, [r3, #96]	@ 0x60
 80057da:	e002      	b.n	80057e2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e6:	4a29      	ldr	r2, [pc, #164]	@ (800588c <HAL_ADC_Start_DMA+0x19c>)
 80057e8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ee:	4a28      	ldr	r2, [pc, #160]	@ (8005890 <HAL_ADC_Start_DMA+0x1a0>)
 80057f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f6:	4a27      	ldr	r2, [pc, #156]	@ (8005894 <HAL_ADC_Start_DMA+0x1a4>)
 80057f8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	221c      	movs	r2, #28
 8005800:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f042 0210 	orr.w	r2, r2, #16
 8005818:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f042 0201 	orr.w	r2, r2, #1
 8005828:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3340      	adds	r3, #64	@ 0x40
 8005834:	4619      	mov	r1, r3
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f001 f89b 	bl	8006974 <HAL_DMA_Start_IT>
 800583e:	4603      	mov	r3, r0
 8005840:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff fd5b 	bl	8005302 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800584c:	e00d      	b.n	800586a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005856:	e008      	b.n	800586a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005864:	e001      	b.n	800586a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005866:	2302      	movs	r3, #2
 8005868:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800586a:	7dfb      	ldrb	r3, [r7, #23]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	50000100 	.word	0x50000100
 8005878:	50000300 	.word	0x50000300
 800587c:	50000700 	.word	0x50000700
 8005880:	50000600 	.word	0x50000600
 8005884:	50000500 	.word	0x50000500
 8005888:	50000400 	.word	0x50000400
 800588c:	08006281 	.word	0x08006281
 8005890:	08006359 	.word	0x08006359
 8005894:	08006375 	.word	0x08006375

08005898 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b0b6      	sub	sp, #216	@ 0xd8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d102      	bne.n	80058f8 <HAL_ADC_ConfigChannel+0x24>
 80058f2:	2302      	movs	r3, #2
 80058f4:	f000 bc13 	b.w	800611e <HAL_ADC_ConfigChannel+0x84a>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff fd10 	bl	800532a <LL_ADC_REG_IsConversionOngoing>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	f040 83f3 	bne.w	80060f8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6859      	ldr	r1, [r3, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	f7ff fbf1 	bl	8005106 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff fcfe 	bl	800532a <LL_ADC_REG_IsConversionOngoing>
 800592e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff fd0a 	bl	8005350 <LL_ADC_INJ_IsConversionOngoing>
 800593c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005940:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005944:	2b00      	cmp	r3, #0
 8005946:	f040 81d9 	bne.w	8005cfc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800594a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800594e:	2b00      	cmp	r3, #0
 8005950:	f040 81d4 	bne.w	8005cfc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800595c:	d10f      	bne.n	800597e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2200      	movs	r2, #0
 8005968:	4619      	mov	r1, r3
 800596a:	f7ff fbf8 	bl	800515e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff fb9f 	bl	80050ba <LL_ADC_SetSamplingTimeCommonConfig>
 800597c:	e00e      	b.n	800599c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	6819      	ldr	r1, [r3, #0]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	461a      	mov	r2, r3
 800598c:	f7ff fbe7 	bl	800515e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2100      	movs	r1, #0
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff fb8f 	bl	80050ba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	695a      	ldr	r2, [r3, #20]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	08db      	lsrs	r3, r3, #3
 80059a8:	f003 0303 	and.w	r3, r3, #3
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	fa02 f303 	lsl.w	r3, r2, r3
 80059b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	d022      	beq.n	8005a04 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	6919      	ldr	r1, [r3, #16]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80059ce:	f7ff fae9 	bl	8004fa4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6818      	ldr	r0, [r3, #0]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	6919      	ldr	r1, [r3, #16]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	461a      	mov	r2, r3
 80059e0:	f7ff fb35 	bl	800504e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d102      	bne.n	80059fa <HAL_ADC_ConfigChannel+0x126>
 80059f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059f8:	e000      	b.n	80059fc <HAL_ADC_ConfigChannel+0x128>
 80059fa:	2300      	movs	r3, #0
 80059fc:	461a      	mov	r2, r3
 80059fe:	f7ff fb41 	bl	8005084 <LL_ADC_SetOffsetSaturation>
 8005a02:	e17b      	b.n	8005cfc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2100      	movs	r1, #0
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7ff faee 	bl	8004fec <LL_ADC_GetOffsetChannel>
 8005a10:	4603      	mov	r3, r0
 8005a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10a      	bne.n	8005a30 <HAL_ADC_ConfigChannel+0x15c>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2100      	movs	r1, #0
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff fae3 	bl	8004fec <LL_ADC_GetOffsetChannel>
 8005a26:	4603      	mov	r3, r0
 8005a28:	0e9b      	lsrs	r3, r3, #26
 8005a2a:	f003 021f 	and.w	r2, r3, #31
 8005a2e:	e01e      	b.n	8005a6e <HAL_ADC_ConfigChannel+0x19a>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2100      	movs	r1, #0
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff fad8 	bl	8004fec <LL_ADC_GetOffsetChannel>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005a46:	fa93 f3a3 	rbit	r3, r3
 8005a4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005a4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005a56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005a5e:	2320      	movs	r3, #32
 8005a60:	e004      	b.n	8005a6c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005a62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005a66:	fab3 f383 	clz	r3, r3
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d105      	bne.n	8005a86 <HAL_ADC_ConfigChannel+0x1b2>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	0e9b      	lsrs	r3, r3, #26
 8005a80:	f003 031f 	and.w	r3, r3, #31
 8005a84:	e018      	b.n	8005ab8 <HAL_ADC_ConfigChannel+0x1e4>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005a92:	fa93 f3a3 	rbit	r3, r3
 8005a96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005aa2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005aaa:	2320      	movs	r3, #32
 8005aac:	e004      	b.n	8005ab8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005aae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ab2:	fab3 f383 	clz	r3, r3
 8005ab6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d106      	bne.n	8005aca <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff faa7 	bl	8005018 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2101      	movs	r1, #1
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7ff fa8b 	bl	8004fec <LL_ADC_GetOffsetChannel>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <HAL_ADC_ConfigChannel+0x222>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7ff fa80 	bl	8004fec <LL_ADC_GetOffsetChannel>
 8005aec:	4603      	mov	r3, r0
 8005aee:	0e9b      	lsrs	r3, r3, #26
 8005af0:	f003 021f 	and.w	r2, r3, #31
 8005af4:	e01e      	b.n	8005b34 <HAL_ADC_ConfigChannel+0x260>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2101      	movs	r1, #1
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7ff fa75 	bl	8004fec <LL_ADC_GetOffsetChannel>
 8005b02:	4603      	mov	r3, r0
 8005b04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005b0c:	fa93 f3a3 	rbit	r3, r3
 8005b10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005b14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005b1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005b24:	2320      	movs	r3, #32
 8005b26:	e004      	b.n	8005b32 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005b28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b2c:	fab3 f383 	clz	r3, r3
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d105      	bne.n	8005b4c <HAL_ADC_ConfigChannel+0x278>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	0e9b      	lsrs	r3, r3, #26
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	e018      	b.n	8005b7e <HAL_ADC_ConfigChannel+0x2aa>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b58:	fa93 f3a3 	rbit	r3, r3
 8005b5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005b60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005b68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005b70:	2320      	movs	r3, #32
 8005b72:	e004      	b.n	8005b7e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b78:	fab3 f383 	clz	r3, r3
 8005b7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d106      	bne.n	8005b90 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2200      	movs	r2, #0
 8005b88:	2101      	movs	r1, #1
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff fa44 	bl	8005018 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2102      	movs	r1, #2
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff fa28 	bl	8004fec <LL_ADC_GetOffsetChannel>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10a      	bne.n	8005bbc <HAL_ADC_ConfigChannel+0x2e8>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2102      	movs	r1, #2
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7ff fa1d 	bl	8004fec <LL_ADC_GetOffsetChannel>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	0e9b      	lsrs	r3, r3, #26
 8005bb6:	f003 021f 	and.w	r2, r3, #31
 8005bba:	e01e      	b.n	8005bfa <HAL_ADC_ConfigChannel+0x326>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2102      	movs	r1, #2
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff fa12 	bl	8004fec <LL_ADC_GetOffsetChannel>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bd2:	fa93 f3a3 	rbit	r3, r3
 8005bd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005bda:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005be2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005bea:	2320      	movs	r3, #32
 8005bec:	e004      	b.n	8005bf8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005bf2:	fab3 f383 	clz	r3, r3
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d105      	bne.n	8005c12 <HAL_ADC_ConfigChannel+0x33e>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	0e9b      	lsrs	r3, r3, #26
 8005c0c:	f003 031f 	and.w	r3, r3, #31
 8005c10:	e016      	b.n	8005c40 <HAL_ADC_ConfigChannel+0x36c>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005c1e:	fa93 f3a3 	rbit	r3, r3
 8005c22:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005c24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005c2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005c32:	2320      	movs	r3, #32
 8005c34:	e004      	b.n	8005c40 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005c36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c3a:	fab3 f383 	clz	r3, r3
 8005c3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d106      	bne.n	8005c52 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2102      	movs	r1, #2
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff f9e3 	bl	8005018 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2103      	movs	r1, #3
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff f9c7 	bl	8004fec <LL_ADC_GetOffsetChannel>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10a      	bne.n	8005c7e <HAL_ADC_ConfigChannel+0x3aa>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2103      	movs	r1, #3
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff f9bc 	bl	8004fec <LL_ADC_GetOffsetChannel>
 8005c74:	4603      	mov	r3, r0
 8005c76:	0e9b      	lsrs	r3, r3, #26
 8005c78:	f003 021f 	and.w	r2, r3, #31
 8005c7c:	e017      	b.n	8005cae <HAL_ADC_ConfigChannel+0x3da>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2103      	movs	r1, #3
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7ff f9b1 	bl	8004fec <LL_ADC_GetOffsetChannel>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c90:	fa93 f3a3 	rbit	r3, r3
 8005c94:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005c96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c98:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005c9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005ca0:	2320      	movs	r3, #32
 8005ca2:	e003      	b.n	8005cac <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005ca4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ca6:	fab3 f383 	clz	r3, r3
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d105      	bne.n	8005cc6 <HAL_ADC_ConfigChannel+0x3f2>
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	0e9b      	lsrs	r3, r3, #26
 8005cc0:	f003 031f 	and.w	r3, r3, #31
 8005cc4:	e011      	b.n	8005cea <HAL_ADC_ConfigChannel+0x416>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ccc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cce:	fa93 f3a3 	rbit	r3, r3
 8005cd2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005cd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005cd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005cde:	2320      	movs	r3, #32
 8005ce0:	e003      	b.n	8005cea <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ce4:	fab3 f383 	clz	r3, r3
 8005ce8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d106      	bne.n	8005cfc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2103      	movs	r1, #3
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff f98e 	bl	8005018 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff faeb 	bl	80052dc <LL_ADC_IsEnabled>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f040 813d 	bne.w	8005f88 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	6819      	ldr	r1, [r3, #0]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f7ff fa4a 	bl	80051b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	4aa2      	ldr	r2, [pc, #648]	@ (8005fb0 <HAL_ADC_ConfigChannel+0x6dc>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	f040 812e 	bne.w	8005f88 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10b      	bne.n	8005d54 <HAL_ADC_ConfigChannel+0x480>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	0e9b      	lsrs	r3, r3, #26
 8005d42:	3301      	adds	r3, #1
 8005d44:	f003 031f 	and.w	r3, r3, #31
 8005d48:	2b09      	cmp	r3, #9
 8005d4a:	bf94      	ite	ls
 8005d4c:	2301      	movls	r3, #1
 8005d4e:	2300      	movhi	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	e019      	b.n	8005d88 <HAL_ADC_ConfigChannel+0x4b4>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d5c:	fa93 f3a3 	rbit	r3, r3
 8005d60:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005d62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d64:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005d66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005d6c:	2320      	movs	r3, #32
 8005d6e:	e003      	b.n	8005d78 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005d70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d72:	fab3 f383 	clz	r3, r3
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	3301      	adds	r3, #1
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	2b09      	cmp	r3, #9
 8005d80:	bf94      	ite	ls
 8005d82:	2301      	movls	r3, #1
 8005d84:	2300      	movhi	r3, #0
 8005d86:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d079      	beq.n	8005e80 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d107      	bne.n	8005da8 <HAL_ADC_ConfigChannel+0x4d4>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	0e9b      	lsrs	r3, r3, #26
 8005d9e:	3301      	adds	r3, #1
 8005da0:	069b      	lsls	r3, r3, #26
 8005da2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005da6:	e015      	b.n	8005dd4 <HAL_ADC_ConfigChannel+0x500>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005db0:	fa93 f3a3 	rbit	r3, r3
 8005db4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005db6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005db8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005dc0:	2320      	movs	r3, #32
 8005dc2:	e003      	b.n	8005dcc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dc6:	fab3 f383 	clz	r3, r3
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	3301      	adds	r3, #1
 8005dce:	069b      	lsls	r3, r3, #26
 8005dd0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d109      	bne.n	8005df4 <HAL_ADC_ConfigChannel+0x520>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	0e9b      	lsrs	r3, r3, #26
 8005de6:	3301      	adds	r3, #1
 8005de8:	f003 031f 	and.w	r3, r3, #31
 8005dec:	2101      	movs	r1, #1
 8005dee:	fa01 f303 	lsl.w	r3, r1, r3
 8005df2:	e017      	b.n	8005e24 <HAL_ADC_ConfigChannel+0x550>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dfc:	fa93 f3a3 	rbit	r3, r3
 8005e00:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e04:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005e06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005e0c:	2320      	movs	r3, #32
 8005e0e:	e003      	b.n	8005e18 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e12:	fab3 f383 	clz	r3, r3
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	3301      	adds	r3, #1
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	2101      	movs	r1, #1
 8005e20:	fa01 f303 	lsl.w	r3, r1, r3
 8005e24:	ea42 0103 	orr.w	r1, r2, r3
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10a      	bne.n	8005e4a <HAL_ADC_ConfigChannel+0x576>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	0e9b      	lsrs	r3, r3, #26
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	f003 021f 	and.w	r2, r3, #31
 8005e40:	4613      	mov	r3, r2
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	4413      	add	r3, r2
 8005e46:	051b      	lsls	r3, r3, #20
 8005e48:	e018      	b.n	8005e7c <HAL_ADC_ConfigChannel+0x5a8>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e52:	fa93 f3a3 	rbit	r3, r3
 8005e56:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005e62:	2320      	movs	r3, #32
 8005e64:	e003      	b.n	8005e6e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e68:	fab3 f383 	clz	r3, r3
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	3301      	adds	r3, #1
 8005e70:	f003 021f 	and.w	r2, r3, #31
 8005e74:	4613      	mov	r3, r2
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	4413      	add	r3, r2
 8005e7a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	e07e      	b.n	8005f7e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d107      	bne.n	8005e9c <HAL_ADC_ConfigChannel+0x5c8>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	0e9b      	lsrs	r3, r3, #26
 8005e92:	3301      	adds	r3, #1
 8005e94:	069b      	lsls	r3, r3, #26
 8005e96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e9a:	e015      	b.n	8005ec8 <HAL_ADC_ConfigChannel+0x5f4>
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea4:	fa93 f3a3 	rbit	r3, r3
 8005ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eac:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005eb4:	2320      	movs	r3, #32
 8005eb6:	e003      	b.n	8005ec0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eba:	fab3 f383 	clz	r3, r3
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	069b      	lsls	r3, r3, #26
 8005ec4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d109      	bne.n	8005ee8 <HAL_ADC_ConfigChannel+0x614>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	0e9b      	lsrs	r3, r3, #26
 8005eda:	3301      	adds	r3, #1
 8005edc:	f003 031f 	and.w	r3, r3, #31
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee6:	e017      	b.n	8005f18 <HAL_ADC_ConfigChannel+0x644>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	fa93 f3a3 	rbit	r3, r3
 8005ef4:	61fb      	str	r3, [r7, #28]
  return result;
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005f00:	2320      	movs	r3, #32
 8005f02:	e003      	b.n	8005f0c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	fab3 f383 	clz	r3, r3
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	f003 031f 	and.w	r3, r3, #31
 8005f12:	2101      	movs	r1, #1
 8005f14:	fa01 f303 	lsl.w	r3, r1, r3
 8005f18:	ea42 0103 	orr.w	r1, r2, r3
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10d      	bne.n	8005f44 <HAL_ADC_ConfigChannel+0x670>
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	0e9b      	lsrs	r3, r3, #26
 8005f2e:	3301      	adds	r3, #1
 8005f30:	f003 021f 	and.w	r2, r3, #31
 8005f34:	4613      	mov	r3, r2
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	4413      	add	r3, r2
 8005f3a:	3b1e      	subs	r3, #30
 8005f3c:	051b      	lsls	r3, r3, #20
 8005f3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005f42:	e01b      	b.n	8005f7c <HAL_ADC_ConfigChannel+0x6a8>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	fa93 f3a3 	rbit	r3, r3
 8005f50:	613b      	str	r3, [r7, #16]
  return result;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005f5c:	2320      	movs	r3, #32
 8005f5e:	e003      	b.n	8005f68 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	fab3 f383 	clz	r3, r3
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	3301      	adds	r3, #1
 8005f6a:	f003 021f 	and.w	r2, r3, #31
 8005f6e:	4613      	mov	r3, r2
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	4413      	add	r3, r2
 8005f74:	3b1e      	subs	r3, #30
 8005f76:	051b      	lsls	r3, r3, #20
 8005f78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f7c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f82:	4619      	mov	r1, r3
 8005f84:	f7ff f8eb 	bl	800515e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	4b09      	ldr	r3, [pc, #36]	@ (8005fb4 <HAL_ADC_ConfigChannel+0x6e0>)
 8005f8e:	4013      	ands	r3, r2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 80be 	beq.w	8006112 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f9e:	d004      	beq.n	8005faa <HAL_ADC_ConfigChannel+0x6d6>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a04      	ldr	r2, [pc, #16]	@ (8005fb8 <HAL_ADC_ConfigChannel+0x6e4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d10a      	bne.n	8005fc0 <HAL_ADC_ConfigChannel+0x6ec>
 8005faa:	4b04      	ldr	r3, [pc, #16]	@ (8005fbc <HAL_ADC_ConfigChannel+0x6e8>)
 8005fac:	e009      	b.n	8005fc2 <HAL_ADC_ConfigChannel+0x6ee>
 8005fae:	bf00      	nop
 8005fb0:	407f0000 	.word	0x407f0000
 8005fb4:	80080000 	.word	0x80080000
 8005fb8:	50000100 	.word	0x50000100
 8005fbc:	50000300 	.word	0x50000300
 8005fc0:	4b59      	ldr	r3, [pc, #356]	@ (8006128 <HAL_ADC_ConfigChannel+0x854>)
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fe ffe0 	bl	8004f88 <LL_ADC_GetCommonPathInternalCh>
 8005fc8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a56      	ldr	r2, [pc, #344]	@ (800612c <HAL_ADC_ConfigChannel+0x858>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d004      	beq.n	8005fe0 <HAL_ADC_ConfigChannel+0x70c>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a55      	ldr	r2, [pc, #340]	@ (8006130 <HAL_ADC_ConfigChannel+0x85c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d13a      	bne.n	8006056 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005fe0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005fe4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d134      	bne.n	8006056 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ff4:	d005      	beq.n	8006002 <HAL_ADC_ConfigChannel+0x72e>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a4e      	ldr	r2, [pc, #312]	@ (8006134 <HAL_ADC_ConfigChannel+0x860>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	f040 8085 	bne.w	800610c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800600a:	d004      	beq.n	8006016 <HAL_ADC_ConfigChannel+0x742>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a49      	ldr	r2, [pc, #292]	@ (8006138 <HAL_ADC_ConfigChannel+0x864>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d101      	bne.n	800601a <HAL_ADC_ConfigChannel+0x746>
 8006016:	4a49      	ldr	r2, [pc, #292]	@ (800613c <HAL_ADC_ConfigChannel+0x868>)
 8006018:	e000      	b.n	800601c <HAL_ADC_ConfigChannel+0x748>
 800601a:	4a43      	ldr	r2, [pc, #268]	@ (8006128 <HAL_ADC_ConfigChannel+0x854>)
 800601c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006020:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006024:	4619      	mov	r1, r3
 8006026:	4610      	mov	r0, r2
 8006028:	f7fe ff9b 	bl	8004f62 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800602c:	4b44      	ldr	r3, [pc, #272]	@ (8006140 <HAL_ADC_ConfigChannel+0x86c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	099b      	lsrs	r3, r3, #6
 8006032:	4a44      	ldr	r2, [pc, #272]	@ (8006144 <HAL_ADC_ConfigChannel+0x870>)
 8006034:	fba2 2303 	umull	r2, r3, r2, r3
 8006038:	099b      	lsrs	r3, r3, #6
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	4613      	mov	r3, r2
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	4413      	add	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006046:	e002      	b.n	800604e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	3b01      	subs	r3, #1
 800604c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1f9      	bne.n	8006048 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006054:	e05a      	b.n	800610c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a3b      	ldr	r2, [pc, #236]	@ (8006148 <HAL_ADC_ConfigChannel+0x874>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d125      	bne.n	80060ac <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006060:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006064:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d11f      	bne.n	80060ac <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a31      	ldr	r2, [pc, #196]	@ (8006138 <HAL_ADC_ConfigChannel+0x864>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d104      	bne.n	8006080 <HAL_ADC_ConfigChannel+0x7ac>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a34      	ldr	r2, [pc, #208]	@ (800614c <HAL_ADC_ConfigChannel+0x878>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d047      	beq.n	8006110 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006088:	d004      	beq.n	8006094 <HAL_ADC_ConfigChannel+0x7c0>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a2a      	ldr	r2, [pc, #168]	@ (8006138 <HAL_ADC_ConfigChannel+0x864>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d101      	bne.n	8006098 <HAL_ADC_ConfigChannel+0x7c4>
 8006094:	4a29      	ldr	r2, [pc, #164]	@ (800613c <HAL_ADC_ConfigChannel+0x868>)
 8006096:	e000      	b.n	800609a <HAL_ADC_ConfigChannel+0x7c6>
 8006098:	4a23      	ldr	r2, [pc, #140]	@ (8006128 <HAL_ADC_ConfigChannel+0x854>)
 800609a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800609e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060a2:	4619      	mov	r1, r3
 80060a4:	4610      	mov	r0, r2
 80060a6:	f7fe ff5c 	bl	8004f62 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80060aa:	e031      	b.n	8006110 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a27      	ldr	r2, [pc, #156]	@ (8006150 <HAL_ADC_ConfigChannel+0x87c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d12d      	bne.n	8006112 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80060b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d127      	bne.n	8006112 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006138 <HAL_ADC_ConfigChannel+0x864>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d022      	beq.n	8006112 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060d4:	d004      	beq.n	80060e0 <HAL_ADC_ConfigChannel+0x80c>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a17      	ldr	r2, [pc, #92]	@ (8006138 <HAL_ADC_ConfigChannel+0x864>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d101      	bne.n	80060e4 <HAL_ADC_ConfigChannel+0x810>
 80060e0:	4a16      	ldr	r2, [pc, #88]	@ (800613c <HAL_ADC_ConfigChannel+0x868>)
 80060e2:	e000      	b.n	80060e6 <HAL_ADC_ConfigChannel+0x812>
 80060e4:	4a10      	ldr	r2, [pc, #64]	@ (8006128 <HAL_ADC_ConfigChannel+0x854>)
 80060e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80060ee:	4619      	mov	r1, r3
 80060f0:	4610      	mov	r0, r2
 80060f2:	f7fe ff36 	bl	8004f62 <LL_ADC_SetCommonPathInternalCh>
 80060f6:	e00c      	b.n	8006112 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060fc:	f043 0220 	orr.w	r2, r3, #32
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800610a:	e002      	b.n	8006112 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800610c:	bf00      	nop
 800610e:	e000      	b.n	8006112 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006110:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800611a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800611e:	4618      	mov	r0, r3
 8006120:	37d8      	adds	r7, #216	@ 0xd8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	50000700 	.word	0x50000700
 800612c:	c3210000 	.word	0xc3210000
 8006130:	90c00010 	.word	0x90c00010
 8006134:	50000600 	.word	0x50000600
 8006138:	50000100 	.word	0x50000100
 800613c:	50000300 	.word	0x50000300
 8006140:	20000284 	.word	0x20000284
 8006144:	053e2d63 	.word	0x053e2d63
 8006148:	c7520000 	.word	0xc7520000
 800614c:	50000500 	.word	0x50000500
 8006150:	cb840000 	.word	0xcb840000

08006154 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800615c:	2300      	movs	r3, #0
 800615e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4618      	mov	r0, r3
 8006166:	f7ff f8b9 	bl	80052dc <LL_ADC_IsEnabled>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d176      	bne.n	800625e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	4b3c      	ldr	r3, [pc, #240]	@ (8006268 <ADC_Enable+0x114>)
 8006178:	4013      	ands	r3, r2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00d      	beq.n	800619a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006182:	f043 0210 	orr.w	r2, r3, #16
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800618e:	f043 0201 	orr.w	r2, r3, #1
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e062      	b.n	8006260 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7ff f888 	bl	80052b4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061ac:	d004      	beq.n	80061b8 <ADC_Enable+0x64>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a2e      	ldr	r2, [pc, #184]	@ (800626c <ADC_Enable+0x118>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d101      	bne.n	80061bc <ADC_Enable+0x68>
 80061b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006270 <ADC_Enable+0x11c>)
 80061ba:	e000      	b.n	80061be <ADC_Enable+0x6a>
 80061bc:	4b2d      	ldr	r3, [pc, #180]	@ (8006274 <ADC_Enable+0x120>)
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fe fee2 	bl	8004f88 <LL_ADC_GetCommonPathInternalCh>
 80061c4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80061c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d013      	beq.n	80061f6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80061ce:	4b2a      	ldr	r3, [pc, #168]	@ (8006278 <ADC_Enable+0x124>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	099b      	lsrs	r3, r3, #6
 80061d4:	4a29      	ldr	r2, [pc, #164]	@ (800627c <ADC_Enable+0x128>)
 80061d6:	fba2 2303 	umull	r2, r3, r2, r3
 80061da:	099b      	lsrs	r3, r3, #6
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	4613      	mov	r3, r2
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80061e8:	e002      	b.n	80061f0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	3b01      	subs	r3, #1
 80061ee:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1f9      	bne.n	80061ea <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80061f6:	f7fe fe73 	bl	8004ee0 <HAL_GetTick>
 80061fa:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80061fc:	e028      	b.n	8006250 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff f86a 	bl	80052dc <LL_ADC_IsEnabled>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d104      	bne.n	8006218 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff f84e 	bl	80052b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006218:	f7fe fe62 	bl	8004ee0 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d914      	bls.n	8006250 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b01      	cmp	r3, #1
 8006232:	d00d      	beq.n	8006250 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006238:	f043 0210 	orr.w	r2, r3, #16
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006244:	f043 0201 	orr.w	r2, r3, #1
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e007      	b.n	8006260 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b01      	cmp	r3, #1
 800625c:	d1cf      	bne.n	80061fe <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	8000003f 	.word	0x8000003f
 800626c:	50000100 	.word	0x50000100
 8006270:	50000300 	.word	0x50000300
 8006274:	50000700 	.word	0x50000700
 8006278:	20000284 	.word	0x20000284
 800627c:	053e2d63 	.word	0x053e2d63

08006280 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006292:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006296:	2b00      	cmp	r3, #0
 8006298:	d14b      	bne.n	8006332 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800629e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d021      	beq.n	80062f8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7fe ff11 	bl	80050e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d032      	beq.n	800632a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d12b      	bne.n	800632a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d11f      	bne.n	800632a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ee:	f043 0201 	orr.w	r2, r3, #1
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80062f6:	e018      	b.n	800632a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d111      	bne.n	800632a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800630a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006316:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d105      	bne.n	800632a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006322:	f043 0201 	orr.w	r2, r3, #1
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f7ff fab4 	bl	8005898 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006330:	e00e      	b.n	8006350 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006336:	f003 0310 	and.w	r3, r3, #16
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f7ff fabe 	bl	80058c0 <HAL_ADC_ErrorCallback>
}
 8006344:	e004      	b.n	8006350 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800634a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	4798      	blx	r3
}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006364:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f7ff faa0 	bl	80058ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800636c:	bf00      	nop
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006380:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006386:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006392:	f043 0204 	orr.w	r2, r3, #4
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f7ff fa90 	bl	80058c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80063a0:	bf00      	nop
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <LL_ADC_IsEnabled>:
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <LL_ADC_IsEnabled+0x18>
 80063bc:	2301      	movs	r3, #1
 80063be:	e000      	b.n	80063c2 <LL_ADC_IsEnabled+0x1a>
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <LL_ADC_REG_IsConversionOngoing>:
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 0304 	and.w	r3, r3, #4
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d101      	bne.n	80063e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e000      	b.n	80063e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80063f4:	b590      	push	{r4, r7, lr}
 80063f6:	b0a1      	sub	sp, #132	@ 0x84
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800640a:	2b01      	cmp	r3, #1
 800640c:	d101      	bne.n	8006412 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800640e:	2302      	movs	r3, #2
 8006410:	e0e7      	b.n	80065e2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800641a:	2300      	movs	r3, #0
 800641c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800641e:	2300      	movs	r3, #0
 8006420:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800642a:	d102      	bne.n	8006432 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800642c:	4b6f      	ldr	r3, [pc, #444]	@ (80065ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800642e:	60bb      	str	r3, [r7, #8]
 8006430:	e009      	b.n	8006446 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a6e      	ldr	r2, [pc, #440]	@ (80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d102      	bne.n	8006442 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800643c:	4b6d      	ldr	r3, [pc, #436]	@ (80065f4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800643e:	60bb      	str	r3, [r7, #8]
 8006440:	e001      	b.n	8006446 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006442:	2300      	movs	r3, #0
 8006444:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10b      	bne.n	8006464 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006450:	f043 0220 	orr.w	r2, r3, #32
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e0be      	b.n	80065e2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff ffb1 	bl	80063ce <LL_ADC_REG_IsConversionOngoing>
 800646c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4618      	mov	r0, r3
 8006474:	f7ff ffab 	bl	80063ce <LL_ADC_REG_IsConversionOngoing>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	f040 80a0 	bne.w	80065c0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006480:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006482:	2b00      	cmp	r3, #0
 8006484:	f040 809c 	bne.w	80065c0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006490:	d004      	beq.n	800649c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a55      	ldr	r2, [pc, #340]	@ (80065ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d101      	bne.n	80064a0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800649c:	4b56      	ldr	r3, [pc, #344]	@ (80065f8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800649e:	e000      	b.n	80064a2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80064a0:	4b56      	ldr	r3, [pc, #344]	@ (80065fc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80064a2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d04b      	beq.n	8006544 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80064ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	6859      	ldr	r1, [r3, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80064be:	035b      	lsls	r3, r3, #13
 80064c0:	430b      	orrs	r3, r1
 80064c2:	431a      	orrs	r2, r3
 80064c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064d0:	d004      	beq.n	80064dc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a45      	ldr	r2, [pc, #276]	@ (80065ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d10f      	bne.n	80064fc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80064dc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80064e0:	f7ff ff62 	bl	80063a8 <LL_ADC_IsEnabled>
 80064e4:	4604      	mov	r4, r0
 80064e6:	4841      	ldr	r0, [pc, #260]	@ (80065ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80064e8:	f7ff ff5e 	bl	80063a8 <LL_ADC_IsEnabled>
 80064ec:	4603      	mov	r3, r0
 80064ee:	4323      	orrs	r3, r4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	bf0c      	ite	eq
 80064f4:	2301      	moveq	r3, #1
 80064f6:	2300      	movne	r3, #0
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	e012      	b.n	8006522 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80064fc:	483c      	ldr	r0, [pc, #240]	@ (80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80064fe:	f7ff ff53 	bl	80063a8 <LL_ADC_IsEnabled>
 8006502:	4604      	mov	r4, r0
 8006504:	483b      	ldr	r0, [pc, #236]	@ (80065f4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006506:	f7ff ff4f 	bl	80063a8 <LL_ADC_IsEnabled>
 800650a:	4603      	mov	r3, r0
 800650c:	431c      	orrs	r4, r3
 800650e:	483c      	ldr	r0, [pc, #240]	@ (8006600 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006510:	f7ff ff4a 	bl	80063a8 <LL_ADC_IsEnabled>
 8006514:	4603      	mov	r3, r0
 8006516:	4323      	orrs	r3, r4
 8006518:	2b00      	cmp	r3, #0
 800651a:	bf0c      	ite	eq
 800651c:	2301      	moveq	r3, #1
 800651e:	2300      	movne	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d056      	beq.n	80065d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006526:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800652e:	f023 030f 	bic.w	r3, r3, #15
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	6811      	ldr	r1, [r2, #0]
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	6892      	ldr	r2, [r2, #8]
 800653a:	430a      	orrs	r2, r1
 800653c:	431a      	orrs	r2, r3
 800653e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006540:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006542:	e047      	b.n	80065d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006544:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800654c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800654e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006558:	d004      	beq.n	8006564 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a23      	ldr	r2, [pc, #140]	@ (80065ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d10f      	bne.n	8006584 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006564:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006568:	f7ff ff1e 	bl	80063a8 <LL_ADC_IsEnabled>
 800656c:	4604      	mov	r4, r0
 800656e:	481f      	ldr	r0, [pc, #124]	@ (80065ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006570:	f7ff ff1a 	bl	80063a8 <LL_ADC_IsEnabled>
 8006574:	4603      	mov	r3, r0
 8006576:	4323      	orrs	r3, r4
 8006578:	2b00      	cmp	r3, #0
 800657a:	bf0c      	ite	eq
 800657c:	2301      	moveq	r3, #1
 800657e:	2300      	movne	r3, #0
 8006580:	b2db      	uxtb	r3, r3
 8006582:	e012      	b.n	80065aa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006584:	481a      	ldr	r0, [pc, #104]	@ (80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006586:	f7ff ff0f 	bl	80063a8 <LL_ADC_IsEnabled>
 800658a:	4604      	mov	r4, r0
 800658c:	4819      	ldr	r0, [pc, #100]	@ (80065f4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800658e:	f7ff ff0b 	bl	80063a8 <LL_ADC_IsEnabled>
 8006592:	4603      	mov	r3, r0
 8006594:	431c      	orrs	r4, r3
 8006596:	481a      	ldr	r0, [pc, #104]	@ (8006600 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006598:	f7ff ff06 	bl	80063a8 <LL_ADC_IsEnabled>
 800659c:	4603      	mov	r3, r0
 800659e:	4323      	orrs	r3, r4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	bf0c      	ite	eq
 80065a4:	2301      	moveq	r3, #1
 80065a6:	2300      	movne	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d012      	beq.n	80065d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80065ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80065b6:	f023 030f 	bic.w	r3, r3, #15
 80065ba:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80065bc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80065be:	e009      	b.n	80065d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065c4:	f043 0220 	orr.w	r2, r3, #32
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80065d2:	e000      	b.n	80065d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80065d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80065de:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3784      	adds	r7, #132	@ 0x84
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd90      	pop	{r4, r7, pc}
 80065ea:	bf00      	nop
 80065ec:	50000100 	.word	0x50000100
 80065f0:	50000400 	.word	0x50000400
 80065f4:	50000500 	.word	0x50000500
 80065f8:	50000300 	.word	0x50000300
 80065fc:	50000700 	.word	0x50000700
 8006600:	50000600 	.word	0x50000600

08006604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006614:	4b0c      	ldr	r3, [pc, #48]	@ (8006648 <__NVIC_SetPriorityGrouping+0x44>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006620:	4013      	ands	r3, r2
 8006622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800662c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006636:	4a04      	ldr	r2, [pc, #16]	@ (8006648 <__NVIC_SetPriorityGrouping+0x44>)
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	60d3      	str	r3, [r2, #12]
}
 800663c:	bf00      	nop
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	e000ed00 	.word	0xe000ed00

0800664c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006650:	4b04      	ldr	r3, [pc, #16]	@ (8006664 <__NVIC_GetPriorityGrouping+0x18>)
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	0a1b      	lsrs	r3, r3, #8
 8006656:	f003 0307 	and.w	r3, r3, #7
}
 800665a:	4618      	mov	r0, r3
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	e000ed00 	.word	0xe000ed00

08006668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	4603      	mov	r3, r0
 8006670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006676:	2b00      	cmp	r3, #0
 8006678:	db0b      	blt.n	8006692 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800667a:	79fb      	ldrb	r3, [r7, #7]
 800667c:	f003 021f 	and.w	r2, r3, #31
 8006680:	4907      	ldr	r1, [pc, #28]	@ (80066a0 <__NVIC_EnableIRQ+0x38>)
 8006682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006686:	095b      	lsrs	r3, r3, #5
 8006688:	2001      	movs	r0, #1
 800668a:	fa00 f202 	lsl.w	r2, r0, r2
 800668e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	e000e100 	.word	0xe000e100

080066a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	4603      	mov	r3, r0
 80066ac:	6039      	str	r1, [r7, #0]
 80066ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	db0a      	blt.n	80066ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	490c      	ldr	r1, [pc, #48]	@ (80066f0 <__NVIC_SetPriority+0x4c>)
 80066be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c2:	0112      	lsls	r2, r2, #4
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	440b      	add	r3, r1
 80066c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066cc:	e00a      	b.n	80066e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	4908      	ldr	r1, [pc, #32]	@ (80066f4 <__NVIC_SetPriority+0x50>)
 80066d4:	79fb      	ldrb	r3, [r7, #7]
 80066d6:	f003 030f 	and.w	r3, r3, #15
 80066da:	3b04      	subs	r3, #4
 80066dc:	0112      	lsls	r2, r2, #4
 80066de:	b2d2      	uxtb	r2, r2
 80066e0:	440b      	add	r3, r1
 80066e2:	761a      	strb	r2, [r3, #24]
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	e000e100 	.word	0xe000e100
 80066f4:	e000ed00 	.word	0xe000ed00

080066f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b089      	sub	sp, #36	@ 0x24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	f1c3 0307 	rsb	r3, r3, #7
 8006712:	2b04      	cmp	r3, #4
 8006714:	bf28      	it	cs
 8006716:	2304      	movcs	r3, #4
 8006718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	3304      	adds	r3, #4
 800671e:	2b06      	cmp	r3, #6
 8006720:	d902      	bls.n	8006728 <NVIC_EncodePriority+0x30>
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	3b03      	subs	r3, #3
 8006726:	e000      	b.n	800672a <NVIC_EncodePriority+0x32>
 8006728:	2300      	movs	r3, #0
 800672a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800672c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	fa02 f303 	lsl.w	r3, r2, r3
 8006736:	43da      	mvns	r2, r3
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	401a      	ands	r2, r3
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006740:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	fa01 f303 	lsl.w	r3, r1, r3
 800674a:	43d9      	mvns	r1, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006750:	4313      	orrs	r3, r2
         );
}
 8006752:	4618      	mov	r0, r3
 8006754:	3724      	adds	r7, #36	@ 0x24
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
	...

08006760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3b01      	subs	r3, #1
 800676c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006770:	d301      	bcc.n	8006776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006772:	2301      	movs	r3, #1
 8006774:	e00f      	b.n	8006796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006776:	4a0a      	ldr	r2, [pc, #40]	@ (80067a0 <SysTick_Config+0x40>)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3b01      	subs	r3, #1
 800677c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800677e:	210f      	movs	r1, #15
 8006780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006784:	f7ff ff8e 	bl	80066a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006788:	4b05      	ldr	r3, [pc, #20]	@ (80067a0 <SysTick_Config+0x40>)
 800678a:	2200      	movs	r2, #0
 800678c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800678e:	4b04      	ldr	r3, [pc, #16]	@ (80067a0 <SysTick_Config+0x40>)
 8006790:	2207      	movs	r2, #7
 8006792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	e000e010 	.word	0xe000e010

080067a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7ff ff29 	bl	8006604 <__NVIC_SetPriorityGrouping>
}
 80067b2:	bf00      	nop
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b086      	sub	sp, #24
 80067be:	af00      	add	r7, sp, #0
 80067c0:	4603      	mov	r3, r0
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
 80067c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80067c8:	f7ff ff40 	bl	800664c <__NVIC_GetPriorityGrouping>
 80067cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	68b9      	ldr	r1, [r7, #8]
 80067d2:	6978      	ldr	r0, [r7, #20]
 80067d4:	f7ff ff90 	bl	80066f8 <NVIC_EncodePriority>
 80067d8:	4602      	mov	r2, r0
 80067da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067de:	4611      	mov	r1, r2
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff ff5f 	bl	80066a4 <__NVIC_SetPriority>
}
 80067e6:	bf00      	nop
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b082      	sub	sp, #8
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	4603      	mov	r3, r0
 80067f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7ff ff33 	bl	8006668 <__NVIC_EnableIRQ>
}
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b082      	sub	sp, #8
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7ff ffa4 	bl	8006760 <SysTick_Config>
 8006818:	4603      	mov	r3, r0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
	...

08006824 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e08d      	b.n	8006952 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	4b47      	ldr	r3, [pc, #284]	@ (800695c <HAL_DMA_Init+0x138>)
 800683e:	429a      	cmp	r2, r3
 8006840:	d80f      	bhi.n	8006862 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	4b45      	ldr	r3, [pc, #276]	@ (8006960 <HAL_DMA_Init+0x13c>)
 800684a:	4413      	add	r3, r2
 800684c:	4a45      	ldr	r2, [pc, #276]	@ (8006964 <HAL_DMA_Init+0x140>)
 800684e:	fba2 2303 	umull	r2, r3, r2, r3
 8006852:	091b      	lsrs	r3, r3, #4
 8006854:	009a      	lsls	r2, r3, #2
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a42      	ldr	r2, [pc, #264]	@ (8006968 <HAL_DMA_Init+0x144>)
 800685e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006860:	e00e      	b.n	8006880 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	4b40      	ldr	r3, [pc, #256]	@ (800696c <HAL_DMA_Init+0x148>)
 800686a:	4413      	add	r3, r2
 800686c:	4a3d      	ldr	r2, [pc, #244]	@ (8006964 <HAL_DMA_Init+0x140>)
 800686e:	fba2 2303 	umull	r2, r3, r2, r3
 8006872:	091b      	lsrs	r3, r3, #4
 8006874:	009a      	lsls	r2, r3, #2
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a3c      	ldr	r2, [pc, #240]	@ (8006970 <HAL_DMA_Init+0x14c>)
 800687e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800689a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80068a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fa76 	bl	8006dc4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068e0:	d102      	bne.n	80068e8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80068fc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d010      	beq.n	8006928 <HAL_DMA_Init+0x104>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2b04      	cmp	r3, #4
 800690c:	d80c      	bhi.n	8006928 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fa96 	bl	8006e40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006924:	605a      	str	r2, [r3, #4]
 8006926:	e008      	b.n	800693a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	40020407 	.word	0x40020407
 8006960:	bffdfff8 	.word	0xbffdfff8
 8006964:	cccccccd 	.word	0xcccccccd
 8006968:	40020000 	.word	0x40020000
 800696c:	bffdfbf8 	.word	0xbffdfbf8
 8006970:	40020400 	.word	0x40020400

08006974 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
 8006980:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_DMA_Start_IT+0x20>
 8006990:	2302      	movs	r3, #2
 8006992:	e066      	b.n	8006a62 <HAL_DMA_Start_IT+0xee>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d155      	bne.n	8006a54 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0201 	bic.w	r2, r2, #1
 80069c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	68b9      	ldr	r1, [r7, #8]
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 f9bb 	bl	8006d48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d008      	beq.n	80069ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f042 020e 	orr.w	r2, r2, #14
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	e00f      	b.n	8006a0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0204 	bic.w	r2, r2, #4
 80069fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 020a 	orr.w	r2, r2, #10
 8006a0a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d007      	beq.n	8006a2a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a28:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d007      	beq.n	8006a42 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a40:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f042 0201 	orr.w	r2, r2, #1
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	e005      	b.n	8006a60 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b085      	sub	sp, #20
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d005      	beq.n	8006a8e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2204      	movs	r2, #4
 8006a86:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	73fb      	strb	r3, [r7, #15]
 8006a8c:	e037      	b.n	8006afe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 020e 	bic.w	r2, r2, #14
 8006a9c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006aac:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0201 	bic.w	r2, r2, #1
 8006abc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ac2:	f003 021f 	and.w	r2, r3, #31
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aca:	2101      	movs	r1, #1
 8006acc:	fa01 f202 	lsl.w	r2, r1, r2
 8006ad0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006ada:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00c      	beq.n	8006afe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006af2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006afc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d00d      	beq.n	8006b50 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2204      	movs	r2, #4
 8006b38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	73fb      	strb	r3, [r7, #15]
 8006b4e:	e047      	b.n	8006be0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 020e 	bic.w	r2, r2, #14
 8006b5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0201 	bic.w	r2, r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b84:	f003 021f 	and.w	r2, r3, #31
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8006b92:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b9c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00c      	beq.n	8006bc0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006bb4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006bbe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d003      	beq.n	8006be0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	4798      	blx	r3
    }
  }
  return status;
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b084      	sub	sp, #16
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c06:	f003 031f 	and.w	r3, r3, #31
 8006c0a:	2204      	movs	r2, #4
 8006c0c:	409a      	lsls	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4013      	ands	r3, r2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d026      	beq.n	8006c64 <HAL_DMA_IRQHandler+0x7a>
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d021      	beq.n	8006c64 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0320 	and.w	r3, r3, #32
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d107      	bne.n	8006c3e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 0204 	bic.w	r2, r2, #4
 8006c3c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c42:	f003 021f 	and.w	r2, r3, #31
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4a:	2104      	movs	r1, #4
 8006c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8006c50:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d071      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006c62:	e06c      	b.n	8006d3e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c68:	f003 031f 	and.w	r3, r3, #31
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	409a      	lsls	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4013      	ands	r3, r2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d02e      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d029      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0320 	and.w	r3, r3, #32
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10b      	bne.n	8006ca8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 020a 	bic.w	r2, r2, #10
 8006c9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cac:	f003 021f 	and.w	r2, r3, #31
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb4:	2102      	movs	r1, #2
 8006cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8006cba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d038      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006cd4:	e033      	b.n	8006d3e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cda:	f003 031f 	and.w	r3, r3, #31
 8006cde:	2208      	movs	r2, #8
 8006ce0:	409a      	lsls	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d02a      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f003 0308 	and.w	r3, r3, #8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d025      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 020e 	bic.w	r2, r2, #14
 8006d02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d08:	f003 021f 	and.w	r2, r3, #31
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d10:	2101      	movs	r1, #1
 8006d12:	fa01 f202 	lsl.w	r2, r1, r2
 8006d16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d004      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006d3e:	bf00      	nop
 8006d40:	bf00      	nop
}
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
 8006d54:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006d5e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d004      	beq.n	8006d72 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006d70:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d76:	f003 021f 	and.w	r2, r3, #31
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7e:	2101      	movs	r1, #1
 8006d80:	fa01 f202 	lsl.w	r2, r1, r2
 8006d84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	2b10      	cmp	r3, #16
 8006d94:	d108      	bne.n	8006da8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006da6:	e007      	b.n	8006db8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	60da      	str	r2, [r3, #12]
}
 8006db8:	bf00      	nop
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4b16      	ldr	r3, [pc, #88]	@ (8006e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d802      	bhi.n	8006dde <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006dd8:	4b15      	ldr	r3, [pc, #84]	@ (8006e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	e001      	b.n	8006de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006dde:	4b15      	ldr	r3, [pc, #84]	@ (8006e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006de0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	3b08      	subs	r3, #8
 8006dee:	4a12      	ldr	r2, [pc, #72]	@ (8006e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006df0:	fba2 2303 	umull	r2, r3, r2, r3
 8006df4:	091b      	lsrs	r3, r3, #4
 8006df6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dfc:	089b      	lsrs	r3, r3, #2
 8006dfe:	009a      	lsls	r2, r3, #2
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	4413      	add	r3, r2
 8006e04:	461a      	mov	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8006e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006e0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f003 031f 	and.w	r3, r3, #31
 8006e16:	2201      	movs	r2, #1
 8006e18:	409a      	lsls	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006e1e:	bf00      	nop
 8006e20:	371c      	adds	r7, #28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	40020407 	.word	0x40020407
 8006e30:	40020800 	.word	0x40020800
 8006e34:	40020820 	.word	0x40020820
 8006e38:	cccccccd 	.word	0xcccccccd
 8006e3c:	40020880 	.word	0x40020880

08006e40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4b0b      	ldr	r3, [pc, #44]	@ (8006e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	461a      	mov	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a08      	ldr	r2, [pc, #32]	@ (8006e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006e62:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	f003 031f 	and.w	r3, r3, #31
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	409a      	lsls	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006e74:	bf00      	nop
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	1000823f 	.word	0x1000823f
 8006e84:	40020940 	.word	0x40020940

08006e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006e96:	e15a      	b.n	800714e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f000 814c 	beq.w	8007148 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f003 0303 	and.w	r3, r3, #3
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d005      	beq.n	8006ec8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d130      	bne.n	8006f2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	2203      	movs	r2, #3
 8006ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed8:	43db      	mvns	r3, r3
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	4013      	ands	r3, r2
 8006ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68da      	ldr	r2, [r3, #12]
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006efe:	2201      	movs	r2, #1
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	fa02 f303 	lsl.w	r3, r2, r3
 8006f06:	43db      	mvns	r3, r3
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	091b      	lsrs	r3, r3, #4
 8006f14:	f003 0201 	and.w	r2, r3, #1
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d017      	beq.n	8006f66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	005b      	lsls	r3, r3, #1
 8006f40:	2203      	movs	r2, #3
 8006f42:	fa02 f303 	lsl.w	r3, r2, r3
 8006f46:	43db      	mvns	r3, r3
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	689a      	ldr	r2, [r3, #8]
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d123      	bne.n	8006fba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	08da      	lsrs	r2, r3, #3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	3208      	adds	r2, #8
 8006f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f003 0307 	and.w	r3, r3, #7
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	220f      	movs	r2, #15
 8006f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8e:	43db      	mvns	r3, r3
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	4013      	ands	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	691a      	ldr	r2, [r3, #16]
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	08da      	lsrs	r2, r3, #3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3208      	adds	r2, #8
 8006fb4:	6939      	ldr	r1, [r7, #16]
 8006fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	2203      	movs	r2, #3
 8006fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fca:	43db      	mvns	r3, r3
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f003 0203 	and.w	r2, r3, #3
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 80a6 	beq.w	8007148 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ffc:	4b5b      	ldr	r3, [pc, #364]	@ (800716c <HAL_GPIO_Init+0x2e4>)
 8006ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007000:	4a5a      	ldr	r2, [pc, #360]	@ (800716c <HAL_GPIO_Init+0x2e4>)
 8007002:	f043 0301 	orr.w	r3, r3, #1
 8007006:	6613      	str	r3, [r2, #96]	@ 0x60
 8007008:	4b58      	ldr	r3, [pc, #352]	@ (800716c <HAL_GPIO_Init+0x2e4>)
 800700a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	60bb      	str	r3, [r7, #8]
 8007012:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007014:	4a56      	ldr	r2, [pc, #344]	@ (8007170 <HAL_GPIO_Init+0x2e8>)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	089b      	lsrs	r3, r3, #2
 800701a:	3302      	adds	r3, #2
 800701c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f003 0303 	and.w	r3, r3, #3
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	220f      	movs	r2, #15
 800702c:	fa02 f303 	lsl.w	r3, r2, r3
 8007030:	43db      	mvns	r3, r3
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	4013      	ands	r3, r2
 8007036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800703e:	d01f      	beq.n	8007080 <HAL_GPIO_Init+0x1f8>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a4c      	ldr	r2, [pc, #304]	@ (8007174 <HAL_GPIO_Init+0x2ec>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d019      	beq.n	800707c <HAL_GPIO_Init+0x1f4>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a4b      	ldr	r2, [pc, #300]	@ (8007178 <HAL_GPIO_Init+0x2f0>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d013      	beq.n	8007078 <HAL_GPIO_Init+0x1f0>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a4a      	ldr	r2, [pc, #296]	@ (800717c <HAL_GPIO_Init+0x2f4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00d      	beq.n	8007074 <HAL_GPIO_Init+0x1ec>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a49      	ldr	r2, [pc, #292]	@ (8007180 <HAL_GPIO_Init+0x2f8>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d007      	beq.n	8007070 <HAL_GPIO_Init+0x1e8>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a48      	ldr	r2, [pc, #288]	@ (8007184 <HAL_GPIO_Init+0x2fc>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d101      	bne.n	800706c <HAL_GPIO_Init+0x1e4>
 8007068:	2305      	movs	r3, #5
 800706a:	e00a      	b.n	8007082 <HAL_GPIO_Init+0x1fa>
 800706c:	2306      	movs	r3, #6
 800706e:	e008      	b.n	8007082 <HAL_GPIO_Init+0x1fa>
 8007070:	2304      	movs	r3, #4
 8007072:	e006      	b.n	8007082 <HAL_GPIO_Init+0x1fa>
 8007074:	2303      	movs	r3, #3
 8007076:	e004      	b.n	8007082 <HAL_GPIO_Init+0x1fa>
 8007078:	2302      	movs	r3, #2
 800707a:	e002      	b.n	8007082 <HAL_GPIO_Init+0x1fa>
 800707c:	2301      	movs	r3, #1
 800707e:	e000      	b.n	8007082 <HAL_GPIO_Init+0x1fa>
 8007080:	2300      	movs	r3, #0
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	f002 0203 	and.w	r2, r2, #3
 8007088:	0092      	lsls	r2, r2, #2
 800708a:	4093      	lsls	r3, r2
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	4313      	orrs	r3, r2
 8007090:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007092:	4937      	ldr	r1, [pc, #220]	@ (8007170 <HAL_GPIO_Init+0x2e8>)
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	089b      	lsrs	r3, r3, #2
 8007098:	3302      	adds	r3, #2
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80070a0:	4b39      	ldr	r3, [pc, #228]	@ (8007188 <HAL_GPIO_Init+0x300>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	43db      	mvns	r3, r3
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	4013      	ands	r3, r2
 80070ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80070c4:	4a30      	ldr	r2, [pc, #192]	@ (8007188 <HAL_GPIO_Init+0x300>)
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80070ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007188 <HAL_GPIO_Init+0x300>)
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	43db      	mvns	r3, r3
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	4013      	ands	r3, r2
 80070d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80070ee:	4a26      	ldr	r2, [pc, #152]	@ (8007188 <HAL_GPIO_Init+0x300>)
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80070f4:	4b24      	ldr	r3, [pc, #144]	@ (8007188 <HAL_GPIO_Init+0x300>)
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	43db      	mvns	r3, r3
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	4013      	ands	r3, r2
 8007102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4313      	orrs	r3, r2
 8007116:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007118:	4a1b      	ldr	r2, [pc, #108]	@ (8007188 <HAL_GPIO_Init+0x300>)
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800711e:	4b1a      	ldr	r3, [pc, #104]	@ (8007188 <HAL_GPIO_Init+0x300>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	43db      	mvns	r3, r3
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	4013      	ands	r3, r2
 800712c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007142:	4a11      	ldr	r2, [pc, #68]	@ (8007188 <HAL_GPIO_Init+0x300>)
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	3301      	adds	r3, #1
 800714c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	fa22 f303 	lsr.w	r3, r2, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	f47f ae9d 	bne.w	8006e98 <HAL_GPIO_Init+0x10>
  }
}
 800715e:	bf00      	nop
 8007160:	bf00      	nop
 8007162:	371c      	adds	r7, #28
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	40021000 	.word	0x40021000
 8007170:	40010000 	.word	0x40010000
 8007174:	48000400 	.word	0x48000400
 8007178:	48000800 	.word	0x48000800
 800717c:	48000c00 	.word	0x48000c00
 8007180:	48001000 	.word	0x48001000
 8007184:	48001400 	.word	0x48001400
 8007188:	40010400 	.word	0x40010400

0800718c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	460b      	mov	r3, r1
 8007196:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	691a      	ldr	r2, [r3, #16]
 800719c:	887b      	ldrh	r3, [r7, #2]
 800719e:	4013      	ands	r3, r2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80071a4:	2301      	movs	r3, #1
 80071a6:	73fb      	strb	r3, [r7, #15]
 80071a8:	e001      	b.n	80071ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80071aa:	2300      	movs	r3, #0
 80071ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	460b      	mov	r3, r1
 80071c6:	807b      	strh	r3, [r7, #2]
 80071c8:	4613      	mov	r3, r2
 80071ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80071cc:	787b      	ldrb	r3, [r7, #1]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d003      	beq.n	80071da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80071d2:	887a      	ldrh	r2, [r7, #2]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80071d8:	e002      	b.n	80071e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80071da:	887a      	ldrh	r2, [r7, #2]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	4603      	mov	r3, r0
 80071f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80071f6:	4b08      	ldr	r3, [pc, #32]	@ (8007218 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80071f8:	695a      	ldr	r2, [r3, #20]
 80071fa:	88fb      	ldrh	r3, [r7, #6]
 80071fc:	4013      	ands	r3, r2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d006      	beq.n	8007210 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007202:	4a05      	ldr	r2, [pc, #20]	@ (8007218 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007204:	88fb      	ldrh	r3, [r7, #6]
 8007206:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007208:	88fb      	ldrh	r3, [r7, #6]
 800720a:	4618      	mov	r0, r3
 800720c:	f7fb fdce 	bl	8002dac <HAL_GPIO_EXTI_Callback>
  }
}
 8007210:	bf00      	nop
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	40010400 	.word	0x40010400

0800721c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d141      	bne.n	80072ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800722a:	4b4b      	ldr	r3, [pc, #300]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007236:	d131      	bne.n	800729c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007238:	4b47      	ldr	r3, [pc, #284]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800723a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800723e:	4a46      	ldr	r2, [pc, #280]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007244:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007248:	4b43      	ldr	r3, [pc, #268]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007250:	4a41      	ldr	r2, [pc, #260]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007252:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007256:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007258:	4b40      	ldr	r3, [pc, #256]	@ (800735c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2232      	movs	r2, #50	@ 0x32
 800725e:	fb02 f303 	mul.w	r3, r2, r3
 8007262:	4a3f      	ldr	r2, [pc, #252]	@ (8007360 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007264:	fba2 2303 	umull	r2, r3, r2, r3
 8007268:	0c9b      	lsrs	r3, r3, #18
 800726a:	3301      	adds	r3, #1
 800726c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800726e:	e002      	b.n	8007276 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	3b01      	subs	r3, #1
 8007274:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007276:	4b38      	ldr	r3, [pc, #224]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800727e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007282:	d102      	bne.n	800728a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1f2      	bne.n	8007270 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800728a:	4b33      	ldr	r3, [pc, #204]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007296:	d158      	bne.n	800734a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e057      	b.n	800734c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800729c:	4b2e      	ldr	r3, [pc, #184]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800729e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072a2:	4a2d      	ldr	r2, [pc, #180]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80072ac:	e04d      	b.n	800734a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072b4:	d141      	bne.n	800733a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80072b6:	4b28      	ldr	r3, [pc, #160]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80072be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072c2:	d131      	bne.n	8007328 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072c4:	4b24      	ldr	r3, [pc, #144]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072ca:	4a23      	ldr	r2, [pc, #140]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80072d4:	4b20      	ldr	r3, [pc, #128]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80072dc:	4a1e      	ldr	r2, [pc, #120]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80072e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80072e4:	4b1d      	ldr	r3, [pc, #116]	@ (800735c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2232      	movs	r2, #50	@ 0x32
 80072ea:	fb02 f303 	mul.w	r3, r2, r3
 80072ee:	4a1c      	ldr	r2, [pc, #112]	@ (8007360 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80072f0:	fba2 2303 	umull	r2, r3, r2, r3
 80072f4:	0c9b      	lsrs	r3, r3, #18
 80072f6:	3301      	adds	r3, #1
 80072f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072fa:	e002      	b.n	8007302 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	3b01      	subs	r3, #1
 8007300:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007302:	4b15      	ldr	r3, [pc, #84]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800730a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800730e:	d102      	bne.n	8007316 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1f2      	bne.n	80072fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007316:	4b10      	ldr	r3, [pc, #64]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800731e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007322:	d112      	bne.n	800734a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e011      	b.n	800734c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007328:	4b0b      	ldr	r3, [pc, #44]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800732a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800732e:	4a0a      	ldr	r2, [pc, #40]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007334:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007338:	e007      	b.n	800734a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800733a:	4b07      	ldr	r3, [pc, #28]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007342:	4a05      	ldr	r2, [pc, #20]	@ (8007358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007344:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007348:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	40007000 	.word	0x40007000
 800735c:	20000284 	.word	0x20000284
 8007360:	431bde83 	.word	0x431bde83

08007364 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007368:	4b05      	ldr	r3, [pc, #20]	@ (8007380 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	4a04      	ldr	r2, [pc, #16]	@ (8007380 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800736e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007372:	6093      	str	r3, [r2, #8]
}
 8007374:	bf00      	nop
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	40007000 	.word	0x40007000

08007384 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b088      	sub	sp, #32
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e2fe      	b.n	8007994 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d075      	beq.n	800748e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073a2:	4b97      	ldr	r3, [pc, #604]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f003 030c 	and.w	r3, r3, #12
 80073aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073ac:	4b94      	ldr	r3, [pc, #592]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f003 0303 	and.w	r3, r3, #3
 80073b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	2b0c      	cmp	r3, #12
 80073ba:	d102      	bne.n	80073c2 <HAL_RCC_OscConfig+0x3e>
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d002      	beq.n	80073c8 <HAL_RCC_OscConfig+0x44>
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d10b      	bne.n	80073e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073c8:	4b8d      	ldr	r3, [pc, #564]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d05b      	beq.n	800748c <HAL_RCC_OscConfig+0x108>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d157      	bne.n	800748c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e2d9      	b.n	8007994 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073e8:	d106      	bne.n	80073f8 <HAL_RCC_OscConfig+0x74>
 80073ea:	4b85      	ldr	r3, [pc, #532]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a84      	ldr	r2, [pc, #528]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 80073f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073f4:	6013      	str	r3, [r2, #0]
 80073f6:	e01d      	b.n	8007434 <HAL_RCC_OscConfig+0xb0>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007400:	d10c      	bne.n	800741c <HAL_RCC_OscConfig+0x98>
 8007402:	4b7f      	ldr	r3, [pc, #508]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a7e      	ldr	r2, [pc, #504]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 8007408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800740c:	6013      	str	r3, [r2, #0]
 800740e:	4b7c      	ldr	r3, [pc, #496]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a7b      	ldr	r2, [pc, #492]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 8007414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007418:	6013      	str	r3, [r2, #0]
 800741a:	e00b      	b.n	8007434 <HAL_RCC_OscConfig+0xb0>
 800741c:	4b78      	ldr	r3, [pc, #480]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a77      	ldr	r2, [pc, #476]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 8007422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	4b75      	ldr	r3, [pc, #468]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a74      	ldr	r2, [pc, #464]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 800742e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d013      	beq.n	8007464 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800743c:	f7fd fd50 	bl	8004ee0 <HAL_GetTick>
 8007440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007442:	e008      	b.n	8007456 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007444:	f7fd fd4c 	bl	8004ee0 <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b64      	cmp	r3, #100	@ 0x64
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e29e      	b.n	8007994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007456:	4b6a      	ldr	r3, [pc, #424]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0f0      	beq.n	8007444 <HAL_RCC_OscConfig+0xc0>
 8007462:	e014      	b.n	800748e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007464:	f7fd fd3c 	bl	8004ee0 <HAL_GetTick>
 8007468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800746a:	e008      	b.n	800747e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800746c:	f7fd fd38 	bl	8004ee0 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b64      	cmp	r3, #100	@ 0x64
 8007478:	d901      	bls.n	800747e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e28a      	b.n	8007994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800747e:	4b60      	ldr	r3, [pc, #384]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1f0      	bne.n	800746c <HAL_RCC_OscConfig+0xe8>
 800748a:	e000      	b.n	800748e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800748c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d075      	beq.n	8007586 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800749a:	4b59      	ldr	r3, [pc, #356]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f003 030c 	and.w	r3, r3, #12
 80074a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074a4:	4b56      	ldr	r3, [pc, #344]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f003 0303 	and.w	r3, r3, #3
 80074ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	2b0c      	cmp	r3, #12
 80074b2:	d102      	bne.n	80074ba <HAL_RCC_OscConfig+0x136>
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d002      	beq.n	80074c0 <HAL_RCC_OscConfig+0x13c>
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2b04      	cmp	r3, #4
 80074be:	d11f      	bne.n	8007500 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074c0:	4b4f      	ldr	r3, [pc, #316]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d005      	beq.n	80074d8 <HAL_RCC_OscConfig+0x154>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e25d      	b.n	8007994 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074d8:	4b49      	ldr	r3, [pc, #292]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	061b      	lsls	r3, r3, #24
 80074e6:	4946      	ldr	r1, [pc, #280]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80074ec:	4b45      	ldr	r3, [pc, #276]	@ (8007604 <HAL_RCC_OscConfig+0x280>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fd fca9 	bl	8004e48 <HAL_InitTick>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d043      	beq.n	8007584 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e249      	b.n	8007994 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d023      	beq.n	8007550 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007508:	4b3d      	ldr	r3, [pc, #244]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a3c      	ldr	r2, [pc, #240]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 800750e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007514:	f7fd fce4 	bl	8004ee0 <HAL_GetTick>
 8007518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800751a:	e008      	b.n	800752e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800751c:	f7fd fce0 	bl	8004ee0 <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	2b02      	cmp	r3, #2
 8007528:	d901      	bls.n	800752e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e232      	b.n	8007994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800752e:	4b34      	ldr	r3, [pc, #208]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0f0      	beq.n	800751c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800753a:	4b31      	ldr	r3, [pc, #196]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	061b      	lsls	r3, r3, #24
 8007548:	492d      	ldr	r1, [pc, #180]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 800754a:	4313      	orrs	r3, r2
 800754c:	604b      	str	r3, [r1, #4]
 800754e:	e01a      	b.n	8007586 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007550:	4b2b      	ldr	r3, [pc, #172]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a2a      	ldr	r2, [pc, #168]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 8007556:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800755a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800755c:	f7fd fcc0 	bl	8004ee0 <HAL_GetTick>
 8007560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007562:	e008      	b.n	8007576 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007564:	f7fd fcbc 	bl	8004ee0 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b02      	cmp	r3, #2
 8007570:	d901      	bls.n	8007576 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e20e      	b.n	8007994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007576:	4b22      	ldr	r3, [pc, #136]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1f0      	bne.n	8007564 <HAL_RCC_OscConfig+0x1e0>
 8007582:	e000      	b.n	8007586 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007584:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0308 	and.w	r3, r3, #8
 800758e:	2b00      	cmp	r3, #0
 8007590:	d041      	beq.n	8007616 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d01c      	beq.n	80075d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800759a:	4b19      	ldr	r3, [pc, #100]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 800759c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075a0:	4a17      	ldr	r2, [pc, #92]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 80075a2:	f043 0301 	orr.w	r3, r3, #1
 80075a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075aa:	f7fd fc99 	bl	8004ee0 <HAL_GetTick>
 80075ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075b0:	e008      	b.n	80075c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075b2:	f7fd fc95 	bl	8004ee0 <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d901      	bls.n	80075c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e1e7      	b.n	8007994 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 80075c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075ca:	f003 0302 	and.w	r3, r3, #2
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d0ef      	beq.n	80075b2 <HAL_RCC_OscConfig+0x22e>
 80075d2:	e020      	b.n	8007616 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 80075d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075da:	4a09      	ldr	r2, [pc, #36]	@ (8007600 <HAL_RCC_OscConfig+0x27c>)
 80075dc:	f023 0301 	bic.w	r3, r3, #1
 80075e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075e4:	f7fd fc7c 	bl	8004ee0 <HAL_GetTick>
 80075e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075ea:	e00d      	b.n	8007608 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075ec:	f7fd fc78 	bl	8004ee0 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d906      	bls.n	8007608 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e1ca      	b.n	8007994 <HAL_RCC_OscConfig+0x610>
 80075fe:	bf00      	nop
 8007600:	40021000 	.word	0x40021000
 8007604:	20000288 	.word	0x20000288
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007608:	4b8c      	ldr	r3, [pc, #560]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 800760a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1ea      	bne.n	80075ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0304 	and.w	r3, r3, #4
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 80a6 	beq.w	8007770 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007624:	2300      	movs	r3, #0
 8007626:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007628:	4b84      	ldr	r3, [pc, #528]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 800762a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800762c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <HAL_RCC_OscConfig+0x2b4>
 8007634:	2301      	movs	r3, #1
 8007636:	e000      	b.n	800763a <HAL_RCC_OscConfig+0x2b6>
 8007638:	2300      	movs	r3, #0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00d      	beq.n	800765a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800763e:	4b7f      	ldr	r3, [pc, #508]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 8007640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007642:	4a7e      	ldr	r2, [pc, #504]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 8007644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007648:	6593      	str	r3, [r2, #88]	@ 0x58
 800764a:	4b7c      	ldr	r3, [pc, #496]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 800764c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800764e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007656:	2301      	movs	r3, #1
 8007658:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800765a:	4b79      	ldr	r3, [pc, #484]	@ (8007840 <HAL_RCC_OscConfig+0x4bc>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007662:	2b00      	cmp	r3, #0
 8007664:	d118      	bne.n	8007698 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007666:	4b76      	ldr	r3, [pc, #472]	@ (8007840 <HAL_RCC_OscConfig+0x4bc>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a75      	ldr	r2, [pc, #468]	@ (8007840 <HAL_RCC_OscConfig+0x4bc>)
 800766c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007672:	f7fd fc35 	bl	8004ee0 <HAL_GetTick>
 8007676:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007678:	e008      	b.n	800768c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800767a:	f7fd fc31 	bl	8004ee0 <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	2b02      	cmp	r3, #2
 8007686:	d901      	bls.n	800768c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e183      	b.n	8007994 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800768c:	4b6c      	ldr	r3, [pc, #432]	@ (8007840 <HAL_RCC_OscConfig+0x4bc>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007694:	2b00      	cmp	r3, #0
 8007696:	d0f0      	beq.n	800767a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d108      	bne.n	80076b2 <HAL_RCC_OscConfig+0x32e>
 80076a0:	4b66      	ldr	r3, [pc, #408]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 80076a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076a6:	4a65      	ldr	r2, [pc, #404]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 80076a8:	f043 0301 	orr.w	r3, r3, #1
 80076ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076b0:	e024      	b.n	80076fc <HAL_RCC_OscConfig+0x378>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	2b05      	cmp	r3, #5
 80076b8:	d110      	bne.n	80076dc <HAL_RCC_OscConfig+0x358>
 80076ba:	4b60      	ldr	r3, [pc, #384]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 80076bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076c0:	4a5e      	ldr	r2, [pc, #376]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 80076c2:	f043 0304 	orr.w	r3, r3, #4
 80076c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076ca:	4b5c      	ldr	r3, [pc, #368]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 80076cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076d0:	4a5a      	ldr	r2, [pc, #360]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 80076d2:	f043 0301 	orr.w	r3, r3, #1
 80076d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076da:	e00f      	b.n	80076fc <HAL_RCC_OscConfig+0x378>
 80076dc:	4b57      	ldr	r3, [pc, #348]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 80076de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076e2:	4a56      	ldr	r2, [pc, #344]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 80076e4:	f023 0301 	bic.w	r3, r3, #1
 80076e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076ec:	4b53      	ldr	r3, [pc, #332]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 80076ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076f2:	4a52      	ldr	r2, [pc, #328]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 80076f4:	f023 0304 	bic.w	r3, r3, #4
 80076f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d016      	beq.n	8007732 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007704:	f7fd fbec 	bl	8004ee0 <HAL_GetTick>
 8007708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800770a:	e00a      	b.n	8007722 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800770c:	f7fd fbe8 	bl	8004ee0 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800771a:	4293      	cmp	r3, r2
 800771c:	d901      	bls.n	8007722 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e138      	b.n	8007994 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007722:	4b46      	ldr	r3, [pc, #280]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 8007724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007728:	f003 0302 	and.w	r3, r3, #2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0ed      	beq.n	800770c <HAL_RCC_OscConfig+0x388>
 8007730:	e015      	b.n	800775e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007732:	f7fd fbd5 	bl	8004ee0 <HAL_GetTick>
 8007736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007738:	e00a      	b.n	8007750 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800773a:	f7fd fbd1 	bl	8004ee0 <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007748:	4293      	cmp	r3, r2
 800774a:	d901      	bls.n	8007750 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e121      	b.n	8007994 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007750:	4b3a      	ldr	r3, [pc, #232]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 8007752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1ed      	bne.n	800773a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800775e:	7ffb      	ldrb	r3, [r7, #31]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d105      	bne.n	8007770 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007764:	4b35      	ldr	r3, [pc, #212]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 8007766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007768:	4a34      	ldr	r2, [pc, #208]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 800776a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800776e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0320 	and.w	r3, r3, #32
 8007778:	2b00      	cmp	r3, #0
 800777a:	d03c      	beq.n	80077f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d01c      	beq.n	80077be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007784:	4b2d      	ldr	r3, [pc, #180]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 8007786:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800778a:	4a2c      	ldr	r2, [pc, #176]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 800778c:	f043 0301 	orr.w	r3, r3, #1
 8007790:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007794:	f7fd fba4 	bl	8004ee0 <HAL_GetTick>
 8007798:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800779a:	e008      	b.n	80077ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800779c:	f7fd fba0 	bl	8004ee0 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d901      	bls.n	80077ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e0f2      	b.n	8007994 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80077ae:	4b23      	ldr	r3, [pc, #140]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 80077b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d0ef      	beq.n	800779c <HAL_RCC_OscConfig+0x418>
 80077bc:	e01b      	b.n	80077f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80077be:	4b1f      	ldr	r3, [pc, #124]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 80077c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077c4:	4a1d      	ldr	r2, [pc, #116]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 80077c6:	f023 0301 	bic.w	r3, r3, #1
 80077ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ce:	f7fd fb87 	bl	8004ee0 <HAL_GetTick>
 80077d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077d4:	e008      	b.n	80077e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077d6:	f7fd fb83 	bl	8004ee0 <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d901      	bls.n	80077e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e0d5      	b.n	8007994 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077e8:	4b14      	ldr	r3, [pc, #80]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 80077ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1ef      	bne.n	80077d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	69db      	ldr	r3, [r3, #28]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 80c9 	beq.w	8007992 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007800:	4b0e      	ldr	r3, [pc, #56]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f003 030c 	and.w	r3, r3, #12
 8007808:	2b0c      	cmp	r3, #12
 800780a:	f000 8083 	beq.w	8007914 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d15e      	bne.n	80078d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007816:	4b09      	ldr	r3, [pc, #36]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a08      	ldr	r2, [pc, #32]	@ (800783c <HAL_RCC_OscConfig+0x4b8>)
 800781c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007822:	f7fd fb5d 	bl	8004ee0 <HAL_GetTick>
 8007826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007828:	e00c      	b.n	8007844 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800782a:	f7fd fb59 	bl	8004ee0 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	2b02      	cmp	r3, #2
 8007836:	d905      	bls.n	8007844 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e0ab      	b.n	8007994 <HAL_RCC_OscConfig+0x610>
 800783c:	40021000 	.word	0x40021000
 8007840:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007844:	4b55      	ldr	r3, [pc, #340]	@ (800799c <HAL_RCC_OscConfig+0x618>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1ec      	bne.n	800782a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007850:	4b52      	ldr	r3, [pc, #328]	@ (800799c <HAL_RCC_OscConfig+0x618>)
 8007852:	68da      	ldr	r2, [r3, #12]
 8007854:	4b52      	ldr	r3, [pc, #328]	@ (80079a0 <HAL_RCC_OscConfig+0x61c>)
 8007856:	4013      	ands	r3, r2
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	6a11      	ldr	r1, [r2, #32]
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007860:	3a01      	subs	r2, #1
 8007862:	0112      	lsls	r2, r2, #4
 8007864:	4311      	orrs	r1, r2
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800786a:	0212      	lsls	r2, r2, #8
 800786c:	4311      	orrs	r1, r2
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007872:	0852      	lsrs	r2, r2, #1
 8007874:	3a01      	subs	r2, #1
 8007876:	0552      	lsls	r2, r2, #21
 8007878:	4311      	orrs	r1, r2
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800787e:	0852      	lsrs	r2, r2, #1
 8007880:	3a01      	subs	r2, #1
 8007882:	0652      	lsls	r2, r2, #25
 8007884:	4311      	orrs	r1, r2
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800788a:	06d2      	lsls	r2, r2, #27
 800788c:	430a      	orrs	r2, r1
 800788e:	4943      	ldr	r1, [pc, #268]	@ (800799c <HAL_RCC_OscConfig+0x618>)
 8007890:	4313      	orrs	r3, r2
 8007892:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007894:	4b41      	ldr	r3, [pc, #260]	@ (800799c <HAL_RCC_OscConfig+0x618>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a40      	ldr	r2, [pc, #256]	@ (800799c <HAL_RCC_OscConfig+0x618>)
 800789a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800789e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80078a0:	4b3e      	ldr	r3, [pc, #248]	@ (800799c <HAL_RCC_OscConfig+0x618>)
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	4a3d      	ldr	r2, [pc, #244]	@ (800799c <HAL_RCC_OscConfig+0x618>)
 80078a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80078aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ac:	f7fd fb18 	bl	8004ee0 <HAL_GetTick>
 80078b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078b2:	e008      	b.n	80078c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078b4:	f7fd fb14 	bl	8004ee0 <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d901      	bls.n	80078c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e066      	b.n	8007994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078c6:	4b35      	ldr	r3, [pc, #212]	@ (800799c <HAL_RCC_OscConfig+0x618>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0f0      	beq.n	80078b4 <HAL_RCC_OscConfig+0x530>
 80078d2:	e05e      	b.n	8007992 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078d4:	4b31      	ldr	r3, [pc, #196]	@ (800799c <HAL_RCC_OscConfig+0x618>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a30      	ldr	r2, [pc, #192]	@ (800799c <HAL_RCC_OscConfig+0x618>)
 80078da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e0:	f7fd fafe 	bl	8004ee0 <HAL_GetTick>
 80078e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078e6:	e008      	b.n	80078fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078e8:	f7fd fafa 	bl	8004ee0 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d901      	bls.n	80078fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e04c      	b.n	8007994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078fa:	4b28      	ldr	r3, [pc, #160]	@ (800799c <HAL_RCC_OscConfig+0x618>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1f0      	bne.n	80078e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007906:	4b25      	ldr	r3, [pc, #148]	@ (800799c <HAL_RCC_OscConfig+0x618>)
 8007908:	68da      	ldr	r2, [r3, #12]
 800790a:	4924      	ldr	r1, [pc, #144]	@ (800799c <HAL_RCC_OscConfig+0x618>)
 800790c:	4b25      	ldr	r3, [pc, #148]	@ (80079a4 <HAL_RCC_OscConfig+0x620>)
 800790e:	4013      	ands	r3, r2
 8007910:	60cb      	str	r3, [r1, #12]
 8007912:	e03e      	b.n	8007992 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	69db      	ldr	r3, [r3, #28]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d101      	bne.n	8007920 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e039      	b.n	8007994 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007920:	4b1e      	ldr	r3, [pc, #120]	@ (800799c <HAL_RCC_OscConfig+0x618>)
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f003 0203 	and.w	r2, r3, #3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	429a      	cmp	r2, r3
 8007932:	d12c      	bne.n	800798e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800793e:	3b01      	subs	r3, #1
 8007940:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007942:	429a      	cmp	r2, r3
 8007944:	d123      	bne.n	800798e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007950:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007952:	429a      	cmp	r2, r3
 8007954:	d11b      	bne.n	800798e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007960:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007962:	429a      	cmp	r2, r3
 8007964:	d113      	bne.n	800798e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007970:	085b      	lsrs	r3, r3, #1
 8007972:	3b01      	subs	r3, #1
 8007974:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007976:	429a      	cmp	r2, r3
 8007978:	d109      	bne.n	800798e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007984:	085b      	lsrs	r3, r3, #1
 8007986:	3b01      	subs	r3, #1
 8007988:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800798a:	429a      	cmp	r2, r3
 800798c:	d001      	beq.n	8007992 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e000      	b.n	8007994 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3720      	adds	r7, #32
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	40021000 	.word	0x40021000
 80079a0:	019f800c 	.word	0x019f800c
 80079a4:	feeefffc 	.word	0xfeeefffc

080079a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80079b2:	2300      	movs	r3, #0
 80079b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d101      	bne.n	80079c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e11e      	b.n	8007bfe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079c0:	4b91      	ldr	r3, [pc, #580]	@ (8007c08 <HAL_RCC_ClockConfig+0x260>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 030f 	and.w	r3, r3, #15
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d910      	bls.n	80079f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079ce:	4b8e      	ldr	r3, [pc, #568]	@ (8007c08 <HAL_RCC_ClockConfig+0x260>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f023 020f 	bic.w	r2, r3, #15
 80079d6:	498c      	ldr	r1, [pc, #560]	@ (8007c08 <HAL_RCC_ClockConfig+0x260>)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	4313      	orrs	r3, r2
 80079dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079de:	4b8a      	ldr	r3, [pc, #552]	@ (8007c08 <HAL_RCC_ClockConfig+0x260>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 030f 	and.w	r3, r3, #15
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d001      	beq.n	80079f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e106      	b.n	8007bfe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d073      	beq.n	8007ae4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	d129      	bne.n	8007a58 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a04:	4b81      	ldr	r3, [pc, #516]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e0f4      	b.n	8007bfe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007a14:	f000 f99e 	bl	8007d54 <RCC_GetSysClockFreqFromPLLSource>
 8007a18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	4a7c      	ldr	r2, [pc, #496]	@ (8007c10 <HAL_RCC_ClockConfig+0x268>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d93f      	bls.n	8007aa2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a22:	4b7a      	ldr	r3, [pc, #488]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d009      	beq.n	8007a42 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d033      	beq.n	8007aa2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d12f      	bne.n	8007aa2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a42:	4b72      	ldr	r3, [pc, #456]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a4a:	4a70      	ldr	r2, [pc, #448]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007a52:	2380      	movs	r3, #128	@ 0x80
 8007a54:	617b      	str	r3, [r7, #20]
 8007a56:	e024      	b.n	8007aa2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d107      	bne.n	8007a70 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a60:	4b6a      	ldr	r3, [pc, #424]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d109      	bne.n	8007a80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e0c6      	b.n	8007bfe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a70:	4b66      	ldr	r3, [pc, #408]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e0be      	b.n	8007bfe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007a80:	f000 f8ce 	bl	8007c20 <HAL_RCC_GetSysClockFreq>
 8007a84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	4a61      	ldr	r2, [pc, #388]	@ (8007c10 <HAL_RCC_ClockConfig+0x268>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d909      	bls.n	8007aa2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a8e:	4b5f      	ldr	r3, [pc, #380]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a96:	4a5d      	ldr	r2, [pc, #372]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007a98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a9c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007a9e:	2380      	movs	r3, #128	@ 0x80
 8007aa0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f023 0203 	bic.w	r2, r3, #3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	4957      	ldr	r1, [pc, #348]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ab4:	f7fd fa14 	bl	8004ee0 <HAL_GetTick>
 8007ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aba:	e00a      	b.n	8007ad2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007abc:	f7fd fa10 	bl	8004ee0 <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d901      	bls.n	8007ad2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e095      	b.n	8007bfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ad2:	4b4e      	ldr	r3, [pc, #312]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f003 020c 	and.w	r2, r3, #12
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d1eb      	bne.n	8007abc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0302 	and.w	r3, r3, #2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d023      	beq.n	8007b38 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0304 	and.w	r3, r3, #4
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d005      	beq.n	8007b08 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007afc:	4b43      	ldr	r3, [pc, #268]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	4a42      	ldr	r2, [pc, #264]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007b02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007b06:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0308 	and.w	r3, r3, #8
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d007      	beq.n	8007b24 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007b14:	4b3d      	ldr	r3, [pc, #244]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007b1c:	4a3b      	ldr	r2, [pc, #236]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007b1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007b22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b24:	4b39      	ldr	r3, [pc, #228]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	4936      	ldr	r1, [pc, #216]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	608b      	str	r3, [r1, #8]
 8007b36:	e008      	b.n	8007b4a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	2b80      	cmp	r3, #128	@ 0x80
 8007b3c:	d105      	bne.n	8007b4a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007b3e:	4b33      	ldr	r3, [pc, #204]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	4a32      	ldr	r2, [pc, #200]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007b44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b48:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8007c08 <HAL_RCC_ClockConfig+0x260>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 030f 	and.w	r3, r3, #15
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d21d      	bcs.n	8007b94 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b58:	4b2b      	ldr	r3, [pc, #172]	@ (8007c08 <HAL_RCC_ClockConfig+0x260>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f023 020f 	bic.w	r2, r3, #15
 8007b60:	4929      	ldr	r1, [pc, #164]	@ (8007c08 <HAL_RCC_ClockConfig+0x260>)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007b68:	f7fd f9ba 	bl	8004ee0 <HAL_GetTick>
 8007b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b6e:	e00a      	b.n	8007b86 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b70:	f7fd f9b6 	bl	8004ee0 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e03b      	b.n	8007bfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b86:	4b20      	ldr	r3, [pc, #128]	@ (8007c08 <HAL_RCC_ClockConfig+0x260>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 030f 	and.w	r3, r3, #15
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d1ed      	bne.n	8007b70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0304 	and.w	r3, r3, #4
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d008      	beq.n	8007bb2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	4917      	ldr	r1, [pc, #92]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0308 	and.w	r3, r3, #8
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d009      	beq.n	8007bd2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bbe:	4b13      	ldr	r3, [pc, #76]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	490f      	ldr	r1, [pc, #60]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007bd2:	f000 f825 	bl	8007c20 <HAL_RCC_GetSysClockFreq>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8007c0c <HAL_RCC_ClockConfig+0x264>)
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	091b      	lsrs	r3, r3, #4
 8007bde:	f003 030f 	and.w	r3, r3, #15
 8007be2:	490c      	ldr	r1, [pc, #48]	@ (8007c14 <HAL_RCC_ClockConfig+0x26c>)
 8007be4:	5ccb      	ldrb	r3, [r1, r3]
 8007be6:	f003 031f 	and.w	r3, r3, #31
 8007bea:	fa22 f303 	lsr.w	r3, r2, r3
 8007bee:	4a0a      	ldr	r2, [pc, #40]	@ (8007c18 <HAL_RCC_ClockConfig+0x270>)
 8007bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8007c1c <HAL_RCC_ClockConfig+0x274>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fd f926 	bl	8004e48 <HAL_InitTick>
 8007bfc:	4603      	mov	r3, r0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	40022000 	.word	0x40022000
 8007c0c:	40021000 	.word	0x40021000
 8007c10:	04c4b400 	.word	0x04c4b400
 8007c14:	0800cdd4 	.word	0x0800cdd4
 8007c18:	20000284 	.word	0x20000284
 8007c1c:	20000288 	.word	0x20000288

08007c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b087      	sub	sp, #28
 8007c24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007c26:	4b2c      	ldr	r3, [pc, #176]	@ (8007cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f003 030c 	and.w	r3, r3, #12
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	d102      	bne.n	8007c38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007c32:	4b2a      	ldr	r3, [pc, #168]	@ (8007cdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8007c34:	613b      	str	r3, [r7, #16]
 8007c36:	e047      	b.n	8007cc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007c38:	4b27      	ldr	r3, [pc, #156]	@ (8007cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f003 030c 	and.w	r3, r3, #12
 8007c40:	2b08      	cmp	r3, #8
 8007c42:	d102      	bne.n	8007c4a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007c44:	4b26      	ldr	r3, [pc, #152]	@ (8007ce0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007c46:	613b      	str	r3, [r7, #16]
 8007c48:	e03e      	b.n	8007cc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007c4a:	4b23      	ldr	r3, [pc, #140]	@ (8007cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f003 030c 	and.w	r3, r3, #12
 8007c52:	2b0c      	cmp	r3, #12
 8007c54:	d136      	bne.n	8007cc4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c56:	4b20      	ldr	r3, [pc, #128]	@ (8007cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	f003 0303 	and.w	r3, r3, #3
 8007c5e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c60:	4b1d      	ldr	r3, [pc, #116]	@ (8007cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	091b      	lsrs	r3, r3, #4
 8007c66:	f003 030f 	and.w	r3, r3, #15
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b03      	cmp	r3, #3
 8007c72:	d10c      	bne.n	8007c8e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c74:	4a1a      	ldr	r2, [pc, #104]	@ (8007ce0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c7c:	4a16      	ldr	r2, [pc, #88]	@ (8007cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c7e:	68d2      	ldr	r2, [r2, #12]
 8007c80:	0a12      	lsrs	r2, r2, #8
 8007c82:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007c86:	fb02 f303 	mul.w	r3, r2, r3
 8007c8a:	617b      	str	r3, [r7, #20]
      break;
 8007c8c:	e00c      	b.n	8007ca8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c8e:	4a13      	ldr	r2, [pc, #76]	@ (8007cdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c96:	4a10      	ldr	r2, [pc, #64]	@ (8007cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c98:	68d2      	ldr	r2, [r2, #12]
 8007c9a:	0a12      	lsrs	r2, r2, #8
 8007c9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007ca0:	fb02 f303 	mul.w	r3, r2, r3
 8007ca4:	617b      	str	r3, [r7, #20]
      break;
 8007ca6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8007cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	0e5b      	lsrs	r3, r3, #25
 8007cae:	f003 0303 	and.w	r3, r3, #3
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	005b      	lsls	r3, r3, #1
 8007cb6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc0:	613b      	str	r3, [r7, #16]
 8007cc2:	e001      	b.n	8007cc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007cc8:	693b      	ldr	r3, [r7, #16]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	371c      	adds	r7, #28
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	40021000 	.word	0x40021000
 8007cdc:	00f42400 	.word	0x00f42400
 8007ce0:	016e3600 	.word	0x016e3600

08007ce4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ce8:	4b03      	ldr	r3, [pc, #12]	@ (8007cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007cea:	681b      	ldr	r3, [r3, #0]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	20000284 	.word	0x20000284

08007cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007d00:	f7ff fff0 	bl	8007ce4 <HAL_RCC_GetHCLKFreq>
 8007d04:	4602      	mov	r2, r0
 8007d06:	4b06      	ldr	r3, [pc, #24]	@ (8007d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	0a1b      	lsrs	r3, r3, #8
 8007d0c:	f003 0307 	and.w	r3, r3, #7
 8007d10:	4904      	ldr	r1, [pc, #16]	@ (8007d24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d12:	5ccb      	ldrb	r3, [r1, r3]
 8007d14:	f003 031f 	and.w	r3, r3, #31
 8007d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	40021000 	.word	0x40021000
 8007d24:	0800cde4 	.word	0x0800cde4

08007d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007d2c:	f7ff ffda 	bl	8007ce4 <HAL_RCC_GetHCLKFreq>
 8007d30:	4602      	mov	r2, r0
 8007d32:	4b06      	ldr	r3, [pc, #24]	@ (8007d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	0adb      	lsrs	r3, r3, #11
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	4904      	ldr	r1, [pc, #16]	@ (8007d50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d3e:	5ccb      	ldrb	r3, [r1, r3]
 8007d40:	f003 031f 	and.w	r3, r3, #31
 8007d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	40021000 	.word	0x40021000
 8007d50:	0800cde4 	.word	0x0800cde4

08007d54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b087      	sub	sp, #28
 8007d58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8007dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	f003 0303 	and.w	r3, r3, #3
 8007d62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d64:	4b1b      	ldr	r3, [pc, #108]	@ (8007dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	091b      	lsrs	r3, r3, #4
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	3301      	adds	r3, #1
 8007d70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d10c      	bne.n	8007d92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d78:	4a17      	ldr	r2, [pc, #92]	@ (8007dd8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d80:	4a14      	ldr	r2, [pc, #80]	@ (8007dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d82:	68d2      	ldr	r2, [r2, #12]
 8007d84:	0a12      	lsrs	r2, r2, #8
 8007d86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007d8a:	fb02 f303 	mul.w	r3, r2, r3
 8007d8e:	617b      	str	r3, [r7, #20]
    break;
 8007d90:	e00c      	b.n	8007dac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d92:	4a12      	ldr	r2, [pc, #72]	@ (8007ddc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8007dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d9c:	68d2      	ldr	r2, [r2, #12]
 8007d9e:	0a12      	lsrs	r2, r2, #8
 8007da0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007da4:	fb02 f303 	mul.w	r3, r2, r3
 8007da8:	617b      	str	r3, [r7, #20]
    break;
 8007daa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007dac:	4b09      	ldr	r3, [pc, #36]	@ (8007dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	0e5b      	lsrs	r3, r3, #25
 8007db2:	f003 0303 	and.w	r3, r3, #3
 8007db6:	3301      	adds	r3, #1
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007dc6:	687b      	ldr	r3, [r7, #4]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	371c      	adds	r7, #28
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	40021000 	.word	0x40021000
 8007dd8:	016e3600 	.word	0x016e3600
 8007ddc:	00f42400 	.word	0x00f42400

08007de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007de8:	2300      	movs	r3, #0
 8007dea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007dec:	2300      	movs	r3, #0
 8007dee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 8098 	beq.w	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e02:	4b43      	ldr	r3, [pc, #268]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10d      	bne.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e0e:	4b40      	ldr	r3, [pc, #256]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e12:	4a3f      	ldr	r2, [pc, #252]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e18:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e22:	60bb      	str	r3, [r7, #8]
 8007e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e26:	2301      	movs	r3, #1
 8007e28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e2a:	4b3a      	ldr	r3, [pc, #232]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a39      	ldr	r2, [pc, #228]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e36:	f7fd f853 	bl	8004ee0 <HAL_GetTick>
 8007e3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e3c:	e009      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e3e:	f7fd f84f 	bl	8004ee0 <HAL_GetTick>
 8007e42:	4602      	mov	r2, r0
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d902      	bls.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	74fb      	strb	r3, [r7, #19]
        break;
 8007e50:	e005      	b.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e52:	4b30      	ldr	r3, [pc, #192]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d0ef      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007e5e:	7cfb      	ldrb	r3, [r7, #19]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d159      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007e64:	4b2a      	ldr	r3, [pc, #168]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d01e      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d019      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007e80:	4b23      	ldr	r3, [pc, #140]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e8c:	4b20      	ldr	r3, [pc, #128]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e92:	4a1f      	ldr	r2, [pc, #124]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ea4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007eac:	4a18      	ldr	r2, [pc, #96]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d016      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ebe:	f7fd f80f 	bl	8004ee0 <HAL_GetTick>
 8007ec2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ec4:	e00b      	b.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ec6:	f7fd f80b 	bl	8004ee0 <HAL_GetTick>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d902      	bls.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	74fb      	strb	r3, [r7, #19]
            break;
 8007edc:	e006      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ede:	4b0c      	ldr	r3, [pc, #48]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ee4:	f003 0302 	and.w	r3, r3, #2
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d0ec      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007eec:	7cfb      	ldrb	r3, [r7, #19]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10b      	bne.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ef2:	4b07      	ldr	r3, [pc, #28]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ef8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f00:	4903      	ldr	r1, [pc, #12]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007f08:	e008      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f0a:	7cfb      	ldrb	r3, [r7, #19]
 8007f0c:	74bb      	strb	r3, [r7, #18]
 8007f0e:	e005      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007f10:	40021000 	.word	0x40021000
 8007f14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f18:	7cfb      	ldrb	r3, [r7, #19]
 8007f1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f1c:	7c7b      	ldrb	r3, [r7, #17]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d105      	bne.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f22:	4ba7      	ldr	r3, [pc, #668]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f26:	4aa6      	ldr	r2, [pc, #664]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00a      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f3a:	4ba1      	ldr	r3, [pc, #644]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f40:	f023 0203 	bic.w	r2, r3, #3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	499d      	ldr	r1, [pc, #628]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00a      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f5c:	4b98      	ldr	r3, [pc, #608]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f62:	f023 020c 	bic.w	r2, r3, #12
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	4995      	ldr	r1, [pc, #596]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0304 	and.w	r3, r3, #4
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00a      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f7e:	4b90      	ldr	r3, [pc, #576]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f84:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	498c      	ldr	r1, [pc, #560]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0308 	and.w	r3, r3, #8
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00a      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007fa0:	4b87      	ldr	r3, [pc, #540]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fa6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	4984      	ldr	r1, [pc, #528]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0310 	and.w	r3, r3, #16
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00a      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007fc2:	4b7f      	ldr	r3, [pc, #508]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	695b      	ldr	r3, [r3, #20]
 8007fd0:	497b      	ldr	r1, [pc, #492]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0320 	and.w	r3, r3, #32
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00a      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007fe4:	4b76      	ldr	r3, [pc, #472]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	4973      	ldr	r1, [pc, #460]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00a      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008006:	4b6e      	ldr	r3, [pc, #440]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800800c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	496a      	ldr	r1, [pc, #424]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008016:	4313      	orrs	r3, r2
 8008018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00a      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008028:	4b65      	ldr	r3, [pc, #404]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800802a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800802e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	4962      	ldr	r1, [pc, #392]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008038:	4313      	orrs	r3, r2
 800803a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00a      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800804a:	4b5d      	ldr	r3, [pc, #372]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800804c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008050:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008058:	4959      	ldr	r1, [pc, #356]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800805a:	4313      	orrs	r3, r2
 800805c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00a      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800806c:	4b54      	ldr	r3, [pc, #336]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800806e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008072:	f023 0203 	bic.w	r2, r3, #3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800807a:	4951      	ldr	r1, [pc, #324]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800807c:	4313      	orrs	r3, r2
 800807e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00a      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800808e:	4b4c      	ldr	r3, [pc, #304]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008094:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809c:	4948      	ldr	r1, [pc, #288]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d015      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80080b0:	4b43      	ldr	r3, [pc, #268]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080be:	4940      	ldr	r1, [pc, #256]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080ce:	d105      	bne.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080d0:	4b3b      	ldr	r3, [pc, #236]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	4a3a      	ldr	r2, [pc, #232]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d015      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80080e8:	4b35      	ldr	r3, [pc, #212]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080f6:	4932      	ldr	r1, [pc, #200]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080f8:	4313      	orrs	r3, r2
 80080fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008102:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008106:	d105      	bne.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008108:	4b2d      	ldr	r3, [pc, #180]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	4a2c      	ldr	r2, [pc, #176]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800810e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008112:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800811c:	2b00      	cmp	r3, #0
 800811e:	d015      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008120:	4b27      	ldr	r3, [pc, #156]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008126:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800812e:	4924      	ldr	r1, [pc, #144]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008130:	4313      	orrs	r3, r2
 8008132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800813e:	d105      	bne.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008140:	4b1f      	ldr	r3, [pc, #124]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	4a1e      	ldr	r2, [pc, #120]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800814a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d015      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008158:	4b19      	ldr	r3, [pc, #100]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800815a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800815e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008166:	4916      	ldr	r1, [pc, #88]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008168:	4313      	orrs	r3, r2
 800816a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008172:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008176:	d105      	bne.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008178:	4b11      	ldr	r3, [pc, #68]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	4a10      	ldr	r2, [pc, #64]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800817e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008182:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d019      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008190:	4b0b      	ldr	r3, [pc, #44]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008196:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800819e:	4908      	ldr	r1, [pc, #32]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081a0:	4313      	orrs	r3, r2
 80081a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081ae:	d109      	bne.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081b0:	4b03      	ldr	r3, [pc, #12]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	4a02      	ldr	r2, [pc, #8]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081ba:	60d3      	str	r3, [r2, #12]
 80081bc:	e002      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80081be:	bf00      	nop
 80081c0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d015      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80081d0:	4b29      	ldr	r3, [pc, #164]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80081d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081de:	4926      	ldr	r1, [pc, #152]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80081e0:	4313      	orrs	r3, r2
 80081e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081ee:	d105      	bne.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80081f0:	4b21      	ldr	r3, [pc, #132]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	4a20      	ldr	r2, [pc, #128]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80081f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081fa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d015      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008208:	4b1b      	ldr	r3, [pc, #108]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800820a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800820e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008216:	4918      	ldr	r1, [pc, #96]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008218:	4313      	orrs	r3, r2
 800821a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008226:	d105      	bne.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008228:	4b13      	ldr	r3, [pc, #76]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	4a12      	ldr	r2, [pc, #72]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800822e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008232:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d015      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008240:	4b0d      	ldr	r3, [pc, #52]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008242:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008246:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800824e:	490a      	ldr	r1, [pc, #40]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008250:	4313      	orrs	r3, r2
 8008252:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800825a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800825e:	d105      	bne.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008260:	4b05      	ldr	r3, [pc, #20]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	4a04      	ldr	r2, [pc, #16]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008266:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800826a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800826c:	7cbb      	ldrb	r3, [r7, #18]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3718      	adds	r7, #24
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	40021000 	.word	0x40021000

0800827c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e054      	b.n	8008338 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d111      	bne.n	80082be <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f001 feec 	bl	800a080 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d102      	bne.n	80082b6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a23      	ldr	r2, [pc, #140]	@ (8008340 <HAL_TIM_Base_Init+0xc4>)
 80082b4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2202      	movs	r2, #2
 80082c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	3304      	adds	r3, #4
 80082ce:	4619      	mov	r1, r3
 80082d0:	4610      	mov	r0, r2
 80082d2:	f001 fa35 	bl	8009740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	08004945 	.word	0x08004945

08008344 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b01      	cmp	r3, #1
 8008356:	d001      	beq.n	800835c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e04c      	b.n	80083f6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2202      	movs	r2, #2
 8008360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a26      	ldr	r2, [pc, #152]	@ (8008404 <HAL_TIM_Base_Start+0xc0>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d022      	beq.n	80083b4 <HAL_TIM_Base_Start+0x70>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008376:	d01d      	beq.n	80083b4 <HAL_TIM_Base_Start+0x70>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a22      	ldr	r2, [pc, #136]	@ (8008408 <HAL_TIM_Base_Start+0xc4>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d018      	beq.n	80083b4 <HAL_TIM_Base_Start+0x70>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a21      	ldr	r2, [pc, #132]	@ (800840c <HAL_TIM_Base_Start+0xc8>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d013      	beq.n	80083b4 <HAL_TIM_Base_Start+0x70>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a1f      	ldr	r2, [pc, #124]	@ (8008410 <HAL_TIM_Base_Start+0xcc>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d00e      	beq.n	80083b4 <HAL_TIM_Base_Start+0x70>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a1e      	ldr	r2, [pc, #120]	@ (8008414 <HAL_TIM_Base_Start+0xd0>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d009      	beq.n	80083b4 <HAL_TIM_Base_Start+0x70>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008418 <HAL_TIM_Base_Start+0xd4>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d004      	beq.n	80083b4 <HAL_TIM_Base_Start+0x70>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a1b      	ldr	r2, [pc, #108]	@ (800841c <HAL_TIM_Base_Start+0xd8>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d115      	bne.n	80083e0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	689a      	ldr	r2, [r3, #8]
 80083ba:	4b19      	ldr	r3, [pc, #100]	@ (8008420 <HAL_TIM_Base_Start+0xdc>)
 80083bc:	4013      	ands	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2b06      	cmp	r3, #6
 80083c4:	d015      	beq.n	80083f2 <HAL_TIM_Base_Start+0xae>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083cc:	d011      	beq.n	80083f2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f042 0201 	orr.w	r2, r2, #1
 80083dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083de:	e008      	b.n	80083f2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f042 0201 	orr.w	r2, r2, #1
 80083ee:	601a      	str	r2, [r3, #0]
 80083f0:	e000      	b.n	80083f4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	40012c00 	.word	0x40012c00
 8008408:	40000400 	.word	0x40000400
 800840c:	40000800 	.word	0x40000800
 8008410:	40000c00 	.word	0x40000c00
 8008414:	40013400 	.word	0x40013400
 8008418:	40014000 	.word	0x40014000
 800841c:	40015000 	.word	0x40015000
 8008420:	00010007 	.word	0x00010007

08008424 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008432:	b2db      	uxtb	r3, r3
 8008434:	2b01      	cmp	r3, #1
 8008436:	d001      	beq.n	800843c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e054      	b.n	80084e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2202      	movs	r2, #2
 8008440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68da      	ldr	r2, [r3, #12]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f042 0201 	orr.w	r2, r2, #1
 8008452:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a26      	ldr	r2, [pc, #152]	@ (80084f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d022      	beq.n	80084a4 <HAL_TIM_Base_Start_IT+0x80>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008466:	d01d      	beq.n	80084a4 <HAL_TIM_Base_Start_IT+0x80>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a22      	ldr	r2, [pc, #136]	@ (80084f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d018      	beq.n	80084a4 <HAL_TIM_Base_Start_IT+0x80>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a21      	ldr	r2, [pc, #132]	@ (80084fc <HAL_TIM_Base_Start_IT+0xd8>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d013      	beq.n	80084a4 <HAL_TIM_Base_Start_IT+0x80>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a1f      	ldr	r2, [pc, #124]	@ (8008500 <HAL_TIM_Base_Start_IT+0xdc>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d00e      	beq.n	80084a4 <HAL_TIM_Base_Start_IT+0x80>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a1e      	ldr	r2, [pc, #120]	@ (8008504 <HAL_TIM_Base_Start_IT+0xe0>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d009      	beq.n	80084a4 <HAL_TIM_Base_Start_IT+0x80>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a1c      	ldr	r2, [pc, #112]	@ (8008508 <HAL_TIM_Base_Start_IT+0xe4>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d004      	beq.n	80084a4 <HAL_TIM_Base_Start_IT+0x80>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a1b      	ldr	r2, [pc, #108]	@ (800850c <HAL_TIM_Base_Start_IT+0xe8>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d115      	bne.n	80084d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	689a      	ldr	r2, [r3, #8]
 80084aa:	4b19      	ldr	r3, [pc, #100]	@ (8008510 <HAL_TIM_Base_Start_IT+0xec>)
 80084ac:	4013      	ands	r3, r2
 80084ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2b06      	cmp	r3, #6
 80084b4:	d015      	beq.n	80084e2 <HAL_TIM_Base_Start_IT+0xbe>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084bc:	d011      	beq.n	80084e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f042 0201 	orr.w	r2, r2, #1
 80084cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ce:	e008      	b.n	80084e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f042 0201 	orr.w	r2, r2, #1
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	e000      	b.n	80084e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3714      	adds	r7, #20
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	40012c00 	.word	0x40012c00
 80084f8:	40000400 	.word	0x40000400
 80084fc:	40000800 	.word	0x40000800
 8008500:	40000c00 	.word	0x40000c00
 8008504:	40013400 	.word	0x40013400
 8008508:	40014000 	.word	0x40014000
 800850c:	40015000 	.word	0x40015000
 8008510:	00010007 	.word	0x00010007

08008514 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e054      	b.n	80085d0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d111      	bne.n	8008556 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f001 fda0 	bl	800a080 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008544:	2b00      	cmp	r3, #0
 8008546:	d102      	bne.n	800854e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a23      	ldr	r2, [pc, #140]	@ (80085d8 <HAL_TIM_PWM_Init+0xc4>)
 800854c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2202      	movs	r2, #2
 800855a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	3304      	adds	r3, #4
 8008566:	4619      	mov	r1, r3
 8008568:	4610      	mov	r0, r2
 800856a:	f001 f8e9 	bl	8009740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	080085dd 	.word	0x080085dd

080085dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d109      	bne.n	8008614 <HAL_TIM_PWM_Start+0x24>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b01      	cmp	r3, #1
 800860a:	bf14      	ite	ne
 800860c:	2301      	movne	r3, #1
 800860e:	2300      	moveq	r3, #0
 8008610:	b2db      	uxtb	r3, r3
 8008612:	e03c      	b.n	800868e <HAL_TIM_PWM_Start+0x9e>
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2b04      	cmp	r3, #4
 8008618:	d109      	bne.n	800862e <HAL_TIM_PWM_Start+0x3e>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b01      	cmp	r3, #1
 8008624:	bf14      	ite	ne
 8008626:	2301      	movne	r3, #1
 8008628:	2300      	moveq	r3, #0
 800862a:	b2db      	uxtb	r3, r3
 800862c:	e02f      	b.n	800868e <HAL_TIM_PWM_Start+0x9e>
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	2b08      	cmp	r3, #8
 8008632:	d109      	bne.n	8008648 <HAL_TIM_PWM_Start+0x58>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b01      	cmp	r3, #1
 800863e:	bf14      	ite	ne
 8008640:	2301      	movne	r3, #1
 8008642:	2300      	moveq	r3, #0
 8008644:	b2db      	uxtb	r3, r3
 8008646:	e022      	b.n	800868e <HAL_TIM_PWM_Start+0x9e>
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	2b0c      	cmp	r3, #12
 800864c:	d109      	bne.n	8008662 <HAL_TIM_PWM_Start+0x72>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b01      	cmp	r3, #1
 8008658:	bf14      	ite	ne
 800865a:	2301      	movne	r3, #1
 800865c:	2300      	moveq	r3, #0
 800865e:	b2db      	uxtb	r3, r3
 8008660:	e015      	b.n	800868e <HAL_TIM_PWM_Start+0x9e>
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2b10      	cmp	r3, #16
 8008666:	d109      	bne.n	800867c <HAL_TIM_PWM_Start+0x8c>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800866e:	b2db      	uxtb	r3, r3
 8008670:	2b01      	cmp	r3, #1
 8008672:	bf14      	ite	ne
 8008674:	2301      	movne	r3, #1
 8008676:	2300      	moveq	r3, #0
 8008678:	b2db      	uxtb	r3, r3
 800867a:	e008      	b.n	800868e <HAL_TIM_PWM_Start+0x9e>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b01      	cmp	r3, #1
 8008686:	bf14      	ite	ne
 8008688:	2301      	movne	r3, #1
 800868a:	2300      	moveq	r3, #0
 800868c:	b2db      	uxtb	r3, r3
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e0a6      	b.n	80087e4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d104      	bne.n	80086a6 <HAL_TIM_PWM_Start+0xb6>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2202      	movs	r2, #2
 80086a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086a4:	e023      	b.n	80086ee <HAL_TIM_PWM_Start+0xfe>
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	2b04      	cmp	r3, #4
 80086aa:	d104      	bne.n	80086b6 <HAL_TIM_PWM_Start+0xc6>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2202      	movs	r2, #2
 80086b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086b4:	e01b      	b.n	80086ee <HAL_TIM_PWM_Start+0xfe>
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	2b08      	cmp	r3, #8
 80086ba:	d104      	bne.n	80086c6 <HAL_TIM_PWM_Start+0xd6>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2202      	movs	r2, #2
 80086c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086c4:	e013      	b.n	80086ee <HAL_TIM_PWM_Start+0xfe>
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	2b0c      	cmp	r3, #12
 80086ca:	d104      	bne.n	80086d6 <HAL_TIM_PWM_Start+0xe6>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2202      	movs	r2, #2
 80086d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80086d4:	e00b      	b.n	80086ee <HAL_TIM_PWM_Start+0xfe>
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b10      	cmp	r3, #16
 80086da:	d104      	bne.n	80086e6 <HAL_TIM_PWM_Start+0xf6>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2202      	movs	r2, #2
 80086e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086e4:	e003      	b.n	80086ee <HAL_TIM_PWM_Start+0xfe>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2202      	movs	r2, #2
 80086ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2201      	movs	r2, #1
 80086f4:	6839      	ldr	r1, [r7, #0]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f001 fc9c 	bl	800a034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a3a      	ldr	r2, [pc, #232]	@ (80087ec <HAL_TIM_PWM_Start+0x1fc>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d018      	beq.n	8008738 <HAL_TIM_PWM_Start+0x148>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a39      	ldr	r2, [pc, #228]	@ (80087f0 <HAL_TIM_PWM_Start+0x200>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d013      	beq.n	8008738 <HAL_TIM_PWM_Start+0x148>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a37      	ldr	r2, [pc, #220]	@ (80087f4 <HAL_TIM_PWM_Start+0x204>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d00e      	beq.n	8008738 <HAL_TIM_PWM_Start+0x148>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a36      	ldr	r2, [pc, #216]	@ (80087f8 <HAL_TIM_PWM_Start+0x208>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d009      	beq.n	8008738 <HAL_TIM_PWM_Start+0x148>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a34      	ldr	r2, [pc, #208]	@ (80087fc <HAL_TIM_PWM_Start+0x20c>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d004      	beq.n	8008738 <HAL_TIM_PWM_Start+0x148>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a33      	ldr	r2, [pc, #204]	@ (8008800 <HAL_TIM_PWM_Start+0x210>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d101      	bne.n	800873c <HAL_TIM_PWM_Start+0x14c>
 8008738:	2301      	movs	r3, #1
 800873a:	e000      	b.n	800873e <HAL_TIM_PWM_Start+0x14e>
 800873c:	2300      	movs	r3, #0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d007      	beq.n	8008752 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008750:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a25      	ldr	r2, [pc, #148]	@ (80087ec <HAL_TIM_PWM_Start+0x1fc>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d022      	beq.n	80087a2 <HAL_TIM_PWM_Start+0x1b2>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008764:	d01d      	beq.n	80087a2 <HAL_TIM_PWM_Start+0x1b2>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a26      	ldr	r2, [pc, #152]	@ (8008804 <HAL_TIM_PWM_Start+0x214>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d018      	beq.n	80087a2 <HAL_TIM_PWM_Start+0x1b2>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a24      	ldr	r2, [pc, #144]	@ (8008808 <HAL_TIM_PWM_Start+0x218>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d013      	beq.n	80087a2 <HAL_TIM_PWM_Start+0x1b2>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a23      	ldr	r2, [pc, #140]	@ (800880c <HAL_TIM_PWM_Start+0x21c>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d00e      	beq.n	80087a2 <HAL_TIM_PWM_Start+0x1b2>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a19      	ldr	r2, [pc, #100]	@ (80087f0 <HAL_TIM_PWM_Start+0x200>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d009      	beq.n	80087a2 <HAL_TIM_PWM_Start+0x1b2>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a18      	ldr	r2, [pc, #96]	@ (80087f4 <HAL_TIM_PWM_Start+0x204>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d004      	beq.n	80087a2 <HAL_TIM_PWM_Start+0x1b2>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a18      	ldr	r2, [pc, #96]	@ (8008800 <HAL_TIM_PWM_Start+0x210>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d115      	bne.n	80087ce <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	689a      	ldr	r2, [r3, #8]
 80087a8:	4b19      	ldr	r3, [pc, #100]	@ (8008810 <HAL_TIM_PWM_Start+0x220>)
 80087aa:	4013      	ands	r3, r2
 80087ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2b06      	cmp	r3, #6
 80087b2:	d015      	beq.n	80087e0 <HAL_TIM_PWM_Start+0x1f0>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087ba:	d011      	beq.n	80087e0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f042 0201 	orr.w	r2, r2, #1
 80087ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087cc:	e008      	b.n	80087e0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f042 0201 	orr.w	r2, r2, #1
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	e000      	b.n	80087e2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	40012c00 	.word	0x40012c00
 80087f0:	40013400 	.word	0x40013400
 80087f4:	40014000 	.word	0x40014000
 80087f8:	40014400 	.word	0x40014400
 80087fc:	40014800 	.word	0x40014800
 8008800:	40015000 	.word	0x40015000
 8008804:	40000400 	.word	0x40000400
 8008808:	40000800 	.word	0x40000800
 800880c:	40000c00 	.word	0x40000c00
 8008810:	00010007 	.word	0x00010007

08008814 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e04c      	b.n	80088c2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b00      	cmp	r3, #0
 8008832:	d111      	bne.n	8008858 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f001 fc1f 	bl	800a080 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008846:	2b00      	cmp	r3, #0
 8008848:	d102      	bne.n	8008850 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a1f      	ldr	r2, [pc, #124]	@ (80088cc <HAL_TIM_OnePulse_Init+0xb8>)
 800884e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2202      	movs	r2, #2
 800885c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	3304      	adds	r3, #4
 8008868:	4619      	mov	r1, r3
 800886a:	4610      	mov	r0, r2
 800886c:	f000 ff68 	bl	8009740 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f022 0208 	bic.w	r2, r2, #8
 800887e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6819      	ldr	r1, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	430a      	orrs	r2, r1
 800888e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	080088d1 	.word	0x080088d1

080088d0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80088f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80088fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008904:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800890c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800890e:	7bfb      	ldrb	r3, [r7, #15]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d108      	bne.n	8008926 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d105      	bne.n	8008926 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800891a:	7b7b      	ldrb	r3, [r7, #13]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d102      	bne.n	8008926 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008920:	7b3b      	ldrb	r3, [r7, #12]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d001      	beq.n	800892a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e059      	b.n	80089de <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2202      	movs	r2, #2
 800892e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2202      	movs	r2, #2
 8008936:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2202      	movs	r2, #2
 800893e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2202      	movs	r2, #2
 8008946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68da      	ldr	r2, [r3, #12]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f042 0202 	orr.w	r2, r2, #2
 8008958:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68da      	ldr	r2, [r3, #12]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f042 0204 	orr.w	r2, r2, #4
 8008968:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2201      	movs	r2, #1
 8008970:	2100      	movs	r1, #0
 8008972:	4618      	mov	r0, r3
 8008974:	f001 fb5e 	bl	800a034 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2201      	movs	r2, #1
 800897e:	2104      	movs	r1, #4
 8008980:	4618      	mov	r0, r3
 8008982:	f001 fb57 	bl	800a034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a17      	ldr	r2, [pc, #92]	@ (80089e8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d018      	beq.n	80089c2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a15      	ldr	r2, [pc, #84]	@ (80089ec <HAL_TIM_OnePulse_Start_IT+0x108>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d013      	beq.n	80089c2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a14      	ldr	r2, [pc, #80]	@ (80089f0 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d00e      	beq.n	80089c2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a12      	ldr	r2, [pc, #72]	@ (80089f4 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d009      	beq.n	80089c2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a11      	ldr	r2, [pc, #68]	@ (80089f8 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d004      	beq.n	80089c2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a0f      	ldr	r2, [pc, #60]	@ (80089fc <HAL_TIM_OnePulse_Start_IT+0x118>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d101      	bne.n	80089c6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 80089c2:	2301      	movs	r3, #1
 80089c4:	e000      	b.n	80089c8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80089c6:	2300      	movs	r3, #0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d007      	beq.n	80089dc <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	40012c00 	.word	0x40012c00
 80089ec:	40013400 	.word	0x40013400
 80089f0:	40014000 	.word	0x40014000
 80089f4:	40014400 	.word	0x40014400
 80089f8:	40014800 	.word	0x40014800
 80089fc:	40015000 	.word	0x40015000

08008a00 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e0a2      	b.n	8008b5a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d111      	bne.n	8008a44 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f001 fb29 	bl	800a080 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d102      	bne.n	8008a3c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a4a      	ldr	r2, [pc, #296]	@ (8008b64 <HAL_TIM_Encoder_Init+0x164>)
 8008a3a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2202      	movs	r2, #2
 8008a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	6812      	ldr	r2, [r2, #0]
 8008a56:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8008a5a:	f023 0307 	bic.w	r3, r3, #7
 8008a5e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	3304      	adds	r3, #4
 8008a68:	4619      	mov	r1, r3
 8008a6a:	4610      	mov	r0, r2
 8008a6c:	f000 fe68 	bl	8009740 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6a1b      	ldr	r3, [r3, #32]
 8008a86:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	697a      	ldr	r2, [r7, #20]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a98:	f023 0303 	bic.w	r3, r3, #3
 8008a9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	689a      	ldr	r2, [r3, #8]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	021b      	lsls	r3, r3, #8
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008ab6:	f023 030c 	bic.w	r3, r3, #12
 8008aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ac2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	68da      	ldr	r2, [r3, #12]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	69db      	ldr	r3, [r3, #28]
 8008ad0:	021b      	lsls	r3, r3, #8
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	011a      	lsls	r2, r3, #4
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	6a1b      	ldr	r3, [r3, #32]
 8008ae4:	031b      	lsls	r3, r3, #12
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008af4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008afc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	685a      	ldr	r2, [r3, #4]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	011b      	lsls	r3, r3, #4
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	080048c1 	.word	0x080048c1

08008b68 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008b78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008b80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d110      	bne.n	8008bba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d102      	bne.n	8008ba4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b9e:	7b7b      	ldrb	r3, [r7, #13]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d001      	beq.n	8008ba8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e069      	b.n	8008c7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2202      	movs	r2, #2
 8008bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bb8:	e031      	b.n	8008c1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2b04      	cmp	r3, #4
 8008bbe:	d110      	bne.n	8008be2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d102      	bne.n	8008bcc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008bc6:	7b3b      	ldrb	r3, [r7, #12]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d001      	beq.n	8008bd0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e055      	b.n	8008c7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008be0:	e01d      	b.n	8008c1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d108      	bne.n	8008bfa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d105      	bne.n	8008bfa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bee:	7b7b      	ldrb	r3, [r7, #13]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d102      	bne.n	8008bfa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008bf4:	7b3b      	ldrb	r3, [r7, #12]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d001      	beq.n	8008bfe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e03e      	b.n	8008c7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2202      	movs	r2, #2
 8008c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2202      	movs	r2, #2
 8008c0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2202      	movs	r2, #2
 8008c12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2202      	movs	r2, #2
 8008c1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d003      	beq.n	8008c2c <HAL_TIM_Encoder_Start+0xc4>
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	2b04      	cmp	r3, #4
 8008c28:	d008      	beq.n	8008c3c <HAL_TIM_Encoder_Start+0xd4>
 8008c2a:	e00f      	b.n	8008c4c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2201      	movs	r2, #1
 8008c32:	2100      	movs	r1, #0
 8008c34:	4618      	mov	r0, r3
 8008c36:	f001 f9fd 	bl	800a034 <TIM_CCxChannelCmd>
      break;
 8008c3a:	e016      	b.n	8008c6a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2201      	movs	r2, #1
 8008c42:	2104      	movs	r1, #4
 8008c44:	4618      	mov	r0, r3
 8008c46:	f001 f9f5 	bl	800a034 <TIM_CCxChannelCmd>
      break;
 8008c4a:	e00e      	b.n	8008c6a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2201      	movs	r2, #1
 8008c52:	2100      	movs	r1, #0
 8008c54:	4618      	mov	r0, r3
 8008c56:	f001 f9ed 	bl	800a034 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	2104      	movs	r1, #4
 8008c62:	4618      	mov	r0, r3
 8008c64:	f001 f9e6 	bl	800a034 <TIM_CCxChannelCmd>
      break;
 8008c68:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f042 0201 	orr.w	r2, r2, #1
 8008c78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d026      	beq.n	8008cf4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d021      	beq.n	8008cf4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f06f 0202 	mvn.w	r2, #2
 8008cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d005      	beq.n	8008cda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	4798      	blx	r3
 8008cd8:	e009      	b.n	8008cee <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	f003 0304 	and.w	r3, r3, #4
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d026      	beq.n	8008d4c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d021      	beq.n	8008d4c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f06f 0204 	mvn.w	r2, #4
 8008d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2202      	movs	r2, #2
 8008d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d005      	beq.n	8008d32 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	4798      	blx	r3
 8008d30:	e009      	b.n	8008d46 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	f003 0308 	and.w	r3, r3, #8
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d026      	beq.n	8008da4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f003 0308 	and.w	r3, r3, #8
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d021      	beq.n	8008da4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f06f 0208 	mvn.w	r2, #8
 8008d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2204      	movs	r2, #4
 8008d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	f003 0303 	and.w	r3, r3, #3
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d005      	beq.n	8008d8a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	4798      	blx	r3
 8008d88:	e009      	b.n	8008d9e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	f003 0310 	and.w	r3, r3, #16
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d026      	beq.n	8008dfc <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f003 0310 	and.w	r3, r3, #16
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d021      	beq.n	8008dfc <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f06f 0210 	mvn.w	r2, #16
 8008dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2208      	movs	r2, #8
 8008dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d005      	beq.n	8008de2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	4798      	blx	r3
 8008de0:	e009      	b.n	8008df6 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	f003 0301 	and.w	r3, r3, #1
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00e      	beq.n	8008e24 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d009      	beq.n	8008e24 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f06f 0201 	mvn.w	r2, #1
 8008e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d104      	bne.n	8008e38 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00e      	beq.n	8008e56 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d009      	beq.n	8008e56 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00e      	beq.n	8008e7e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d009      	beq.n	8008e7e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00e      	beq.n	8008ea6 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d009      	beq.n	8008ea6 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	f003 0320 	and.w	r3, r3, #32
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00e      	beq.n	8008ece <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f003 0320 	and.w	r3, r3, #32
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d009      	beq.n	8008ece <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f06f 0220 	mvn.w	r2, #32
 8008ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00e      	beq.n	8008ef6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d009      	beq.n	8008ef6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00e      	beq.n	8008f1e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d009      	beq.n	8008f1e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00e      	beq.n	8008f46 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d009      	beq.n	8008f46 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00e      	beq.n	8008f6e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d009      	beq.n	8008f6e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f6e:	bf00      	nop
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
	...

08008f78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d101      	bne.n	8008f96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f92:	2302      	movs	r3, #2
 8008f94:	e0ff      	b.n	8009196 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2b14      	cmp	r3, #20
 8008fa2:	f200 80f0 	bhi.w	8009186 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8008fac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fac:	08009001 	.word	0x08009001
 8008fb0:	08009187 	.word	0x08009187
 8008fb4:	08009187 	.word	0x08009187
 8008fb8:	08009187 	.word	0x08009187
 8008fbc:	08009041 	.word	0x08009041
 8008fc0:	08009187 	.word	0x08009187
 8008fc4:	08009187 	.word	0x08009187
 8008fc8:	08009187 	.word	0x08009187
 8008fcc:	08009083 	.word	0x08009083
 8008fd0:	08009187 	.word	0x08009187
 8008fd4:	08009187 	.word	0x08009187
 8008fd8:	08009187 	.word	0x08009187
 8008fdc:	080090c3 	.word	0x080090c3
 8008fe0:	08009187 	.word	0x08009187
 8008fe4:	08009187 	.word	0x08009187
 8008fe8:	08009187 	.word	0x08009187
 8008fec:	08009105 	.word	0x08009105
 8008ff0:	08009187 	.word	0x08009187
 8008ff4:	08009187 	.word	0x08009187
 8008ff8:	08009187 	.word	0x08009187
 8008ffc:	08009145 	.word	0x08009145
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68b9      	ldr	r1, [r7, #8]
 8009006:	4618      	mov	r0, r3
 8009008:	f000 fc4e 	bl	80098a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	699a      	ldr	r2, [r3, #24]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f042 0208 	orr.w	r2, r2, #8
 800901a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	699a      	ldr	r2, [r3, #24]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f022 0204 	bic.w	r2, r2, #4
 800902a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6999      	ldr	r1, [r3, #24]
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	691a      	ldr	r2, [r3, #16]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	430a      	orrs	r2, r1
 800903c:	619a      	str	r2, [r3, #24]
      break;
 800903e:	e0a5      	b.n	800918c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68b9      	ldr	r1, [r7, #8]
 8009046:	4618      	mov	r0, r3
 8009048:	f000 fcc8 	bl	80099dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	699a      	ldr	r2, [r3, #24]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800905a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	699a      	ldr	r2, [r3, #24]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800906a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6999      	ldr	r1, [r3, #24]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	021a      	lsls	r2, r3, #8
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	430a      	orrs	r2, r1
 800907e:	619a      	str	r2, [r3, #24]
      break;
 8009080:	e084      	b.n	800918c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68b9      	ldr	r1, [r7, #8]
 8009088:	4618      	mov	r0, r3
 800908a:	f000 fd3b 	bl	8009b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	69da      	ldr	r2, [r3, #28]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f042 0208 	orr.w	r2, r2, #8
 800909c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	69da      	ldr	r2, [r3, #28]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f022 0204 	bic.w	r2, r2, #4
 80090ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	69d9      	ldr	r1, [r3, #28]
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	691a      	ldr	r2, [r3, #16]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	430a      	orrs	r2, r1
 80090be:	61da      	str	r2, [r3, #28]
      break;
 80090c0:	e064      	b.n	800918c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68b9      	ldr	r1, [r7, #8]
 80090c8:	4618      	mov	r0, r3
 80090ca:	f000 fdad 	bl	8009c28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	69da      	ldr	r2, [r3, #28]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	69da      	ldr	r2, [r3, #28]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	69d9      	ldr	r1, [r3, #28]
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	021a      	lsls	r2, r3, #8
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	430a      	orrs	r2, r1
 8009100:	61da      	str	r2, [r3, #28]
      break;
 8009102:	e043      	b.n	800918c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68b9      	ldr	r1, [r7, #8]
 800910a:	4618      	mov	r0, r3
 800910c:	f000 fe20 	bl	8009d50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f042 0208 	orr.w	r2, r2, #8
 800911e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f022 0204 	bic.w	r2, r2, #4
 800912e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	691a      	ldr	r2, [r3, #16]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	430a      	orrs	r2, r1
 8009140:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009142:	e023      	b.n	800918c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68b9      	ldr	r1, [r7, #8]
 800914a:	4618      	mov	r0, r3
 800914c:	f000 fe6a 	bl	8009e24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800915e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800916e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	021a      	lsls	r2, r3, #8
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	430a      	orrs	r2, r1
 8009182:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009184:	e002      	b.n	800918c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	75fb      	strb	r3, [r7, #23]
      break;
 800918a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009194:	7dfb      	ldrb	r3, [r7, #23]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3718      	adds	r7, #24
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop

080091a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d101      	bne.n	80091bc <HAL_TIM_ConfigClockSource+0x1c>
 80091b8:	2302      	movs	r3, #2
 80091ba:	e0f6      	b.n	80093aa <HAL_TIM_ConfigClockSource+0x20a>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2202      	movs	r2, #2
 80091c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80091da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80091de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80091e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a6f      	ldr	r2, [pc, #444]	@ (80093b4 <HAL_TIM_ConfigClockSource+0x214>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	f000 80c1 	beq.w	800937e <HAL_TIM_ConfigClockSource+0x1de>
 80091fc:	4a6d      	ldr	r2, [pc, #436]	@ (80093b4 <HAL_TIM_ConfigClockSource+0x214>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	f200 80c6 	bhi.w	8009390 <HAL_TIM_ConfigClockSource+0x1f0>
 8009204:	4a6c      	ldr	r2, [pc, #432]	@ (80093b8 <HAL_TIM_ConfigClockSource+0x218>)
 8009206:	4293      	cmp	r3, r2
 8009208:	f000 80b9 	beq.w	800937e <HAL_TIM_ConfigClockSource+0x1de>
 800920c:	4a6a      	ldr	r2, [pc, #424]	@ (80093b8 <HAL_TIM_ConfigClockSource+0x218>)
 800920e:	4293      	cmp	r3, r2
 8009210:	f200 80be 	bhi.w	8009390 <HAL_TIM_ConfigClockSource+0x1f0>
 8009214:	4a69      	ldr	r2, [pc, #420]	@ (80093bc <HAL_TIM_ConfigClockSource+0x21c>)
 8009216:	4293      	cmp	r3, r2
 8009218:	f000 80b1 	beq.w	800937e <HAL_TIM_ConfigClockSource+0x1de>
 800921c:	4a67      	ldr	r2, [pc, #412]	@ (80093bc <HAL_TIM_ConfigClockSource+0x21c>)
 800921e:	4293      	cmp	r3, r2
 8009220:	f200 80b6 	bhi.w	8009390 <HAL_TIM_ConfigClockSource+0x1f0>
 8009224:	4a66      	ldr	r2, [pc, #408]	@ (80093c0 <HAL_TIM_ConfigClockSource+0x220>)
 8009226:	4293      	cmp	r3, r2
 8009228:	f000 80a9 	beq.w	800937e <HAL_TIM_ConfigClockSource+0x1de>
 800922c:	4a64      	ldr	r2, [pc, #400]	@ (80093c0 <HAL_TIM_ConfigClockSource+0x220>)
 800922e:	4293      	cmp	r3, r2
 8009230:	f200 80ae 	bhi.w	8009390 <HAL_TIM_ConfigClockSource+0x1f0>
 8009234:	4a63      	ldr	r2, [pc, #396]	@ (80093c4 <HAL_TIM_ConfigClockSource+0x224>)
 8009236:	4293      	cmp	r3, r2
 8009238:	f000 80a1 	beq.w	800937e <HAL_TIM_ConfigClockSource+0x1de>
 800923c:	4a61      	ldr	r2, [pc, #388]	@ (80093c4 <HAL_TIM_ConfigClockSource+0x224>)
 800923e:	4293      	cmp	r3, r2
 8009240:	f200 80a6 	bhi.w	8009390 <HAL_TIM_ConfigClockSource+0x1f0>
 8009244:	4a60      	ldr	r2, [pc, #384]	@ (80093c8 <HAL_TIM_ConfigClockSource+0x228>)
 8009246:	4293      	cmp	r3, r2
 8009248:	f000 8099 	beq.w	800937e <HAL_TIM_ConfigClockSource+0x1de>
 800924c:	4a5e      	ldr	r2, [pc, #376]	@ (80093c8 <HAL_TIM_ConfigClockSource+0x228>)
 800924e:	4293      	cmp	r3, r2
 8009250:	f200 809e 	bhi.w	8009390 <HAL_TIM_ConfigClockSource+0x1f0>
 8009254:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009258:	f000 8091 	beq.w	800937e <HAL_TIM_ConfigClockSource+0x1de>
 800925c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009260:	f200 8096 	bhi.w	8009390 <HAL_TIM_ConfigClockSource+0x1f0>
 8009264:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009268:	f000 8089 	beq.w	800937e <HAL_TIM_ConfigClockSource+0x1de>
 800926c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009270:	f200 808e 	bhi.w	8009390 <HAL_TIM_ConfigClockSource+0x1f0>
 8009274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009278:	d03e      	beq.n	80092f8 <HAL_TIM_ConfigClockSource+0x158>
 800927a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800927e:	f200 8087 	bhi.w	8009390 <HAL_TIM_ConfigClockSource+0x1f0>
 8009282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009286:	f000 8086 	beq.w	8009396 <HAL_TIM_ConfigClockSource+0x1f6>
 800928a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800928e:	d87f      	bhi.n	8009390 <HAL_TIM_ConfigClockSource+0x1f0>
 8009290:	2b70      	cmp	r3, #112	@ 0x70
 8009292:	d01a      	beq.n	80092ca <HAL_TIM_ConfigClockSource+0x12a>
 8009294:	2b70      	cmp	r3, #112	@ 0x70
 8009296:	d87b      	bhi.n	8009390 <HAL_TIM_ConfigClockSource+0x1f0>
 8009298:	2b60      	cmp	r3, #96	@ 0x60
 800929a:	d050      	beq.n	800933e <HAL_TIM_ConfigClockSource+0x19e>
 800929c:	2b60      	cmp	r3, #96	@ 0x60
 800929e:	d877      	bhi.n	8009390 <HAL_TIM_ConfigClockSource+0x1f0>
 80092a0:	2b50      	cmp	r3, #80	@ 0x50
 80092a2:	d03c      	beq.n	800931e <HAL_TIM_ConfigClockSource+0x17e>
 80092a4:	2b50      	cmp	r3, #80	@ 0x50
 80092a6:	d873      	bhi.n	8009390 <HAL_TIM_ConfigClockSource+0x1f0>
 80092a8:	2b40      	cmp	r3, #64	@ 0x40
 80092aa:	d058      	beq.n	800935e <HAL_TIM_ConfigClockSource+0x1be>
 80092ac:	2b40      	cmp	r3, #64	@ 0x40
 80092ae:	d86f      	bhi.n	8009390 <HAL_TIM_ConfigClockSource+0x1f0>
 80092b0:	2b30      	cmp	r3, #48	@ 0x30
 80092b2:	d064      	beq.n	800937e <HAL_TIM_ConfigClockSource+0x1de>
 80092b4:	2b30      	cmp	r3, #48	@ 0x30
 80092b6:	d86b      	bhi.n	8009390 <HAL_TIM_ConfigClockSource+0x1f0>
 80092b8:	2b20      	cmp	r3, #32
 80092ba:	d060      	beq.n	800937e <HAL_TIM_ConfigClockSource+0x1de>
 80092bc:	2b20      	cmp	r3, #32
 80092be:	d867      	bhi.n	8009390 <HAL_TIM_ConfigClockSource+0x1f0>
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d05c      	beq.n	800937e <HAL_TIM_ConfigClockSource+0x1de>
 80092c4:	2b10      	cmp	r3, #16
 80092c6:	d05a      	beq.n	800937e <HAL_TIM_ConfigClockSource+0x1de>
 80092c8:	e062      	b.n	8009390 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092da:	f000 fe8b 	bl	8009ff4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80092ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	609a      	str	r2, [r3, #8]
      break;
 80092f6:	e04f      	b.n	8009398 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009308:	f000 fe74 	bl	8009ff4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	689a      	ldr	r2, [r3, #8]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800931a:	609a      	str	r2, [r3, #8]
      break;
 800931c:	e03c      	b.n	8009398 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800932a:	461a      	mov	r2, r3
 800932c:	f000 fde6 	bl	8009efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2150      	movs	r1, #80	@ 0x50
 8009336:	4618      	mov	r0, r3
 8009338:	f000 fe3f 	bl	8009fba <TIM_ITRx_SetConfig>
      break;
 800933c:	e02c      	b.n	8009398 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800934a:	461a      	mov	r2, r3
 800934c:	f000 fe05 	bl	8009f5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2160      	movs	r1, #96	@ 0x60
 8009356:	4618      	mov	r0, r3
 8009358:	f000 fe2f 	bl	8009fba <TIM_ITRx_SetConfig>
      break;
 800935c:	e01c      	b.n	8009398 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800936a:	461a      	mov	r2, r3
 800936c:	f000 fdc6 	bl	8009efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2140      	movs	r1, #64	@ 0x40
 8009376:	4618      	mov	r0, r3
 8009378:	f000 fe1f 	bl	8009fba <TIM_ITRx_SetConfig>
      break;
 800937c:	e00c      	b.n	8009398 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4619      	mov	r1, r3
 8009388:	4610      	mov	r0, r2
 800938a:	f000 fe16 	bl	8009fba <TIM_ITRx_SetConfig>
      break;
 800938e:	e003      	b.n	8009398 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	73fb      	strb	r3, [r7, #15]
      break;
 8009394:	e000      	b.n	8009398 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009396:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	00100070 	.word	0x00100070
 80093b8:	00100060 	.word	0x00100060
 80093bc:	00100050 	.word	0x00100050
 80093c0:	00100040 	.word	0x00100040
 80093c4:	00100030 	.word	0x00100030
 80093c8:	00100020 	.word	0x00100020

080093cc <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009424:	bf00      	nop
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009438:	bf00      	nop
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009480:	b480      	push	{r7}
 8009482:	b087      	sub	sp, #28
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	460b      	mov	r3, r1
 800948a:	607a      	str	r2, [r7, #4]
 800948c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800948e:	2300      	movs	r3, #0
 8009490:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e14a      	b.n	8009732 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	f040 80dd 	bne.w	8009664 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80094aa:	7afb      	ldrb	r3, [r7, #11]
 80094ac:	2b1f      	cmp	r3, #31
 80094ae:	f200 80d6 	bhi.w	800965e <HAL_TIM_RegisterCallback+0x1de>
 80094b2:	a201      	add	r2, pc, #4	@ (adr r2, 80094b8 <HAL_TIM_RegisterCallback+0x38>)
 80094b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b8:	08009539 	.word	0x08009539
 80094bc:	08009541 	.word	0x08009541
 80094c0:	08009549 	.word	0x08009549
 80094c4:	08009551 	.word	0x08009551
 80094c8:	08009559 	.word	0x08009559
 80094cc:	08009561 	.word	0x08009561
 80094d0:	08009569 	.word	0x08009569
 80094d4:	08009571 	.word	0x08009571
 80094d8:	08009579 	.word	0x08009579
 80094dc:	08009581 	.word	0x08009581
 80094e0:	08009589 	.word	0x08009589
 80094e4:	08009591 	.word	0x08009591
 80094e8:	08009599 	.word	0x08009599
 80094ec:	080095a1 	.word	0x080095a1
 80094f0:	080095ab 	.word	0x080095ab
 80094f4:	080095b5 	.word	0x080095b5
 80094f8:	080095bf 	.word	0x080095bf
 80094fc:	080095c9 	.word	0x080095c9
 8009500:	080095d3 	.word	0x080095d3
 8009504:	080095dd 	.word	0x080095dd
 8009508:	080095e7 	.word	0x080095e7
 800950c:	080095f1 	.word	0x080095f1
 8009510:	080095fb 	.word	0x080095fb
 8009514:	08009605 	.word	0x08009605
 8009518:	0800960f 	.word	0x0800960f
 800951c:	08009619 	.word	0x08009619
 8009520:	08009623 	.word	0x08009623
 8009524:	0800962d 	.word	0x0800962d
 8009528:	08009637 	.word	0x08009637
 800952c:	08009641 	.word	0x08009641
 8009530:	0800964b 	.word	0x0800964b
 8009534:	08009655 	.word	0x08009655
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800953e:	e0f7      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009546:	e0f3      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800954e:	e0ef      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009556:	e0eb      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800955e:	e0e7      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009566:	e0e3      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800956e:	e0df      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009576:	e0db      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800957e:	e0d7      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009586:	e0d3      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800958e:	e0cf      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009596:	e0cb      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800959e:	e0c7      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80095a8:	e0c2      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80095b2:	e0bd      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80095bc:	e0b8      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80095c6:	e0b3      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80095d0:	e0ae      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80095da:	e0a9      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80095e4:	e0a4      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80095ee:	e09f      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80095f8:	e09a      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009602:	e095      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800960c:	e090      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009616:	e08b      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009620:	e086      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800962a:	e081      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009634:	e07c      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800963e:	e077      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009648:	e072      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009652:	e06d      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800965c:	e068      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	75fb      	strb	r3, [r7, #23]
        break;
 8009662:	e065      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800966a:	b2db      	uxtb	r3, r3
 800966c:	2b00      	cmp	r3, #0
 800966e:	d15d      	bne.n	800972c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8009670:	7afb      	ldrb	r3, [r7, #11]
 8009672:	2b0d      	cmp	r3, #13
 8009674:	d857      	bhi.n	8009726 <HAL_TIM_RegisterCallback+0x2a6>
 8009676:	a201      	add	r2, pc, #4	@ (adr r2, 800967c <HAL_TIM_RegisterCallback+0x1fc>)
 8009678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967c:	080096b5 	.word	0x080096b5
 8009680:	080096bd 	.word	0x080096bd
 8009684:	080096c5 	.word	0x080096c5
 8009688:	080096cd 	.word	0x080096cd
 800968c:	080096d5 	.word	0x080096d5
 8009690:	080096dd 	.word	0x080096dd
 8009694:	080096e5 	.word	0x080096e5
 8009698:	080096ed 	.word	0x080096ed
 800969c:	080096f5 	.word	0x080096f5
 80096a0:	080096fd 	.word	0x080096fd
 80096a4:	08009705 	.word	0x08009705
 80096a8:	0800970d 	.word	0x0800970d
 80096ac:	08009715 	.word	0x08009715
 80096b0:	0800971d 	.word	0x0800971d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80096ba:	e039      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80096c2:	e035      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80096ca:	e031      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80096d2:	e02d      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80096da:	e029      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80096e2:	e025      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80096ea:	e021      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80096f2:	e01d      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80096fa:	e019      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009702:	e015      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800970a:	e011      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009712:	e00d      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800971a:	e009      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009724:	e004      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	75fb      	strb	r3, [r7, #23]
        break;
 800972a:	e001      	b.n	8009730 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009730:	7dfb      	ldrb	r3, [r7, #23]
}
 8009732:	4618      	mov	r0, r3
 8009734:	371c      	adds	r7, #28
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop

08009740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a4c      	ldr	r2, [pc, #304]	@ (8009884 <TIM_Base_SetConfig+0x144>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d017      	beq.n	8009788 <TIM_Base_SetConfig+0x48>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800975e:	d013      	beq.n	8009788 <TIM_Base_SetConfig+0x48>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a49      	ldr	r2, [pc, #292]	@ (8009888 <TIM_Base_SetConfig+0x148>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d00f      	beq.n	8009788 <TIM_Base_SetConfig+0x48>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a48      	ldr	r2, [pc, #288]	@ (800988c <TIM_Base_SetConfig+0x14c>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d00b      	beq.n	8009788 <TIM_Base_SetConfig+0x48>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a47      	ldr	r2, [pc, #284]	@ (8009890 <TIM_Base_SetConfig+0x150>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d007      	beq.n	8009788 <TIM_Base_SetConfig+0x48>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a46      	ldr	r2, [pc, #280]	@ (8009894 <TIM_Base_SetConfig+0x154>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d003      	beq.n	8009788 <TIM_Base_SetConfig+0x48>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a45      	ldr	r2, [pc, #276]	@ (8009898 <TIM_Base_SetConfig+0x158>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d108      	bne.n	800979a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800978e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	4313      	orrs	r3, r2
 8009798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a39      	ldr	r2, [pc, #228]	@ (8009884 <TIM_Base_SetConfig+0x144>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d023      	beq.n	80097ea <TIM_Base_SetConfig+0xaa>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097a8:	d01f      	beq.n	80097ea <TIM_Base_SetConfig+0xaa>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a36      	ldr	r2, [pc, #216]	@ (8009888 <TIM_Base_SetConfig+0x148>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d01b      	beq.n	80097ea <TIM_Base_SetConfig+0xaa>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a35      	ldr	r2, [pc, #212]	@ (800988c <TIM_Base_SetConfig+0x14c>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d017      	beq.n	80097ea <TIM_Base_SetConfig+0xaa>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a34      	ldr	r2, [pc, #208]	@ (8009890 <TIM_Base_SetConfig+0x150>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d013      	beq.n	80097ea <TIM_Base_SetConfig+0xaa>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a33      	ldr	r2, [pc, #204]	@ (8009894 <TIM_Base_SetConfig+0x154>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d00f      	beq.n	80097ea <TIM_Base_SetConfig+0xaa>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a33      	ldr	r2, [pc, #204]	@ (800989c <TIM_Base_SetConfig+0x15c>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d00b      	beq.n	80097ea <TIM_Base_SetConfig+0xaa>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a32      	ldr	r2, [pc, #200]	@ (80098a0 <TIM_Base_SetConfig+0x160>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d007      	beq.n	80097ea <TIM_Base_SetConfig+0xaa>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a31      	ldr	r2, [pc, #196]	@ (80098a4 <TIM_Base_SetConfig+0x164>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d003      	beq.n	80097ea <TIM_Base_SetConfig+0xaa>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a2c      	ldr	r2, [pc, #176]	@ (8009898 <TIM_Base_SetConfig+0x158>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d108      	bne.n	80097fc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	4313      	orrs	r3, r2
 8009808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	689a      	ldr	r2, [r3, #8]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a18      	ldr	r2, [pc, #96]	@ (8009884 <TIM_Base_SetConfig+0x144>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d013      	beq.n	8009850 <TIM_Base_SetConfig+0x110>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a1a      	ldr	r2, [pc, #104]	@ (8009894 <TIM_Base_SetConfig+0x154>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d00f      	beq.n	8009850 <TIM_Base_SetConfig+0x110>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a1a      	ldr	r2, [pc, #104]	@ (800989c <TIM_Base_SetConfig+0x15c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d00b      	beq.n	8009850 <TIM_Base_SetConfig+0x110>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a19      	ldr	r2, [pc, #100]	@ (80098a0 <TIM_Base_SetConfig+0x160>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d007      	beq.n	8009850 <TIM_Base_SetConfig+0x110>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a18      	ldr	r2, [pc, #96]	@ (80098a4 <TIM_Base_SetConfig+0x164>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d003      	beq.n	8009850 <TIM_Base_SetConfig+0x110>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a13      	ldr	r2, [pc, #76]	@ (8009898 <TIM_Base_SetConfig+0x158>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d103      	bne.n	8009858 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	691a      	ldr	r2, [r3, #16]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	f003 0301 	and.w	r3, r3, #1
 8009866:	2b01      	cmp	r3, #1
 8009868:	d105      	bne.n	8009876 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	f023 0201 	bic.w	r2, r3, #1
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	611a      	str	r2, [r3, #16]
  }
}
 8009876:	bf00      	nop
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	40012c00 	.word	0x40012c00
 8009888:	40000400 	.word	0x40000400
 800988c:	40000800 	.word	0x40000800
 8009890:	40000c00 	.word	0x40000c00
 8009894:	40013400 	.word	0x40013400
 8009898:	40015000 	.word	0x40015000
 800989c:	40014000 	.word	0x40014000
 80098a0:	40014400 	.word	0x40014400
 80098a4:	40014800 	.word	0x40014800

080098a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b087      	sub	sp, #28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a1b      	ldr	r3, [r3, #32]
 80098bc:	f023 0201 	bic.w	r2, r3, #1
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f023 0303 	bic.w	r3, r3, #3
 80098e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f023 0302 	bic.w	r3, r3, #2
 80098f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	697a      	ldr	r2, [r7, #20]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a30      	ldr	r2, [pc, #192]	@ (80099c4 <TIM_OC1_SetConfig+0x11c>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d013      	beq.n	8009930 <TIM_OC1_SetConfig+0x88>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a2f      	ldr	r2, [pc, #188]	@ (80099c8 <TIM_OC1_SetConfig+0x120>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d00f      	beq.n	8009930 <TIM_OC1_SetConfig+0x88>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a2e      	ldr	r2, [pc, #184]	@ (80099cc <TIM_OC1_SetConfig+0x124>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d00b      	beq.n	8009930 <TIM_OC1_SetConfig+0x88>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a2d      	ldr	r2, [pc, #180]	@ (80099d0 <TIM_OC1_SetConfig+0x128>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d007      	beq.n	8009930 <TIM_OC1_SetConfig+0x88>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a2c      	ldr	r2, [pc, #176]	@ (80099d4 <TIM_OC1_SetConfig+0x12c>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d003      	beq.n	8009930 <TIM_OC1_SetConfig+0x88>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a2b      	ldr	r2, [pc, #172]	@ (80099d8 <TIM_OC1_SetConfig+0x130>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d10c      	bne.n	800994a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	f023 0308 	bic.w	r3, r3, #8
 8009936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	697a      	ldr	r2, [r7, #20]
 800993e:	4313      	orrs	r3, r2
 8009940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	f023 0304 	bic.w	r3, r3, #4
 8009948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a1d      	ldr	r2, [pc, #116]	@ (80099c4 <TIM_OC1_SetConfig+0x11c>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d013      	beq.n	800997a <TIM_OC1_SetConfig+0xd2>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a1c      	ldr	r2, [pc, #112]	@ (80099c8 <TIM_OC1_SetConfig+0x120>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d00f      	beq.n	800997a <TIM_OC1_SetConfig+0xd2>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a1b      	ldr	r2, [pc, #108]	@ (80099cc <TIM_OC1_SetConfig+0x124>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d00b      	beq.n	800997a <TIM_OC1_SetConfig+0xd2>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a1a      	ldr	r2, [pc, #104]	@ (80099d0 <TIM_OC1_SetConfig+0x128>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d007      	beq.n	800997a <TIM_OC1_SetConfig+0xd2>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a19      	ldr	r2, [pc, #100]	@ (80099d4 <TIM_OC1_SetConfig+0x12c>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d003      	beq.n	800997a <TIM_OC1_SetConfig+0xd2>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a18      	ldr	r2, [pc, #96]	@ (80099d8 <TIM_OC1_SetConfig+0x130>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d111      	bne.n	800999e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	4313      	orrs	r3, r2
 8009992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	4313      	orrs	r3, r2
 800999c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	685a      	ldr	r2, [r3, #4]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	621a      	str	r2, [r3, #32]
}
 80099b8:	bf00      	nop
 80099ba:	371c      	adds	r7, #28
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr
 80099c4:	40012c00 	.word	0x40012c00
 80099c8:	40013400 	.word	0x40013400
 80099cc:	40014000 	.word	0x40014000
 80099d0:	40014400 	.word	0x40014400
 80099d4:	40014800 	.word	0x40014800
 80099d8:	40015000 	.word	0x40015000

080099dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099dc:	b480      	push	{r7}
 80099de:	b087      	sub	sp, #28
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a1b      	ldr	r3, [r3, #32]
 80099f0:	f023 0210 	bic.w	r2, r3, #16
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	699b      	ldr	r3, [r3, #24]
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	021b      	lsls	r3, r3, #8
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	f023 0320 	bic.w	r3, r3, #32
 8009a2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	011b      	lsls	r3, r3, #4
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a2c      	ldr	r2, [pc, #176]	@ (8009aec <TIM_OC2_SetConfig+0x110>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d007      	beq.n	8009a50 <TIM_OC2_SetConfig+0x74>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a2b      	ldr	r2, [pc, #172]	@ (8009af0 <TIM_OC2_SetConfig+0x114>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d003      	beq.n	8009a50 <TIM_OC2_SetConfig+0x74>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8009af4 <TIM_OC2_SetConfig+0x118>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d10d      	bne.n	8009a6c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	011b      	lsls	r3, r3, #4
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8009aec <TIM_OC2_SetConfig+0x110>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d013      	beq.n	8009a9c <TIM_OC2_SetConfig+0xc0>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a1e      	ldr	r2, [pc, #120]	@ (8009af0 <TIM_OC2_SetConfig+0x114>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d00f      	beq.n	8009a9c <TIM_OC2_SetConfig+0xc0>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8009af8 <TIM_OC2_SetConfig+0x11c>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d00b      	beq.n	8009a9c <TIM_OC2_SetConfig+0xc0>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a1d      	ldr	r2, [pc, #116]	@ (8009afc <TIM_OC2_SetConfig+0x120>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d007      	beq.n	8009a9c <TIM_OC2_SetConfig+0xc0>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8009b00 <TIM_OC2_SetConfig+0x124>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d003      	beq.n	8009a9c <TIM_OC2_SetConfig+0xc0>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a17      	ldr	r2, [pc, #92]	@ (8009af4 <TIM_OC2_SetConfig+0x118>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d113      	bne.n	8009ac4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009aa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	695b      	ldr	r3, [r3, #20]
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	693a      	ldr	r2, [r7, #16]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	685a      	ldr	r2, [r3, #4]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	621a      	str	r2, [r3, #32]
}
 8009ade:	bf00      	nop
 8009ae0:	371c      	adds	r7, #28
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	40012c00 	.word	0x40012c00
 8009af0:	40013400 	.word	0x40013400
 8009af4:	40015000 	.word	0x40015000
 8009af8:	40014000 	.word	0x40014000
 8009afc:	40014400 	.word	0x40014400
 8009b00:	40014800 	.word	0x40014800

08009b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b087      	sub	sp, #28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a1b      	ldr	r3, [r3, #32]
 8009b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a1b      	ldr	r3, [r3, #32]
 8009b18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	69db      	ldr	r3, [r3, #28]
 8009b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f023 0303 	bic.w	r3, r3, #3
 8009b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	021b      	lsls	r3, r3, #8
 8009b58:	697a      	ldr	r2, [r7, #20]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a2b      	ldr	r2, [pc, #172]	@ (8009c10 <TIM_OC3_SetConfig+0x10c>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d007      	beq.n	8009b76 <TIM_OC3_SetConfig+0x72>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a2a      	ldr	r2, [pc, #168]	@ (8009c14 <TIM_OC3_SetConfig+0x110>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d003      	beq.n	8009b76 <TIM_OC3_SetConfig+0x72>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a29      	ldr	r2, [pc, #164]	@ (8009c18 <TIM_OC3_SetConfig+0x114>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d10d      	bne.n	8009b92 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	021b      	lsls	r3, r3, #8
 8009b84:	697a      	ldr	r2, [r7, #20]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4a1e      	ldr	r2, [pc, #120]	@ (8009c10 <TIM_OC3_SetConfig+0x10c>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d013      	beq.n	8009bc2 <TIM_OC3_SetConfig+0xbe>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8009c14 <TIM_OC3_SetConfig+0x110>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d00f      	beq.n	8009bc2 <TIM_OC3_SetConfig+0xbe>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8009c1c <TIM_OC3_SetConfig+0x118>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d00b      	beq.n	8009bc2 <TIM_OC3_SetConfig+0xbe>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a1c      	ldr	r2, [pc, #112]	@ (8009c20 <TIM_OC3_SetConfig+0x11c>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d007      	beq.n	8009bc2 <TIM_OC3_SetConfig+0xbe>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8009c24 <TIM_OC3_SetConfig+0x120>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d003      	beq.n	8009bc2 <TIM_OC3_SetConfig+0xbe>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a16      	ldr	r2, [pc, #88]	@ (8009c18 <TIM_OC3_SetConfig+0x114>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d113      	bne.n	8009bea <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	011b      	lsls	r3, r3, #4
 8009bd8:	693a      	ldr	r2, [r7, #16]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	011b      	lsls	r3, r3, #4
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	685a      	ldr	r2, [r3, #4]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	621a      	str	r2, [r3, #32]
}
 8009c04:	bf00      	nop
 8009c06:	371c      	adds	r7, #28
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	40012c00 	.word	0x40012c00
 8009c14:	40013400 	.word	0x40013400
 8009c18:	40015000 	.word	0x40015000
 8009c1c:	40014000 	.word	0x40014000
 8009c20:	40014400 	.word	0x40014400
 8009c24:	40014800 	.word	0x40014800

08009c28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b087      	sub	sp, #28
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a1b      	ldr	r3, [r3, #32]
 8009c3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	021b      	lsls	r3, r3, #8
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009c76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	031b      	lsls	r3, r3, #12
 8009c7e:	697a      	ldr	r2, [r7, #20]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a2c      	ldr	r2, [pc, #176]	@ (8009d38 <TIM_OC4_SetConfig+0x110>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d007      	beq.n	8009c9c <TIM_OC4_SetConfig+0x74>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a2b      	ldr	r2, [pc, #172]	@ (8009d3c <TIM_OC4_SetConfig+0x114>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d003      	beq.n	8009c9c <TIM_OC4_SetConfig+0x74>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a2a      	ldr	r2, [pc, #168]	@ (8009d40 <TIM_OC4_SetConfig+0x118>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d10d      	bne.n	8009cb8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	031b      	lsls	r3, r3, #12
 8009caa:	697a      	ldr	r2, [r7, #20]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009cb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a1f      	ldr	r2, [pc, #124]	@ (8009d38 <TIM_OC4_SetConfig+0x110>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d013      	beq.n	8009ce8 <TIM_OC4_SetConfig+0xc0>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8009d3c <TIM_OC4_SetConfig+0x114>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d00f      	beq.n	8009ce8 <TIM_OC4_SetConfig+0xc0>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a1e      	ldr	r2, [pc, #120]	@ (8009d44 <TIM_OC4_SetConfig+0x11c>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d00b      	beq.n	8009ce8 <TIM_OC4_SetConfig+0xc0>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8009d48 <TIM_OC4_SetConfig+0x120>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d007      	beq.n	8009ce8 <TIM_OC4_SetConfig+0xc0>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a1c      	ldr	r2, [pc, #112]	@ (8009d4c <TIM_OC4_SetConfig+0x124>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d003      	beq.n	8009ce8 <TIM_OC4_SetConfig+0xc0>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a17      	ldr	r2, [pc, #92]	@ (8009d40 <TIM_OC4_SetConfig+0x118>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d113      	bne.n	8009d10 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009cee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009cf6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	695b      	ldr	r3, [r3, #20]
 8009cfc:	019b      	lsls	r3, r3, #6
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	699b      	ldr	r3, [r3, #24]
 8009d08:	019b      	lsls	r3, r3, #6
 8009d0a:	693a      	ldr	r2, [r7, #16]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	693a      	ldr	r2, [r7, #16]
 8009d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	697a      	ldr	r2, [r7, #20]
 8009d28:	621a      	str	r2, [r3, #32]
}
 8009d2a:	bf00      	nop
 8009d2c:	371c      	adds	r7, #28
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	40012c00 	.word	0x40012c00
 8009d3c:	40013400 	.word	0x40013400
 8009d40:	40015000 	.word	0x40015000
 8009d44:	40014000 	.word	0x40014000
 8009d48:	40014400 	.word	0x40014400
 8009d4c:	40014800 	.word	0x40014800

08009d50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b087      	sub	sp, #28
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a1b      	ldr	r3, [r3, #32]
 8009d5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a1b      	ldr	r3, [r3, #32]
 8009d64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009d94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	041b      	lsls	r3, r3, #16
 8009d9c:	693a      	ldr	r2, [r7, #16]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a19      	ldr	r2, [pc, #100]	@ (8009e0c <TIM_OC5_SetConfig+0xbc>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d013      	beq.n	8009dd2 <TIM_OC5_SetConfig+0x82>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a18      	ldr	r2, [pc, #96]	@ (8009e10 <TIM_OC5_SetConfig+0xc0>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d00f      	beq.n	8009dd2 <TIM_OC5_SetConfig+0x82>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a17      	ldr	r2, [pc, #92]	@ (8009e14 <TIM_OC5_SetConfig+0xc4>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d00b      	beq.n	8009dd2 <TIM_OC5_SetConfig+0x82>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a16      	ldr	r2, [pc, #88]	@ (8009e18 <TIM_OC5_SetConfig+0xc8>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d007      	beq.n	8009dd2 <TIM_OC5_SetConfig+0x82>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a15      	ldr	r2, [pc, #84]	@ (8009e1c <TIM_OC5_SetConfig+0xcc>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d003      	beq.n	8009dd2 <TIM_OC5_SetConfig+0x82>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a14      	ldr	r2, [pc, #80]	@ (8009e20 <TIM_OC5_SetConfig+0xd0>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d109      	bne.n	8009de6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	695b      	ldr	r3, [r3, #20]
 8009dde:	021b      	lsls	r3, r3, #8
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	693a      	ldr	r2, [r7, #16]
 8009dfe:	621a      	str	r2, [r3, #32]
}
 8009e00:	bf00      	nop
 8009e02:	371c      	adds	r7, #28
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	40012c00 	.word	0x40012c00
 8009e10:	40013400 	.word	0x40013400
 8009e14:	40014000 	.word	0x40014000
 8009e18:	40014400 	.word	0x40014400
 8009e1c:	40014800 	.word	0x40014800
 8009e20:	40015000 	.word	0x40015000

08009e24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b087      	sub	sp, #28
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a1b      	ldr	r3, [r3, #32]
 8009e32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a1b      	ldr	r3, [r3, #32]
 8009e38:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009e52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	021b      	lsls	r3, r3, #8
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	051b      	lsls	r3, r3, #20
 8009e72:	693a      	ldr	r2, [r7, #16]
 8009e74:	4313      	orrs	r3, r2
 8009e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a1a      	ldr	r2, [pc, #104]	@ (8009ee4 <TIM_OC6_SetConfig+0xc0>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d013      	beq.n	8009ea8 <TIM_OC6_SetConfig+0x84>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a19      	ldr	r2, [pc, #100]	@ (8009ee8 <TIM_OC6_SetConfig+0xc4>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d00f      	beq.n	8009ea8 <TIM_OC6_SetConfig+0x84>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a18      	ldr	r2, [pc, #96]	@ (8009eec <TIM_OC6_SetConfig+0xc8>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d00b      	beq.n	8009ea8 <TIM_OC6_SetConfig+0x84>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4a17      	ldr	r2, [pc, #92]	@ (8009ef0 <TIM_OC6_SetConfig+0xcc>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d007      	beq.n	8009ea8 <TIM_OC6_SetConfig+0x84>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a16      	ldr	r2, [pc, #88]	@ (8009ef4 <TIM_OC6_SetConfig+0xd0>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d003      	beq.n	8009ea8 <TIM_OC6_SetConfig+0x84>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a15      	ldr	r2, [pc, #84]	@ (8009ef8 <TIM_OC6_SetConfig+0xd4>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d109      	bne.n	8009ebc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009eae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	695b      	ldr	r3, [r3, #20]
 8009eb4:	029b      	lsls	r3, r3, #10
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	621a      	str	r2, [r3, #32]
}
 8009ed6:	bf00      	nop
 8009ed8:	371c      	adds	r7, #28
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	40012c00 	.word	0x40012c00
 8009ee8:	40013400 	.word	0x40013400
 8009eec:	40014000 	.word	0x40014000
 8009ef0:	40014400 	.word	0x40014400
 8009ef4:	40014800 	.word	0x40014800
 8009ef8:	40015000 	.word	0x40015000

08009efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b087      	sub	sp, #28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	f023 0201 	bic.w	r2, r3, #1
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	011b      	lsls	r3, r3, #4
 8009f2c:	693a      	ldr	r2, [r7, #16]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	f023 030a 	bic.w	r3, r3, #10
 8009f38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	621a      	str	r2, [r3, #32]
}
 8009f4e:	bf00      	nop
 8009f50:	371c      	adds	r7, #28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	b087      	sub	sp, #28
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	60f8      	str	r0, [r7, #12]
 8009f62:	60b9      	str	r1, [r7, #8]
 8009f64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6a1b      	ldr	r3, [r3, #32]
 8009f70:	f023 0210 	bic.w	r2, r3, #16
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	699b      	ldr	r3, [r3, #24]
 8009f7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009f84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	031b      	lsls	r3, r3, #12
 8009f8a:	693a      	ldr	r2, [r7, #16]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009f96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	011b      	lsls	r3, r3, #4
 8009f9c:	697a      	ldr	r2, [r7, #20]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	621a      	str	r2, [r3, #32]
}
 8009fae:	bf00      	nop
 8009fb0:	371c      	adds	r7, #28
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009fba:	b480      	push	{r7}
 8009fbc:	b085      	sub	sp, #20
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009fd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009fd6:	683a      	ldr	r2, [r7, #0]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	f043 0307 	orr.w	r3, r3, #7
 8009fe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	609a      	str	r2, [r3, #8]
}
 8009fe8:	bf00      	nop
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b087      	sub	sp, #28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
 800a000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a00e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	021a      	lsls	r2, r3, #8
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	431a      	orrs	r2, r3
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	697a      	ldr	r2, [r7, #20]
 800a01e:	4313      	orrs	r3, r2
 800a020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	609a      	str	r2, [r3, #8]
}
 800a028:	bf00      	nop
 800a02a:	371c      	adds	r7, #28
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a034:	b480      	push	{r7}
 800a036:	b087      	sub	sp, #28
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	f003 031f 	and.w	r3, r3, #31
 800a046:	2201      	movs	r2, #1
 800a048:	fa02 f303 	lsl.w	r3, r2, r3
 800a04c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6a1a      	ldr	r2, [r3, #32]
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	43db      	mvns	r3, r3
 800a056:	401a      	ands	r2, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6a1a      	ldr	r2, [r3, #32]
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	f003 031f 	and.w	r3, r3, #31
 800a066:	6879      	ldr	r1, [r7, #4]
 800a068:	fa01 f303 	lsl.w	r3, r1, r3
 800a06c:	431a      	orrs	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	621a      	str	r2, [r3, #32]
}
 800a072:	bf00      	nop
 800a074:	371c      	adds	r7, #28
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
	...

0800a080 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a26      	ldr	r2, [pc, #152]	@ (800a124 <TIM_ResetCallback+0xa4>)
 800a08c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a25      	ldr	r2, [pc, #148]	@ (800a128 <TIM_ResetCallback+0xa8>)
 800a094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a24      	ldr	r2, [pc, #144]	@ (800a12c <TIM_ResetCallback+0xac>)
 800a09c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a23      	ldr	r2, [pc, #140]	@ (800a130 <TIM_ResetCallback+0xb0>)
 800a0a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a22      	ldr	r2, [pc, #136]	@ (800a134 <TIM_ResetCallback+0xb4>)
 800a0ac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a21      	ldr	r2, [pc, #132]	@ (800a138 <TIM_ResetCallback+0xb8>)
 800a0b4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a20      	ldr	r2, [pc, #128]	@ (800a13c <TIM_ResetCallback+0xbc>)
 800a0bc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4a1f      	ldr	r2, [pc, #124]	@ (800a140 <TIM_ResetCallback+0xc0>)
 800a0c4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a1e      	ldr	r2, [pc, #120]	@ (800a144 <TIM_ResetCallback+0xc4>)
 800a0cc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a1d      	ldr	r2, [pc, #116]	@ (800a148 <TIM_ResetCallback+0xc8>)
 800a0d4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a1c      	ldr	r2, [pc, #112]	@ (800a14c <TIM_ResetCallback+0xcc>)
 800a0dc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a1b      	ldr	r2, [pc, #108]	@ (800a150 <TIM_ResetCallback+0xd0>)
 800a0e4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a1a      	ldr	r2, [pc, #104]	@ (800a154 <TIM_ResetCallback+0xd4>)
 800a0ec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a19      	ldr	r2, [pc, #100]	@ (800a158 <TIM_ResetCallback+0xd8>)
 800a0f4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a18      	ldr	r2, [pc, #96]	@ (800a15c <TIM_ResetCallback+0xdc>)
 800a0fc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a17      	ldr	r2, [pc, #92]	@ (800a160 <TIM_ResetCallback+0xe0>)
 800a104:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a16      	ldr	r2, [pc, #88]	@ (800a164 <TIM_ResetCallback+0xe4>)
 800a10c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a15      	ldr	r2, [pc, #84]	@ (800a168 <TIM_ResetCallback+0xe8>)
 800a114:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr
 800a124:	08002af5 	.word	0x08002af5
 800a128:	080093cd 	.word	0x080093cd
 800a12c:	08009445 	.word	0x08009445
 800a130:	08009459 	.word	0x08009459
 800a134:	080093f5 	.word	0x080093f5
 800a138:	08009409 	.word	0x08009409
 800a13c:	080093e1 	.word	0x080093e1
 800a140:	0800941d 	.word	0x0800941d
 800a144:	08009431 	.word	0x08009431
 800a148:	0800946d 	.word	0x0800946d
 800a14c:	0800a299 	.word	0x0800a299
 800a150:	0800a2ad 	.word	0x0800a2ad
 800a154:	0800a2c1 	.word	0x0800a2c1
 800a158:	0800a2d5 	.word	0x0800a2d5
 800a15c:	0800a2e9 	.word	0x0800a2e9
 800a160:	0800a2fd 	.word	0x0800a2fd
 800a164:	0800a311 	.word	0x0800a311
 800a168:	0800a325 	.word	0x0800a325

0800a16c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d101      	bne.n	800a184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a180:	2302      	movs	r3, #2
 800a182:	e074      	b.n	800a26e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2202      	movs	r2, #2
 800a190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a34      	ldr	r2, [pc, #208]	@ (800a27c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d009      	beq.n	800a1c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a33      	ldr	r2, [pc, #204]	@ (800a280 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d004      	beq.n	800a1c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a31      	ldr	r2, [pc, #196]	@ (800a284 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d108      	bne.n	800a1d4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a1c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a1da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a21      	ldr	r2, [pc, #132]	@ (800a27c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d022      	beq.n	800a242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a204:	d01d      	beq.n	800a242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a1f      	ldr	r2, [pc, #124]	@ (800a288 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d018      	beq.n	800a242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a1d      	ldr	r2, [pc, #116]	@ (800a28c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d013      	beq.n	800a242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a1c      	ldr	r2, [pc, #112]	@ (800a290 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d00e      	beq.n	800a242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a15      	ldr	r2, [pc, #84]	@ (800a280 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d009      	beq.n	800a242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a18      	ldr	r2, [pc, #96]	@ (800a294 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d004      	beq.n	800a242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a11      	ldr	r2, [pc, #68]	@ (800a284 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d10c      	bne.n	800a25c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a248:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	4313      	orrs	r3, r2
 800a252:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3714      	adds	r7, #20
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	40012c00 	.word	0x40012c00
 800a280:	40013400 	.word	0x40013400
 800a284:	40015000 	.word	0x40015000
 800a288:	40000400 	.word	0x40000400
 800a28c:	40000800 	.word	0x40000800
 800a290:	40000c00 	.word	0x40000c00
 800a294:	40014000 	.word	0x40014000

0800a298 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a2b4:	bf00      	nop
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a318:	bf00      	nop
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d101      	bne.n	800a34a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	e050      	b.n	800a3ec <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a350:	2b00      	cmp	r3, #0
 800a352:	d114      	bne.n	800a37e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 fdc5 	bl	800aeec <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d103      	bne.n	800a374 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4a21      	ldr	r2, [pc, #132]	@ (800a3f4 <HAL_UART_Init+0xbc>)
 800a370:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2224      	movs	r2, #36	@ 0x24
 800a382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f022 0201 	bic.w	r2, r2, #1
 800a394:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d002      	beq.n	800a3a4 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f001 f8f2 	bl	800b588 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 fdf3 	bl	800af90 <UART_SetConfig>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d101      	bne.n	800a3b4 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e01b      	b.n	800a3ec <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	685a      	ldr	r2, [r3, #4]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a3c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	689a      	ldr	r2, [r3, #8]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a3d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f042 0201 	orr.w	r2, r2, #1
 800a3e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f001 f971 	bl	800b6cc <UART_CheckIdleState>
 800a3ea:	4603      	mov	r3, r0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	08004af9 	.word	0x08004af9

0800a3f8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b087      	sub	sp, #28
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	460b      	mov	r3, r1
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a406:	2300      	movs	r3, #0
 800a408:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d109      	bne.n	800a424 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a416:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e09c      	b.n	800a55e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a42a:	2b20      	cmp	r3, #32
 800a42c:	d16c      	bne.n	800a508 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800a42e:	7afb      	ldrb	r3, [r7, #11]
 800a430:	2b0c      	cmp	r3, #12
 800a432:	d85e      	bhi.n	800a4f2 <HAL_UART_RegisterCallback+0xfa>
 800a434:	a201      	add	r2, pc, #4	@ (adr r2, 800a43c <HAL_UART_RegisterCallback+0x44>)
 800a436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a43a:	bf00      	nop
 800a43c:	0800a471 	.word	0x0800a471
 800a440:	0800a47b 	.word	0x0800a47b
 800a444:	0800a485 	.word	0x0800a485
 800a448:	0800a48f 	.word	0x0800a48f
 800a44c:	0800a499 	.word	0x0800a499
 800a450:	0800a4a3 	.word	0x0800a4a3
 800a454:	0800a4ad 	.word	0x0800a4ad
 800a458:	0800a4b7 	.word	0x0800a4b7
 800a45c:	0800a4c1 	.word	0x0800a4c1
 800a460:	0800a4cb 	.word	0x0800a4cb
 800a464:	0800a4d5 	.word	0x0800a4d5
 800a468:	0800a4df 	.word	0x0800a4df
 800a46c:	0800a4e9 	.word	0x0800a4e9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a478:	e070      	b.n	800a55c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a482:	e06b      	b.n	800a55c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a48c:	e066      	b.n	800a55c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a496:	e061      	b.n	800a55c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a4a0:	e05c      	b.n	800a55c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a4aa:	e057      	b.n	800a55c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a4b4:	e052      	b.n	800a55c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a4be:	e04d      	b.n	800a55c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a4c8:	e048      	b.n	800a55c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a4d2:	e043      	b.n	800a55c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a4dc:	e03e      	b.n	800a55c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a4e6:	e039      	b.n	800a55c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a4f0:	e034      	b.n	800a55c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	75fb      	strb	r3, [r7, #23]
        break;
 800a506:	e029      	b.n	800a55c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d11a      	bne.n	800a548 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a512:	7afb      	ldrb	r3, [r7, #11]
 800a514:	2b0b      	cmp	r3, #11
 800a516:	d002      	beq.n	800a51e <HAL_UART_RegisterCallback+0x126>
 800a518:	2b0c      	cmp	r3, #12
 800a51a:	d005      	beq.n	800a528 <HAL_UART_RegisterCallback+0x130>
 800a51c:	e009      	b.n	800a532 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a526:	e019      	b.n	800a55c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a530:	e014      	b.n	800a55c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a538:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	75fb      	strb	r3, [r7, #23]
        break;
 800a546:	e009      	b.n	800a55c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a54e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a55c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	371c      	adds	r7, #28
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop

0800a56c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b08a      	sub	sp, #40	@ 0x28
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	4613      	mov	r3, r2
 800a578:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a580:	2b20      	cmp	r3, #32
 800a582:	d167      	bne.n	800a654 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d002      	beq.n	800a590 <HAL_UART_Transmit_DMA+0x24>
 800a58a:	88fb      	ldrh	r3, [r7, #6]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d101      	bne.n	800a594 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a590:	2301      	movs	r3, #1
 800a592:	e060      	b.n	800a656 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	88fa      	ldrh	r2, [r7, #6]
 800a59e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	88fa      	ldrh	r2, [r7, #6]
 800a5a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2221      	movs	r2, #33	@ 0x21
 800a5b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d028      	beq.n	800a614 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5c6:	4a26      	ldr	r2, [pc, #152]	@ (800a660 <HAL_UART_Transmit_DMA+0xf4>)
 800a5c8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5ce:	4a25      	ldr	r2, [pc, #148]	@ (800a664 <HAL_UART_Transmit_DMA+0xf8>)
 800a5d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5d6:	4a24      	ldr	r2, [pc, #144]	@ (800a668 <HAL_UART_Transmit_DMA+0xfc>)
 800a5d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5de:	2200      	movs	r2, #0
 800a5e0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	3328      	adds	r3, #40	@ 0x28
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	88fb      	ldrh	r3, [r7, #6]
 800a5f6:	f7fc f9bd 	bl	8006974 <HAL_DMA_Start_IT>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d009      	beq.n	800a614 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2210      	movs	r2, #16
 800a604:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2220      	movs	r2, #32
 800a60c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	e020      	b.n	800a656 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2240      	movs	r2, #64	@ 0x40
 800a61a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	3308      	adds	r3, #8
 800a622:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	e853 3f00 	ldrex	r3, [r3]
 800a62a:	613b      	str	r3, [r7, #16]
   return(result);
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a632:	627b      	str	r3, [r7, #36]	@ 0x24
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	3308      	adds	r3, #8
 800a63a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a63c:	623a      	str	r2, [r7, #32]
 800a63e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a640:	69f9      	ldr	r1, [r7, #28]
 800a642:	6a3a      	ldr	r2, [r7, #32]
 800a644:	e841 2300 	strex	r3, r2, [r1]
 800a648:	61bb      	str	r3, [r7, #24]
   return(result);
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1e5      	bne.n	800a61c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a650:	2300      	movs	r3, #0
 800a652:	e000      	b.n	800a656 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a654:	2302      	movs	r3, #2
  }
}
 800a656:	4618      	mov	r0, r3
 800a658:	3728      	adds	r7, #40	@ 0x28
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	0800bb97 	.word	0x0800bb97
 800a664:	0800bc35 	.word	0x0800bc35
 800a668:	0800bdcf 	.word	0x0800bdcf

0800a66c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b08a      	sub	sp, #40	@ 0x28
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	4613      	mov	r3, r2
 800a678:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a680:	2b20      	cmp	r3, #32
 800a682:	d137      	bne.n	800a6f4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d002      	beq.n	800a690 <HAL_UART_Receive_DMA+0x24>
 800a68a:	88fb      	ldrh	r3, [r7, #6]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d101      	bne.n	800a694 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	e030      	b.n	800a6f6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a18      	ldr	r2, [pc, #96]	@ (800a700 <HAL_UART_Receive_DMA+0x94>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d01f      	beq.n	800a6e4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d018      	beq.n	800a6e4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	e853 3f00 	ldrex	r3, [r3]
 800a6be:	613b      	str	r3, [r7, #16]
   return(result);
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a6c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d0:	623b      	str	r3, [r7, #32]
 800a6d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d4:	69f9      	ldr	r1, [r7, #28]
 800a6d6:	6a3a      	ldr	r2, [r7, #32]
 800a6d8:	e841 2300 	strex	r3, r2, [r1]
 800a6dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1e6      	bne.n	800a6b2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a6e4:	88fb      	ldrh	r3, [r7, #6]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	68b9      	ldr	r1, [r7, #8]
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f001 f906 	bl	800b8fc <UART_Start_Receive_DMA>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	e000      	b.n	800a6f6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a6f4:	2302      	movs	r3, #2
  }
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3728      	adds	r7, #40	@ 0x28
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	40008000 	.word	0x40008000

0800a704 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b0ba      	sub	sp, #232	@ 0xe8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	69db      	ldr	r3, [r3, #28]
 800a712:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a72a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a72e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a732:	4013      	ands	r3, r2
 800a734:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a738:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d11b      	bne.n	800a778 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a744:	f003 0320 	and.w	r3, r3, #32
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d015      	beq.n	800a778 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a74c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a750:	f003 0320 	and.w	r3, r3, #32
 800a754:	2b00      	cmp	r3, #0
 800a756:	d105      	bne.n	800a764 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a75c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a760:	2b00      	cmp	r3, #0
 800a762:	d009      	beq.n	800a778 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f000 82f3 	beq.w	800ad54 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	4798      	blx	r3
      }
      return;
 800a776:	e2ed      	b.n	800ad54 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a778:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f000 8129 	beq.w	800a9d4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a782:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a786:	4b90      	ldr	r3, [pc, #576]	@ (800a9c8 <HAL_UART_IRQHandler+0x2c4>)
 800a788:	4013      	ands	r3, r2
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d106      	bne.n	800a79c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a78e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a792:	4b8e      	ldr	r3, [pc, #568]	@ (800a9cc <HAL_UART_IRQHandler+0x2c8>)
 800a794:	4013      	ands	r3, r2
 800a796:	2b00      	cmp	r3, #0
 800a798:	f000 811c 	beq.w	800a9d4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a79c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7a0:	f003 0301 	and.w	r3, r3, #1
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d011      	beq.n	800a7cc <HAL_UART_IRQHandler+0xc8>
 800a7a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00b      	beq.n	800a7cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7c2:	f043 0201 	orr.w	r2, r3, #1
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7d0:	f003 0302 	and.w	r3, r3, #2
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d011      	beq.n	800a7fc <HAL_UART_IRQHandler+0xf8>
 800a7d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7dc:	f003 0301 	and.w	r3, r3, #1
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00b      	beq.n	800a7fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2202      	movs	r2, #2
 800a7ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7f2:	f043 0204 	orr.w	r2, r3, #4
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a800:	f003 0304 	and.w	r3, r3, #4
 800a804:	2b00      	cmp	r3, #0
 800a806:	d011      	beq.n	800a82c <HAL_UART_IRQHandler+0x128>
 800a808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a80c:	f003 0301 	and.w	r3, r3, #1
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00b      	beq.n	800a82c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2204      	movs	r2, #4
 800a81a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a822:	f043 0202 	orr.w	r2, r3, #2
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a82c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a830:	f003 0308 	and.w	r3, r3, #8
 800a834:	2b00      	cmp	r3, #0
 800a836:	d017      	beq.n	800a868 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a83c:	f003 0320 	and.w	r3, r3, #32
 800a840:	2b00      	cmp	r3, #0
 800a842:	d105      	bne.n	800a850 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a844:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a848:	4b5f      	ldr	r3, [pc, #380]	@ (800a9c8 <HAL_UART_IRQHandler+0x2c4>)
 800a84a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00b      	beq.n	800a868 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2208      	movs	r2, #8
 800a856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a85e:	f043 0208 	orr.w	r2, r3, #8
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a86c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a870:	2b00      	cmp	r3, #0
 800a872:	d012      	beq.n	800a89a <HAL_UART_IRQHandler+0x196>
 800a874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a878:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00c      	beq.n	800a89a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a888:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a890:	f043 0220 	orr.w	r2, r3, #32
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f000 8259 	beq.w	800ad58 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a8a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8aa:	f003 0320 	and.w	r3, r3, #32
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d013      	beq.n	800a8da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a8b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8b6:	f003 0320 	and.w	r3, r3, #32
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d105      	bne.n	800a8ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a8be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a8c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d007      	beq.n	800a8da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d003      	beq.n	800a8da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8ee:	2b40      	cmp	r3, #64	@ 0x40
 800a8f0:	d005      	beq.n	800a8fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a8f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a8f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d058      	beq.n	800a9b0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f001 f8e3 	bl	800baca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a90e:	2b40      	cmp	r3, #64	@ 0x40
 800a910:	d148      	bne.n	800a9a4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	3308      	adds	r3, #8
 800a918:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a920:	e853 3f00 	ldrex	r3, [r3]
 800a924:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a928:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a92c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a930:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	3308      	adds	r3, #8
 800a93a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a93e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a942:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a946:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a94a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a94e:	e841 2300 	strex	r3, r2, [r1]
 800a952:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a956:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1d9      	bne.n	800a912 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a964:	2b00      	cmp	r3, #0
 800a966:	d017      	beq.n	800a998 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a96e:	4a18      	ldr	r2, [pc, #96]	@ (800a9d0 <HAL_UART_IRQHandler+0x2cc>)
 800a970:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a978:	4618      	mov	r0, r3
 800a97a:	f7fc f8cf 	bl	8006b1c <HAL_DMA_Abort_IT>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d01f      	beq.n	800a9c4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a98a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a992:	4610      	mov	r0, r2
 800a994:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a996:	e015      	b.n	800a9c4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9a2:	e00f      	b.n	800a9c4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9ae:	e009      	b.n	800a9c4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a9c2:	e1c9      	b.n	800ad58 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9c4:	bf00      	nop
    return;
 800a9c6:	e1c7      	b.n	800ad58 <HAL_UART_IRQHandler+0x654>
 800a9c8:	10000001 	.word	0x10000001
 800a9cc:	04000120 	.word	0x04000120
 800a9d0:	0800be53 	.word	0x0800be53

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	f040 8157 	bne.w	800ac8c <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a9de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9e2:	f003 0310 	and.w	r3, r3, #16
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f000 8150 	beq.w	800ac8c <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a9ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9f0:	f003 0310 	and.w	r3, r3, #16
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f000 8149 	beq.w	800ac8c <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2210      	movs	r2, #16
 800aa00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa0c:	2b40      	cmp	r3, #64	@ 0x40
 800aa0e:	f040 80bd 	bne.w	800ab8c <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f000 8199 	beq.w	800ad5c <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aa34:	429a      	cmp	r2, r3
 800aa36:	f080 8191 	bcs.w	800ad5c <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aa40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 0320 	and.w	r3, r3, #32
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f040 8087 	bne.w	800ab66 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aa64:	e853 3f00 	ldrex	r3, [r3]
 800aa68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800aa6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aa82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aa86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800aa8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aa92:	e841 2300 	strex	r3, r2, [r1]
 800aa96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800aa9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1da      	bne.n	800aa58 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aaac:	e853 3f00 	ldrex	r3, [r3]
 800aab0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800aab2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aab4:	f023 0301 	bic.w	r3, r3, #1
 800aab8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	3308      	adds	r3, #8
 800aac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aac6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800aaca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aacc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aace:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aad2:	e841 2300 	strex	r3, r2, [r1]
 800aad6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aad8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1e1      	bne.n	800aaa2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3308      	adds	r3, #8
 800aae4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aae8:	e853 3f00 	ldrex	r3, [r3]
 800aaec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aaee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aaf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aaf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	3308      	adds	r3, #8
 800aafe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ab02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ab04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ab08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ab0a:	e841 2300 	strex	r3, r2, [r1]
 800ab0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ab10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1e3      	bne.n	800aade <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2220      	movs	r2, #32
 800ab1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab2c:	e853 3f00 	ldrex	r3, [r3]
 800ab30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ab32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab34:	f023 0310 	bic.w	r3, r3, #16
 800ab38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	461a      	mov	r2, r3
 800ab42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab46:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ab4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab4e:	e841 2300 	strex	r3, r2, [r1]
 800ab52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ab54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1e4      	bne.n	800ab24 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fb ff82 	bl	8006a6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2202      	movs	r2, #2
 800ab6a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800ab7e:	b292      	uxth	r2, r2
 800ab80:	1a8a      	subs	r2, r1, r2
 800ab82:	b292      	uxth	r2, r2
 800ab84:	4611      	mov	r1, r2
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ab8a:	e0e7      	b.n	800ad5c <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f000 80d9 	beq.w	800ad60 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800abae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f000 80d4 	beq.w	800ad60 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc0:	e853 3f00 	ldrex	r3, [r3]
 800abc4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800abc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800abcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	461a      	mov	r2, r3
 800abd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800abda:	647b      	str	r3, [r7, #68]	@ 0x44
 800abdc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800abe0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abe2:	e841 2300 	strex	r3, r2, [r1]
 800abe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800abe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1e4      	bne.n	800abb8 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	3308      	adds	r3, #8
 800abf4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf8:	e853 3f00 	ldrex	r3, [r3]
 800abfc:	623b      	str	r3, [r7, #32]
   return(result);
 800abfe:	6a3b      	ldr	r3, [r7, #32]
 800ac00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac04:	f023 0301 	bic.w	r3, r3, #1
 800ac08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	3308      	adds	r3, #8
 800ac12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ac16:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac1e:	e841 2300 	strex	r3, r2, [r1]
 800ac22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1e1      	bne.n	800abee <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2220      	movs	r2, #32
 800ac2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	e853 3f00 	ldrex	r3, [r3]
 800ac4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f023 0310 	bic.w	r3, r3, #16
 800ac52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ac60:	61fb      	str	r3, [r7, #28]
 800ac62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac64:	69b9      	ldr	r1, [r7, #24]
 800ac66:	69fa      	ldr	r2, [r7, #28]
 800ac68:	e841 2300 	strex	r3, r2, [r1]
 800ac6c:	617b      	str	r3, [r7, #20]
   return(result);
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d1e4      	bne.n	800ac3e <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2202      	movs	r2, #2
 800ac78:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ac80:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800ac84:	4611      	mov	r1, r2
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ac8a:	e069      	b.n	800ad60 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ac8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d010      	beq.n	800acba <HAL_UART_IRQHandler+0x5b6>
 800ac98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00a      	beq.n	800acba <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800acac:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800acb8:	e055      	b.n	800ad66 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800acba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d014      	beq.n	800acf0 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800acc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d105      	bne.n	800acde <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800acd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800acd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d008      	beq.n	800acf0 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d03e      	beq.n	800ad64 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	4798      	blx	r3
    }
    return;
 800acee:	e039      	b.n	800ad64 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800acf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d009      	beq.n	800ad10 <HAL_UART_IRQHandler+0x60c>
 800acfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d003      	beq.n	800ad10 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f001 f8ba 	bl	800be82 <UART_EndTransmit_IT>
    return;
 800ad0e:	e02a      	b.n	800ad66 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ad10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00b      	beq.n	800ad34 <HAL_UART_IRQHandler+0x630>
 800ad1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad20:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d005      	beq.n	800ad34 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad32:	e018      	b.n	800ad66 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ad34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d012      	beq.n	800ad66 <HAL_UART_IRQHandler+0x662>
 800ad40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	da0e      	bge.n	800ad66 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad52:	e008      	b.n	800ad66 <HAL_UART_IRQHandler+0x662>
      return;
 800ad54:	bf00      	nop
 800ad56:	e006      	b.n	800ad66 <HAL_UART_IRQHandler+0x662>
    return;
 800ad58:	bf00      	nop
 800ad5a:	e004      	b.n	800ad66 <HAL_UART_IRQHandler+0x662>
      return;
 800ad5c:	bf00      	nop
 800ad5e:	e002      	b.n	800ad66 <HAL_UART_IRQHandler+0x662>
      return;
 800ad60:	bf00      	nop
 800ad62:	e000      	b.n	800ad66 <HAL_UART_IRQHandler+0x662>
    return;
 800ad64:	bf00      	nop
  }
}
 800ad66:	37e8      	adds	r7, #232	@ 0xe8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ad74:	bf00      	nop
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ad88:	bf00      	nop
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ad9c:	bf00      	nop
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800adb0:	bf00      	nop
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800adc4:	bf00      	nop
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800add8:	bf00      	nop
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800adec:	bf00      	nop
 800adee:	370c      	adds	r7, #12
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ae00:	bf00      	nop
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	460b      	mov	r3, r1
 800ae16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ae18:	bf00      	nop
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a09      	ldr	r2, [pc, #36]	@ (800ae58 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d009      	beq.n	800ae4c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	695b      	ldr	r3, [r3, #20]
 800ae3e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	430a      	orrs	r2, r1
 800ae4a:	615a      	str	r2, [r3, #20]
  }
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr
 800ae58:	40008000 	.word	0x40008000

0800ae5c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a18      	ldr	r2, [pc, #96]	@ (800aecc <HAL_UART_EnableReceiverTimeout+0x70>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d027      	beq.n	800aebe <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae74:	2b20      	cmp	r3, #32
 800ae76:	d120      	bne.n	800aeba <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d101      	bne.n	800ae86 <HAL_UART_EnableReceiverTimeout+0x2a>
 800ae82:	2302      	movs	r3, #2
 800ae84:	e01c      	b.n	800aec0 <HAL_UART_EnableReceiverTimeout+0x64>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2224      	movs	r2, #36	@ 0x24
 800ae92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	685a      	ldr	r2, [r3, #4]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800aea4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2220      	movs	r2, #32
 800aeaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	e002      	b.n	800aec0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800aeba:	2302      	movs	r3, #2
 800aebc:	e000      	b.n	800aec0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800aebe:	2301      	movs	r3, #1
  }
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr
 800aecc:	40008000 	.word	0x40008000

0800aed0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800aede:	4618      	mov	r0, r3
 800aee0:	370c      	adds	r7, #12
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
	...

0800aeec <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a1a      	ldr	r2, [pc, #104]	@ (800af60 <UART_InitCallbacksToDefault+0x74>)
 800aef8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a19      	ldr	r2, [pc, #100]	@ (800af64 <UART_InitCallbacksToDefault+0x78>)
 800af00:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4a18      	ldr	r2, [pc, #96]	@ (800af68 <UART_InitCallbacksToDefault+0x7c>)
 800af08:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a17      	ldr	r2, [pc, #92]	@ (800af6c <UART_InitCallbacksToDefault+0x80>)
 800af10:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a16      	ldr	r2, [pc, #88]	@ (800af70 <UART_InitCallbacksToDefault+0x84>)
 800af18:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4a15      	ldr	r2, [pc, #84]	@ (800af74 <UART_InitCallbacksToDefault+0x88>)
 800af20:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4a14      	ldr	r2, [pc, #80]	@ (800af78 <UART_InitCallbacksToDefault+0x8c>)
 800af28:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	4a13      	ldr	r2, [pc, #76]	@ (800af7c <UART_InitCallbacksToDefault+0x90>)
 800af30:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a12      	ldr	r2, [pc, #72]	@ (800af80 <UART_InitCallbacksToDefault+0x94>)
 800af38:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	4a11      	ldr	r2, [pc, #68]	@ (800af84 <UART_InitCallbacksToDefault+0x98>)
 800af40:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4a10      	ldr	r2, [pc, #64]	@ (800af88 <UART_InitCallbacksToDefault+0x9c>)
 800af48:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	4a0f      	ldr	r2, [pc, #60]	@ (800af8c <UART_InitCallbacksToDefault+0xa0>)
 800af50:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr
 800af60:	0800ad81 	.word	0x0800ad81
 800af64:	0800ad6d 	.word	0x0800ad6d
 800af68:	0800ada9 	.word	0x0800ada9
 800af6c:	0800ad95 	.word	0x0800ad95
 800af70:	0800adbd 	.word	0x0800adbd
 800af74:	0800add1 	.word	0x0800add1
 800af78:	0800ade5 	.word	0x0800ade5
 800af7c:	0800adf9 	.word	0x0800adf9
 800af80:	0800bedd 	.word	0x0800bedd
 800af84:	0800bef1 	.word	0x0800bef1
 800af88:	0800bf05 	.word	0x0800bf05
 800af8c:	0800ae0d 	.word	0x0800ae0d

0800af90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af94:	b08c      	sub	sp, #48	@ 0x30
 800af96:	af00      	add	r7, sp, #0
 800af98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af9a:	2300      	movs	r3, #0
 800af9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	689a      	ldr	r2, [r3, #8]
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	691b      	ldr	r3, [r3, #16]
 800afa8:	431a      	orrs	r2, r3
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	695b      	ldr	r3, [r3, #20]
 800afae:	431a      	orrs	r2, r3
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	69db      	ldr	r3, [r3, #28]
 800afb4:	4313      	orrs	r3, r2
 800afb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	4baa      	ldr	r3, [pc, #680]	@ (800b268 <UART_SetConfig+0x2d8>)
 800afc0:	4013      	ands	r3, r2
 800afc2:	697a      	ldr	r2, [r7, #20]
 800afc4:	6812      	ldr	r2, [r2, #0]
 800afc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afc8:	430b      	orrs	r3, r1
 800afca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	68da      	ldr	r2, [r3, #12]
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	430a      	orrs	r2, r1
 800afe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a9f      	ldr	r2, [pc, #636]	@ (800b26c <UART_SetConfig+0x2dc>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d004      	beq.n	800affc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	6a1b      	ldr	r3, [r3, #32]
 800aff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aff8:	4313      	orrs	r3, r2
 800affa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b006:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b00a:	697a      	ldr	r2, [r7, #20]
 800b00c:	6812      	ldr	r2, [r2, #0]
 800b00e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b010:	430b      	orrs	r3, r1
 800b012:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b01a:	f023 010f 	bic.w	r1, r3, #15
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	430a      	orrs	r2, r1
 800b028:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a90      	ldr	r2, [pc, #576]	@ (800b270 <UART_SetConfig+0x2e0>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d125      	bne.n	800b080 <UART_SetConfig+0xf0>
 800b034:	4b8f      	ldr	r3, [pc, #572]	@ (800b274 <UART_SetConfig+0x2e4>)
 800b036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b03a:	f003 0303 	and.w	r3, r3, #3
 800b03e:	2b03      	cmp	r3, #3
 800b040:	d81a      	bhi.n	800b078 <UART_SetConfig+0xe8>
 800b042:	a201      	add	r2, pc, #4	@ (adr r2, 800b048 <UART_SetConfig+0xb8>)
 800b044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b048:	0800b059 	.word	0x0800b059
 800b04c:	0800b069 	.word	0x0800b069
 800b050:	0800b061 	.word	0x0800b061
 800b054:	0800b071 	.word	0x0800b071
 800b058:	2301      	movs	r3, #1
 800b05a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b05e:	e116      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b060:	2302      	movs	r3, #2
 800b062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b066:	e112      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b068:	2304      	movs	r3, #4
 800b06a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b06e:	e10e      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b070:	2308      	movs	r3, #8
 800b072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b076:	e10a      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b078:	2310      	movs	r3, #16
 800b07a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b07e:	e106      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a7c      	ldr	r2, [pc, #496]	@ (800b278 <UART_SetConfig+0x2e8>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d138      	bne.n	800b0fc <UART_SetConfig+0x16c>
 800b08a:	4b7a      	ldr	r3, [pc, #488]	@ (800b274 <UART_SetConfig+0x2e4>)
 800b08c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b090:	f003 030c 	and.w	r3, r3, #12
 800b094:	2b0c      	cmp	r3, #12
 800b096:	d82d      	bhi.n	800b0f4 <UART_SetConfig+0x164>
 800b098:	a201      	add	r2, pc, #4	@ (adr r2, 800b0a0 <UART_SetConfig+0x110>)
 800b09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b09e:	bf00      	nop
 800b0a0:	0800b0d5 	.word	0x0800b0d5
 800b0a4:	0800b0f5 	.word	0x0800b0f5
 800b0a8:	0800b0f5 	.word	0x0800b0f5
 800b0ac:	0800b0f5 	.word	0x0800b0f5
 800b0b0:	0800b0e5 	.word	0x0800b0e5
 800b0b4:	0800b0f5 	.word	0x0800b0f5
 800b0b8:	0800b0f5 	.word	0x0800b0f5
 800b0bc:	0800b0f5 	.word	0x0800b0f5
 800b0c0:	0800b0dd 	.word	0x0800b0dd
 800b0c4:	0800b0f5 	.word	0x0800b0f5
 800b0c8:	0800b0f5 	.word	0x0800b0f5
 800b0cc:	0800b0f5 	.word	0x0800b0f5
 800b0d0:	0800b0ed 	.word	0x0800b0ed
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0da:	e0d8      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b0dc:	2302      	movs	r3, #2
 800b0de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0e2:	e0d4      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b0e4:	2304      	movs	r3, #4
 800b0e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0ea:	e0d0      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b0ec:	2308      	movs	r3, #8
 800b0ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0f2:	e0cc      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b0f4:	2310      	movs	r3, #16
 800b0f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0fa:	e0c8      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a5e      	ldr	r2, [pc, #376]	@ (800b27c <UART_SetConfig+0x2ec>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d125      	bne.n	800b152 <UART_SetConfig+0x1c2>
 800b106:	4b5b      	ldr	r3, [pc, #364]	@ (800b274 <UART_SetConfig+0x2e4>)
 800b108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b10c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b110:	2b30      	cmp	r3, #48	@ 0x30
 800b112:	d016      	beq.n	800b142 <UART_SetConfig+0x1b2>
 800b114:	2b30      	cmp	r3, #48	@ 0x30
 800b116:	d818      	bhi.n	800b14a <UART_SetConfig+0x1ba>
 800b118:	2b20      	cmp	r3, #32
 800b11a:	d00a      	beq.n	800b132 <UART_SetConfig+0x1a2>
 800b11c:	2b20      	cmp	r3, #32
 800b11e:	d814      	bhi.n	800b14a <UART_SetConfig+0x1ba>
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <UART_SetConfig+0x19a>
 800b124:	2b10      	cmp	r3, #16
 800b126:	d008      	beq.n	800b13a <UART_SetConfig+0x1aa>
 800b128:	e00f      	b.n	800b14a <UART_SetConfig+0x1ba>
 800b12a:	2300      	movs	r3, #0
 800b12c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b130:	e0ad      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b132:	2302      	movs	r3, #2
 800b134:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b138:	e0a9      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b13a:	2304      	movs	r3, #4
 800b13c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b140:	e0a5      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b142:	2308      	movs	r3, #8
 800b144:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b148:	e0a1      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b14a:	2310      	movs	r3, #16
 800b14c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b150:	e09d      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a4a      	ldr	r2, [pc, #296]	@ (800b280 <UART_SetConfig+0x2f0>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d125      	bne.n	800b1a8 <UART_SetConfig+0x218>
 800b15c:	4b45      	ldr	r3, [pc, #276]	@ (800b274 <UART_SetConfig+0x2e4>)
 800b15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b162:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b166:	2bc0      	cmp	r3, #192	@ 0xc0
 800b168:	d016      	beq.n	800b198 <UART_SetConfig+0x208>
 800b16a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b16c:	d818      	bhi.n	800b1a0 <UART_SetConfig+0x210>
 800b16e:	2b80      	cmp	r3, #128	@ 0x80
 800b170:	d00a      	beq.n	800b188 <UART_SetConfig+0x1f8>
 800b172:	2b80      	cmp	r3, #128	@ 0x80
 800b174:	d814      	bhi.n	800b1a0 <UART_SetConfig+0x210>
 800b176:	2b00      	cmp	r3, #0
 800b178:	d002      	beq.n	800b180 <UART_SetConfig+0x1f0>
 800b17a:	2b40      	cmp	r3, #64	@ 0x40
 800b17c:	d008      	beq.n	800b190 <UART_SetConfig+0x200>
 800b17e:	e00f      	b.n	800b1a0 <UART_SetConfig+0x210>
 800b180:	2300      	movs	r3, #0
 800b182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b186:	e082      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b188:	2302      	movs	r3, #2
 800b18a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b18e:	e07e      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b190:	2304      	movs	r3, #4
 800b192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b196:	e07a      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b198:	2308      	movs	r3, #8
 800b19a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b19e:	e076      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b1a0:	2310      	movs	r3, #16
 800b1a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1a6:	e072      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a35      	ldr	r2, [pc, #212]	@ (800b284 <UART_SetConfig+0x2f4>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d12a      	bne.n	800b208 <UART_SetConfig+0x278>
 800b1b2:	4b30      	ldr	r3, [pc, #192]	@ (800b274 <UART_SetConfig+0x2e4>)
 800b1b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b1bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1c0:	d01a      	beq.n	800b1f8 <UART_SetConfig+0x268>
 800b1c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1c6:	d81b      	bhi.n	800b200 <UART_SetConfig+0x270>
 800b1c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1cc:	d00c      	beq.n	800b1e8 <UART_SetConfig+0x258>
 800b1ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1d2:	d815      	bhi.n	800b200 <UART_SetConfig+0x270>
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d003      	beq.n	800b1e0 <UART_SetConfig+0x250>
 800b1d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1dc:	d008      	beq.n	800b1f0 <UART_SetConfig+0x260>
 800b1de:	e00f      	b.n	800b200 <UART_SetConfig+0x270>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1e6:	e052      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b1e8:	2302      	movs	r3, #2
 800b1ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1ee:	e04e      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b1f0:	2304      	movs	r3, #4
 800b1f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1f6:	e04a      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b1f8:	2308      	movs	r3, #8
 800b1fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1fe:	e046      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b200:	2310      	movs	r3, #16
 800b202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b206:	e042      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a17      	ldr	r2, [pc, #92]	@ (800b26c <UART_SetConfig+0x2dc>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d13a      	bne.n	800b288 <UART_SetConfig+0x2f8>
 800b212:	4b18      	ldr	r3, [pc, #96]	@ (800b274 <UART_SetConfig+0x2e4>)
 800b214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b218:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b21c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b220:	d01a      	beq.n	800b258 <UART_SetConfig+0x2c8>
 800b222:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b226:	d81b      	bhi.n	800b260 <UART_SetConfig+0x2d0>
 800b228:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b22c:	d00c      	beq.n	800b248 <UART_SetConfig+0x2b8>
 800b22e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b232:	d815      	bhi.n	800b260 <UART_SetConfig+0x2d0>
 800b234:	2b00      	cmp	r3, #0
 800b236:	d003      	beq.n	800b240 <UART_SetConfig+0x2b0>
 800b238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b23c:	d008      	beq.n	800b250 <UART_SetConfig+0x2c0>
 800b23e:	e00f      	b.n	800b260 <UART_SetConfig+0x2d0>
 800b240:	2300      	movs	r3, #0
 800b242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b246:	e022      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b248:	2302      	movs	r3, #2
 800b24a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b24e:	e01e      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b250:	2304      	movs	r3, #4
 800b252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b256:	e01a      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b258:	2308      	movs	r3, #8
 800b25a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b25e:	e016      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b260:	2310      	movs	r3, #16
 800b262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b266:	e012      	b.n	800b28e <UART_SetConfig+0x2fe>
 800b268:	cfff69f3 	.word	0xcfff69f3
 800b26c:	40008000 	.word	0x40008000
 800b270:	40013800 	.word	0x40013800
 800b274:	40021000 	.word	0x40021000
 800b278:	40004400 	.word	0x40004400
 800b27c:	40004800 	.word	0x40004800
 800b280:	40004c00 	.word	0x40004c00
 800b284:	40005000 	.word	0x40005000
 800b288:	2310      	movs	r3, #16
 800b28a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4aae      	ldr	r2, [pc, #696]	@ (800b54c <UART_SetConfig+0x5bc>)
 800b294:	4293      	cmp	r3, r2
 800b296:	f040 8097 	bne.w	800b3c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b29a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b29e:	2b08      	cmp	r3, #8
 800b2a0:	d823      	bhi.n	800b2ea <UART_SetConfig+0x35a>
 800b2a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2a8 <UART_SetConfig+0x318>)
 800b2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a8:	0800b2cd 	.word	0x0800b2cd
 800b2ac:	0800b2eb 	.word	0x0800b2eb
 800b2b0:	0800b2d5 	.word	0x0800b2d5
 800b2b4:	0800b2eb 	.word	0x0800b2eb
 800b2b8:	0800b2db 	.word	0x0800b2db
 800b2bc:	0800b2eb 	.word	0x0800b2eb
 800b2c0:	0800b2eb 	.word	0x0800b2eb
 800b2c4:	0800b2eb 	.word	0x0800b2eb
 800b2c8:	0800b2e3 	.word	0x0800b2e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2cc:	f7fc fd16 	bl	8007cfc <HAL_RCC_GetPCLK1Freq>
 800b2d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b2d2:	e010      	b.n	800b2f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b2d4:	4b9e      	ldr	r3, [pc, #632]	@ (800b550 <UART_SetConfig+0x5c0>)
 800b2d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b2d8:	e00d      	b.n	800b2f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b2da:	f7fc fca1 	bl	8007c20 <HAL_RCC_GetSysClockFreq>
 800b2de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b2e0:	e009      	b.n	800b2f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b2e8:	e005      	b.n	800b2f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b2f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f000 8130 	beq.w	800b55e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b302:	4a94      	ldr	r2, [pc, #592]	@ (800b554 <UART_SetConfig+0x5c4>)
 800b304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b308:	461a      	mov	r2, r3
 800b30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b30c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b310:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	4613      	mov	r3, r2
 800b318:	005b      	lsls	r3, r3, #1
 800b31a:	4413      	add	r3, r2
 800b31c:	69ba      	ldr	r2, [r7, #24]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d305      	bcc.n	800b32e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b328:	69ba      	ldr	r2, [r7, #24]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d903      	bls.n	800b336 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b334:	e113      	b.n	800b55e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b338:	2200      	movs	r2, #0
 800b33a:	60bb      	str	r3, [r7, #8]
 800b33c:	60fa      	str	r2, [r7, #12]
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b342:	4a84      	ldr	r2, [pc, #528]	@ (800b554 <UART_SetConfig+0x5c4>)
 800b344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b348:	b29b      	uxth	r3, r3
 800b34a:	2200      	movs	r2, #0
 800b34c:	603b      	str	r3, [r7, #0]
 800b34e:	607a      	str	r2, [r7, #4]
 800b350:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b354:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b358:	f7f5 fd48 	bl	8000dec <__aeabi_uldivmod>
 800b35c:	4602      	mov	r2, r0
 800b35e:	460b      	mov	r3, r1
 800b360:	4610      	mov	r0, r2
 800b362:	4619      	mov	r1, r3
 800b364:	f04f 0200 	mov.w	r2, #0
 800b368:	f04f 0300 	mov.w	r3, #0
 800b36c:	020b      	lsls	r3, r1, #8
 800b36e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b372:	0202      	lsls	r2, r0, #8
 800b374:	6979      	ldr	r1, [r7, #20]
 800b376:	6849      	ldr	r1, [r1, #4]
 800b378:	0849      	lsrs	r1, r1, #1
 800b37a:	2000      	movs	r0, #0
 800b37c:	460c      	mov	r4, r1
 800b37e:	4605      	mov	r5, r0
 800b380:	eb12 0804 	adds.w	r8, r2, r4
 800b384:	eb43 0905 	adc.w	r9, r3, r5
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	469a      	mov	sl, r3
 800b390:	4693      	mov	fp, r2
 800b392:	4652      	mov	r2, sl
 800b394:	465b      	mov	r3, fp
 800b396:	4640      	mov	r0, r8
 800b398:	4649      	mov	r1, r9
 800b39a:	f7f5 fd27 	bl	8000dec <__aeabi_uldivmod>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b3a6:	6a3b      	ldr	r3, [r7, #32]
 800b3a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b3ac:	d308      	bcc.n	800b3c0 <UART_SetConfig+0x430>
 800b3ae:	6a3b      	ldr	r3, [r7, #32]
 800b3b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3b4:	d204      	bcs.n	800b3c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	6a3a      	ldr	r2, [r7, #32]
 800b3bc:	60da      	str	r2, [r3, #12]
 800b3be:	e0ce      	b.n	800b55e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b3c6:	e0ca      	b.n	800b55e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	69db      	ldr	r3, [r3, #28]
 800b3cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b3d0:	d166      	bne.n	800b4a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b3d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b3d6:	2b08      	cmp	r3, #8
 800b3d8:	d827      	bhi.n	800b42a <UART_SetConfig+0x49a>
 800b3da:	a201      	add	r2, pc, #4	@ (adr r2, 800b3e0 <UART_SetConfig+0x450>)
 800b3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e0:	0800b405 	.word	0x0800b405
 800b3e4:	0800b40d 	.word	0x0800b40d
 800b3e8:	0800b415 	.word	0x0800b415
 800b3ec:	0800b42b 	.word	0x0800b42b
 800b3f0:	0800b41b 	.word	0x0800b41b
 800b3f4:	0800b42b 	.word	0x0800b42b
 800b3f8:	0800b42b 	.word	0x0800b42b
 800b3fc:	0800b42b 	.word	0x0800b42b
 800b400:	0800b423 	.word	0x0800b423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b404:	f7fc fc7a 	bl	8007cfc <HAL_RCC_GetPCLK1Freq>
 800b408:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b40a:	e014      	b.n	800b436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b40c:	f7fc fc8c 	bl	8007d28 <HAL_RCC_GetPCLK2Freq>
 800b410:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b412:	e010      	b.n	800b436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b414:	4b4e      	ldr	r3, [pc, #312]	@ (800b550 <UART_SetConfig+0x5c0>)
 800b416:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b418:	e00d      	b.n	800b436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b41a:	f7fc fc01 	bl	8007c20 <HAL_RCC_GetSysClockFreq>
 800b41e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b420:	e009      	b.n	800b436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b426:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b428:	e005      	b.n	800b436 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b42a:	2300      	movs	r3, #0
 800b42c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f000 8090 	beq.w	800b55e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b442:	4a44      	ldr	r2, [pc, #272]	@ (800b554 <UART_SetConfig+0x5c4>)
 800b444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b448:	461a      	mov	r2, r3
 800b44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b44c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b450:	005a      	lsls	r2, r3, #1
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	085b      	lsrs	r3, r3, #1
 800b458:	441a      	add	r2, r3
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b462:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b464:	6a3b      	ldr	r3, [r7, #32]
 800b466:	2b0f      	cmp	r3, #15
 800b468:	d916      	bls.n	800b498 <UART_SetConfig+0x508>
 800b46a:	6a3b      	ldr	r3, [r7, #32]
 800b46c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b470:	d212      	bcs.n	800b498 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b472:	6a3b      	ldr	r3, [r7, #32]
 800b474:	b29b      	uxth	r3, r3
 800b476:	f023 030f 	bic.w	r3, r3, #15
 800b47a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b47c:	6a3b      	ldr	r3, [r7, #32]
 800b47e:	085b      	lsrs	r3, r3, #1
 800b480:	b29b      	uxth	r3, r3
 800b482:	f003 0307 	and.w	r3, r3, #7
 800b486:	b29a      	uxth	r2, r3
 800b488:	8bfb      	ldrh	r3, [r7, #30]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	8bfa      	ldrh	r2, [r7, #30]
 800b494:	60da      	str	r2, [r3, #12]
 800b496:	e062      	b.n	800b55e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b498:	2301      	movs	r3, #1
 800b49a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b49e:	e05e      	b.n	800b55e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b4a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b4a4:	2b08      	cmp	r3, #8
 800b4a6:	d828      	bhi.n	800b4fa <UART_SetConfig+0x56a>
 800b4a8:	a201      	add	r2, pc, #4	@ (adr r2, 800b4b0 <UART_SetConfig+0x520>)
 800b4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ae:	bf00      	nop
 800b4b0:	0800b4d5 	.word	0x0800b4d5
 800b4b4:	0800b4dd 	.word	0x0800b4dd
 800b4b8:	0800b4e5 	.word	0x0800b4e5
 800b4bc:	0800b4fb 	.word	0x0800b4fb
 800b4c0:	0800b4eb 	.word	0x0800b4eb
 800b4c4:	0800b4fb 	.word	0x0800b4fb
 800b4c8:	0800b4fb 	.word	0x0800b4fb
 800b4cc:	0800b4fb 	.word	0x0800b4fb
 800b4d0:	0800b4f3 	.word	0x0800b4f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4d4:	f7fc fc12 	bl	8007cfc <HAL_RCC_GetPCLK1Freq>
 800b4d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4da:	e014      	b.n	800b506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4dc:	f7fc fc24 	bl	8007d28 <HAL_RCC_GetPCLK2Freq>
 800b4e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4e2:	e010      	b.n	800b506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b4e4:	4b1a      	ldr	r3, [pc, #104]	@ (800b550 <UART_SetConfig+0x5c0>)
 800b4e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b4e8:	e00d      	b.n	800b506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b4ea:	f7fc fb99 	bl	8007c20 <HAL_RCC_GetSysClockFreq>
 800b4ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4f0:	e009      	b.n	800b506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b4f8:	e005      	b.n	800b506 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b504:	bf00      	nop
    }

    if (pclk != 0U)
 800b506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d028      	beq.n	800b55e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b510:	4a10      	ldr	r2, [pc, #64]	@ (800b554 <UART_SetConfig+0x5c4>)
 800b512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b516:	461a      	mov	r2, r3
 800b518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b51a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	085b      	lsrs	r3, r3, #1
 800b524:	441a      	add	r2, r3
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b52e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b530:	6a3b      	ldr	r3, [r7, #32]
 800b532:	2b0f      	cmp	r3, #15
 800b534:	d910      	bls.n	800b558 <UART_SetConfig+0x5c8>
 800b536:	6a3b      	ldr	r3, [r7, #32]
 800b538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b53c:	d20c      	bcs.n	800b558 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b53e:	6a3b      	ldr	r3, [r7, #32]
 800b540:	b29a      	uxth	r2, r3
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	60da      	str	r2, [r3, #12]
 800b548:	e009      	b.n	800b55e <UART_SetConfig+0x5ce>
 800b54a:	bf00      	nop
 800b54c:	40008000 	.word	0x40008000
 800b550:	00f42400 	.word	0x00f42400
 800b554:	0800cdec 	.word	0x0800cdec
      }
      else
      {
        ret = HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	2201      	movs	r2, #1
 800b562:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	2201      	movs	r2, #1
 800b56a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	2200      	movs	r2, #0
 800b572:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	2200      	movs	r2, #0
 800b578:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b57a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3730      	adds	r7, #48	@ 0x30
 800b582:	46bd      	mov	sp, r7
 800b584:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b594:	f003 0308 	and.w	r3, r3, #8
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00a      	beq.n	800b5b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	430a      	orrs	r2, r1
 800b5b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5b6:	f003 0301 	and.w	r3, r3, #1
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00a      	beq.n	800b5d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	430a      	orrs	r2, r1
 800b5d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5d8:	f003 0302 	and.w	r3, r3, #2
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00a      	beq.n	800b5f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	430a      	orrs	r2, r1
 800b5f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5fa:	f003 0304 	and.w	r3, r3, #4
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d00a      	beq.n	800b618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	430a      	orrs	r2, r1
 800b616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b61c:	f003 0310 	and.w	r3, r3, #16
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00a      	beq.n	800b63a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	430a      	orrs	r2, r1
 800b638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b63e:	f003 0320 	and.w	r3, r3, #32
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00a      	beq.n	800b65c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	430a      	orrs	r2, r1
 800b65a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b664:	2b00      	cmp	r3, #0
 800b666:	d01a      	beq.n	800b69e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	430a      	orrs	r2, r1
 800b67c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b686:	d10a      	bne.n	800b69e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	430a      	orrs	r2, r1
 800b69c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00a      	beq.n	800b6c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	430a      	orrs	r2, r1
 800b6be:	605a      	str	r2, [r3, #4]
  }
}
 800b6c0:	bf00      	nop
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b098      	sub	sp, #96	@ 0x60
 800b6d0:	af02      	add	r7, sp, #8
 800b6d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b6dc:	f7f9 fc00 	bl	8004ee0 <HAL_GetTick>
 800b6e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f003 0308 	and.w	r3, r3, #8
 800b6ec:	2b08      	cmp	r3, #8
 800b6ee:	d12f      	bne.n	800b750 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b6f4:	9300      	str	r3, [sp, #0]
 800b6f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 f88e 	bl	800b820 <UART_WaitOnFlagUntilTimeout>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d022      	beq.n	800b750 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b712:	e853 3f00 	ldrex	r3, [r3]
 800b716:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b71a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b71e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	461a      	mov	r2, r3
 800b726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b728:	647b      	str	r3, [r7, #68]	@ 0x44
 800b72a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b72e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b730:	e841 2300 	strex	r3, r2, [r1]
 800b734:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d1e6      	bne.n	800b70a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2220      	movs	r2, #32
 800b740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b74c:	2303      	movs	r3, #3
 800b74e:	e063      	b.n	800b818 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f003 0304 	and.w	r3, r3, #4
 800b75a:	2b04      	cmp	r3, #4
 800b75c:	d149      	bne.n	800b7f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b75e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b766:	2200      	movs	r2, #0
 800b768:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 f857 	bl	800b820 <UART_WaitOnFlagUntilTimeout>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d03c      	beq.n	800b7f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b780:	e853 3f00 	ldrex	r3, [r3]
 800b784:	623b      	str	r3, [r7, #32]
   return(result);
 800b786:	6a3b      	ldr	r3, [r7, #32]
 800b788:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b78c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	461a      	mov	r2, r3
 800b794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b796:	633b      	str	r3, [r7, #48]	@ 0x30
 800b798:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b79a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b79c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b79e:	e841 2300 	strex	r3, r2, [r1]
 800b7a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d1e6      	bne.n	800b778 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	3308      	adds	r3, #8
 800b7b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	e853 3f00 	ldrex	r3, [r3]
 800b7b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f023 0301 	bic.w	r3, r3, #1
 800b7c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	3308      	adds	r3, #8
 800b7c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b7ca:	61fa      	str	r2, [r7, #28]
 800b7cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ce:	69b9      	ldr	r1, [r7, #24]
 800b7d0:	69fa      	ldr	r2, [r7, #28]
 800b7d2:	e841 2300 	strex	r3, r2, [r1]
 800b7d6:	617b      	str	r3, [r7, #20]
   return(result);
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d1e5      	bne.n	800b7aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2220      	movs	r2, #32
 800b7e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7ee:	2303      	movs	r3, #3
 800b7f0:	e012      	b.n	800b818 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2220      	movs	r2, #32
 800b7f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2220      	movs	r2, #32
 800b7fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2200      	movs	r2, #0
 800b806:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2200      	movs	r2, #0
 800b80c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3758      	adds	r7, #88	@ 0x58
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	603b      	str	r3, [r7, #0]
 800b82c:	4613      	mov	r3, r2
 800b82e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b830:	e04f      	b.n	800b8d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b838:	d04b      	beq.n	800b8d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b83a:	f7f9 fb51 	bl	8004ee0 <HAL_GetTick>
 800b83e:	4602      	mov	r2, r0
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	1ad3      	subs	r3, r2, r3
 800b844:	69ba      	ldr	r2, [r7, #24]
 800b846:	429a      	cmp	r2, r3
 800b848:	d302      	bcc.n	800b850 <UART_WaitOnFlagUntilTimeout+0x30>
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d101      	bne.n	800b854 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b850:	2303      	movs	r3, #3
 800b852:	e04e      	b.n	800b8f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f003 0304 	and.w	r3, r3, #4
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d037      	beq.n	800b8d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	2b80      	cmp	r3, #128	@ 0x80
 800b866:	d034      	beq.n	800b8d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	2b40      	cmp	r3, #64	@ 0x40
 800b86c:	d031      	beq.n	800b8d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	69db      	ldr	r3, [r3, #28]
 800b874:	f003 0308 	and.w	r3, r3, #8
 800b878:	2b08      	cmp	r3, #8
 800b87a:	d110      	bne.n	800b89e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2208      	movs	r2, #8
 800b882:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	f000 f920 	bl	800baca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2208      	movs	r2, #8
 800b88e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2200      	movs	r2, #0
 800b896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b89a:	2301      	movs	r3, #1
 800b89c:	e029      	b.n	800b8f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	69db      	ldr	r3, [r3, #28]
 800b8a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b8a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b8ac:	d111      	bne.n	800b8d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b8b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	f000 f906 	bl	800baca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2220      	movs	r2, #32
 800b8c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b8ce:	2303      	movs	r3, #3
 800b8d0:	e00f      	b.n	800b8f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	69da      	ldr	r2, [r3, #28]
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	4013      	ands	r3, r2
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	bf0c      	ite	eq
 800b8e2:	2301      	moveq	r3, #1
 800b8e4:	2300      	movne	r3, #0
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	79fb      	ldrb	r3, [r7, #7]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d0a0      	beq.n	800b832 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3710      	adds	r7, #16
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
	...

0800b8fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b096      	sub	sp, #88	@ 0x58
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	4613      	mov	r3, r2
 800b908:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	68ba      	ldr	r2, [r7, #8]
 800b90e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	88fa      	ldrh	r2, [r7, #6]
 800b914:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2222      	movs	r2, #34	@ 0x22
 800b924:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d02d      	beq.n	800b98e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b938:	4a40      	ldr	r2, [pc, #256]	@ (800ba3c <UART_Start_Receive_DMA+0x140>)
 800b93a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b942:	4a3f      	ldr	r2, [pc, #252]	@ (800ba40 <UART_Start_Receive_DMA+0x144>)
 800b944:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b94c:	4a3d      	ldr	r2, [pc, #244]	@ (800ba44 <UART_Start_Receive_DMA+0x148>)
 800b94e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b956:	2200      	movs	r2, #0
 800b958:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	3324      	adds	r3, #36	@ 0x24
 800b966:	4619      	mov	r1, r3
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b96c:	461a      	mov	r2, r3
 800b96e:	88fb      	ldrh	r3, [r7, #6]
 800b970:	f7fb f800 	bl	8006974 <HAL_DMA_Start_IT>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d009      	beq.n	800b98e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2210      	movs	r2, #16
 800b97e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2220      	movs	r2, #32
 800b986:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	e051      	b.n	800ba32 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	691b      	ldr	r3, [r3, #16]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d018      	beq.n	800b9c8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b99e:	e853 3f00 	ldrex	r3, [r3]
 800b9a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b9aa:	657b      	str	r3, [r7, #84]	@ 0x54
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9b6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b9ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b9bc:	e841 2300 	strex	r3, r2, [r1]
 800b9c0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b9c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1e6      	bne.n	800b996 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	3308      	adds	r3, #8
 800b9ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d2:	e853 3f00 	ldrex	r3, [r3]
 800b9d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9da:	f043 0301 	orr.w	r3, r3, #1
 800b9de:	653b      	str	r3, [r7, #80]	@ 0x50
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	3308      	adds	r3, #8
 800b9e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b9e8:	637a      	str	r2, [r7, #52]	@ 0x34
 800b9ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b9ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b9f0:	e841 2300 	strex	r3, r2, [r1]
 800b9f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d1e5      	bne.n	800b9c8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	3308      	adds	r3, #8
 800ba02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	e853 3f00 	ldrex	r3, [r3]
 800ba0a:	613b      	str	r3, [r7, #16]
   return(result);
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	3308      	adds	r3, #8
 800ba1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ba1c:	623a      	str	r2, [r7, #32]
 800ba1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba20:	69f9      	ldr	r1, [r7, #28]
 800ba22:	6a3a      	ldr	r2, [r7, #32]
 800ba24:	e841 2300 	strex	r3, r2, [r1]
 800ba28:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1e5      	bne.n	800b9fc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3758      	adds	r7, #88	@ 0x58
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	0800bc55 	.word	0x0800bc55
 800ba40:	0800bd89 	.word	0x0800bd89
 800ba44:	0800bdcf 	.word	0x0800bdcf

0800ba48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b08f      	sub	sp, #60	@ 0x3c
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba56:	6a3b      	ldr	r3, [r7, #32]
 800ba58:	e853 3f00 	ldrex	r3, [r3]
 800ba5c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ba64:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba70:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba76:	e841 2300 	strex	r3, r2, [r1]
 800ba7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1e6      	bne.n	800ba50 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	3308      	adds	r3, #8
 800ba88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	e853 3f00 	ldrex	r3, [r3]
 800ba90:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ba98:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	3308      	adds	r3, #8
 800baa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800baa2:	61ba      	str	r2, [r7, #24]
 800baa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa6:	6979      	ldr	r1, [r7, #20]
 800baa8:	69ba      	ldr	r2, [r7, #24]
 800baaa:	e841 2300 	strex	r3, r2, [r1]
 800baae:	613b      	str	r3, [r7, #16]
   return(result);
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d1e5      	bne.n	800ba82 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2220      	movs	r2, #32
 800baba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800babe:	bf00      	nop
 800bac0:	373c      	adds	r7, #60	@ 0x3c
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800baca:	b480      	push	{r7}
 800bacc:	b095      	sub	sp, #84	@ 0x54
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bada:	e853 3f00 	ldrex	r3, [r3]
 800bade:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	461a      	mov	r2, r3
 800baee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baf0:	643b      	str	r3, [r7, #64]	@ 0x40
 800baf2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800baf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800baf8:	e841 2300 	strex	r3, r2, [r1]
 800bafc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1e6      	bne.n	800bad2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	3308      	adds	r3, #8
 800bb0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0c:	6a3b      	ldr	r3, [r7, #32]
 800bb0e:	e853 3f00 	ldrex	r3, [r3]
 800bb12:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bb1a:	f023 0301 	bic.w	r3, r3, #1
 800bb1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	3308      	adds	r3, #8
 800bb26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bb2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb30:	e841 2300 	strex	r3, r2, [r1]
 800bb34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1e3      	bne.n	800bb04 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d118      	bne.n	800bb76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	e853 3f00 	ldrex	r3, [r3]
 800bb50:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	f023 0310 	bic.w	r3, r3, #16
 800bb58:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	461a      	mov	r2, r3
 800bb60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb62:	61bb      	str	r3, [r7, #24]
 800bb64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb66:	6979      	ldr	r1, [r7, #20]
 800bb68:	69ba      	ldr	r2, [r7, #24]
 800bb6a:	e841 2300 	strex	r3, r2, [r1]
 800bb6e:	613b      	str	r3, [r7, #16]
   return(result);
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1e6      	bne.n	800bb44 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2220      	movs	r2, #32
 800bb7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2200      	movs	r2, #0
 800bb82:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bb8a:	bf00      	nop
 800bb8c:	3754      	adds	r7, #84	@ 0x54
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr

0800bb96 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b090      	sub	sp, #64	@ 0x40
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bba2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f003 0320 	and.w	r3, r3, #32
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d137      	bne.n	800bc22 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bbb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bbba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	3308      	adds	r3, #8
 800bbc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc4:	e853 3f00 	ldrex	r3, [r3]
 800bbc8:	623b      	str	r3, [r7, #32]
   return(result);
 800bbca:	6a3b      	ldr	r3, [r7, #32]
 800bbcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bbd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bbd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	3308      	adds	r3, #8
 800bbd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbda:	633a      	str	r2, [r7, #48]	@ 0x30
 800bbdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbe2:	e841 2300 	strex	r3, r2, [r1]
 800bbe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bbe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1e5      	bne.n	800bbba <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	e853 3f00 	ldrex	r3, [r3]
 800bbfa:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc02:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	461a      	mov	r2, r3
 800bc0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc0c:	61fb      	str	r3, [r7, #28]
 800bc0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc10:	69b9      	ldr	r1, [r7, #24]
 800bc12:	69fa      	ldr	r2, [r7, #28]
 800bc14:	e841 2300 	strex	r3, r2, [r1]
 800bc18:	617b      	str	r3, [r7, #20]
   return(result);
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d1e6      	bne.n	800bbee <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc20:	e004      	b.n	800bc2c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800bc22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bc28:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bc2a:	4798      	blx	r3
}
 800bc2c:	bf00      	nop
 800bc2e:	3740      	adds	r7, #64	@ 0x40
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc40:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc4c:	bf00      	nop
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b09c      	sub	sp, #112	@ 0x70
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc60:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f003 0320 	and.w	r3, r3, #32
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d171      	bne.n	800bd54 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800bc70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc72:	2200      	movs	r2, #0
 800bc74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc80:	e853 3f00 	ldrex	r3, [r3]
 800bc84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bc86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bc8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	461a      	mov	r2, r3
 800bc94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bc96:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc98:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bc9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc9e:	e841 2300 	strex	r3, r2, [r1]
 800bca2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bca4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d1e6      	bne.n	800bc78 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	3308      	adds	r3, #8
 800bcb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb4:	e853 3f00 	ldrex	r3, [r3]
 800bcb8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bcba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcbc:	f023 0301 	bic.w	r3, r3, #1
 800bcc0:	667b      	str	r3, [r7, #100]	@ 0x64
 800bcc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	3308      	adds	r3, #8
 800bcc8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bcca:	647a      	str	r2, [r7, #68]	@ 0x44
 800bccc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bcd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bcd2:	e841 2300 	strex	r3, r2, [r1]
 800bcd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bcd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d1e5      	bne.n	800bcaa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	3308      	adds	r3, #8
 800bce4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce8:	e853 3f00 	ldrex	r3, [r3]
 800bcec:	623b      	str	r3, [r7, #32]
   return(result);
 800bcee:	6a3b      	ldr	r3, [r7, #32]
 800bcf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcf4:	663b      	str	r3, [r7, #96]	@ 0x60
 800bcf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	3308      	adds	r3, #8
 800bcfc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bcfe:	633a      	str	r2, [r7, #48]	@ 0x30
 800bd00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd06:	e841 2300 	strex	r3, r2, [r1]
 800bd0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1e5      	bne.n	800bcde <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bd12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd14:	2220      	movs	r2, #32
 800bd16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d118      	bne.n	800bd54 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	e853 3f00 	ldrex	r3, [r3]
 800bd2e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f023 0310 	bic.w	r3, r3, #16
 800bd36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd40:	61fb      	str	r3, [r7, #28]
 800bd42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd44:	69b9      	ldr	r1, [r7, #24]
 800bd46:	69fa      	ldr	r2, [r7, #28]
 800bd48:	e841 2300 	strex	r3, r2, [r1]
 800bd4c:	617b      	str	r3, [r7, #20]
   return(result);
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1e6      	bne.n	800bd22 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd56:	2200      	movs	r2, #0
 800bd58:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d109      	bne.n	800bd76 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800bd62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bd68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bd6a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800bd6e:	4611      	mov	r1, r2
 800bd70:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bd72:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bd74:	e004      	b.n	800bd80 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800bd76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bd7c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bd7e:	4798      	blx	r3
}
 800bd80:	bf00      	nop
 800bd82:	3770      	adds	r7, #112	@ 0x70
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd94:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2201      	movs	r2, #1
 800bd9a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d10b      	bne.n	800bdbc <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800bdb0:	0852      	lsrs	r2, r2, #1
 800bdb2:	b292      	uxth	r2, r2
 800bdb4:	4611      	mov	r1, r2
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bdba:	e004      	b.n	800bdc6 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	4798      	blx	r3
}
 800bdc6:	bf00      	nop
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b086      	sub	sp, #24
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdda:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bde2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bdea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdf6:	2b80      	cmp	r3, #128	@ 0x80
 800bdf8:	d109      	bne.n	800be0e <UART_DMAError+0x40>
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	2b21      	cmp	r3, #33	@ 0x21
 800bdfe:	d106      	bne.n	800be0e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	2200      	movs	r2, #0
 800be04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800be08:	6978      	ldr	r0, [r7, #20]
 800be0a:	f7ff fe1d 	bl	800ba48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be18:	2b40      	cmp	r3, #64	@ 0x40
 800be1a:	d109      	bne.n	800be30 <UART_DMAError+0x62>
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2b22      	cmp	r3, #34	@ 0x22
 800be20:	d106      	bne.n	800be30 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	2200      	movs	r2, #0
 800be26:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800be2a:	6978      	ldr	r0, [r7, #20]
 800be2c:	f7ff fe4d 	bl	800baca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be36:	f043 0210 	orr.w	r2, r3, #16
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800be46:	6978      	ldr	r0, [r7, #20]
 800be48:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be4a:	bf00      	nop
 800be4c:	3718      	adds	r7, #24
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b084      	sub	sp, #16
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800be76:	68f8      	ldr	r0, [r7, #12]
 800be78:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be7a:	bf00      	nop
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b088      	sub	sp, #32
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	e853 3f00 	ldrex	r3, [r3]
 800be96:	60bb      	str	r3, [r7, #8]
   return(result);
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be9e:	61fb      	str	r3, [r7, #28]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	461a      	mov	r2, r3
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	61bb      	str	r3, [r7, #24]
 800beaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beac:	6979      	ldr	r1, [r7, #20]
 800beae:	69ba      	ldr	r2, [r7, #24]
 800beb0:	e841 2300 	strex	r3, r2, [r1]
 800beb4:	613b      	str	r3, [r7, #16]
   return(result);
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d1e6      	bne.n	800be8a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2220      	movs	r2, #32
 800bec0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bed4:	bf00      	nop
 800bed6:	3720      	adds	r7, #32
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bee4:	bf00      	nop
 800bee6:	370c      	adds	r7, #12
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b083      	sub	sp, #12
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bef8:	bf00      	nop
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bf0c:	bf00      	nop
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d101      	bne.n	800bf2e <HAL_UARTEx_DisableFifoMode+0x16>
 800bf2a:	2302      	movs	r3, #2
 800bf2c:	e027      	b.n	800bf7e <HAL_UARTEx_DisableFifoMode+0x66>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2201      	movs	r2, #1
 800bf32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2224      	movs	r2, #36	@ 0x24
 800bf3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f022 0201 	bic.w	r2, r2, #1
 800bf54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bf5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2220      	movs	r2, #32
 800bf70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2200      	movs	r2, #0
 800bf78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3714      	adds	r7, #20
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr

0800bf8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b084      	sub	sp, #16
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d101      	bne.n	800bfa2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bf9e:	2302      	movs	r3, #2
 800bfa0:	e02d      	b.n	800bffe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2224      	movs	r2, #36	@ 0x24
 800bfae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f022 0201 	bic.w	r2, r2, #1
 800bfc8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	683a      	ldr	r2, [r7, #0]
 800bfda:	430a      	orrs	r2, r1
 800bfdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 f850 	bl	800c084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2220      	movs	r2, #32
 800bff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bffc:	2300      	movs	r3, #0
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3710      	adds	r7, #16
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}

0800c006 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c006:	b580      	push	{r7, lr}
 800c008:	b084      	sub	sp, #16
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
 800c00e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c016:	2b01      	cmp	r3, #1
 800c018:	d101      	bne.n	800c01e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c01a:	2302      	movs	r3, #2
 800c01c:	e02d      	b.n	800c07a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2201      	movs	r2, #1
 800c022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2224      	movs	r2, #36	@ 0x24
 800c02a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f022 0201 	bic.w	r2, r2, #1
 800c044:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	683a      	ldr	r2, [r7, #0]
 800c056:	430a      	orrs	r2, r1
 800c058:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 f812 	bl	800c084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68fa      	ldr	r2, [r7, #12]
 800c066:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2220      	movs	r2, #32
 800c06c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c078:	2300      	movs	r3, #0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
	...

0800c084 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c084:	b480      	push	{r7}
 800c086:	b085      	sub	sp, #20
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c090:	2b00      	cmp	r3, #0
 800c092:	d108      	bne.n	800c0a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2201      	movs	r2, #1
 800c098:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c0a4:	e031      	b.n	800c10a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c0a6:	2308      	movs	r3, #8
 800c0a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c0aa:	2308      	movs	r3, #8
 800c0ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	0e5b      	lsrs	r3, r3, #25
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	f003 0307 	and.w	r3, r3, #7
 800c0bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	0f5b      	lsrs	r3, r3, #29
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	f003 0307 	and.w	r3, r3, #7
 800c0cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c0ce:	7bbb      	ldrb	r3, [r7, #14]
 800c0d0:	7b3a      	ldrb	r2, [r7, #12]
 800c0d2:	4911      	ldr	r1, [pc, #68]	@ (800c118 <UARTEx_SetNbDataToProcess+0x94>)
 800c0d4:	5c8a      	ldrb	r2, [r1, r2]
 800c0d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c0da:	7b3a      	ldrb	r2, [r7, #12]
 800c0dc:	490f      	ldr	r1, [pc, #60]	@ (800c11c <UARTEx_SetNbDataToProcess+0x98>)
 800c0de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c0e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0e4:	b29a      	uxth	r2, r3
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0ec:	7bfb      	ldrb	r3, [r7, #15]
 800c0ee:	7b7a      	ldrb	r2, [r7, #13]
 800c0f0:	4909      	ldr	r1, [pc, #36]	@ (800c118 <UARTEx_SetNbDataToProcess+0x94>)
 800c0f2:	5c8a      	ldrb	r2, [r1, r2]
 800c0f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c0f8:	7b7a      	ldrb	r2, [r7, #13]
 800c0fa:	4908      	ldr	r1, [pc, #32]	@ (800c11c <UARTEx_SetNbDataToProcess+0x98>)
 800c0fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800c102:	b29a      	uxth	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c10a:	bf00      	nop
 800c10c:	3714      	adds	r7, #20
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	0800ce04 	.word	0x0800ce04
 800c11c:	0800ce0c 	.word	0x0800ce0c

0800c120 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	ed93 7a06 	vldr	s14, [r3, #24]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	edd3 7a07 	vldr	s15, [r3, #28]
 800c136:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	edd3 7a08 	vldr	s15, [r3, #32]
 800c140:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	edd3 7a06 	vldr	s15, [r3, #24]
 800c150:	eeb1 7a67 	vneg.f32	s14, s15
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	edd3 7a08 	vldr	s15, [r3, #32]
 800c15a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c15e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6a1a      	ldr	r2, [r3, #32]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d006      	beq.n	800c184 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	330c      	adds	r3, #12
 800c17a:	220c      	movs	r2, #12
 800c17c:	2100      	movs	r1, #0
 800c17e:	4618      	mov	r0, r3
 800c180:	f000 fcc4 	bl	800cb0c <memset>
  }

}
 800c184:	bf00      	nop
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b08b      	sub	sp, #44	@ 0x2c
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	881b      	ldrh	r3, [r3, #0]
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	885b      	ldrh	r3, [r3, #2]
 800c1b4:	fb02 f303 	mul.w	r3, r2, r3
 800c1b8:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800c1be:	e013      	b.n	800c1e8 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800c1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c2:	1d1a      	adds	r2, r3, #4
 800c1c4:	627a      	str	r2, [r7, #36]	@ 0x24
 800c1c6:	ed93 7a00 	vldr	s14, [r3]
 800c1ca:	6a3b      	ldr	r3, [r7, #32]
 800c1cc:	1d1a      	adds	r2, r3, #4
 800c1ce:	623a      	str	r2, [r7, #32]
 800c1d0:	edd3 7a00 	vldr	s15, [r3]
 800c1d4:	69fb      	ldr	r3, [r7, #28]
 800c1d6:	1d1a      	adds	r2, r3, #4
 800c1d8:	61fa      	str	r2, [r7, #28]
 800c1da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1de:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800c1e8:	69bb      	ldr	r3, [r7, #24]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d1e8      	bne.n	800c1c0 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800c1f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	372c      	adds	r7, #44	@ 0x2c
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr

0800c202 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800c202:	b480      	push	{r7}
 800c204:	b085      	sub	sp, #20
 800c206:	af00      	add	r7, sp, #0
 800c208:	60f8      	str	r0, [r7, #12]
 800c20a:	607b      	str	r3, [r7, #4]
 800c20c:	460b      	mov	r3, r1
 800c20e:	817b      	strh	r3, [r7, #10]
 800c210:	4613      	mov	r3, r2
 800c212:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	897a      	ldrh	r2, [r7, #10]
 800c218:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	893a      	ldrh	r2, [r7, #8]
 800c21e:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	605a      	str	r2, [r3, #4]
}
 800c226:	bf00      	nop
 800c228:	3714      	adds	r7, #20
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr

0800c232 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800c232:	b480      	push	{r7}
 800c234:	b0bb      	sub	sp, #236	@ 0xec
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
 800c23a:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	881b      	ldrh	r3, [r3, #0]
 800c24c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	885b      	ldrh	r3, [r3, #2]
 800c252:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800c254:	f04f 0300 	mov.w	r3, #0
 800c258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c25c:	f04f 0300 	mov.w	r3, #0
 800c260:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800c262:	2300      	movs	r3, #0
 800c264:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800c268:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c26a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800c26e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c270:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800c274:	e03b      	b.n	800c2ee <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800c276:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c278:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c27c:	1ad3      	subs	r3, r2, r3
 800c27e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c282:	e00c      	b.n	800c29e <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800c284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c288:	1d1a      	adds	r2, r3, #4
 800c28a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800c28e:	f04f 0200 	mov.w	r2, #0
 800c292:	601a      	str	r2, [r3, #0]
        j--;
 800c294:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c298:	3b01      	subs	r3, #1
 800c29a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c29e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1ee      	bne.n	800c284 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800c2a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2aa:	1d1a      	adds	r2, r3, #4
 800c2ac:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800c2b0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800c2b4:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800c2b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c2c0:	e00c      	b.n	800c2dc <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800c2c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2c6:	1d1a      	adds	r2, r3, #4
 800c2c8:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800c2cc:	f04f 0200 	mov.w	r2, #0
 800c2d0:	601a      	str	r2, [r3, #0]
        j--;
 800c2d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c2dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d1ee      	bne.n	800c2c2 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800c2e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800c2ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d1bf      	bne.n	800c276 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c2fc:	e2c7      	b.n	800c88e <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800c2fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c302:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	685a      	ldr	r2, [r3, #4]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	885b      	ldrh	r3, [r3, #2]
 800c30c:	3301      	adds	r3, #1
 800c30e:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800c312:	fb01 f303 	mul.w	r3, r1, r3
 800c316:	009b      	lsls	r3, r3, #2
 800c318:	4413      	add	r3, r2
 800c31a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800c31e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800c328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c32c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800c330:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c334:	3301      	adds	r3, #1
 800c336:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c33a:	e02c      	b.n	800c396 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	685a      	ldr	r2, [r3, #4]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	885b      	ldrh	r3, [r3, #2]
 800c344:	4619      	mov	r1, r3
 800c346:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c34a:	fb03 f101 	mul.w	r1, r3, r1
 800c34e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c352:	440b      	add	r3, r1
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4413      	add	r3, r2
 800c358:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800c35c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800c364:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800c368:	eeb0 7ae7 	vabs.f32	s14, s15
 800c36c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c370:	eef0 7ae7 	vabs.f32	s15, s15
 800c374:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c37c:	dd06      	ble.n	800c38c <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800c37e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800c386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c388:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800c38c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c390:	3301      	adds	r3, #1
 800c392:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c396:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c39a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d3cd      	bcc.n	800c33c <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800c3a0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c3a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ac:	f000 809b 	beq.w	800c4e6 <arm_mat_inverse_f32+0x2b4>
 800c3b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c3b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	f000 8094 	beq.w	800c4e6 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	885b      	ldrh	r3, [r3, #2]
 800c3d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c3d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c3da:	1ad3      	subs	r3, r2, r3
 800c3dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c3de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c3e2:	fb03 f202 	mul.w	r2, r3, r2
 800c3e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c3ea:	4413      	add	r3, r2
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c3f2:	4413      	add	r3, r2
 800c3f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c3f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c3fe:	fb03 f202 	mul.w	r2, r3, r2
 800c402:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c406:	4413      	add	r3, r2
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c40e:	4413      	add	r3, r2
 800c410:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c414:	2300      	movs	r3, #0
 800c416:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c41a:	e018      	b.n	800c44e <arm_mat_inverse_f32+0x21c>
 800c41c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c424:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c428:	1d1a      	adds	r2, r3, #4
 800c42a:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800c42e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c432:	6812      	ldr	r2, [r2, #0]
 800c434:	601a      	str	r2, [r3, #0]
 800c436:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c43a:	1d1a      	adds	r2, r3, #4
 800c43c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800c440:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c442:	601a      	str	r2, [r3, #0]
 800c444:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c448:	3301      	adds	r3, #1
 800c44a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c44e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800c452:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c454:	429a      	cmp	r2, r3
 800c456:	dbe1      	blt.n	800c41c <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	885b      	ldrh	r3, [r3, #2]
 800c46c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c46e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c470:	643b      	str	r3, [r7, #64]	@ 0x40
 800c472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c474:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c476:	fb02 f303 	mul.w	r3, r2, r3
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c480:	4413      	add	r3, r2
 800c482:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c488:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c48c:	fb02 f303 	mul.w	r3, r2, r3
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c496:	4413      	add	r3, r2
 800c498:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c49c:	2300      	movs	r3, #0
 800c49e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c4a2:	e018      	b.n	800c4d6 <arm_mat_inverse_f32+0x2a4>
 800c4a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4b0:	1d1a      	adds	r2, r3, #4
 800c4b2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c4b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c4ba:	6812      	ldr	r2, [r2, #0]
 800c4bc:	601a      	str	r2, [r3, #0]
 800c4be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c4c2:	1d1a      	adds	r2, r3, #4
 800c4c4:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c4c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c4ca:	601a      	str	r2, [r3, #0]
 800c4cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c4d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c4da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	dbe1      	blt.n	800c4a4 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800c4e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d009      	beq.n	800c502 <arm_mat_inverse_f32+0x2d0>
 800c4ee:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c4f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4fa:	d102      	bne.n	800c502 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800c4fc:	f06f 0304 	mvn.w	r3, #4
 800c500:	e208      	b.n	800c914 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800c502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c506:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800c50a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c50e:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	885b      	ldrh	r3, [r3, #2]
 800c51e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c520:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c522:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c526:	1ad3      	subs	r3, r2, r3
 800c528:	633b      	str	r3, [r7, #48]	@ 0x30
 800c52a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c52c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c52e:	fb03 f202 	mul.w	r2, r3, r2
 800c532:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c536:	4413      	add	r3, r2
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800c53e:	4413      	add	r3, r2
 800c540:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c544:	2300      	movs	r3, #0
 800c546:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c54a:	e011      	b.n	800c570 <arm_mat_inverse_f32+0x33e>
 800c54c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c550:	1d1a      	adds	r2, r3, #4
 800c552:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800c556:	ed93 7a00 	vldr	s14, [r3]
 800c55a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c55e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c562:	edc3 7a00 	vstr	s15, [r3]
 800c566:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c56a:	3301      	adds	r3, #1
 800c56c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c570:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800c574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c576:	429a      	cmp	r2, r3
 800c578:	dbe8      	blt.n	800c54c <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	885b      	ldrh	r3, [r3, #2]
 800c586:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c58a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c58e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c590:	fb02 f303 	mul.w	r3, r2, r3
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c59a:	4413      	add	r3, r2
 800c59c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c5a6:	e011      	b.n	800c5cc <arm_mat_inverse_f32+0x39a>
 800c5a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c5ac:	1d1a      	adds	r2, r3, #4
 800c5ae:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800c5b2:	ed93 7a00 	vldr	s14, [r3]
 800c5b6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5be:	edc3 7a00 	vstr	s15, [r3]
 800c5c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c5cc:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800c5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	dbe8      	blt.n	800c5a8 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800c5dc:	e0ae      	b.n	800c73c <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	685a      	ldr	r2, [r3, #4]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	885b      	ldrh	r3, [r3, #2]
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c5ec:	fb03 f101 	mul.w	r1, r3, r1
 800c5f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c5f4:	440b      	add	r3, r1
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	4413      	add	r3, r2
 800c5fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800c5fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	885b      	ldrh	r3, [r3, #2]
 800c61c:	617b      	str	r3, [r7, #20]
 800c61e:	697a      	ldr	r2, [r7, #20]
 800c620:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c624:	1ad3      	subs	r3, r2, r3
 800c626:	613b      	str	r3, [r7, #16]
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c62e:	fb03 f202 	mul.w	r2, r3, r2
 800c632:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c636:	4413      	add	r3, r2
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800c63e:	4413      	add	r3, r2
 800c640:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c648:	fb03 f202 	mul.w	r2, r3, r2
 800c64c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c650:	4413      	add	r3, r2
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c658:	4413      	add	r3, r2
 800c65a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c65e:	2300      	movs	r3, #0
 800c660:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c664:	e01a      	b.n	800c69c <arm_mat_inverse_f32+0x46a>
 800c666:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c66a:	1d1a      	adds	r2, r3, #4
 800c66c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c670:	ed93 7a00 	vldr	s14, [r3]
 800c674:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c67c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c680:	1d1a      	adds	r2, r3, #4
 800c682:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800c686:	ed93 7a00 	vldr	s14, [r3]
 800c68a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c68e:	edc3 7a00 	vstr	s15, [r3]
 800c692:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c696:	3301      	adds	r3, #1
 800c698:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c69c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	dbdf      	blt.n	800c666 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	885b      	ldrh	r3, [r3, #2]
 800c6ba:	60fb      	str	r3, [r7, #12]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	60bb      	str	r3, [r7, #8]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c6c6:	fb02 f303 	mul.w	r3, r2, r3
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c6d0:	4413      	add	r3, r2
 800c6d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c6da:	fb02 f303 	mul.w	r3, r2, r3
 800c6de:	009b      	lsls	r3, r3, #2
 800c6e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c6e4:	4413      	add	r3, r2
 800c6e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c6f0:	e01a      	b.n	800c728 <arm_mat_inverse_f32+0x4f6>
 800c6f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c6f6:	1d1a      	adds	r2, r3, #4
 800c6f8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c6fc:	ed93 7a00 	vldr	s14, [r3]
 800c700:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c704:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c708:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c70c:	1d1a      	adds	r2, r3, #4
 800c70e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c712:	ed93 7a00 	vldr	s14, [r3]
 800c716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c71a:	edc3 7a00 	vstr	s15, [r3]
 800c71e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c722:	3301      	adds	r3, #1
 800c724:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c728:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	429a      	cmp	r2, r3
 800c730:	dbdf      	blt.n	800c6f2 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800c732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c736:	3301      	adds	r3, #1
 800c738:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c73c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c740:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c742:	429a      	cmp	r2, r3
 800c744:	f4ff af4b 	bcc.w	800c5de <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800c748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c74a:	3301      	adds	r3, #1
 800c74c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c750:	e092      	b.n	800c878 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	685a      	ldr	r2, [r3, #4]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	885b      	ldrh	r3, [r3, #2]
 800c75a:	4619      	mov	r1, r3
 800c75c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c760:	fb03 f101 	mul.w	r1, r3, r1
 800c764:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c768:	440b      	add	r3, r1
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	4413      	add	r3, r2
 800c76e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800c772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	677b      	str	r3, [r7, #116]	@ 0x74
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	885b      	ldrh	r3, [r3, #2]
 800c78c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c78e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c790:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c794:	1ad3      	subs	r3, r2, r3
 800c796:	623b      	str	r3, [r7, #32]
 800c798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c79e:	fb03 f202 	mul.w	r2, r3, r2
 800c7a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c7a6:	4413      	add	r3, r2
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c7ac:	4413      	add	r3, r2
 800c7ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c7b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c7b4:	fb03 f202 	mul.w	r2, r3, r2
 800c7b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c7bc:	4413      	add	r3, r2
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c7c2:	4413      	add	r3, r2
 800c7c4:	677b      	str	r3, [r7, #116]	@ 0x74
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c7ca:	e014      	b.n	800c7f6 <arm_mat_inverse_f32+0x5c4>
 800c7cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7ce:	1d1a      	adds	r2, r3, #4
 800c7d0:	677a      	str	r2, [r7, #116]	@ 0x74
 800c7d2:	ed93 7a00 	vldr	s14, [r3]
 800c7d6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c7da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c7e0:	1d1a      	adds	r2, r3, #4
 800c7e2:	67ba      	str	r2, [r7, #120]	@ 0x78
 800c7e4:	ed93 7a00 	vldr	s14, [r3]
 800c7e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7ec:	edc3 7a00 	vstr	s15, [r3]
 800c7f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c7f6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c7f8:	6a3b      	ldr	r3, [r7, #32]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	dbe6      	blt.n	800c7cc <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	885b      	ldrh	r3, [r3, #2]
 800c80e:	61fb      	str	r3, [r7, #28]
 800c810:	69fb      	ldr	r3, [r7, #28]
 800c812:	61bb      	str	r3, [r7, #24]
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c81a:	fb02 f303 	mul.w	r3, r2, r3
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c822:	4413      	add	r3, r2
 800c824:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c826:	69fb      	ldr	r3, [r7, #28]
 800c828:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c82a:	fb02 f303 	mul.w	r3, r2, r3
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c832:	4413      	add	r3, r2
 800c834:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c836:	2300      	movs	r3, #0
 800c838:	673b      	str	r3, [r7, #112]	@ 0x70
 800c83a:	e014      	b.n	800c866 <arm_mat_inverse_f32+0x634>
 800c83c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c83e:	1d1a      	adds	r2, r3, #4
 800c840:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c842:	ed93 7a00 	vldr	s14, [r3]
 800c846:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c84a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c84e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c850:	1d1a      	adds	r2, r3, #4
 800c852:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c854:	ed93 7a00 	vldr	s14, [r3]
 800c858:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c85c:	edc3 7a00 	vstr	s15, [r3]
 800c860:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c862:	3301      	adds	r3, #1
 800c864:	673b      	str	r3, [r7, #112]	@ 0x70
 800c866:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	429a      	cmp	r2, r3
 800c86c:	dbe6      	blt.n	800c83c <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800c86e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c872:	3301      	adds	r3, #1
 800c874:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c878:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c87c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c87e:	429a      	cmp	r2, r3
 800c880:	f4ff af67 	bcc.w	800c752 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800c884:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c888:	3301      	adds	r3, #1
 800c88a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c88e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c892:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c894:	429a      	cmp	r2, r3
 800c896:	f4ff ad32 	bcc.w	800c2fe <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c89a:	2300      	movs	r3, #0
 800c89c:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800c8a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d033      	beq.n	800c910 <arm_mat_inverse_f32+0x6de>
 800c8a8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c8ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8b4:	d12c      	bne.n	800c910 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800c8bc:	2300      	movs	r3, #0
 800c8be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c8c2:	e010      	b.n	800c8e6 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800c8c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c8cc:	4413      	add	r3, r2
 800c8ce:	edd3 7a00 	vldr	s15, [r3]
 800c8d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8da:	d10d      	bne.n	800c8f8 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800c8dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c8e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c8ea:	fb02 f303 	mul.w	r3, r2, r3
 800c8ee:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d3e6      	bcc.n	800c8c4 <arm_mat_inverse_f32+0x692>
 800c8f6:	e000      	b.n	800c8fa <arm_mat_inverse_f32+0x6c8>
            break;
 800c8f8:	bf00      	nop
      }

      if (i == numRows * numCols)
 800c8fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c8fe:	fb02 f303 	mul.w	r3, r2, r3
 800c902:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c906:	429a      	cmp	r2, r3
 800c908:	d102      	bne.n	800c910 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800c90a:	23fb      	movs	r3, #251	@ 0xfb
 800c90c:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800c910:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800c914:	4618      	mov	r0, r3
 800c916:	37ec      	adds	r7, #236	@ 0xec
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c920:	b480      	push	{r7}
 800c922:	b093      	sub	sp, #76	@ 0x4c
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	881b      	ldrh	r3, [r3, #0]
 800c94e:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	885b      	ldrh	r3, [r3, #2]
 800c954:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	885b      	ldrh	r3, [r3, #2]
 800c95a:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800c95c:	2300      	movs	r3, #0
 800c95e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c960:	8b7b      	ldrh	r3, [r7, #26]
 800c962:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800c964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c966:	009b      	lsls	r3, r3, #2
 800c968:	69fa      	ldr	r2, [r7, #28]
 800c96a:	4413      	add	r3, r2
 800c96c:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800c96e:	8b3b      	ldrh	r3, [r7, #24]
 800c970:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800c978:	f04f 0300 	mov.w	r3, #0
 800c97c:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800c97e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c980:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800c982:	8afb      	ldrh	r3, [r7, #22]
 800c984:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800c986:	e017      	b.n	800c9b8 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800c988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c98a:	1d1a      	adds	r2, r3, #4
 800c98c:	647a      	str	r2, [r7, #68]	@ 0x44
 800c98e:	ed93 7a00 	vldr	s14, [r3]
 800c992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c994:	edd3 7a00 	vldr	s15, [r3]
 800c998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c99c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800c9a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9a4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800c9a8:	8b3b      	ldrh	r3, [r7, #24]
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c9ae:	4413      	add	r3, r2
 800c9b0:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800c9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b4:	3b01      	subs	r3, #1
 800c9b6:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d1e4      	bne.n	800c988 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800c9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c0:	1d1a      	adds	r2, r3, #4
 800c9c2:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c9c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c9c6:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800c9c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800c9ce:	8b3a      	ldrh	r2, [r7, #24]
 800c9d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d2:	1ad3      	subs	r3, r2, r3
 800c9d4:	009b      	lsls	r3, r3, #2
 800c9d6:	6a3a      	ldr	r2, [r7, #32]
 800c9d8:	4413      	add	r3, r2
 800c9da:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800c9dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d1ca      	bne.n	800c978 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800c9e2:	8b3b      	ldrh	r3, [r7, #24]
 800c9e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9e6:	4413      	add	r3, r2
 800c9e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800c9ea:	8afb      	ldrh	r3, [r7, #22]
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c9f0:	4413      	add	r3, r2
 800c9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800c9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800c9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d1b1      	bne.n	800c964 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ca00:	2300      	movs	r3, #0
 800ca02:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800ca04:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	374c      	adds	r7, #76	@ 0x4c
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b08b      	sub	sp, #44	@ 0x2c
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	60b9      	str	r1, [r7, #8]
 800ca1e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	881b      	ldrh	r3, [r3, #0]
 800ca36:	461a      	mov	r2, r3
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	885b      	ldrh	r3, [r3, #2]
 800ca3c:	fb02 f303 	mul.w	r3, r2, r3
 800ca40:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800ca46:	e013      	b.n	800ca70 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800ca48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca4a:	1d1a      	adds	r2, r3, #4
 800ca4c:	627a      	str	r2, [r7, #36]	@ 0x24
 800ca4e:	ed93 7a00 	vldr	s14, [r3]
 800ca52:	6a3b      	ldr	r3, [r7, #32]
 800ca54:	1d1a      	adds	r2, r3, #4
 800ca56:	623a      	str	r2, [r7, #32]
 800ca58:	edd3 7a00 	vldr	s15, [r3]
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	1d1a      	adds	r2, r3, #4
 800ca60:	61fa      	str	r2, [r7, #28]
 800ca62:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca66:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	3b01      	subs	r3, #1
 800ca6e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1e8      	bne.n	800ca48 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ca76:	2300      	movs	r3, #0
 800ca78:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800ca7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	372c      	adds	r7, #44	@ 0x2c
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr

0800ca8a <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800ca8a:	b480      	push	{r7}
 800ca8c:	b08b      	sub	sp, #44	@ 0x2c
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
 800ca92:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	881b      	ldrh	r3, [r3, #0]
 800caa4:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	885b      	ldrh	r3, [r3, #2]
 800caaa:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800caac:	89fb      	ldrh	r3, [r7, #14]
 800caae:	61bb      	str	r3, [r7, #24]
 800cab0:	2300      	movs	r3, #0
 800cab2:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	009b      	lsls	r3, r3, #2
 800cab8:	693a      	ldr	r2, [r7, #16]
 800caba:	4413      	add	r3, r2
 800cabc:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800cabe:	89bb      	ldrh	r3, [r7, #12]
 800cac0:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800cac2:	e00d      	b.n	800cae0 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800cac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac6:	1d1a      	adds	r2, r3, #4
 800cac8:	627a      	str	r2, [r7, #36]	@ 0x24
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	6a3b      	ldr	r3, [r7, #32]
 800cace:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800cad0:	89fb      	ldrh	r3, [r7, #14]
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	6a3a      	ldr	r2, [r7, #32]
 800cad6:	4413      	add	r3, r2
 800cad8:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800cada:	69fb      	ldr	r3, [r7, #28]
 800cadc:	3b01      	subs	r3, #1
 800cade:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d1ee      	bne.n	800cac4 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	3301      	adds	r3, #1
 800caea:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800caec:	69bb      	ldr	r3, [r7, #24]
 800caee:	3b01      	subs	r3, #1
 800caf0:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800caf2:	69bb      	ldr	r3, [r7, #24]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1dd      	bne.n	800cab4 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800caf8:	2300      	movs	r3, #0
 800cafa:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800cafc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	372c      	adds	r7, #44	@ 0x2c
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <memset>:
 800cb0c:	4402      	add	r2, r0
 800cb0e:	4603      	mov	r3, r0
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d100      	bne.n	800cb16 <memset+0xa>
 800cb14:	4770      	bx	lr
 800cb16:	f803 1b01 	strb.w	r1, [r3], #1
 800cb1a:	e7f9      	b.n	800cb10 <memset+0x4>

0800cb1c <__errno>:
 800cb1c:	4b01      	ldr	r3, [pc, #4]	@ (800cb24 <__errno+0x8>)
 800cb1e:	6818      	ldr	r0, [r3, #0]
 800cb20:	4770      	bx	lr
 800cb22:	bf00      	nop
 800cb24:	20000290 	.word	0x20000290

0800cb28 <__libc_init_array>:
 800cb28:	b570      	push	{r4, r5, r6, lr}
 800cb2a:	4d0d      	ldr	r5, [pc, #52]	@ (800cb60 <__libc_init_array+0x38>)
 800cb2c:	4c0d      	ldr	r4, [pc, #52]	@ (800cb64 <__libc_init_array+0x3c>)
 800cb2e:	1b64      	subs	r4, r4, r5
 800cb30:	10a4      	asrs	r4, r4, #2
 800cb32:	2600      	movs	r6, #0
 800cb34:	42a6      	cmp	r6, r4
 800cb36:	d109      	bne.n	800cb4c <__libc_init_array+0x24>
 800cb38:	4d0b      	ldr	r5, [pc, #44]	@ (800cb68 <__libc_init_array+0x40>)
 800cb3a:	4c0c      	ldr	r4, [pc, #48]	@ (800cb6c <__libc_init_array+0x44>)
 800cb3c:	f000 f92c 	bl	800cd98 <_init>
 800cb40:	1b64      	subs	r4, r4, r5
 800cb42:	10a4      	asrs	r4, r4, #2
 800cb44:	2600      	movs	r6, #0
 800cb46:	42a6      	cmp	r6, r4
 800cb48:	d105      	bne.n	800cb56 <__libc_init_array+0x2e>
 800cb4a:	bd70      	pop	{r4, r5, r6, pc}
 800cb4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb50:	4798      	blx	r3
 800cb52:	3601      	adds	r6, #1
 800cb54:	e7ee      	b.n	800cb34 <__libc_init_array+0xc>
 800cb56:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb5a:	4798      	blx	r3
 800cb5c:	3601      	adds	r6, #1
 800cb5e:	e7f2      	b.n	800cb46 <__libc_init_array+0x1e>
 800cb60:	0800ce1c 	.word	0x0800ce1c
 800cb64:	0800ce1c 	.word	0x0800ce1c
 800cb68:	0800ce1c 	.word	0x0800ce1c
 800cb6c:	0800ce20 	.word	0x0800ce20

0800cb70 <memcpy>:
 800cb70:	440a      	add	r2, r1
 800cb72:	4291      	cmp	r1, r2
 800cb74:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800cb78:	d100      	bne.n	800cb7c <memcpy+0xc>
 800cb7a:	4770      	bx	lr
 800cb7c:	b510      	push	{r4, lr}
 800cb7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb86:	4291      	cmp	r1, r2
 800cb88:	d1f9      	bne.n	800cb7e <memcpy+0xe>
 800cb8a:	bd10      	pop	{r4, pc}

0800cb8c <sqrt>:
 800cb8c:	b538      	push	{r3, r4, r5, lr}
 800cb8e:	ed2d 8b02 	vpush	{d8}
 800cb92:	ec55 4b10 	vmov	r4, r5, d0
 800cb96:	f000 f825 	bl	800cbe4 <__ieee754_sqrt>
 800cb9a:	4622      	mov	r2, r4
 800cb9c:	462b      	mov	r3, r5
 800cb9e:	4620      	mov	r0, r4
 800cba0:	4629      	mov	r1, r5
 800cba2:	eeb0 8a40 	vmov.f32	s16, s0
 800cba6:	eef0 8a60 	vmov.f32	s17, s1
 800cbaa:	f7f3 ff8b 	bl	8000ac4 <__aeabi_dcmpun>
 800cbae:	b990      	cbnz	r0, 800cbd6 <sqrt+0x4a>
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	4629      	mov	r1, r5
 800cbb8:	f7f3 ff5c 	bl	8000a74 <__aeabi_dcmplt>
 800cbbc:	b158      	cbz	r0, 800cbd6 <sqrt+0x4a>
 800cbbe:	f7ff ffad 	bl	800cb1c <__errno>
 800cbc2:	2321      	movs	r3, #33	@ 0x21
 800cbc4:	6003      	str	r3, [r0, #0]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	2300      	movs	r3, #0
 800cbca:	4610      	mov	r0, r2
 800cbcc:	4619      	mov	r1, r3
 800cbce:	f7f3 fe09 	bl	80007e4 <__aeabi_ddiv>
 800cbd2:	ec41 0b18 	vmov	d8, r0, r1
 800cbd6:	eeb0 0a48 	vmov.f32	s0, s16
 800cbda:	eef0 0a68 	vmov.f32	s1, s17
 800cbde:	ecbd 8b02 	vpop	{d8}
 800cbe2:	bd38      	pop	{r3, r4, r5, pc}

0800cbe4 <__ieee754_sqrt>:
 800cbe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe8:	4a68      	ldr	r2, [pc, #416]	@ (800cd8c <__ieee754_sqrt+0x1a8>)
 800cbea:	ec55 4b10 	vmov	r4, r5, d0
 800cbee:	43aa      	bics	r2, r5
 800cbf0:	462b      	mov	r3, r5
 800cbf2:	4621      	mov	r1, r4
 800cbf4:	d110      	bne.n	800cc18 <__ieee754_sqrt+0x34>
 800cbf6:	4622      	mov	r2, r4
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	f7f3 fcc8 	bl	8000590 <__aeabi_dmul>
 800cc00:	4602      	mov	r2, r0
 800cc02:	460b      	mov	r3, r1
 800cc04:	4620      	mov	r0, r4
 800cc06:	4629      	mov	r1, r5
 800cc08:	f7f3 fb0c 	bl	8000224 <__adddf3>
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	460d      	mov	r5, r1
 800cc10:	ec45 4b10 	vmov	d0, r4, r5
 800cc14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc18:	2d00      	cmp	r5, #0
 800cc1a:	dc0e      	bgt.n	800cc3a <__ieee754_sqrt+0x56>
 800cc1c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800cc20:	4322      	orrs	r2, r4
 800cc22:	d0f5      	beq.n	800cc10 <__ieee754_sqrt+0x2c>
 800cc24:	b19d      	cbz	r5, 800cc4e <__ieee754_sqrt+0x6a>
 800cc26:	4622      	mov	r2, r4
 800cc28:	4620      	mov	r0, r4
 800cc2a:	4629      	mov	r1, r5
 800cc2c:	f7f3 faf8 	bl	8000220 <__aeabi_dsub>
 800cc30:	4602      	mov	r2, r0
 800cc32:	460b      	mov	r3, r1
 800cc34:	f7f3 fdd6 	bl	80007e4 <__aeabi_ddiv>
 800cc38:	e7e8      	b.n	800cc0c <__ieee754_sqrt+0x28>
 800cc3a:	152a      	asrs	r2, r5, #20
 800cc3c:	d115      	bne.n	800cc6a <__ieee754_sqrt+0x86>
 800cc3e:	2000      	movs	r0, #0
 800cc40:	e009      	b.n	800cc56 <__ieee754_sqrt+0x72>
 800cc42:	0acb      	lsrs	r3, r1, #11
 800cc44:	3a15      	subs	r2, #21
 800cc46:	0549      	lsls	r1, r1, #21
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d0fa      	beq.n	800cc42 <__ieee754_sqrt+0x5e>
 800cc4c:	e7f7      	b.n	800cc3e <__ieee754_sqrt+0x5a>
 800cc4e:	462a      	mov	r2, r5
 800cc50:	e7fa      	b.n	800cc48 <__ieee754_sqrt+0x64>
 800cc52:	005b      	lsls	r3, r3, #1
 800cc54:	3001      	adds	r0, #1
 800cc56:	02dc      	lsls	r4, r3, #11
 800cc58:	d5fb      	bpl.n	800cc52 <__ieee754_sqrt+0x6e>
 800cc5a:	1e44      	subs	r4, r0, #1
 800cc5c:	1b12      	subs	r2, r2, r4
 800cc5e:	f1c0 0420 	rsb	r4, r0, #32
 800cc62:	fa21 f404 	lsr.w	r4, r1, r4
 800cc66:	4323      	orrs	r3, r4
 800cc68:	4081      	lsls	r1, r0
 800cc6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc6e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800cc72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc76:	07d2      	lsls	r2, r2, #31
 800cc78:	bf5c      	itt	pl
 800cc7a:	005b      	lslpl	r3, r3, #1
 800cc7c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800cc80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc84:	bf58      	it	pl
 800cc86:	0049      	lslpl	r1, r1, #1
 800cc88:	2600      	movs	r6, #0
 800cc8a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800cc8e:	106d      	asrs	r5, r5, #1
 800cc90:	0049      	lsls	r1, r1, #1
 800cc92:	2016      	movs	r0, #22
 800cc94:	4632      	mov	r2, r6
 800cc96:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800cc9a:	1917      	adds	r7, r2, r4
 800cc9c:	429f      	cmp	r7, r3
 800cc9e:	bfde      	ittt	le
 800cca0:	193a      	addle	r2, r7, r4
 800cca2:	1bdb      	suble	r3, r3, r7
 800cca4:	1936      	addle	r6, r6, r4
 800cca6:	0fcf      	lsrs	r7, r1, #31
 800cca8:	3801      	subs	r0, #1
 800ccaa:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ccae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ccb2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ccb6:	d1f0      	bne.n	800cc9a <__ieee754_sqrt+0xb6>
 800ccb8:	4604      	mov	r4, r0
 800ccba:	2720      	movs	r7, #32
 800ccbc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	eb00 0e0c 	add.w	lr, r0, ip
 800ccc6:	db02      	blt.n	800ccce <__ieee754_sqrt+0xea>
 800ccc8:	d113      	bne.n	800ccf2 <__ieee754_sqrt+0x10e>
 800ccca:	458e      	cmp	lr, r1
 800cccc:	d811      	bhi.n	800ccf2 <__ieee754_sqrt+0x10e>
 800ccce:	f1be 0f00 	cmp.w	lr, #0
 800ccd2:	eb0e 000c 	add.w	r0, lr, ip
 800ccd6:	da42      	bge.n	800cd5e <__ieee754_sqrt+0x17a>
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	db40      	blt.n	800cd5e <__ieee754_sqrt+0x17a>
 800ccdc:	f102 0801 	add.w	r8, r2, #1
 800cce0:	1a9b      	subs	r3, r3, r2
 800cce2:	458e      	cmp	lr, r1
 800cce4:	bf88      	it	hi
 800cce6:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800ccea:	eba1 010e 	sub.w	r1, r1, lr
 800ccee:	4464      	add	r4, ip
 800ccf0:	4642      	mov	r2, r8
 800ccf2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ccf6:	3f01      	subs	r7, #1
 800ccf8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ccfc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cd00:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800cd04:	d1dc      	bne.n	800ccc0 <__ieee754_sqrt+0xdc>
 800cd06:	4319      	orrs	r1, r3
 800cd08:	d01b      	beq.n	800cd42 <__ieee754_sqrt+0x15e>
 800cd0a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800cd90 <__ieee754_sqrt+0x1ac>
 800cd0e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800cd94 <__ieee754_sqrt+0x1b0>
 800cd12:	e9da 0100 	ldrd	r0, r1, [sl]
 800cd16:	e9db 2300 	ldrd	r2, r3, [fp]
 800cd1a:	f7f3 fa81 	bl	8000220 <__aeabi_dsub>
 800cd1e:	e9da 8900 	ldrd	r8, r9, [sl]
 800cd22:	4602      	mov	r2, r0
 800cd24:	460b      	mov	r3, r1
 800cd26:	4640      	mov	r0, r8
 800cd28:	4649      	mov	r1, r9
 800cd2a:	f7f3 fead 	bl	8000a88 <__aeabi_dcmple>
 800cd2e:	b140      	cbz	r0, 800cd42 <__ieee754_sqrt+0x15e>
 800cd30:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800cd34:	e9da 0100 	ldrd	r0, r1, [sl]
 800cd38:	e9db 2300 	ldrd	r2, r3, [fp]
 800cd3c:	d111      	bne.n	800cd62 <__ieee754_sqrt+0x17e>
 800cd3e:	3601      	adds	r6, #1
 800cd40:	463c      	mov	r4, r7
 800cd42:	1072      	asrs	r2, r6, #1
 800cd44:	0863      	lsrs	r3, r4, #1
 800cd46:	07f1      	lsls	r1, r6, #31
 800cd48:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800cd4c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800cd50:	bf48      	it	mi
 800cd52:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800cd56:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	e756      	b.n	800cc0c <__ieee754_sqrt+0x28>
 800cd5e:	4690      	mov	r8, r2
 800cd60:	e7be      	b.n	800cce0 <__ieee754_sqrt+0xfc>
 800cd62:	f7f3 fa5f 	bl	8000224 <__adddf3>
 800cd66:	e9da 8900 	ldrd	r8, r9, [sl]
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	4640      	mov	r0, r8
 800cd70:	4649      	mov	r1, r9
 800cd72:	f7f3 fe7f 	bl	8000a74 <__aeabi_dcmplt>
 800cd76:	b120      	cbz	r0, 800cd82 <__ieee754_sqrt+0x19e>
 800cd78:	1ca0      	adds	r0, r4, #2
 800cd7a:	bf08      	it	eq
 800cd7c:	3601      	addeq	r6, #1
 800cd7e:	3402      	adds	r4, #2
 800cd80:	e7df      	b.n	800cd42 <__ieee754_sqrt+0x15e>
 800cd82:	1c63      	adds	r3, r4, #1
 800cd84:	f023 0401 	bic.w	r4, r3, #1
 800cd88:	e7db      	b.n	800cd42 <__ieee754_sqrt+0x15e>
 800cd8a:	bf00      	nop
 800cd8c:	7ff00000 	.word	0x7ff00000
 800cd90:	200002e8 	.word	0x200002e8
 800cd94:	200002e0 	.word	0x200002e0

0800cd98 <_init>:
 800cd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9a:	bf00      	nop
 800cd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd9e:	bc08      	pop	{r3}
 800cda0:	469e      	mov	lr, r3
 800cda2:	4770      	bx	lr

0800cda4 <_fini>:
 800cda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cda6:	bf00      	nop
 800cda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdaa:	bc08      	pop	{r3}
 800cdac:	469e      	mov	lr, r3
 800cdae:	4770      	bx	lr
