
Studio_readRPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d334  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800d50c  0800d50c  0000e50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d570  0800d570  0000f2f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d570  0800d570  0000e570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d578  0800d578  0000f2f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d578  0800d578  0000e578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d57c  0800d57c  0000e57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  0800d580  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000130c  200002f8  0800d878  0000f2f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001604  0800d878  0000f604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021b36  00000000  00000000  0000f328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000366f  00000000  00000000  00030e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  000344d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000134d  00000000  00000000  00035d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029664  00000000  00000000  000370a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000204d6  00000000  00000000  00060709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116ecb  00000000  00000000  00080bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00197aaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fac  00000000  00000000  00197af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0019ea9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002f8 	.word	0x200002f8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d4f4 	.word	0x0800d4f4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002fc 	.word	0x200002fc
 8000214:	0800d4f4 	.word	0x0800d4f4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000e00:	f000 b96a 	b.w	80010d8 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	460c      	mov	r4, r1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d14e      	bne.n	8000ec6 <__udivmoddi4+0xaa>
 8000e28:	4694      	mov	ip, r2
 8000e2a:	458c      	cmp	ip, r1
 8000e2c:	4686      	mov	lr, r0
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	d962      	bls.n	8000efa <__udivmoddi4+0xde>
 8000e34:	b14a      	cbz	r2, 8000e4a <__udivmoddi4+0x2e>
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	4091      	lsls	r1, r2
 8000e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e44:	4319      	orrs	r1, r3
 8000e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f f68c 	uxth.w	r6, ip
 8000e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d90a      	bls.n	8000e80 <__udivmoddi4+0x64>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e72:	f080 8112 	bcs.w	800109a <__udivmoddi4+0x27e>
 8000e76:	4299      	cmp	r1, r3
 8000e78:	f240 810f 	bls.w	800109a <__udivmoddi4+0x27e>
 8000e7c:	3c02      	subs	r4, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	1a59      	subs	r1, r3, r1
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e92:	fb00 f606 	mul.w	r6, r0, r6
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d90a      	bls.n	8000eb0 <__udivmoddi4+0x94>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea2:	f080 80fc 	bcs.w	800109e <__udivmoddi4+0x282>
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	f240 80f9 	bls.w	800109e <__udivmoddi4+0x282>
 8000eac:	4463      	add	r3, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	b11d      	cbz	r5, 8000ec2 <__udivmoddi4+0xa6>
 8000eba:	40d3      	lsrs	r3, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d905      	bls.n	8000ed6 <__udivmoddi4+0xba>
 8000eca:	b10d      	cbz	r5, 8000ed0 <__udivmoddi4+0xb4>
 8000ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e7f5      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000ed6:	fab3 f183 	clz	r1, r3
 8000eda:	2900      	cmp	r1, #0
 8000edc:	d146      	bne.n	8000f6c <__udivmoddi4+0x150>
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xcc>
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	f0c0 80f0 	bcc.w	80010c8 <__udivmoddi4+0x2ac>
 8000ee8:	1a86      	subs	r6, r0, r2
 8000eea:	eb64 0303 	sbc.w	r3, r4, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d0e6      	beq.n	8000ec2 <__udivmoddi4+0xa6>
 8000ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ef8:	e7e3      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	f040 8090 	bne.w	8001020 <__udivmoddi4+0x204>
 8000f00:	eba1 040c 	sub.w	r4, r1, ip
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f16:	fb08 4416 	mls	r4, r8, r6, r4
 8000f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f1e:	fb07 f006 	mul.w	r0, r7, r6
 8000f22:	4298      	cmp	r0, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x11c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x11a>
 8000f30:	4298      	cmp	r0, r3
 8000f32:	f200 80cd 	bhi.w	80010d0 <__udivmoddi4+0x2b4>
 8000f36:	4626      	mov	r6, r4
 8000f38:	1a1c      	subs	r4, r3, r0
 8000f3a:	fa1f f38e 	uxth.w	r3, lr
 8000f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f42:	fb08 4410 	mls	r4, r8, r0, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb00 f707 	mul.w	r7, r0, r7
 8000f4e:	429f      	cmp	r7, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x148>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x146>
 8000f5c:	429f      	cmp	r7, r3
 8000f5e:	f200 80b0 	bhi.w	80010c2 <__udivmoddi4+0x2a6>
 8000f62:	4620      	mov	r0, r4
 8000f64:	1bdb      	subs	r3, r3, r7
 8000f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f6a:	e7a5      	b.n	8000eb8 <__udivmoddi4+0x9c>
 8000f6c:	f1c1 0620 	rsb	r6, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 f706 	lsr.w	r7, r2, r6
 8000f76:	431f      	orrs	r7, r3
 8000f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000f80:	ea43 030c 	orr.w	r3, r3, ip
 8000f84:	40f4      	lsrs	r4, r6
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	0c38      	lsrs	r0, r7, #16
 8000f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f90:	fbb4 fef0 	udiv	lr, r4, r0
 8000f94:	fa1f fc87 	uxth.w	ip, r7
 8000f98:	fb00 441e 	mls	r4, r0, lr, r4
 8000f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fa4:	45a1      	cmp	r9, r4
 8000fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x1a6>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fb2:	f080 8084 	bcs.w	80010be <__udivmoddi4+0x2a2>
 8000fb6:	45a1      	cmp	r9, r4
 8000fb8:	f240 8081 	bls.w	80010be <__udivmoddi4+0x2a2>
 8000fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	eba4 0409 	sub.w	r4, r4, r9
 8000fc6:	fa1f f983 	uxth.w	r9, r3
 8000fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fce:	fb00 4413 	mls	r4, r0, r3, r4
 8000fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fda:	45a4      	cmp	ip, r4
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x1d2>
 8000fde:	193c      	adds	r4, r7, r4
 8000fe0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fe4:	d267      	bcs.n	80010b6 <__udivmoddi4+0x29a>
 8000fe6:	45a4      	cmp	ip, r4
 8000fe8:	d965      	bls.n	80010b6 <__udivmoddi4+0x29a>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ff6:	eba4 040c 	sub.w	r4, r4, ip
 8000ffa:	429c      	cmp	r4, r3
 8000ffc:	46ce      	mov	lr, r9
 8000ffe:	469c      	mov	ip, r3
 8001000:	d351      	bcc.n	80010a6 <__udivmoddi4+0x28a>
 8001002:	d04e      	beq.n	80010a2 <__udivmoddi4+0x286>
 8001004:	b155      	cbz	r5, 800101c <__udivmoddi4+0x200>
 8001006:	ebb8 030e 	subs.w	r3, r8, lr
 800100a:	eb64 040c 	sbc.w	r4, r4, ip
 800100e:	fa04 f606 	lsl.w	r6, r4, r6
 8001012:	40cb      	lsrs	r3, r1
 8001014:	431e      	orrs	r6, r3
 8001016:	40cc      	lsrs	r4, r1
 8001018:	e9c5 6400 	strd	r6, r4, [r5]
 800101c:	2100      	movs	r1, #0
 800101e:	e750      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8001020:	f1c2 0320 	rsb	r3, r2, #32
 8001024:	fa20 f103 	lsr.w	r1, r0, r3
 8001028:	fa0c fc02 	lsl.w	ip, ip, r2
 800102c:	fa24 f303 	lsr.w	r3, r4, r3
 8001030:	4094      	lsls	r4, r2
 8001032:	430c      	orrs	r4, r1
 8001034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001038:	fa00 fe02 	lsl.w	lr, r0, r2
 800103c:	fa1f f78c 	uxth.w	r7, ip
 8001040:	fbb3 f0f8 	udiv	r0, r3, r8
 8001044:	fb08 3110 	mls	r1, r8, r0, r3
 8001048:	0c23      	lsrs	r3, r4, #16
 800104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104e:	fb00 f107 	mul.w	r1, r0, r7
 8001052:	4299      	cmp	r1, r3
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x24c>
 8001056:	eb1c 0303 	adds.w	r3, ip, r3
 800105a:	f100 36ff 	add.w	r6, r0, #4294967295
 800105e:	d22c      	bcs.n	80010ba <__udivmoddi4+0x29e>
 8001060:	4299      	cmp	r1, r3
 8001062:	d92a      	bls.n	80010ba <__udivmoddi4+0x29e>
 8001064:	3802      	subs	r0, #2
 8001066:	4463      	add	r3, ip
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001070:	fb08 3311 	mls	r3, r8, r1, r3
 8001074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001078:	fb01 f307 	mul.w	r3, r1, r7
 800107c:	42a3      	cmp	r3, r4
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x276>
 8001080:	eb1c 0404 	adds.w	r4, ip, r4
 8001084:	f101 36ff 	add.w	r6, r1, #4294967295
 8001088:	d213      	bcs.n	80010b2 <__udivmoddi4+0x296>
 800108a:	42a3      	cmp	r3, r4
 800108c:	d911      	bls.n	80010b2 <__udivmoddi4+0x296>
 800108e:	3902      	subs	r1, #2
 8001090:	4464      	add	r4, ip
 8001092:	1ae4      	subs	r4, r4, r3
 8001094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001098:	e739      	b.n	8000f0e <__udivmoddi4+0xf2>
 800109a:	4604      	mov	r4, r0
 800109c:	e6f0      	b.n	8000e80 <__udivmoddi4+0x64>
 800109e:	4608      	mov	r0, r1
 80010a0:	e706      	b.n	8000eb0 <__udivmoddi4+0x94>
 80010a2:	45c8      	cmp	r8, r9
 80010a4:	d2ae      	bcs.n	8001004 <__udivmoddi4+0x1e8>
 80010a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ae:	3801      	subs	r0, #1
 80010b0:	e7a8      	b.n	8001004 <__udivmoddi4+0x1e8>
 80010b2:	4631      	mov	r1, r6
 80010b4:	e7ed      	b.n	8001092 <__udivmoddi4+0x276>
 80010b6:	4603      	mov	r3, r0
 80010b8:	e799      	b.n	8000fee <__udivmoddi4+0x1d2>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e7d4      	b.n	8001068 <__udivmoddi4+0x24c>
 80010be:	46d6      	mov	lr, sl
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1a6>
 80010c2:	4463      	add	r3, ip
 80010c4:	3802      	subs	r0, #2
 80010c6:	e74d      	b.n	8000f64 <__udivmoddi4+0x148>
 80010c8:	4606      	mov	r6, r0
 80010ca:	4623      	mov	r3, r4
 80010cc:	4608      	mov	r0, r1
 80010ce:	e70f      	b.n	8000ef0 <__udivmoddi4+0xd4>
 80010d0:	3e02      	subs	r6, #2
 80010d2:	4463      	add	r3, ip
 80010d4:	e730      	b.n	8000f38 <__udivmoddi4+0x11c>
 80010d6:	bf00      	nop

080010d8 <__aeabi_idiv0>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <modbus_1t5_Timeout>:
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);
void Hearthbeat();

// function for interrupt
void modbus_1t5_Timeout()
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2201      	movs	r2, #1
 80010e6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0201 	orr.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000314 	.word	0x20000314

0800111c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <modbus_3t5_Timeout+0x1c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2201      	movs	r2, #1
 800112a:	755a      	strb	r2, [r3, #21]

}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	20000314 	.word	0x20000314

0800113c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f00a fa71 	bl	800b62c <HAL_UART_GetError>
 800114a:	4603      	mov	r3, r0
 800114c:	2b20      	cmp	r3, #32
 800114e:	d101      	bne.n	8001154 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001150:	f7ff ffc4 	bl	80010dc <modbus_1t5_Timeout>

	}
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001166:	4a25      	ldr	r2, [pc, #148]	@ (80011fc <Modbus_init+0xa0>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800116c:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <Modbus_init+0xa0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	4a21      	ldr	r2, [pc, #132]	@ (8001200 <Modbus_init+0xa4>)
 800117a:	210e      	movs	r1, #14
 800117c:	4618      	mov	r0, r3
 800117e:	f008 fd2d 	bl	8009bdc <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2110      	movs	r1, #16
 8001188:	4618      	mov	r0, r3
 800118a:	f00a f9f9 	bl	800b580 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	4618      	mov	r0, r3
 8001194:	f00a fa10 	bl	800b5b8 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	4a19      	ldr	r2, [pc, #100]	@ (8001204 <Modbus_init+0xa8>)
 800119e:	2104      	movs	r1, #4
 80011a0:	4618      	mov	r0, r3
 80011a2:	f009 fcd7 	bl	800ab54 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <Modbus_init+0xa0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <Modbus_init+0xa0>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <Modbus_init+0xa0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80011b8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011bc:	4413      	add	r3, r2
 80011be:	3302      	adds	r3, #2
 80011c0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011c4:	4619      	mov	r1, r3
 80011c6:	f009 fdff 	bl	800adc8 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <Modbus_init+0xa0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d10c      	bne.n	80011f4 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f007 fccd 	bl	8008b80 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011e6:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <Modbus_init+0xa0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f007 ff26 	bl	8009040 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000314 	.word	0x20000314
 8001200:	0800111d 	.word	0x0800111d
 8001204:	0800113d 	.word	0x0800113d

08001208 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001214:	23ff      	movs	r3, #255	@ 0xff
 8001216:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001218:	23ff      	movs	r3, #255	@ 0xff
 800121a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800121c:	e013      	b.n	8001246 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	781a      	ldrb	r2, [r3, #0]
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	4053      	eors	r3, r2
 800122a:	b2db      	uxtb	r3, r3
 800122c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800122e:	4a0f      	ldr	r2, [pc, #60]	@ (800126c <CRC16+0x64>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4413      	add	r3, r2
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	4053      	eors	r3, r2
 800123a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800123c:	4a0c      	ldr	r2, [pc, #48]	@ (8001270 <CRC16+0x68>)
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	4413      	add	r3, r2
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001246:	883b      	ldrh	r3, [r7, #0]
 8001248:	1e5a      	subs	r2, r3, #1
 800124a:	803a      	strh	r2, [r7, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1e6      	bne.n	800121e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	7bbb      	ldrb	r3, [r7, #14]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21b      	sxth	r3, r3
 800125e:	b29b      	uxth	r3, r3
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	20000100 	.word	0x20000100
 8001270:	20000000 	.word	0x20000000

08001274 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800127a:	4b7e      	ldr	r3, [pc, #504]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	7ddb      	ldrb	r3, [r3, #23]
 8001280:	3b01      	subs	r3, #1
 8001282:	2b03      	cmp	r3, #3
 8001284:	d80a      	bhi.n	800129c <Modbus_Protocal_Worker+0x28>
 8001286:	a201      	add	r2, pc, #4	@ (adr r2, 800128c <Modbus_Protocal_Worker+0x18>)
 8001288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128c:	080012a7 	.word	0x080012a7
 8001290:	0800143b 	.word	0x0800143b
 8001294:	08001333 	.word	0x08001333
 8001298:	08001377 	.word	0x08001377
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 800129c:	4b75      	ldr	r3, [pc, #468]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2201      	movs	r2, #1
 80012a2:	75da      	strb	r2, [r3, #23]
		break;
 80012a4:	e0e1      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80012a6:	4b73      	ldr	r3, [pc, #460]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80012b2:	4b70      	ldr	r3, [pc, #448]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2202      	movs	r2, #2
 80012b8:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80012ba:	f000 f9cd 	bl	8001658 <Modbus_Emission>
 80012be:	e018      	b.n	80012f2 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80012c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80012ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d00b      	beq.n	80012f2 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80012da:	4b66      	ldr	r3, [pc, #408]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2200      	movs	r2, #0
 80012e0:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80012e2:	4b64      	ldr	r3, [pc, #400]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2200      	movs	r2, #0
 80012e8:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80012ea:	4b62      	ldr	r3, [pc, #392]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2203      	movs	r2, #3
 80012f0:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80012f2:	4b60      	ldr	r3, [pc, #384]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012fc:	2b20      	cmp	r3, #32
 80012fe:	f040 80ad 	bne.w	800145c <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001302:	4b5c      	ldr	r3, [pc, #368]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2200      	movs	r2, #0
 8001308:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800130c:	4b59      	ldr	r3, [pc, #356]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001312:	4b58      	ldr	r3, [pc, #352]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b57      	ldr	r3, [pc, #348]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800131e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001322:	4413      	add	r3, r2
 8001324:	3302      	adds	r3, #2
 8001326:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800132a:	4619      	mov	r1, r3
 800132c:	f009 fd4c 	bl	800adc8 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001330:	e094      	b.n	800145c <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001332:	4b50      	ldr	r3, [pc, #320]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	7d1b      	ldrb	r3, [r3, #20]
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 8091 	beq.w	8001460 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800133e:	4b4d      	ldr	r3, [pc, #308]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	22fe      	movs	r2, #254	@ 0xfe
 8001344:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001346:	4b4b      	ldr	r3, [pc, #300]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001350:	4b48      	ldr	r3, [pc, #288]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001360:	4b44      	ldr	r3, [pc, #272]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001362:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001364:	1a8a      	subs	r2, r1, r2
 8001366:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001368:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800136c:	4b41      	ldr	r3, [pc, #260]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2204      	movs	r2, #4
 8001372:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001374:	e074      	b.n	8001460 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001376:	4b3f      	ldr	r3, [pc, #252]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800137e:	f113 0f02 	cmn.w	r3, #2
 8001382:	d150      	bne.n	8001426 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001384:	4b3b      	ldr	r3, [pc, #236]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2200      	movs	r2, #0
 800138a:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 800138c:	4b39      	ldr	r3, [pc, #228]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001394:	4b37      	ldr	r3, [pc, #220]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800139c:	3b02      	subs	r3, #2
 800139e:	4619      	mov	r1, r3
 80013a0:	4610      	mov	r0, r2
 80013a2:	f7ff ff31 	bl	8001208 <CRC16>
 80013a6:	4603      	mov	r3, r0
 80013a8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013aa:	793a      	ldrb	r2, [r7, #4]
 80013ac:	4b31      	ldr	r3, [pc, #196]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013ae:	6819      	ldr	r1, [r3, #0]
 80013b0:	4b30      	ldr	r3, [pc, #192]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013b8:	3b02      	subs	r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d10c      	bne.n	80013de <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80013c4:	797a      	ldrb	r2, [r7, #5]
 80013c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013c8:	6819      	ldr	r1, [r3, #0]
 80013ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013d2:	3b01      	subs	r3, #1
 80013d4:	440b      	add	r3, r1
 80013d6:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d004      	beq.n	80013e8 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80013de:	4b25      	ldr	r3, [pc, #148]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	22ff      	movs	r2, #255	@ 0xff
 80013e4:	759a      	strb	r2, [r3, #22]
				break;
 80013e6:	e040      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80013e8:	4b22      	ldr	r3, [pc, #136]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80013f0:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d113      	bne.n	8001422 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80013fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001402:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800140a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800140c:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001414:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001416:	461a      	mov	r2, r3
 8001418:	f00b ff58 	bl	800d2cc <memcpy>

			//execute command
			Modbus_frame_response();
 800141c:	f000 f904 	bl	8001628 <Modbus_frame_response>
 8001420:	e001      	b.n	8001426 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001422:	bf00      	nop
					}
		break;


	}
}
 8001424:	e021      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8001426:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	7d5b      	ldrb	r3, [r3, #21]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d019      	beq.n	8001464 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001430:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2201      	movs	r2, #1
 8001436:	75da      	strb	r2, [r3, #23]
		break;
 8001438:	e014      	b.n	8001464 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800143a:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001444:	2b20      	cmp	r3, #32
 8001446:	d10f      	bne.n	8001468 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001448:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001452:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2201      	movs	r2, #1
 8001458:	75da      	strb	r2, [r3, #23]
		break;
 800145a:	e005      	b.n	8001468 <Modbus_Protocal_Worker+0x1f4>
		break;
 800145c:	bf00      	nop
 800145e:	e004      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		break;
 8001460:	bf00      	nop
 8001462:	e002      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		break;
 8001464:	bf00      	nop
 8001466:	e000      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		break;
 8001468:	bf00      	nop
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000314 	.word	0x20000314

08001478 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800147e:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <modbusWrite1Register+0x7c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	7e5b      	ldrb	r3, [r3, #25]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	b29b      	uxth	r3, r3
 8001488:	4a1a      	ldr	r2, [pc, #104]	@ (80014f4 <modbusWrite1Register+0x7c>)
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	7e92      	ldrb	r2, [r2, #26]
 800148e:	4413      	add	r3, r2
 8001490:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001492:	88fa      	ldrh	r2, [r7, #6]
 8001494:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <modbusWrite1Register+0x7c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	429a      	cmp	r2, r3
 800149c:	d903      	bls.n	80014a6 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800149e:	2002      	movs	r0, #2
 80014a0:	f000 f8a0 	bl	80015e4 <ModbusErrorReply>
			 return;
 80014a4:	e023      	b.n	80014ee <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80014a6:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	440b      	add	r3, r1
 80014b6:	7ed2      	ldrb	r2, [r2, #27]
 80014b8:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6859      	ldr	r1, [r3, #4]
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	440b      	add	r3, r1
 80014ca:	7f12      	ldrb	r2, [r2, #28]
 80014cc:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80014d6:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80014dc:	2208      	movs	r2, #8
 80014de:	4619      	mov	r1, r3
 80014e0:	f00b fef4 	bl	800d2cc <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2205      	movs	r2, #5
 80014ea:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000314 	.word	0x20000314

080014f8 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80014fe:	4b38      	ldr	r3, [pc, #224]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	7edb      	ldrb	r3, [r3, #27]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b29b      	uxth	r3, r3
 8001508:	4a35      	ldr	r2, [pc, #212]	@ (80015e0 <modbusRead1Register+0xe8>)
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	7f12      	ldrb	r2, [r2, #28]
 800150e:	4413      	add	r3, r2
 8001510:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001512:	4b33      	ldr	r3, [pc, #204]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	7e5b      	ldrb	r3, [r3, #25]
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	b29b      	uxth	r3, r3
 800151c:	4a30      	ldr	r2, [pc, #192]	@ (80015e0 <modbusRead1Register+0xe8>)
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	7e92      	ldrb	r2, [r2, #26]
 8001522:	4413      	add	r3, r2
 8001524:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <modbusRead1Register+0x3a>
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	2b7d      	cmp	r3, #125	@ 0x7d
 8001530:	d903      	bls.n	800153a <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001532:	2003      	movs	r0, #3
 8001534:	f000 f856 	bl	80015e4 <ModbusErrorReply>
		 return;
 8001538:	e04e      	b.n	80015d8 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800153a:	88ba      	ldrh	r2, [r7, #4]
 800153c:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <modbusRead1Register+0xe8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	429a      	cmp	r2, r3
 8001544:	d808      	bhi.n	8001558 <modbusRead1Register+0x60>
 8001546:	88ba      	ldrh	r2, [r7, #4]
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	4413      	add	r3, r2
 800154c:	461a      	mov	r2, r3
 800154e:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	429a      	cmp	r2, r3
 8001556:	d903      	bls.n	8001560 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001558:	2002      	movs	r0, #2
 800155a:	f000 f843 	bl	80015e4 <ModbusErrorReply>
		 return;
 800155e:	e03b      	b.n	80015d8 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001560:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2203      	movs	r2, #3
 8001566:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0052      	lsls	r2, r2, #1
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800157a:	2400      	movs	r4, #0
 800157c:	e020      	b.n	80015c0 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800157e:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	88bb      	ldrh	r3, [r7, #4]
 8001586:	4423      	add	r3, r4
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	18d1      	adds	r1, r2, r3
 800158c:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <modbusRead1Register+0xe8>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	1c63      	adds	r3, r4, #1
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	7849      	ldrb	r1, [r1, #1]
 8001596:	4413      	add	r3, r2
 8001598:	460a      	mov	r2, r1
 800159a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <modbusRead1Register+0xe8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	88bb      	ldrh	r3, [r7, #4]
 80015a6:	4423      	add	r3, r4
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	18d1      	adds	r1, r2, r3
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <modbusRead1Register+0xe8>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	0063      	lsls	r3, r4, #1
 80015b2:	3303      	adds	r3, #3
 80015b4:	7809      	ldrb	r1, [r1, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	460a      	mov	r2, r1
 80015ba:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80015be:	3401      	adds	r4, #1
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	429c      	cmp	r4, r3
 80015c4:	dbdb      	blt.n	800157e <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	3301      	adds	r3, #1
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b04      	ldr	r3, [pc, #16]	@ (80015e0 <modbusRead1Register+0xe8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	0052      	lsls	r2, r2, #1
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000314 	.word	0x20000314

080015e4 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80015ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001624 <ModbusErrorReply+0x40>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	7e1a      	ldrb	r2, [r3, #24]
 80015f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <ModbusErrorReply+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001602:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <ModbusErrorReply+0x40>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	79fa      	ldrb	r2, [r7, #7]
 8001608:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 800160c:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <ModbusErrorReply+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2202      	movs	r2, #2
 8001612:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000314 	.word	0x20000314

08001628 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 800162c:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <Modbus_frame_response+0x2c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	7e1b      	ldrb	r3, [r3, #24]
 8001632:	2b03      	cmp	r3, #3
 8001634:	d004      	beq.n	8001640 <Modbus_frame_response+0x18>
 8001636:	2b06      	cmp	r3, #6
 8001638:	d105      	bne.n	8001646 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800163a:	f7ff ff1d 	bl	8001478 <modbusWrite1Register>
		break;
 800163e:	e006      	b.n	800164e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001640:	f7ff ff5a 	bl	80014f8 <modbusRead1Register>
		break;
 8001644:	e003      	b.n	800164e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001646:	2001      	movs	r0, #1
 8001648:	f7ff ffcc 	bl	80015e4 <ModbusErrorReply>
		break;
 800164c:	bf00      	nop

	}
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000314 	.word	0x20000314

08001658 <Modbus_Emission>:

void Modbus_Emission()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800165e:	4b38      	ldr	r3, [pc, #224]	@ (8001740 <Modbus_Emission+0xe8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001668:	2b20      	cmp	r3, #32
 800166a:	d15d      	bne.n	8001728 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800166c:	4b34      	ldr	r3, [pc, #208]	@ (8001740 <Modbus_Emission+0xe8>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b33      	ldr	r3, [pc, #204]	@ (8001740 <Modbus_Emission+0xe8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800167a:	4b31      	ldr	r3, [pc, #196]	@ (8001740 <Modbus_Emission+0xe8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001682:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001684:	4b2e      	ldr	r3, [pc, #184]	@ (8001740 <Modbus_Emission+0xe8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 800168c:	4b2c      	ldr	r3, [pc, #176]	@ (8001740 <Modbus_Emission+0xe8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001694:	461a      	mov	r2, r3
 8001696:	f00b fe19 	bl	800d2cc <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800169a:	4b29      	ldr	r3, [pc, #164]	@ (8001740 <Modbus_Emission+0xe8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b26      	ldr	r3, [pc, #152]	@ (8001740 <Modbus_Emission+0xe8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3203      	adds	r2, #3
 80016aa:	b292      	uxth	r2, r2
 80016ac:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016b0:	4b23      	ldr	r3, [pc, #140]	@ (8001740 <Modbus_Emission+0xe8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80016b8:	4b21      	ldr	r3, [pc, #132]	@ (8001740 <Modbus_Emission+0xe8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016c0:	3b02      	subs	r3, #2
 80016c2:	4619      	mov	r1, r3
 80016c4:	4610      	mov	r0, r2
 80016c6:	f7ff fd9f 	bl	8001208 <CRC16>
 80016ca:	4603      	mov	r3, r0
 80016cc:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80016ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <Modbus_Emission+0xe8>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <Modbus_Emission+0xe8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80016da:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80016dc:	7939      	ldrb	r1, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	460a      	mov	r2, r1
 80016e2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80016e6:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <Modbus_Emission+0xe8>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <Modbus_Emission+0xe8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80016f2:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80016f4:	7979      	ldrb	r1, [r7, #5]
 80016f6:	4413      	add	r3, r2
 80016f8:	460a      	mov	r2, r1
 80016fa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80016fe:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <Modbus_Emission+0xe8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001708:	2b20      	cmp	r3, #32
 800170a:	d10d      	bne.n	8001728 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <Modbus_Emission+0xe8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <Modbus_Emission+0xe8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <Modbus_Emission+0xe8>)
 800171c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800171e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001722:	461a      	mov	r2, r3
 8001724:	f009 fad0 	bl	800acc8 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <Modbus_Emission+0xe8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2200      	movs	r2, #0
 800172e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <Modbus_Emission+0xe8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2200      	movs	r2, #0
 8001736:	755a      	strb	r2, [r3, #21]

}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000314 	.word	0x20000314

08001744 <KalmanFilter_Init>:

void KalmanFilter_Init(KalmanFilter* kf, float32_t* A_data, float32_t* B_data, float32_t* C_data,
                       float32_t* G_data, float32_t* Q_data, float32_t* R_data, float32_t* P_data,
                       float32_t* x_data, float32_t* K_data, float32_t* temp1_data,
                       float32_t* temp2_data, float32_t* temp3_data, float32_t* temp4_data,
                       float32_t* temp5_data, float32_t* temp6_data, float32_t* S_data) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
    arm_mat_init_f32(&kf->A, 3, 3, A_data);
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2203      	movs	r2, #3
 8001758:	2103      	movs	r1, #3
 800175a:	f00b f900 	bl	800c95e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, 3, 1, B_data);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f103 0008 	add.w	r0, r3, #8
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	2103      	movs	r1, #3
 800176a:	f00b f8f8 	bl	800c95e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->C, 1, 3, C_data);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f103 0010 	add.w	r0, r3, #16
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2203      	movs	r2, #3
 8001778:	2101      	movs	r1, #1
 800177a:	f00b f8f0 	bl	800c95e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->G, 3, 1, G_data); // Process noise gain matrix is now 3x1
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f103 0018 	add.w	r0, r3, #24
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2201      	movs	r2, #1
 8001788:	2103      	movs	r1, #3
 800178a:	f00b f8e8 	bl	800c95e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, 1, 1, Q_data); // Process noise covariance is now 1x1
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f103 0020 	add.w	r0, r3, #32
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	2201      	movs	r2, #1
 8001798:	2101      	movs	r1, #1
 800179a:	f00b f8e0 	bl	800c95e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, 1, 1, R_data);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	2201      	movs	r2, #1
 80017a8:	2101      	movs	r1, #1
 80017aa:	f00b f8d8 	bl	800c95e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, 3, 3, P_data);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80017b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b6:	2203      	movs	r2, #3
 80017b8:	2103      	movs	r1, #3
 80017ba:	f00b f8d0 	bl	800c95e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->x, 3, 1, x_data);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80017c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c6:	2201      	movs	r2, #1
 80017c8:	2103      	movs	r1, #3
 80017ca:	f00b f8c8 	bl	800c95e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, 3, 1, K_data); // Initialize K matrix
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80017d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d6:	2201      	movs	r2, #1
 80017d8:	2103      	movs	r1, #3
 80017da:	f00b f8c0 	bl	800c95e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp1, 3, 3, temp1_data);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80017e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017e6:	2203      	movs	r2, #3
 80017e8:	2103      	movs	r1, #3
 80017ea:	f00b f8b8 	bl	800c95e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, 3, 3, temp2_data);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80017f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017f6:	2203      	movs	r2, #3
 80017f8:	2103      	movs	r1, #3
 80017fa:	f00b f8b0 	bl	800c95e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, 3, 1, temp3_data);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8001804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001806:	2201      	movs	r2, #1
 8001808:	2103      	movs	r1, #3
 800180a:	f00b f8a8 	bl	800c95e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp4, 1, 1, temp4_data);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8001814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001816:	2201      	movs	r2, #1
 8001818:	2101      	movs	r1, #1
 800181a:	f00b f8a0 	bl	800c95e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp5, 3, 1, temp5_data);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f103 0078 	add.w	r0, r3, #120	@ 0x78
 8001824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001826:	2201      	movs	r2, #1
 8001828:	2103      	movs	r1, #3
 800182a:	f00b f898 	bl	800c95e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp6, 1, 3, temp6_data);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8001834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001836:	2203      	movs	r2, #3
 8001838:	2101      	movs	r1, #1
 800183a:	f00b f890 	bl	800c95e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->S, 1, 1, S_data);  // Initialize S matrix
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8001844:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001846:	2201      	movs	r2, #1
 8001848:	2101      	movs	r1, #1
 800184a:	f00b f888 	bl	800c95e <arm_mat_init_f32>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <KalmanFilter_Predict>:

void KalmanFilter_Predict(KalmanFilter* kf, float32_t* u_data, float32_t* w_data) {
 8001856:	b580      	push	{r7, lr}
 8001858:	b088      	sub	sp, #32
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
    arm_matrix_instance_f32 u;
    arm_matrix_instance_f32 w;
    arm_mat_init_f32(&u, 1, 1, u_data);
 8001862:	f107 0018 	add.w	r0, r7, #24
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	2201      	movs	r2, #1
 800186a:	2101      	movs	r1, #1
 800186c:	f00b f877 	bl	800c95e <arm_mat_init_f32>
    arm_mat_init_f32(&w, 1, 1, w_data);
 8001870:	f107 0010 	add.w	r0, r7, #16
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	2101      	movs	r1, #1
 800187a:	f00b f870 	bl	800c95e <arm_mat_init_f32>

    // x = A * x + B * u + G * w
    arm_mat_mult_f32(&kf->A, &kf->x, &kf->temp3);
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3368      	adds	r3, #104	@ 0x68
 800188a:	461a      	mov	r2, r3
 800188c:	f00b fbf6 	bl	800d07c <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->B, &u, &kf->temp5);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f103 0008 	add.w	r0, r3, #8
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f103 0278 	add.w	r2, r3, #120	@ 0x78
 800189c:	f107 0318 	add.w	r3, r7, #24
 80018a0:	4619      	mov	r1, r3
 80018a2:	f00b fbeb 	bl	800d07c <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->temp5, &kf->temp3);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3368      	adds	r3, #104	@ 0x68
 80018b6:	461a      	mov	r2, r3
 80018b8:	f00b f816 	bl	800c8e8 <arm_mat_add_f32>
    arm_mat_mult_f32(&kf->G, &w, &kf->temp5);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f103 0018 	add.w	r0, r3, #24
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f103 0278 	add.w	r2, r3, #120	@ 0x78
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	4619      	mov	r1, r3
 80018ce:	f00b fbd5 	bl	800d07c <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->temp5, &kf->x);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	3338      	adds	r3, #56	@ 0x38
 80018e2:	461a      	mov	r2, r3
 80018e4:	f00b f800 	bl	800c8e8 <arm_mat_add_f32>

    // P = A * P * A^T + G * Q * G^T
    arm_mat_mult_f32(&kf->A, &kf->P, &kf->temp1);
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3358      	adds	r3, #88	@ 0x58
 80018f4:	461a      	mov	r2, r3
 80018f6:	f00b fbc1 	bl	800d07c <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &kf->temp2);
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	3360      	adds	r3, #96	@ 0x60
 8001900:	4619      	mov	r1, r3
 8001902:	4610      	mov	r0, r2
 8001904:	f00b fc6f 	bl	800d1e6 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	3330      	adds	r3, #48	@ 0x30
 8001918:	461a      	mov	r2, r3
 800191a:	f00b fbaf 	bl	800d07c <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->G, &kf->Q, &kf->temp3);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f103 0018 	add.w	r0, r3, #24
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f103 0120 	add.w	r1, r3, #32
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3368      	adds	r3, #104	@ 0x68
 800192e:	461a      	mov	r2, r3
 8001930:	f00b fba4 	bl	800d07c <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->G, &kf->temp6);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f103 0218 	add.w	r2, r3, #24
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3380      	adds	r3, #128	@ 0x80
 800193e:	4619      	mov	r1, r3
 8001940:	4610      	mov	r0, r2
 8001942:	f00b fc50 	bl	800d1e6 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp3, &kf->temp6, &kf->temp1);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3358      	adds	r3, #88	@ 0x58
 8001956:	461a      	mov	r2, r3
 8001958:	f00b fb90 	bl	800d07c <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->P, &kf->temp1, &kf->P);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3330      	adds	r3, #48	@ 0x30
 800196c:	461a      	mov	r2, r3
 800196e:	f00a ffbb 	bl	800c8e8 <arm_mat_add_f32>
}
 8001972:	bf00      	nop
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <KalmanFilter_Update>:

void KalmanFilter_Update(KalmanFilter* kf, float32_t* y_data) {
 800197c:	b5b0      	push	{r4, r5, r7, lr}
 800197e:	b090      	sub	sp, #64	@ 0x40
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
    // Innovation residual: y - C * x
    arm_matrix_instance_f32 y;
    arm_mat_init_f32(&y, 1, 1, y_data);
 8001986:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	2101      	movs	r1, #1
 8001990:	f00a ffe5 	bl	800c95e <arm_mat_init_f32>
    arm_mat_mult_f32(&kf->C, &kf->x, &kf->temp4);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f103 0010 	add.w	r0, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3370      	adds	r3, #112	@ 0x70
 80019a4:	461a      	mov	r2, r3
 80019a6:	f00b fb69 	bl	800d07c <arm_mat_mult_f32>
    arm_mat_sub_f32(&y, &kf->temp4, &y);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80019b0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80019b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019b8:	4618      	mov	r0, r3
 80019ba:	f00b fbd9 	bl	800d170 <arm_mat_sub_f32>

    // Innovation covariance: S = C * P * C^T + R
    arm_mat_mult_f32(&kf->C, &kf->P, &kf->temp6);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f103 0010 	add.w	r0, r3, #16
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3380      	adds	r3, #128	@ 0x80
 80019ce:	461a      	mov	r2, r3
 80019d0:	f00b fb54 	bl	800d07c <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->C, &kf->temp3);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f103 0210 	add.w	r2, r3, #16
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3368      	adds	r3, #104	@ 0x68
 80019de:	4619      	mov	r1, r3
 80019e0:	4610      	mov	r0, r2
 80019e2:	f00b fc00 	bl	800d1e6 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp6, &kf->temp3, &kf->S);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3350      	adds	r3, #80	@ 0x50
 80019f6:	461a      	mov	r2, r3
 80019f8:	f00b fb40 	bl	800d07c <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->S, &kf->R, &kf->S);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3350      	adds	r3, #80	@ 0x50
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f00a ff6b 	bl	800c8e8 <arm_mat_add_f32>

    // Kalman gain: K = P * C^T * S^-1
    arm_mat_inverse_f32(&kf->S, &kf->temp4);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3370      	adds	r3, #112	@ 0x70
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4610      	mov	r0, r2
 8001a20:	f00a ffb5 	bl	800c98e <arm_mat_inverse_f32>
    arm_mat_mult_f32(&kf->P, &kf->temp3, &kf->temp5);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3378      	adds	r3, #120	@ 0x78
 8001a34:	461a      	mov	r2, r3
 8001a36:	f00b fb21 	bl	800d07c <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->temp5, &kf->temp4, &kf->K);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f103 0078 	add.w	r0, r3, #120	@ 0x78
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3340      	adds	r3, #64	@ 0x40
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	f00b fb16 	bl	800d07c <arm_mat_mult_f32>

    // Corrected state estimate: x = x + K * y
    arm_mat_mult_f32(&kf->K, &y, &kf->temp3);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001a5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a60:	4619      	mov	r1, r3
 8001a62:	f00b fb0b 	bl	800d07c <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->x, &kf->temp3, &kf->x);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3338      	adds	r3, #56	@ 0x38
 8001a76:	461a      	mov	r2, r3
 8001a78:	f00a ff36 	bl	800c8e8 <arm_mat_add_f32>

    // Corrected estimate covariance: P = (I - K * C) * P
    arm_matrix_instance_f32 I;
    float32_t I_data[9] = {1, 0, 0, 0, 1, 0, 0, 0, 1};
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <KalmanFilter_Update+0x170>)
 8001a7e:	f107 040c 	add.w	r4, r7, #12
 8001a82:	461d      	mov	r5, r3
 8001a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a8c:	682b      	ldr	r3, [r5, #0]
 8001a8e:	6023      	str	r3, [r4, #0]
    arm_mat_init_f32(&I, 3, 3, I_data);
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001a98:	2203      	movs	r2, #3
 8001a9a:	2103      	movs	r1, #3
 8001a9c:	f00a ff5f 	bl	800c95e <arm_mat_init_f32>
    arm_mat_mult_f32(&kf->K, &kf->C, &kf->temp1);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f103 0110 	add.w	r1, r3, #16
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3358      	adds	r3, #88	@ 0x58
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	f00b fae3 	bl	800d07c <arm_mat_mult_f32>
    arm_mat_sub_f32(&I, &kf->temp1, &kf->temp2);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8001ac2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f00b fb52 	bl	800d170 <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->temp2, &kf->P, &kf->P);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3330      	adds	r3, #48	@ 0x30
 8001adc:	461a      	mov	r2, r3
 8001ade:	f00b facd 	bl	800d07c <arm_mat_mult_f32>
}
 8001ae2:	bf00      	nop
 8001ae4:	3740      	adds	r7, #64	@ 0x40
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aea:	bf00      	nop
 8001aec:	0800d50c 	.word	0x0800d50c

08001af0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af4:	b098      	sub	sp, #96	@ 0x60
 8001af6:	af0e      	add	r7, sp, #56	@ 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af8:	f003 fd3b 	bl	8005572 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001afc:	f000 fb66 	bl	80021cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b00:	f000 fef0 	bl	80028e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b04:	f000 fea8 	bl	8002858 <MX_DMA_Init>
  MX_TIM3_Init();
 8001b08:	f000 fc8a 	bl	8002420 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001b0c:	f000 fc34 	bl	8002378 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001b10:	f000 fd4c 	bl	80025ac <MX_TIM5_Init>
  MX_ADC1_Init();
 8001b14:	f000 fba6 	bl	8002264 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001b18:	f000 fcfa 	bl	8002510 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001b1c:	f000 fd94 	bl	8002648 <MX_TIM6_Init>
  MX_TIM16_Init();
 8001b20:	f000 fe1c 	bl	800275c <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001b24:	f000 fe4a 	bl	80027bc <MX_USART2_UART_Init>
  MX_TIM15_Init();
 8001b28:	f000 fdc6 	bl	80026b8 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  //PWM Motor
  HAL_TIM_Base_Start(&htim3);
 8001b2c:	48aa      	ldr	r0, [pc, #680]	@ (8001dd8 <main+0x2e8>)
 8001b2e:	f006 ffb7 	bl	8008aa0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b32:	2100      	movs	r1, #0
 8001b34:	48a8      	ldr	r0, [pc, #672]	@ (8001dd8 <main+0x2e8>)
 8001b36:	f007 f909 	bl	8008d4c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001b3a:	4ba7      	ldr	r3, [pc, #668]	@ (8001dd8 <main+0x2e8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	635a      	str	r2, [r3, #52]	@ 0x34

  //Read Encoder
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001b42:	213c      	movs	r1, #60	@ 0x3c
 8001b44:	48a5      	ldr	r0, [pc, #660]	@ (8001ddc <main+0x2ec>)
 8001b46:	f007 fbbd 	bl	80092c4 <HAL_TIM_Encoder_Start>

  //time microsec
  HAL_TIM_Base_Start_IT(&htim5);
 8001b4a:	48a5      	ldr	r0, [pc, #660]	@ (8001de0 <main+0x2f0>)
 8001b4c:	f007 f818 	bl	8008b80 <HAL_TIM_Base_Start_IT>

  //Read joystick
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 2);
 8001b50:	2202      	movs	r2, #2
 8001b52:	49a4      	ldr	r1, [pc, #656]	@ (8001de4 <main+0x2f4>)
 8001b54:	48a4      	ldr	r0, [pc, #656]	@ (8001de8 <main+0x2f8>)
 8001b56:	f004 f979 	bl	8005e4c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim4);
 8001b5a:	48a4      	ldr	r0, [pc, #656]	@ (8001dec <main+0x2fc>)
 8001b5c:	f006 ffa0 	bl	8008aa0 <HAL_TIM_Base_Start>

  //PID Control Position
  PID1.Kp = 3.75; // 7.5
 8001b60:	4ba3      	ldr	r3, [pc, #652]	@ (8001df0 <main+0x300>)
 8001b62:	4aa4      	ldr	r2, [pc, #656]	@ (8001df4 <main+0x304>)
 8001b64:	619a      	str	r2, [r3, #24]
  PID1.Ki = 0; // 0.0025
 8001b66:	4ba2      	ldr	r3, [pc, #648]	@ (8001df0 <main+0x300>)
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
  PID1.Kd = 0;
 8001b6e:	4ba0      	ldr	r3, [pc, #640]	@ (8001df0 <main+0x300>)
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	621a      	str	r2, [r3, #32]
//  PID1.Ki = 0.000025; // 0.0025
//  PID1.Kd = 0.005; // 3
  arm_pid_init_f32(&PID1, 0);
 8001b76:	2100      	movs	r1, #0
 8001b78:	489d      	ldr	r0, [pc, #628]	@ (8001df0 <main+0x300>)
 8001b7a:	f00a fe7f 	bl	800c87c <arm_pid_init_f32>

  //PID Control Velocity
  PID2.Kp = 0.1; //0.3
 8001b7e:	4b9e      	ldr	r3, [pc, #632]	@ (8001df8 <main+0x308>)
 8001b80:	4a9e      	ldr	r2, [pc, #632]	@ (8001dfc <main+0x30c>)
 8001b82:	619a      	str	r2, [r3, #24]
  PID2.Ki = 0.0005; // 0.0005
 8001b84:	4b9c      	ldr	r3, [pc, #624]	@ (8001df8 <main+0x308>)
 8001b86:	4a9e      	ldr	r2, [pc, #632]	@ (8001e00 <main+0x310>)
 8001b88:	61da      	str	r2, [r3, #28]
  PID2.Kd = 0; // 0
 8001b8a:	4b9b      	ldr	r3, [pc, #620]	@ (8001df8 <main+0x308>)
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID2, 0);
 8001b92:	2100      	movs	r1, #0
 8001b94:	4898      	ldr	r0, [pc, #608]	@ (8001df8 <main+0x308>)
 8001b96:	f00a fe71 	bl	800c87c <arm_pid_init_f32>

  //Modbus Setting
  // manaul add
  HAL_TIM_Base_Start_IT(&htim6);
 8001b9a:	489a      	ldr	r0, [pc, #616]	@ (8001e04 <main+0x314>)
 8001b9c:	f006 fff0 	bl	8008b80 <HAL_TIM_Base_Start_IT>

  //  modbus
  hmodbus.huart = &huart2;
 8001ba0:	4b99      	ldr	r3, [pc, #612]	@ (8001e08 <main+0x318>)
 8001ba2:	4a9a      	ldr	r2, [pc, #616]	@ (8001e0c <main+0x31c>)
 8001ba4:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8001ba6:	4b98      	ldr	r3, [pc, #608]	@ (8001e08 <main+0x318>)
 8001ba8:	4a99      	ldr	r2, [pc, #612]	@ (8001e10 <main+0x320>)
 8001baa:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8001bac:	4b96      	ldr	r3, [pc, #600]	@ (8001e08 <main+0x318>)
 8001bae:	2215      	movs	r2, #21
 8001bb0:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8001bb2:	4b95      	ldr	r3, [pc, #596]	@ (8001e08 <main+0x318>)
 8001bb4:	22c8      	movs	r2, #200	@ 0xc8
 8001bb6:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001bb8:	4996      	ldr	r1, [pc, #600]	@ (8001e14 <main+0x324>)
 8001bba:	4893      	ldr	r0, [pc, #588]	@ (8001e08 <main+0x318>)
 8001bbc:	f7ff face 	bl	800115c <Modbus_init>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bc6:	4894      	ldr	r0, [pc, #592]	@ (8001e18 <main+0x328>)
 8001bc8:	f005 fea6 	bl	8007918 <HAL_GPIO_WritePin>


  //-----Kalman filter--------//
  // Initialize the Kalman filter
  KalmanFilter_Init(&kf, A_data, B_data, C_data, G_data, Q_data, R_data, P_data, x_data, K_data, temp1_data, temp2_data, temp3_data, temp4_data, temp5_data, temp6_data, S_data);
 8001bcc:	4b93      	ldr	r3, [pc, #588]	@ (8001e1c <main+0x32c>)
 8001bce:	930c      	str	r3, [sp, #48]	@ 0x30
 8001bd0:	4b93      	ldr	r3, [pc, #588]	@ (8001e20 <main+0x330>)
 8001bd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001bd4:	4b93      	ldr	r3, [pc, #588]	@ (8001e24 <main+0x334>)
 8001bd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8001bd8:	4b93      	ldr	r3, [pc, #588]	@ (8001e28 <main+0x338>)
 8001bda:	9309      	str	r3, [sp, #36]	@ 0x24
 8001bdc:	4b93      	ldr	r3, [pc, #588]	@ (8001e2c <main+0x33c>)
 8001bde:	9308      	str	r3, [sp, #32]
 8001be0:	4b93      	ldr	r3, [pc, #588]	@ (8001e30 <main+0x340>)
 8001be2:	9307      	str	r3, [sp, #28]
 8001be4:	4b93      	ldr	r3, [pc, #588]	@ (8001e34 <main+0x344>)
 8001be6:	9306      	str	r3, [sp, #24]
 8001be8:	4b93      	ldr	r3, [pc, #588]	@ (8001e38 <main+0x348>)
 8001bea:	9305      	str	r3, [sp, #20]
 8001bec:	4b93      	ldr	r3, [pc, #588]	@ (8001e3c <main+0x34c>)
 8001bee:	9304      	str	r3, [sp, #16]
 8001bf0:	4b93      	ldr	r3, [pc, #588]	@ (8001e40 <main+0x350>)
 8001bf2:	9303      	str	r3, [sp, #12]
 8001bf4:	4b93      	ldr	r3, [pc, #588]	@ (8001e44 <main+0x354>)
 8001bf6:	9302      	str	r3, [sp, #8]
 8001bf8:	4b93      	ldr	r3, [pc, #588]	@ (8001e48 <main+0x358>)
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	4b93      	ldr	r3, [pc, #588]	@ (8001e4c <main+0x35c>)
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	4b93      	ldr	r3, [pc, #588]	@ (8001e50 <main+0x360>)
 8001c02:	4a94      	ldr	r2, [pc, #592]	@ (8001e54 <main+0x364>)
 8001c04:	4994      	ldr	r1, [pc, #592]	@ (8001e58 <main+0x368>)
 8001c06:	4895      	ldr	r0, [pc, #596]	@ (8001e5c <main+0x36c>)
 8001c08:	f7ff fd9c 	bl	8001744 <KalmanFilter_Init>

  // Update Kalman every 0.001 s (1,000 Hz)
  HAL_TIM_Base_Start_IT(&htim15);
 8001c0c:	4894      	ldr	r0, [pc, #592]	@ (8001e60 <main+0x370>)
 8001c0e:	f006 ffb7 	bl	8008b80 <HAL_TIM_Base_Start_IT>

  LED_Ready();
 8001c12:	f003 f86f 	bl	8004cf4 <LED_Ready>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  count_check += 1;
 8001c16:	4b93      	ldr	r3, [pc, #588]	@ (8001e64 <main+0x374>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	4a91      	ldr	r2, [pc, #580]	@ (8001e64 <main+0x374>)
 8001c1e:	6013      	str	r3, [r2, #0]

	  //------Modbus Function------//

	  Modbus_Protocal_Worker();
 8001c20:	f7ff fb28 	bl	8001274 <Modbus_Protocal_Worker>
	  check_vaccum_status();
 8001c24:	f002 fa98 	bl	8004158 <check_vaccum_status>
	  check_gripper_status();
 8001c28:	f002 fb30 	bl	800428c <check_gripper_status>
	  set_shelf();
 8001c2c:	f002 fbd6 	bl	80043dc <set_shelf>
	  Pointmode();
 8001c30:	f002 fc7e 	bl	8004530 <Pointmode>
	  Home();
 8001c34:	f002 fd1c 	bl	8004670 <Home>
	  Run_jog();
 8001c38:	f002 fd62 	bl	8004700 <Run_jog>

	  static uint64_t timestamp = 0;
	  static uint64_t timestamp2 = 0;
	  static uint64_t timestamp3 = 0;

	  currentTime = micros();
 8001c3c:	f000 ffb4 	bl	8002ba8 <micros>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4988      	ldr	r1, [pc, #544]	@ (8001e68 <main+0x378>)
 8001c46:	e9c1 2300 	strd	r2, r3, [r1]

	  if(currentTime > timestamp2){
 8001c4a:	4b87      	ldr	r3, [pc, #540]	@ (8001e68 <main+0x378>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	4b85      	ldr	r3, [pc, #532]	@ (8001e6c <main+0x37c>)
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	4282      	cmp	r2, r0
 8001c5c:	418b      	sbcs	r3, r1
 8001c5e:	f080 8151 	bcs.w	8001f04 <main+0x414>
		  timestamp2 = currentTime + 167; //6,000 Hz
 8001c62:	4b81      	ldr	r3, [pc, #516]	@ (8001e68 <main+0x378>)
 8001c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c68:	f112 04a7 	adds.w	r4, r2, #167	@ 0xa7
 8001c6c:	f143 0500 	adc.w	r5, r3, #0
 8001c70:	4622      	mov	r2, r4
 8001c72:	462b      	mov	r3, r5
 8001c74:	497d      	ldr	r1, [pc, #500]	@ (8001e6c <main+0x37c>)
 8001c76:	e9c1 2300 	strd	r2, r3, [r1]

		  //Read encoder
		  QEIEncoderPosVel_Update();
 8001c7a:	f000 ffa9 	bl	8002bd0 <QEIEncoderPosVel_Update>

		  //Create Trajectory
		  q_f = setPosition;
 8001c7e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e70 <main+0x380>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a7c      	ldr	r2, [pc, #496]	@ (8001e74 <main+0x384>)
 8001c84:	6013      	str	r3, [r2, #0]
		  checkStartMoving();
 8001c86:	f001 f8f7 	bl	8002e78 <checkStartMoving>
		  createTrajectory();
 8001c8a:	f001 fb25 	bl	80032d8 <createTrajectory>

		  if(mode == 1){
 8001c8e:	4b7a      	ldr	r3, [pc, #488]	@ (8001e78 <main+0x388>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	f040 8085 	bne.w	8001da2 <main+0x2b2>
			  LED_Auto();
 8001c98:	f003 f850 	bl	8004d3c <LED_Auto>
			  if(fabs(setPosition - QEIdata.linearPos) <= 0.09 || setPosition == 0){
 8001c9c:	4b74      	ldr	r3, [pc, #464]	@ (8001e70 <main+0x380>)
 8001c9e:	ed93 7a00 	vldr	s14, [r3]
 8001ca2:	4b76      	ldr	r3, [pc, #472]	@ (8001e7c <main+0x38c>)
 8001ca4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cac:	eef0 7ae7 	vabs.f32	s15, s15
 8001cb0:	ee17 0a90 	vmov	r0, s15
 8001cb4:	f7fe fc14 	bl	80004e0 <__aeabi_f2d>
 8001cb8:	a345      	add	r3, pc, #276	@ (adr r3, 8001dd0 <main+0x2e0>)
 8001cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbe:	f7fe fee3 	bl	8000a88 <__aeabi_dcmple>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d107      	bne.n	8001cd8 <main+0x1e8>
 8001cc8:	4b69      	ldr	r3, [pc, #420]	@ (8001e70 <main+0x380>)
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd6:	d104      	bne.n	8001ce2 <main+0x1f2>
				  Vin = 0;
 8001cd8:	4b69      	ldr	r3, [pc, #420]	@ (8001e80 <main+0x390>)
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	e043      	b.n	8001d6a <main+0x27a>
//			  else if(setPosition - QEIdata.linearPos >= -5 && setPosition - QEIdata.linearPos < -0.1){
//			  	  Vin = -1.35;
//			  	  check = -1;
//			  }
			  else{
				  Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 - QEIdata.linearVel);
 8001ce2:	4b68      	ldr	r3, [pc, #416]	@ (8001e84 <main+0x394>)
 8001ce4:	ed93 7a00 	vldr	s14, [r3]
 8001ce8:	4b67      	ldr	r3, [pc, #412]	@ (8001e88 <main+0x398>)
 8001cea:	edd3 7a00 	vldr	s15, [r3]
 8001cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001cf6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cfa:	4b60      	ldr	r3, [pc, #384]	@ (8001e7c <main+0x38c>)
 8001cfc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d04:	4b3c      	ldr	r3, [pc, #240]	@ (8001df8 <main+0x308>)
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d08:	edc7 7a08 	vstr	s15, [r7, #32]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d16:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d22:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d26:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001d2a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d36:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d44:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4c:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Update state */
    S->state[1] = S->state[0];
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d56:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	6a3a      	ldr	r2, [r7, #32]
 8001d5c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	4a46      	ldr	r2, [pc, #280]	@ (8001e80 <main+0x390>)
 8001d68:	6013      	str	r3, [r2, #0]
//				  Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
			  }
			  if(Vin > 24){
 8001d6a:	4b45      	ldr	r3, [pc, #276]	@ (8001e80 <main+0x390>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8001d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7c:	dd02      	ble.n	8001d84 <main+0x294>
	  			  Vin = 24;
 8001d7e:	4b40      	ldr	r3, [pc, #256]	@ (8001e80 <main+0x390>)
 8001d80:	4a42      	ldr	r2, [pc, #264]	@ (8001e8c <main+0x39c>)
 8001d82:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 8001d84:	4b3e      	ldr	r3, [pc, #248]	@ (8001e80 <main+0x390>)
 8001d86:	edd3 7a00 	vldr	s15, [r3]
 8001d8a:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 8001d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d96:	f140 8094 	bpl.w	8001ec2 <main+0x3d2>
				  Vin = -24;
 8001d9a:	4b39      	ldr	r3, [pc, #228]	@ (8001e80 <main+0x390>)
 8001d9c:	4a3c      	ldr	r2, [pc, #240]	@ (8001e90 <main+0x3a0>)
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	e08f      	b.n	8001ec2 <main+0x3d2>
			  }
		  }
	      else if(mode == 2){ //manual (control with joy stick)
 8001da2:	4b35      	ldr	r3, [pc, #212]	@ (8001e78 <main+0x388>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d108      	bne.n	8001dbc <main+0x2cc>
			  JoystickInput();
 8001daa:	f001 ff25 	bl	8003bf8 <JoystickInput>
			  button_up_down_input();
 8001dae:	f001 ff9f 	bl	8003cf0 <button_up_down_input>
			  button_reset_input(); //set 0;
 8001db2:	f002 f83f 	bl	8003e34 <button_reset_input>
			  button_save_position();
 8001db6:	f002 f8ff 	bl	8003fb8 <button_save_position>
 8001dba:	e082      	b.n	8001ec2 <main+0x3d2>
		  }
		  else if(mode == 3){ //stop mode
 8001dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8001e78 <main+0x388>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d169      	bne.n	8001e98 <main+0x3a8>
			  Vin = Vin_force;
 8001dc4:	4b33      	ldr	r3, [pc, #204]	@ (8001e94 <main+0x3a4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a2d      	ldr	r2, [pc, #180]	@ (8001e80 <main+0x390>)
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	e079      	b.n	8001ec2 <main+0x3d2>
 8001dce:	bf00      	nop
 8001dd0:	70a3d70a 	.word	0x70a3d70a
 8001dd4:	3fb70a3d 	.word	0x3fb70a3d
 8001dd8:	200004b0 	.word	0x200004b0
 8001ddc:	200003e4 	.word	0x200003e4
 8001de0:	20000648 	.word	0x20000648
 8001de4:	20000b50 	.word	0x20000b50
 8001de8:	20000318 	.word	0x20000318
 8001dec:	2000057c 	.word	0x2000057c
 8001df0:	20000be4 	.word	0x20000be4
 8001df4:	40700000 	.word	0x40700000
 8001df8:	20000c08 	.word	0x20000c08
 8001dfc:	3dcccccd 	.word	0x3dcccccd
 8001e00:	3a03126f 	.word	0x3a03126f
 8001e04:	20000714 	.word	0x20000714
 8001e08:	20000c50 	.word	0x20000c50
 8001e0c:	20000978 	.word	0x20000978
 8001e10:	200008ac 	.word	0x200008ac
 8001e14:	20001128 	.word	0x20001128
 8001e18:	48000400 	.word	0x48000400
 8001e1c:	20001374 	.word	0x20001374
 8001e20:	200013dc 	.word	0x200013dc
 8001e24:	200013d0 	.word	0x200013d0
 8001e28:	200013cc 	.word	0x200013cc
 8001e2c:	200013c0 	.word	0x200013c0
 8001e30:	2000139c 	.word	0x2000139c
 8001e34:	20001378 	.word	0x20001378
 8001e38:	20001368 	.word	0x20001368
 8001e3c:	2000135c 	.word	0x2000135c
 8001e40:	2000025c 	.word	0x2000025c
 8001e44:	20000258 	.word	0x20000258
 8001e48:	20000254 	.word	0x20000254
 8001e4c:	20000248 	.word	0x20000248
 8001e50:	2000023c 	.word	0x2000023c
 8001e54:	20001350 	.word	0x20001350
 8001e58:	20000218 	.word	0x20000218
 8001e5c:	2000140c 	.word	0x2000140c
 8001e60:	200007e0 	.word	0x200007e0
 8001e64:	2000149c 	.word	0x2000149c
 8001e68:	20001348 	.word	0x20001348
 8001e6c:	200014b0 	.word	0x200014b0
 8001e70:	20000c2c 	.word	0x20000c2c
 8001e74:	20000b7c 	.word	0x20000b7c
 8001e78:	20000200 	.word	0x20000200
 8001e7c:	20000b08 	.word	0x20000b08
 8001e80:	20000b70 	.word	0x20000b70
 8001e84:	20000c30 	.word	0x20000c30
 8001e88:	20000b8c 	.word	0x20000b8c
 8001e8c:	41c00000 	.word	0x41c00000
 8001e90:	c1c00000 	.word	0xc1c00000
 8001e94:	20000b74 	.word	0x20000b74

//			  if(QEIdata.linearPos >= 40){
//				  Vin = 0;
//			  }
		  }
		  else if(mode == 4){ //Emergency mode
 8001e98:	4bb5      	ldr	r3, [pc, #724]	@ (8002170 <main+0x680>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d110      	bne.n	8001ec2 <main+0x3d2>
			  Vin = 0;
 8001ea0:	4bb4      	ldr	r3, [pc, #720]	@ (8002174 <main+0x684>)
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
			  //LED_Emergency();

			  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1){
 8001ea8:	2104      	movs	r1, #4
 8001eaa:	48b3      	ldr	r0, [pc, #716]	@ (8002178 <main+0x688>)
 8001eac:	f005 fd1c 	bl	80078e8 <HAL_GPIO_ReadPin>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d105      	bne.n	8001ec2 <main+0x3d2>
				  mode = 2;
 8001eb6:	4bae      	ldr	r3, [pc, #696]	@ (8002170 <main+0x680>)
 8001eb8:	2202      	movs	r2, #2
 8001eba:	701a      	strb	r2, [r3, #0]
				  emergency_reset = 1;
 8001ebc:	4baf      	ldr	r3, [pc, #700]	@ (800217c <main+0x68c>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]
			  }
		  }

		  if(mode == 1){
 8001ec2:	4bab      	ldr	r3, [pc, #684]	@ (8002170 <main+0x680>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d118      	bne.n	8001efc <main+0x40c>
			  if(QEIdata.linearPos < -0.5 || QEIdata.linearPos > 550){
 8001eca:	4bad      	ldr	r3, [pc, #692]	@ (8002180 <main+0x690>)
 8001ecc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ed0:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001edc:	d409      	bmi.n	8001ef2 <main+0x402>
 8001ede:	4ba8      	ldr	r3, [pc, #672]	@ (8002180 <main+0x690>)
 8001ee0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ee4:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8002184 <main+0x694>
 8001ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef0:	dd06      	ble.n	8001f00 <main+0x410>
				  Vin = 0;
 8001ef2:	4ba0      	ldr	r3, [pc, #640]	@ (8002174 <main+0x684>)
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e001      	b.n	8001f00 <main+0x410>
			  }
		  }
		  else{
			  //software limit
			  SoftwareLimit();
 8001efc:	f001 fe24 	bl	8003b48 <SoftwareLimit>
		  }

		  //Drive Motor which PWM
		  DriveMotor();
 8001f00:	f001 fdc6 	bl	8003a90 <DriveMotor>

	  }

	  if(currentTime > timestamp){
 8001f04:	4ba0      	ldr	r3, [pc, #640]	@ (8002188 <main+0x698>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4b9f      	ldr	r3, [pc, #636]	@ (800218c <main+0x69c>)
 8001f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f14:	4282      	cmp	r2, r0
 8001f16:	418b      	sbcs	r3, r1
 8001f18:	f080 80f2 	bcs.w	8002100 <main+0x610>
		  timestamp = currentTime + 4000; //250 Hz
 8001f1c:	4b9a      	ldr	r3, [pc, #616]	@ (8002188 <main+0x698>)
 8001f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f22:	f512 687a 	adds.w	r8, r2, #4000	@ 0xfa0
 8001f26:	f143 0900 	adc.w	r9, r3, #0
 8001f2a:	4642      	mov	r2, r8
 8001f2c:	464b      	mov	r3, r9
 8001f2e:	4997      	ldr	r1, [pc, #604]	@ (800218c <main+0x69c>)
 8001f30:	e9c1 2300 	strd	r2, r3, [r1]

		  //control mode
		  if(mode == 1){ //auto
 8001f34:	4b8e      	ldr	r3, [pc, #568]	@ (8002170 <main+0x680>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	f040 80e1 	bne.w	8002100 <main+0x610>
			  LED_Auto();
 8001f3e:	f002 fefd 	bl	8004d3c <LED_Auto>
			  if(fabs(setPosition - QEIdata.linearPos) <= 0.1 || setPosition == 0){
 8001f42:	4b93      	ldr	r3, [pc, #588]	@ (8002190 <main+0x6a0>)
 8001f44:	ed93 7a00 	vldr	s14, [r3]
 8001f48:	4b8d      	ldr	r3, [pc, #564]	@ (8002180 <main+0x690>)
 8001f4a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f52:	eef0 7ae7 	vabs.f32	s15, s15
 8001f56:	ee17 0a90 	vmov	r0, s15
 8001f5a:	f7fe fac1 	bl	80004e0 <__aeabi_f2d>
 8001f5e:	a382      	add	r3, pc, #520	@ (adr r3, 8002168 <main+0x678>)
 8001f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f64:	f7fe fd90 	bl	8000a88 <__aeabi_dcmple>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d107      	bne.n	8001f7e <main+0x48e>
 8001f6e:	4b88      	ldr	r3, [pc, #544]	@ (8002190 <main+0x6a0>)
 8001f70:	edd3 7a00 	vldr	s15, [r3]
 8001f74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7c:	d104      	bne.n	8001f88 <main+0x498>
				  Vin = 0;
 8001f7e:	4b7d      	ldr	r3, [pc, #500]	@ (8002174 <main+0x684>)
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	e087      	b.n	8002098 <main+0x5a8>
//			  else if(setPosition - QEIdata.linearPos >= -5 && setPosition - QEIdata.linearPos < -0.1){
//				  Vin = -1.5;
//				  check = -1;
//			  }
			  else{
				  setVelocity = arm_pid_f32(&PID1, (setPosition + ref_p)/2 - QEIdata.linearPos);
 8001f88:	4b81      	ldr	r3, [pc, #516]	@ (8002190 <main+0x6a0>)
 8001f8a:	ed93 7a00 	vldr	s14, [r3]
 8001f8e:	4b81      	ldr	r3, [pc, #516]	@ (8002194 <main+0x6a4>)
 8001f90:	edd3 7a00 	vldr	s15, [r3]
 8001f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f98:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001f9c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fa0:	4b77      	ldr	r3, [pc, #476]	@ (8002180 <main+0x690>)
 8001fa2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001faa:	4b7b      	ldr	r3, [pc, #492]	@ (8002198 <main+0x6a8>)
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	edc7 7a02 	vstr	s15, [r7, #8]
    out = (S->A0 * in) +
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	ed93 7a00 	vldr	s14, [r3]
 8001fb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001fd0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	edd3 6a02 	vldr	s13, [r3, #8]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff2:	edc7 7a01 	vstr	s15, [r7, #4]
    S->state[1] = S->state[0];
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	615a      	str	r2, [r3, #20]
    return (out);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a63      	ldr	r2, [pc, #396]	@ (800219c <main+0x6ac>)
 800200e:	6013      	str	r3, [r2, #0]
				  Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 + QEIdata.linearVel);
 8002010:	4b62      	ldr	r3, [pc, #392]	@ (800219c <main+0x6ac>)
 8002012:	ed93 7a00 	vldr	s14, [r3]
 8002016:	4b62      	ldr	r3, [pc, #392]	@ (80021a0 <main+0x6b0>)
 8002018:	edd3 7a00 	vldr	s15, [r3]
 800201c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002020:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002024:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002028:	4b55      	ldr	r3, [pc, #340]	@ (8002180 <main+0x690>)
 800202a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800202e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002032:	4b5c      	ldr	r3, [pc, #368]	@ (80021a4 <main+0x6b4>)
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	edc7 7a05 	vstr	s15, [r7, #20]
    out = (S->A0 * in) +
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	ed93 7a00 	vldr	s14, [r3]
 8002040:	edd7 7a05 	vldr	s15, [r7, #20]
 8002044:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	edd3 6a01 	vldr	s13, [r3, #4]
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	edd3 7a03 	vldr	s15, [r3, #12]
 8002054:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002058:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	edd3 7a04 	vldr	s15, [r3, #16]
 8002068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800206c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800207a:	edc7 7a04 	vstr	s15, [r7, #16]
    S->state[1] = S->state[0];
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	615a      	str	r2, [r3, #20]
    return (out);
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4a37      	ldr	r2, [pc, #220]	@ (8002174 <main+0x684>)
 8002096:	6013      	str	r3, [r2, #0]
//				  Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
			  }

			  if(Vin > 24){
 8002098:	4b36      	ldr	r3, [pc, #216]	@ (8002174 <main+0x684>)
 800209a:	edd3 7a00 	vldr	s15, [r3]
 800209e:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80020a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020aa:	dd02      	ble.n	80020b2 <main+0x5c2>
				  Vin = 24;
 80020ac:	4b31      	ldr	r3, [pc, #196]	@ (8002174 <main+0x684>)
 80020ae:	4a3e      	ldr	r2, [pc, #248]	@ (80021a8 <main+0x6b8>)
 80020b0:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 80020b2:	4b30      	ldr	r3, [pc, #192]	@ (8002174 <main+0x684>)
 80020b4:	edd3 7a00 	vldr	s15, [r3]
 80020b8:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 80020bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c4:	d502      	bpl.n	80020cc <main+0x5dc>
				  Vin = -24;
 80020c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002174 <main+0x684>)
 80020c8:	4a38      	ldr	r2, [pc, #224]	@ (80021ac <main+0x6bc>)
 80020ca:	601a      	str	r2, [r3, #0]
			  }

			  if(QEIdata.linearPos < -0.5 || QEIdata.linearPos > 450){
 80020cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002180 <main+0x690>)
 80020ce:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80020d2:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80020d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020de:	d409      	bmi.n	80020f4 <main+0x604>
 80020e0:	4b27      	ldr	r3, [pc, #156]	@ (8002180 <main+0x690>)
 80020e2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80020e6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80021b0 <main+0x6c0>
 80020ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f2:	dd03      	ble.n	80020fc <main+0x60c>
			 	  Vin = 0;
 80020f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002174 <main+0x684>)
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
			  }

			  //Drive Motor which PWM
			  DriveMotor();
 80020fc:	f001 fcc8 	bl	8003a90 <DriveMotor>
//		   check_noise += 1;
//	  }

	  //Check Emergency Status

	  checkEmer();
 8002100:	f002 fe64 	bl	8004dcc <checkEmer>

	  if(currentTime > timestamp3){
 8002104:	4b20      	ldr	r3, [pc, #128]	@ (8002188 <main+0x698>)
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	4b29      	ldr	r3, [pc, #164]	@ (80021b4 <main+0x6c4>)
 8002110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002114:	4282      	cmp	r2, r0
 8002116:	418b      	sbcs	r3, r1
 8002118:	f4bf ad7d 	bcs.w	8001c16 <main+0x126>
		  timestamp3 = currentTime + 100000; //10 Hz
 800211c:	4b1a      	ldr	r3, [pc, #104]	@ (8002188 <main+0x698>)
 800211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002122:	4925      	ldr	r1, [pc, #148]	@ (80021b8 <main+0x6c8>)
 8002124:	eb12 0a01 	adds.w	sl, r2, r1
 8002128:	f143 0b00 	adc.w	fp, r3, #0
 800212c:	4652      	mov	r2, sl
 800212e:	465b      	mov	r3, fp
 8002130:	4920      	ldr	r1, [pc, #128]	@ (80021b4 <main+0x6c4>)
 8002132:	e9c1 2300 	strd	r2, r3, [r1]
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 1){
 8002136:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800213a:	4820      	ldr	r0, [pc, #128]	@ (80021bc <main+0x6cc>)
 800213c:	f005 fbd4 	bl	80078e8 <HAL_GPIO_ReadPin>
 8002140:	4603      	mov	r3, r0
 8002142:	2b01      	cmp	r3, #1
 8002144:	d103      	bne.n	800214e <main+0x65e>
			  S_top = 1;
 8002146:	4b1e      	ldr	r3, [pc, #120]	@ (80021c0 <main+0x6d0>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e563      	b.n	8001c16 <main+0x126>
		  }
		  else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 1){
 800214e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002152:	481c      	ldr	r0, [pc, #112]	@ (80021c4 <main+0x6d4>)
 8002154:	f005 fbc8 	bl	80078e8 <HAL_GPIO_ReadPin>
 8002158:	4603      	mov	r3, r0
 800215a:	2b01      	cmp	r3, #1
 800215c:	f47f ad5b 	bne.w	8001c16 <main+0x126>
			  S_down = 1;
 8002160:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <main+0x6d8>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]
  {
 8002166:	e556      	b.n	8001c16 <main+0x126>
 8002168:	9999999a 	.word	0x9999999a
 800216c:	3fb99999 	.word	0x3fb99999
 8002170:	20000200 	.word	0x20000200
 8002174:	20000b70 	.word	0x20000b70
 8002178:	48000c00 	.word	0x48000c00
 800217c:	20000bc4 	.word	0x20000bc4
 8002180:	20000b08 	.word	0x20000b08
 8002184:	44098000 	.word	0x44098000
 8002188:	20001348 	.word	0x20001348
 800218c:	200014b8 	.word	0x200014b8
 8002190:	20000c2c 	.word	0x20000c2c
 8002194:	20000b88 	.word	0x20000b88
 8002198:	20000be4 	.word	0x20000be4
 800219c:	20000c30 	.word	0x20000c30
 80021a0:	20000b8c 	.word	0x20000b8c
 80021a4:	20000c08 	.word	0x20000c08
 80021a8:	41c00000 	.word	0x41c00000
 80021ac:	c1c00000 	.word	0xc1c00000
 80021b0:	43e10000 	.word	0x43e10000
 80021b4:	200014c0 	.word	0x200014c0
 80021b8:	000186a0 	.word	0x000186a0
 80021bc:	48000400 	.word	0x48000400
 80021c0:	20000c3c 	.word	0x20000c3c
 80021c4:	48000800 	.word	0x48000800
 80021c8:	20000c40 	.word	0x20000c40

080021cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b094      	sub	sp, #80	@ 0x50
 80021d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021d2:	f107 0318 	add.w	r3, r7, #24
 80021d6:	2238      	movs	r2, #56	@ 0x38
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f00b f844 	bl	800d268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	60da      	str	r2, [r3, #12]
 80021ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80021ee:	2000      	movs	r0, #0
 80021f0:	f005 fbc2 	bl	8007978 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021f4:	2302      	movs	r3, #2
 80021f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021fe:	2340      	movs	r3, #64	@ 0x40
 8002200:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002202:	2302      	movs	r3, #2
 8002204:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002206:	2302      	movs	r3, #2
 8002208:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800220a:	2304      	movs	r3, #4
 800220c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800220e:	2355      	movs	r3, #85	@ 0x55
 8002210:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002212:	2302      	movs	r3, #2
 8002214:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002216:	2302      	movs	r3, #2
 8002218:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800221a:	2302      	movs	r3, #2
 800221c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800221e:	f107 0318 	add.w	r3, r7, #24
 8002222:	4618      	mov	r0, r3
 8002224:	f005 fc5c 	bl	8007ae0 <HAL_RCC_OscConfig>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800222e:	f002 fe3d 	bl	8004eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002232:	230f      	movs	r3, #15
 8002234:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002236:	2303      	movs	r3, #3
 8002238:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	2104      	movs	r1, #4
 800224a:	4618      	mov	r0, r3
 800224c:	f005 ff5a 	bl	8008104 <HAL_RCC_ClockConfig>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002256:	f002 fe29 	bl	8004eac <Error_Handler>
  }
}
 800225a:	bf00      	nop
 800225c:	3750      	adds	r7, #80	@ 0x50
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08c      	sub	sp, #48	@ 0x30
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800226a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	2220      	movs	r2, #32
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f00a fff3 	bl	800d268 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002282:	4b3a      	ldr	r3, [pc, #232]	@ (800236c <MX_ADC1_Init+0x108>)
 8002284:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002288:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800228a:	4b38      	ldr	r3, [pc, #224]	@ (800236c <MX_ADC1_Init+0x108>)
 800228c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002290:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002292:	4b36      	ldr	r3, [pc, #216]	@ (800236c <MX_ADC1_Init+0x108>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002298:	4b34      	ldr	r3, [pc, #208]	@ (800236c <MX_ADC1_Init+0x108>)
 800229a:	2200      	movs	r2, #0
 800229c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800229e:	4b33      	ldr	r3, [pc, #204]	@ (800236c <MX_ADC1_Init+0x108>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80022a4:	4b31      	ldr	r3, [pc, #196]	@ (800236c <MX_ADC1_Init+0x108>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022aa:	4b30      	ldr	r3, [pc, #192]	@ (800236c <MX_ADC1_Init+0x108>)
 80022ac:	2204      	movs	r2, #4
 80022ae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80022b0:	4b2e      	ldr	r3, [pc, #184]	@ (800236c <MX_ADC1_Init+0x108>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022b6:	4b2d      	ldr	r3, [pc, #180]	@ (800236c <MX_ADC1_Init+0x108>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80022bc:	4b2b      	ldr	r3, [pc, #172]	@ (800236c <MX_ADC1_Init+0x108>)
 80022be:	2202      	movs	r2, #2
 80022c0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022c2:	4b2a      	ldr	r3, [pc, #168]	@ (800236c <MX_ADC1_Init+0x108>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80022ca:	4b28      	ldr	r3, [pc, #160]	@ (800236c <MX_ADC1_Init+0x108>)
 80022cc:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 80022d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80022d2:	4b26      	ldr	r3, [pc, #152]	@ (800236c <MX_ADC1_Init+0x108>)
 80022d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80022da:	4b24      	ldr	r3, [pc, #144]	@ (800236c <MX_ADC1_Init+0x108>)
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80022e2:	4b22      	ldr	r3, [pc, #136]	@ (800236c <MX_ADC1_Init+0x108>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80022e8:	4b20      	ldr	r3, [pc, #128]	@ (800236c <MX_ADC1_Init+0x108>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022f0:	481e      	ldr	r0, [pc, #120]	@ (800236c <MX_ADC1_Init+0x108>)
 80022f2:	f003 fbef 	bl	8005ad4 <HAL_ADC_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80022fc:	f002 fdd6 	bl	8004eac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002300:	2300      	movs	r3, #0
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002308:	4619      	mov	r1, r3
 800230a:	4818      	ldr	r0, [pc, #96]	@ (800236c <MX_ADC1_Init+0x108>)
 800230c:	f004 fc20 	bl	8006b50 <HAL_ADCEx_MultiModeConfigChannel>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8002316:	f002 fdc9 	bl	8004eac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800231a:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <MX_ADC1_Init+0x10c>)
 800231c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800231e:	2306      	movs	r3, #6
 8002320:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002326:	237f      	movs	r3, #127	@ 0x7f
 8002328:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800232a:	2304      	movs	r3, #4
 800232c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	4619      	mov	r1, r3
 8002336:	480d      	ldr	r0, [pc, #52]	@ (800236c <MX_ADC1_Init+0x108>)
 8002338:	f003 fe7a 	bl	8006030 <HAL_ADC_ConfigChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8002342:	f002 fdb3 	bl	8004eac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002346:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <MX_ADC1_Init+0x110>)
 8002348:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800234a:	230c      	movs	r3, #12
 800234c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	4619      	mov	r1, r3
 8002352:	4806      	ldr	r0, [pc, #24]	@ (800236c <MX_ADC1_Init+0x108>)
 8002354:	f003 fe6c 	bl	8006030 <HAL_ADC_ConfigChannel>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800235e:	f002 fda5 	bl	8004eac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002362:	bf00      	nop
 8002364:	3730      	adds	r7, #48	@ 0x30
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000318 	.word	0x20000318
 8002370:	04300002 	.word	0x04300002
 8002374:	14f00020 	.word	0x14f00020

08002378 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08c      	sub	sp, #48	@ 0x30
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800237e:	f107 030c 	add.w	r3, r7, #12
 8002382:	2224      	movs	r2, #36	@ 0x24
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f00a ff6e 	bl	800d268 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800238c:	463b      	mov	r3, r7
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002396:	4b21      	ldr	r3, [pc, #132]	@ (800241c <MX_TIM2_Init+0xa4>)
 8002398:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800239c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800239e:	4b1f      	ldr	r3, [pc, #124]	@ (800241c <MX_TIM2_Init+0xa4>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a4:	4b1d      	ldr	r3, [pc, #116]	@ (800241c <MX_TIM2_Init+0xa4>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80023aa:	4b1c      	ldr	r3, [pc, #112]	@ (800241c <MX_TIM2_Init+0xa4>)
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b2:	4b1a      	ldr	r3, [pc, #104]	@ (800241c <MX_TIM2_Init+0xa4>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b8:	4b18      	ldr	r3, [pc, #96]	@ (800241c <MX_TIM2_Init+0xa4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023be:	2303      	movs	r3, #3
 80023c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023c6:	2301      	movs	r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80023ce:	2302      	movs	r3, #2
 80023d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023d6:	2301      	movs	r3, #1
 80023d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023da:	2300      	movs	r3, #0
 80023dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	4619      	mov	r1, r3
 80023e8:	480c      	ldr	r0, [pc, #48]	@ (800241c <MX_TIM2_Init+0xa4>)
 80023ea:	f006 feb7 	bl	800915c <HAL_TIM_Encoder_Init>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80023f4:	f002 fd5a 	bl	8004eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f8:	2300      	movs	r3, #0
 80023fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002400:	463b      	mov	r3, r7
 8002402:	4619      	mov	r1, r3
 8002404:	4805      	ldr	r0, [pc, #20]	@ (800241c <MX_TIM2_Init+0xa4>)
 8002406:	f008 fa5f 	bl	800a8c8 <HAL_TIMEx_MasterConfigSynchronization>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002410:	f002 fd4c 	bl	8004eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002414:	bf00      	nop
 8002416:	3730      	adds	r7, #48	@ 0x30
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	200003e4 	.word	0x200003e4

08002420 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08e      	sub	sp, #56	@ 0x38
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002426:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002440:	463b      	mov	r3, r7
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	60da      	str	r2, [r3, #12]
 800244c:	611a      	str	r2, [r3, #16]
 800244e:	615a      	str	r2, [r3, #20]
 8002450:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002452:	4b2d      	ldr	r3, [pc, #180]	@ (8002508 <MX_TIM3_Init+0xe8>)
 8002454:	4a2d      	ldr	r2, [pc, #180]	@ (800250c <MX_TIM3_Init+0xec>)
 8002456:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8002458:	4b2b      	ldr	r3, [pc, #172]	@ (8002508 <MX_TIM3_Init+0xe8>)
 800245a:	22a9      	movs	r2, #169	@ 0xa9
 800245c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245e:	4b2a      	ldr	r3, [pc, #168]	@ (8002508 <MX_TIM3_Init+0xe8>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002464:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <MX_TIM3_Init+0xe8>)
 8002466:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800246a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246c:	4b26      	ldr	r3, [pc, #152]	@ (8002508 <MX_TIM3_Init+0xe8>)
 800246e:	2200      	movs	r2, #0
 8002470:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002472:	4b25      	ldr	r3, [pc, #148]	@ (8002508 <MX_TIM3_Init+0xe8>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002478:	4823      	ldr	r0, [pc, #140]	@ (8002508 <MX_TIM3_Init+0xe8>)
 800247a:	f006 faad 	bl	80089d8 <HAL_TIM_Base_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002484:	f002 fd12 	bl	8004eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002488:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800248c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800248e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002492:	4619      	mov	r1, r3
 8002494:	481c      	ldr	r0, [pc, #112]	@ (8002508 <MX_TIM3_Init+0xe8>)
 8002496:	f007 fa31 	bl	80098fc <HAL_TIM_ConfigClockSource>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80024a0:	f002 fd04 	bl	8004eac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024a4:	4818      	ldr	r0, [pc, #96]	@ (8002508 <MX_TIM3_Init+0xe8>)
 80024a6:	f006 fbe3 	bl	8008c70 <HAL_TIM_PWM_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80024b0:	f002 fcfc 	bl	8004eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024bc:	f107 031c 	add.w	r3, r7, #28
 80024c0:	4619      	mov	r1, r3
 80024c2:	4811      	ldr	r0, [pc, #68]	@ (8002508 <MX_TIM3_Init+0xe8>)
 80024c4:	f008 fa00 	bl	800a8c8 <HAL_TIMEx_MasterConfigSynchronization>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80024ce:	f002 fced 	bl	8004eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d2:	2360      	movs	r3, #96	@ 0x60
 80024d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80024d6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80024da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024dc:	2300      	movs	r3, #0
 80024de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024e4:	463b      	mov	r3, r7
 80024e6:	2200      	movs	r2, #0
 80024e8:	4619      	mov	r1, r3
 80024ea:	4807      	ldr	r0, [pc, #28]	@ (8002508 <MX_TIM3_Init+0xe8>)
 80024ec:	f007 f8f2 	bl	80096d4 <HAL_TIM_PWM_ConfigChannel>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80024f6:	f002 fcd9 	bl	8004eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80024fa:	4803      	ldr	r0, [pc, #12]	@ (8002508 <MX_TIM3_Init+0xe8>)
 80024fc:	f002 fe82 	bl	8005204 <HAL_TIM_MspPostInit>

}
 8002500:	bf00      	nop
 8002502:	3738      	adds	r7, #56	@ 0x38
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200004b0 	.word	0x200004b0
 800250c:	40000400 	.word	0x40000400

08002510 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002516:	f107 0310 	add.w	r3, r7, #16
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]
 8002522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800252e:	4b1d      	ldr	r3, [pc, #116]	@ (80025a4 <MX_TIM4_Init+0x94>)
 8002530:	4a1d      	ldr	r2, [pc, #116]	@ (80025a8 <MX_TIM4_Init+0x98>)
 8002532:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8002534:	4b1b      	ldr	r3, [pc, #108]	@ (80025a4 <MX_TIM4_Init+0x94>)
 8002536:	22a9      	movs	r2, #169	@ 0xa9
 8002538:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253a:	4b1a      	ldr	r3, [pc, #104]	@ (80025a4 <MX_TIM4_Init+0x94>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002540:	4b18      	ldr	r3, [pc, #96]	@ (80025a4 <MX_TIM4_Init+0x94>)
 8002542:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002546:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002548:	4b16      	ldr	r3, [pc, #88]	@ (80025a4 <MX_TIM4_Init+0x94>)
 800254a:	2200      	movs	r2, #0
 800254c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254e:	4b15      	ldr	r3, [pc, #84]	@ (80025a4 <MX_TIM4_Init+0x94>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002554:	4813      	ldr	r0, [pc, #76]	@ (80025a4 <MX_TIM4_Init+0x94>)
 8002556:	f006 fa3f 	bl	80089d8 <HAL_TIM_Base_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002560:	f002 fca4 	bl	8004eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002564:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002568:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800256a:	f107 0310 	add.w	r3, r7, #16
 800256e:	4619      	mov	r1, r3
 8002570:	480c      	ldr	r0, [pc, #48]	@ (80025a4 <MX_TIM4_Init+0x94>)
 8002572:	f007 f9c3 	bl	80098fc <HAL_TIM_ConfigClockSource>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800257c:	f002 fc96 	bl	8004eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002580:	2320      	movs	r3, #32
 8002582:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	4619      	mov	r1, r3
 800258c:	4805      	ldr	r0, [pc, #20]	@ (80025a4 <MX_TIM4_Init+0x94>)
 800258e:	f008 f99b 	bl	800a8c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002598:	f002 fc88 	bl	8004eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800259c:	bf00      	nop
 800259e:	3720      	adds	r7, #32
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	2000057c 	.word	0x2000057c
 80025a8:	40000800 	.word	0x40000800

080025ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b2:	f107 0310 	add.w	r3, r7, #16
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002640 <MX_TIM5_Init+0x94>)
 80025cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002644 <MX_TIM5_Init+0x98>)
 80025ce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80025d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002640 <MX_TIM5_Init+0x94>)
 80025d2:	22a9      	movs	r2, #169	@ 0xa9
 80025d4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002640 <MX_TIM5_Init+0x94>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80025dc:	4b18      	ldr	r3, [pc, #96]	@ (8002640 <MX_TIM5_Init+0x94>)
 80025de:	f04f 32ff 	mov.w	r2, #4294967295
 80025e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e4:	4b16      	ldr	r3, [pc, #88]	@ (8002640 <MX_TIM5_Init+0x94>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ea:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <MX_TIM5_Init+0x94>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025f0:	4813      	ldr	r0, [pc, #76]	@ (8002640 <MX_TIM5_Init+0x94>)
 80025f2:	f006 f9f1 	bl	80089d8 <HAL_TIM_Base_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80025fc:	f002 fc56 	bl	8004eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002600:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002604:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002606:	f107 0310 	add.w	r3, r7, #16
 800260a:	4619      	mov	r1, r3
 800260c:	480c      	ldr	r0, [pc, #48]	@ (8002640 <MX_TIM5_Init+0x94>)
 800260e:	f007 f975 	bl	80098fc <HAL_TIM_ConfigClockSource>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002618:	f002 fc48 	bl	8004eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800261c:	2300      	movs	r3, #0
 800261e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	4619      	mov	r1, r3
 8002628:	4805      	ldr	r0, [pc, #20]	@ (8002640 <MX_TIM5_Init+0x94>)
 800262a:	f008 f94d 	bl	800a8c8 <HAL_TIMEx_MasterConfigSynchronization>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002634:	f002 fc3a 	bl	8004eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002638:	bf00      	nop
 800263a:	3720      	adds	r7, #32
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000648 	.word	0x20000648
 8002644:	40000c00 	.word	0x40000c00

08002648 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002658:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <MX_TIM6_Init+0x68>)
 800265a:	4a16      	ldr	r2, [pc, #88]	@ (80026b4 <MX_TIM6_Init+0x6c>)
 800265c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1699;
 800265e:	4b14      	ldr	r3, [pc, #80]	@ (80026b0 <MX_TIM6_Init+0x68>)
 8002660:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002664:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002666:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <MX_TIM6_Init+0x68>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 800266c:	4b10      	ldr	r3, [pc, #64]	@ (80026b0 <MX_TIM6_Init+0x68>)
 800266e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002672:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002674:	4b0e      	ldr	r3, [pc, #56]	@ (80026b0 <MX_TIM6_Init+0x68>)
 8002676:	2200      	movs	r2, #0
 8002678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800267a:	480d      	ldr	r0, [pc, #52]	@ (80026b0 <MX_TIM6_Init+0x68>)
 800267c:	f006 f9ac 	bl	80089d8 <HAL_TIM_Base_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002686:	f002 fc11 	bl	8004eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	4619      	mov	r1, r3
 8002696:	4806      	ldr	r0, [pc, #24]	@ (80026b0 <MX_TIM6_Init+0x68>)
 8002698:	f008 f916 	bl	800a8c8 <HAL_TIMEx_MasterConfigSynchronization>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80026a2:	f002 fc03 	bl	8004eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026a6:	bf00      	nop
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000714 	.word	0x20000714
 80026b4:	40001000 	.word	0x40001000

080026b8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026be:	f107 0310 	add.w	r3, r7, #16
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80026d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002754 <MX_TIM15_Init+0x9c>)
 80026d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002758 <MX_TIM15_Init+0xa0>)
 80026da:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 169;
 80026dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002754 <MX_TIM15_Init+0x9c>)
 80026de:	22a9      	movs	r2, #169	@ 0xa9
 80026e0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002754 <MX_TIM15_Init+0x9c>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80026e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002754 <MX_TIM15_Init+0x9c>)
 80026ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026ee:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f0:	4b18      	ldr	r3, [pc, #96]	@ (8002754 <MX_TIM15_Init+0x9c>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80026f6:	4b17      	ldr	r3, [pc, #92]	@ (8002754 <MX_TIM15_Init+0x9c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026fc:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <MX_TIM15_Init+0x9c>)
 80026fe:	2200      	movs	r2, #0
 8002700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002702:	4814      	ldr	r0, [pc, #80]	@ (8002754 <MX_TIM15_Init+0x9c>)
 8002704:	f006 f968 	bl	80089d8 <HAL_TIM_Base_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800270e:	f002 fbcd 	bl	8004eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002716:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002718:	f107 0310 	add.w	r3, r7, #16
 800271c:	4619      	mov	r1, r3
 800271e:	480d      	ldr	r0, [pc, #52]	@ (8002754 <MX_TIM15_Init+0x9c>)
 8002720:	f007 f8ec 	bl	80098fc <HAL_TIM_ConfigClockSource>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800272a:	f002 fbbf 	bl	8004eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	4619      	mov	r1, r3
 800273a:	4806      	ldr	r0, [pc, #24]	@ (8002754 <MX_TIM15_Init+0x9c>)
 800273c:	f008 f8c4 	bl	800a8c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002746:	f002 fbb1 	bl	8004eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200007e0 	.word	0x200007e0
 8002758:	40014000 	.word	0x40014000

0800275c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002760:	4b14      	ldr	r3, [pc, #80]	@ (80027b4 <MX_TIM16_Init+0x58>)
 8002762:	4a15      	ldr	r2, [pc, #84]	@ (80027b8 <MX_TIM16_Init+0x5c>)
 8002764:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002766:	4b13      	ldr	r3, [pc, #76]	@ (80027b4 <MX_TIM16_Init+0x58>)
 8002768:	2200      	movs	r2, #0
 800276a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276c:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <MX_TIM16_Init+0x58>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002772:	4b10      	ldr	r3, [pc, #64]	@ (80027b4 <MX_TIM16_Init+0x58>)
 8002774:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002778:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800277a:	4b0e      	ldr	r3, [pc, #56]	@ (80027b4 <MX_TIM16_Init+0x58>)
 800277c:	2200      	movs	r2, #0
 800277e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002780:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <MX_TIM16_Init+0x58>)
 8002782:	2200      	movs	r2, #0
 8002784:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002786:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <MX_TIM16_Init+0x58>)
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800278c:	4809      	ldr	r0, [pc, #36]	@ (80027b4 <MX_TIM16_Init+0x58>)
 800278e:	f006 f923 	bl	80089d8 <HAL_TIM_Base_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002798:	f002 fb88 	bl	8004eac <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 800279c:	2108      	movs	r1, #8
 800279e:	4805      	ldr	r0, [pc, #20]	@ (80027b4 <MX_TIM16_Init+0x58>)
 80027a0:	f006 fbe6 	bl	8008f70 <HAL_TIM_OnePulse_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 80027aa:	f002 fb7f 	bl	8004eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	200008ac 	.word	0x200008ac
 80027b8:	40014400 	.word	0x40014400

080027bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027c0:	4b23      	ldr	r3, [pc, #140]	@ (8002850 <MX_USART2_UART_Init+0x94>)
 80027c2:	4a24      	ldr	r2, [pc, #144]	@ (8002854 <MX_USART2_UART_Init+0x98>)
 80027c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80027c6:	4b22      	ldr	r3, [pc, #136]	@ (8002850 <MX_USART2_UART_Init+0x94>)
 80027c8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80027cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80027ce:	4b20      	ldr	r3, [pc, #128]	@ (8002850 <MX_USART2_UART_Init+0x94>)
 80027d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027d4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002850 <MX_USART2_UART_Init+0x94>)
 80027d8:	2200      	movs	r2, #0
 80027da:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80027dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002850 <MX_USART2_UART_Init+0x94>)
 80027de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002850 <MX_USART2_UART_Init+0x94>)
 80027e6:	220c      	movs	r2, #12
 80027e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ea:	4b19      	ldr	r3, [pc, #100]	@ (8002850 <MX_USART2_UART_Init+0x94>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027f0:	4b17      	ldr	r3, [pc, #92]	@ (8002850 <MX_USART2_UART_Init+0x94>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027f6:	4b16      	ldr	r3, [pc, #88]	@ (8002850 <MX_USART2_UART_Init+0x94>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027fc:	4b14      	ldr	r3, [pc, #80]	@ (8002850 <MX_USART2_UART_Init+0x94>)
 80027fe:	2200      	movs	r2, #0
 8002800:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002802:	4b13      	ldr	r3, [pc, #76]	@ (8002850 <MX_USART2_UART_Init+0x94>)
 8002804:	2200      	movs	r2, #0
 8002806:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002808:	4811      	ldr	r0, [pc, #68]	@ (8002850 <MX_USART2_UART_Init+0x94>)
 800280a:	f008 f943 	bl	800aa94 <HAL_UART_Init>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002814:	f002 fb4a 	bl	8004eac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002818:	2100      	movs	r1, #0
 800281a:	480d      	ldr	r0, [pc, #52]	@ (8002850 <MX_USART2_UART_Init+0x94>)
 800281c:	f009 ff63 	bl	800c6e6 <HAL_UARTEx_SetTxFifoThreshold>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002826:	f002 fb41 	bl	8004eac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800282a:	2100      	movs	r1, #0
 800282c:	4808      	ldr	r0, [pc, #32]	@ (8002850 <MX_USART2_UART_Init+0x94>)
 800282e:	f009 ff98 	bl	800c762 <HAL_UARTEx_SetRxFifoThreshold>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002838:	f002 fb38 	bl	8004eac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800283c:	4804      	ldr	r0, [pc, #16]	@ (8002850 <MX_USART2_UART_Init+0x94>)
 800283e:	f009 ff19 	bl	800c674 <HAL_UARTEx_DisableFifoMode>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002848:	f002 fb30 	bl	8004eac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000978 	.word	0x20000978
 8002854:	40004400 	.word	0x40004400

08002858 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800285e:	4b20      	ldr	r3, [pc, #128]	@ (80028e0 <MX_DMA_Init+0x88>)
 8002860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002862:	4a1f      	ldr	r2, [pc, #124]	@ (80028e0 <MX_DMA_Init+0x88>)
 8002864:	f043 0304 	orr.w	r3, r3, #4
 8002868:	6493      	str	r3, [r2, #72]	@ 0x48
 800286a:	4b1d      	ldr	r3, [pc, #116]	@ (80028e0 <MX_DMA_Init+0x88>)
 800286c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002876:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <MX_DMA_Init+0x88>)
 8002878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800287a:	4a19      	ldr	r2, [pc, #100]	@ (80028e0 <MX_DMA_Init+0x88>)
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	6493      	str	r3, [r2, #72]	@ 0x48
 8002882:	4b17      	ldr	r3, [pc, #92]	@ (80028e0 <MX_DMA_Init+0x88>)
 8002884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800288e:	4b14      	ldr	r3, [pc, #80]	@ (80028e0 <MX_DMA_Init+0x88>)
 8002890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002892:	4a13      	ldr	r2, [pc, #76]	@ (80028e0 <MX_DMA_Init+0x88>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6493      	str	r3, [r2, #72]	@ 0x48
 800289a:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <MX_DMA_Init+0x88>)
 800289c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	607b      	str	r3, [r7, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2100      	movs	r1, #0
 80028aa:	200b      	movs	r0, #11
 80028ac:	f004 fb33 	bl	8006f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80028b0:	200b      	movs	r0, #11
 80028b2:	f004 fb4a 	bl	8006f4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80028b6:	2200      	movs	r2, #0
 80028b8:	2100      	movs	r1, #0
 80028ba:	200c      	movs	r0, #12
 80028bc:	f004 fb2b 	bl	8006f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80028c0:	200c      	movs	r0, #12
 80028c2:	f004 fb42 	bl	8006f4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2100      	movs	r1, #0
 80028ca:	2038      	movs	r0, #56	@ 0x38
 80028cc:	f004 fb23 	bl	8006f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80028d0:	2038      	movs	r0, #56	@ 0x38
 80028d2:	f004 fb3a 	bl	8006f4a <HAL_NVIC_EnableIRQ>

}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000

080028e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	@ 0x28
 80028e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ea:	f107 0314 	add.w	r3, r7, #20
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	60da      	str	r2, [r3, #12]
 80028f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028fa:	4b7f      	ldr	r3, [pc, #508]	@ (8002af8 <MX_GPIO_Init+0x214>)
 80028fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fe:	4a7e      	ldr	r2, [pc, #504]	@ (8002af8 <MX_GPIO_Init+0x214>)
 8002900:	f043 0304 	orr.w	r3, r3, #4
 8002904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002906:	4b7c      	ldr	r3, [pc, #496]	@ (8002af8 <MX_GPIO_Init+0x214>)
 8002908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002912:	4b79      	ldr	r3, [pc, #484]	@ (8002af8 <MX_GPIO_Init+0x214>)
 8002914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002916:	4a78      	ldr	r2, [pc, #480]	@ (8002af8 <MX_GPIO_Init+0x214>)
 8002918:	f043 0320 	orr.w	r3, r3, #32
 800291c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800291e:	4b76      	ldr	r3, [pc, #472]	@ (8002af8 <MX_GPIO_Init+0x214>)
 8002920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	4b73      	ldr	r3, [pc, #460]	@ (8002af8 <MX_GPIO_Init+0x214>)
 800292c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292e:	4a72      	ldr	r2, [pc, #456]	@ (8002af8 <MX_GPIO_Init+0x214>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002936:	4b70      	ldr	r3, [pc, #448]	@ (8002af8 <MX_GPIO_Init+0x214>)
 8002938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002942:	4b6d      	ldr	r3, [pc, #436]	@ (8002af8 <MX_GPIO_Init+0x214>)
 8002944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002946:	4a6c      	ldr	r2, [pc, #432]	@ (8002af8 <MX_GPIO_Init+0x214>)
 8002948:	f043 0302 	orr.w	r3, r3, #2
 800294c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800294e:	4b6a      	ldr	r3, [pc, #424]	@ (8002af8 <MX_GPIO_Init+0x214>)
 8002950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	607b      	str	r3, [r7, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800295a:	4b67      	ldr	r3, [pc, #412]	@ (8002af8 <MX_GPIO_Init+0x214>)
 800295c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295e:	4a66      	ldr	r2, [pc, #408]	@ (8002af8 <MX_GPIO_Init+0x214>)
 8002960:	f043 0308 	orr.w	r3, r3, #8
 8002964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002966:	4b64      	ldr	r3, [pc, #400]	@ (8002af8 <MX_GPIO_Init+0x214>)
 8002968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8002972:	2200      	movs	r2, #0
 8002974:	f244 11b6 	movw	r1, #16822	@ 0x41b6
 8002978:	4860      	ldr	r0, [pc, #384]	@ (8002afc <MX_GPIO_Init+0x218>)
 800297a:	f004 ffcd 	bl	8007918 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800297e:	2200      	movs	r2, #0
 8002980:	f44f 613e 	mov.w	r1, #3040	@ 0xbe0
 8002984:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002988:	f004 ffc6 	bl	8007918 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_6, GPIO_PIN_RESET);
 800298c:	2200      	movs	r2, #0
 800298e:	f240 4141 	movw	r1, #1089	@ 0x441
 8002992:	485b      	ldr	r0, [pc, #364]	@ (8002b00 <MX_GPIO_Init+0x21c>)
 8002994:	f004 ffc0 	bl	8007918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002998:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800299c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800299e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	4619      	mov	r1, r3
 80029ae:	4853      	ldr	r0, [pc, #332]	@ (8002afc <MX_GPIO_Init+0x218>)
 80029b0:	f004 fe18 	bl	80075e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC1 PC2 PC4
                           PC5 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80029b4:	f244 13b6 	movw	r3, #16822	@ 0x41b6
 80029b8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ba:	2301      	movs	r3, #1
 80029bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c2:	2300      	movs	r3, #0
 80029c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c6:	f107 0314 	add.w	r3, r7, #20
 80029ca:	4619      	mov	r1, r3
 80029cc:	484b      	ldr	r0, [pc, #300]	@ (8002afc <MX_GPIO_Init+0x218>)
 80029ce:	f004 fe09 	bl	80075e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 PA9
                           PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80029d2:	f44f 633a 	mov.w	r3, #2976	@ 0xba0
 80029d6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d8:	2301      	movs	r3, #1
 80029da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e0:	2300      	movs	r3, #0
 80029e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	4619      	mov	r1, r3
 80029ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029ee:	f004 fdf9 	bl	80075e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029f2:	2340      	movs	r3, #64	@ 0x40
 80029f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f6:	2301      	movs	r3, #1
 80029f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029fa:	2302      	movs	r3, #2
 80029fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fe:	2300      	movs	r3, #0
 8002a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a02:	f107 0314 	add.w	r3, r7, #20
 8002a06:	4619      	mov	r1, r3
 8002a08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a0c:	f004 fdea 	bl	80075e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_6;
 8002a10:	f240 4341 	movw	r3, #1089	@ 0x441
 8002a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	4619      	mov	r1, r3
 8002a28:	4835      	ldr	r0, [pc, #212]	@ (8002b00 <MX_GPIO_Init+0x21c>)
 8002a2a:	f004 fddb 	bl	80075e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a2e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	4619      	mov	r1, r3
 8002a42:	482e      	ldr	r0, [pc, #184]	@ (8002afc <MX_GPIO_Init+0x218>)
 8002a44:	f004 fdce 	bl	80075e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a56:	f107 0314 	add.w	r3, r7, #20
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a60:	f004 fdc0 	bl	80075e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a64:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a72:	f107 0314 	add.w	r3, r7, #20
 8002a76:	4619      	mov	r1, r3
 8002a78:	4820      	ldr	r0, [pc, #128]	@ (8002afc <MX_GPIO_Init+0x218>)
 8002a7a:	f004 fdb3 	bl	80075e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a7e:	2304      	movs	r3, #4
 8002a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a86:	2302      	movs	r3, #2
 8002a88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a8a:	f107 0314 	add.w	r3, r7, #20
 8002a8e:	4619      	mov	r1, r3
 8002a90:	481c      	ldr	r0, [pc, #112]	@ (8002b04 <MX_GPIO_Init+0x220>)
 8002a92:	f004 fda7 	bl	80075e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a96:	2330      	movs	r3, #48	@ 0x30
 8002a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4815      	ldr	r0, [pc, #84]	@ (8002b00 <MX_GPIO_Init+0x21c>)
 8002aaa:	f004 fd9b 	bl	80075e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002aae:	2380      	movs	r3, #128	@ 0x80
 8002ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aba:	f107 0314 	add.w	r3, r7, #20
 8002abe:	4619      	mov	r1, r3
 8002ac0:	480f      	ldr	r0, [pc, #60]	@ (8002b00 <MX_GPIO_Init+0x21c>)
 8002ac2:	f004 fd8f 	bl	80075e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ac6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4809      	ldr	r0, [pc, #36]	@ (8002b00 <MX_GPIO_Init+0x21c>)
 8002adc:	f004 fd82 	bl	80075e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	2028      	movs	r0, #40	@ 0x28
 8002ae6:	f004 fa16 	bl	8006f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002aea:	2028      	movs	r0, #40	@ 0x28
 8002aec:	f004 fa2d 	bl	8006f4a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002af0:	bf00      	nop
 8002af2:	3728      	adds	r7, #40	@ 0x28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40021000 	.word	0x40021000
 8002afc:	48000800 	.word	0x48000800
 8002b00:	48000400 	.word	0x48000400
 8002b04:	48000c00 	.word	0x48000c00

08002b08 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b08:	b5b0      	push	{r4, r5, r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a1c      	ldr	r2, [pc, #112]	@ (8002b84 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d108      	bne.n	8002b2a <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += 1;
 8002b18:	4b1b      	ldr	r3, [pc, #108]	@ (8002b88 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1e:	1c54      	adds	r4, r2, #1
 8002b20:	f143 0500 	adc.w	r5, r3, #0
 8002b24:	4b18      	ldr	r3, [pc, #96]	@ (8002b88 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002b26:	e9c3 4500 	strd	r4, r5, [r3]
	}
//	 Check which version of the timer triggered this callback and toggle LED
	if(htim == &htim6)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a17      	ldr	r2, [pc, #92]	@ (8002b8c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d103      	bne.n	8002b3a <HAL_TIM_PeriodElapsedCallback+0x32>
	{
	    //check2 +=1;
		Heartbeat();
 8002b32:	f001 fa89 	bl	8004048 <Heartbeat>
		Routine();
 8002b36:	f001 fa95 	bl	8004064 <Routine>
	}
	//timer IT update Kalman filter
	if(htim == &htim15)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a14      	ldr	r2, [pc, #80]	@ (8002b90 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d11c      	bne.n	8002b7c <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		// Read sensor data or get measurements
		float32_t y_data[1] = {QEIdata.linearPos};
 8002b42:	4b14      	ldr	r3, [pc, #80]	@ (8002b94 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b46:	60fb      	str	r3, [r7, #12]

		// Prediction step
		KalmanFilter_Predict(&kf, u_data, w_data);
 8002b48:	4a13      	ldr	r2, [pc, #76]	@ (8002b98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002b4a:	4914      	ldr	r1, [pc, #80]	@ (8002b9c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002b4c:	4814      	ldr	r0, [pc, #80]	@ (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b4e:	f7fe fe82 	bl	8001856 <KalmanFilter_Predict>

		// Update step
		KalmanFilter_Update(&kf, y_data);
 8002b52:	f107 030c 	add.w	r3, r7, #12
 8002b56:	4619      	mov	r1, r3
 8002b58:	4811      	ldr	r0, [pc, #68]	@ (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b5a:	f7fe ff0f 	bl	800197c <KalmanFilter_Update>

		// Use the updated state estimate (kf.x) as needed
		estimated_state[0] = kf.x.pData[0]; // Position
 8002b5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0f      	ldr	r2, [pc, #60]	@ (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002b66:	6013      	str	r3, [r2, #0]
		estimated_state[1] = kf.x.pData[1]; // Velocity
 8002b68:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002b70:	6053      	str	r3, [r2, #4]
		estimated_state[2] = kf.x.pData[2]; // Acceleration
 8002b72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4a0a      	ldr	r2, [pc, #40]	@ (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002b7a:	6093      	str	r3, [r2, #8]

	}
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bdb0      	pop	{r4, r5, r7, pc}
 8002b84:	20000648 	.word	0x20000648
 8002b88:	20000b48 	.word	0x20000b48
 8002b8c:	20000714 	.word	0x20000714
 8002b90:	200007e0 	.word	0x200007e0
 8002b94:	20000b08 	.word	0x20000b08
 8002b98:	20000280 	.word	0x20000280
 8002b9c:	20001494 	.word	0x20001494
 8002ba0:	2000140c 	.word	0x2000140c
 8002ba4:	20001400 	.word	0x20001400

08002ba8 <micros>:

uint64_t micros()
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+((_micros - 1) * 2,147,483,647);
 8002bac:	4b07      	ldr	r3, [pc, #28]	@ (8002bcc <micros+0x24>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb2:	f203 2387 	addw	r3, r3, #647	@ 0x287
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
}
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	20000648 	.word	0x20000648

08002bd0 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 8002bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = micros();
 8002bd8:	f7ff ffe6 	bl	8002ba8 <micros>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4991      	ldr	r1, [pc, #580]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002be2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim2);
 8002be6:	4b91      	ldr	r3, [pc, #580]	@ (8002e2c <QEIEncoderPosVel_Update+0x25c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bec:	4a8e      	ldr	r2, [pc, #568]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002bee:	6013      	str	r3, [r2, #0]
	//Postion 1 turn calculation
	QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 8002bf0:	4b8d      	ldr	r3, [pc, #564]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bf8:	ee07 3a90 	vmov	s15, r3
 8002bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c00:	4b89      	ldr	r3, [pc, #548]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002c02:	edc3 7a06 	vstr	s15, [r3, #24]
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8002c06:	4b88      	ldr	r3, [pc, #544]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	4b87      	ldr	r3, [pc, #540]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	607b      	str	r3, [r7, #4]
	//Handle Warp around
	if(diffPosition > UINT32_MAX/2)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	da02      	bge.n	8002c1e <QEIEncoderPosVel_Update+0x4e>
		diffPosition -=UINT32_MAX;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	607b      	str	r3, [r7, #4]
	if(diffPosition < -UINT32_MAX/2)
		diffPosition +=UINT32_MAX;
	//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001; //sec
 8002c1e:	4b82      	ldr	r3, [pc, #520]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002c20:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002c24:	4b80      	ldr	r3, [pc, #512]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002c26:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c2a:	ebb0 0a02 	subs.w	sl, r0, r2
 8002c2e:	eb61 0b03 	sbc.w	fp, r1, r3
 8002c32:	4650      	mov	r0, sl
 8002c34:	4659      	mov	r1, fp
 8002c36:	f7fd fc75 	bl	8000524 <__aeabi_ul2d>
 8002c3a:	a377      	add	r3, pc, #476	@ (adr r3, 8002e18 <QEIEncoderPosVel_Update+0x248>)
 8002c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c40:	f7fd fca6 	bl	8000590 <__aeabi_dmul>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f7fd ff70 	bl	8000b30 <__aeabi_d2f>
 8002c50:	4603      	mov	r3, r0
 8002c52:	603b      	str	r3, [r7, #0]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;  //pulse/sec
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	ee07 3a90 	vmov	s15, r3
 8002c5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c5e:	ed97 7a00 	vldr	s14, [r7]
 8002c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c66:	4b70      	ldr	r3, [pc, #448]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002c68:	edc3 7a07 	vstr	s15, [r3, #28]

	QEIdata.rad_s = (QEIdata.QEIAngularVelocity*2*3.14)/8192;
 8002c6c:	4b6e      	ldr	r3, [pc, #440]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002c6e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c76:	ee17 0a90 	vmov	r0, s15
 8002c7a:	f7fd fc31 	bl	80004e0 <__aeabi_f2d>
 8002c7e:	a368      	add	r3, pc, #416	@ (adr r3, 8002e20 <QEIEncoderPosVel_Update+0x250>)
 8002c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c84:	f7fd fc84 	bl	8000590 <__aeabi_dmul>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	4b66      	ldr	r3, [pc, #408]	@ (8002e30 <QEIEncoderPosVel_Update+0x260>)
 8002c96:	f7fd fda5 	bl	80007e4 <__aeabi_ddiv>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f7fd ff45 	bl	8000b30 <__aeabi_d2f>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4a5f      	ldr	r2, [pc, #380]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002caa:	6213      	str	r3, [r2, #32]
	QEIdata.rpm = (QEIdata.QEIAngularVelocity*60)/8192;
 8002cac:	4b5e      	ldr	r3, [pc, #376]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002cae:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cb2:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8002e34 <QEIEncoderPosVel_Update+0x264>
 8002cb6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002e38 <QEIEncoderPosVel_Update+0x268>
 8002cbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cc2:	4b59      	ldr	r3, [pc, #356]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002cc4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	QEIdata.linearVel = (QEIdata.QEIAngularVelocity*10)/8192; //velocity (mm/s)
 8002cc8:	4b57      	ldr	r3, [pc, #348]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002cca:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cce:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002cd2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cd6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002e38 <QEIEncoderPosVel_Update+0x268>
 8002cda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cde:	4b52      	ldr	r3, [pc, #328]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002ce0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	QEIdata.Velocity[NEW] = QEIdata.linearVel;
 8002ce4:	4b50      	ldr	r3, [pc, #320]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce8:	4a4f      	ldr	r2, [pc, #316]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002cea:	6313      	str	r3, [r2, #48]	@ 0x30
	QEIdata.linearAcc = (QEIdata.Velocity[NEW]-QEIdata.Velocity[OLD])/diffTime; //(mm/s^2)
 8002cec:	4b4e      	ldr	r3, [pc, #312]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002cee:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8002cf2:	4b4d      	ldr	r3, [pc, #308]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002cf4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002cf8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002cfc:	ed97 7a00 	vldr	s14, [r7]
 8002d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d04:	4b48      	ldr	r3, [pc, #288]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002d06:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	if(QEIdata.Position[NEW] < 2147483648){
 8002d0a:	4b47      	ldr	r3, [pc, #284]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	db11      	blt.n	8002d36 <QEIEncoderPosVel_Update+0x166>
		QEIdata.linearPos = ((float)QEIdata.Position[NEW]*10)/8192; //position (mm)
 8002d12:	4b45      	ldr	r3, [pc, #276]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	ee07 3a90 	vmov	s15, r3
 8002d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d1e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002d22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d26:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8002e38 <QEIEncoderPosVel_Update+0x268>
 8002d2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002d30:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 8002d34:	e01c      	b.n	8002d70 <QEIEncoderPosVel_Update+0x1a0>
	}
	else{
		QEIdata.linearPos = -((float)(4294967295 - QEIdata.Position[NEW])*10)/8192;
 8002d36:	4b3c      	ldr	r3, [pc, #240]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	461c      	mov	r4, r3
 8002d3e:	4615      	mov	r5, r2
 8002d40:	2300      	movs	r3, #0
 8002d42:	f1d4 38ff 	rsbs	r8, r4, #4294967295
 8002d46:	eb63 0905 	sbc.w	r9, r3, r5
 8002d4a:	4640      	mov	r0, r8
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	f7fe f80f 	bl	8000d70 <__aeabi_l2f>
 8002d52:	ee07 0a10 	vmov	s14, r0
 8002d56:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8002d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5e:	eeb1 7a67 	vneg.f32	s14, s15
 8002d62:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8002e38 <QEIEncoderPosVel_Update+0x268>
 8002d66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002d6c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	}

	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8002d70:	4b2d      	ldr	r3, [pc, #180]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a2c      	ldr	r2, [pc, #176]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002d76:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8002d78:	4b2b      	ldr	r3, [pc, #172]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002d7a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d7e:	492a      	ldr	r1, [pc, #168]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002d80:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata.Velocity[OLD] = QEIdata.Velocity[NEW];
 8002d84:	4b28      	ldr	r3, [pc, #160]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d88:	4a27      	ldr	r2, [pc, #156]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002d8a:	6353      	str	r3, [r2, #52]	@ 0x34

	if (max_velo < QEIdata.linearVel)
 8002d8c:	4b26      	ldr	r3, [pc, #152]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002d8e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002d92:	4b2a      	ldr	r3, [pc, #168]	@ (8002e3c <QEIEncoderPosVel_Update+0x26c>)
 8002d94:	edd3 7a00 	vldr	s15, [r3]
 8002d98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da0:	dd03      	ble.n	8002daa <QEIEncoderPosVel_Update+0x1da>
	{
		max_velo = QEIdata.linearVel;
 8002da2:	4b21      	ldr	r3, [pc, #132]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da6:	4a25      	ldr	r2, [pc, #148]	@ (8002e3c <QEIEncoderPosVel_Update+0x26c>)
 8002da8:	6013      	str	r3, [r2, #0]
	}

	if (max_acc < QEIdata.linearAcc)
 8002daa:	4b1f      	ldr	r3, [pc, #124]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002dac:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002db0:	4b23      	ldr	r3, [pc, #140]	@ (8002e40 <QEIEncoderPosVel_Update+0x270>)
 8002db2:	edd3 7a00 	vldr	s15, [r3]
 8002db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dbe:	dd03      	ble.n	8002dc8 <QEIEncoderPosVel_Update+0x1f8>
	{
		max_acc = QEIdata.linearAcc;
 8002dc0:	4b19      	ldr	r3, [pc, #100]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8002e40 <QEIEncoderPosVel_Update+0x270>)
 8002dc6:	6013      	str	r3, [r2, #0]
	}

	if(overshootTop < QEIdata.linearPos){
 8002dc8:	4b17      	ldr	r3, [pc, #92]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002dca:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002dce:	4b1d      	ldr	r3, [pc, #116]	@ (8002e44 <QEIEncoderPosVel_Update+0x274>)
 8002dd0:	edd3 7a00 	vldr	s15, [r3]
 8002dd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ddc:	dd04      	ble.n	8002de8 <QEIEncoderPosVel_Update+0x218>
		overshootTop = QEIdata.linearPos;
 8002dde:	4b12      	ldr	r3, [pc, #72]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de2:	4a18      	ldr	r2, [pc, #96]	@ (8002e44 <QEIEncoderPosVel_Update+0x274>)
 8002de4:	6013      	str	r3, [r2, #0]
	}
	else if(overshootDown > QEIdata.linearPos){
		overshootDown = QEIdata.linearPos;
	}
}
 8002de6:	e00f      	b.n	8002e08 <QEIEncoderPosVel_Update+0x238>
	else if(overshootDown > QEIdata.linearPos){
 8002de8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002dea:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002dee:	4b16      	ldr	r3, [pc, #88]	@ (8002e48 <QEIEncoderPosVel_Update+0x278>)
 8002df0:	edd3 7a00 	vldr	s15, [r3]
 8002df4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfc:	d400      	bmi.n	8002e00 <QEIEncoderPosVel_Update+0x230>
}
 8002dfe:	e003      	b.n	8002e08 <QEIEncoderPosVel_Update+0x238>
		overshootDown = QEIdata.linearPos;
 8002e00:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <QEIEncoderPosVel_Update+0x258>)
 8002e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e04:	4a10      	ldr	r2, [pc, #64]	@ (8002e48 <QEIEncoderPosVel_Update+0x278>)
 8002e06:	6013      	str	r3, [r2, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e12:	bf00      	nop
 8002e14:	f3af 8000 	nop.w
 8002e18:	a0b5ed8d 	.word	0xa0b5ed8d
 8002e1c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002e20:	51eb851f 	.word	0x51eb851f
 8002e24:	40091eb8 	.word	0x40091eb8
 8002e28:	20000b08 	.word	0x20000b08
 8002e2c:	200003e4 	.word	0x200003e4
 8002e30:	40c00000 	.word	0x40c00000
 8002e34:	42700000 	.word	0x42700000
 8002e38:	46000000 	.word	0x46000000
 8002e3c:	20000c34 	.word	0x20000c34
 8002e40:	20000c38 	.word	0x20000c38
 8002e44:	200014a0 	.word	0x200014a0
 8002e48:	20000284 	.word	0x20000284

08002e4c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e4c:	b4b0      	push	{r4, r5, r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	80fb      	strh	r3, [r7, #6]
//			mode = 4; //Emergency mode
//			Vin = 0;
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
//		}
//	}
	start_IT += 1;
 8002e56:	4b07      	ldr	r3, [pc, #28]	@ (8002e74 <HAL_GPIO_EXTI_Callback+0x28>)
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	1c54      	adds	r4, r2, #1
 8002e5e:	f143 0500 	adc.w	r5, r3, #0
 8002e62:	4b04      	ldr	r3, [pc, #16]	@ (8002e74 <HAL_GPIO_EXTI_Callback+0x28>)
 8002e64:	e9c3 4500 	strd	r4, r5, [r3]
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bcb0      	pop	{r4, r5, r7}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000b68 	.word	0x20000b68

08002e78 <checkStartMoving>:

//-----------------------------------Trajectory------------------------------------------//
void checkStartMoving(){
 8002e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
	if(q_f != q_f_old){
 8002e80:	4b9d      	ldr	r3, [pc, #628]	@ (80030f8 <checkStartMoving+0x280>)
 8002e82:	ed93 7a00 	vldr	s14, [r3]
 8002e86:	4b9d      	ldr	r3, [pc, #628]	@ (80030fc <checkStartMoving+0x284>)
 8002e88:	edd3 7a00 	vldr	s15, [r3]
 8002e8c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e94:	f000 8201 	beq.w	800329a <checkStartMoving+0x422>
		q_i = q_f_old;   //Define q_i
 8002e98:	4b98      	ldr	r3, [pc, #608]	@ (80030fc <checkStartMoving+0x284>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a98      	ldr	r2, [pc, #608]	@ (8003100 <checkStartMoving+0x288>)
 8002e9e:	6013      	str	r3, [r2, #0]
		delta_q = q_f - q_i;
 8002ea0:	4b95      	ldr	r3, [pc, #596]	@ (80030f8 <checkStartMoving+0x280>)
 8002ea2:	ed93 7a00 	vldr	s14, [r3]
 8002ea6:	4b96      	ldr	r3, [pc, #600]	@ (8003100 <checkStartMoving+0x288>)
 8002ea8:	edd3 7a00 	vldr	s15, [r3]
 8002eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb0:	4b94      	ldr	r3, [pc, #592]	@ (8003104 <checkStartMoving+0x28c>)
 8002eb2:	edc3 7a00 	vstr	s15, [r3]
		if(delta_q < 0){
 8002eb6:	4b93      	ldr	r3, [pc, #588]	@ (8003104 <checkStartMoving+0x28c>)
 8002eb8:	edd3 7a00 	vldr	s15, [r3]
 8002ebc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec4:	d504      	bpl.n	8002ed0 <checkStartMoving+0x58>
			dir = -1;
 8002ec6:	4b90      	ldr	r3, [pc, #576]	@ (8003108 <checkStartMoving+0x290>)
 8002ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	e002      	b.n	8002ed6 <checkStartMoving+0x5e>
		}
		else{
			dir = 1;
 8002ed0:	4b8d      	ldr	r3, [pc, #564]	@ (8003108 <checkStartMoving+0x290>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]
		}

		float q_check = fabs(q_d_i + q_2d_max*sqrt(fabs(delta_q)/q_2d_max)*dir);
 8002ed6:	4b8d      	ldr	r3, [pc, #564]	@ (800310c <checkStartMoving+0x294>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd fb00 	bl	80004e0 <__aeabi_f2d>
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	460d      	mov	r5, r1
 8002ee4:	4b8a      	ldr	r3, [pc, #552]	@ (8003110 <checkStartMoving+0x298>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd faf9 	bl	80004e0 <__aeabi_f2d>
 8002eee:	4680      	mov	r8, r0
 8002ef0:	4689      	mov	r9, r1
 8002ef2:	4b84      	ldr	r3, [pc, #528]	@ (8003104 <checkStartMoving+0x28c>)
 8002ef4:	edd3 7a00 	vldr	s15, [r3]
 8002ef8:	eef0 7ae7 	vabs.f32	s15, s15
 8002efc:	ee17 0a90 	vmov	r0, s15
 8002f00:	f7fd faee 	bl	80004e0 <__aeabi_f2d>
 8002f04:	4682      	mov	sl, r0
 8002f06:	468b      	mov	fp, r1
 8002f08:	4b81      	ldr	r3, [pc, #516]	@ (8003110 <checkStartMoving+0x298>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd fae7 	bl	80004e0 <__aeabi_f2d>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4650      	mov	r0, sl
 8002f18:	4659      	mov	r1, fp
 8002f1a:	f7fd fc63 	bl	80007e4 <__aeabi_ddiv>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	ec43 2b17 	vmov	d7, r2, r3
 8002f26:	eeb0 0a47 	vmov.f32	s0, s14
 8002f2a:	eef0 0a67 	vmov.f32	s1, s15
 8002f2e:	f00a f9db 	bl	800d2e8 <sqrt>
 8002f32:	ec53 2b10 	vmov	r2, r3, d0
 8002f36:	4640      	mov	r0, r8
 8002f38:	4649      	mov	r1, r9
 8002f3a:	f7fd fb29 	bl	8000590 <__aeabi_dmul>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4690      	mov	r8, r2
 8002f44:	4699      	mov	r9, r3
 8002f46:	4b70      	ldr	r3, [pc, #448]	@ (8003108 <checkStartMoving+0x290>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd fab6 	bl	80004bc <__aeabi_i2d>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4640      	mov	r0, r8
 8002f56:	4649      	mov	r1, r9
 8002f58:	f7fd fb1a 	bl	8000590 <__aeabi_dmul>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4620      	mov	r0, r4
 8002f62:	4629      	mov	r1, r5
 8002f64:	f7fd f95e 	bl	8000224 <__adddf3>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f7fd fdde 	bl	8000b30 <__aeabi_d2f>
 8002f74:	ee07 0a90 	vmov	s15, r0
 8002f78:	eef0 7ae7 	vabs.f32	s15, s15
 8002f7c:	edc7 7a01 	vstr	s15, [r7, #4]

		if(q_check >= q_d_max){ //Accelerate to maximum speed
 8002f80:	4b64      	ldr	r3, [pc, #400]	@ (8003114 <checkStartMoving+0x29c>)
 8002f82:	edd3 7a00 	vldr	s15, [r3]
 8002f86:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f92:	f2c0 80cf 	blt.w	8003134 <checkStartMoving+0x2bc>
			calmode = 1;
 8002f96:	4b60      	ldr	r3, [pc, #384]	@ (8003118 <checkStartMoving+0x2a0>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
			t_acc = fabs((q_d_max-q_d_i)/q_2d_max);
 8002f9c:	4b5d      	ldr	r3, [pc, #372]	@ (8003114 <checkStartMoving+0x29c>)
 8002f9e:	ed93 7a00 	vldr	s14, [r3]
 8002fa2:	4b5a      	ldr	r3, [pc, #360]	@ (800310c <checkStartMoving+0x294>)
 8002fa4:	edd3 7a00 	vldr	s15, [r3]
 8002fa8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002fac:	4b58      	ldr	r3, [pc, #352]	@ (8003110 <checkStartMoving+0x298>)
 8002fae:	ed93 7a00 	vldr	s14, [r3]
 8002fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fb6:	eef0 7ae7 	vabs.f32	s15, s15
 8002fba:	4b58      	ldr	r3, [pc, #352]	@ (800311c <checkStartMoving+0x2a4>)
 8002fbc:	edc3 7a00 	vstr	s15, [r3]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 8002fc0:	4b52      	ldr	r3, [pc, #328]	@ (800310c <checkStartMoving+0x294>)
 8002fc2:	ed93 7a00 	vldr	s14, [r3]
 8002fc6:	4b55      	ldr	r3, [pc, #340]	@ (800311c <checkStartMoving+0x2a4>)
 8002fc8:	edd3 7a00 	vldr	s15, [r3]
 8002fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fd0:	4b4d      	ldr	r3, [pc, #308]	@ (8003108 <checkStartMoving+0x290>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	ee07 3a90 	vmov	s15, r3
 8002fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe0:	ee17 0a90 	vmov	r0, s15
 8002fe4:	f7fd fa7c 	bl	80004e0 <__aeabi_f2d>
 8002fe8:	4604      	mov	r4, r0
 8002fea:	460d      	mov	r5, r1
 8002fec:	4b48      	ldr	r3, [pc, #288]	@ (8003110 <checkStartMoving+0x298>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fd fa75 	bl	80004e0 <__aeabi_f2d>
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	4b49      	ldr	r3, [pc, #292]	@ (8003120 <checkStartMoving+0x2a8>)
 8002ffc:	f7fd fac8 	bl	8000590 <__aeabi_dmul>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4690      	mov	r8, r2
 8003006:	4699      	mov	r9, r3
 8003008:	4b44      	ldr	r3, [pc, #272]	@ (800311c <checkStartMoving+0x2a4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd fa67 	bl	80004e0 <__aeabi_f2d>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4640      	mov	r0, r8
 8003018:	4649      	mov	r1, r9
 800301a:	f7fd fab9 	bl	8000590 <__aeabi_dmul>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4690      	mov	r8, r2
 8003024:	4699      	mov	r9, r3
 8003026:	4b3d      	ldr	r3, [pc, #244]	@ (800311c <checkStartMoving+0x2a4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd fa58 	bl	80004e0 <__aeabi_f2d>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4640      	mov	r0, r8
 8003036:	4649      	mov	r1, r9
 8003038:	f7fd faaa 	bl	8000590 <__aeabi_dmul>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4690      	mov	r8, r2
 8003042:	4699      	mov	r9, r3
 8003044:	4b30      	ldr	r3, [pc, #192]	@ (8003108 <checkStartMoving+0x290>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd fa37 	bl	80004bc <__aeabi_i2d>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4640      	mov	r0, r8
 8003054:	4649      	mov	r1, r9
 8003056:	f7fd fa9b 	bl	8000590 <__aeabi_dmul>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4620      	mov	r0, r4
 8003060:	4629      	mov	r1, r5
 8003062:	f7fd f8df 	bl	8000224 <__adddf3>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4610      	mov	r0, r2
 800306c:	4619      	mov	r1, r3
 800306e:	f7fd fd5f 	bl	8000b30 <__aeabi_d2f>
 8003072:	4603      	mov	r3, r0
 8003074:	4a2b      	ldr	r2, [pc, #172]	@ (8003124 <checkStartMoving+0x2ac>)
 8003076:	6013      	str	r3, [r2, #0]
			t_const = fabs((q_f-q_i-2*q_acc)/q_d_max);
 8003078:	4b1f      	ldr	r3, [pc, #124]	@ (80030f8 <checkStartMoving+0x280>)
 800307a:	ed93 7a00 	vldr	s14, [r3]
 800307e:	4b20      	ldr	r3, [pc, #128]	@ (8003100 <checkStartMoving+0x288>)
 8003080:	edd3 7a00 	vldr	s15, [r3]
 8003084:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003088:	4b26      	ldr	r3, [pc, #152]	@ (8003124 <checkStartMoving+0x2ac>)
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003092:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003096:	4b1f      	ldr	r3, [pc, #124]	@ (8003114 <checkStartMoving+0x29c>)
 8003098:	ed93 7a00 	vldr	s14, [r3]
 800309c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030a0:	eef0 7ae7 	vabs.f32	s15, s15
 80030a4:	4b20      	ldr	r3, [pc, #128]	@ (8003128 <checkStartMoving+0x2b0>)
 80030a6:	edc3 7a00 	vstr	s15, [r3]
			q_const = q_acc + q_d_max*t_const*dir;
 80030aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003114 <checkStartMoving+0x29c>)
 80030ac:	ed93 7a00 	vldr	s14, [r3]
 80030b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003128 <checkStartMoving+0x2b0>)
 80030b2:	edd3 7a00 	vldr	s15, [r3]
 80030b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ba:	4b13      	ldr	r3, [pc, #76]	@ (8003108 <checkStartMoving+0x290>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	ee07 3a90 	vmov	s15, r3
 80030c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ca:	4b16      	ldr	r3, [pc, #88]	@ (8003124 <checkStartMoving+0x2ac>)
 80030cc:	edd3 7a00 	vldr	s15, [r3]
 80030d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030d4:	4b15      	ldr	r3, [pc, #84]	@ (800312c <checkStartMoving+0x2b4>)
 80030d6:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc + t_const;
 80030da:	4b10      	ldr	r3, [pc, #64]	@ (800311c <checkStartMoving+0x2a4>)
 80030dc:	edd3 7a00 	vldr	s15, [r3]
 80030e0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80030e4:	4b10      	ldr	r3, [pc, #64]	@ (8003128 <checkStartMoving+0x2b0>)
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ee:	4b10      	ldr	r3, [pc, #64]	@ (8003130 <checkStartMoving+0x2b8>)
 80030f0:	edc3 7a00 	vstr	s15, [r3]
 80030f4:	e0c6      	b.n	8003284 <checkStartMoving+0x40c>
 80030f6:	bf00      	nop
 80030f8:	20000b7c 	.word	0x20000b7c
 80030fc:	20000b94 	.word	0x20000b94
 8003100:	20000b80 	.word	0x20000b80
 8003104:	20000b84 	.word	0x20000b84
 8003108:	20000214 	.word	0x20000214
 800310c:	20000b78 	.word	0x20000b78
 8003110:	2000020c 	.word	0x2000020c
 8003114:	20000208 	.word	0x20000208
 8003118:	20000210 	.word	0x20000210
 800311c:	20000b98 	.word	0x20000b98
 8003120:	3fe00000 	.word	0x3fe00000
 8003124:	20000b9c 	.word	0x20000b9c
 8003128:	20000ba0 	.word	0x20000ba0
 800312c:	20000ba4 	.word	0x20000ba4
 8003130:	20000bbc 	.word	0x20000bbc
		}
		else{ //Accelerating does not reach maximum speed
			calmode = 2;
 8003134:	4b5b      	ldr	r3, [pc, #364]	@ (80032a4 <checkStartMoving+0x42c>)
 8003136:	2202      	movs	r2, #2
 8003138:	701a      	strb	r2, [r3, #0]
			t_acc = sqrt(fabs(delta_q)/q_2d_max);
 800313a:	4b5b      	ldr	r3, [pc, #364]	@ (80032a8 <checkStartMoving+0x430>)
 800313c:	edd3 7a00 	vldr	s15, [r3]
 8003140:	eef0 7ae7 	vabs.f32	s15, s15
 8003144:	ee17 0a90 	vmov	r0, s15
 8003148:	f7fd f9ca 	bl	80004e0 <__aeabi_f2d>
 800314c:	4604      	mov	r4, r0
 800314e:	460d      	mov	r5, r1
 8003150:	4b56      	ldr	r3, [pc, #344]	@ (80032ac <checkStartMoving+0x434>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7fd f9c3 	bl	80004e0 <__aeabi_f2d>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4620      	mov	r0, r4
 8003160:	4629      	mov	r1, r5
 8003162:	f7fd fb3f 	bl	80007e4 <__aeabi_ddiv>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	ec43 2b17 	vmov	d7, r2, r3
 800316e:	eeb0 0a47 	vmov.f32	s0, s14
 8003172:	eef0 0a67 	vmov.f32	s1, s15
 8003176:	f00a f8b7 	bl	800d2e8 <sqrt>
 800317a:	ec53 2b10 	vmov	r2, r3, d0
 800317e:	4610      	mov	r0, r2
 8003180:	4619      	mov	r1, r3
 8003182:	f7fd fcd5 	bl	8000b30 <__aeabi_d2f>
 8003186:	4603      	mov	r3, r0
 8003188:	4a49      	ldr	r2, [pc, #292]	@ (80032b0 <checkStartMoving+0x438>)
 800318a:	6013      	str	r3, [r2, #0]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 800318c:	4b49      	ldr	r3, [pc, #292]	@ (80032b4 <checkStartMoving+0x43c>)
 800318e:	ed93 7a00 	vldr	s14, [r3]
 8003192:	4b47      	ldr	r3, [pc, #284]	@ (80032b0 <checkStartMoving+0x438>)
 8003194:	edd3 7a00 	vldr	s15, [r3]
 8003198:	ee27 7a27 	vmul.f32	s14, s14, s15
 800319c:	4b46      	ldr	r3, [pc, #280]	@ (80032b8 <checkStartMoving+0x440>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	ee07 3a90 	vmov	s15, r3
 80031a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ac:	ee17 0a90 	vmov	r0, s15
 80031b0:	f7fd f996 	bl	80004e0 <__aeabi_f2d>
 80031b4:	4604      	mov	r4, r0
 80031b6:	460d      	mov	r5, r1
 80031b8:	4b3c      	ldr	r3, [pc, #240]	@ (80032ac <checkStartMoving+0x434>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd f98f 	bl	80004e0 <__aeabi_f2d>
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	4b3d      	ldr	r3, [pc, #244]	@ (80032bc <checkStartMoving+0x444>)
 80031c8:	f7fd f9e2 	bl	8000590 <__aeabi_dmul>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4690      	mov	r8, r2
 80031d2:	4699      	mov	r9, r3
 80031d4:	4b36      	ldr	r3, [pc, #216]	@ (80032b0 <checkStartMoving+0x438>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd f981 	bl	80004e0 <__aeabi_f2d>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4640      	mov	r0, r8
 80031e4:	4649      	mov	r1, r9
 80031e6:	f7fd f9d3 	bl	8000590 <__aeabi_dmul>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4690      	mov	r8, r2
 80031f0:	4699      	mov	r9, r3
 80031f2:	4b2f      	ldr	r3, [pc, #188]	@ (80032b0 <checkStartMoving+0x438>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd f972 	bl	80004e0 <__aeabi_f2d>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4640      	mov	r0, r8
 8003202:	4649      	mov	r1, r9
 8003204:	f7fd f9c4 	bl	8000590 <__aeabi_dmul>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4690      	mov	r8, r2
 800320e:	4699      	mov	r9, r3
 8003210:	4b29      	ldr	r3, [pc, #164]	@ (80032b8 <checkStartMoving+0x440>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd f951 	bl	80004bc <__aeabi_i2d>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4640      	mov	r0, r8
 8003220:	4649      	mov	r1, r9
 8003222:	f7fd f9b5 	bl	8000590 <__aeabi_dmul>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	4620      	mov	r0, r4
 800322c:	4629      	mov	r1, r5
 800322e:	f7fc fff9 	bl	8000224 <__adddf3>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4610      	mov	r0, r2
 8003238:	4619      	mov	r1, r3
 800323a:	f7fd fc79 	bl	8000b30 <__aeabi_d2f>
 800323e:	4603      	mov	r3, r0
 8003240:	4a1f      	ldr	r2, [pc, #124]	@ (80032c0 <checkStartMoving+0x448>)
 8003242:	6013      	str	r3, [r2, #0]
			q_d_acc = q_d_i + q_2d_max*t_acc*dir;
 8003244:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <checkStartMoving+0x434>)
 8003246:	ed93 7a00 	vldr	s14, [r3]
 800324a:	4b19      	ldr	r3, [pc, #100]	@ (80032b0 <checkStartMoving+0x438>)
 800324c:	edd3 7a00 	vldr	s15, [r3]
 8003250:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003254:	4b18      	ldr	r3, [pc, #96]	@ (80032b8 <checkStartMoving+0x440>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	ee07 3a90 	vmov	s15, r3
 800325c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003260:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003264:	4b13      	ldr	r3, [pc, #76]	@ (80032b4 <checkStartMoving+0x43c>)
 8003266:	edd3 7a00 	vldr	s15, [r3]
 800326a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800326e:	4b15      	ldr	r3, [pc, #84]	@ (80032c4 <checkStartMoving+0x44c>)
 8003270:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc;
 8003274:	4b0e      	ldr	r3, [pc, #56]	@ (80032b0 <checkStartMoving+0x438>)
 8003276:	edd3 7a00 	vldr	s15, [r3]
 800327a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800327e:	4b12      	ldr	r3, [pc, #72]	@ (80032c8 <checkStartMoving+0x450>)
 8003280:	edc3 7a00 	vstr	s15, [r3]
		}
		T_start = micros();
 8003284:	f7ff fc90 	bl	8002ba8 <micros>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	490f      	ldr	r1, [pc, #60]	@ (80032cc <checkStartMoving+0x454>)
 800328e:	e9c1 2300 	strd	r2, r3, [r1]
		q_f_old = q_f;
 8003292:	4b0f      	ldr	r3, [pc, #60]	@ (80032d0 <checkStartMoving+0x458>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a0f      	ldr	r2, [pc, #60]	@ (80032d4 <checkStartMoving+0x45c>)
 8003298:	6013      	str	r3, [r2, #0]
	}
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032a4:	20000210 	.word	0x20000210
 80032a8:	20000b84 	.word	0x20000b84
 80032ac:	2000020c 	.word	0x2000020c
 80032b0:	20000b98 	.word	0x20000b98
 80032b4:	20000b78 	.word	0x20000b78
 80032b8:	20000214 	.word	0x20000214
 80032bc:	3fe00000 	.word	0x3fe00000
 80032c0:	20000b9c 	.word	0x20000b9c
 80032c4:	20000ba8 	.word	0x20000ba8
 80032c8:	20000bbc 	.word	0x20000bbc
 80032cc:	20000bb0 	.word	0x20000bb0
 80032d0:	20000b7c 	.word	0x20000b7c
 80032d4:	20000b94 	.word	0x20000b94

080032d8 <createTrajectory>:

void createTrajectory(){
 80032d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032dc:	af00      	add	r7, sp, #0
	if(calmode == 1){
 80032de:	4b84      	ldr	r3, [pc, #528]	@ (80034f0 <createTrajectory+0x218>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	f040 822c 	bne.w	8003740 <createTrajectory+0x468>
		t = (float)(micros()-T_start)/1000000; //sec
 80032e8:	f7ff fc5e 	bl	8002ba8 <micros>
 80032ec:	4b81      	ldr	r3, [pc, #516]	@ (80034f4 <createTrajectory+0x21c>)
 80032ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f2:	ebb0 0802 	subs.w	r8, r0, r2
 80032f6:	eb61 0903 	sbc.w	r9, r1, r3
 80032fa:	4640      	mov	r0, r8
 80032fc:	4649      	mov	r1, r9
 80032fe:	f7fd fd2f 	bl	8000d60 <__aeabi_ul2f>
 8003302:	ee06 0a90 	vmov	s13, r0
 8003306:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 80034f8 <createTrajectory+0x220>
 800330a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800330e:	4b7b      	ldr	r3, [pc, #492]	@ (80034fc <createTrajectory+0x224>)
 8003310:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 8003314:	4b79      	ldr	r3, [pc, #484]	@ (80034fc <createTrajectory+0x224>)
 8003316:	edd3 7a00 	vldr	s15, [r3]
 800331a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800331e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003322:	f2c0 8094 	blt.w	800344e <createTrajectory+0x176>
 8003326:	4b75      	ldr	r3, [pc, #468]	@ (80034fc <createTrajectory+0x224>)
 8003328:	ed93 7a00 	vldr	s14, [r3]
 800332c:	4b74      	ldr	r3, [pc, #464]	@ (8003500 <createTrajectory+0x228>)
 800332e:	edd3 7a00 	vldr	s15, [r3]
 8003332:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333a:	f140 8088 	bpl.w	800344e <createTrajectory+0x176>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 800333e:	4b71      	ldr	r3, [pc, #452]	@ (8003504 <createTrajectory+0x22c>)
 8003340:	ed93 7a00 	vldr	s14, [r3]
 8003344:	4b6d      	ldr	r3, [pc, #436]	@ (80034fc <createTrajectory+0x224>)
 8003346:	edd3 7a00 	vldr	s15, [r3]
 800334a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800334e:	4b6e      	ldr	r3, [pc, #440]	@ (8003508 <createTrajectory+0x230>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800335a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800335e:	4b6b      	ldr	r3, [pc, #428]	@ (800350c <createTrajectory+0x234>)
 8003360:	edd3 7a00 	vldr	s15, [r3]
 8003364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003368:	ee17 0a90 	vmov	r0, s15
 800336c:	f7fd f8b8 	bl	80004e0 <__aeabi_f2d>
 8003370:	4604      	mov	r4, r0
 8003372:	460d      	mov	r5, r1
 8003374:	4b66      	ldr	r3, [pc, #408]	@ (8003510 <createTrajectory+0x238>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd f8b1 	bl	80004e0 <__aeabi_f2d>
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	4b64      	ldr	r3, [pc, #400]	@ (8003514 <createTrajectory+0x23c>)
 8003384:	f7fd f904 	bl	8000590 <__aeabi_dmul>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4690      	mov	r8, r2
 800338e:	4699      	mov	r9, r3
 8003390:	4b5a      	ldr	r3, [pc, #360]	@ (80034fc <createTrajectory+0x224>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd f8a3 	bl	80004e0 <__aeabi_f2d>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4640      	mov	r0, r8
 80033a0:	4649      	mov	r1, r9
 80033a2:	f7fd f8f5 	bl	8000590 <__aeabi_dmul>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4690      	mov	r8, r2
 80033ac:	4699      	mov	r9, r3
 80033ae:	4b53      	ldr	r3, [pc, #332]	@ (80034fc <createTrajectory+0x224>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd f894 	bl	80004e0 <__aeabi_f2d>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4640      	mov	r0, r8
 80033be:	4649      	mov	r1, r9
 80033c0:	f7fd f8e6 	bl	8000590 <__aeabi_dmul>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4690      	mov	r8, r2
 80033ca:	4699      	mov	r9, r3
 80033cc:	4b4e      	ldr	r3, [pc, #312]	@ (8003508 <createTrajectory+0x230>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fd f873 	bl	80004bc <__aeabi_i2d>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4640      	mov	r0, r8
 80033dc:	4649      	mov	r1, r9
 80033de:	f7fd f8d7 	bl	8000590 <__aeabi_dmul>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4620      	mov	r0, r4
 80033e8:	4629      	mov	r1, r5
 80033ea:	f7fc ff1b 	bl	8000224 <__adddf3>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4610      	mov	r0, r2
 80033f4:	4619      	mov	r1, r3
 80033f6:	f7fd fb9b 	bl	8000b30 <__aeabi_d2f>
 80033fa:	4603      	mov	r3, r0
 80033fc:	4a46      	ldr	r2, [pc, #280]	@ (8003518 <createTrajectory+0x240>)
 80033fe:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 8003400:	4b43      	ldr	r3, [pc, #268]	@ (8003510 <createTrajectory+0x238>)
 8003402:	ed93 7a00 	vldr	s14, [r3]
 8003406:	4b3d      	ldr	r3, [pc, #244]	@ (80034fc <createTrajectory+0x224>)
 8003408:	edd3 7a00 	vldr	s15, [r3]
 800340c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003410:	4b3d      	ldr	r3, [pc, #244]	@ (8003508 <createTrajectory+0x230>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	ee07 3a90 	vmov	s15, r3
 8003418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800341c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003420:	4b38      	ldr	r3, [pc, #224]	@ (8003504 <createTrajectory+0x22c>)
 8003422:	edd3 7a00 	vldr	s15, [r3]
 8003426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800342a:	4b3c      	ldr	r3, [pc, #240]	@ (800351c <createTrajectory+0x244>)
 800342c:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 8003430:	4b35      	ldr	r3, [pc, #212]	@ (8003508 <createTrajectory+0x230>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	ee07 3a90 	vmov	s15, r3
 8003438:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800343c:	4b34      	ldr	r3, [pc, #208]	@ (8003510 <createTrajectory+0x238>)
 800343e:	edd3 7a00 	vldr	s15, [r3]
 8003442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003446:	4b36      	ldr	r3, [pc, #216]	@ (8003520 <createTrajectory+0x248>)
 8003448:	edc3 7a00 	vstr	s15, [r3]
 800344c:	e2fd      	b.n	8003a4a <createTrajectory+0x772>
		}
		else if((t_acc <= t) && (t < t_acc+t_const)){ //Constant Velocity Segment
 800344e:	4b2c      	ldr	r3, [pc, #176]	@ (8003500 <createTrajectory+0x228>)
 8003450:	ed93 7a00 	vldr	s14, [r3]
 8003454:	4b29      	ldr	r3, [pc, #164]	@ (80034fc <createTrajectory+0x224>)
 8003456:	edd3 7a00 	vldr	s15, [r3]
 800345a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800345e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003462:	d865      	bhi.n	8003530 <createTrajectory+0x258>
 8003464:	4b26      	ldr	r3, [pc, #152]	@ (8003500 <createTrajectory+0x228>)
 8003466:	ed93 7a00 	vldr	s14, [r3]
 800346a:	4b2e      	ldr	r3, [pc, #184]	@ (8003524 <createTrajectory+0x24c>)
 800346c:	edd3 7a00 	vldr	s15, [r3]
 8003470:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003474:	4b21      	ldr	r3, [pc, #132]	@ (80034fc <createTrajectory+0x224>)
 8003476:	edd3 7a00 	vldr	s15, [r3]
 800347a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800347e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003482:	dd55      	ble.n	8003530 <createTrajectory+0x258>
			ref_p = q_i + q_acc + q_d_max*(t-t_acc)*dir;
 8003484:	4b21      	ldr	r3, [pc, #132]	@ (800350c <createTrajectory+0x234>)
 8003486:	ed93 7a00 	vldr	s14, [r3]
 800348a:	4b27      	ldr	r3, [pc, #156]	@ (8003528 <createTrajectory+0x250>)
 800348c:	edd3 7a00 	vldr	s15, [r3]
 8003490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003494:	4b19      	ldr	r3, [pc, #100]	@ (80034fc <createTrajectory+0x224>)
 8003496:	edd3 6a00 	vldr	s13, [r3]
 800349a:	4b19      	ldr	r3, [pc, #100]	@ (8003500 <createTrajectory+0x228>)
 800349c:	edd3 7a00 	vldr	s15, [r3]
 80034a0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80034a4:	4b21      	ldr	r3, [pc, #132]	@ (800352c <createTrajectory+0x254>)
 80034a6:	edd3 7a00 	vldr	s15, [r3]
 80034aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034ae:	4b16      	ldr	r3, [pc, #88]	@ (8003508 <createTrajectory+0x230>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c2:	4b15      	ldr	r3, [pc, #84]	@ (8003518 <createTrajectory+0x240>)
 80034c4:	edc3 7a00 	vstr	s15, [r3]
			ref_v = q_d_max*dir;
 80034c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003508 <createTrajectory+0x230>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	ee07 3a90 	vmov	s15, r3
 80034d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034d4:	4b15      	ldr	r3, [pc, #84]	@ (800352c <createTrajectory+0x254>)
 80034d6:	edd3 7a00 	vldr	s15, [r3]
 80034da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034de:	4b0f      	ldr	r3, [pc, #60]	@ (800351c <createTrajectory+0x244>)
 80034e0:	edc3 7a00 	vstr	s15, [r3]
			ref_a = 0;
 80034e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003520 <createTrajectory+0x248>)
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e2ad      	b.n	8003a4a <createTrajectory+0x772>
 80034ee:	bf00      	nop
 80034f0:	20000210 	.word	0x20000210
 80034f4:	20000bb0 	.word	0x20000bb0
 80034f8:	49742400 	.word	0x49742400
 80034fc:	20000bb8 	.word	0x20000bb8
 8003500:	20000b98 	.word	0x20000b98
 8003504:	20000b78 	.word	0x20000b78
 8003508:	20000214 	.word	0x20000214
 800350c:	20000b80 	.word	0x20000b80
 8003510:	2000020c 	.word	0x2000020c
 8003514:	3fe00000 	.word	0x3fe00000
 8003518:	20000b88 	.word	0x20000b88
 800351c:	20000b8c 	.word	0x20000b8c
 8003520:	20000b90 	.word	0x20000b90
 8003524:	20000ba0 	.word	0x20000ba0
 8003528:	20000b9c 	.word	0x20000b9c
 800352c:	20000208 	.word	0x20000208
		}
		else if((t_acc+t_const <= t) && (t < 2*t_acc+t_const)){ //Deceleration Segment
 8003530:	4b76      	ldr	r3, [pc, #472]	@ (800370c <createTrajectory+0x434>)
 8003532:	ed93 7a00 	vldr	s14, [r3]
 8003536:	4b76      	ldr	r3, [pc, #472]	@ (8003710 <createTrajectory+0x438>)
 8003538:	edd3 7a00 	vldr	s15, [r3]
 800353c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003540:	4b74      	ldr	r3, [pc, #464]	@ (8003714 <createTrajectory+0x43c>)
 8003542:	edd3 7a00 	vldr	s15, [r3]
 8003546:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800354a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354e:	f200 80d8 	bhi.w	8003702 <createTrajectory+0x42a>
 8003552:	4b6e      	ldr	r3, [pc, #440]	@ (800370c <createTrajectory+0x434>)
 8003554:	edd3 7a00 	vldr	s15, [r3]
 8003558:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800355c:	4b6c      	ldr	r3, [pc, #432]	@ (8003710 <createTrajectory+0x438>)
 800355e:	edd3 7a00 	vldr	s15, [r3]
 8003562:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003566:	4b6b      	ldr	r3, [pc, #428]	@ (8003714 <createTrajectory+0x43c>)
 8003568:	edd3 7a00 	vldr	s15, [r3]
 800356c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003574:	f340 80c5 	ble.w	8003702 <createTrajectory+0x42a>
			ref_p = q_i + q_const + q_d_max*(t-t_acc-t_const)*dir-0.5*q_2d_max*(t-t_acc-t_const)*(t-t_acc-t_const)*dir;
 8003578:	4b67      	ldr	r3, [pc, #412]	@ (8003718 <createTrajectory+0x440>)
 800357a:	ed93 7a00 	vldr	s14, [r3]
 800357e:	4b67      	ldr	r3, [pc, #412]	@ (800371c <createTrajectory+0x444>)
 8003580:	edd3 7a00 	vldr	s15, [r3]
 8003584:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003588:	4b62      	ldr	r3, [pc, #392]	@ (8003714 <createTrajectory+0x43c>)
 800358a:	edd3 6a00 	vldr	s13, [r3]
 800358e:	4b5f      	ldr	r3, [pc, #380]	@ (800370c <createTrajectory+0x434>)
 8003590:	edd3 7a00 	vldr	s15, [r3]
 8003594:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003598:	4b5d      	ldr	r3, [pc, #372]	@ (8003710 <createTrajectory+0x438>)
 800359a:	edd3 7a00 	vldr	s15, [r3]
 800359e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80035a2:	4b5f      	ldr	r3, [pc, #380]	@ (8003720 <createTrajectory+0x448>)
 80035a4:	edd3 7a00 	vldr	s15, [r3]
 80035a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035ac:	4b5d      	ldr	r3, [pc, #372]	@ (8003724 <createTrajectory+0x44c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	ee07 3a90 	vmov	s15, r3
 80035b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035c0:	ee17 0a90 	vmov	r0, s15
 80035c4:	f7fc ff8c 	bl	80004e0 <__aeabi_f2d>
 80035c8:	4604      	mov	r4, r0
 80035ca:	460d      	mov	r5, r1
 80035cc:	4b56      	ldr	r3, [pc, #344]	@ (8003728 <createTrajectory+0x450>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fc ff85 	bl	80004e0 <__aeabi_f2d>
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	4b54      	ldr	r3, [pc, #336]	@ (800372c <createTrajectory+0x454>)
 80035dc:	f7fc ffd8 	bl	8000590 <__aeabi_dmul>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4690      	mov	r8, r2
 80035e6:	4699      	mov	r9, r3
 80035e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003714 <createTrajectory+0x43c>)
 80035ea:	ed93 7a00 	vldr	s14, [r3]
 80035ee:	4b47      	ldr	r3, [pc, #284]	@ (800370c <createTrajectory+0x434>)
 80035f0:	edd3 7a00 	vldr	s15, [r3]
 80035f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035f8:	4b45      	ldr	r3, [pc, #276]	@ (8003710 <createTrajectory+0x438>)
 80035fa:	edd3 7a00 	vldr	s15, [r3]
 80035fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003602:	ee17 0a90 	vmov	r0, s15
 8003606:	f7fc ff6b 	bl	80004e0 <__aeabi_f2d>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4640      	mov	r0, r8
 8003610:	4649      	mov	r1, r9
 8003612:	f7fc ffbd 	bl	8000590 <__aeabi_dmul>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4690      	mov	r8, r2
 800361c:	4699      	mov	r9, r3
 800361e:	4b3d      	ldr	r3, [pc, #244]	@ (8003714 <createTrajectory+0x43c>)
 8003620:	ed93 7a00 	vldr	s14, [r3]
 8003624:	4b39      	ldr	r3, [pc, #228]	@ (800370c <createTrajectory+0x434>)
 8003626:	edd3 7a00 	vldr	s15, [r3]
 800362a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800362e:	4b38      	ldr	r3, [pc, #224]	@ (8003710 <createTrajectory+0x438>)
 8003630:	edd3 7a00 	vldr	s15, [r3]
 8003634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003638:	ee17 0a90 	vmov	r0, s15
 800363c:	f7fc ff50 	bl	80004e0 <__aeabi_f2d>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4640      	mov	r0, r8
 8003646:	4649      	mov	r1, r9
 8003648:	f7fc ffa2 	bl	8000590 <__aeabi_dmul>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4690      	mov	r8, r2
 8003652:	4699      	mov	r9, r3
 8003654:	4b33      	ldr	r3, [pc, #204]	@ (8003724 <createTrajectory+0x44c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7fc ff2f 	bl	80004bc <__aeabi_i2d>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4640      	mov	r0, r8
 8003664:	4649      	mov	r1, r9
 8003666:	f7fc ff93 	bl	8000590 <__aeabi_dmul>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4620      	mov	r0, r4
 8003670:	4629      	mov	r1, r5
 8003672:	f7fc fdd5 	bl	8000220 <__aeabi_dsub>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4610      	mov	r0, r2
 800367c:	4619      	mov	r1, r3
 800367e:	f7fd fa57 	bl	8000b30 <__aeabi_d2f>
 8003682:	4603      	mov	r3, r0
 8003684:	4a2a      	ldr	r2, [pc, #168]	@ (8003730 <createTrajectory+0x458>)
 8003686:	6013      	str	r3, [r2, #0]
			ref_v = -q_2d_max*(t-t_acc-t_const)*dir + q_d_max*dir;
 8003688:	4b27      	ldr	r3, [pc, #156]	@ (8003728 <createTrajectory+0x450>)
 800368a:	edd3 7a00 	vldr	s15, [r3]
 800368e:	eeb1 7a67 	vneg.f32	s14, s15
 8003692:	4b20      	ldr	r3, [pc, #128]	@ (8003714 <createTrajectory+0x43c>)
 8003694:	edd3 6a00 	vldr	s13, [r3]
 8003698:	4b1c      	ldr	r3, [pc, #112]	@ (800370c <createTrajectory+0x434>)
 800369a:	edd3 7a00 	vldr	s15, [r3]
 800369e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80036a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003710 <createTrajectory+0x438>)
 80036a4:	edd3 7a00 	vldr	s15, [r3]
 80036a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80036ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003724 <createTrajectory+0x44c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	ee07 3a90 	vmov	s15, r3
 80036b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036c0:	4b18      	ldr	r3, [pc, #96]	@ (8003724 <createTrajectory+0x44c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	ee07 3a90 	vmov	s15, r3
 80036c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80036cc:	4b14      	ldr	r3, [pc, #80]	@ (8003720 <createTrajectory+0x448>)
 80036ce:	edd3 7a00 	vldr	s15, [r3]
 80036d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036da:	4b16      	ldr	r3, [pc, #88]	@ (8003734 <createTrajectory+0x45c>)
 80036dc:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 80036e0:	4b11      	ldr	r3, [pc, #68]	@ (8003728 <createTrajectory+0x450>)
 80036e2:	edd3 7a00 	vldr	s15, [r3]
 80036e6:	eeb1 7a67 	vneg.f32	s14, s15
 80036ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003724 <createTrajectory+0x44c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	ee07 3a90 	vmov	s15, r3
 80036f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003738 <createTrajectory+0x460>)
 80036fc:	edc3 7a00 	vstr	s15, [r3]
 8003700:	e1a3      	b.n	8003a4a <createTrajectory+0x772>
		}
		else{
			calmode = 3;
 8003702:	4b0e      	ldr	r3, [pc, #56]	@ (800373c <createTrajectory+0x464>)
 8003704:	2203      	movs	r2, #3
 8003706:	701a      	strb	r2, [r3, #0]
	else if(calmode == 3){ //stop
		ref_p = q_f;
		ref_v = 0;
		ref_a = 0;
	}
}
 8003708:	e19f      	b.n	8003a4a <createTrajectory+0x772>
 800370a:	bf00      	nop
 800370c:	20000b98 	.word	0x20000b98
 8003710:	20000ba0 	.word	0x20000ba0
 8003714:	20000bb8 	.word	0x20000bb8
 8003718:	20000b80 	.word	0x20000b80
 800371c:	20000ba4 	.word	0x20000ba4
 8003720:	20000208 	.word	0x20000208
 8003724:	20000214 	.word	0x20000214
 8003728:	2000020c 	.word	0x2000020c
 800372c:	3fe00000 	.word	0x3fe00000
 8003730:	20000b88 	.word	0x20000b88
 8003734:	20000b8c 	.word	0x20000b8c
 8003738:	20000b90 	.word	0x20000b90
 800373c:	20000210 	.word	0x20000210
	else if(calmode == 2){
 8003740:	4bc3      	ldr	r3, [pc, #780]	@ (8003a50 <createTrajectory+0x778>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b02      	cmp	r3, #2
 8003746:	f040 816f 	bne.w	8003a28 <createTrajectory+0x750>
		t = (float)(micros()-T_start)/1000000; //sec
 800374a:	f7ff fa2d 	bl	8002ba8 <micros>
 800374e:	4bc1      	ldr	r3, [pc, #772]	@ (8003a54 <createTrajectory+0x77c>)
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	1a84      	subs	r4, r0, r2
 8003756:	eb61 0503 	sbc.w	r5, r1, r3
 800375a:	4620      	mov	r0, r4
 800375c:	4629      	mov	r1, r5
 800375e:	f7fd faff 	bl	8000d60 <__aeabi_ul2f>
 8003762:	ee06 0a90 	vmov	s13, r0
 8003766:	ed9f 7abc 	vldr	s14, [pc, #752]	@ 8003a58 <createTrajectory+0x780>
 800376a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800376e:	4bbb      	ldr	r3, [pc, #748]	@ (8003a5c <createTrajectory+0x784>)
 8003770:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 8003774:	4bb9      	ldr	r3, [pc, #740]	@ (8003a5c <createTrajectory+0x784>)
 8003776:	edd3 7a00 	vldr	s15, [r3]
 800377a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800377e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003782:	f2c0 8094 	blt.w	80038ae <createTrajectory+0x5d6>
 8003786:	4bb5      	ldr	r3, [pc, #724]	@ (8003a5c <createTrajectory+0x784>)
 8003788:	ed93 7a00 	vldr	s14, [r3]
 800378c:	4bb4      	ldr	r3, [pc, #720]	@ (8003a60 <createTrajectory+0x788>)
 800378e:	edd3 7a00 	vldr	s15, [r3]
 8003792:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379a:	f140 8088 	bpl.w	80038ae <createTrajectory+0x5d6>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 800379e:	4bb1      	ldr	r3, [pc, #708]	@ (8003a64 <createTrajectory+0x78c>)
 80037a0:	ed93 7a00 	vldr	s14, [r3]
 80037a4:	4bad      	ldr	r3, [pc, #692]	@ (8003a5c <createTrajectory+0x784>)
 80037a6:	edd3 7a00 	vldr	s15, [r3]
 80037aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037ae:	4bae      	ldr	r3, [pc, #696]	@ (8003a68 <createTrajectory+0x790>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	ee07 3a90 	vmov	s15, r3
 80037b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037be:	4bab      	ldr	r3, [pc, #684]	@ (8003a6c <createTrajectory+0x794>)
 80037c0:	edd3 7a00 	vldr	s15, [r3]
 80037c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037c8:	ee17 0a90 	vmov	r0, s15
 80037cc:	f7fc fe88 	bl	80004e0 <__aeabi_f2d>
 80037d0:	4604      	mov	r4, r0
 80037d2:	460d      	mov	r5, r1
 80037d4:	4ba6      	ldr	r3, [pc, #664]	@ (8003a70 <createTrajectory+0x798>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fc fe81 	bl	80004e0 <__aeabi_f2d>
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	4ba4      	ldr	r3, [pc, #656]	@ (8003a74 <createTrajectory+0x79c>)
 80037e4:	f7fc fed4 	bl	8000590 <__aeabi_dmul>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4690      	mov	r8, r2
 80037ee:	4699      	mov	r9, r3
 80037f0:	4b9a      	ldr	r3, [pc, #616]	@ (8003a5c <createTrajectory+0x784>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fc fe73 	bl	80004e0 <__aeabi_f2d>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4640      	mov	r0, r8
 8003800:	4649      	mov	r1, r9
 8003802:	f7fc fec5 	bl	8000590 <__aeabi_dmul>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4690      	mov	r8, r2
 800380c:	4699      	mov	r9, r3
 800380e:	4b93      	ldr	r3, [pc, #588]	@ (8003a5c <createTrajectory+0x784>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f7fc fe64 	bl	80004e0 <__aeabi_f2d>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4640      	mov	r0, r8
 800381e:	4649      	mov	r1, r9
 8003820:	f7fc feb6 	bl	8000590 <__aeabi_dmul>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4690      	mov	r8, r2
 800382a:	4699      	mov	r9, r3
 800382c:	4b8e      	ldr	r3, [pc, #568]	@ (8003a68 <createTrajectory+0x790>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7fc fe43 	bl	80004bc <__aeabi_i2d>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4640      	mov	r0, r8
 800383c:	4649      	mov	r1, r9
 800383e:	f7fc fea7 	bl	8000590 <__aeabi_dmul>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4620      	mov	r0, r4
 8003848:	4629      	mov	r1, r5
 800384a:	f7fc fceb 	bl	8000224 <__adddf3>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4610      	mov	r0, r2
 8003854:	4619      	mov	r1, r3
 8003856:	f7fd f96b 	bl	8000b30 <__aeabi_d2f>
 800385a:	4603      	mov	r3, r0
 800385c:	4a86      	ldr	r2, [pc, #536]	@ (8003a78 <createTrajectory+0x7a0>)
 800385e:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 8003860:	4b83      	ldr	r3, [pc, #524]	@ (8003a70 <createTrajectory+0x798>)
 8003862:	ed93 7a00 	vldr	s14, [r3]
 8003866:	4b7d      	ldr	r3, [pc, #500]	@ (8003a5c <createTrajectory+0x784>)
 8003868:	edd3 7a00 	vldr	s15, [r3]
 800386c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003870:	4b7d      	ldr	r3, [pc, #500]	@ (8003a68 <createTrajectory+0x790>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	ee07 3a90 	vmov	s15, r3
 8003878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800387c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003880:	4b78      	ldr	r3, [pc, #480]	@ (8003a64 <createTrajectory+0x78c>)
 8003882:	edd3 7a00 	vldr	s15, [r3]
 8003886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800388a:	4b7c      	ldr	r3, [pc, #496]	@ (8003a7c <createTrajectory+0x7a4>)
 800388c:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 8003890:	4b75      	ldr	r3, [pc, #468]	@ (8003a68 <createTrajectory+0x790>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	ee07 3a90 	vmov	s15, r3
 8003898:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800389c:	4b74      	ldr	r3, [pc, #464]	@ (8003a70 <createTrajectory+0x798>)
 800389e:	edd3 7a00 	vldr	s15, [r3]
 80038a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a6:	4b76      	ldr	r3, [pc, #472]	@ (8003a80 <createTrajectory+0x7a8>)
 80038a8:	edc3 7a00 	vstr	s15, [r3]
 80038ac:	e0cd      	b.n	8003a4a <createTrajectory+0x772>
		else if((t_acc <= t) && (t < t_acc*2)){
 80038ae:	4b6c      	ldr	r3, [pc, #432]	@ (8003a60 <createTrajectory+0x788>)
 80038b0:	ed93 7a00 	vldr	s14, [r3]
 80038b4:	4b69      	ldr	r3, [pc, #420]	@ (8003a5c <createTrajectory+0x784>)
 80038b6:	edd3 7a00 	vldr	s15, [r3]
 80038ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c2:	f200 80ad 	bhi.w	8003a20 <createTrajectory+0x748>
 80038c6:	4b66      	ldr	r3, [pc, #408]	@ (8003a60 <createTrajectory+0x788>)
 80038c8:	edd3 7a00 	vldr	s15, [r3]
 80038cc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80038d0:	4b62      	ldr	r3, [pc, #392]	@ (8003a5c <createTrajectory+0x784>)
 80038d2:	edd3 7a00 	vldr	s15, [r3]
 80038d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038de:	f340 809f 	ble.w	8003a20 <createTrajectory+0x748>
			ref_p = q_i + q_acc + q_d_acc*(t-t_acc) - 0.5*q_2d_max*(t-t_acc)*(t-t_acc)*dir;
 80038e2:	4b62      	ldr	r3, [pc, #392]	@ (8003a6c <createTrajectory+0x794>)
 80038e4:	ed93 7a00 	vldr	s14, [r3]
 80038e8:	4b66      	ldr	r3, [pc, #408]	@ (8003a84 <createTrajectory+0x7ac>)
 80038ea:	edd3 7a00 	vldr	s15, [r3]
 80038ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038f2:	4b5a      	ldr	r3, [pc, #360]	@ (8003a5c <createTrajectory+0x784>)
 80038f4:	edd3 6a00 	vldr	s13, [r3]
 80038f8:	4b59      	ldr	r3, [pc, #356]	@ (8003a60 <createTrajectory+0x788>)
 80038fa:	edd3 7a00 	vldr	s15, [r3]
 80038fe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003902:	4b61      	ldr	r3, [pc, #388]	@ (8003a88 <createTrajectory+0x7b0>)
 8003904:	edd3 7a00 	vldr	s15, [r3]
 8003908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800390c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003910:	ee17 0a90 	vmov	r0, s15
 8003914:	f7fc fde4 	bl	80004e0 <__aeabi_f2d>
 8003918:	4604      	mov	r4, r0
 800391a:	460d      	mov	r5, r1
 800391c:	4b54      	ldr	r3, [pc, #336]	@ (8003a70 <createTrajectory+0x798>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7fc fddd 	bl	80004e0 <__aeabi_f2d>
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	4b52      	ldr	r3, [pc, #328]	@ (8003a74 <createTrajectory+0x79c>)
 800392c:	f7fc fe30 	bl	8000590 <__aeabi_dmul>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4690      	mov	r8, r2
 8003936:	4699      	mov	r9, r3
 8003938:	4b48      	ldr	r3, [pc, #288]	@ (8003a5c <createTrajectory+0x784>)
 800393a:	ed93 7a00 	vldr	s14, [r3]
 800393e:	4b48      	ldr	r3, [pc, #288]	@ (8003a60 <createTrajectory+0x788>)
 8003940:	edd3 7a00 	vldr	s15, [r3]
 8003944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003948:	ee17 0a90 	vmov	r0, s15
 800394c:	f7fc fdc8 	bl	80004e0 <__aeabi_f2d>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4640      	mov	r0, r8
 8003956:	4649      	mov	r1, r9
 8003958:	f7fc fe1a 	bl	8000590 <__aeabi_dmul>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4690      	mov	r8, r2
 8003962:	4699      	mov	r9, r3
 8003964:	4b3d      	ldr	r3, [pc, #244]	@ (8003a5c <createTrajectory+0x784>)
 8003966:	ed93 7a00 	vldr	s14, [r3]
 800396a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a60 <createTrajectory+0x788>)
 800396c:	edd3 7a00 	vldr	s15, [r3]
 8003970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003974:	ee17 0a90 	vmov	r0, s15
 8003978:	f7fc fdb2 	bl	80004e0 <__aeabi_f2d>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4640      	mov	r0, r8
 8003982:	4649      	mov	r1, r9
 8003984:	f7fc fe04 	bl	8000590 <__aeabi_dmul>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4690      	mov	r8, r2
 800398e:	4699      	mov	r9, r3
 8003990:	4b35      	ldr	r3, [pc, #212]	@ (8003a68 <createTrajectory+0x790>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f7fc fd91 	bl	80004bc <__aeabi_i2d>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4640      	mov	r0, r8
 80039a0:	4649      	mov	r1, r9
 80039a2:	f7fc fdf5 	bl	8000590 <__aeabi_dmul>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4620      	mov	r0, r4
 80039ac:	4629      	mov	r1, r5
 80039ae:	f7fc fc37 	bl	8000220 <__aeabi_dsub>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4610      	mov	r0, r2
 80039b8:	4619      	mov	r1, r3
 80039ba:	f7fd f8b9 	bl	8000b30 <__aeabi_d2f>
 80039be:	4603      	mov	r3, r0
 80039c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003a78 <createTrajectory+0x7a0>)
 80039c2:	6013      	str	r3, [r2, #0]
			ref_v = q_d_acc - q_2d_max*(t-t_acc)*dir;
 80039c4:	4b30      	ldr	r3, [pc, #192]	@ (8003a88 <createTrajectory+0x7b0>)
 80039c6:	ed93 7a00 	vldr	s14, [r3]
 80039ca:	4b24      	ldr	r3, [pc, #144]	@ (8003a5c <createTrajectory+0x784>)
 80039cc:	edd3 6a00 	vldr	s13, [r3]
 80039d0:	4b23      	ldr	r3, [pc, #140]	@ (8003a60 <createTrajectory+0x788>)
 80039d2:	edd3 7a00 	vldr	s15, [r3]
 80039d6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80039da:	4b25      	ldr	r3, [pc, #148]	@ (8003a70 <createTrajectory+0x798>)
 80039dc:	edd3 7a00 	vldr	s15, [r3]
 80039e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039e4:	4b20      	ldr	r3, [pc, #128]	@ (8003a68 <createTrajectory+0x790>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	ee07 3a90 	vmov	s15, r3
 80039ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039f8:	4b20      	ldr	r3, [pc, #128]	@ (8003a7c <createTrajectory+0x7a4>)
 80039fa:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 80039fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003a70 <createTrajectory+0x798>)
 8003a00:	edd3 7a00 	vldr	s15, [r3]
 8003a04:	eeb1 7a67 	vneg.f32	s14, s15
 8003a08:	4b17      	ldr	r3, [pc, #92]	@ (8003a68 <createTrajectory+0x790>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	ee07 3a90 	vmov	s15, r3
 8003a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a18:	4b19      	ldr	r3, [pc, #100]	@ (8003a80 <createTrajectory+0x7a8>)
 8003a1a:	edc3 7a00 	vstr	s15, [r3]
 8003a1e:	e014      	b.n	8003a4a <createTrajectory+0x772>
			calmode = 3;
 8003a20:	4b0b      	ldr	r3, [pc, #44]	@ (8003a50 <createTrajectory+0x778>)
 8003a22:	2203      	movs	r2, #3
 8003a24:	701a      	strb	r2, [r3, #0]
}
 8003a26:	e010      	b.n	8003a4a <createTrajectory+0x772>
	else if(calmode == 3){ //stop
 8003a28:	4b09      	ldr	r3, [pc, #36]	@ (8003a50 <createTrajectory+0x778>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d10c      	bne.n	8003a4a <createTrajectory+0x772>
		ref_p = q_f;
 8003a30:	4b16      	ldr	r3, [pc, #88]	@ (8003a8c <createTrajectory+0x7b4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a10      	ldr	r2, [pc, #64]	@ (8003a78 <createTrajectory+0x7a0>)
 8003a36:	6013      	str	r3, [r2, #0]
		ref_v = 0;
 8003a38:	4b10      	ldr	r3, [pc, #64]	@ (8003a7c <createTrajectory+0x7a4>)
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
		ref_a = 0;
 8003a40:	4b0f      	ldr	r3, [pc, #60]	@ (8003a80 <createTrajectory+0x7a8>)
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
}
 8003a48:	e7ff      	b.n	8003a4a <createTrajectory+0x772>
 8003a4a:	bf00      	nop
 8003a4c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a50:	20000210 	.word	0x20000210
 8003a54:	20000bb0 	.word	0x20000bb0
 8003a58:	49742400 	.word	0x49742400
 8003a5c:	20000bb8 	.word	0x20000bb8
 8003a60:	20000b98 	.word	0x20000b98
 8003a64:	20000b78 	.word	0x20000b78
 8003a68:	20000214 	.word	0x20000214
 8003a6c:	20000b80 	.word	0x20000b80
 8003a70:	2000020c 	.word	0x2000020c
 8003a74:	3fe00000 	.word	0x3fe00000
 8003a78:	20000b88 	.word	0x20000b88
 8003a7c:	20000b8c 	.word	0x20000b8c
 8003a80:	20000b90 	.word	0x20000b90
 8003a84:	20000b9c 	.word	0x20000b9c
 8003a88:	20000ba8 	.word	0x20000ba8
 8003a8c:	20000b7c 	.word	0x20000b7c

08003a90 <DriveMotor>:

//--------------------------Drive Motor----------------//

void DriveMotor(){
 8003a90:	b598      	push	{r3, r4, r7, lr}
 8003a92:	af00      	add	r7, sp, #0
//		S_down_savestate = S_down;
//		mode_savestate = mode;
//		timestamp_savestate = micros() + 50000;
//	}
	//PWM Motor
	duty_cycle = (fabs(Vin)*100)/24;
 8003a94:	4b26      	ldr	r3, [pc, #152]	@ (8003b30 <DriveMotor+0xa0>)
 8003a96:	edd3 7a00 	vldr	s15, [r3]
 8003a9a:	eef0 7ae7 	vabs.f32	s15, s15
 8003a9e:	ee17 0a90 	vmov	r0, s15
 8003aa2:	f7fc fd1d 	bl	80004e0 <__aeabi_f2d>
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	4b22      	ldr	r3, [pc, #136]	@ (8003b34 <DriveMotor+0xa4>)
 8003aac:	f7fc fd70 	bl	8000590 <__aeabi_dmul>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	4b1e      	ldr	r3, [pc, #120]	@ (8003b38 <DriveMotor+0xa8>)
 8003abe:	f7fc fe91 	bl	80007e4 <__aeabi_ddiv>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f7fd f831 	bl	8000b30 <__aeabi_d2f>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8003b3c <DriveMotor+0xac>)
 8003ad2:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycle*9.99);
 8003ad4:	4b19      	ldr	r3, [pc, #100]	@ (8003b3c <DriveMotor+0xac>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fc fd01 	bl	80004e0 <__aeabi_f2d>
 8003ade:	a312      	add	r3, pc, #72	@ (adr r3, 8003b28 <DriveMotor+0x98>)
 8003ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae4:	f7fc fd54 	bl	8000590 <__aeabi_dmul>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4914      	ldr	r1, [pc, #80]	@ (8003b40 <DriveMotor+0xb0>)
 8003aee:	680c      	ldr	r4, [r1, #0]
 8003af0:	4610      	mov	r0, r2
 8003af2:	4619      	mov	r1, r3
 8003af4:	f7fc fffc 	bl	8000af0 <__aeabi_d2uiz>
 8003af8:	4603      	mov	r3, r0
 8003afa:	6363      	str	r3, [r4, #52]	@ 0x34

	//Control Motor Direction
	if(Vin < 0){
 8003afc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b30 <DriveMotor+0xa0>)
 8003afe:	edd3 7a00 	vldr	s15, [r3]
 8003b02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0a:	d505      	bpl.n	8003b18 <DriveMotor+0x88>
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	2101      	movs	r1, #1
 8003b10:	480c      	ldr	r0, [pc, #48]	@ (8003b44 <DriveMotor+0xb4>)
 8003b12:	f003 ff01 	bl	8007918 <HAL_GPIO_WritePin>
	else{
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
	}
//	Vin_old = Vin;
}
 8003b16:	e004      	b.n	8003b22 <DriveMotor+0x92>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	4809      	ldr	r0, [pc, #36]	@ (8003b44 <DriveMotor+0xb4>)
 8003b1e:	f003 fefb 	bl	8007918 <HAL_GPIO_WritePin>
}
 8003b22:	bf00      	nop
 8003b24:	bd98      	pop	{r3, r4, r7, pc}
 8003b26:	bf00      	nop
 8003b28:	47ae147b 	.word	0x47ae147b
 8003b2c:	4023fae1 	.word	0x4023fae1
 8003b30:	20000b70 	.word	0x20000b70
 8003b34:	40590000 	.word	0x40590000
 8003b38:	40380000 	.word	0x40380000
 8003b3c:	20000204 	.word	0x20000204
 8003b40:	200004b0 	.word	0x200004b0
 8003b44:	48000400 	.word	0x48000400

08003b48 <SoftwareLimit>:

void SoftwareLimit(){
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
	if(S_top == 1 && Vin >= -2){
 8003b4c:	4b26      	ldr	r3, [pc, #152]	@ (8003be8 <SoftwareLimit+0xa0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d10e      	bne.n	8003b72 <SoftwareLimit+0x2a>
 8003b54:	4b25      	ldr	r3, [pc, #148]	@ (8003bec <SoftwareLimit+0xa4>)
 8003b56:	edd3 7a00 	vldr	s15, [r3]
 8003b5a:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b66:	db04      	blt.n	8003b72 <SoftwareLimit+0x2a>
		Vin = 0;
 8003b68:	4b20      	ldr	r3, [pc, #128]	@ (8003bec <SoftwareLimit+0xa4>)
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	e010      	b.n	8003b94 <SoftwareLimit+0x4c>
	}
	else if(S_top == 1 && Vin < -2){
 8003b72:	4b1d      	ldr	r3, [pc, #116]	@ (8003be8 <SoftwareLimit+0xa0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d10c      	bne.n	8003b94 <SoftwareLimit+0x4c>
 8003b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bec <SoftwareLimit+0xa4>)
 8003b7c:	edd3 7a00 	vldr	s15, [r3]
 8003b80:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003b84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b8c:	d502      	bpl.n	8003b94 <SoftwareLimit+0x4c>
		S_top = 0;
 8003b8e:	4b16      	ldr	r3, [pc, #88]	@ (8003be8 <SoftwareLimit+0xa0>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
	}

	if(S_down == 1 && Vin <= 2){
 8003b94:	4b16      	ldr	r3, [pc, #88]	@ (8003bf0 <SoftwareLimit+0xa8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d10e      	bne.n	8003bba <SoftwareLimit+0x72>
 8003b9c:	4b13      	ldr	r3, [pc, #76]	@ (8003bec <SoftwareLimit+0xa4>)
 8003b9e:	edd3 7a00 	vldr	s15, [r3]
 8003ba2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bae:	d804      	bhi.n	8003bba <SoftwareLimit+0x72>
		Vin = 0;
 8003bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8003bec <SoftwareLimit+0xa4>)
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
	}
	else if(S_down == 1 && Vin > 2){
		S_down = 0;
	}

}
 8003bb8:	e011      	b.n	8003bde <SoftwareLimit+0x96>
	else if(S_down == 1 && Vin > 2){
 8003bba:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf0 <SoftwareLimit+0xa8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d10d      	bne.n	8003bde <SoftwareLimit+0x96>
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bec <SoftwareLimit+0xa4>)
 8003bc4:	edd3 7a00 	vldr	s15, [r3]
 8003bc8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd4:	dc00      	bgt.n	8003bd8 <SoftwareLimit+0x90>
}
 8003bd6:	e002      	b.n	8003bde <SoftwareLimit+0x96>
		S_down = 0;
 8003bd8:	4b05      	ldr	r3, [pc, #20]	@ (8003bf0 <SoftwareLimit+0xa8>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
}
 8003bde:	bf00      	nop
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	20000c3c 	.word	0x20000c3c
 8003bec:	20000b70 	.word	0x20000b70
 8003bf0:	20000c40 	.word	0x20000c40
 8003bf4:	00000000 	.word	0x00000000

08003bf8 <JoystickInput>:


//------------------------------------Joy---------------------------------------//

void JoystickInput(){
 8003bf8:	b5b0      	push	{r4, r5, r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
//		Vin = 0;
//	}

	//Control x-axis by joy
//	x_position += ((ADCBuffer[0]-2048)*0.005);
	if (ADCBuffer[1]>=2600)
 8003bfc:	4b38      	ldr	r3, [pc, #224]	@ (8003ce0 <JoystickInput+0xe8>)
 8003bfe:	885b      	ldrh	r3, [r3, #2]
 8003c00:	f640 2227 	movw	r2, #2599	@ 0xa27
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d92f      	bls.n	8003c68 <JoystickInput+0x70>
	{
		temp_x = (float)(ADCBuffer[0]);
 8003c08:	4b35      	ldr	r3, [pc, #212]	@ (8003ce0 <JoystickInput+0xe8>)
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	ee07 3a90 	vmov	s15, r3
 8003c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c14:	4b33      	ldr	r3, [pc, #204]	@ (8003ce4 <JoystickInput+0xec>)
 8003c16:	edc3 7a00 	vstr	s15, [r3]
		x_position += (temp_x/4096)*0.05;
 8003c1a:	4b33      	ldr	r3, [pc, #204]	@ (8003ce8 <JoystickInput+0xf0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fc fc5e 	bl	80004e0 <__aeabi_f2d>
 8003c24:	4604      	mov	r4, r0
 8003c26:	460d      	mov	r5, r1
 8003c28:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce4 <JoystickInput+0xec>)
 8003c2a:	edd3 7a00 	vldr	s15, [r3]
 8003c2e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8003cec <JoystickInput+0xf4>
 8003c32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c36:	ee16 0a90 	vmov	r0, s13
 8003c3a:	f7fc fc51 	bl	80004e0 <__aeabi_f2d>
 8003c3e:	a326      	add	r3, pc, #152	@ (adr r3, 8003cd8 <JoystickInput+0xe0>)
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f7fc fca4 	bl	8000590 <__aeabi_dmul>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	4629      	mov	r1, r5
 8003c50:	f7fc fae8 	bl	8000224 <__adddf3>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	f7fc ff68 	bl	8000b30 <__aeabi_d2f>
 8003c60:	4603      	mov	r3, r0
 8003c62:	4a21      	ldr	r2, [pc, #132]	@ (8003ce8 <JoystickInput+0xf0>)
 8003c64:	6013      	str	r3, [r2, #0]
	{

		temp_x = (float)(ADCBuffer[0]);
		x_position -= (temp_x/4096)*0.05;
	}
}
 8003c66:	e033      	b.n	8003cd0 <JoystickInput+0xd8>
	else if (ADCBuffer[1] <= 1800)
 8003c68:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce0 <JoystickInput+0xe8>)
 8003c6a:	885b      	ldrh	r3, [r3, #2]
 8003c6c:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8003c70:	d82e      	bhi.n	8003cd0 <JoystickInput+0xd8>
		temp_x = (float)(ADCBuffer[0]);
 8003c72:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce0 <JoystickInput+0xe8>)
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7e:	4b19      	ldr	r3, [pc, #100]	@ (8003ce4 <JoystickInput+0xec>)
 8003c80:	edc3 7a00 	vstr	s15, [r3]
		x_position -= (temp_x/4096)*0.05;
 8003c84:	4b18      	ldr	r3, [pc, #96]	@ (8003ce8 <JoystickInput+0xf0>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fc fc29 	bl	80004e0 <__aeabi_f2d>
 8003c8e:	4604      	mov	r4, r0
 8003c90:	460d      	mov	r5, r1
 8003c92:	4b14      	ldr	r3, [pc, #80]	@ (8003ce4 <JoystickInput+0xec>)
 8003c94:	edd3 7a00 	vldr	s15, [r3]
 8003c98:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003cec <JoystickInput+0xf4>
 8003c9c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003ca0:	ee16 0a90 	vmov	r0, s13
 8003ca4:	f7fc fc1c 	bl	80004e0 <__aeabi_f2d>
 8003ca8:	a30b      	add	r3, pc, #44	@ (adr r3, 8003cd8 <JoystickInput+0xe0>)
 8003caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cae:	f7fc fc6f 	bl	8000590 <__aeabi_dmul>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	4629      	mov	r1, r5
 8003cba:	f7fc fab1 	bl	8000220 <__aeabi_dsub>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	f7fc ff33 	bl	8000b30 <__aeabi_d2f>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4a06      	ldr	r2, [pc, #24]	@ (8003ce8 <JoystickInput+0xf0>)
 8003cce:	6013      	str	r3, [r2, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8003cd4:	f3af 8000 	nop.w
 8003cd8:	9999999a 	.word	0x9999999a
 8003cdc:	3fa99999 	.word	0x3fa99999
 8003ce0:	20000b50 	.word	0x20000b50
 8003ce4:	20000b58 	.word	0x20000b58
 8003ce8:	20000b54 	.word	0x20000b54
 8003cec:	45800000 	.word	0x45800000

08003cf0 <button_up_down_input>:

void button_up_down_input(){
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
	//check button up
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 1){
 8003cf4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003cf8:	4844      	ldr	r0, [pc, #272]	@ (8003e0c <button_up_down_input+0x11c>)
 8003cfa:	f003 fdf5 	bl	80078e8 <HAL_GPIO_ReadPin>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d113      	bne.n	8003d2c <button_up_down_input+0x3c>
		set_manual_point = QEIdata.linearPos + 1; //stem 10 mm
 8003d04:	4b42      	ldr	r3, [pc, #264]	@ (8003e10 <button_up_down_input+0x120>)
 8003d06:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003d0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d12:	4b40      	ldr	r3, [pc, #256]	@ (8003e14 <button_up_down_input+0x124>)
 8003d14:	edc3 7a00 	vstr	s15, [r3]
		check_up = 1;
 8003d18:	4b3f      	ldr	r3, [pc, #252]	@ (8003e18 <button_up_down_input+0x128>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	701a      	strb	r2, [r3, #0]
		B_up = 1;
 8003d1e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e1c <button_up_down_input+0x12c>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	701a      	strb	r2, [r3, #0]
		check_state_B = 1;
 8003d24:	4b3e      	ldr	r3, [pc, #248]	@ (8003e20 <button_up_down_input+0x130>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	e005      	b.n	8003d38 <button_up_down_input+0x48>
	}
	else{
		B_up = 0;
 8003d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e1c <button_up_down_input+0x12c>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	701a      	strb	r2, [r3, #0]
		check_state_B = 2;
 8003d32:	4b3b      	ldr	r3, [pc, #236]	@ (8003e20 <button_up_down_input+0x130>)
 8003d34:	2202      	movs	r2, #2
 8003d36:	601a      	str	r2, [r3, #0]
	}
	if(QEIdata.linearPos < set_manual_point && check_up == 1){
 8003d38:	4b35      	ldr	r3, [pc, #212]	@ (8003e10 <button_up_down_input+0x120>)
 8003d3a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003d3e:	4b35      	ldr	r3, [pc, #212]	@ (8003e14 <button_up_down_input+0x124>)
 8003d40:	edd3 7a00 	vldr	s15, [r3]
 8003d44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d4c:	d50b      	bpl.n	8003d66 <button_up_down_input+0x76>
 8003d4e:	4b32      	ldr	r3, [pc, #200]	@ (8003e18 <button_up_down_input+0x128>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d107      	bne.n	8003d66 <button_up_down_input+0x76>
		//Vin = 4;
		Vin = 4;
 8003d56:	4b33      	ldr	r3, [pc, #204]	@ (8003e24 <button_up_down_input+0x134>)
 8003d58:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8003d5c:	601a      	str	r2, [r3, #0]
		check_state_B = 3;
 8003d5e:	4b30      	ldr	r3, [pc, #192]	@ (8003e20 <button_up_down_input+0x130>)
 8003d60:	2203      	movs	r2, #3
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	e005      	b.n	8003d72 <button_up_down_input+0x82>
	}
	else{
		check_up = 0;
 8003d66:	4b2c      	ldr	r3, [pc, #176]	@ (8003e18 <button_up_down_input+0x128>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]
		check_state_B = 4;
 8003d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8003e20 <button_up_down_input+0x130>)
 8003d6e:	2204      	movs	r2, #4
 8003d70:	601a      	str	r2, [r3, #0]
	}

	//check button down
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == 1){
 8003d72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d76:	4825      	ldr	r0, [pc, #148]	@ (8003e0c <button_up_down_input+0x11c>)
 8003d78:	f003 fdb6 	bl	80078e8 <HAL_GPIO_ReadPin>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d113      	bne.n	8003daa <button_up_down_input+0xba>
		set_manual_point = QEIdata.linearPos - 1;
 8003d82:	4b23      	ldr	r3, [pc, #140]	@ (8003e10 <button_up_down_input+0x120>)
 8003d84:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003d88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d90:	4b20      	ldr	r3, [pc, #128]	@ (8003e14 <button_up_down_input+0x124>)
 8003d92:	edc3 7a00 	vstr	s15, [r3]
		check_down = 1;
 8003d96:	4b24      	ldr	r3, [pc, #144]	@ (8003e28 <button_up_down_input+0x138>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	701a      	strb	r2, [r3, #0]
		B_down = 1;
 8003d9c:	4b23      	ldr	r3, [pc, #140]	@ (8003e2c <button_up_down_input+0x13c>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
		check_state_B = 5;
 8003da2:	4b1f      	ldr	r3, [pc, #124]	@ (8003e20 <button_up_down_input+0x130>)
 8003da4:	2205      	movs	r2, #5
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	e005      	b.n	8003db6 <button_up_down_input+0xc6>
	}
	else{
		B_down = 0;
 8003daa:	4b20      	ldr	r3, [pc, #128]	@ (8003e2c <button_up_down_input+0x13c>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	701a      	strb	r2, [r3, #0]
		check_state_B = 6;
 8003db0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e20 <button_up_down_input+0x130>)
 8003db2:	2206      	movs	r2, #6
 8003db4:	601a      	str	r2, [r3, #0]
	}
	if(QEIdata.linearPos > set_manual_point && check_down == 1){
 8003db6:	4b16      	ldr	r3, [pc, #88]	@ (8003e10 <button_up_down_input+0x120>)
 8003db8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003dbc:	4b15      	ldr	r3, [pc, #84]	@ (8003e14 <button_up_down_input+0x124>)
 8003dbe:	edd3 7a00 	vldr	s15, [r3]
 8003dc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dca:	dd0a      	ble.n	8003de2 <button_up_down_input+0xf2>
 8003dcc:	4b16      	ldr	r3, [pc, #88]	@ (8003e28 <button_up_down_input+0x138>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d106      	bne.n	8003de2 <button_up_down_input+0xf2>
		//Vin = -3;
		Vin = -3;
 8003dd4:	4b13      	ldr	r3, [pc, #76]	@ (8003e24 <button_up_down_input+0x134>)
 8003dd6:	4a16      	ldr	r2, [pc, #88]	@ (8003e30 <button_up_down_input+0x140>)
 8003dd8:	601a      	str	r2, [r3, #0]
		check_state_B = 7;
 8003dda:	4b11      	ldr	r3, [pc, #68]	@ (8003e20 <button_up_down_input+0x130>)
 8003ddc:	2207      	movs	r2, #7
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	e005      	b.n	8003dee <button_up_down_input+0xfe>
	}
	else{
		check_down = 0;
 8003de2:	4b11      	ldr	r3, [pc, #68]	@ (8003e28 <button_up_down_input+0x138>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	701a      	strb	r2, [r3, #0]
		check_state_B = 8;
 8003de8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e20 <button_up_down_input+0x130>)
 8003dea:	2208      	movs	r2, #8
 8003dec:	601a      	str	r2, [r3, #0]
	}

	if(check_up == 0 && check_down == 0){
 8003dee:	4b0a      	ldr	r3, [pc, #40]	@ (8003e18 <button_up_down_input+0x128>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d107      	bne.n	8003e06 <button_up_down_input+0x116>
 8003df6:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <button_up_down_input+0x138>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d103      	bne.n	8003e06 <button_up_down_input+0x116>
		Vin = 0;
 8003dfe:	4b09      	ldr	r3, [pc, #36]	@ (8003e24 <button_up_down_input+0x134>)
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
	}
}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	48000800 	.word	0x48000800
 8003e10:	20000b08 	.word	0x20000b08
 8003e14:	20000b5c 	.word	0x20000b5c
 8003e18:	20000b60 	.word	0x20000b60
 8003e1c:	20000bc0 	.word	0x20000bc0
 8003e20:	20000c4c 	.word	0x20000c4c
 8003e24:	20000b70 	.word	0x20000b70
 8003e28:	20000b61 	.word	0x20000b61
 8003e2c:	20000bc1 	.word	0x20000bc1
 8003e30:	c0400000 	.word	0xc0400000

08003e34 <button_reset_input>:

void button_reset_input(){
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
	//check button reset
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1 || (Home_state_triger == 0 && set_Home_state == 1) || emergency_reset == 1){
 8003e38:	2104      	movs	r1, #4
 8003e3a:	484a      	ldr	r0, [pc, #296]	@ (8003f64 <button_reset_input+0x130>)
 8003e3c:	f003 fd54 	bl	80078e8 <HAL_GPIO_ReadPin>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d00b      	beq.n	8003e5e <button_reset_input+0x2a>
 8003e46:	4b48      	ldr	r3, [pc, #288]	@ (8003f68 <button_reset_input+0x134>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d103      	bne.n	8003e56 <button_reset_input+0x22>
 8003e4e:	4b47      	ldr	r3, [pc, #284]	@ (8003f6c <button_reset_input+0x138>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d003      	beq.n	8003e5e <button_reset_input+0x2a>
 8003e56:	4b46      	ldr	r3, [pc, #280]	@ (8003f70 <button_reset_input+0x13c>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d17c      	bne.n	8003f58 <button_reset_input+0x124>
		B_reset = 1;
 8003e5e:	4b45      	ldr	r3, [pc, #276]	@ (8003f74 <button_reset_input+0x140>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	701a      	strb	r2, [r3, #0]
		again:
		S_top = 0;
 8003e64:	4b44      	ldr	r3, [pc, #272]	@ (8003f78 <button_reset_input+0x144>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
		S_down = 0;
 8003e6a:	4b44      	ldr	r3, [pc, #272]	@ (8003f7c <button_reset_input+0x148>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 8003e70:	e006      	b.n	8003e80 <button_reset_input+0x4c>
			Modbus_Protocal_Worker();
 8003e72:	f7fd f9ff 	bl	8001274 <Modbus_Protocal_Worker>
			Vin = -3.5;
 8003e76:	4b42      	ldr	r3, [pc, #264]	@ (8003f80 <button_reset_input+0x14c>)
 8003e78:	4a42      	ldr	r2, [pc, #264]	@ (8003f84 <button_reset_input+0x150>)
 8003e7a:	601a      	str	r2, [r3, #0]
			//Vin = -5;
			//software limit
			//SoftwareLimit();
			//Drive Motor which PWM
			DriveMotor();
 8003e7c:	f7ff fe08 	bl	8003a90 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 8003e80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e84:	4840      	ldr	r0, [pc, #256]	@ (8003f88 <button_reset_input+0x154>)
 8003e86:	f003 fd2f 	bl	80078e8 <HAL_GPIO_ReadPin>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <button_reset_input+0x3e>
		}

		Vin = 2.1;
 8003e90:	4b3b      	ldr	r3, [pc, #236]	@ (8003f80 <button_reset_input+0x14c>)
 8003e92:	4a3e      	ldr	r2, [pc, #248]	@ (8003f8c <button_reset_input+0x158>)
 8003e94:	601a      	str	r2, [r3, #0]
		//Vin = 2.5;
		DriveMotor();
 8003e96:	f7ff fdfb 	bl	8003a90 <DriveMotor>
		HAL_Delay(1000);
 8003e9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e9e:	f001 fbd9 	bl	8005654 <HAL_Delay>
		//SoftwareLimit();

		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 8003ea2:	e00e      	b.n	8003ec2 <button_reset_input+0x8e>
			if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1){
 8003ea4:	2104      	movs	r1, #4
 8003ea6:	482f      	ldr	r0, [pc, #188]	@ (8003f64 <button_reset_input+0x130>)
 8003ea8:	f003 fd1e 	bl	80078e8 <HAL_GPIO_ReadPin>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d100      	bne.n	8003eb4 <button_reset_input+0x80>
				goto again;
 8003eb2:	e7d7      	b.n	8003e64 <button_reset_input+0x30>
			}
			Modbus_Protocal_Worker();
 8003eb4:	f7fd f9de 	bl	8001274 <Modbus_Protocal_Worker>
			Vin = -1.8;
 8003eb8:	4b31      	ldr	r3, [pc, #196]	@ (8003f80 <button_reset_input+0x14c>)
 8003eba:	4a35      	ldr	r2, [pc, #212]	@ (8003f90 <button_reset_input+0x15c>)
 8003ebc:	601a      	str	r2, [r3, #0]
			//Vin = -3;
			//software limit
			//SoftwareLimit();
			//Drive Motor which PWM
			DriveMotor();
 8003ebe:	f7ff fde7 	bl	8003a90 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 8003ec2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ec6:	4830      	ldr	r0, [pc, #192]	@ (8003f88 <button_reset_input+0x154>)
 8003ec8:	f003 fd0e 	bl	80078e8 <HAL_GPIO_ReadPin>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0e8      	beq.n	8003ea4 <button_reset_input+0x70>
		}
		Vin = 0;
 8003ed2:	4b2b      	ldr	r3, [pc, #172]	@ (8003f80 <button_reset_input+0x14c>)
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
		HAL_Delay(500);
 8003eda:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003ede:	f001 fbb9 	bl	8005654 <HAL_Delay>
		__HAL_TIM_SET_COUNTER(&htim2, 0); //set position to 0
 8003ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8003f94 <button_reset_input+0x160>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	625a      	str	r2, [r3, #36]	@ 0x24

		//Reset Parameters
		setPosition = 0;
 8003eea:	4b2b      	ldr	r3, [pc, #172]	@ (8003f98 <button_reset_input+0x164>)
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
		S_top = 0;
 8003ef2:	4b21      	ldr	r3, [pc, #132]	@ (8003f78 <button_reset_input+0x144>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
		S_down = 1;
 8003ef8:	4b20      	ldr	r3, [pc, #128]	@ (8003f7c <button_reset_input+0x148>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
		emerStatus = 0;
 8003efe:	4b27      	ldr	r3, [pc, #156]	@ (8003f9c <button_reset_input+0x168>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	701a      	strb	r2, [r3, #0]
		check_up = 0;
 8003f04:	4b26      	ldr	r3, [pc, #152]	@ (8003fa0 <button_reset_input+0x16c>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	701a      	strb	r2, [r3, #0]
		check_down = 0;
 8003f0a:	4b26      	ldr	r3, [pc, #152]	@ (8003fa4 <button_reset_input+0x170>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	701a      	strb	r2, [r3, #0]
		Jog_state_triger = 0;
 8003f10:	4b25      	ldr	r3, [pc, #148]	@ (8003fa8 <button_reset_input+0x174>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
		set_jog_state = 0;
 8003f16:	4b25      	ldr	r3, [pc, #148]	@ (8003fac <button_reset_input+0x178>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
		set_point_state = 0;
 8003f1c:	4b24      	ldr	r3, [pc, #144]	@ (8003fb0 <button_reset_input+0x17c>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
		point_state_triger = 0;
 8003f22:	4b24      	ldr	r3, [pc, #144]	@ (8003fb4 <button_reset_input+0x180>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]

		if(Home_state_triger == 0 && set_Home_state == 1){
 8003f28:	4b0f      	ldr	r3, [pc, #60]	@ (8003f68 <button_reset_input+0x134>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d109      	bne.n	8003f44 <button_reset_input+0x110>
 8003f30:	4b0e      	ldr	r3, [pc, #56]	@ (8003f6c <button_reset_input+0x138>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d105      	bne.n	8003f44 <button_reset_input+0x110>
			Home_state_triger = 1;
 8003f38:	4b0b      	ldr	r3, [pc, #44]	@ (8003f68 <button_reset_input+0x134>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
			B_reset = 0;
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f74 <button_reset_input+0x140>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	701a      	strb	r2, [r3, #0]
		}

		if(emergency_reset == 1){
 8003f44:	4b0a      	ldr	r3, [pc, #40]	@ (8003f70 <button_reset_input+0x13c>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d102      	bne.n	8003f52 <button_reset_input+0x11e>
			emergency_reset = 0;
 8003f4c:	4b08      	ldr	r3, [pc, #32]	@ (8003f70 <button_reset_input+0x13c>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]

		}
		LED_Ready();
 8003f52:	f000 fecf 	bl	8004cf4 <LED_Ready>
 8003f56:	e003      	b.n	8003f60 <button_reset_input+0x12c>
	}
	else{
		B_reset = 0;
 8003f58:	4b06      	ldr	r3, [pc, #24]	@ (8003f74 <button_reset_input+0x140>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]
	}
}
 8003f5e:	bf00      	nop
 8003f60:	bf00      	nop
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	48000c00 	.word	0x48000c00
 8003f68:	200012dc 	.word	0x200012dc
 8003f6c:	200012d8 	.word	0x200012d8
 8003f70:	20000bc4 	.word	0x20000bc4
 8003f74:	20000bc2 	.word	0x20000bc2
 8003f78:	20000c3c 	.word	0x20000c3c
 8003f7c:	20000c40 	.word	0x20000c40
 8003f80:	20000b70 	.word	0x20000b70
 8003f84:	c0600000 	.word	0xc0600000
 8003f88:	48000800 	.word	0x48000800
 8003f8c:	40066666 	.word	0x40066666
 8003f90:	bfe66666 	.word	0xbfe66666
 8003f94:	200003e4 	.word	0x200003e4
 8003f98:	20000c2c 	.word	0x20000c2c
 8003f9c:	20001498 	.word	0x20001498
 8003fa0:	20000b60 	.word	0x20000b60
 8003fa4:	20000b61 	.word	0x20000b61
 8003fa8:	20001318 	.word	0x20001318
 8003fac:	200012e8 	.word	0x200012e8
 8003fb0:	200012d4 	.word	0x200012d4
 8003fb4:	200012d0 	.word	0x200012d0

08003fb8 <button_save_position>:

void button_save_position(){
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && B_save == 0 && fabs(QEIdata.linearPos-last_shelf_save) > 20){
 8003fbc:	2180      	movs	r1, #128	@ 0x80
 8003fbe:	481c      	ldr	r0, [pc, #112]	@ (8004030 <button_save_position+0x78>)
 8003fc0:	f003 fc92 	bl	80078e8 <HAL_GPIO_ReadPin>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d12b      	bne.n	8004022 <button_save_position+0x6a>
 8003fca:	4b1a      	ldr	r3, [pc, #104]	@ (8004034 <button_save_position+0x7c>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d127      	bne.n	8004022 <button_save_position+0x6a>
 8003fd2:	4b19      	ldr	r3, [pc, #100]	@ (8004038 <button_save_position+0x80>)
 8003fd4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003fd8:	4b18      	ldr	r3, [pc, #96]	@ (800403c <button_save_position+0x84>)
 8003fda:	edd3 7a00 	vldr	s15, [r3]
 8003fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fe2:	eef0 7ae7 	vabs.f32	s15, s15
 8003fe6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003fea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff2:	dd16      	ble.n	8004022 <button_save_position+0x6a>
		B_save = 1;
 8003ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8004034 <button_save_position+0x7c>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	701a      	strb	r2, [r3, #0]
		count_save += 1;
 8003ffa:	4b11      	ldr	r3, [pc, #68]	@ (8004040 <button_save_position+0x88>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	3301      	adds	r3, #1
 8004000:	b2da      	uxtb	r2, r3
 8004002:	4b0f      	ldr	r3, [pc, #60]	@ (8004040 <button_save_position+0x88>)
 8004004:	701a      	strb	r2, [r3, #0]
		shelves_pos[count_save] = QEIdata.linearPos;
 8004006:	4b0e      	ldr	r3, [pc, #56]	@ (8004040 <button_save_position+0x88>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	4b0a      	ldr	r3, [pc, #40]	@ (8004038 <button_save_position+0x80>)
 800400e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004010:	490c      	ldr	r1, [pc, #48]	@ (8004044 <button_save_position+0x8c>)
 8004012:	0083      	lsls	r3, r0, #2
 8004014:	440b      	add	r3, r1
 8004016:	601a      	str	r2, [r3, #0]
		last_shelf_save =  QEIdata.linearPos;
 8004018:	4b07      	ldr	r3, [pc, #28]	@ (8004038 <button_save_position+0x80>)
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	4a07      	ldr	r2, [pc, #28]	@ (800403c <button_save_position+0x84>)
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	e003      	b.n	800402a <button_save_position+0x72>
	}
	else{
		B_save = 0;
 8004022:	4b04      	ldr	r3, [pc, #16]	@ (8004034 <button_save_position+0x7c>)
 8004024:	2200      	movs	r2, #0
 8004026:	701a      	strb	r2, [r3, #0]
	}
}
 8004028:	bf00      	nop
 800402a:	bf00      	nop
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	48000400 	.word	0x48000400
 8004034:	20000bc3 	.word	0x20000bc3
 8004038:	20000b08 	.word	0x20000b08
 800403c:	20000be0 	.word	0x20000be0
 8004040:	20000bc5 	.word	0x20000bc5
 8004044:	20000bc8 	.word	0x20000bc8

08004048 <Heartbeat>:

//-------------------------------------------------//
//-------------------------MODBUS FUNCTIONS--------------------------//
void Heartbeat(){
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16 = 22881;
 800404c:	4b04      	ldr	r3, [pc, #16]	@ (8004060 <Heartbeat+0x18>)
 800404e:	f645 1261 	movw	r2, #22881	@ 0x5961
 8004052:	801a      	strh	r2, [r3, #0]
}
 8004054:	bf00      	nop
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	20001128 	.word	0x20001128

08004064 <Routine>:

void Routine(){
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0){
 8004068:	2110      	movs	r1, #16
 800406a:	4835      	ldr	r0, [pc, #212]	@ (8004140 <Routine+0xdc>)
 800406c:	f003 fc3c 	bl	80078e8 <HAL_GPIO_ReadPin>
 8004070:	4603      	mov	r3, r0
 8004072:	2b01      	cmp	r3, #1
 8004074:	d10a      	bne.n	800408c <Routine+0x28>
 8004076:	2120      	movs	r1, #32
 8004078:	4831      	ldr	r0, [pc, #196]	@ (8004140 <Routine+0xdc>)
 800407a:	f003 fc35 	bl	80078e8 <HAL_GPIO_ReadPin>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d103      	bne.n	800408c <Routine+0x28>
			gripper_status = 0;
 8004084:	4b2f      	ldr	r3, [pc, #188]	@ (8004144 <Routine+0xe0>)
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	e010      	b.n	80040ae <Routine+0x4a>
		}
		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1){
 800408c:	2110      	movs	r1, #16
 800408e:	482c      	ldr	r0, [pc, #176]	@ (8004140 <Routine+0xdc>)
 8004090:	f003 fc2a 	bl	80078e8 <HAL_GPIO_ReadPin>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <Routine+0x4a>
 800409a:	2120      	movs	r1, #32
 800409c:	4828      	ldr	r0, [pc, #160]	@ (8004140 <Routine+0xdc>)
 800409e:	f003 fc23 	bl	80078e8 <HAL_GPIO_ReadPin>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d102      	bne.n	80040ae <Routine+0x4a>
			gripper_status = 1;
 80040a8:	4b26      	ldr	r3, [pc, #152]	@ (8004144 <Routine+0xe0>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
		}
		if (gripper_status == 0 ) // not suck  in
 80040ae:	4b25      	ldr	r3, [pc, #148]	@ (8004144 <Routine+0xe0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <Routine+0x60>
		{
			registerFrame[0x04].U16 = 0b0000;
 80040b6:	4b24      	ldr	r3, [pc, #144]	@ (8004148 <Routine+0xe4>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	811a      	strh	r2, [r3, #8]
			registerFrame[0x04].U16 = 0b0001;
 80040bc:	4b22      	ldr	r3, [pc, #136]	@ (8004148 <Routine+0xe4>)
 80040be:	2201      	movs	r2, #1
 80040c0:	811a      	strh	r2, [r3, #8]
 80040c2:	e009      	b.n	80040d8 <Routine+0x74>
		}
		else if (gripper_status == 1) // suck in
 80040c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004144 <Routine+0xe0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d105      	bne.n	80040d8 <Routine+0x74>
		{
			registerFrame[0x04].U16 = 0b0000;
 80040cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004148 <Routine+0xe4>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	811a      	strh	r2, [r3, #8]
			registerFrame[0x04].U16 = 0b0010;
 80040d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004148 <Routine+0xe4>)
 80040d4:	2202      	movs	r2, #2
 80040d6:	811a      	strh	r2, [r3, #8]
		}
		registerFrame[0x10].U16 = Moving_status;
 80040d8:	4b1c      	ldr	r3, [pc, #112]	@ (800414c <Routine+0xe8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	b29a      	uxth	r2, r3
 80040de:	4b1a      	ldr	r3, [pc, #104]	@ (8004148 <Routine+0xe4>)
 80040e0:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = QEIdata.linearPos*10;
 80040e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004150 <Routine+0xec>)
 80040e4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80040e8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80040ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f4:	ee17 3a90 	vmov	r3, s15
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	4b13      	ldr	r3, [pc, #76]	@ (8004148 <Routine+0xe4>)
 80040fc:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[0x12].U16 = QEIdata.linearVel;
 80040fe:	4b14      	ldr	r3, [pc, #80]	@ (8004150 <Routine+0xec>)
 8004100:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004108:	ee17 3a90 	vmov	r3, s15
 800410c:	b29a      	uxth	r2, r3
 800410e:	4b0e      	ldr	r3, [pc, #56]	@ (8004148 <Routine+0xe4>)
 8004110:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[0x13].U16 = QEIdata.linearAcc;
 8004112:	4b0f      	ldr	r3, [pc, #60]	@ (8004150 <Routine+0xec>)
 8004114:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800411c:	ee17 3a90 	vmov	r3, s15
 8004120:	b29a      	uxth	r2, r3
 8004122:	4b09      	ldr	r3, [pc, #36]	@ (8004148 <Routine+0xe4>)
 8004124:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[0x40].U16 = x_position;
 8004126:	4b0b      	ldr	r3, [pc, #44]	@ (8004154 <Routine+0xf0>)
 8004128:	edd3 7a00 	vldr	s15, [r3]
 800412c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004130:	ee17 3a90 	vmov	r3, s15
 8004134:	b29a      	uxth	r2, r3
 8004136:	4b04      	ldr	r3, [pc, #16]	@ (8004148 <Routine+0xe4>)
 8004138:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
}
 800413c:	bf00      	nop
 800413e:	bd80      	pop	{r7, pc}
 8004140:	48000400 	.word	0x48000400
 8004144:	200012bc 	.word	0x200012bc
 8004148:	20001128 	.word	0x20001128
 800414c:	20001314 	.word	0x20001314
 8004150:	20000b08 	.word	0x20000b08
 8004154:	20000b54 	.word	0x20000b54

08004158 <check_vaccum_status>:

void check_vaccum_status()
{
 8004158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
	check_state = 1;
 8004160:	493c      	ldr	r1, [pc, #240]	@ (8004254 <check_vaccum_status+0xfc>)
 8004162:	2001      	movs	r0, #1
 8004164:	6008      	str	r0, [r1, #0]
	if(registerFrame[0x02].U16 == 0b0000){ // not suck  in
 8004166:	493c      	ldr	r1, [pc, #240]	@ (8004258 <check_vaccum_status+0x100>)
 8004168:	8889      	ldrh	r1, [r1, #4]
 800416a:	2900      	cmp	r1, #0
 800416c:	d12f      	bne.n	80041ce <check_vaccum_status+0x76>

		vaccum_status = 0;
 800416e:	493b      	ldr	r1, [pc, #236]	@ (800425c <check_vaccum_status+0x104>)
 8004170:	2000      	movs	r0, #0
 8004172:	6008      	str	r0, [r1, #0]
		if (prev_vac_savestate != vaccum_status)
 8004174:	4939      	ldr	r1, [pc, #228]	@ (800425c <check_vaccum_status+0x104>)
 8004176:	6809      	ldr	r1, [r1, #0]
 8004178:	17c8      	asrs	r0, r1, #31
 800417a:	460a      	mov	r2, r1
 800417c:	4603      	mov	r3, r0
 800417e:	4938      	ldr	r1, [pc, #224]	@ (8004260 <check_vaccum_status+0x108>)
 8004180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004184:	428b      	cmp	r3, r1
 8004186:	bf08      	it	eq
 8004188:	4282      	cmpeq	r2, r0
 800418a:	d01a      	beq.n	80041c2 <check_vaccum_status+0x6a>
			{
				trigger_savestate = 1;
 800418c:	4b35      	ldr	r3, [pc, #212]	@ (8004264 <check_vaccum_status+0x10c>)
 800418e:	2201      	movs	r2, #1
 8004190:	701a      	strb	r2, [r3, #0]
				S_top_savestate = S_top;
 8004192:	4b35      	ldr	r3, [pc, #212]	@ (8004268 <check_vaccum_status+0x110>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a35      	ldr	r2, [pc, #212]	@ (800426c <check_vaccum_status+0x114>)
 8004198:	6013      	str	r3, [r2, #0]
				S_down_savestate = S_down;
 800419a:	4b35      	ldr	r3, [pc, #212]	@ (8004270 <check_vaccum_status+0x118>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a35      	ldr	r2, [pc, #212]	@ (8004274 <check_vaccum_status+0x11c>)
 80041a0:	6013      	str	r3, [r2, #0]
				mode_savestate = mode;
 80041a2:	4b35      	ldr	r3, [pc, #212]	@ (8004278 <check_vaccum_status+0x120>)
 80041a4:	781a      	ldrb	r2, [r3, #0]
 80041a6:	4b35      	ldr	r3, [pc, #212]	@ (800427c <check_vaccum_status+0x124>)
 80041a8:	701a      	strb	r2, [r3, #0]
				timestamp_savestate = micros() + 500000;
 80041aa:	f7fe fcfd 	bl	8002ba8 <micros>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4933      	ldr	r1, [pc, #204]	@ (8004280 <check_vaccum_status+0x128>)
 80041b4:	eb12 0a01 	adds.w	sl, r2, r1
 80041b8:	f143 0b00 	adc.w	fp, r3, #0
 80041bc:	4b31      	ldr	r3, [pc, #196]	@ (8004284 <check_vaccum_status+0x12c>)
 80041be:	e9c3 ab00 	strd	sl, fp, [r3]
			}
//		HAL_Delay(50);
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80041c2:	2201      	movs	r2, #1
 80041c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80041c8:	482f      	ldr	r0, [pc, #188]	@ (8004288 <check_vaccum_status+0x130>)
 80041ca:	f003 fba5 	bl	8007918 <HAL_GPIO_WritePin>
	}
	if(registerFrame[0x02].U16 == 0b0001){ //suck  in
 80041ce:	4b22      	ldr	r3, [pc, #136]	@ (8004258 <check_vaccum_status+0x100>)
 80041d0:	889b      	ldrh	r3, [r3, #4]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d12f      	bne.n	8004236 <check_vaccum_status+0xde>
		vaccum_status = 1;
 80041d6:	4b21      	ldr	r3, [pc, #132]	@ (800425c <check_vaccum_status+0x104>)
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]
		if (prev_vac_savestate != vaccum_status)
 80041dc:	4b1f      	ldr	r3, [pc, #124]	@ (800425c <check_vaccum_status+0x104>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	17da      	asrs	r2, r3, #31
 80041e2:	461c      	mov	r4, r3
 80041e4:	4615      	mov	r5, r2
 80041e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004260 <check_vaccum_status+0x108>)
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	429d      	cmp	r5, r3
 80041ee:	bf08      	it	eq
 80041f0:	4294      	cmpeq	r4, r2
 80041f2:	d01a      	beq.n	800422a <check_vaccum_status+0xd2>
			{
				trigger_savestate = 1;
 80041f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004264 <check_vaccum_status+0x10c>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	701a      	strb	r2, [r3, #0]
				S_top_savestate = S_top;
 80041fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004268 <check_vaccum_status+0x110>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a1b      	ldr	r2, [pc, #108]	@ (800426c <check_vaccum_status+0x114>)
 8004200:	6013      	str	r3, [r2, #0]
				S_down_savestate = S_down;
 8004202:	4b1b      	ldr	r3, [pc, #108]	@ (8004270 <check_vaccum_status+0x118>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a1b      	ldr	r2, [pc, #108]	@ (8004274 <check_vaccum_status+0x11c>)
 8004208:	6013      	str	r3, [r2, #0]
				mode_savestate = mode;
 800420a:	4b1b      	ldr	r3, [pc, #108]	@ (8004278 <check_vaccum_status+0x120>)
 800420c:	781a      	ldrb	r2, [r3, #0]
 800420e:	4b1b      	ldr	r3, [pc, #108]	@ (800427c <check_vaccum_status+0x124>)
 8004210:	701a      	strb	r2, [r3, #0]
				timestamp_savestate = micros() + 500000;
 8004212:	f7fe fcc9 	bl	8002ba8 <micros>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4919      	ldr	r1, [pc, #100]	@ (8004280 <check_vaccum_status+0x128>)
 800421c:	eb12 0801 	adds.w	r8, r2, r1
 8004220:	f143 0900 	adc.w	r9, r3, #0
 8004224:	4b17      	ldr	r3, [pc, #92]	@ (8004284 <check_vaccum_status+0x12c>)
 8004226:	e9c3 8900 	strd	r8, r9, [r3]
			}
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 800422a:	2200      	movs	r2, #0
 800422c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004230:	4815      	ldr	r0, [pc, #84]	@ (8004288 <check_vaccum_status+0x130>)
 8004232:	f003 fb71 	bl	8007918 <HAL_GPIO_WritePin>
	}

	prev_vac_savestate = vaccum_status;
 8004236:	4b09      	ldr	r3, [pc, #36]	@ (800425c <check_vaccum_status+0x104>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	17da      	asrs	r2, r3, #31
 800423c:	603b      	str	r3, [r7, #0]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	4b07      	ldr	r3, [pc, #28]	@ (8004260 <check_vaccum_status+0x108>)
 8004242:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004246:	e9c3 1200 	strd	r1, r2, [r3]
}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004254:	200012c0 	.word	0x200012c0
 8004258:	20001128 	.word	0x20001128
 800425c:	200012b8 	.word	0x200012b8
 8004260:	20001330 	.word	0x20001330
 8004264:	20001340 	.word	0x20001340
 8004268:	20000c3c 	.word	0x20000c3c
 800426c:	20000c44 	.word	0x20000c44
 8004270:	20000c40 	.word	0x20000c40
 8004274:	20000c48 	.word	0x20000c48
 8004278:	20000200 	.word	0x20000200
 800427c:	20000201 	.word	0x20000201
 8004280:	0007a120 	.word	0x0007a120
 8004284:	20001328 	.word	0x20001328
 8004288:	48000400 	.word	0x48000400

0800428c <check_gripper_status>:

void check_gripper_status()
{
 800428c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
	check_state = 2;
 8004294:	4943      	ldr	r1, [pc, #268]	@ (80043a4 <check_gripper_status+0x118>)
 8004296:	2002      	movs	r0, #2
 8004298:	6008      	str	r0, [r1, #0]

	if(registerFrame[0x03].U16 == 0b0000) //backward ,not on
 800429a:	4943      	ldr	r1, [pc, #268]	@ (80043a8 <check_gripper_status+0x11c>)
 800429c:	88c9      	ldrh	r1, [r1, #6]
 800429e:	2900      	cmp	r1, #0
 80042a0:	d136      	bne.n	8004310 <check_gripper_status+0x84>
	//if(test_Gripper == 0)
	{

		gripper_status = 0;
 80042a2:	4942      	ldr	r1, [pc, #264]	@ (80043ac <check_gripper_status+0x120>)
 80042a4:	2000      	movs	r0, #0
 80042a6:	6008      	str	r0, [r1, #0]

		if (prev_grp_savestate != gripper_status)
 80042a8:	4940      	ldr	r1, [pc, #256]	@ (80043ac <check_gripper_status+0x120>)
 80042aa:	6809      	ldr	r1, [r1, #0]
 80042ac:	17c8      	asrs	r0, r1, #31
 80042ae:	460a      	mov	r2, r1
 80042b0:	4603      	mov	r3, r0
 80042b2:	493f      	ldr	r1, [pc, #252]	@ (80043b0 <check_gripper_status+0x124>)
 80042b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042b8:	428b      	cmp	r3, r1
 80042ba:	bf08      	it	eq
 80042bc:	4282      	cmpeq	r2, r0
 80042be:	d01a      	beq.n	80042f6 <check_gripper_status+0x6a>
			{
					trigger_savestate = 1;
 80042c0:	4b3c      	ldr	r3, [pc, #240]	@ (80043b4 <check_gripper_status+0x128>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	701a      	strb	r2, [r3, #0]
					S_top_savestate = S_top;
 80042c6:	4b3c      	ldr	r3, [pc, #240]	@ (80043b8 <check_gripper_status+0x12c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a3c      	ldr	r2, [pc, #240]	@ (80043bc <check_gripper_status+0x130>)
 80042cc:	6013      	str	r3, [r2, #0]
					S_down_savestate = S_down;
 80042ce:	4b3c      	ldr	r3, [pc, #240]	@ (80043c0 <check_gripper_status+0x134>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a3c      	ldr	r2, [pc, #240]	@ (80043c4 <check_gripper_status+0x138>)
 80042d4:	6013      	str	r3, [r2, #0]
					mode_savestate = mode;
 80042d6:	4b3c      	ldr	r3, [pc, #240]	@ (80043c8 <check_gripper_status+0x13c>)
 80042d8:	781a      	ldrb	r2, [r3, #0]
 80042da:	4b3c      	ldr	r3, [pc, #240]	@ (80043cc <check_gripper_status+0x140>)
 80042dc:	701a      	strb	r2, [r3, #0]
					timestamp_savestate = micros() + 500000;
 80042de:	f7fe fc63 	bl	8002ba8 <micros>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	493a      	ldr	r1, [pc, #232]	@ (80043d0 <check_gripper_status+0x144>)
 80042e8:	eb12 0a01 	adds.w	sl, r2, r1
 80042ec:	f143 0b00 	adc.w	fp, r3, #0
 80042f0:	4b38      	ldr	r3, [pc, #224]	@ (80043d4 <check_gripper_status+0x148>)
 80042f2:	e9c3 ab00 	strd	sl, fp, [r3]
			}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80042f6:	2200      	movs	r2, #0
 80042f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004300:	f003 fb0a 	bl	8007918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8004304:	2201      	movs	r2, #1
 8004306:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800430a:	4833      	ldr	r0, [pc, #204]	@ (80043d8 <check_gripper_status+0x14c>)
 800430c:	f003 fb04 	bl	8007918 <HAL_GPIO_WritePin>
	}
	if(registerFrame[0x03].U16 == 0b0001) //Forward
 8004310:	4b25      	ldr	r3, [pc, #148]	@ (80043a8 <check_gripper_status+0x11c>)
 8004312:	88db      	ldrh	r3, [r3, #6]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d136      	bne.n	8004386 <check_gripper_status+0xfa>
	//if(test_Gripper == 1)
	{
		gripper_status = 1;
 8004318:	4b24      	ldr	r3, [pc, #144]	@ (80043ac <check_gripper_status+0x120>)
 800431a:	2201      	movs	r2, #1
 800431c:	601a      	str	r2, [r3, #0]

		if (prev_grp_savestate != gripper_status)
 800431e:	4b23      	ldr	r3, [pc, #140]	@ (80043ac <check_gripper_status+0x120>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	17da      	asrs	r2, r3, #31
 8004324:	461c      	mov	r4, r3
 8004326:	4615      	mov	r5, r2
 8004328:	4b21      	ldr	r3, [pc, #132]	@ (80043b0 <check_gripper_status+0x124>)
 800432a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432e:	429d      	cmp	r5, r3
 8004330:	bf08      	it	eq
 8004332:	4294      	cmpeq	r4, r2
 8004334:	d01a      	beq.n	800436c <check_gripper_status+0xe0>
			{
					trigger_savestate = 1;
 8004336:	4b1f      	ldr	r3, [pc, #124]	@ (80043b4 <check_gripper_status+0x128>)
 8004338:	2201      	movs	r2, #1
 800433a:	701a      	strb	r2, [r3, #0]
					S_top_savestate = S_top;
 800433c:	4b1e      	ldr	r3, [pc, #120]	@ (80043b8 <check_gripper_status+0x12c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a1e      	ldr	r2, [pc, #120]	@ (80043bc <check_gripper_status+0x130>)
 8004342:	6013      	str	r3, [r2, #0]
					S_down_savestate = S_down;
 8004344:	4b1e      	ldr	r3, [pc, #120]	@ (80043c0 <check_gripper_status+0x134>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a1e      	ldr	r2, [pc, #120]	@ (80043c4 <check_gripper_status+0x138>)
 800434a:	6013      	str	r3, [r2, #0]
					mode_savestate = mode;
 800434c:	4b1e      	ldr	r3, [pc, #120]	@ (80043c8 <check_gripper_status+0x13c>)
 800434e:	781a      	ldrb	r2, [r3, #0]
 8004350:	4b1e      	ldr	r3, [pc, #120]	@ (80043cc <check_gripper_status+0x140>)
 8004352:	701a      	strb	r2, [r3, #0]
					timestamp_savestate = micros() + 500000;
 8004354:	f7fe fc28 	bl	8002ba8 <micros>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	491c      	ldr	r1, [pc, #112]	@ (80043d0 <check_gripper_status+0x144>)
 800435e:	eb12 0801 	adds.w	r8, r2, r1
 8004362:	f143 0900 	adc.w	r9, r3, #0
 8004366:	4b1b      	ldr	r3, [pc, #108]	@ (80043d4 <check_gripper_status+0x148>)
 8004368:	e9c3 8900 	strd	r8, r9, [r3]
			}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800436c:	2201      	movs	r2, #1
 800436e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004372:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004376:	f003 facf 	bl	8007918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 800437a:	2200      	movs	r2, #0
 800437c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004380:	4815      	ldr	r0, [pc, #84]	@ (80043d8 <check_gripper_status+0x14c>)
 8004382:	f003 fac9 	bl	8007918 <HAL_GPIO_WritePin>
	}

	prev_grp_savestate = gripper_status;
 8004386:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <check_gripper_status+0x120>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	17da      	asrs	r2, r3, #31
 800438c:	603b      	str	r3, [r7, #0]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	4b07      	ldr	r3, [pc, #28]	@ (80043b0 <check_gripper_status+0x124>)
 8004392:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004396:	e9c3 1200 	strd	r1, r2, [r3]
}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a4:	200012c0 	.word	0x200012c0
 80043a8:	20001128 	.word	0x20001128
 80043ac:	200012bc 	.word	0x200012bc
 80043b0:	20001338 	.word	0x20001338
 80043b4:	20001340 	.word	0x20001340
 80043b8:	20000c3c 	.word	0x20000c3c
 80043bc:	20000c44 	.word	0x20000c44
 80043c0:	20000c40 	.word	0x20000c40
 80043c4:	20000c48 	.word	0x20000c48
 80043c8:	20000200 	.word	0x20000200
 80043cc:	20000201 	.word	0x20000201
 80043d0:	0007a120 	.word	0x0007a120
 80043d4:	20001328 	.word	0x20001328
 80043d8:	48000800 	.word	0x48000800

080043dc <set_shelf>:

void set_shelf()
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
	check_state = 3;
 80043e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004510 <set_shelf+0x134>)
 80043e2:	2203      	movs	r2, #3
 80043e4:	601a      	str	r2, [r3, #0]
	if(registerFrame[0x01].U16 ==  0b0001)
 80043e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004514 <set_shelf+0x138>)
 80043e8:	885b      	ldrh	r3, [r3, #2]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d104      	bne.n	80043f8 <set_shelf+0x1c>
	{
		set_shelf_state = 1;
 80043ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004518 <set_shelf+0x13c>)
 80043f0:	2201      	movs	r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
		LED_Manual();
 80043f4:	f000 fcc6 	bl	8004d84 <LED_Manual>
	}
	if (set_shelf_state == 1 && Enter_click == 0)
 80043f8:	4b47      	ldr	r3, [pc, #284]	@ (8004518 <set_shelf+0x13c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d11e      	bne.n	800443e <set_shelf+0x62>
 8004400:	4b46      	ldr	r3, [pc, #280]	@ (800451c <set_shelf+0x140>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d11a      	bne.n	800443e <set_shelf+0x62>
	{
			registerFrame[0x01].U16 = 0b0000;
 8004408:	4b42      	ldr	r3, [pc, #264]	@ (8004514 <set_shelf+0x138>)
 800440a:	2200      	movs	r2, #0
 800440c:	805a      	strh	r2, [r3, #2]
			Moving_status = 1;
 800440e:	4b44      	ldr	r3, [pc, #272]	@ (8004520 <set_shelf+0x144>)
 8004410:	2201      	movs	r2, #1
 8004412:	601a      	str	r2, [r3, #0]
			registerFrame[0x10].U16 = Moving_status; // set shelve
 8004414:	4b42      	ldr	r3, [pc, #264]	@ (8004520 <set_shelf+0x144>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	b29a      	uxth	r2, r3
 800441a:	4b3e      	ldr	r3, [pc, #248]	@ (8004514 <set_shelf+0x138>)
 800441c:	841a      	strh	r2, [r3, #32]
			mode = 2; //manual
 800441e:	4b41      	ldr	r3, [pc, #260]	@ (8004524 <set_shelf+0x148>)
 8004420:	2202      	movs	r2, #2
 8004422:	701a      	strb	r2, [r3, #0]
			if(count_save == 5){
 8004424:	4b40      	ldr	r3, [pc, #256]	@ (8004528 <set_shelf+0x14c>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b05      	cmp	r3, #5
 800442a:	d108      	bne.n	800443e <set_shelf+0x62>
				Enter_click = 1;
 800442c:	4b3b      	ldr	r3, [pc, #236]	@ (800451c <set_shelf+0x140>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]
				count_save = 0;
 8004432:	4b3d      	ldr	r3, [pc, #244]	@ (8004528 <set_shelf+0x14c>)
 8004434:	2200      	movs	r2, #0
 8004436:	701a      	strb	r2, [r3, #0]
				mode = 3;
 8004438:	4b3a      	ldr	r3, [pc, #232]	@ (8004524 <set_shelf+0x148>)
 800443a:	2203      	movs	r2, #3
 800443c:	701a      	strb	r2, [r3, #0]
			}
	}
	if (set_shelf_state == 1 && Enter_click == 1)
 800443e:	4b36      	ldr	r3, [pc, #216]	@ (8004518 <set_shelf+0x13c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d161      	bne.n	800450a <set_shelf+0x12e>
 8004446:	4b35      	ldr	r3, [pc, #212]	@ (800451c <set_shelf+0x140>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d15d      	bne.n	800450a <set_shelf+0x12e>
	{
		registerFrame[0x01].U16 = 0b0000;
 800444e:	4b31      	ldr	r3, [pc, #196]	@ (8004514 <set_shelf+0x138>)
 8004450:	2200      	movs	r2, #0
 8004452:	805a      	strh	r2, [r3, #2]
		registerFrame[0x23].U16 = shelves_pos[1]*10;
 8004454:	4b35      	ldr	r3, [pc, #212]	@ (800452c <set_shelf+0x150>)
 8004456:	edd3 7a01 	vldr	s15, [r3, #4]
 800445a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800445e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004466:	ee17 3a90 	vmov	r3, s15
 800446a:	b29a      	uxth	r2, r3
 800446c:	4b29      	ldr	r3, [pc, #164]	@ (8004514 <set_shelf+0x138>)
 800446e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		registerFrame[0x24].U16 = shelves_pos[2]*10;
 8004472:	4b2e      	ldr	r3, [pc, #184]	@ (800452c <set_shelf+0x150>)
 8004474:	edd3 7a02 	vldr	s15, [r3, #8]
 8004478:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800447c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004484:	ee17 3a90 	vmov	r3, s15
 8004488:	b29a      	uxth	r2, r3
 800448a:	4b22      	ldr	r3, [pc, #136]	@ (8004514 <set_shelf+0x138>)
 800448c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		registerFrame[0x25].U16 = shelves_pos[3]*10;
 8004490:	4b26      	ldr	r3, [pc, #152]	@ (800452c <set_shelf+0x150>)
 8004492:	edd3 7a03 	vldr	s15, [r3, #12]
 8004496:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800449a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800449e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044a2:	ee17 3a90 	vmov	r3, s15
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004514 <set_shelf+0x138>)
 80044aa:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		registerFrame[0x26].U16 = shelves_pos[4]*10;
 80044ae:	4b1f      	ldr	r3, [pc, #124]	@ (800452c <set_shelf+0x150>)
 80044b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80044b4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80044b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044c0:	ee17 3a90 	vmov	r3, s15
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	4b13      	ldr	r3, [pc, #76]	@ (8004514 <set_shelf+0x138>)
 80044c8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		registerFrame[0x27].U16 = shelves_pos[5]*10;
 80044cc:	4b17      	ldr	r3, [pc, #92]	@ (800452c <set_shelf+0x150>)
 80044ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80044d2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80044d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044de:	ee17 3a90 	vmov	r3, s15
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004514 <set_shelf+0x138>)
 80044e6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
		Moving_status = 0;
 80044ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004520 <set_shelf+0x144>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
		registerFrame[0x10].U16 = Moving_status;
 80044f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004520 <set_shelf+0x144>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	4b07      	ldr	r3, [pc, #28]	@ (8004514 <set_shelf+0x138>)
 80044f8:	841a      	strh	r2, [r3, #32]
		set_shelf_state = 0;
 80044fa:	4b07      	ldr	r3, [pc, #28]	@ (8004518 <set_shelf+0x13c>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
		Enter_click = 0;
 8004500:	4b06      	ldr	r3, [pc, #24]	@ (800451c <set_shelf+0x140>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
		LED_Ready();
 8004506:	f000 fbf5 	bl	8004cf4 <LED_Ready>
	}

}
 800450a:	bf00      	nop
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	200012c0 	.word	0x200012c0
 8004514:	20001128 	.word	0x20001128
 8004518:	200012c8 	.word	0x200012c8
 800451c:	200012c4 	.word	0x200012c4
 8004520:	20001314 	.word	0x20001314
 8004524:	20000200 	.word	0x20000200
 8004528:	20000bc5 	.word	0x20000bc5
 800452c:	20000bc8 	.word	0x20000bc8

08004530 <Pointmode>:

void Pointmode()
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 ==  0b1000) // Run Point Mode
 8004534:	4b40      	ldr	r3, [pc, #256]	@ (8004638 <Pointmode+0x108>)
 8004536:	885b      	ldrh	r3, [r3, #2]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d125      	bne.n	8004588 <Pointmode+0x58>
		{
			 set_point_state = 1;
 800453c:	4b3f      	ldr	r3, [pc, #252]	@ (800463c <Pointmode+0x10c>)
 800453e:	2201      	movs	r2, #1
 8004540:	601a      	str	r2, [r3, #0]
			 set_point_modbus = (registerFrame[0x30].U16) / 10;
 8004542:	4b3d      	ldr	r3, [pc, #244]	@ (8004638 <Pointmode+0x108>)
 8004544:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004548:	4a3d      	ldr	r2, [pc, #244]	@ (8004640 <Pointmode+0x110>)
 800454a:	fba2 2303 	umull	r2, r3, r2, r3
 800454e:	08db      	lsrs	r3, r3, #3
 8004550:	b29b      	uxth	r3, r3
 8004552:	ee07 3a90 	vmov	s15, r3
 8004556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800455a:	4b3a      	ldr	r3, [pc, #232]	@ (8004644 <Pointmode+0x114>)
 800455c:	edc3 7a00 	vstr	s15, [r3]
			 registerFrame[0x01].U16 = 0b0000;
 8004560:	4b35      	ldr	r3, [pc, #212]	@ (8004638 <Pointmode+0x108>)
 8004562:	2200      	movs	r2, #0
 8004564:	805a      	strh	r2, [r3, #2]
			 overshootTop = 0;
 8004566:	4b38      	ldr	r3, [pc, #224]	@ (8004648 <Pointmode+0x118>)
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
			 overshootDown = 600;
 800456e:	4b37      	ldr	r3, [pc, #220]	@ (800464c <Pointmode+0x11c>)
 8004570:	4a37      	ldr	r2, [pc, #220]	@ (8004650 <Pointmode+0x120>)
 8004572:	601a      	str	r2, [r3, #0]
			 max_velo = 0;
 8004574:	4b37      	ldr	r3, [pc, #220]	@ (8004654 <Pointmode+0x124>)
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
			 max_acc = 0;
 800457c:	4b36      	ldr	r3, [pc, #216]	@ (8004658 <Pointmode+0x128>)
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
			 LED_Auto();
 8004584:	f000 fbda 	bl	8004d3c <LED_Auto>
//			 Modbus_Protocal_Worker();
		}

	if (point_state_triger == 0 && set_point_state == 1)
 8004588:	4b34      	ldr	r3, [pc, #208]	@ (800465c <Pointmode+0x12c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d130      	bne.n	80045f2 <Pointmode+0xc2>
 8004590:	4b2a      	ldr	r3, [pc, #168]	@ (800463c <Pointmode+0x10c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d12c      	bne.n	80045f2 <Pointmode+0xc2>
		{
				Moving_status = 16;
 8004598:	4b31      	ldr	r3, [pc, #196]	@ (8004660 <Pointmode+0x130>)
 800459a:	2210      	movs	r2, #16
 800459c:	601a      	str	r2, [r3, #0]
				registerFrame[0x10].U16 = Moving_status;
 800459e:	4b30      	ldr	r3, [pc, #192]	@ (8004660 <Pointmode+0x130>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	4b24      	ldr	r3, [pc, #144]	@ (8004638 <Pointmode+0x108>)
 80045a6:	841a      	strh	r2, [r3, #32]
				mode = 1;
 80045a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004664 <Pointmode+0x134>)
 80045aa:	2201      	movs	r2, #1
 80045ac:	701a      	strb	r2, [r3, #0]
				setPosition = set_point_modbus;
 80045ae:	4b25      	ldr	r3, [pc, #148]	@ (8004644 <Pointmode+0x114>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a2d      	ldr	r2, [pc, #180]	@ (8004668 <Pointmode+0x138>)
 80045b4:	6013      	str	r3, [r2, #0]
				if(fabs(setPosition-QEIdata.linearPos) <= 0.09){
 80045b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004668 <Pointmode+0x138>)
 80045b8:	ed93 7a00 	vldr	s14, [r3]
 80045bc:	4b2b      	ldr	r3, [pc, #172]	@ (800466c <Pointmode+0x13c>)
 80045be:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80045c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045c6:	eef0 7ae7 	vabs.f32	s15, s15
 80045ca:	ee17 0a90 	vmov	r0, s15
 80045ce:	f7fb ff87 	bl	80004e0 <__aeabi_f2d>
 80045d2:	a317      	add	r3, pc, #92	@ (adr r3, 8004630 <Pointmode+0x100>)
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f7fc fa56 	bl	8000a88 <__aeabi_dcmple>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <Pointmode+0xbe>
					mode = 3;
 80045e2:	4b20      	ldr	r3, [pc, #128]	@ (8004664 <Pointmode+0x134>)
 80045e4:	2203      	movs	r2, #3
 80045e6:	701a      	strb	r2, [r3, #0]
					point_state_triger = 1;
 80045e8:	4b1c      	ldr	r3, [pc, #112]	@ (800465c <Pointmode+0x12c>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	601a      	str	r2, [r3, #0]
				}
				Modbus_Protocal_Worker();
 80045ee:	f7fc fe41 	bl	8001274 <Modbus_Protocal_Worker>
		}
	if (point_state_triger == 1 && set_point_state == 1)
 80045f2:	4b1a      	ldr	r3, [pc, #104]	@ (800465c <Pointmode+0x12c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d118      	bne.n	800462c <Pointmode+0xfc>
 80045fa:	4b10      	ldr	r3, [pc, #64]	@ (800463c <Pointmode+0x10c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d114      	bne.n	800462c <Pointmode+0xfc>
		{
			mode = 3;
 8004602:	4b18      	ldr	r3, [pc, #96]	@ (8004664 <Pointmode+0x134>)
 8004604:	2203      	movs	r2, #3
 8004606:	701a      	strb	r2, [r3, #0]
			Moving_status = 0;
 8004608:	4b15      	ldr	r3, [pc, #84]	@ (8004660 <Pointmode+0x130>)
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
			registerFrame[0x10].U16 = Moving_status;
 800460e:	4b14      	ldr	r3, [pc, #80]	@ (8004660 <Pointmode+0x130>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	b29a      	uxth	r2, r3
 8004614:	4b08      	ldr	r3, [pc, #32]	@ (8004638 <Pointmode+0x108>)
 8004616:	841a      	strh	r2, [r3, #32]
			set_point_state = 0;
 8004618:	4b08      	ldr	r3, [pc, #32]	@ (800463c <Pointmode+0x10c>)
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
			point_state_triger = 0;
 800461e:	4b0f      	ldr	r3, [pc, #60]	@ (800465c <Pointmode+0x12c>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
//			set_point_modbus = 0;
			Modbus_Protocal_Worker();
 8004624:	f7fc fe26 	bl	8001274 <Modbus_Protocal_Worker>
			LED_Ready();
 8004628:	f000 fb64 	bl	8004cf4 <LED_Ready>
//
		}
}
 800462c:	bf00      	nop
 800462e:	bd80      	pop	{r7, pc}
 8004630:	70a3d70a 	.word	0x70a3d70a
 8004634:	3fb70a3d 	.word	0x3fb70a3d
 8004638:	20001128 	.word	0x20001128
 800463c:	200012d4 	.word	0x200012d4
 8004640:	cccccccd 	.word	0xcccccccd
 8004644:	200012cc 	.word	0x200012cc
 8004648:	200014a0 	.word	0x200014a0
 800464c:	20000284 	.word	0x20000284
 8004650:	44160000 	.word	0x44160000
 8004654:	20000c34 	.word	0x20000c34
 8004658:	20000c38 	.word	0x20000c38
 800465c:	200012d0 	.word	0x200012d0
 8004660:	20001314 	.word	0x20001314
 8004664:	20000200 	.word	0x20000200
 8004668:	20000c2c 	.word	0x20000c2c
 800466c:	20000b08 	.word	0x20000b08

08004670 <Home>:
void Home()
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 ==  0b0010) // Run Home Mode
 8004674:	4b1d      	ldr	r3, [pc, #116]	@ (80046ec <Home+0x7c>)
 8004676:	885b      	ldrh	r3, [r3, #2]
 8004678:	2b02      	cmp	r3, #2
 800467a:	d107      	bne.n	800468c <Home+0x1c>
	{
		set_Home_state = 1;
 800467c:	4b1c      	ldr	r3, [pc, #112]	@ (80046f0 <Home+0x80>)
 800467e:	2201      	movs	r2, #1
 8004680:	601a      	str	r2, [r3, #0]
		registerFrame[0x01].U16 = 0b0000;
 8004682:	4b1a      	ldr	r3, [pc, #104]	@ (80046ec <Home+0x7c>)
 8004684:	2200      	movs	r2, #0
 8004686:	805a      	strh	r2, [r3, #2]
		LED_Homing();
 8004688:	f000 fb10 	bl	8004cac <LED_Homing>
//		Modbus_Protocal_Worker();
	}
	if(Home_state_triger == 0 && set_Home_state == 1)
 800468c:	4b19      	ldr	r3, [pc, #100]	@ (80046f4 <Home+0x84>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10e      	bne.n	80046b2 <Home+0x42>
 8004694:	4b16      	ldr	r3, [pc, #88]	@ (80046f0 <Home+0x80>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d10a      	bne.n	80046b2 <Home+0x42>
	{
		Moving_status = 2;
 800469c:	4b16      	ldr	r3, [pc, #88]	@ (80046f8 <Home+0x88>)
 800469e:	2202      	movs	r2, #2
 80046a0:	601a      	str	r2, [r3, #0]
		registerFrame[0x10].U16 = Moving_status;
 80046a2:	4b15      	ldr	r3, [pc, #84]	@ (80046f8 <Home+0x88>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	4b10      	ldr	r3, [pc, #64]	@ (80046ec <Home+0x7c>)
 80046aa:	841a      	strh	r2, [r3, #32]
		//set home
		mode = 2;
 80046ac:	4b13      	ldr	r3, [pc, #76]	@ (80046fc <Home+0x8c>)
 80046ae:	2202      	movs	r2, #2
 80046b0:	701a      	strb	r2, [r3, #0]
//		Modbus_Protocal_Worker();
	}
	if(Home_state_triger == 1 && set_Home_state == 1)
 80046b2:	4b10      	ldr	r3, [pc, #64]	@ (80046f4 <Home+0x84>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d116      	bne.n	80046e8 <Home+0x78>
 80046ba:	4b0d      	ldr	r3, [pc, #52]	@ (80046f0 <Home+0x80>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d112      	bne.n	80046e8 <Home+0x78>
	{
		mode = 3;
 80046c2:	4b0e      	ldr	r3, [pc, #56]	@ (80046fc <Home+0x8c>)
 80046c4:	2203      	movs	r2, #3
 80046c6:	701a      	strb	r2, [r3, #0]
		Moving_status = 0;
 80046c8:	4b0b      	ldr	r3, [pc, #44]	@ (80046f8 <Home+0x88>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
		registerFrame[0x10].U16 = Moving_status;
 80046ce:	4b0a      	ldr	r3, [pc, #40]	@ (80046f8 <Home+0x88>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	4b05      	ldr	r3, [pc, #20]	@ (80046ec <Home+0x7c>)
 80046d6:	841a      	strh	r2, [r3, #32]
		set_Home_state = 0;
 80046d8:	4b05      	ldr	r3, [pc, #20]	@ (80046f0 <Home+0x80>)
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
		Home_state_triger = 0;
 80046de:	4b05      	ldr	r3, [pc, #20]	@ (80046f4 <Home+0x84>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
//		Modbus_Protocal_Worker();
		LED_Ready();
 80046e4:	f000 fb06 	bl	8004cf4 <LED_Ready>
	}
}
 80046e8:	bf00      	nop
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	20001128 	.word	0x20001128
 80046f0:	200012d8 	.word	0x200012d8
 80046f4:	200012dc 	.word	0x200012dc
 80046f8:	20001314 	.word	0x20001314
 80046fc:	20000200 	.word	0x20000200

08004700 <Run_jog>:
void Run_jog()
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 ==  0b0100) // Run Jog Mode
 8004704:	4bc0      	ldr	r3, [pc, #768]	@ (8004a08 <Run_jog+0x308>)
 8004706:	885b      	ldrh	r3, [r3, #2]
 8004708:	2b04      	cmp	r3, #4
 800470a:	f040 8139 	bne.w	8004980 <Run_jog+0x280>
	{
		set_jog_state = 1;
 800470e:	4bbf      	ldr	r3, [pc, #764]	@ (8004a0c <Run_jog+0x30c>)
 8004710:	2201      	movs	r2, #1
 8004712:	601a      	str	r2, [r3, #0]
		Jog_state_triger = 0;
 8004714:	4bbe      	ldr	r3, [pc, #760]	@ (8004a10 <Run_jog+0x310>)
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
		Jog_oneloop_trigger = 0;
 800471a:	4bbe      	ldr	r3, [pc, #760]	@ (8004a14 <Run_jog+0x314>)
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
		Jog_order = 0;
 8004720:	4bbd      	ldr	r3, [pc, #756]	@ (8004a18 <Run_jog+0x318>)
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]

		PickOrder = registerFrame[0x21].U16;
 8004726:	4bb8      	ldr	r3, [pc, #736]	@ (8004a08 <Run_jog+0x308>)
 8004728:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800472c:	461a      	mov	r2, r3
 800472e:	4bbb      	ldr	r3, [pc, #748]	@ (8004a1c <Run_jog+0x31c>)
 8004730:	601a      	str	r2, [r3, #0]
		PlaceOrder = registerFrame[0x22].U16;
 8004732:	4bb5      	ldr	r3, [pc, #724]	@ (8004a08 <Run_jog+0x308>)
 8004734:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004738:	461a      	mov	r2, r3
 800473a:	4bb9      	ldr	r3, [pc, #740]	@ (8004a20 <Run_jog+0x320>)
 800473c:	601a      	str	r2, [r3, #0]

		PickArray[0] = (PickOrder - (PickOrder % 10000)) / 10000;
 800473e:	4bb7      	ldr	r3, [pc, #732]	@ (8004a1c <Run_jog+0x31c>)
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	4bb6      	ldr	r3, [pc, #728]	@ (8004a1c <Run_jog+0x31c>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	4bb7      	ldr	r3, [pc, #732]	@ (8004a24 <Run_jog+0x324>)
 8004748:	fb83 0302 	smull	r0, r3, r3, r2
 800474c:	1318      	asrs	r0, r3, #12
 800474e:	17d3      	asrs	r3, r2, #31
 8004750:	1ac3      	subs	r3, r0, r3
 8004752:	f242 7010 	movw	r0, #10000	@ 0x2710
 8004756:	fb00 f303 	mul.w	r3, r0, r3
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	1acb      	subs	r3, r1, r3
 800475e:	4ab1      	ldr	r2, [pc, #708]	@ (8004a24 <Run_jog+0x324>)
 8004760:	fb82 1203 	smull	r1, r2, r2, r3
 8004764:	1312      	asrs	r2, r2, #12
 8004766:	17db      	asrs	r3, r3, #31
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	4aaf      	ldr	r2, [pc, #700]	@ (8004a28 <Run_jog+0x328>)
 800476c:	6013      	str	r3, [r2, #0]
		PickArray[1] = ((PickOrder % 10000) - (PickOrder % 1000)) / 1000;
 800476e:	4bab      	ldr	r3, [pc, #684]	@ (8004a1c <Run_jog+0x31c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4aac      	ldr	r2, [pc, #688]	@ (8004a24 <Run_jog+0x324>)
 8004774:	fb82 1203 	smull	r1, r2, r2, r3
 8004778:	1311      	asrs	r1, r2, #12
 800477a:	17da      	asrs	r2, r3, #31
 800477c:	1a8a      	subs	r2, r1, r2
 800477e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004782:	fb01 f202 	mul.w	r2, r1, r2
 8004786:	1a9a      	subs	r2, r3, r2
 8004788:	4ba4      	ldr	r3, [pc, #656]	@ (8004a1c <Run_jog+0x31c>)
 800478a:	6819      	ldr	r1, [r3, #0]
 800478c:	4ba7      	ldr	r3, [pc, #668]	@ (8004a2c <Run_jog+0x32c>)
 800478e:	fb83 0301 	smull	r0, r3, r3, r1
 8004792:	1198      	asrs	r0, r3, #6
 8004794:	17cb      	asrs	r3, r1, #31
 8004796:	1ac3      	subs	r3, r0, r3
 8004798:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800479c:	fb00 f303 	mul.w	r3, r0, r3
 80047a0:	1acb      	subs	r3, r1, r3
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	4aa1      	ldr	r2, [pc, #644]	@ (8004a2c <Run_jog+0x32c>)
 80047a6:	fb82 1203 	smull	r1, r2, r2, r3
 80047aa:	1192      	asrs	r2, r2, #6
 80047ac:	17db      	asrs	r3, r3, #31
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	4a9d      	ldr	r2, [pc, #628]	@ (8004a28 <Run_jog+0x328>)
 80047b2:	6053      	str	r3, [r2, #4]
		PickArray[2] = ((PickOrder % 1000) - (PickOrder % 100)) / 100;
 80047b4:	4b99      	ldr	r3, [pc, #612]	@ (8004a1c <Run_jog+0x31c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a9c      	ldr	r2, [pc, #624]	@ (8004a2c <Run_jog+0x32c>)
 80047ba:	fb82 1203 	smull	r1, r2, r2, r3
 80047be:	1191      	asrs	r1, r2, #6
 80047c0:	17da      	asrs	r2, r3, #31
 80047c2:	1a8a      	subs	r2, r1, r2
 80047c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80047c8:	fb01 f202 	mul.w	r2, r1, r2
 80047cc:	1a9a      	subs	r2, r3, r2
 80047ce:	4b93      	ldr	r3, [pc, #588]	@ (8004a1c <Run_jog+0x31c>)
 80047d0:	6819      	ldr	r1, [r3, #0]
 80047d2:	4b97      	ldr	r3, [pc, #604]	@ (8004a30 <Run_jog+0x330>)
 80047d4:	fb83 0301 	smull	r0, r3, r3, r1
 80047d8:	1158      	asrs	r0, r3, #5
 80047da:	17cb      	asrs	r3, r1, #31
 80047dc:	1ac3      	subs	r3, r0, r3
 80047de:	2064      	movs	r0, #100	@ 0x64
 80047e0:	fb00 f303 	mul.w	r3, r0, r3
 80047e4:	1acb      	subs	r3, r1, r3
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	4a91      	ldr	r2, [pc, #580]	@ (8004a30 <Run_jog+0x330>)
 80047ea:	fb82 1203 	smull	r1, r2, r2, r3
 80047ee:	1152      	asrs	r2, r2, #5
 80047f0:	17db      	asrs	r3, r3, #31
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	4a8c      	ldr	r2, [pc, #560]	@ (8004a28 <Run_jog+0x328>)
 80047f6:	6093      	str	r3, [r2, #8]
		PickArray[3] = ((PickOrder % 100) - (PickOrder % 10)) / 10;
 80047f8:	4b88      	ldr	r3, [pc, #544]	@ (8004a1c <Run_jog+0x31c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a8c      	ldr	r2, [pc, #560]	@ (8004a30 <Run_jog+0x330>)
 80047fe:	fb82 1203 	smull	r1, r2, r2, r3
 8004802:	1151      	asrs	r1, r2, #5
 8004804:	17da      	asrs	r2, r3, #31
 8004806:	1a89      	subs	r1, r1, r2
 8004808:	2264      	movs	r2, #100	@ 0x64
 800480a:	fb01 f202 	mul.w	r2, r1, r2
 800480e:	1a99      	subs	r1, r3, r2
 8004810:	4b82      	ldr	r3, [pc, #520]	@ (8004a1c <Run_jog+0x31c>)
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	4b87      	ldr	r3, [pc, #540]	@ (8004a34 <Run_jog+0x334>)
 8004816:	fb83 2300 	smull	r2, r3, r3, r0
 800481a:	109a      	asrs	r2, r3, #2
 800481c:	17c3      	asrs	r3, r0, #31
 800481e:	1ad2      	subs	r2, r2, r3
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	1ac2      	subs	r2, r0, r3
 800482a:	1a8b      	subs	r3, r1, r2
 800482c:	4a81      	ldr	r2, [pc, #516]	@ (8004a34 <Run_jog+0x334>)
 800482e:	fb82 1203 	smull	r1, r2, r2, r3
 8004832:	1092      	asrs	r2, r2, #2
 8004834:	17db      	asrs	r3, r3, #31
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	4a7b      	ldr	r2, [pc, #492]	@ (8004a28 <Run_jog+0x328>)
 800483a:	60d3      	str	r3, [r2, #12]
		PickArray[4] = PickOrder % 10;
 800483c:	4b77      	ldr	r3, [pc, #476]	@ (8004a1c <Run_jog+0x31c>)
 800483e:	6819      	ldr	r1, [r3, #0]
 8004840:	4b7c      	ldr	r3, [pc, #496]	@ (8004a34 <Run_jog+0x334>)
 8004842:	fb83 2301 	smull	r2, r3, r3, r1
 8004846:	109a      	asrs	r2, r3, #2
 8004848:	17cb      	asrs	r3, r1, #31
 800484a:	1ad2      	subs	r2, r2, r3
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	1aca      	subs	r2, r1, r3
 8004856:	4b74      	ldr	r3, [pc, #464]	@ (8004a28 <Run_jog+0x328>)
 8004858:	611a      	str	r2, [r3, #16]

		PlaceArray[0] = (PlaceOrder - (PlaceOrder % 10000)) / 10000;
 800485a:	4b71      	ldr	r3, [pc, #452]	@ (8004a20 <Run_jog+0x320>)
 800485c:	6819      	ldr	r1, [r3, #0]
 800485e:	4b70      	ldr	r3, [pc, #448]	@ (8004a20 <Run_jog+0x320>)
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4b70      	ldr	r3, [pc, #448]	@ (8004a24 <Run_jog+0x324>)
 8004864:	fb83 0302 	smull	r0, r3, r3, r2
 8004868:	1318      	asrs	r0, r3, #12
 800486a:	17d3      	asrs	r3, r2, #31
 800486c:	1ac3      	subs	r3, r0, r3
 800486e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8004872:	fb00 f303 	mul.w	r3, r0, r3
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	1acb      	subs	r3, r1, r3
 800487a:	4a6a      	ldr	r2, [pc, #424]	@ (8004a24 <Run_jog+0x324>)
 800487c:	fb82 1203 	smull	r1, r2, r2, r3
 8004880:	1312      	asrs	r2, r2, #12
 8004882:	17db      	asrs	r3, r3, #31
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	4a6c      	ldr	r2, [pc, #432]	@ (8004a38 <Run_jog+0x338>)
 8004888:	6013      	str	r3, [r2, #0]
		PlaceArray[1] = ((PlaceOrder % 10000) - (PlaceOrder % 1000)) / 1000;
 800488a:	4b65      	ldr	r3, [pc, #404]	@ (8004a20 <Run_jog+0x320>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a65      	ldr	r2, [pc, #404]	@ (8004a24 <Run_jog+0x324>)
 8004890:	fb82 1203 	smull	r1, r2, r2, r3
 8004894:	1311      	asrs	r1, r2, #12
 8004896:	17da      	asrs	r2, r3, #31
 8004898:	1a8a      	subs	r2, r1, r2
 800489a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800489e:	fb01 f202 	mul.w	r2, r1, r2
 80048a2:	1a9a      	subs	r2, r3, r2
 80048a4:	4b5e      	ldr	r3, [pc, #376]	@ (8004a20 <Run_jog+0x320>)
 80048a6:	6819      	ldr	r1, [r3, #0]
 80048a8:	4b60      	ldr	r3, [pc, #384]	@ (8004a2c <Run_jog+0x32c>)
 80048aa:	fb83 0301 	smull	r0, r3, r3, r1
 80048ae:	1198      	asrs	r0, r3, #6
 80048b0:	17cb      	asrs	r3, r1, #31
 80048b2:	1ac3      	subs	r3, r0, r3
 80048b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80048b8:	fb00 f303 	mul.w	r3, r0, r3
 80048bc:	1acb      	subs	r3, r1, r3
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	4a5a      	ldr	r2, [pc, #360]	@ (8004a2c <Run_jog+0x32c>)
 80048c2:	fb82 1203 	smull	r1, r2, r2, r3
 80048c6:	1192      	asrs	r2, r2, #6
 80048c8:	17db      	asrs	r3, r3, #31
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	4a5a      	ldr	r2, [pc, #360]	@ (8004a38 <Run_jog+0x338>)
 80048ce:	6053      	str	r3, [r2, #4]
		PlaceArray[2] = ((PlaceOrder % 1000) - (PlaceOrder % 100)) / 100;
 80048d0:	4b53      	ldr	r3, [pc, #332]	@ (8004a20 <Run_jog+0x320>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a55      	ldr	r2, [pc, #340]	@ (8004a2c <Run_jog+0x32c>)
 80048d6:	fb82 1203 	smull	r1, r2, r2, r3
 80048da:	1191      	asrs	r1, r2, #6
 80048dc:	17da      	asrs	r2, r3, #31
 80048de:	1a8a      	subs	r2, r1, r2
 80048e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80048e4:	fb01 f202 	mul.w	r2, r1, r2
 80048e8:	1a9a      	subs	r2, r3, r2
 80048ea:	4b4d      	ldr	r3, [pc, #308]	@ (8004a20 <Run_jog+0x320>)
 80048ec:	6819      	ldr	r1, [r3, #0]
 80048ee:	4b50      	ldr	r3, [pc, #320]	@ (8004a30 <Run_jog+0x330>)
 80048f0:	fb83 0301 	smull	r0, r3, r3, r1
 80048f4:	1158      	asrs	r0, r3, #5
 80048f6:	17cb      	asrs	r3, r1, #31
 80048f8:	1ac3      	subs	r3, r0, r3
 80048fa:	2064      	movs	r0, #100	@ 0x64
 80048fc:	fb00 f303 	mul.w	r3, r0, r3
 8004900:	1acb      	subs	r3, r1, r3
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	4a4a      	ldr	r2, [pc, #296]	@ (8004a30 <Run_jog+0x330>)
 8004906:	fb82 1203 	smull	r1, r2, r2, r3
 800490a:	1152      	asrs	r2, r2, #5
 800490c:	17db      	asrs	r3, r3, #31
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	4a49      	ldr	r2, [pc, #292]	@ (8004a38 <Run_jog+0x338>)
 8004912:	6093      	str	r3, [r2, #8]
		PlaceArray[3] = ((PlaceOrder % 100) - (PlaceOrder % 10)) / 10;
 8004914:	4b42      	ldr	r3, [pc, #264]	@ (8004a20 <Run_jog+0x320>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a45      	ldr	r2, [pc, #276]	@ (8004a30 <Run_jog+0x330>)
 800491a:	fb82 1203 	smull	r1, r2, r2, r3
 800491e:	1151      	asrs	r1, r2, #5
 8004920:	17da      	asrs	r2, r3, #31
 8004922:	1a89      	subs	r1, r1, r2
 8004924:	2264      	movs	r2, #100	@ 0x64
 8004926:	fb01 f202 	mul.w	r2, r1, r2
 800492a:	1a99      	subs	r1, r3, r2
 800492c:	4b3c      	ldr	r3, [pc, #240]	@ (8004a20 <Run_jog+0x320>)
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	4b40      	ldr	r3, [pc, #256]	@ (8004a34 <Run_jog+0x334>)
 8004932:	fb83 2300 	smull	r2, r3, r3, r0
 8004936:	109a      	asrs	r2, r3, #2
 8004938:	17c3      	asrs	r3, r0, #31
 800493a:	1ad2      	subs	r2, r2, r3
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	1ac2      	subs	r2, r0, r3
 8004946:	1a8b      	subs	r3, r1, r2
 8004948:	4a3a      	ldr	r2, [pc, #232]	@ (8004a34 <Run_jog+0x334>)
 800494a:	fb82 1203 	smull	r1, r2, r2, r3
 800494e:	1092      	asrs	r2, r2, #2
 8004950:	17db      	asrs	r3, r3, #31
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	4a38      	ldr	r2, [pc, #224]	@ (8004a38 <Run_jog+0x338>)
 8004956:	60d3      	str	r3, [r2, #12]
		PlaceArray[4] = PlaceOrder % 10;
 8004958:	4b31      	ldr	r3, [pc, #196]	@ (8004a20 <Run_jog+0x320>)
 800495a:	6819      	ldr	r1, [r3, #0]
 800495c:	4b35      	ldr	r3, [pc, #212]	@ (8004a34 <Run_jog+0x334>)
 800495e:	fb83 2301 	smull	r2, r3, r3, r1
 8004962:	109a      	asrs	r2, r3, #2
 8004964:	17cb      	asrs	r3, r1, #31
 8004966:	1ad2      	subs	r2, r2, r3
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	1aca      	subs	r2, r1, r3
 8004972:	4b31      	ldr	r3, [pc, #196]	@ (8004a38 <Run_jog+0x338>)
 8004974:	611a      	str	r2, [r3, #16]

		registerFrame[0x01].U16 = 0b0000;
 8004976:	4b24      	ldr	r3, [pc, #144]	@ (8004a08 <Run_jog+0x308>)
 8004978:	2200      	movs	r2, #0
 800497a:	805a      	strh	r2, [r3, #2]
		LED_Auto();
 800497c:	f000 f9de 	bl	8004d3c <LED_Auto>

	}
	if (Jog_state_triger == 0 && set_jog_state == 1){
 8004980:	4b23      	ldr	r3, [pc, #140]	@ (8004a10 <Run_jog+0x310>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f040 812e 	bne.w	8004be6 <Run_jog+0x4e6>
 800498a:	4b20      	ldr	r3, [pc, #128]	@ (8004a0c <Run_jog+0x30c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b01      	cmp	r3, #1
 8004990:	f040 8129 	bne.w	8004be6 <Run_jog+0x4e6>

		// run 5 loop of pick and place

		if(Jog_oneloop_trigger == 0){ //Go pick
 8004994:	4b1f      	ldr	r3, [pc, #124]	@ (8004a14 <Run_jog+0x314>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	f040 809e 	bne.w	8004ada <Run_jog+0x3da>
			Moving_status = 4; //Go pick
 800499e:	4b27      	ldr	r3, [pc, #156]	@ (8004a3c <Run_jog+0x33c>)
 80049a0:	2204      	movs	r2, #4
 80049a2:	601a      	str	r2, [r3, #0]
			registerFrame[0x10].U16 =  Moving_status;
 80049a4:	4b25      	ldr	r3, [pc, #148]	@ (8004a3c <Run_jog+0x33c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	4b17      	ldr	r3, [pc, #92]	@ (8004a08 <Run_jog+0x308>)
 80049ac:	841a      	strh	r2, [r3, #32]

			mode = 1;
 80049ae:	4b24      	ldr	r3, [pc, #144]	@ (8004a40 <Run_jog+0x340>)
 80049b0:	2201      	movs	r2, #1
 80049b2:	701a      	strb	r2, [r3, #0]
			setPosition = shelves_pos[PickArray[Jog_order]]-10; //Update set point
 80049b4:	4b18      	ldr	r3, [pc, #96]	@ (8004a18 <Run_jog+0x318>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a28 <Run_jog+0x328>)
 80049ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049be:	4a21      	ldr	r2, [pc, #132]	@ (8004a44 <Run_jog+0x344>)
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	edd3 7a00 	vldr	s15, [r3]
 80049c8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80049cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a48 <Run_jog+0x348>)
 80049d2:	edc3 7a00 	vstr	s15, [r3]

			if(fabs(setPosition-QEIdata.linearPos) < 0.09){
 80049d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a48 <Run_jog+0x348>)
 80049d8:	ed93 7a00 	vldr	s14, [r3]
 80049dc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a4c <Run_jog+0x34c>)
 80049de:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80049e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049e6:	eef0 7ae7 	vabs.f32	s15, s15
 80049ea:	ee17 0a90 	vmov	r0, s15
 80049ee:	f7fb fd77 	bl	80004e0 <__aeabi_f2d>
 80049f2:	a303      	add	r3, pc, #12	@ (adr r3, 8004a00 <Run_jog+0x300>)
 80049f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f8:	e02a      	b.n	8004a50 <Run_jog+0x350>
 80049fa:	bf00      	nop
 80049fc:	f3af 8000 	nop.w
 8004a00:	70a3d70a 	.word	0x70a3d70a
 8004a04:	3fb70a3d 	.word	0x3fb70a3d
 8004a08:	20001128 	.word	0x20001128
 8004a0c:	200012e8 	.word	0x200012e8
 8004a10:	20001318 	.word	0x20001318
 8004a14:	20001320 	.word	0x20001320
 8004a18:	2000131c 	.word	0x2000131c
 8004a1c:	200012e0 	.word	0x200012e0
 8004a20:	200012e4 	.word	0x200012e4
 8004a24:	68db8bad 	.word	0x68db8bad
 8004a28:	200012ec 	.word	0x200012ec
 8004a2c:	10624dd3 	.word	0x10624dd3
 8004a30:	51eb851f 	.word	0x51eb851f
 8004a34:	66666667 	.word	0x66666667
 8004a38:	20001300 	.word	0x20001300
 8004a3c:	20001314 	.word	0x20001314
 8004a40:	20000200 	.word	0x20000200
 8004a44:	20000bc8 	.word	0x20000bc8
 8004a48:	20000c2c 	.word	0x20000c2c
 8004a4c:	20000b08 	.word	0x20000b08
 8004a50:	f7fc f810 	bl	8000a74 <__aeabi_dcmplt>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 80b8 	beq.w	8004bcc <Run_jog+0x4cc>
					mode = 3;
 8004a5c:	4b72      	ldr	r3, [pc, #456]	@ (8004c28 <Run_jog+0x528>)
 8004a5e:	2203      	movs	r2, #3
 8004a60:	701a      	strb	r2, [r3, #0]
					Vin = 0;
 8004a62:	4b72      	ldr	r3, [pc, #456]	@ (8004c2c <Run_jog+0x52c>)
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8004a6a:	4b71      	ldr	r3, [pc, #452]	@ (8004c30 <Run_jog+0x530>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	635a      	str	r2, [r3, #52]	@ 0x34

					//pick
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8004a72:	2200      	movs	r2, #0
 8004a74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a7c:	f002 ff4c 	bl	8007918 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8004a80:	2201      	movs	r2, #1
 8004a82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a86:	486b      	ldr	r0, [pc, #428]	@ (8004c34 <Run_jog+0x534>)
 8004a88:	f002 ff46 	bl	8007918 <HAL_GPIO_WritePin>
					HAL_Delay(750);
 8004a8c:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8004a90:	f000 fde0 	bl	8005654 <HAL_Delay>

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8004a94:	2201      	movs	r2, #1
 8004a96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004a9a:	4867      	ldr	r0, [pc, #412]	@ (8004c38 <Run_jog+0x538>)
 8004a9c:	f002 ff3c 	bl	8007918 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 8004aa0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004aa4:	f000 fdd6 	bl	8005654 <HAL_Delay>

					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004aae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ab2:	f002 ff31 	bl	8007918 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004abc:	485d      	ldr	r0, [pc, #372]	@ (8004c34 <Run_jog+0x534>)
 8004abe:	f002 ff2b 	bl	8007918 <HAL_GPIO_WritePin>
					HAL_Delay(750);
 8004ac2:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8004ac6:	f000 fdc5 	bl	8005654 <HAL_Delay>

					Jog_oneloop_trigger = 1;
 8004aca:	4b5c      	ldr	r3, [pc, #368]	@ (8004c3c <Run_jog+0x53c>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	601a      	str	r2, [r3, #0]
					setPosition = QEIdata.linearPos;
 8004ad0:	4b5b      	ldr	r3, [pc, #364]	@ (8004c40 <Run_jog+0x540>)
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad4:	4a5b      	ldr	r2, [pc, #364]	@ (8004c44 <Run_jog+0x544>)
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	e078      	b.n	8004bcc <Run_jog+0x4cc>
			}
		}
		else if(Jog_oneloop_trigger == 1){ //Go place
 8004ada:	4b58      	ldr	r3, [pc, #352]	@ (8004c3c <Run_jog+0x53c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d174      	bne.n	8004bcc <Run_jog+0x4cc>
			Moving_status = 8; //Go place
 8004ae2:	4b59      	ldr	r3, [pc, #356]	@ (8004c48 <Run_jog+0x548>)
 8004ae4:	2208      	movs	r2, #8
 8004ae6:	601a      	str	r2, [r3, #0]
			registerFrame[0x10].U16 =  Moving_status;
 8004ae8:	4b57      	ldr	r3, [pc, #348]	@ (8004c48 <Run_jog+0x548>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	4b57      	ldr	r3, [pc, #348]	@ (8004c4c <Run_jog+0x54c>)
 8004af0:	841a      	strh	r2, [r3, #32]

			mode = 1;
 8004af2:	4b4d      	ldr	r3, [pc, #308]	@ (8004c28 <Run_jog+0x528>)
 8004af4:	2201      	movs	r2, #1
 8004af6:	701a      	strb	r2, [r3, #0]
			setPosition = shelves_pos[PlaceArray[Jog_order]]+10; //Update set point
 8004af8:	4b55      	ldr	r3, [pc, #340]	@ (8004c50 <Run_jog+0x550>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a55      	ldr	r2, [pc, #340]	@ (8004c54 <Run_jog+0x554>)
 8004afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b02:	4a55      	ldr	r2, [pc, #340]	@ (8004c58 <Run_jog+0x558>)
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	edd3 7a00 	vldr	s15, [r3]
 8004b0c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004b10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b14:	4b4b      	ldr	r3, [pc, #300]	@ (8004c44 <Run_jog+0x544>)
 8004b16:	edc3 7a00 	vstr	s15, [r3]

			if(fabs(setPosition-QEIdata.linearPos) < 0.09){
 8004b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8004c44 <Run_jog+0x544>)
 8004b1c:	ed93 7a00 	vldr	s14, [r3]
 8004b20:	4b47      	ldr	r3, [pc, #284]	@ (8004c40 <Run_jog+0x540>)
 8004b22:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b2a:	eef0 7ae7 	vabs.f32	s15, s15
 8004b2e:	ee17 0a90 	vmov	r0, s15
 8004b32:	f7fb fcd5 	bl	80004e0 <__aeabi_f2d>
 8004b36:	a33a      	add	r3, pc, #232	@ (adr r3, 8004c20 <Run_jog+0x520>)
 8004b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3c:	f7fb ff9a 	bl	8000a74 <__aeabi_dcmplt>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d042      	beq.n	8004bcc <Run_jog+0x4cc>
					mode = 3;
 8004b46:	4b38      	ldr	r3, [pc, #224]	@ (8004c28 <Run_jog+0x528>)
 8004b48:	2203      	movs	r2, #3
 8004b4a:	701a      	strb	r2, [r3, #0]
					Vin = 0;
 8004b4c:	4b37      	ldr	r3, [pc, #220]	@ (8004c2c <Run_jog+0x52c>)
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8004b54:	4b36      	ldr	r3, [pc, #216]	@ (8004c30 <Run_jog+0x530>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	635a      	str	r2, [r3, #52]	@ 0x34

					//place
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004b62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b66:	f002 fed7 	bl	8007918 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004b70:	4830      	ldr	r0, [pc, #192]	@ (8004c34 <Run_jog+0x534>)
 8004b72:	f002 fed1 	bl	8007918 <HAL_GPIO_WritePin>
					HAL_Delay(750);
 8004b76:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8004b7a:	f000 fd6b 	bl	8005654 <HAL_Delay>

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004b84:	482c      	ldr	r0, [pc, #176]	@ (8004c38 <Run_jog+0x538>)
 8004b86:	f002 fec7 	bl	8007918 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 8004b8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004b8e:	f000 fd61 	bl	8005654 <HAL_Delay>

					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8004b92:	2201      	movs	r2, #1
 8004b94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004b98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b9c:	f002 febc 	bl	8007918 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004ba6:	4823      	ldr	r0, [pc, #140]	@ (8004c34 <Run_jog+0x534>)
 8004ba8:	f002 feb6 	bl	8007918 <HAL_GPIO_WritePin>
					HAL_Delay(750);
 8004bac:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8004bb0:	f000 fd50 	bl	8005654 <HAL_Delay>

					Jog_order += 1;
 8004bb4:	4b26      	ldr	r3, [pc, #152]	@ (8004c50 <Run_jog+0x550>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	4a25      	ldr	r2, [pc, #148]	@ (8004c50 <Run_jog+0x550>)
 8004bbc:	6013      	str	r3, [r2, #0]
					Jog_oneloop_trigger = 0;
 8004bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8004c3c <Run_jog+0x53c>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
					setPosition = QEIdata.linearPos;
 8004bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8004c40 <Run_jog+0x540>)
 8004bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc8:	4a1e      	ldr	r2, [pc, #120]	@ (8004c44 <Run_jog+0x544>)
 8004bca:	6013      	str	r3, [r2, #0]
			}
		}

		if(Jog_order == 5){
 8004bcc:	4b20      	ldr	r3, [pc, #128]	@ (8004c50 <Run_jog+0x550>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b05      	cmp	r3, #5
 8004bd2:	d108      	bne.n	8004be6 <Run_jog+0x4e6>
			mode = 3;
 8004bd4:	4b14      	ldr	r3, [pc, #80]	@ (8004c28 <Run_jog+0x528>)
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	701a      	strb	r2, [r3, #0]
			Jog_state_triger = 1;
 8004bda:	4b20      	ldr	r3, [pc, #128]	@ (8004c5c <Run_jog+0x55c>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	601a      	str	r2, [r3, #0]
			Jog_order = 0;
 8004be0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c50 <Run_jog+0x550>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]
		}
	}

	if (Jog_state_triger == 1 && set_jog_state == 1)
 8004be6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c5c <Run_jog+0x55c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d113      	bne.n	8004c16 <Run_jog+0x516>
 8004bee:	4b1c      	ldr	r3, [pc, #112]	@ (8004c60 <Run_jog+0x560>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d10f      	bne.n	8004c16 <Run_jog+0x516>
	{
		Moving_status = 0;
 8004bf6:	4b14      	ldr	r3, [pc, #80]	@ (8004c48 <Run_jog+0x548>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
		registerFrame[0x10].U16 =  Moving_status;
 8004bfc:	4b12      	ldr	r3, [pc, #72]	@ (8004c48 <Run_jog+0x548>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	4b12      	ldr	r3, [pc, #72]	@ (8004c4c <Run_jog+0x54c>)
 8004c04:	841a      	strh	r2, [r3, #32]
		Jog_state_triger = 0;
 8004c06:	4b15      	ldr	r3, [pc, #84]	@ (8004c5c <Run_jog+0x55c>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
		set_jog_state = 0;
 8004c0c:	4b14      	ldr	r3, [pc, #80]	@ (8004c60 <Run_jog+0x560>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
		LED_Ready();
 8004c12:	f000 f86f 	bl	8004cf4 <LED_Ready>
	}
}
 8004c16:	bf00      	nop
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	f3af 8000 	nop.w
 8004c20:	70a3d70a 	.word	0x70a3d70a
 8004c24:	3fb70a3d 	.word	0x3fb70a3d
 8004c28:	20000200 	.word	0x20000200
 8004c2c:	20000b70 	.word	0x20000b70
 8004c30:	200004b0 	.word	0x200004b0
 8004c34:	48000800 	.word	0x48000800
 8004c38:	48000400 	.word	0x48000400
 8004c3c:	20001320 	.word	0x20001320
 8004c40:	20000b08 	.word	0x20000b08
 8004c44:	20000c2c 	.word	0x20000c2c
 8004c48:	20001314 	.word	0x20001314
 8004c4c:	20001128 	.word	0x20001128
 8004c50:	2000131c 	.word	0x2000131c
 8004c54:	20001300 	.word	0x20001300
 8004c58:	20000bc8 	.word	0x20000bc8
 8004c5c:	20001318 	.word	0x20001318
 8004c60:	200012e8 	.word	0x200012e8

08004c64 <LED_Emergency>:
//-----------------------------------------------------------//

//-----------------------LED STATUS--------------------------//

void LED_Emergency(){
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8004c68:	2200      	movs	r2, #0
 8004c6a:	2104      	movs	r1, #4
 8004c6c:	480d      	ldr	r0, [pc, #52]	@ (8004ca4 <LED_Emergency+0x40>)
 8004c6e:	f002 fe53 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8004c72:	2201      	movs	r2, #1
 8004c74:	2180      	movs	r1, #128	@ 0x80
 8004c76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c7a:	f002 fe4d 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8004c7e:	2201      	movs	r2, #1
 8004c80:	2140      	movs	r1, #64	@ 0x40
 8004c82:	4809      	ldr	r0, [pc, #36]	@ (8004ca8 <LED_Emergency+0x44>)
 8004c84:	f002 fe48 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8004c88:	2201      	movs	r2, #1
 8004c8a:	2180      	movs	r1, #128	@ 0x80
 8004c8c:	4805      	ldr	r0, [pc, #20]	@ (8004ca4 <LED_Emergency+0x40>)
 8004c8e:	f002 fe43 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8004c92:	2201      	movs	r2, #1
 8004c94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c9c:	f002 fe3c 	bl	8007918 <HAL_GPIO_WritePin>
}
 8004ca0:	bf00      	nop
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	48000800 	.word	0x48000800
 8004ca8:	48000400 	.word	0x48000400

08004cac <LED_Homing>:

void LED_Homing(){
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	2104      	movs	r1, #4
 8004cb4:	480d      	ldr	r0, [pc, #52]	@ (8004cec <LED_Homing+0x40>)
 8004cb6:	f002 fe2f 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8004cba:	2201      	movs	r2, #1
 8004cbc:	2180      	movs	r1, #128	@ 0x80
 8004cbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004cc2:	f002 fe29 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	2140      	movs	r1, #64	@ 0x40
 8004cca:	4809      	ldr	r0, [pc, #36]	@ (8004cf0 <LED_Homing+0x44>)
 8004ccc:	f002 fe24 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2180      	movs	r1, #128	@ 0x80
 8004cd4:	4805      	ldr	r0, [pc, #20]	@ (8004cec <LED_Homing+0x40>)
 8004cd6:	f002 fe1f 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004ce0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ce4:	f002 fe18 	bl	8007918 <HAL_GPIO_WritePin>
}
 8004ce8:	bf00      	nop
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	48000800 	.word	0x48000800
 8004cf0:	48000400 	.word	0x48000400

08004cf4 <LED_Ready>:

void LED_Ready(){
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	2104      	movs	r1, #4
 8004cfc:	480d      	ldr	r0, [pc, #52]	@ (8004d34 <LED_Ready+0x40>)
 8004cfe:	f002 fe0b 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8004d02:	2201      	movs	r2, #1
 8004d04:	2180      	movs	r1, #128	@ 0x80
 8004d06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d0a:	f002 fe05 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8004d0e:	2201      	movs	r2, #1
 8004d10:	2140      	movs	r1, #64	@ 0x40
 8004d12:	4809      	ldr	r0, [pc, #36]	@ (8004d38 <LED_Ready+0x44>)
 8004d14:	f002 fe00 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8004d18:	2201      	movs	r2, #1
 8004d1a:	2180      	movs	r1, #128	@ 0x80
 8004d1c:	4805      	ldr	r0, [pc, #20]	@ (8004d34 <LED_Ready+0x40>)
 8004d1e:	f002 fdfb 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8004d22:	2200      	movs	r2, #0
 8004d24:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004d28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d2c:	f002 fdf4 	bl	8007918 <HAL_GPIO_WritePin>
}
 8004d30:	bf00      	nop
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	48000800 	.word	0x48000800
 8004d38:	48000400 	.word	0x48000400

08004d3c <LED_Auto>:

void LED_Auto(){
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8004d40:	2201      	movs	r2, #1
 8004d42:	2104      	movs	r1, #4
 8004d44:	480d      	ldr	r0, [pc, #52]	@ (8004d7c <LED_Auto+0x40>)
 8004d46:	f002 fde7 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	2180      	movs	r1, #128	@ 0x80
 8004d4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d52:	f002 fde1 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8004d56:	2201      	movs	r2, #1
 8004d58:	2140      	movs	r1, #64	@ 0x40
 8004d5a:	4809      	ldr	r0, [pc, #36]	@ (8004d80 <LED_Auto+0x44>)
 8004d5c:	f002 fddc 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8004d60:	2201      	movs	r2, #1
 8004d62:	2180      	movs	r1, #128	@ 0x80
 8004d64:	4805      	ldr	r0, [pc, #20]	@ (8004d7c <LED_Auto+0x40>)
 8004d66:	f002 fdd7 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004d70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d74:	f002 fdd0 	bl	8007918 <HAL_GPIO_WritePin>

}
 8004d78:	bf00      	nop
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	48000800 	.word	0x48000800
 8004d80:	48000400 	.word	0x48000400

08004d84 <LED_Manual>:

void LED_Manual(){
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8004d88:	2201      	movs	r2, #1
 8004d8a:	2104      	movs	r1, #4
 8004d8c:	480d      	ldr	r0, [pc, #52]	@ (8004dc4 <LED_Manual+0x40>)
 8004d8e:	f002 fdc3 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8004d92:	2201      	movs	r2, #1
 8004d94:	2180      	movs	r1, #128	@ 0x80
 8004d96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d9a:	f002 fdbd 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2140      	movs	r1, #64	@ 0x40
 8004da2:	4809      	ldr	r0, [pc, #36]	@ (8004dc8 <LED_Manual+0x44>)
 8004da4:	f002 fdb8 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8004da8:	2201      	movs	r2, #1
 8004daa:	2180      	movs	r1, #128	@ 0x80
 8004dac:	4805      	ldr	r0, [pc, #20]	@ (8004dc4 <LED_Manual+0x40>)
 8004dae:	f002 fdb3 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8004db2:	2201      	movs	r2, #1
 8004db4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004db8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004dbc:	f002 fdac 	bl	8007918 <HAL_GPIO_WritePin>
}
 8004dc0:	bf00      	nop
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	48000800 	.word	0x48000800
 8004dc8:	48000400 	.word	0x48000400

08004dcc <checkEmer>:

void checkEmer(){
 8004dcc:	b5b0      	push	{r4, r5, r7, lr}
 8004dce:	af00      	add	r7, sp, #0
	//Check Emergency Status
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 1){
 8004dd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004dd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004dd8:	f002 fd86 	bl	80078e8 <HAL_GPIO_ReadPin>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d14b      	bne.n	8004e7a <checkEmer+0xae>
		Emer_count += 1;
 8004de2:	4b29      	ldr	r3, [pc, #164]	@ (8004e88 <checkEmer+0xbc>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	3301      	adds	r3, #1
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	4b27      	ldr	r3, [pc, #156]	@ (8004e88 <checkEmer+0xbc>)
 8004dec:	701a      	strb	r2, [r3, #0]
		if(Emer_count == 1){
 8004dee:	4b26      	ldr	r3, [pc, #152]	@ (8004e88 <checkEmer+0xbc>)
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d10b      	bne.n	8004e0e <checkEmer+0x42>
			Emer_timestamp = micros() + 5000000;
 8004df6:	f7fd fed7 	bl	8002ba8 <micros>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4923      	ldr	r1, [pc, #140]	@ (8004e8c <checkEmer+0xc0>)
 8004e00:	1854      	adds	r4, r2, r1
 8004e02:	f143 0500 	adc.w	r5, r3, #0
 8004e06:	4b22      	ldr	r3, [pc, #136]	@ (8004e90 <checkEmer+0xc4>)
 8004e08:	e9c3 4500 	strd	r4, r5, [r3]
 8004e0c:	e035      	b.n	8004e7a <checkEmer+0xae>
		}
		else if(micros()>Emer_timestamp && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 1){
 8004e0e:	f7fd fecb 	bl	8002ba8 <micros>
 8004e12:	4b1f      	ldr	r3, [pc, #124]	@ (8004e90 <checkEmer+0xc4>)
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	4282      	cmp	r2, r0
 8004e1a:	418b      	sbcs	r3, r1
 8004e1c:	d22d      	bcs.n	8004e7a <checkEmer+0xae>
 8004e1e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004e22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e26:	f002 fd5f 	bl	80078e8 <HAL_GPIO_ReadPin>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d124      	bne.n	8004e7a <checkEmer+0xae>
			emerStatus = 1;
 8004e30:	4b18      	ldr	r3, [pc, #96]	@ (8004e94 <checkEmer+0xc8>)
 8004e32:	2201      	movs	r2, #1
 8004e34:	701a      	strb	r2, [r3, #0]
			mode = 4;
 8004e36:	4b18      	ldr	r3, [pc, #96]	@ (8004e98 <checkEmer+0xcc>)
 8004e38:	2204      	movs	r2, #4
 8004e3a:	701a      	strb	r2, [r3, #0]
			Vin = 0;
 8004e3c:	4b17      	ldr	r3, [pc, #92]	@ (8004e9c <checkEmer+0xd0>)
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8004e44:	4b16      	ldr	r3, [pc, #88]	@ (8004ea0 <checkEmer+0xd4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	635a      	str	r2, [r3, #52]	@ 0x34
			LED_Emergency();
 8004e4c:	f7ff ff0a 	bl	8004c64 <LED_Emergency>
		}
	}
	while(emerStatus == 1){
 8004e50:	e013      	b.n	8004e7a <checkEmer+0xae>
		Modbus_Protocal_Worker();
 8004e52:	f7fc fa0f 	bl	8001274 <Modbus_Protocal_Worker>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1){
 8004e56:	2104      	movs	r1, #4
 8004e58:	4812      	ldr	r0, [pc, #72]	@ (8004ea4 <checkEmer+0xd8>)
 8004e5a:	f002 fd45 	bl	80078e8 <HAL_GPIO_ReadPin>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d10a      	bne.n	8004e7a <checkEmer+0xae>
			 emergency_reset = 1;
 8004e64:	4b10      	ldr	r3, [pc, #64]	@ (8004ea8 <checkEmer+0xdc>)
 8004e66:	2201      	movs	r2, #1
 8004e68:	701a      	strb	r2, [r3, #0]
			 button_reset_input();
 8004e6a:	f7fe ffe3 	bl	8003e34 <button_reset_input>
			 emerStatus = 0;
 8004e6e:	4b09      	ldr	r3, [pc, #36]	@ (8004e94 <checkEmer+0xc8>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	701a      	strb	r2, [r3, #0]
			 Emer_count = 0;
 8004e74:	4b04      	ldr	r3, [pc, #16]	@ (8004e88 <checkEmer+0xbc>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	701a      	strb	r2, [r3, #0]
	while(emerStatus == 1){
 8004e7a:	4b06      	ldr	r3, [pc, #24]	@ (8004e94 <checkEmer+0xc8>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d0e7      	beq.n	8004e52 <checkEmer+0x86>
		}
	}
}
 8004e82:	bf00      	nop
 8004e84:	bf00      	nop
 8004e86:	bdb0      	pop	{r4, r5, r7, pc}
 8004e88:	200014a4 	.word	0x200014a4
 8004e8c:	004c4b40 	.word	0x004c4b40
 8004e90:	200014a8 	.word	0x200014a8
 8004e94:	20001498 	.word	0x20001498
 8004e98:	20000200 	.word	0x20000200
 8004e9c:	20000b70 	.word	0x20000b70
 8004ea0:	200004b0 	.word	0x200004b0
 8004ea4:	48000c00 	.word	0x48000c00
 8004ea8:	20000bc4 	.word	0x20000bc4

08004eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004eb0:	b672      	cpsid	i
}
 8004eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004eb4:	bf00      	nop
 8004eb6:	e7fd      	b.n	8004eb4 <Error_Handler+0x8>

08004eb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8004efc <HAL_MspInit+0x44>)
 8004ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8004efc <HAL_MspInit+0x44>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	6613      	str	r3, [r2, #96]	@ 0x60
 8004eca:	4b0c      	ldr	r3, [pc, #48]	@ (8004efc <HAL_MspInit+0x44>)
 8004ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	607b      	str	r3, [r7, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ed6:	4b09      	ldr	r3, [pc, #36]	@ (8004efc <HAL_MspInit+0x44>)
 8004ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eda:	4a08      	ldr	r2, [pc, #32]	@ (8004efc <HAL_MspInit+0x44>)
 8004edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ee0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ee2:	4b06      	ldr	r3, [pc, #24]	@ (8004efc <HAL_MspInit+0x44>)
 8004ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004eee:	f002 fde7 	bl	8007ac0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ef2:	bf00      	nop
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40021000 	.word	0x40021000

08004f00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b0a0      	sub	sp, #128	@ 0x80
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f08:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	605a      	str	r2, [r3, #4]
 8004f12:	609a      	str	r2, [r3, #8]
 8004f14:	60da      	str	r2, [r3, #12]
 8004f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f18:	f107 0318 	add.w	r3, r7, #24
 8004f1c:	2254      	movs	r2, #84	@ 0x54
 8004f1e:	2100      	movs	r1, #0
 8004f20:	4618      	mov	r0, r3
 8004f22:	f008 f9a1 	bl	800d268 <memset>
  if(hadc->Instance==ADC1)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f2e:	d178      	bne.n	8005022 <HAL_ADC_MspInit+0x122>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004f30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f34:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004f36:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004f3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f3c:	f107 0318 	add.w	r3, r7, #24
 8004f40:	4618      	mov	r0, r3
 8004f42:	f003 fafb 	bl	800853c <HAL_RCCEx_PeriphCLKConfig>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004f4c:	f7ff ffae 	bl	8004eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004f50:	4b36      	ldr	r3, [pc, #216]	@ (800502c <HAL_ADC_MspInit+0x12c>)
 8004f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f54:	4a35      	ldr	r2, [pc, #212]	@ (800502c <HAL_ADC_MspInit+0x12c>)
 8004f56:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004f5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f5c:	4b33      	ldr	r3, [pc, #204]	@ (800502c <HAL_ADC_MspInit+0x12c>)
 8004f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f68:	4b30      	ldr	r3, [pc, #192]	@ (800502c <HAL_ADC_MspInit+0x12c>)
 8004f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f6c:	4a2f      	ldr	r2, [pc, #188]	@ (800502c <HAL_ADC_MspInit+0x12c>)
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f74:	4b2d      	ldr	r3, [pc, #180]	@ (800502c <HAL_ADC_MspInit+0x12c>)
 8004f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f80:	4b2a      	ldr	r3, [pc, #168]	@ (800502c <HAL_ADC_MspInit+0x12c>)
 8004f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f84:	4a29      	ldr	r2, [pc, #164]	@ (800502c <HAL_ADC_MspInit+0x12c>)
 8004f86:	f043 0302 	orr.w	r3, r3, #2
 8004f8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f8c:	4b27      	ldr	r3, [pc, #156]	@ (800502c <HAL_ADC_MspInit+0x12c>)
 8004f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fa4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004fae:	f002 fb19 	bl	80075e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004fb2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004fb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fc0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	481a      	ldr	r0, [pc, #104]	@ (8005030 <HAL_ADC_MspInit+0x130>)
 8004fc8:	f002 fb0c 	bl	80075e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 8004fcc:	4b19      	ldr	r3, [pc, #100]	@ (8005034 <HAL_ADC_MspInit+0x134>)
 8004fce:	4a1a      	ldr	r2, [pc, #104]	@ (8005038 <HAL_ADC_MspInit+0x138>)
 8004fd0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004fd2:	4b18      	ldr	r3, [pc, #96]	@ (8005034 <HAL_ADC_MspInit+0x134>)
 8004fd4:	2205      	movs	r2, #5
 8004fd6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fd8:	4b16      	ldr	r3, [pc, #88]	@ (8005034 <HAL_ADC_MspInit+0x134>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fde:	4b15      	ldr	r3, [pc, #84]	@ (8005034 <HAL_ADC_MspInit+0x134>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004fe4:	4b13      	ldr	r3, [pc, #76]	@ (8005034 <HAL_ADC_MspInit+0x134>)
 8004fe6:	2280      	movs	r2, #128	@ 0x80
 8004fe8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004fea:	4b12      	ldr	r3, [pc, #72]	@ (8005034 <HAL_ADC_MspInit+0x134>)
 8004fec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ff0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004ff2:	4b10      	ldr	r3, [pc, #64]	@ (8005034 <HAL_ADC_MspInit+0x134>)
 8004ff4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ff8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8005034 <HAL_ADC_MspInit+0x134>)
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005000:	4b0c      	ldr	r3, [pc, #48]	@ (8005034 <HAL_ADC_MspInit+0x134>)
 8005002:	2200      	movs	r2, #0
 8005004:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005006:	480b      	ldr	r0, [pc, #44]	@ (8005034 <HAL_ADC_MspInit+0x134>)
 8005008:	f001 ffba 	bl	8006f80 <HAL_DMA_Init>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 8005012:	f7ff ff4b 	bl	8004eac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a06      	ldr	r2, [pc, #24]	@ (8005034 <HAL_ADC_MspInit+0x134>)
 800501a:	655a      	str	r2, [r3, #84]	@ 0x54
 800501c:	4a05      	ldr	r2, [pc, #20]	@ (8005034 <HAL_ADC_MspInit+0x134>)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005022:	bf00      	nop
 8005024:	3780      	adds	r7, #128	@ 0x80
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	40021000 	.word	0x40021000
 8005030:	48000400 	.word	0x48000400
 8005034:	20000384 	.word	0x20000384
 8005038:	40020408 	.word	0x40020408

0800503c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08a      	sub	sp, #40	@ 0x28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005044:	f107 0314 	add.w	r3, r7, #20
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	605a      	str	r2, [r3, #4]
 800504e:	609a      	str	r2, [r3, #8]
 8005050:	60da      	str	r2, [r3, #12]
 8005052:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800505c:	d129      	bne.n	80050b2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800505e:	4b17      	ldr	r3, [pc, #92]	@ (80050bc <HAL_TIM_Encoder_MspInit+0x80>)
 8005060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005062:	4a16      	ldr	r2, [pc, #88]	@ (80050bc <HAL_TIM_Encoder_MspInit+0x80>)
 8005064:	f043 0301 	orr.w	r3, r3, #1
 8005068:	6593      	str	r3, [r2, #88]	@ 0x58
 800506a:	4b14      	ldr	r3, [pc, #80]	@ (80050bc <HAL_TIM_Encoder_MspInit+0x80>)
 800506c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	613b      	str	r3, [r7, #16]
 8005074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005076:	4b11      	ldr	r3, [pc, #68]	@ (80050bc <HAL_TIM_Encoder_MspInit+0x80>)
 8005078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800507a:	4a10      	ldr	r2, [pc, #64]	@ (80050bc <HAL_TIM_Encoder_MspInit+0x80>)
 800507c:	f043 0301 	orr.w	r3, r3, #1
 8005080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005082:	4b0e      	ldr	r3, [pc, #56]	@ (80050bc <HAL_TIM_Encoder_MspInit+0x80>)
 8005084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 800508e:	f248 0302 	movw	r3, #32770	@ 0x8002
 8005092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005094:	2302      	movs	r3, #2
 8005096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005098:	2300      	movs	r3, #0
 800509a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800509c:	2300      	movs	r3, #0
 800509e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80050a0:	2301      	movs	r3, #1
 80050a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050a4:	f107 0314 	add.w	r3, r7, #20
 80050a8:	4619      	mov	r1, r3
 80050aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80050ae:	f002 fa99 	bl	80075e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80050b2:	bf00      	nop
 80050b4:	3728      	adds	r7, #40	@ 0x28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40021000 	.word	0x40021000

080050c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a46      	ldr	r2, [pc, #280]	@ (80051e8 <HAL_TIM_Base_MspInit+0x128>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d10c      	bne.n	80050ec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80050d2:	4b46      	ldr	r3, [pc, #280]	@ (80051ec <HAL_TIM_Base_MspInit+0x12c>)
 80050d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d6:	4a45      	ldr	r2, [pc, #276]	@ (80051ec <HAL_TIM_Base_MspInit+0x12c>)
 80050d8:	f043 0302 	orr.w	r3, r3, #2
 80050dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80050de:	4b43      	ldr	r3, [pc, #268]	@ (80051ec <HAL_TIM_Base_MspInit+0x12c>)
 80050e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	61fb      	str	r3, [r7, #28]
 80050e8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80050ea:	e078      	b.n	80051de <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a3f      	ldr	r2, [pc, #252]	@ (80051f0 <HAL_TIM_Base_MspInit+0x130>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d10c      	bne.n	8005110 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80050f6:	4b3d      	ldr	r3, [pc, #244]	@ (80051ec <HAL_TIM_Base_MspInit+0x12c>)
 80050f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fa:	4a3c      	ldr	r2, [pc, #240]	@ (80051ec <HAL_TIM_Base_MspInit+0x12c>)
 80050fc:	f043 0304 	orr.w	r3, r3, #4
 8005100:	6593      	str	r3, [r2, #88]	@ 0x58
 8005102:	4b3a      	ldr	r3, [pc, #232]	@ (80051ec <HAL_TIM_Base_MspInit+0x12c>)
 8005104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	61bb      	str	r3, [r7, #24]
 800510c:	69bb      	ldr	r3, [r7, #24]
}
 800510e:	e066      	b.n	80051de <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM5)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a37      	ldr	r2, [pc, #220]	@ (80051f4 <HAL_TIM_Base_MspInit+0x134>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d114      	bne.n	8005144 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800511a:	4b34      	ldr	r3, [pc, #208]	@ (80051ec <HAL_TIM_Base_MspInit+0x12c>)
 800511c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800511e:	4a33      	ldr	r2, [pc, #204]	@ (80051ec <HAL_TIM_Base_MspInit+0x12c>)
 8005120:	f043 0308 	orr.w	r3, r3, #8
 8005124:	6593      	str	r3, [r2, #88]	@ 0x58
 8005126:	4b31      	ldr	r3, [pc, #196]	@ (80051ec <HAL_TIM_Base_MspInit+0x12c>)
 8005128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005132:	2200      	movs	r2, #0
 8005134:	2100      	movs	r1, #0
 8005136:	2032      	movs	r0, #50	@ 0x32
 8005138:	f001 feed 	bl	8006f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800513c:	2032      	movs	r0, #50	@ 0x32
 800513e:	f001 ff04 	bl	8006f4a <HAL_NVIC_EnableIRQ>
}
 8005142:	e04c      	b.n	80051de <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM6)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a2b      	ldr	r2, [pc, #172]	@ (80051f8 <HAL_TIM_Base_MspInit+0x138>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d114      	bne.n	8005178 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800514e:	4b27      	ldr	r3, [pc, #156]	@ (80051ec <HAL_TIM_Base_MspInit+0x12c>)
 8005150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005152:	4a26      	ldr	r2, [pc, #152]	@ (80051ec <HAL_TIM_Base_MspInit+0x12c>)
 8005154:	f043 0310 	orr.w	r3, r3, #16
 8005158:	6593      	str	r3, [r2, #88]	@ 0x58
 800515a:	4b24      	ldr	r3, [pc, #144]	@ (80051ec <HAL_TIM_Base_MspInit+0x12c>)
 800515c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515e:	f003 0310 	and.w	r3, r3, #16
 8005162:	613b      	str	r3, [r7, #16]
 8005164:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005166:	2200      	movs	r2, #0
 8005168:	2100      	movs	r1, #0
 800516a:	2036      	movs	r0, #54	@ 0x36
 800516c:	f001 fed3 	bl	8006f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005170:	2036      	movs	r0, #54	@ 0x36
 8005172:	f001 feea 	bl	8006f4a <HAL_NVIC_EnableIRQ>
}
 8005176:	e032      	b.n	80051de <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM15)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1f      	ldr	r2, [pc, #124]	@ (80051fc <HAL_TIM_Base_MspInit+0x13c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d114      	bne.n	80051ac <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005182:	4b1a      	ldr	r3, [pc, #104]	@ (80051ec <HAL_TIM_Base_MspInit+0x12c>)
 8005184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005186:	4a19      	ldr	r2, [pc, #100]	@ (80051ec <HAL_TIM_Base_MspInit+0x12c>)
 8005188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800518c:	6613      	str	r3, [r2, #96]	@ 0x60
 800518e:	4b17      	ldr	r3, [pc, #92]	@ (80051ec <HAL_TIM_Base_MspInit+0x12c>)
 8005190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800519a:	2200      	movs	r2, #0
 800519c:	2100      	movs	r1, #0
 800519e:	2018      	movs	r0, #24
 80051a0:	f001 feb9 	bl	8006f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80051a4:	2018      	movs	r0, #24
 80051a6:	f001 fed0 	bl	8006f4a <HAL_NVIC_EnableIRQ>
}
 80051aa:	e018      	b.n	80051de <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM16)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a13      	ldr	r2, [pc, #76]	@ (8005200 <HAL_TIM_Base_MspInit+0x140>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d113      	bne.n	80051de <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80051b6:	4b0d      	ldr	r3, [pc, #52]	@ (80051ec <HAL_TIM_Base_MspInit+0x12c>)
 80051b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ba:	4a0c      	ldr	r2, [pc, #48]	@ (80051ec <HAL_TIM_Base_MspInit+0x12c>)
 80051bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80051c2:	4b0a      	ldr	r3, [pc, #40]	@ (80051ec <HAL_TIM_Base_MspInit+0x12c>)
 80051c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ca:	60bb      	str	r3, [r7, #8]
 80051cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80051ce:	2200      	movs	r2, #0
 80051d0:	2100      	movs	r1, #0
 80051d2:	2019      	movs	r0, #25
 80051d4:	f001 fe9f 	bl	8006f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80051d8:	2019      	movs	r0, #25
 80051da:	f001 feb6 	bl	8006f4a <HAL_NVIC_EnableIRQ>
}
 80051de:	bf00      	nop
 80051e0:	3720      	adds	r7, #32
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40021000 	.word	0x40021000
 80051f0:	40000800 	.word	0x40000800
 80051f4:	40000c00 	.word	0x40000c00
 80051f8:	40001000 	.word	0x40001000
 80051fc:	40014000 	.word	0x40014000
 8005200:	40014400 	.word	0x40014400

08005204 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800520c:	f107 030c 	add.w	r3, r7, #12
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	605a      	str	r2, [r3, #4]
 8005216:	609a      	str	r2, [r3, #8]
 8005218:	60da      	str	r2, [r3, #12]
 800521a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a11      	ldr	r2, [pc, #68]	@ (8005268 <HAL_TIM_MspPostInit+0x64>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d11b      	bne.n	800525e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005226:	4b11      	ldr	r3, [pc, #68]	@ (800526c <HAL_TIM_MspPostInit+0x68>)
 8005228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800522a:	4a10      	ldr	r2, [pc, #64]	@ (800526c <HAL_TIM_MspPostInit+0x68>)
 800522c:	f043 0304 	orr.w	r3, r3, #4
 8005230:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005232:	4b0e      	ldr	r3, [pc, #56]	@ (800526c <HAL_TIM_MspPostInit+0x68>)
 8005234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	60bb      	str	r3, [r7, #8]
 800523c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800523e:	2340      	movs	r3, #64	@ 0x40
 8005240:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005242:	2302      	movs	r3, #2
 8005244:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005246:	2300      	movs	r3, #0
 8005248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800524a:	2300      	movs	r3, #0
 800524c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800524e:	2302      	movs	r3, #2
 8005250:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005252:	f107 030c 	add.w	r3, r7, #12
 8005256:	4619      	mov	r1, r3
 8005258:	4805      	ldr	r0, [pc, #20]	@ (8005270 <HAL_TIM_MspPostInit+0x6c>)
 800525a:	f002 f9c3 	bl	80075e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800525e:	bf00      	nop
 8005260:	3720      	adds	r7, #32
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	40000400 	.word	0x40000400
 800526c:	40021000 	.word	0x40021000
 8005270:	48000800 	.word	0x48000800

08005274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b09e      	sub	sp, #120	@ 0x78
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800527c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	605a      	str	r2, [r3, #4]
 8005286:	609a      	str	r2, [r3, #8]
 8005288:	60da      	str	r2, [r3, #12]
 800528a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800528c:	f107 0310 	add.w	r3, r7, #16
 8005290:	2254      	movs	r2, #84	@ 0x54
 8005292:	2100      	movs	r1, #0
 8005294:	4618      	mov	r0, r3
 8005296:	f007 ffe7 	bl	800d268 <memset>
  if(huart->Instance==USART2)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a4d      	ldr	r2, [pc, #308]	@ (80053d4 <HAL_UART_MspInit+0x160>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	f040 8092 	bne.w	80053ca <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80052a6:	2302      	movs	r3, #2
 80052a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80052ae:	f107 0310 	add.w	r3, r7, #16
 80052b2:	4618      	mov	r0, r3
 80052b4:	f003 f942 	bl	800853c <HAL_RCCEx_PeriphCLKConfig>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80052be:	f7ff fdf5 	bl	8004eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80052c2:	4b45      	ldr	r3, [pc, #276]	@ (80053d8 <HAL_UART_MspInit+0x164>)
 80052c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052c6:	4a44      	ldr	r2, [pc, #272]	@ (80053d8 <HAL_UART_MspInit+0x164>)
 80052c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80052ce:	4b42      	ldr	r3, [pc, #264]	@ (80053d8 <HAL_UART_MspInit+0x164>)
 80052d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052da:	4b3f      	ldr	r3, [pc, #252]	@ (80053d8 <HAL_UART_MspInit+0x164>)
 80052dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052de:	4a3e      	ldr	r2, [pc, #248]	@ (80053d8 <HAL_UART_MspInit+0x164>)
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80052e6:	4b3c      	ldr	r3, [pc, #240]	@ (80053d8 <HAL_UART_MspInit+0x164>)
 80052e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	60bb      	str	r3, [r7, #8]
 80052f0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80052f2:	230c      	movs	r3, #12
 80052f4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f6:	2302      	movs	r3, #2
 80052f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052fe:	2300      	movs	r3, #0
 8005300:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005302:	2307      	movs	r3, #7
 8005304:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005306:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800530a:	4619      	mov	r1, r3
 800530c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005310:	f002 f968 	bl	80075e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8005314:	4b31      	ldr	r3, [pc, #196]	@ (80053dc <HAL_UART_MspInit+0x168>)
 8005316:	4a32      	ldr	r2, [pc, #200]	@ (80053e0 <HAL_UART_MspInit+0x16c>)
 8005318:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800531a:	4b30      	ldr	r3, [pc, #192]	@ (80053dc <HAL_UART_MspInit+0x168>)
 800531c:	221b      	movs	r2, #27
 800531e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005320:	4b2e      	ldr	r3, [pc, #184]	@ (80053dc <HAL_UART_MspInit+0x168>)
 8005322:	2210      	movs	r2, #16
 8005324:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005326:	4b2d      	ldr	r3, [pc, #180]	@ (80053dc <HAL_UART_MspInit+0x168>)
 8005328:	2200      	movs	r2, #0
 800532a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800532c:	4b2b      	ldr	r3, [pc, #172]	@ (80053dc <HAL_UART_MspInit+0x168>)
 800532e:	2280      	movs	r2, #128	@ 0x80
 8005330:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005332:	4b2a      	ldr	r3, [pc, #168]	@ (80053dc <HAL_UART_MspInit+0x168>)
 8005334:	2200      	movs	r2, #0
 8005336:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005338:	4b28      	ldr	r3, [pc, #160]	@ (80053dc <HAL_UART_MspInit+0x168>)
 800533a:	2200      	movs	r2, #0
 800533c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800533e:	4b27      	ldr	r3, [pc, #156]	@ (80053dc <HAL_UART_MspInit+0x168>)
 8005340:	2200      	movs	r2, #0
 8005342:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005344:	4b25      	ldr	r3, [pc, #148]	@ (80053dc <HAL_UART_MspInit+0x168>)
 8005346:	2200      	movs	r2, #0
 8005348:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800534a:	4824      	ldr	r0, [pc, #144]	@ (80053dc <HAL_UART_MspInit+0x168>)
 800534c:	f001 fe18 	bl	8006f80 <HAL_DMA_Init>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8005356:	f7ff fda9 	bl	8004eac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a1f      	ldr	r2, [pc, #124]	@ (80053dc <HAL_UART_MspInit+0x168>)
 800535e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005360:	4a1e      	ldr	r2, [pc, #120]	@ (80053dc <HAL_UART_MspInit+0x168>)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8005366:	4b1f      	ldr	r3, [pc, #124]	@ (80053e4 <HAL_UART_MspInit+0x170>)
 8005368:	4a1f      	ldr	r2, [pc, #124]	@ (80053e8 <HAL_UART_MspInit+0x174>)
 800536a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800536c:	4b1d      	ldr	r3, [pc, #116]	@ (80053e4 <HAL_UART_MspInit+0x170>)
 800536e:	221a      	movs	r2, #26
 8005370:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005372:	4b1c      	ldr	r3, [pc, #112]	@ (80053e4 <HAL_UART_MspInit+0x170>)
 8005374:	2200      	movs	r2, #0
 8005376:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005378:	4b1a      	ldr	r3, [pc, #104]	@ (80053e4 <HAL_UART_MspInit+0x170>)
 800537a:	2200      	movs	r2, #0
 800537c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800537e:	4b19      	ldr	r3, [pc, #100]	@ (80053e4 <HAL_UART_MspInit+0x170>)
 8005380:	2280      	movs	r2, #128	@ 0x80
 8005382:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005384:	4b17      	ldr	r3, [pc, #92]	@ (80053e4 <HAL_UART_MspInit+0x170>)
 8005386:	2200      	movs	r2, #0
 8005388:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800538a:	4b16      	ldr	r3, [pc, #88]	@ (80053e4 <HAL_UART_MspInit+0x170>)
 800538c:	2200      	movs	r2, #0
 800538e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005390:	4b14      	ldr	r3, [pc, #80]	@ (80053e4 <HAL_UART_MspInit+0x170>)
 8005392:	2200      	movs	r2, #0
 8005394:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005396:	4b13      	ldr	r3, [pc, #76]	@ (80053e4 <HAL_UART_MspInit+0x170>)
 8005398:	2200      	movs	r2, #0
 800539a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800539c:	4811      	ldr	r0, [pc, #68]	@ (80053e4 <HAL_UART_MspInit+0x170>)
 800539e:	f001 fdef 	bl	8006f80 <HAL_DMA_Init>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80053a8:	f7ff fd80 	bl	8004eac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a0d      	ldr	r2, [pc, #52]	@ (80053e4 <HAL_UART_MspInit+0x170>)
 80053b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80053b4:	4a0b      	ldr	r2, [pc, #44]	@ (80053e4 <HAL_UART_MspInit+0x170>)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80053ba:	2200      	movs	r2, #0
 80053bc:	2100      	movs	r1, #0
 80053be:	2026      	movs	r0, #38	@ 0x26
 80053c0:	f001 fda9 	bl	8006f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80053c4:	2026      	movs	r0, #38	@ 0x26
 80053c6:	f001 fdc0 	bl	8006f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80053ca:	bf00      	nop
 80053cc:	3778      	adds	r7, #120	@ 0x78
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40004400 	.word	0x40004400
 80053d8:	40021000 	.word	0x40021000
 80053dc:	20000a44 	.word	0x20000a44
 80053e0:	40020008 	.word	0x40020008
 80053e4:	20000aa4 	.word	0x20000aa4
 80053e8:	4002001c 	.word	0x4002001c

080053ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80053f0:	bf00      	nop
 80053f2:	e7fd      	b.n	80053f0 <NMI_Handler+0x4>

080053f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053f8:	bf00      	nop
 80053fa:	e7fd      	b.n	80053f8 <HardFault_Handler+0x4>

080053fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005400:	bf00      	nop
 8005402:	e7fd      	b.n	8005400 <MemManage_Handler+0x4>

08005404 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005408:	bf00      	nop
 800540a:	e7fd      	b.n	8005408 <BusFault_Handler+0x4>

0800540c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005410:	bf00      	nop
 8005412:	e7fd      	b.n	8005410 <UsageFault_Handler+0x4>

08005414 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005418:	bf00      	nop
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005422:	b480      	push	{r7}
 8005424:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005426:	bf00      	nop
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005434:	bf00      	nop
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005442:	f000 f8e9 	bl	8005618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005446:	bf00      	nop
 8005448:	bd80      	pop	{r7, pc}
	...

0800544c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005450:	4802      	ldr	r0, [pc, #8]	@ (800545c <DMA1_Channel1_IRQHandler+0x10>)
 8005452:	f001 ff78 	bl	8007346 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005456:	bf00      	nop
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20000a44 	.word	0x20000a44

08005460 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005464:	4802      	ldr	r0, [pc, #8]	@ (8005470 <DMA1_Channel2_IRQHandler+0x10>)
 8005466:	f001 ff6e 	bl	8007346 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800546a:	bf00      	nop
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000aa4 	.word	0x20000aa4

08005474 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8005478:	4802      	ldr	r0, [pc, #8]	@ (8005484 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800547a:	f003 ffb1 	bl	80093e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800547e:	bf00      	nop
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	200007e0 	.word	0x200007e0

08005488 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800548c:	4802      	ldr	r0, [pc, #8]	@ (8005498 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800548e:	f003 ffa7 	bl	80093e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005492:	bf00      	nop
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	200008ac 	.word	0x200008ac

0800549c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80054a0:	4802      	ldr	r0, [pc, #8]	@ (80054ac <USART2_IRQHandler+0x10>)
 80054a2:	f005 fcdd 	bl	800ae60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80054a6:	bf00      	nop
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000978 	.word	0x20000978

080054b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80054b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80054b8:	f002 fa46 	bl	8007948 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80054bc:	bf00      	nop
 80054be:	bd80      	pop	{r7, pc}

080054c0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80054c4:	4802      	ldr	r0, [pc, #8]	@ (80054d0 <TIM5_IRQHandler+0x10>)
 80054c6:	f003 ff8b 	bl	80093e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80054ca:	bf00      	nop
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20000648 	.word	0x20000648

080054d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80054d8:	4802      	ldr	r0, [pc, #8]	@ (80054e4 <TIM6_DAC_IRQHandler+0x10>)
 80054da:	f003 ff81 	bl	80093e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80054de:	bf00      	nop
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20000714 	.word	0x20000714

080054e8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80054ec:	4802      	ldr	r0, [pc, #8]	@ (80054f8 <DMA2_Channel1_IRQHandler+0x10>)
 80054ee:	f001 ff2a 	bl	8007346 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80054f2:	bf00      	nop
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	20000384 	.word	0x20000384

080054fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005500:	4b06      	ldr	r3, [pc, #24]	@ (800551c <SystemInit+0x20>)
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005506:	4a05      	ldr	r2, [pc, #20]	@ (800551c <SystemInit+0x20>)
 8005508:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800550c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005510:	bf00      	nop
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	e000ed00 	.word	0xe000ed00

08005520 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 8005520:	480d      	ldr	r0, [pc, #52]	@ (8005558 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005522:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005524:	f7ff ffea 	bl	80054fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005528:	480c      	ldr	r0, [pc, #48]	@ (800555c <LoopForever+0x6>)
  ldr r1, =_edata
 800552a:	490d      	ldr	r1, [pc, #52]	@ (8005560 <LoopForever+0xa>)
  ldr r2, =_sidata
 800552c:	4a0d      	ldr	r2, [pc, #52]	@ (8005564 <LoopForever+0xe>)
  movs r3, #0
 800552e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005530:	e002      	b.n	8005538 <LoopCopyDataInit>

08005532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005536:	3304      	adds	r3, #4

08005538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800553a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800553c:	d3f9      	bcc.n	8005532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800553e:	4a0a      	ldr	r2, [pc, #40]	@ (8005568 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005540:	4c0a      	ldr	r4, [pc, #40]	@ (800556c <LoopForever+0x16>)
  movs r3, #0
 8005542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005544:	e001      	b.n	800554a <LoopFillZerobss>

08005546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005548:	3204      	adds	r2, #4

0800554a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800554a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800554c:	d3fb      	bcc.n	8005546 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800554e:	f007 fe99 	bl	800d284 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005552:	f7fc facd 	bl	8001af0 <main>

08005556 <LoopForever>:

LoopForever:
    b LoopForever
 8005556:	e7fe      	b.n	8005556 <LoopForever>
  ldr   r0, =_estack
 8005558:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800555c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005560:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8005564:	0800d580 	.word	0x0800d580
  ldr r2, =_sbss
 8005568:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 800556c:	20001604 	.word	0x20001604

08005570 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005570:	e7fe      	b.n	8005570 <ADC1_2_IRQHandler>

08005572 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b082      	sub	sp, #8
 8005576:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800557c:	2003      	movs	r0, #3
 800557e:	f001 fcbf 	bl	8006f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005582:	2000      	movs	r0, #0
 8005584:	f000 f80e 	bl	80055a4 <HAL_InitTick>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	71fb      	strb	r3, [r7, #7]
 8005592:	e001      	b.n	8005598 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005594:	f7ff fc90 	bl	8004eb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005598:	79fb      	ldrb	r3, [r7, #7]

}
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80055b0:	4b16      	ldr	r3, [pc, #88]	@ (800560c <HAL_InitTick+0x68>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d022      	beq.n	80055fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80055b8:	4b15      	ldr	r3, [pc, #84]	@ (8005610 <HAL_InitTick+0x6c>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	4b13      	ldr	r3, [pc, #76]	@ (800560c <HAL_InitTick+0x68>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80055c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80055c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 fcca 	bl	8006f66 <HAL_SYSTICK_Config>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10f      	bne.n	80055f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b0f      	cmp	r3, #15
 80055dc:	d809      	bhi.n	80055f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055de:	2200      	movs	r2, #0
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	f04f 30ff 	mov.w	r0, #4294967295
 80055e6:	f001 fc96 	bl	8006f16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80055ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005614 <HAL_InitTick+0x70>)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	e007      	b.n	8005602 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	73fb      	strb	r3, [r7, #15]
 80055f6:	e004      	b.n	8005602 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	73fb      	strb	r3, [r7, #15]
 80055fc:	e001      	b.n	8005602 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005602:	7bfb      	ldrb	r3, [r7, #15]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	20000290 	.word	0x20000290
 8005610:	20000288 	.word	0x20000288
 8005614:	2000028c 	.word	0x2000028c

08005618 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800561c:	4b05      	ldr	r3, [pc, #20]	@ (8005634 <HAL_IncTick+0x1c>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	4b05      	ldr	r3, [pc, #20]	@ (8005638 <HAL_IncTick+0x20>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4413      	add	r3, r2
 8005626:	4a03      	ldr	r2, [pc, #12]	@ (8005634 <HAL_IncTick+0x1c>)
 8005628:	6013      	str	r3, [r2, #0]
}
 800562a:	bf00      	nop
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	200014c8 	.word	0x200014c8
 8005638:	20000290 	.word	0x20000290

0800563c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
  return uwTick;
 8005640:	4b03      	ldr	r3, [pc, #12]	@ (8005650 <HAL_GetTick+0x14>)
 8005642:	681b      	ldr	r3, [r3, #0]
}
 8005644:	4618      	mov	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	200014c8 	.word	0x200014c8

08005654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800565c:	f7ff ffee 	bl	800563c <HAL_GetTick>
 8005660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566c:	d004      	beq.n	8005678 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800566e:	4b09      	ldr	r3, [pc, #36]	@ (8005694 <HAL_Delay+0x40>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4413      	add	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005678:	bf00      	nop
 800567a:	f7ff ffdf 	bl	800563c <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	429a      	cmp	r2, r3
 8005688:	d8f7      	bhi.n	800567a <HAL_Delay+0x26>
  {
  }
}
 800568a:	bf00      	nop
 800568c:	bf00      	nop
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20000290 	.word	0x20000290

08005698 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	431a      	orrs	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	609a      	str	r2, [r3, #8]
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	609a      	str	r2, [r3, #8]
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3360      	adds	r3, #96	@ 0x60
 8005712:	461a      	mov	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	4b08      	ldr	r3, [pc, #32]	@ (8005744 <LL_ADC_SetOffset+0x44>)
 8005722:	4013      	ands	r3, r2
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	4313      	orrs	r3, r2
 8005730:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005738:	bf00      	nop
 800573a:	371c      	adds	r7, #28
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	03fff000 	.word	0x03fff000

08005748 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3360      	adds	r3, #96	@ 0x60
 8005756:	461a      	mov	r2, r3
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005768:	4618      	mov	r0, r3
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3360      	adds	r3, #96	@ 0x60
 8005784:	461a      	mov	r2, r3
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	431a      	orrs	r2, r3
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b087      	sub	sp, #28
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3360      	adds	r3, #96	@ 0x60
 80057ba:	461a      	mov	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	431a      	orrs	r2, r3
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80057d4:	bf00      	nop
 80057d6:	371c      	adds	r7, #28
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3360      	adds	r3, #96	@ 0x60
 80057f0:	461a      	mov	r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	431a      	orrs	r2, r3
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800580a:	bf00      	nop
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	615a      	str	r2, [r3, #20]
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005862:	b480      	push	{r7}
 8005864:	b087      	sub	sp, #28
 8005866:	af00      	add	r7, sp, #0
 8005868:	60f8      	str	r0, [r7, #12]
 800586a:	60b9      	str	r1, [r7, #8]
 800586c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	3330      	adds	r3, #48	@ 0x30
 8005872:	461a      	mov	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	0a1b      	lsrs	r3, r3, #8
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	f003 030c 	and.w	r3, r3, #12
 800587e:	4413      	add	r3, r2
 8005880:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f003 031f 	and.w	r3, r3, #31
 800588c:	211f      	movs	r1, #31
 800588e:	fa01 f303 	lsl.w	r3, r1, r3
 8005892:	43db      	mvns	r3, r3
 8005894:	401a      	ands	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	0e9b      	lsrs	r3, r3, #26
 800589a:	f003 011f 	and.w	r1, r3, #31
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f003 031f 	and.w	r3, r3, #31
 80058a4:	fa01 f303 	lsl.w	r3, r1, r3
 80058a8:	431a      	orrs	r2, r3
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b087      	sub	sp, #28
 80058be:	af00      	add	r7, sp, #0
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3314      	adds	r3, #20
 80058ca:	461a      	mov	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	0e5b      	lsrs	r3, r3, #25
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	f003 0304 	and.w	r3, r3, #4
 80058d6:	4413      	add	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	0d1b      	lsrs	r3, r3, #20
 80058e2:	f003 031f 	and.w	r3, r3, #31
 80058e6:	2107      	movs	r1, #7
 80058e8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ec:	43db      	mvns	r3, r3
 80058ee:	401a      	ands	r2, r3
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	0d1b      	lsrs	r3, r3, #20
 80058f4:	f003 031f 	and.w	r3, r3, #31
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	fa01 f303 	lsl.w	r3, r1, r3
 80058fe:	431a      	orrs	r2, r3
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005904:	bf00      	nop
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005928:	43db      	mvns	r3, r3
 800592a:	401a      	ands	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f003 0318 	and.w	r3, r3, #24
 8005932:	4908      	ldr	r1, [pc, #32]	@ (8005954 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005934:	40d9      	lsrs	r1, r3
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	400b      	ands	r3, r1
 800593a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800593e:	431a      	orrs	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005946:	bf00      	nop
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	0007ffff 	.word	0x0007ffff

08005958 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f003 031f 	and.w	r3, r3, #31
}
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005984:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6093      	str	r3, [r2, #8]
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059ac:	d101      	bne.n	80059b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80059d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80059d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059fc:	d101      	bne.n	8005a02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80059fe:	2301      	movs	r3, #1
 8005a00:	e000      	b.n	8005a04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a24:	f043 0201 	orr.w	r2, r3, #1
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d101      	bne.n	8005a50 <LL_ADC_IsEnabled+0x18>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <LL_ADC_IsEnabled+0x1a>
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a6e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a72:	f043 0204 	orr.w	r2, r3, #4
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 0304 	and.w	r3, r3, #4
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d101      	bne.n	8005a9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e000      	b.n	8005aa0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d101      	bne.n	8005ac4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
	...

08005ad4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005ad4:	b590      	push	{r4, r7, lr}
 8005ad6:	b089      	sub	sp, #36	@ 0x24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e1a9      	b.n	8005e42 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d109      	bne.n	8005b10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff f9ff 	bl	8004f00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff ff3f 	bl	8005998 <LL_ADC_IsDeepPowerDownEnabled>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d004      	beq.n	8005b2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7ff ff25 	bl	8005974 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff ff5a 	bl	80059e8 <LL_ADC_IsInternalRegulatorEnabled>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d115      	bne.n	8005b66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff ff3e 	bl	80059c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b44:	4b9c      	ldr	r3, [pc, #624]	@ (8005db8 <HAL_ADC_Init+0x2e4>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	099b      	lsrs	r3, r3, #6
 8005b4a:	4a9c      	ldr	r2, [pc, #624]	@ (8005dbc <HAL_ADC_Init+0x2e8>)
 8005b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b50:	099b      	lsrs	r3, r3, #6
 8005b52:	3301      	adds	r3, #1
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005b58:	e002      	b.n	8005b60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1f9      	bne.n	8005b5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff ff3c 	bl	80059e8 <LL_ADC_IsInternalRegulatorEnabled>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10d      	bne.n	8005b92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b7a:	f043 0210 	orr.w	r2, r3, #16
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b86:	f043 0201 	orr.w	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff ff75 	bl	8005a86 <LL_ADC_REG_IsConversionOngoing>
 8005b9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f040 8142 	bne.w	8005e30 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f040 813e 	bne.w	8005e30 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005bbc:	f043 0202 	orr.w	r2, r3, #2
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff ff35 	bl	8005a38 <LL_ADC_IsEnabled>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d141      	bne.n	8005c58 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bdc:	d004      	beq.n	8005be8 <HAL_ADC_Init+0x114>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a77      	ldr	r2, [pc, #476]	@ (8005dc0 <HAL_ADC_Init+0x2ec>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d10f      	bne.n	8005c08 <HAL_ADC_Init+0x134>
 8005be8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005bec:	f7ff ff24 	bl	8005a38 <LL_ADC_IsEnabled>
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	4873      	ldr	r0, [pc, #460]	@ (8005dc0 <HAL_ADC_Init+0x2ec>)
 8005bf4:	f7ff ff20 	bl	8005a38 <LL_ADC_IsEnabled>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	4323      	orrs	r3, r4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	bf0c      	ite	eq
 8005c00:	2301      	moveq	r3, #1
 8005c02:	2300      	movne	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	e012      	b.n	8005c2e <HAL_ADC_Init+0x15a>
 8005c08:	486e      	ldr	r0, [pc, #440]	@ (8005dc4 <HAL_ADC_Init+0x2f0>)
 8005c0a:	f7ff ff15 	bl	8005a38 <LL_ADC_IsEnabled>
 8005c0e:	4604      	mov	r4, r0
 8005c10:	486d      	ldr	r0, [pc, #436]	@ (8005dc8 <HAL_ADC_Init+0x2f4>)
 8005c12:	f7ff ff11 	bl	8005a38 <LL_ADC_IsEnabled>
 8005c16:	4603      	mov	r3, r0
 8005c18:	431c      	orrs	r4, r3
 8005c1a:	486c      	ldr	r0, [pc, #432]	@ (8005dcc <HAL_ADC_Init+0x2f8>)
 8005c1c:	f7ff ff0c 	bl	8005a38 <LL_ADC_IsEnabled>
 8005c20:	4603      	mov	r3, r0
 8005c22:	4323      	orrs	r3, r4
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	bf0c      	ite	eq
 8005c28:	2301      	moveq	r3, #1
 8005c2a:	2300      	movne	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d012      	beq.n	8005c58 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c3a:	d004      	beq.n	8005c46 <HAL_ADC_Init+0x172>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a5f      	ldr	r2, [pc, #380]	@ (8005dc0 <HAL_ADC_Init+0x2ec>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d101      	bne.n	8005c4a <HAL_ADC_Init+0x176>
 8005c46:	4a62      	ldr	r2, [pc, #392]	@ (8005dd0 <HAL_ADC_Init+0x2fc>)
 8005c48:	e000      	b.n	8005c4c <HAL_ADC_Init+0x178>
 8005c4a:	4a62      	ldr	r2, [pc, #392]	@ (8005dd4 <HAL_ADC_Init+0x300>)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	4619      	mov	r1, r3
 8005c52:	4610      	mov	r0, r2
 8005c54:	f7ff fd20 	bl	8005698 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	7f5b      	ldrb	r3, [r3, #29]
 8005c5c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c62:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005c68:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005c6e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c76:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d106      	bne.n	8005c94 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	045b      	lsls	r3, r3, #17
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d009      	beq.n	8005cb0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	4b48      	ldr	r3, [pc, #288]	@ (8005dd8 <HAL_ADC_Init+0x304>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6812      	ldr	r2, [r2, #0]
 8005cbe:	69b9      	ldr	r1, [r7, #24]
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff fee4 	bl	8005aac <LL_ADC_INJ_IsConversionOngoing>
 8005ce4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d17f      	bne.n	8005dec <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d17c      	bne.n	8005dec <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005cf6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005cfe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d00:	4313      	orrs	r3, r2
 8005d02:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d0e:	f023 0302 	bic.w	r3, r3, #2
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6812      	ldr	r2, [r2, #0]
 8005d16:	69b9      	ldr	r1, [r7, #24]
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d017      	beq.n	8005d54 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691a      	ldr	r2, [r3, #16]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005d32:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d3c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005d40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6911      	ldr	r1, [r2, #16]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6812      	ldr	r2, [r2, #0]
 8005d4c:	430b      	orrs	r3, r1
 8005d4e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005d52:	e013      	b.n	8005d7c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691a      	ldr	r2, [r3, #16]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005d62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6812      	ldr	r2, [r2, #0]
 8005d70:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005d74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005d78:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d12a      	bne.n	8005ddc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005d90:	f023 0304 	bic.w	r3, r3, #4
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d9c:	4311      	orrs	r1, r2
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005da2:	4311      	orrs	r1, r2
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005da8:	430a      	orrs	r2, r1
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f042 0201 	orr.w	r2, r2, #1
 8005db4:	611a      	str	r2, [r3, #16]
 8005db6:	e019      	b.n	8005dec <HAL_ADC_Init+0x318>
 8005db8:	20000288 	.word	0x20000288
 8005dbc:	053e2d63 	.word	0x053e2d63
 8005dc0:	50000100 	.word	0x50000100
 8005dc4:	50000400 	.word	0x50000400
 8005dc8:	50000500 	.word	0x50000500
 8005dcc:	50000600 	.word	0x50000600
 8005dd0:	50000300 	.word	0x50000300
 8005dd4:	50000700 	.word	0x50000700
 8005dd8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691a      	ldr	r2, [r3, #16]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0201 	bic.w	r2, r2, #1
 8005dea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d10c      	bne.n	8005e0e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfa:	f023 010f 	bic.w	r1, r3, #15
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	1e5a      	subs	r2, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e0c:	e007      	b.n	8005e1e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 020f 	bic.w	r2, r2, #15
 8005e1c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e22:	f023 0303 	bic.w	r3, r3, #3
 8005e26:	f043 0201 	orr.w	r2, r3, #1
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005e2e:	e007      	b.n	8005e40 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e34:	f043 0210 	orr.w	r2, r3, #16
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005e40:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3724      	adds	r7, #36	@ 0x24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd90      	pop	{r4, r7, pc}
 8005e4a:	bf00      	nop

08005e4c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e60:	d004      	beq.n	8005e6c <HAL_ADC_Start_DMA+0x20>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a5a      	ldr	r2, [pc, #360]	@ (8005fd0 <HAL_ADC_Start_DMA+0x184>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d101      	bne.n	8005e70 <HAL_ADC_Start_DMA+0x24>
 8005e6c:	4b59      	ldr	r3, [pc, #356]	@ (8005fd4 <HAL_ADC_Start_DMA+0x188>)
 8005e6e:	e000      	b.n	8005e72 <HAL_ADC_Start_DMA+0x26>
 8005e70:	4b59      	ldr	r3, [pc, #356]	@ (8005fd8 <HAL_ADC_Start_DMA+0x18c>)
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff fd70 	bl	8005958 <LL_ADC_GetMultimode>
 8005e78:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7ff fe01 	bl	8005a86 <LL_ADC_REG_IsConversionOngoing>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f040 809b 	bne.w	8005fc2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <HAL_ADC_Start_DMA+0x4e>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e096      	b.n	8005fc8 <HAL_ADC_Start_DMA+0x17c>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a4d      	ldr	r2, [pc, #308]	@ (8005fdc <HAL_ADC_Start_DMA+0x190>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d008      	beq.n	8005ebe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d005      	beq.n	8005ebe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b05      	cmp	r3, #5
 8005eb6:	d002      	beq.n	8005ebe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	2b09      	cmp	r3, #9
 8005ebc:	d17a      	bne.n	8005fb4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 fcf6 	bl	80068b0 <ADC_Enable>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d16d      	bne.n	8005faa <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ed6:	f023 0301 	bic.w	r3, r3, #1
 8005eda:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a3a      	ldr	r2, [pc, #232]	@ (8005fd0 <HAL_ADC_Start_DMA+0x184>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d009      	beq.n	8005f00 <HAL_ADC_Start_DMA+0xb4>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a3b      	ldr	r2, [pc, #236]	@ (8005fe0 <HAL_ADC_Start_DMA+0x194>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d002      	beq.n	8005efc <HAL_ADC_Start_DMA+0xb0>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	e003      	b.n	8005f04 <HAL_ADC_Start_DMA+0xb8>
 8005efc:	4b39      	ldr	r3, [pc, #228]	@ (8005fe4 <HAL_ADC_Start_DMA+0x198>)
 8005efe:	e001      	b.n	8005f04 <HAL_ADC_Start_DMA+0xb8>
 8005f00:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	6812      	ldr	r2, [r2, #0]
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d002      	beq.n	8005f12 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d105      	bne.n	8005f1e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f16:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d006      	beq.n	8005f38 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f2e:	f023 0206 	bic.w	r2, r3, #6
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	661a      	str	r2, [r3, #96]	@ 0x60
 8005f36:	e002      	b.n	8005f3e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f42:	4a29      	ldr	r2, [pc, #164]	@ (8005fe8 <HAL_ADC_Start_DMA+0x19c>)
 8005f44:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f4a:	4a28      	ldr	r2, [pc, #160]	@ (8005fec <HAL_ADC_Start_DMA+0x1a0>)
 8005f4c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f52:	4a27      	ldr	r2, [pc, #156]	@ (8005ff0 <HAL_ADC_Start_DMA+0x1a4>)
 8005f54:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	221c      	movs	r2, #28
 8005f5c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f042 0210 	orr.w	r2, r2, #16
 8005f74:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f042 0201 	orr.w	r2, r2, #1
 8005f84:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3340      	adds	r3, #64	@ 0x40
 8005f90:	4619      	mov	r1, r3
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f001 f89b 	bl	80070d0 <HAL_DMA_Start_IT>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff fd5b 	bl	8005a5e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005fa8:	e00d      	b.n	8005fc6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005fb2:	e008      	b.n	8005fc6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005fc0:	e001      	b.n	8005fc6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	50000100 	.word	0x50000100
 8005fd4:	50000300 	.word	0x50000300
 8005fd8:	50000700 	.word	0x50000700
 8005fdc:	50000600 	.word	0x50000600
 8005fe0:	50000500 	.word	0x50000500
 8005fe4:	50000400 	.word	0x50000400
 8005fe8:	080069dd 	.word	0x080069dd
 8005fec:	08006ab5 	.word	0x08006ab5
 8005ff0:	08006ad1 	.word	0x08006ad1

08005ff4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b0b6      	sub	sp, #216	@ 0xd8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800604a:	2b01      	cmp	r3, #1
 800604c:	d102      	bne.n	8006054 <HAL_ADC_ConfigChannel+0x24>
 800604e:	2302      	movs	r3, #2
 8006050:	f000 bc13 	b.w	800687a <HAL_ADC_ConfigChannel+0x84a>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff fd10 	bl	8005a86 <LL_ADC_REG_IsConversionOngoing>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	f040 83f3 	bne.w	8006854 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6818      	ldr	r0, [r3, #0]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	6859      	ldr	r1, [r3, #4]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	f7ff fbf1 	bl	8005862 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4618      	mov	r0, r3
 8006086:	f7ff fcfe 	bl	8005a86 <LL_ADC_REG_IsConversionOngoing>
 800608a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff fd0a 	bl	8005aac <LL_ADC_INJ_IsConversionOngoing>
 8006098:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800609c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f040 81d9 	bne.w	8006458 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80060a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f040 81d4 	bne.w	8006458 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060b8:	d10f      	bne.n	80060da <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6818      	ldr	r0, [r3, #0]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2200      	movs	r2, #0
 80060c4:	4619      	mov	r1, r3
 80060c6:	f7ff fbf8 	bl	80058ba <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff fb9f 	bl	8005816 <LL_ADC_SetSamplingTimeCommonConfig>
 80060d8:	e00e      	b.n	80060f8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6818      	ldr	r0, [r3, #0]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	6819      	ldr	r1, [r3, #0]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	461a      	mov	r2, r3
 80060e8:	f7ff fbe7 	bl	80058ba <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2100      	movs	r1, #0
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff fb8f 	bl	8005816 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	695a      	ldr	r2, [r3, #20]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	08db      	lsrs	r3, r3, #3
 8006104:	f003 0303 	and.w	r3, r3, #3
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	2b04      	cmp	r3, #4
 8006118:	d022      	beq.n	8006160 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6818      	ldr	r0, [r3, #0]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	6919      	ldr	r1, [r3, #16]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800612a:	f7ff fae9 	bl	8005700 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6818      	ldr	r0, [r3, #0]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	6919      	ldr	r1, [r3, #16]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	461a      	mov	r2, r3
 800613c:	f7ff fb35 	bl	80057aa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6818      	ldr	r0, [r3, #0]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800614c:	2b01      	cmp	r3, #1
 800614e:	d102      	bne.n	8006156 <HAL_ADC_ConfigChannel+0x126>
 8006150:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006154:	e000      	b.n	8006158 <HAL_ADC_ConfigChannel+0x128>
 8006156:	2300      	movs	r3, #0
 8006158:	461a      	mov	r2, r3
 800615a:	f7ff fb41 	bl	80057e0 <LL_ADC_SetOffsetSaturation>
 800615e:	e17b      	b.n	8006458 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2100      	movs	r1, #0
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff faee 	bl	8005748 <LL_ADC_GetOffsetChannel>
 800616c:	4603      	mov	r3, r0
 800616e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10a      	bne.n	800618c <HAL_ADC_ConfigChannel+0x15c>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2100      	movs	r1, #0
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff fae3 	bl	8005748 <LL_ADC_GetOffsetChannel>
 8006182:	4603      	mov	r3, r0
 8006184:	0e9b      	lsrs	r3, r3, #26
 8006186:	f003 021f 	and.w	r2, r3, #31
 800618a:	e01e      	b.n	80061ca <HAL_ADC_ConfigChannel+0x19a>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2100      	movs	r1, #0
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff fad8 	bl	8005748 <LL_ADC_GetOffsetChannel>
 8006198:	4603      	mov	r3, r0
 800619a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80061a2:	fa93 f3a3 	rbit	r3, r3
 80061a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80061aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80061b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80061ba:	2320      	movs	r3, #32
 80061bc:	e004      	b.n	80061c8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80061be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80061c2:	fab3 f383 	clz	r3, r3
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d105      	bne.n	80061e2 <HAL_ADC_ConfigChannel+0x1b2>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	0e9b      	lsrs	r3, r3, #26
 80061dc:	f003 031f 	and.w	r3, r3, #31
 80061e0:	e018      	b.n	8006214 <HAL_ADC_ConfigChannel+0x1e4>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80061ee:	fa93 f3a3 	rbit	r3, r3
 80061f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80061f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80061fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006206:	2320      	movs	r3, #32
 8006208:	e004      	b.n	8006214 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800620a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800620e:	fab3 f383 	clz	r3, r3
 8006212:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006214:	429a      	cmp	r2, r3
 8006216:	d106      	bne.n	8006226 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2200      	movs	r2, #0
 800621e:	2100      	movs	r1, #0
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff faa7 	bl	8005774 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2101      	movs	r1, #1
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff fa8b 	bl	8005748 <LL_ADC_GetOffsetChannel>
 8006232:	4603      	mov	r3, r0
 8006234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10a      	bne.n	8006252 <HAL_ADC_ConfigChannel+0x222>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2101      	movs	r1, #1
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff fa80 	bl	8005748 <LL_ADC_GetOffsetChannel>
 8006248:	4603      	mov	r3, r0
 800624a:	0e9b      	lsrs	r3, r3, #26
 800624c:	f003 021f 	and.w	r2, r3, #31
 8006250:	e01e      	b.n	8006290 <HAL_ADC_ConfigChannel+0x260>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2101      	movs	r1, #1
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff fa75 	bl	8005748 <LL_ADC_GetOffsetChannel>
 800625e:	4603      	mov	r3, r0
 8006260:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006264:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006268:	fa93 f3a3 	rbit	r3, r3
 800626c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006270:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006274:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006278:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006280:	2320      	movs	r3, #32
 8006282:	e004      	b.n	800628e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006284:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006288:	fab3 f383 	clz	r3, r3
 800628c:	b2db      	uxtb	r3, r3
 800628e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006298:	2b00      	cmp	r3, #0
 800629a:	d105      	bne.n	80062a8 <HAL_ADC_ConfigChannel+0x278>
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	0e9b      	lsrs	r3, r3, #26
 80062a2:	f003 031f 	and.w	r3, r3, #31
 80062a6:	e018      	b.n	80062da <HAL_ADC_ConfigChannel+0x2aa>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062b4:	fa93 f3a3 	rbit	r3, r3
 80062b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80062bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80062c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80062c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80062cc:	2320      	movs	r3, #32
 80062ce:	e004      	b.n	80062da <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80062d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062d4:	fab3 f383 	clz	r3, r3
 80062d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80062da:	429a      	cmp	r2, r3
 80062dc:	d106      	bne.n	80062ec <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2200      	movs	r2, #0
 80062e4:	2101      	movs	r1, #1
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff fa44 	bl	8005774 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2102      	movs	r1, #2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff fa28 	bl	8005748 <LL_ADC_GetOffsetChannel>
 80062f8:	4603      	mov	r3, r0
 80062fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <HAL_ADC_ConfigChannel+0x2e8>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2102      	movs	r1, #2
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff fa1d 	bl	8005748 <LL_ADC_GetOffsetChannel>
 800630e:	4603      	mov	r3, r0
 8006310:	0e9b      	lsrs	r3, r3, #26
 8006312:	f003 021f 	and.w	r2, r3, #31
 8006316:	e01e      	b.n	8006356 <HAL_ADC_ConfigChannel+0x326>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2102      	movs	r1, #2
 800631e:	4618      	mov	r0, r3
 8006320:	f7ff fa12 	bl	8005748 <LL_ADC_GetOffsetChannel>
 8006324:	4603      	mov	r3, r0
 8006326:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800632a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800632e:	fa93 f3a3 	rbit	r3, r3
 8006332:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8006336:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800633a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800633e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006346:	2320      	movs	r3, #32
 8006348:	e004      	b.n	8006354 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800634a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800634e:	fab3 f383 	clz	r3, r3
 8006352:	b2db      	uxtb	r3, r3
 8006354:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800635e:	2b00      	cmp	r3, #0
 8006360:	d105      	bne.n	800636e <HAL_ADC_ConfigChannel+0x33e>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	0e9b      	lsrs	r3, r3, #26
 8006368:	f003 031f 	and.w	r3, r3, #31
 800636c:	e016      	b.n	800639c <HAL_ADC_ConfigChannel+0x36c>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006376:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800637a:	fa93 f3a3 	rbit	r3, r3
 800637e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8006380:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006382:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8006386:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800638e:	2320      	movs	r3, #32
 8006390:	e004      	b.n	800639c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006392:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006396:	fab3 f383 	clz	r3, r3
 800639a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800639c:	429a      	cmp	r2, r3
 800639e:	d106      	bne.n	80063ae <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2200      	movs	r2, #0
 80063a6:	2102      	movs	r1, #2
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff f9e3 	bl	8005774 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2103      	movs	r1, #3
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff f9c7 	bl	8005748 <LL_ADC_GetOffsetChannel>
 80063ba:	4603      	mov	r3, r0
 80063bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <HAL_ADC_ConfigChannel+0x3aa>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2103      	movs	r1, #3
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff f9bc 	bl	8005748 <LL_ADC_GetOffsetChannel>
 80063d0:	4603      	mov	r3, r0
 80063d2:	0e9b      	lsrs	r3, r3, #26
 80063d4:	f003 021f 	and.w	r2, r3, #31
 80063d8:	e017      	b.n	800640a <HAL_ADC_ConfigChannel+0x3da>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2103      	movs	r1, #3
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff f9b1 	bl	8005748 <LL_ADC_GetOffsetChannel>
 80063e6:	4603      	mov	r3, r0
 80063e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063ec:	fa93 f3a3 	rbit	r3, r3
 80063f0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80063f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063f4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80063f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80063fc:	2320      	movs	r3, #32
 80063fe:	e003      	b.n	8006408 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006400:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006402:	fab3 f383 	clz	r3, r3
 8006406:	b2db      	uxtb	r3, r3
 8006408:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006412:	2b00      	cmp	r3, #0
 8006414:	d105      	bne.n	8006422 <HAL_ADC_ConfigChannel+0x3f2>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	0e9b      	lsrs	r3, r3, #26
 800641c:	f003 031f 	and.w	r3, r3, #31
 8006420:	e011      	b.n	8006446 <HAL_ADC_ConfigChannel+0x416>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006428:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800642a:	fa93 f3a3 	rbit	r3, r3
 800642e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006430:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006432:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800643a:	2320      	movs	r3, #32
 800643c:	e003      	b.n	8006446 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800643e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006440:	fab3 f383 	clz	r3, r3
 8006444:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006446:	429a      	cmp	r2, r3
 8006448:	d106      	bne.n	8006458 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2200      	movs	r2, #0
 8006450:	2103      	movs	r1, #3
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff f98e 	bl	8005774 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff faeb 	bl	8005a38 <LL_ADC_IsEnabled>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	f040 813d 	bne.w	80066e4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6818      	ldr	r0, [r3, #0]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	6819      	ldr	r1, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	461a      	mov	r2, r3
 8006478:	f7ff fa4a 	bl	8005910 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	4aa2      	ldr	r2, [pc, #648]	@ (800670c <HAL_ADC_ConfigChannel+0x6dc>)
 8006482:	4293      	cmp	r3, r2
 8006484:	f040 812e 	bne.w	80066e4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10b      	bne.n	80064b0 <HAL_ADC_ConfigChannel+0x480>
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	0e9b      	lsrs	r3, r3, #26
 800649e:	3301      	adds	r3, #1
 80064a0:	f003 031f 	and.w	r3, r3, #31
 80064a4:	2b09      	cmp	r3, #9
 80064a6:	bf94      	ite	ls
 80064a8:	2301      	movls	r3, #1
 80064aa:	2300      	movhi	r3, #0
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	e019      	b.n	80064e4 <HAL_ADC_ConfigChannel+0x4b4>
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064b8:	fa93 f3a3 	rbit	r3, r3
 80064bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80064be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064c0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80064c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80064c8:	2320      	movs	r3, #32
 80064ca:	e003      	b.n	80064d4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80064cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064ce:	fab3 f383 	clz	r3, r3
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	3301      	adds	r3, #1
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	2b09      	cmp	r3, #9
 80064dc:	bf94      	ite	ls
 80064de:	2301      	movls	r3, #1
 80064e0:	2300      	movhi	r3, #0
 80064e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d079      	beq.n	80065dc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d107      	bne.n	8006504 <HAL_ADC_ConfigChannel+0x4d4>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	0e9b      	lsrs	r3, r3, #26
 80064fa:	3301      	adds	r3, #1
 80064fc:	069b      	lsls	r3, r3, #26
 80064fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006502:	e015      	b.n	8006530 <HAL_ADC_ConfigChannel+0x500>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800650a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800650c:	fa93 f3a3 	rbit	r3, r3
 8006510:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006514:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800651c:	2320      	movs	r3, #32
 800651e:	e003      	b.n	8006528 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006522:	fab3 f383 	clz	r3, r3
 8006526:	b2db      	uxtb	r3, r3
 8006528:	3301      	adds	r3, #1
 800652a:	069b      	lsls	r3, r3, #26
 800652c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006538:	2b00      	cmp	r3, #0
 800653a:	d109      	bne.n	8006550 <HAL_ADC_ConfigChannel+0x520>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	0e9b      	lsrs	r3, r3, #26
 8006542:	3301      	adds	r3, #1
 8006544:	f003 031f 	and.w	r3, r3, #31
 8006548:	2101      	movs	r1, #1
 800654a:	fa01 f303 	lsl.w	r3, r1, r3
 800654e:	e017      	b.n	8006580 <HAL_ADC_ConfigChannel+0x550>
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006556:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006558:	fa93 f3a3 	rbit	r3, r3
 800655c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800655e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006560:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8006562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006568:	2320      	movs	r3, #32
 800656a:	e003      	b.n	8006574 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800656c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800656e:	fab3 f383 	clz	r3, r3
 8006572:	b2db      	uxtb	r3, r3
 8006574:	3301      	adds	r3, #1
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	2101      	movs	r1, #1
 800657c:	fa01 f303 	lsl.w	r3, r1, r3
 8006580:	ea42 0103 	orr.w	r1, r2, r3
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <HAL_ADC_ConfigChannel+0x576>
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	0e9b      	lsrs	r3, r3, #26
 8006596:	3301      	adds	r3, #1
 8006598:	f003 021f 	and.w	r2, r3, #31
 800659c:	4613      	mov	r3, r2
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	4413      	add	r3, r2
 80065a2:	051b      	lsls	r3, r3, #20
 80065a4:	e018      	b.n	80065d8 <HAL_ADC_ConfigChannel+0x5a8>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ae:	fa93 f3a3 	rbit	r3, r3
 80065b2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80065b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80065b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80065be:	2320      	movs	r3, #32
 80065c0:	e003      	b.n	80065ca <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80065c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065c4:	fab3 f383 	clz	r3, r3
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	3301      	adds	r3, #1
 80065cc:	f003 021f 	and.w	r2, r3, #31
 80065d0:	4613      	mov	r3, r2
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	4413      	add	r3, r2
 80065d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065d8:	430b      	orrs	r3, r1
 80065da:	e07e      	b.n	80066da <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d107      	bne.n	80065f8 <HAL_ADC_ConfigChannel+0x5c8>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	0e9b      	lsrs	r3, r3, #26
 80065ee:	3301      	adds	r3, #1
 80065f0:	069b      	lsls	r3, r3, #26
 80065f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80065f6:	e015      	b.n	8006624 <HAL_ADC_ConfigChannel+0x5f4>
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006600:	fa93 f3a3 	rbit	r3, r3
 8006604:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8006606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006608:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800660a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006610:	2320      	movs	r3, #32
 8006612:	e003      	b.n	800661c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006616:	fab3 f383 	clz	r3, r3
 800661a:	b2db      	uxtb	r3, r3
 800661c:	3301      	adds	r3, #1
 800661e:	069b      	lsls	r3, r3, #26
 8006620:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800662c:	2b00      	cmp	r3, #0
 800662e:	d109      	bne.n	8006644 <HAL_ADC_ConfigChannel+0x614>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	0e9b      	lsrs	r3, r3, #26
 8006636:	3301      	adds	r3, #1
 8006638:	f003 031f 	and.w	r3, r3, #31
 800663c:	2101      	movs	r1, #1
 800663e:	fa01 f303 	lsl.w	r3, r1, r3
 8006642:	e017      	b.n	8006674 <HAL_ADC_ConfigChannel+0x644>
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	fa93 f3a3 	rbit	r3, r3
 8006650:	61fb      	str	r3, [r7, #28]
  return result;
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800665c:	2320      	movs	r3, #32
 800665e:	e003      	b.n	8006668 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006662:	fab3 f383 	clz	r3, r3
 8006666:	b2db      	uxtb	r3, r3
 8006668:	3301      	adds	r3, #1
 800666a:	f003 031f 	and.w	r3, r3, #31
 800666e:	2101      	movs	r1, #1
 8006670:	fa01 f303 	lsl.w	r3, r1, r3
 8006674:	ea42 0103 	orr.w	r1, r2, r3
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10d      	bne.n	80066a0 <HAL_ADC_ConfigChannel+0x670>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	0e9b      	lsrs	r3, r3, #26
 800668a:	3301      	adds	r3, #1
 800668c:	f003 021f 	and.w	r2, r3, #31
 8006690:	4613      	mov	r3, r2
 8006692:	005b      	lsls	r3, r3, #1
 8006694:	4413      	add	r3, r2
 8006696:	3b1e      	subs	r3, #30
 8006698:	051b      	lsls	r3, r3, #20
 800669a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800669e:	e01b      	b.n	80066d8 <HAL_ADC_ConfigChannel+0x6a8>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	fa93 f3a3 	rbit	r3, r3
 80066ac:	613b      	str	r3, [r7, #16]
  return result;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80066b8:	2320      	movs	r3, #32
 80066ba:	e003      	b.n	80066c4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	fab3 f383 	clz	r3, r3
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	3301      	adds	r3, #1
 80066c6:	f003 021f 	and.w	r2, r3, #31
 80066ca:	4613      	mov	r3, r2
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	4413      	add	r3, r2
 80066d0:	3b1e      	subs	r3, #30
 80066d2:	051b      	lsls	r3, r3, #20
 80066d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066d8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066de:	4619      	mov	r1, r3
 80066e0:	f7ff f8eb 	bl	80058ba <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	4b09      	ldr	r3, [pc, #36]	@ (8006710 <HAL_ADC_ConfigChannel+0x6e0>)
 80066ea:	4013      	ands	r3, r2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 80be 	beq.w	800686e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066fa:	d004      	beq.n	8006706 <HAL_ADC_ConfigChannel+0x6d6>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a04      	ldr	r2, [pc, #16]	@ (8006714 <HAL_ADC_ConfigChannel+0x6e4>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d10a      	bne.n	800671c <HAL_ADC_ConfigChannel+0x6ec>
 8006706:	4b04      	ldr	r3, [pc, #16]	@ (8006718 <HAL_ADC_ConfigChannel+0x6e8>)
 8006708:	e009      	b.n	800671e <HAL_ADC_ConfigChannel+0x6ee>
 800670a:	bf00      	nop
 800670c:	407f0000 	.word	0x407f0000
 8006710:	80080000 	.word	0x80080000
 8006714:	50000100 	.word	0x50000100
 8006718:	50000300 	.word	0x50000300
 800671c:	4b59      	ldr	r3, [pc, #356]	@ (8006884 <HAL_ADC_ConfigChannel+0x854>)
 800671e:	4618      	mov	r0, r3
 8006720:	f7fe ffe0 	bl	80056e4 <LL_ADC_GetCommonPathInternalCh>
 8006724:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a56      	ldr	r2, [pc, #344]	@ (8006888 <HAL_ADC_ConfigChannel+0x858>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d004      	beq.n	800673c <HAL_ADC_ConfigChannel+0x70c>
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a55      	ldr	r2, [pc, #340]	@ (800688c <HAL_ADC_ConfigChannel+0x85c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d13a      	bne.n	80067b2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800673c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006740:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d134      	bne.n	80067b2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006750:	d005      	beq.n	800675e <HAL_ADC_ConfigChannel+0x72e>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a4e      	ldr	r2, [pc, #312]	@ (8006890 <HAL_ADC_ConfigChannel+0x860>)
 8006758:	4293      	cmp	r3, r2
 800675a:	f040 8085 	bne.w	8006868 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006766:	d004      	beq.n	8006772 <HAL_ADC_ConfigChannel+0x742>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a49      	ldr	r2, [pc, #292]	@ (8006894 <HAL_ADC_ConfigChannel+0x864>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d101      	bne.n	8006776 <HAL_ADC_ConfigChannel+0x746>
 8006772:	4a49      	ldr	r2, [pc, #292]	@ (8006898 <HAL_ADC_ConfigChannel+0x868>)
 8006774:	e000      	b.n	8006778 <HAL_ADC_ConfigChannel+0x748>
 8006776:	4a43      	ldr	r2, [pc, #268]	@ (8006884 <HAL_ADC_ConfigChannel+0x854>)
 8006778:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800677c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f7fe ff9b 	bl	80056be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006788:	4b44      	ldr	r3, [pc, #272]	@ (800689c <HAL_ADC_ConfigChannel+0x86c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	099b      	lsrs	r3, r3, #6
 800678e:	4a44      	ldr	r2, [pc, #272]	@ (80068a0 <HAL_ADC_ConfigChannel+0x870>)
 8006790:	fba2 2303 	umull	r2, r3, r2, r3
 8006794:	099b      	lsrs	r3, r3, #6
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	4613      	mov	r3, r2
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	4413      	add	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80067a2:	e002      	b.n	80067aa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1f9      	bne.n	80067a4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80067b0:	e05a      	b.n	8006868 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a3b      	ldr	r2, [pc, #236]	@ (80068a4 <HAL_ADC_ConfigChannel+0x874>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d125      	bne.n	8006808 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80067bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80067c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d11f      	bne.n	8006808 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a31      	ldr	r2, [pc, #196]	@ (8006894 <HAL_ADC_ConfigChannel+0x864>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d104      	bne.n	80067dc <HAL_ADC_ConfigChannel+0x7ac>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a34      	ldr	r2, [pc, #208]	@ (80068a8 <HAL_ADC_ConfigChannel+0x878>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d047      	beq.n	800686c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067e4:	d004      	beq.n	80067f0 <HAL_ADC_ConfigChannel+0x7c0>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a2a      	ldr	r2, [pc, #168]	@ (8006894 <HAL_ADC_ConfigChannel+0x864>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d101      	bne.n	80067f4 <HAL_ADC_ConfigChannel+0x7c4>
 80067f0:	4a29      	ldr	r2, [pc, #164]	@ (8006898 <HAL_ADC_ConfigChannel+0x868>)
 80067f2:	e000      	b.n	80067f6 <HAL_ADC_ConfigChannel+0x7c6>
 80067f4:	4a23      	ldr	r2, [pc, #140]	@ (8006884 <HAL_ADC_ConfigChannel+0x854>)
 80067f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80067fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067fe:	4619      	mov	r1, r3
 8006800:	4610      	mov	r0, r2
 8006802:	f7fe ff5c 	bl	80056be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006806:	e031      	b.n	800686c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a27      	ldr	r2, [pc, #156]	@ (80068ac <HAL_ADC_ConfigChannel+0x87c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d12d      	bne.n	800686e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006812:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d127      	bne.n	800686e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a1c      	ldr	r2, [pc, #112]	@ (8006894 <HAL_ADC_ConfigChannel+0x864>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d022      	beq.n	800686e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006830:	d004      	beq.n	800683c <HAL_ADC_ConfigChannel+0x80c>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a17      	ldr	r2, [pc, #92]	@ (8006894 <HAL_ADC_ConfigChannel+0x864>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d101      	bne.n	8006840 <HAL_ADC_ConfigChannel+0x810>
 800683c:	4a16      	ldr	r2, [pc, #88]	@ (8006898 <HAL_ADC_ConfigChannel+0x868>)
 800683e:	e000      	b.n	8006842 <HAL_ADC_ConfigChannel+0x812>
 8006840:	4a10      	ldr	r2, [pc, #64]	@ (8006884 <HAL_ADC_ConfigChannel+0x854>)
 8006842:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006846:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800684a:	4619      	mov	r1, r3
 800684c:	4610      	mov	r0, r2
 800684e:	f7fe ff36 	bl	80056be <LL_ADC_SetCommonPathInternalCh>
 8006852:	e00c      	b.n	800686e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006858:	f043 0220 	orr.w	r2, r3, #32
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8006866:	e002      	b.n	800686e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006868:	bf00      	nop
 800686a:	e000      	b.n	800686e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800686c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006876:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800687a:	4618      	mov	r0, r3
 800687c:	37d8      	adds	r7, #216	@ 0xd8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	50000700 	.word	0x50000700
 8006888:	c3210000 	.word	0xc3210000
 800688c:	90c00010 	.word	0x90c00010
 8006890:	50000600 	.word	0x50000600
 8006894:	50000100 	.word	0x50000100
 8006898:	50000300 	.word	0x50000300
 800689c:	20000288 	.word	0x20000288
 80068a0:	053e2d63 	.word	0x053e2d63
 80068a4:	c7520000 	.word	0xc7520000
 80068a8:	50000500 	.word	0x50000500
 80068ac:	cb840000 	.word	0xcb840000

080068b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80068b8:	2300      	movs	r3, #0
 80068ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7ff f8b9 	bl	8005a38 <LL_ADC_IsEnabled>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d176      	bne.n	80069ba <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689a      	ldr	r2, [r3, #8]
 80068d2:	4b3c      	ldr	r3, [pc, #240]	@ (80069c4 <ADC_Enable+0x114>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00d      	beq.n	80068f6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068de:	f043 0210 	orr.w	r2, r3, #16
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ea:	f043 0201 	orr.w	r2, r3, #1
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e062      	b.n	80069bc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7ff f888 	bl	8005a10 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006908:	d004      	beq.n	8006914 <ADC_Enable+0x64>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a2e      	ldr	r2, [pc, #184]	@ (80069c8 <ADC_Enable+0x118>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d101      	bne.n	8006918 <ADC_Enable+0x68>
 8006914:	4b2d      	ldr	r3, [pc, #180]	@ (80069cc <ADC_Enable+0x11c>)
 8006916:	e000      	b.n	800691a <ADC_Enable+0x6a>
 8006918:	4b2d      	ldr	r3, [pc, #180]	@ (80069d0 <ADC_Enable+0x120>)
 800691a:	4618      	mov	r0, r3
 800691c:	f7fe fee2 	bl	80056e4 <LL_ADC_GetCommonPathInternalCh>
 8006920:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006922:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006926:	2b00      	cmp	r3, #0
 8006928:	d013      	beq.n	8006952 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800692a:	4b2a      	ldr	r3, [pc, #168]	@ (80069d4 <ADC_Enable+0x124>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	099b      	lsrs	r3, r3, #6
 8006930:	4a29      	ldr	r2, [pc, #164]	@ (80069d8 <ADC_Enable+0x128>)
 8006932:	fba2 2303 	umull	r2, r3, r2, r3
 8006936:	099b      	lsrs	r3, r3, #6
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	4613      	mov	r3, r2
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	4413      	add	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006944:	e002      	b.n	800694c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	3b01      	subs	r3, #1
 800694a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f9      	bne.n	8006946 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006952:	f7fe fe73 	bl	800563c <HAL_GetTick>
 8006956:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006958:	e028      	b.n	80069ac <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff f86a 	bl	8005a38 <LL_ADC_IsEnabled>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d104      	bne.n	8006974 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff f84e 	bl	8005a10 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006974:	f7fe fe62 	bl	800563c <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d914      	bls.n	80069ac <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b01      	cmp	r3, #1
 800698e:	d00d      	beq.n	80069ac <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006994:	f043 0210 	orr.w	r2, r3, #16
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069a0:	f043 0201 	orr.w	r2, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e007      	b.n	80069bc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d1cf      	bne.n	800695a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	8000003f 	.word	0x8000003f
 80069c8:	50000100 	.word	0x50000100
 80069cc:	50000300 	.word	0x50000300
 80069d0:	50000700 	.word	0x50000700
 80069d4:	20000288 	.word	0x20000288
 80069d8:	053e2d63 	.word	0x053e2d63

080069dc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d14b      	bne.n	8006a8e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0308 	and.w	r3, r3, #8
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d021      	beq.n	8006a54 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fe ff11 	bl	800583c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d032      	beq.n	8006a86 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d12b      	bne.n	8006a86 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a32:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d11f      	bne.n	8006a86 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a4a:	f043 0201 	orr.w	r2, r3, #1
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006a52:	e018      	b.n	8006a86 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d111      	bne.n	8006a86 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d105      	bne.n	8006a86 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a7e:	f043 0201 	orr.w	r2, r3, #1
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f7ff fab4 	bl	8005ff4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006a8c:	e00e      	b.n	8006aac <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a92:	f003 0310 	and.w	r3, r3, #16
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f7ff fabe 	bl	800601c <HAL_ADC_ErrorCallback>
}
 8006aa0:	e004      	b.n	8006aac <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	4798      	blx	r3
}
 8006aac:	bf00      	nop
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7ff faa0 	bl	8006008 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ac8:	bf00      	nop
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006adc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ae2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aee:	f043 0204 	orr.w	r2, r3, #4
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f7ff fa90 	bl	800601c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006afc:	bf00      	nop
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <LL_ADC_IsEnabled>:
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d101      	bne.n	8006b1c <LL_ADC_IsEnabled+0x18>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e000      	b.n	8006b1e <LL_ADC_IsEnabled+0x1a>
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <LL_ADC_REG_IsConversionOngoing>:
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d101      	bne.n	8006b42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e000      	b.n	8006b44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006b50:	b590      	push	{r4, r7, lr}
 8006b52:	b0a1      	sub	sp, #132	@ 0x84
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d101      	bne.n	8006b6e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	e0e7      	b.n	8006d3e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006b76:	2300      	movs	r3, #0
 8006b78:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b86:	d102      	bne.n	8006b8e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006b88:	4b6f      	ldr	r3, [pc, #444]	@ (8006d48 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006b8a:	60bb      	str	r3, [r7, #8]
 8006b8c:	e009      	b.n	8006ba2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a6e      	ldr	r2, [pc, #440]	@ (8006d4c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d102      	bne.n	8006b9e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006b98:	4b6d      	ldr	r3, [pc, #436]	@ (8006d50 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006b9a:	60bb      	str	r3, [r7, #8]
 8006b9c:	e001      	b.n	8006ba2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10b      	bne.n	8006bc0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bac:	f043 0220 	orr.w	r2, r3, #32
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e0be      	b.n	8006d3e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff ffb1 	bl	8006b2a <LL_ADC_REG_IsConversionOngoing>
 8006bc8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff ffab 	bl	8006b2a <LL_ADC_REG_IsConversionOngoing>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f040 80a0 	bne.w	8006d1c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006bdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f040 809c 	bne.w	8006d1c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bec:	d004      	beq.n	8006bf8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a55      	ldr	r2, [pc, #340]	@ (8006d48 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d101      	bne.n	8006bfc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006bf8:	4b56      	ldr	r3, [pc, #344]	@ (8006d54 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006bfa:	e000      	b.n	8006bfe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006bfc:	4b56      	ldr	r3, [pc, #344]	@ (8006d58 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006bfe:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d04b      	beq.n	8006ca0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006c08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	6859      	ldr	r1, [r3, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006c1a:	035b      	lsls	r3, r3, #13
 8006c1c:	430b      	orrs	r3, r1
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c22:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c2c:	d004      	beq.n	8006c38 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a45      	ldr	r2, [pc, #276]	@ (8006d48 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d10f      	bne.n	8006c58 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006c38:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006c3c:	f7ff ff62 	bl	8006b04 <LL_ADC_IsEnabled>
 8006c40:	4604      	mov	r4, r0
 8006c42:	4841      	ldr	r0, [pc, #260]	@ (8006d48 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006c44:	f7ff ff5e 	bl	8006b04 <LL_ADC_IsEnabled>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	4323      	orrs	r3, r4
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	bf0c      	ite	eq
 8006c50:	2301      	moveq	r3, #1
 8006c52:	2300      	movne	r3, #0
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	e012      	b.n	8006c7e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006c58:	483c      	ldr	r0, [pc, #240]	@ (8006d4c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006c5a:	f7ff ff53 	bl	8006b04 <LL_ADC_IsEnabled>
 8006c5e:	4604      	mov	r4, r0
 8006c60:	483b      	ldr	r0, [pc, #236]	@ (8006d50 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006c62:	f7ff ff4f 	bl	8006b04 <LL_ADC_IsEnabled>
 8006c66:	4603      	mov	r3, r0
 8006c68:	431c      	orrs	r4, r3
 8006c6a:	483c      	ldr	r0, [pc, #240]	@ (8006d5c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006c6c:	f7ff ff4a 	bl	8006b04 <LL_ADC_IsEnabled>
 8006c70:	4603      	mov	r3, r0
 8006c72:	4323      	orrs	r3, r4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bf0c      	ite	eq
 8006c78:	2301      	moveq	r3, #1
 8006c7a:	2300      	movne	r3, #0
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d056      	beq.n	8006d30 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006c82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006c8a:	f023 030f 	bic.w	r3, r3, #15
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	6811      	ldr	r1, [r2, #0]
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	6892      	ldr	r2, [r2, #8]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c9c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006c9e:	e047      	b.n	8006d30 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006ca0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006ca8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006caa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cb4:	d004      	beq.n	8006cc0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a23      	ldr	r2, [pc, #140]	@ (8006d48 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d10f      	bne.n	8006ce0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006cc0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006cc4:	f7ff ff1e 	bl	8006b04 <LL_ADC_IsEnabled>
 8006cc8:	4604      	mov	r4, r0
 8006cca:	481f      	ldr	r0, [pc, #124]	@ (8006d48 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006ccc:	f7ff ff1a 	bl	8006b04 <LL_ADC_IsEnabled>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	4323      	orrs	r3, r4
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	bf0c      	ite	eq
 8006cd8:	2301      	moveq	r3, #1
 8006cda:	2300      	movne	r3, #0
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	e012      	b.n	8006d06 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006ce0:	481a      	ldr	r0, [pc, #104]	@ (8006d4c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006ce2:	f7ff ff0f 	bl	8006b04 <LL_ADC_IsEnabled>
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	4819      	ldr	r0, [pc, #100]	@ (8006d50 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006cea:	f7ff ff0b 	bl	8006b04 <LL_ADC_IsEnabled>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	431c      	orrs	r4, r3
 8006cf2:	481a      	ldr	r0, [pc, #104]	@ (8006d5c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006cf4:	f7ff ff06 	bl	8006b04 <LL_ADC_IsEnabled>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	4323      	orrs	r3, r4
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	bf0c      	ite	eq
 8006d00:	2301      	moveq	r3, #1
 8006d02:	2300      	movne	r3, #0
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d012      	beq.n	8006d30 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006d0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006d12:	f023 030f 	bic.w	r3, r3, #15
 8006d16:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006d18:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006d1a:	e009      	b.n	8006d30 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d20:	f043 0220 	orr.w	r2, r3, #32
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006d2e:	e000      	b.n	8006d32 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006d30:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006d3a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3784      	adds	r7, #132	@ 0x84
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd90      	pop	{r4, r7, pc}
 8006d46:	bf00      	nop
 8006d48:	50000100 	.word	0x50000100
 8006d4c:	50000400 	.word	0x50000400
 8006d50:	50000500 	.word	0x50000500
 8006d54:	50000300 	.word	0x50000300
 8006d58:	50000700 	.word	0x50000700
 8006d5c:	50000600 	.word	0x50000600

08006d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f003 0307 	and.w	r3, r3, #7
 8006d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d70:	4b0c      	ldr	r3, [pc, #48]	@ (8006da4 <__NVIC_SetPriorityGrouping+0x44>)
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d92:	4a04      	ldr	r2, [pc, #16]	@ (8006da4 <__NVIC_SetPriorityGrouping+0x44>)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	60d3      	str	r3, [r2, #12]
}
 8006d98:	bf00      	nop
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	e000ed00 	.word	0xe000ed00

08006da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006da8:	b480      	push	{r7}
 8006daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006dac:	4b04      	ldr	r3, [pc, #16]	@ (8006dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	0a1b      	lsrs	r3, r3, #8
 8006db2:	f003 0307 	and.w	r3, r3, #7
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	e000ed00 	.word	0xe000ed00

08006dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	4603      	mov	r3, r0
 8006dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	db0b      	blt.n	8006dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006dd6:	79fb      	ldrb	r3, [r7, #7]
 8006dd8:	f003 021f 	and.w	r2, r3, #31
 8006ddc:	4907      	ldr	r1, [pc, #28]	@ (8006dfc <__NVIC_EnableIRQ+0x38>)
 8006dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006de2:	095b      	lsrs	r3, r3, #5
 8006de4:	2001      	movs	r0, #1
 8006de6:	fa00 f202 	lsl.w	r2, r0, r2
 8006dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	e000e100 	.word	0xe000e100

08006e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4603      	mov	r3, r0
 8006e08:	6039      	str	r1, [r7, #0]
 8006e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	db0a      	blt.n	8006e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	490c      	ldr	r1, [pc, #48]	@ (8006e4c <__NVIC_SetPriority+0x4c>)
 8006e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e1e:	0112      	lsls	r2, r2, #4
 8006e20:	b2d2      	uxtb	r2, r2
 8006e22:	440b      	add	r3, r1
 8006e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e28:	e00a      	b.n	8006e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	4908      	ldr	r1, [pc, #32]	@ (8006e50 <__NVIC_SetPriority+0x50>)
 8006e30:	79fb      	ldrb	r3, [r7, #7]
 8006e32:	f003 030f 	and.w	r3, r3, #15
 8006e36:	3b04      	subs	r3, #4
 8006e38:	0112      	lsls	r2, r2, #4
 8006e3a:	b2d2      	uxtb	r2, r2
 8006e3c:	440b      	add	r3, r1
 8006e3e:	761a      	strb	r2, [r3, #24]
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	e000e100 	.word	0xe000e100
 8006e50:	e000ed00 	.word	0xe000ed00

08006e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b089      	sub	sp, #36	@ 0x24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f003 0307 	and.w	r3, r3, #7
 8006e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	f1c3 0307 	rsb	r3, r3, #7
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	bf28      	it	cs
 8006e72:	2304      	movcs	r3, #4
 8006e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	3304      	adds	r3, #4
 8006e7a:	2b06      	cmp	r3, #6
 8006e7c:	d902      	bls.n	8006e84 <NVIC_EncodePriority+0x30>
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	3b03      	subs	r3, #3
 8006e82:	e000      	b.n	8006e86 <NVIC_EncodePriority+0x32>
 8006e84:	2300      	movs	r3, #0
 8006e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e88:	f04f 32ff 	mov.w	r2, #4294967295
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e92:	43da      	mvns	r2, r3
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	401a      	ands	r2, r3
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea6:	43d9      	mvns	r1, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006eac:	4313      	orrs	r3, r2
         );
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3724      	adds	r7, #36	@ 0x24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
	...

08006ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ecc:	d301      	bcc.n	8006ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e00f      	b.n	8006ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8006efc <SysTick_Config+0x40>)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006eda:	210f      	movs	r1, #15
 8006edc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee0:	f7ff ff8e 	bl	8006e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ee4:	4b05      	ldr	r3, [pc, #20]	@ (8006efc <SysTick_Config+0x40>)
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006eea:	4b04      	ldr	r3, [pc, #16]	@ (8006efc <SysTick_Config+0x40>)
 8006eec:	2207      	movs	r2, #7
 8006eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	e000e010 	.word	0xe000e010

08006f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7ff ff29 	bl	8006d60 <__NVIC_SetPriorityGrouping>
}
 8006f0e:	bf00      	nop
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b086      	sub	sp, #24
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	607a      	str	r2, [r7, #4]
 8006f22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006f24:	f7ff ff40 	bl	8006da8 <__NVIC_GetPriorityGrouping>
 8006f28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	6978      	ldr	r0, [r7, #20]
 8006f30:	f7ff ff90 	bl	8006e54 <NVIC_EncodePriority>
 8006f34:	4602      	mov	r2, r0
 8006f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff ff5f 	bl	8006e00 <__NVIC_SetPriority>
}
 8006f42:	bf00      	nop
 8006f44:	3718      	adds	r7, #24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	4603      	mov	r3, r0
 8006f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff ff33 	bl	8006dc4 <__NVIC_EnableIRQ>
}
 8006f5e:	bf00      	nop
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b082      	sub	sp, #8
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7ff ffa4 	bl	8006ebc <SysTick_Config>
 8006f74:	4603      	mov	r3, r0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e08d      	b.n	80070ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	4b47      	ldr	r3, [pc, #284]	@ (80070b8 <HAL_DMA_Init+0x138>)
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d80f      	bhi.n	8006fbe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	4b45      	ldr	r3, [pc, #276]	@ (80070bc <HAL_DMA_Init+0x13c>)
 8006fa6:	4413      	add	r3, r2
 8006fa8:	4a45      	ldr	r2, [pc, #276]	@ (80070c0 <HAL_DMA_Init+0x140>)
 8006faa:	fba2 2303 	umull	r2, r3, r2, r3
 8006fae:	091b      	lsrs	r3, r3, #4
 8006fb0:	009a      	lsls	r2, r3, #2
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a42      	ldr	r2, [pc, #264]	@ (80070c4 <HAL_DMA_Init+0x144>)
 8006fba:	641a      	str	r2, [r3, #64]	@ 0x40
 8006fbc:	e00e      	b.n	8006fdc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	4b40      	ldr	r3, [pc, #256]	@ (80070c8 <HAL_DMA_Init+0x148>)
 8006fc6:	4413      	add	r3, r2
 8006fc8:	4a3d      	ldr	r2, [pc, #244]	@ (80070c0 <HAL_DMA_Init+0x140>)
 8006fca:	fba2 2303 	umull	r2, r3, r2, r3
 8006fce:	091b      	lsrs	r3, r3, #4
 8006fd0:	009a      	lsls	r2, r3, #2
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a3c      	ldr	r2, [pc, #240]	@ (80070cc <HAL_DMA_Init+0x14c>)
 8006fda:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007000:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800700c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007018:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	4313      	orrs	r3, r2
 8007024:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fa76 	bl	8007520 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800703c:	d102      	bne.n	8007044 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800704c:	b2d2      	uxtb	r2, r2
 800704e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007058:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d010      	beq.n	8007084 <HAL_DMA_Init+0x104>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	2b04      	cmp	r3, #4
 8007068:	d80c      	bhi.n	8007084 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fa96 	bl	800759c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007074:	2200      	movs	r2, #0
 8007076:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007080:	605a      	str	r2, [r3, #4]
 8007082:	e008      	b.n	8007096 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	40020407 	.word	0x40020407
 80070bc:	bffdfff8 	.word	0xbffdfff8
 80070c0:	cccccccd 	.word	0xcccccccd
 80070c4:	40020000 	.word	0x40020000
 80070c8:	bffdfbf8 	.word	0xbffdfbf8
 80070cc:	40020400 	.word	0x40020400

080070d0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
 80070dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d101      	bne.n	80070f0 <HAL_DMA_Start_IT+0x20>
 80070ec:	2302      	movs	r3, #2
 80070ee:	e066      	b.n	80071be <HAL_DMA_Start_IT+0xee>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b01      	cmp	r3, #1
 8007102:	d155      	bne.n	80071b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2202      	movs	r2, #2
 8007108:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0201 	bic.w	r2, r2, #1
 8007120:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	68b9      	ldr	r1, [r7, #8]
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 f9bb 	bl	80074a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007132:	2b00      	cmp	r3, #0
 8007134:	d008      	beq.n	8007148 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f042 020e 	orr.w	r2, r2, #14
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	e00f      	b.n	8007168 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0204 	bic.w	r2, r2, #4
 8007156:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 020a 	orr.w	r2, r2, #10
 8007166:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d007      	beq.n	8007186 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007180:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007184:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800718a:	2b00      	cmp	r3, #0
 800718c:	d007      	beq.n	800719e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007198:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800719c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f042 0201 	orr.w	r2, r2, #1
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	e005      	b.n	80071bc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80071b8:	2302      	movs	r3, #2
 80071ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b085      	sub	sp, #20
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d005      	beq.n	80071ea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2204      	movs	r2, #4
 80071e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	73fb      	strb	r3, [r7, #15]
 80071e8:	e037      	b.n	800725a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 020e 	bic.w	r2, r2, #14
 80071f8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007204:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007208:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f022 0201 	bic.w	r2, r2, #1
 8007218:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800721e:	f003 021f 	and.w	r2, r3, #31
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007226:	2101      	movs	r1, #1
 8007228:	fa01 f202 	lsl.w	r2, r1, r2
 800722c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007236:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00c      	beq.n	800725a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800724a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800724e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007258:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800726a:	7bfb      	ldrb	r3, [r7, #15]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3714      	adds	r7, #20
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b02      	cmp	r3, #2
 800728e:	d00d      	beq.n	80072ac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2204      	movs	r2, #4
 8007294:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	73fb      	strb	r3, [r7, #15]
 80072aa:	e047      	b.n	800733c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 020e 	bic.w	r2, r2, #14
 80072ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0201 	bic.w	r2, r2, #1
 80072ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80072da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072e0:	f003 021f 	and.w	r2, r3, #31
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e8:	2101      	movs	r1, #1
 80072ea:	fa01 f202 	lsl.w	r2, r1, r2
 80072ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80072f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00c      	beq.n	800731c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800730c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007310:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800731a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	4798      	blx	r3
    }
  }
  return status;
 800733c:	7bfb      	ldrb	r3, [r7, #15]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b084      	sub	sp, #16
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007362:	f003 031f 	and.w	r3, r3, #31
 8007366:	2204      	movs	r2, #4
 8007368:	409a      	lsls	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	4013      	ands	r3, r2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d026      	beq.n	80073c0 <HAL_DMA_IRQHandler+0x7a>
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	2b00      	cmp	r3, #0
 800737a:	d021      	beq.n	80073c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0320 	and.w	r3, r3, #32
 8007386:	2b00      	cmp	r3, #0
 8007388:	d107      	bne.n	800739a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f022 0204 	bic.w	r2, r2, #4
 8007398:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800739e:	f003 021f 	and.w	r2, r3, #31
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a6:	2104      	movs	r1, #4
 80073a8:	fa01 f202 	lsl.w	r2, r1, r2
 80073ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d071      	beq.n	800749a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80073be:	e06c      	b.n	800749a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073c4:	f003 031f 	and.w	r3, r3, #31
 80073c8:	2202      	movs	r2, #2
 80073ca:	409a      	lsls	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4013      	ands	r3, r2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d02e      	beq.n	8007432 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d029      	beq.n	8007432 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0320 	and.w	r3, r3, #32
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10b      	bne.n	8007404 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 020a 	bic.w	r2, r2, #10
 80073fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007408:	f003 021f 	and.w	r2, r3, #31
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007410:	2102      	movs	r1, #2
 8007412:	fa01 f202 	lsl.w	r2, r1, r2
 8007416:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007424:	2b00      	cmp	r3, #0
 8007426:	d038      	beq.n	800749a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007430:	e033      	b.n	800749a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007436:	f003 031f 	and.w	r3, r3, #31
 800743a:	2208      	movs	r2, #8
 800743c:	409a      	lsls	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	4013      	ands	r3, r2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d02a      	beq.n	800749c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	f003 0308 	and.w	r3, r3, #8
 800744c:	2b00      	cmp	r3, #0
 800744e:	d025      	beq.n	800749c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 020e 	bic.w	r2, r2, #14
 800745e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007464:	f003 021f 	and.w	r2, r3, #31
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746c:	2101      	movs	r1, #1
 800746e:	fa01 f202 	lsl.w	r2, r1, r2
 8007472:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800748e:	2b00      	cmp	r3, #0
 8007490:	d004      	beq.n	800749c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800749a:	bf00      	nop
 800749c:	bf00      	nop
}
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80074ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d004      	beq.n	80074ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80074cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d2:	f003 021f 	and.w	r2, r3, #31
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074da:	2101      	movs	r1, #1
 80074dc:	fa01 f202 	lsl.w	r2, r1, r2
 80074e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	2b10      	cmp	r3, #16
 80074f0:	d108      	bne.n	8007504 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007502:	e007      	b.n	8007514 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	60da      	str	r2, [r3, #12]
}
 8007514:	bf00      	nop
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	461a      	mov	r2, r3
 800752e:	4b16      	ldr	r3, [pc, #88]	@ (8007588 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007530:	429a      	cmp	r2, r3
 8007532:	d802      	bhi.n	800753a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007534:	4b15      	ldr	r3, [pc, #84]	@ (800758c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	e001      	b.n	800753e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800753a:	4b15      	ldr	r3, [pc, #84]	@ (8007590 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800753c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	b2db      	uxtb	r3, r3
 8007548:	3b08      	subs	r3, #8
 800754a:	4a12      	ldr	r2, [pc, #72]	@ (8007594 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800754c:	fba2 2303 	umull	r2, r3, r2, r3
 8007550:	091b      	lsrs	r3, r3, #4
 8007552:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007558:	089b      	lsrs	r3, r3, #2
 800755a:	009a      	lsls	r2, r3, #2
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	4413      	add	r3, r2
 8007560:	461a      	mov	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a0b      	ldr	r2, [pc, #44]	@ (8007598 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800756a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f003 031f 	and.w	r3, r3, #31
 8007572:	2201      	movs	r2, #1
 8007574:	409a      	lsls	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800757a:	bf00      	nop
 800757c:	371c      	adds	r7, #28
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	40020407 	.word	0x40020407
 800758c:	40020800 	.word	0x40020800
 8007590:	40020820 	.word	0x40020820
 8007594:	cccccccd 	.word	0xcccccccd
 8007598:	40020880 	.word	0x40020880

0800759c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4b0b      	ldr	r3, [pc, #44]	@ (80075dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80075b0:	4413      	add	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	461a      	mov	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a08      	ldr	r2, [pc, #32]	@ (80075e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80075be:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	f003 031f 	and.w	r3, r3, #31
 80075c8:	2201      	movs	r2, #1
 80075ca:	409a      	lsls	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80075d0:	bf00      	nop
 80075d2:	3714      	adds	r7, #20
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	1000823f 	.word	0x1000823f
 80075e0:	40020940 	.word	0x40020940

080075e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80075f2:	e15a      	b.n	80078aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	2101      	movs	r1, #1
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007600:	4013      	ands	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 814c 	beq.w	80078a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f003 0303 	and.w	r3, r3, #3
 8007614:	2b01      	cmp	r3, #1
 8007616:	d005      	beq.n	8007624 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007620:	2b02      	cmp	r3, #2
 8007622:	d130      	bne.n	8007686 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	005b      	lsls	r3, r3, #1
 800762e:	2203      	movs	r2, #3
 8007630:	fa02 f303 	lsl.w	r3, r2, r3
 8007634:	43db      	mvns	r3, r3
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	4013      	ands	r3, r2
 800763a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	68da      	ldr	r2, [r3, #12]
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	fa02 f303 	lsl.w	r3, r2, r3
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	4313      	orrs	r3, r2
 800764c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800765a:	2201      	movs	r2, #1
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	fa02 f303 	lsl.w	r3, r2, r3
 8007662:	43db      	mvns	r3, r3
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	4013      	ands	r3, r2
 8007668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	091b      	lsrs	r3, r3, #4
 8007670:	f003 0201 	and.w	r2, r3, #1
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	fa02 f303 	lsl.w	r3, r2, r3
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	4313      	orrs	r3, r2
 800767e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f003 0303 	and.w	r3, r3, #3
 800768e:	2b03      	cmp	r3, #3
 8007690:	d017      	beq.n	80076c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	005b      	lsls	r3, r3, #1
 800769c:	2203      	movs	r2, #3
 800769e:	fa02 f303 	lsl.w	r3, r2, r3
 80076a2:	43db      	mvns	r3, r3
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	4013      	ands	r3, r2
 80076a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	fa02 f303 	lsl.w	r3, r2, r3
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f003 0303 	and.w	r3, r3, #3
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d123      	bne.n	8007716 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	08da      	lsrs	r2, r3, #3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	3208      	adds	r2, #8
 80076d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f003 0307 	and.w	r3, r3, #7
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	220f      	movs	r2, #15
 80076e6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ea:	43db      	mvns	r3, r3
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	4013      	ands	r3, r2
 80076f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	691a      	ldr	r2, [r3, #16]
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f003 0307 	and.w	r3, r3, #7
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	4313      	orrs	r3, r2
 8007706:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	08da      	lsrs	r2, r3, #3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3208      	adds	r2, #8
 8007710:	6939      	ldr	r1, [r7, #16]
 8007712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	005b      	lsls	r3, r3, #1
 8007720:	2203      	movs	r2, #3
 8007722:	fa02 f303 	lsl.w	r3, r2, r3
 8007726:	43db      	mvns	r3, r3
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	4013      	ands	r3, r2
 800772c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f003 0203 	and.w	r2, r3, #3
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	005b      	lsls	r3, r3, #1
 800773a:	fa02 f303 	lsl.w	r3, r2, r3
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	4313      	orrs	r3, r2
 8007742:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 80a6 	beq.w	80078a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007758:	4b5b      	ldr	r3, [pc, #364]	@ (80078c8 <HAL_GPIO_Init+0x2e4>)
 800775a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800775c:	4a5a      	ldr	r2, [pc, #360]	@ (80078c8 <HAL_GPIO_Init+0x2e4>)
 800775e:	f043 0301 	orr.w	r3, r3, #1
 8007762:	6613      	str	r3, [r2, #96]	@ 0x60
 8007764:	4b58      	ldr	r3, [pc, #352]	@ (80078c8 <HAL_GPIO_Init+0x2e4>)
 8007766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	60bb      	str	r3, [r7, #8]
 800776e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007770:	4a56      	ldr	r2, [pc, #344]	@ (80078cc <HAL_GPIO_Init+0x2e8>)
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	089b      	lsrs	r3, r3, #2
 8007776:	3302      	adds	r3, #2
 8007778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800777c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f003 0303 	and.w	r3, r3, #3
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	220f      	movs	r2, #15
 8007788:	fa02 f303 	lsl.w	r3, r2, r3
 800778c:	43db      	mvns	r3, r3
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	4013      	ands	r3, r2
 8007792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800779a:	d01f      	beq.n	80077dc <HAL_GPIO_Init+0x1f8>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a4c      	ldr	r2, [pc, #304]	@ (80078d0 <HAL_GPIO_Init+0x2ec>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d019      	beq.n	80077d8 <HAL_GPIO_Init+0x1f4>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a4b      	ldr	r2, [pc, #300]	@ (80078d4 <HAL_GPIO_Init+0x2f0>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d013      	beq.n	80077d4 <HAL_GPIO_Init+0x1f0>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a4a      	ldr	r2, [pc, #296]	@ (80078d8 <HAL_GPIO_Init+0x2f4>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d00d      	beq.n	80077d0 <HAL_GPIO_Init+0x1ec>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a49      	ldr	r2, [pc, #292]	@ (80078dc <HAL_GPIO_Init+0x2f8>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d007      	beq.n	80077cc <HAL_GPIO_Init+0x1e8>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a48      	ldr	r2, [pc, #288]	@ (80078e0 <HAL_GPIO_Init+0x2fc>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d101      	bne.n	80077c8 <HAL_GPIO_Init+0x1e4>
 80077c4:	2305      	movs	r3, #5
 80077c6:	e00a      	b.n	80077de <HAL_GPIO_Init+0x1fa>
 80077c8:	2306      	movs	r3, #6
 80077ca:	e008      	b.n	80077de <HAL_GPIO_Init+0x1fa>
 80077cc:	2304      	movs	r3, #4
 80077ce:	e006      	b.n	80077de <HAL_GPIO_Init+0x1fa>
 80077d0:	2303      	movs	r3, #3
 80077d2:	e004      	b.n	80077de <HAL_GPIO_Init+0x1fa>
 80077d4:	2302      	movs	r3, #2
 80077d6:	e002      	b.n	80077de <HAL_GPIO_Init+0x1fa>
 80077d8:	2301      	movs	r3, #1
 80077da:	e000      	b.n	80077de <HAL_GPIO_Init+0x1fa>
 80077dc:	2300      	movs	r3, #0
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	f002 0203 	and.w	r2, r2, #3
 80077e4:	0092      	lsls	r2, r2, #2
 80077e6:	4093      	lsls	r3, r2
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80077ee:	4937      	ldr	r1, [pc, #220]	@ (80078cc <HAL_GPIO_Init+0x2e8>)
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	089b      	lsrs	r3, r3, #2
 80077f4:	3302      	adds	r3, #2
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80077fc:	4b39      	ldr	r3, [pc, #228]	@ (80078e4 <HAL_GPIO_Init+0x300>)
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	43db      	mvns	r3, r3
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	4013      	ands	r3, r2
 800780a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d003      	beq.n	8007820 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	4313      	orrs	r3, r2
 800781e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007820:	4a30      	ldr	r2, [pc, #192]	@ (80078e4 <HAL_GPIO_Init+0x300>)
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007826:	4b2f      	ldr	r3, [pc, #188]	@ (80078e4 <HAL_GPIO_Init+0x300>)
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	43db      	mvns	r3, r3
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	4013      	ands	r3, r2
 8007834:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d003      	beq.n	800784a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	4313      	orrs	r3, r2
 8007848:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800784a:	4a26      	ldr	r2, [pc, #152]	@ (80078e4 <HAL_GPIO_Init+0x300>)
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007850:	4b24      	ldr	r3, [pc, #144]	@ (80078e4 <HAL_GPIO_Init+0x300>)
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	43db      	mvns	r3, r3
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	4013      	ands	r3, r2
 800785e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	4313      	orrs	r3, r2
 8007872:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007874:	4a1b      	ldr	r2, [pc, #108]	@ (80078e4 <HAL_GPIO_Init+0x300>)
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800787a:	4b1a      	ldr	r3, [pc, #104]	@ (80078e4 <HAL_GPIO_Init+0x300>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	43db      	mvns	r3, r3
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	4013      	ands	r3, r2
 8007888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4313      	orrs	r3, r2
 800789c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800789e:	4a11      	ldr	r2, [pc, #68]	@ (80078e4 <HAL_GPIO_Init+0x300>)
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	3301      	adds	r3, #1
 80078a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	fa22 f303 	lsr.w	r3, r2, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f47f ae9d 	bne.w	80075f4 <HAL_GPIO_Init+0x10>
  }
}
 80078ba:	bf00      	nop
 80078bc:	bf00      	nop
 80078be:	371c      	adds	r7, #28
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	40021000 	.word	0x40021000
 80078cc:	40010000 	.word	0x40010000
 80078d0:	48000400 	.word	0x48000400
 80078d4:	48000800 	.word	0x48000800
 80078d8:	48000c00 	.word	0x48000c00
 80078dc:	48001000 	.word	0x48001000
 80078e0:	48001400 	.word	0x48001400
 80078e4:	40010400 	.word	0x40010400

080078e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	460b      	mov	r3, r1
 80078f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	691a      	ldr	r2, [r3, #16]
 80078f8:	887b      	ldrh	r3, [r7, #2]
 80078fa:	4013      	ands	r3, r2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007900:	2301      	movs	r3, #1
 8007902:	73fb      	strb	r3, [r7, #15]
 8007904:	e001      	b.n	800790a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800790a:	7bfb      	ldrb	r3, [r7, #15]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	807b      	strh	r3, [r7, #2]
 8007924:	4613      	mov	r3, r2
 8007926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007928:	787b      	ldrb	r3, [r7, #1]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d003      	beq.n	8007936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800792e:	887a      	ldrh	r2, [r7, #2]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007934:	e002      	b.n	800793c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007936:	887a      	ldrh	r2, [r7, #2]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007952:	4b08      	ldr	r3, [pc, #32]	@ (8007974 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007954:	695a      	ldr	r2, [r3, #20]
 8007956:	88fb      	ldrh	r3, [r7, #6]
 8007958:	4013      	ands	r3, r2
 800795a:	2b00      	cmp	r3, #0
 800795c:	d006      	beq.n	800796c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800795e:	4a05      	ldr	r2, [pc, #20]	@ (8007974 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007960:	88fb      	ldrh	r3, [r7, #6]
 8007962:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007964:	88fb      	ldrh	r3, [r7, #6]
 8007966:	4618      	mov	r0, r3
 8007968:	f7fb fa70 	bl	8002e4c <HAL_GPIO_EXTI_Callback>
  }
}
 800796c:	bf00      	nop
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	40010400 	.word	0x40010400

08007978 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d141      	bne.n	8007a0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007986:	4b4b      	ldr	r3, [pc, #300]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800798e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007992:	d131      	bne.n	80079f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007994:	4b47      	ldr	r3, [pc, #284]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800799a:	4a46      	ldr	r2, [pc, #280]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800799c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80079a4:	4b43      	ldr	r3, [pc, #268]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80079ac:	4a41      	ldr	r2, [pc, #260]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80079b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80079b4:	4b40      	ldr	r3, [pc, #256]	@ (8007ab8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2232      	movs	r2, #50	@ 0x32
 80079ba:	fb02 f303 	mul.w	r3, r2, r3
 80079be:	4a3f      	ldr	r2, [pc, #252]	@ (8007abc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80079c0:	fba2 2303 	umull	r2, r3, r2, r3
 80079c4:	0c9b      	lsrs	r3, r3, #18
 80079c6:	3301      	adds	r3, #1
 80079c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80079ca:	e002      	b.n	80079d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	3b01      	subs	r3, #1
 80079d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80079d2:	4b38      	ldr	r3, [pc, #224]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079de:	d102      	bne.n	80079e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1f2      	bne.n	80079cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80079e6:	4b33      	ldr	r3, [pc, #204]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079f2:	d158      	bne.n	8007aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e057      	b.n	8007aa8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80079f8:	4b2e      	ldr	r3, [pc, #184]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079fe:	4a2d      	ldr	r2, [pc, #180]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007a08:	e04d      	b.n	8007aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a10:	d141      	bne.n	8007a96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007a12:	4b28      	ldr	r3, [pc, #160]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a1e:	d131      	bne.n	8007a84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007a20:	4b24      	ldr	r3, [pc, #144]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a26:	4a23      	ldr	r2, [pc, #140]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a30:	4b20      	ldr	r3, [pc, #128]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007a38:	4a1e      	ldr	r2, [pc, #120]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007a40:	4b1d      	ldr	r3, [pc, #116]	@ (8007ab8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2232      	movs	r2, #50	@ 0x32
 8007a46:	fb02 f303 	mul.w	r3, r2, r3
 8007a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8007abc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a50:	0c9b      	lsrs	r3, r3, #18
 8007a52:	3301      	adds	r3, #1
 8007a54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a56:	e002      	b.n	8007a5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a5e:	4b15      	ldr	r3, [pc, #84]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a6a:	d102      	bne.n	8007a72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1f2      	bne.n	8007a58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007a72:	4b10      	ldr	r3, [pc, #64]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a7e:	d112      	bne.n	8007aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e011      	b.n	8007aa8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007a84:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007a94:	e007      	b.n	8007aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007a96:	4b07      	ldr	r3, [pc, #28]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007a9e:	4a05      	ldr	r2, [pc, #20]	@ (8007ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007aa0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007aa4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	40007000 	.word	0x40007000
 8007ab8:	20000288 	.word	0x20000288
 8007abc:	431bde83 	.word	0x431bde83

08007ac0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007ac4:	4b05      	ldr	r3, [pc, #20]	@ (8007adc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	4a04      	ldr	r2, [pc, #16]	@ (8007adc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007aca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007ace:	6093      	str	r3, [r2, #8]
}
 8007ad0:	bf00      	nop
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	40007000 	.word	0x40007000

08007ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b088      	sub	sp, #32
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d101      	bne.n	8007af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e2fe      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d075      	beq.n	8007bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007afe:	4b97      	ldr	r3, [pc, #604]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f003 030c 	and.w	r3, r3, #12
 8007b06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b08:	4b94      	ldr	r3, [pc, #592]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	f003 0303 	and.w	r3, r3, #3
 8007b10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	2b0c      	cmp	r3, #12
 8007b16:	d102      	bne.n	8007b1e <HAL_RCC_OscConfig+0x3e>
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d002      	beq.n	8007b24 <HAL_RCC_OscConfig+0x44>
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	2b08      	cmp	r3, #8
 8007b22:	d10b      	bne.n	8007b3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b24:	4b8d      	ldr	r3, [pc, #564]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d05b      	beq.n	8007be8 <HAL_RCC_OscConfig+0x108>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d157      	bne.n	8007be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e2d9      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b44:	d106      	bne.n	8007b54 <HAL_RCC_OscConfig+0x74>
 8007b46:	4b85      	ldr	r3, [pc, #532]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a84      	ldr	r2, [pc, #528]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b50:	6013      	str	r3, [r2, #0]
 8007b52:	e01d      	b.n	8007b90 <HAL_RCC_OscConfig+0xb0>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b5c:	d10c      	bne.n	8007b78 <HAL_RCC_OscConfig+0x98>
 8007b5e:	4b7f      	ldr	r3, [pc, #508]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a7e      	ldr	r2, [pc, #504]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007b64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	4b7c      	ldr	r3, [pc, #496]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a7b      	ldr	r2, [pc, #492]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b74:	6013      	str	r3, [r2, #0]
 8007b76:	e00b      	b.n	8007b90 <HAL_RCC_OscConfig+0xb0>
 8007b78:	4b78      	ldr	r3, [pc, #480]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a77      	ldr	r2, [pc, #476]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	4b75      	ldr	r3, [pc, #468]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a74      	ldr	r2, [pc, #464]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007b8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d013      	beq.n	8007bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b98:	f7fd fd50 	bl	800563c <HAL_GetTick>
 8007b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b9e:	e008      	b.n	8007bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ba0:	f7fd fd4c 	bl	800563c <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	2b64      	cmp	r3, #100	@ 0x64
 8007bac:	d901      	bls.n	8007bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e29e      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d0f0      	beq.n	8007ba0 <HAL_RCC_OscConfig+0xc0>
 8007bbe:	e014      	b.n	8007bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc0:	f7fd fd3c 	bl	800563c <HAL_GetTick>
 8007bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007bc6:	e008      	b.n	8007bda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bc8:	f7fd fd38 	bl	800563c <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	2b64      	cmp	r3, #100	@ 0x64
 8007bd4:	d901      	bls.n	8007bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e28a      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007bda:	4b60      	ldr	r3, [pc, #384]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1f0      	bne.n	8007bc8 <HAL_RCC_OscConfig+0xe8>
 8007be6:	e000      	b.n	8007bea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0302 	and.w	r3, r3, #2
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d075      	beq.n	8007ce2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bf6:	4b59      	ldr	r3, [pc, #356]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f003 030c 	and.w	r3, r3, #12
 8007bfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c00:	4b56      	ldr	r3, [pc, #344]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f003 0303 	and.w	r3, r3, #3
 8007c08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	2b0c      	cmp	r3, #12
 8007c0e:	d102      	bne.n	8007c16 <HAL_RCC_OscConfig+0x136>
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d002      	beq.n	8007c1c <HAL_RCC_OscConfig+0x13c>
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d11f      	bne.n	8007c5c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c1c:	4b4f      	ldr	r3, [pc, #316]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d005      	beq.n	8007c34 <HAL_RCC_OscConfig+0x154>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e25d      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c34:	4b49      	ldr	r3, [pc, #292]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	061b      	lsls	r3, r3, #24
 8007c42:	4946      	ldr	r1, [pc, #280]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007c48:	4b45      	ldr	r3, [pc, #276]	@ (8007d60 <HAL_RCC_OscConfig+0x280>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fd fca9 	bl	80055a4 <HAL_InitTick>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d043      	beq.n	8007ce0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e249      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d023      	beq.n	8007cac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c64:	4b3d      	ldr	r3, [pc, #244]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a3c      	ldr	r2, [pc, #240]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007c6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c70:	f7fd fce4 	bl	800563c <HAL_GetTick>
 8007c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c76:	e008      	b.n	8007c8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c78:	f7fd fce0 	bl	800563c <HAL_GetTick>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d901      	bls.n	8007c8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	e232      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c8a:	4b34      	ldr	r3, [pc, #208]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d0f0      	beq.n	8007c78 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c96:	4b31      	ldr	r3, [pc, #196]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	061b      	lsls	r3, r3, #24
 8007ca4:	492d      	ldr	r1, [pc, #180]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	604b      	str	r3, [r1, #4]
 8007caa:	e01a      	b.n	8007ce2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007cac:	4b2b      	ldr	r3, [pc, #172]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a2a      	ldr	r2, [pc, #168]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007cb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb8:	f7fd fcc0 	bl	800563c <HAL_GetTick>
 8007cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007cbe:	e008      	b.n	8007cd2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cc0:	f7fd fcbc 	bl	800563c <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d901      	bls.n	8007cd2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e20e      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007cd2:	4b22      	ldr	r3, [pc, #136]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1f0      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x1e0>
 8007cde:	e000      	b.n	8007ce2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ce0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0308 	and.w	r3, r3, #8
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d041      	beq.n	8007d72 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d01c      	beq.n	8007d30 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cf6:	4b19      	ldr	r3, [pc, #100]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cfc:	4a17      	ldr	r2, [pc, #92]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007cfe:	f043 0301 	orr.w	r3, r3, #1
 8007d02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d06:	f7fd fc99 	bl	800563c <HAL_GetTick>
 8007d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007d0c:	e008      	b.n	8007d20 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d0e:	f7fd fc95 	bl	800563c <HAL_GetTick>
 8007d12:	4602      	mov	r2, r0
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d901      	bls.n	8007d20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e1e7      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007d20:	4b0e      	ldr	r3, [pc, #56]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d0ef      	beq.n	8007d0e <HAL_RCC_OscConfig+0x22e>
 8007d2e:	e020      	b.n	8007d72 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d30:	4b0a      	ldr	r3, [pc, #40]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d36:	4a09      	ldr	r2, [pc, #36]	@ (8007d5c <HAL_RCC_OscConfig+0x27c>)
 8007d38:	f023 0301 	bic.w	r3, r3, #1
 8007d3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d40:	f7fd fc7c 	bl	800563c <HAL_GetTick>
 8007d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007d46:	e00d      	b.n	8007d64 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d48:	f7fd fc78 	bl	800563c <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d906      	bls.n	8007d64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e1ca      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>
 8007d5a:	bf00      	nop
 8007d5c:	40021000 	.word	0x40021000
 8007d60:	2000028c 	.word	0x2000028c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007d64:	4b8c      	ldr	r3, [pc, #560]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1ea      	bne.n	8007d48 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0304 	and.w	r3, r3, #4
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 80a6 	beq.w	8007ecc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d80:	2300      	movs	r3, #0
 8007d82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007d84:	4b84      	ldr	r3, [pc, #528]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <HAL_RCC_OscConfig+0x2b4>
 8007d90:	2301      	movs	r3, #1
 8007d92:	e000      	b.n	8007d96 <HAL_RCC_OscConfig+0x2b6>
 8007d94:	2300      	movs	r3, #0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00d      	beq.n	8007db6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d9a:	4b7f      	ldr	r3, [pc, #508]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d9e:	4a7e      	ldr	r2, [pc, #504]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007da4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007da6:	4b7c      	ldr	r3, [pc, #496]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dae:	60fb      	str	r3, [r7, #12]
 8007db0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007db2:	2301      	movs	r3, #1
 8007db4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007db6:	4b79      	ldr	r3, [pc, #484]	@ (8007f9c <HAL_RCC_OscConfig+0x4bc>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d118      	bne.n	8007df4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007dc2:	4b76      	ldr	r3, [pc, #472]	@ (8007f9c <HAL_RCC_OscConfig+0x4bc>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a75      	ldr	r2, [pc, #468]	@ (8007f9c <HAL_RCC_OscConfig+0x4bc>)
 8007dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007dce:	f7fd fc35 	bl	800563c <HAL_GetTick>
 8007dd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007dd4:	e008      	b.n	8007de8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dd6:	f7fd fc31 	bl	800563c <HAL_GetTick>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d901      	bls.n	8007de8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e183      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007de8:	4b6c      	ldr	r3, [pc, #432]	@ (8007f9c <HAL_RCC_OscConfig+0x4bc>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d0f0      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d108      	bne.n	8007e0e <HAL_RCC_OscConfig+0x32e>
 8007dfc:	4b66      	ldr	r3, [pc, #408]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e02:	4a65      	ldr	r2, [pc, #404]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007e04:	f043 0301 	orr.w	r3, r3, #1
 8007e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007e0c:	e024      	b.n	8007e58 <HAL_RCC_OscConfig+0x378>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	2b05      	cmp	r3, #5
 8007e14:	d110      	bne.n	8007e38 <HAL_RCC_OscConfig+0x358>
 8007e16:	4b60      	ldr	r3, [pc, #384]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e1c:	4a5e      	ldr	r2, [pc, #376]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007e1e:	f043 0304 	orr.w	r3, r3, #4
 8007e22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007e26:	4b5c      	ldr	r3, [pc, #368]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e2c:	4a5a      	ldr	r2, [pc, #360]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007e2e:	f043 0301 	orr.w	r3, r3, #1
 8007e32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007e36:	e00f      	b.n	8007e58 <HAL_RCC_OscConfig+0x378>
 8007e38:	4b57      	ldr	r3, [pc, #348]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e3e:	4a56      	ldr	r2, [pc, #344]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007e40:	f023 0301 	bic.w	r3, r3, #1
 8007e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007e48:	4b53      	ldr	r3, [pc, #332]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e4e:	4a52      	ldr	r2, [pc, #328]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007e50:	f023 0304 	bic.w	r3, r3, #4
 8007e54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d016      	beq.n	8007e8e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e60:	f7fd fbec 	bl	800563c <HAL_GetTick>
 8007e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e66:	e00a      	b.n	8007e7e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e68:	f7fd fbe8 	bl	800563c <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d901      	bls.n	8007e7e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e138      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e7e:	4b46      	ldr	r3, [pc, #280]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e84:	f003 0302 	and.w	r3, r3, #2
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d0ed      	beq.n	8007e68 <HAL_RCC_OscConfig+0x388>
 8007e8c:	e015      	b.n	8007eba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e8e:	f7fd fbd5 	bl	800563c <HAL_GetTick>
 8007e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007e94:	e00a      	b.n	8007eac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e96:	f7fd fbd1 	bl	800563c <HAL_GetTick>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d901      	bls.n	8007eac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e121      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007eac:	4b3a      	ldr	r3, [pc, #232]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eb2:	f003 0302 	and.w	r3, r3, #2
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1ed      	bne.n	8007e96 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007eba:	7ffb      	ldrb	r3, [r7, #31]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d105      	bne.n	8007ecc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ec0:	4b35      	ldr	r3, [pc, #212]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ec4:	4a34      	ldr	r2, [pc, #208]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007ec6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007eca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0320 	and.w	r3, r3, #32
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d03c      	beq.n	8007f52 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d01c      	beq.n	8007f1a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ee6:	4a2c      	ldr	r2, [pc, #176]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007ee8:	f043 0301 	orr.w	r3, r3, #1
 8007eec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ef0:	f7fd fba4 	bl	800563c <HAL_GetTick>
 8007ef4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007ef6:	e008      	b.n	8007f0a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ef8:	f7fd fba0 	bl	800563c <HAL_GetTick>
 8007efc:	4602      	mov	r2, r0
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d901      	bls.n	8007f0a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e0f2      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007f0a:	4b23      	ldr	r3, [pc, #140]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f10:	f003 0302 	and.w	r3, r3, #2
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d0ef      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x418>
 8007f18:	e01b      	b.n	8007f52 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f20:	4a1d      	ldr	r2, [pc, #116]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007f22:	f023 0301 	bic.w	r3, r3, #1
 8007f26:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f2a:	f7fd fb87 	bl	800563c <HAL_GetTick>
 8007f2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007f30:	e008      	b.n	8007f44 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f32:	f7fd fb83 	bl	800563c <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d901      	bls.n	8007f44 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e0d5      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007f44:	4b14      	ldr	r3, [pc, #80]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1ef      	bne.n	8007f32 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f000 80c9 	beq.w	80080ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	f003 030c 	and.w	r3, r3, #12
 8007f64:	2b0c      	cmp	r3, #12
 8007f66:	f000 8083 	beq.w	8008070 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	69db      	ldr	r3, [r3, #28]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d15e      	bne.n	8008030 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f72:	4b09      	ldr	r3, [pc, #36]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a08      	ldr	r2, [pc, #32]	@ (8007f98 <HAL_RCC_OscConfig+0x4b8>)
 8007f78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f7e:	f7fd fb5d 	bl	800563c <HAL_GetTick>
 8007f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f84:	e00c      	b.n	8007fa0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f86:	f7fd fb59 	bl	800563c <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d905      	bls.n	8007fa0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e0ab      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>
 8007f98:	40021000 	.word	0x40021000
 8007f9c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fa0:	4b55      	ldr	r3, [pc, #340]	@ (80080f8 <HAL_RCC_OscConfig+0x618>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1ec      	bne.n	8007f86 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007fac:	4b52      	ldr	r3, [pc, #328]	@ (80080f8 <HAL_RCC_OscConfig+0x618>)
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	4b52      	ldr	r3, [pc, #328]	@ (80080fc <HAL_RCC_OscConfig+0x61c>)
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	6a11      	ldr	r1, [r2, #32]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007fbc:	3a01      	subs	r2, #1
 8007fbe:	0112      	lsls	r2, r2, #4
 8007fc0:	4311      	orrs	r1, r2
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007fc6:	0212      	lsls	r2, r2, #8
 8007fc8:	4311      	orrs	r1, r2
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007fce:	0852      	lsrs	r2, r2, #1
 8007fd0:	3a01      	subs	r2, #1
 8007fd2:	0552      	lsls	r2, r2, #21
 8007fd4:	4311      	orrs	r1, r2
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007fda:	0852      	lsrs	r2, r2, #1
 8007fdc:	3a01      	subs	r2, #1
 8007fde:	0652      	lsls	r2, r2, #25
 8007fe0:	4311      	orrs	r1, r2
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007fe6:	06d2      	lsls	r2, r2, #27
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	4943      	ldr	r1, [pc, #268]	@ (80080f8 <HAL_RCC_OscConfig+0x618>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ff0:	4b41      	ldr	r3, [pc, #260]	@ (80080f8 <HAL_RCC_OscConfig+0x618>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a40      	ldr	r2, [pc, #256]	@ (80080f8 <HAL_RCC_OscConfig+0x618>)
 8007ff6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ffa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ffc:	4b3e      	ldr	r3, [pc, #248]	@ (80080f8 <HAL_RCC_OscConfig+0x618>)
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	4a3d      	ldr	r2, [pc, #244]	@ (80080f8 <HAL_RCC_OscConfig+0x618>)
 8008002:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008006:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008008:	f7fd fb18 	bl	800563c <HAL_GetTick>
 800800c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800800e:	e008      	b.n	8008022 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008010:	f7fd fb14 	bl	800563c <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	2b02      	cmp	r3, #2
 800801c:	d901      	bls.n	8008022 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e066      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008022:	4b35      	ldr	r3, [pc, #212]	@ (80080f8 <HAL_RCC_OscConfig+0x618>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d0f0      	beq.n	8008010 <HAL_RCC_OscConfig+0x530>
 800802e:	e05e      	b.n	80080ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008030:	4b31      	ldr	r3, [pc, #196]	@ (80080f8 <HAL_RCC_OscConfig+0x618>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a30      	ldr	r2, [pc, #192]	@ (80080f8 <HAL_RCC_OscConfig+0x618>)
 8008036:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800803a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800803c:	f7fd fafe 	bl	800563c <HAL_GetTick>
 8008040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008042:	e008      	b.n	8008056 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008044:	f7fd fafa 	bl	800563c <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	2b02      	cmp	r3, #2
 8008050:	d901      	bls.n	8008056 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e04c      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008056:	4b28      	ldr	r3, [pc, #160]	@ (80080f8 <HAL_RCC_OscConfig+0x618>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1f0      	bne.n	8008044 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008062:	4b25      	ldr	r3, [pc, #148]	@ (80080f8 <HAL_RCC_OscConfig+0x618>)
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	4924      	ldr	r1, [pc, #144]	@ (80080f8 <HAL_RCC_OscConfig+0x618>)
 8008068:	4b25      	ldr	r3, [pc, #148]	@ (8008100 <HAL_RCC_OscConfig+0x620>)
 800806a:	4013      	ands	r3, r2
 800806c:	60cb      	str	r3, [r1, #12]
 800806e:	e03e      	b.n	80080ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d101      	bne.n	800807c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e039      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800807c:	4b1e      	ldr	r3, [pc, #120]	@ (80080f8 <HAL_RCC_OscConfig+0x618>)
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f003 0203 	and.w	r2, r3, #3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a1b      	ldr	r3, [r3, #32]
 800808c:	429a      	cmp	r2, r3
 800808e:	d12c      	bne.n	80080ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800809a:	3b01      	subs	r3, #1
 800809c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800809e:	429a      	cmp	r2, r3
 80080a0:	d123      	bne.n	80080ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d11b      	bne.n	80080ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80080be:	429a      	cmp	r2, r3
 80080c0:	d113      	bne.n	80080ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080cc:	085b      	lsrs	r3, r3, #1
 80080ce:	3b01      	subs	r3, #1
 80080d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d109      	bne.n	80080ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080e0:	085b      	lsrs	r3, r3, #1
 80080e2:	3b01      	subs	r3, #1
 80080e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d001      	beq.n	80080ee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e000      	b.n	80080f0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3720      	adds	r7, #32
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	40021000 	.word	0x40021000
 80080fc:	019f800c 	.word	0x019f800c
 8008100:	feeefffc 	.word	0xfeeefffc

08008104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800810e:	2300      	movs	r3, #0
 8008110:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d101      	bne.n	800811c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e11e      	b.n	800835a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800811c:	4b91      	ldr	r3, [pc, #580]	@ (8008364 <HAL_RCC_ClockConfig+0x260>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 030f 	and.w	r3, r3, #15
 8008124:	683a      	ldr	r2, [r7, #0]
 8008126:	429a      	cmp	r2, r3
 8008128:	d910      	bls.n	800814c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800812a:	4b8e      	ldr	r3, [pc, #568]	@ (8008364 <HAL_RCC_ClockConfig+0x260>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f023 020f 	bic.w	r2, r3, #15
 8008132:	498c      	ldr	r1, [pc, #560]	@ (8008364 <HAL_RCC_ClockConfig+0x260>)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	4313      	orrs	r3, r2
 8008138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800813a:	4b8a      	ldr	r3, [pc, #552]	@ (8008364 <HAL_RCC_ClockConfig+0x260>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 030f 	and.w	r3, r3, #15
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	429a      	cmp	r2, r3
 8008146:	d001      	beq.n	800814c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e106      	b.n	800835a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	d073      	beq.n	8008240 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	2b03      	cmp	r3, #3
 800815e:	d129      	bne.n	80081b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008160:	4b81      	ldr	r3, [pc, #516]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e0f4      	b.n	800835a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008170:	f000 f99e 	bl	80084b0 <RCC_GetSysClockFreqFromPLLSource>
 8008174:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	4a7c      	ldr	r2, [pc, #496]	@ (800836c <HAL_RCC_ClockConfig+0x268>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d93f      	bls.n	80081fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800817e:	4b7a      	ldr	r3, [pc, #488]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d009      	beq.n	800819e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008192:	2b00      	cmp	r3, #0
 8008194:	d033      	beq.n	80081fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800819a:	2b00      	cmp	r3, #0
 800819c:	d12f      	bne.n	80081fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800819e:	4b72      	ldr	r3, [pc, #456]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081a6:	4a70      	ldr	r2, [pc, #448]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 80081a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80081ae:	2380      	movs	r3, #128	@ 0x80
 80081b0:	617b      	str	r3, [r7, #20]
 80081b2:	e024      	b.n	80081fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d107      	bne.n	80081cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081bc:	4b6a      	ldr	r3, [pc, #424]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d109      	bne.n	80081dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e0c6      	b.n	800835a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081cc:	4b66      	ldr	r3, [pc, #408]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d101      	bne.n	80081dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e0be      	b.n	800835a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80081dc:	f000 f8ce 	bl	800837c <HAL_RCC_GetSysClockFreq>
 80081e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	4a61      	ldr	r2, [pc, #388]	@ (800836c <HAL_RCC_ClockConfig+0x268>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d909      	bls.n	80081fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80081ea:	4b5f      	ldr	r3, [pc, #380]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081f2:	4a5d      	ldr	r2, [pc, #372]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 80081f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80081fa:	2380      	movs	r3, #128	@ 0x80
 80081fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80081fe:	4b5a      	ldr	r3, [pc, #360]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f023 0203 	bic.w	r2, r3, #3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	4957      	ldr	r1, [pc, #348]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 800820c:	4313      	orrs	r3, r2
 800820e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008210:	f7fd fa14 	bl	800563c <HAL_GetTick>
 8008214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008216:	e00a      	b.n	800822e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008218:	f7fd fa10 	bl	800563c <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008226:	4293      	cmp	r3, r2
 8008228:	d901      	bls.n	800822e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e095      	b.n	800835a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800822e:	4b4e      	ldr	r3, [pc, #312]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f003 020c 	and.w	r2, r3, #12
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	429a      	cmp	r2, r3
 800823e:	d1eb      	bne.n	8008218 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b00      	cmp	r3, #0
 800824a:	d023      	beq.n	8008294 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0304 	and.w	r3, r3, #4
 8008254:	2b00      	cmp	r3, #0
 8008256:	d005      	beq.n	8008264 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008258:	4b43      	ldr	r3, [pc, #268]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	4a42      	ldr	r2, [pc, #264]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 800825e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008262:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0308 	and.w	r3, r3, #8
 800826c:	2b00      	cmp	r3, #0
 800826e:	d007      	beq.n	8008280 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008270:	4b3d      	ldr	r3, [pc, #244]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008278:	4a3b      	ldr	r2, [pc, #236]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 800827a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800827e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008280:	4b39      	ldr	r3, [pc, #228]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	4936      	ldr	r1, [pc, #216]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 800828e:	4313      	orrs	r3, r2
 8008290:	608b      	str	r3, [r1, #8]
 8008292:	e008      	b.n	80082a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	2b80      	cmp	r3, #128	@ 0x80
 8008298:	d105      	bne.n	80082a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800829a:	4b33      	ldr	r3, [pc, #204]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	4a32      	ldr	r2, [pc, #200]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 80082a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80082a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082a6:	4b2f      	ldr	r3, [pc, #188]	@ (8008364 <HAL_RCC_ClockConfig+0x260>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 030f 	and.w	r3, r3, #15
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d21d      	bcs.n	80082f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082b4:	4b2b      	ldr	r3, [pc, #172]	@ (8008364 <HAL_RCC_ClockConfig+0x260>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f023 020f 	bic.w	r2, r3, #15
 80082bc:	4929      	ldr	r1, [pc, #164]	@ (8008364 <HAL_RCC_ClockConfig+0x260>)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80082c4:	f7fd f9ba 	bl	800563c <HAL_GetTick>
 80082c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ca:	e00a      	b.n	80082e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082cc:	f7fd f9b6 	bl	800563c <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082da:	4293      	cmp	r3, r2
 80082dc:	d901      	bls.n	80082e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e03b      	b.n	800835a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082e2:	4b20      	ldr	r3, [pc, #128]	@ (8008364 <HAL_RCC_ClockConfig+0x260>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 030f 	and.w	r3, r3, #15
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d1ed      	bne.n	80082cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0304 	and.w	r3, r3, #4
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d008      	beq.n	800830e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	4917      	ldr	r1, [pc, #92]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 800830a:	4313      	orrs	r3, r2
 800830c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0308 	and.w	r3, r3, #8
 8008316:	2b00      	cmp	r3, #0
 8008318:	d009      	beq.n	800832e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800831a:	4b13      	ldr	r3, [pc, #76]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	00db      	lsls	r3, r3, #3
 8008328:	490f      	ldr	r1, [pc, #60]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 800832a:	4313      	orrs	r3, r2
 800832c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800832e:	f000 f825 	bl	800837c <HAL_RCC_GetSysClockFreq>
 8008332:	4602      	mov	r2, r0
 8008334:	4b0c      	ldr	r3, [pc, #48]	@ (8008368 <HAL_RCC_ClockConfig+0x264>)
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	091b      	lsrs	r3, r3, #4
 800833a:	f003 030f 	and.w	r3, r3, #15
 800833e:	490c      	ldr	r1, [pc, #48]	@ (8008370 <HAL_RCC_ClockConfig+0x26c>)
 8008340:	5ccb      	ldrb	r3, [r1, r3]
 8008342:	f003 031f 	and.w	r3, r3, #31
 8008346:	fa22 f303 	lsr.w	r3, r2, r3
 800834a:	4a0a      	ldr	r2, [pc, #40]	@ (8008374 <HAL_RCC_ClockConfig+0x270>)
 800834c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800834e:	4b0a      	ldr	r3, [pc, #40]	@ (8008378 <HAL_RCC_ClockConfig+0x274>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4618      	mov	r0, r3
 8008354:	f7fd f926 	bl	80055a4 <HAL_InitTick>
 8008358:	4603      	mov	r3, r0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3718      	adds	r7, #24
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	40022000 	.word	0x40022000
 8008368:	40021000 	.word	0x40021000
 800836c:	04c4b400 	.word	0x04c4b400
 8008370:	0800d530 	.word	0x0800d530
 8008374:	20000288 	.word	0x20000288
 8008378:	2000028c 	.word	0x2000028c

0800837c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800837c:	b480      	push	{r7}
 800837e:	b087      	sub	sp, #28
 8008380:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008382:	4b2c      	ldr	r3, [pc, #176]	@ (8008434 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f003 030c 	and.w	r3, r3, #12
 800838a:	2b04      	cmp	r3, #4
 800838c:	d102      	bne.n	8008394 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800838e:	4b2a      	ldr	r3, [pc, #168]	@ (8008438 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008390:	613b      	str	r3, [r7, #16]
 8008392:	e047      	b.n	8008424 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008394:	4b27      	ldr	r3, [pc, #156]	@ (8008434 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f003 030c 	and.w	r3, r3, #12
 800839c:	2b08      	cmp	r3, #8
 800839e:	d102      	bne.n	80083a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80083a0:	4b26      	ldr	r3, [pc, #152]	@ (800843c <HAL_RCC_GetSysClockFreq+0xc0>)
 80083a2:	613b      	str	r3, [r7, #16]
 80083a4:	e03e      	b.n	8008424 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80083a6:	4b23      	ldr	r3, [pc, #140]	@ (8008434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f003 030c 	and.w	r3, r3, #12
 80083ae:	2b0c      	cmp	r3, #12
 80083b0:	d136      	bne.n	8008420 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80083b2:	4b20      	ldr	r3, [pc, #128]	@ (8008434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	f003 0303 	and.w	r3, r3, #3
 80083ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80083bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	091b      	lsrs	r3, r3, #4
 80083c2:	f003 030f 	and.w	r3, r3, #15
 80083c6:	3301      	adds	r3, #1
 80083c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d10c      	bne.n	80083ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80083d0:	4a1a      	ldr	r2, [pc, #104]	@ (800843c <HAL_RCC_GetSysClockFreq+0xc0>)
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083d8:	4a16      	ldr	r2, [pc, #88]	@ (8008434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80083da:	68d2      	ldr	r2, [r2, #12]
 80083dc:	0a12      	lsrs	r2, r2, #8
 80083de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80083e2:	fb02 f303 	mul.w	r3, r2, r3
 80083e6:	617b      	str	r3, [r7, #20]
      break;
 80083e8:	e00c      	b.n	8008404 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80083ea:	4a13      	ldr	r2, [pc, #76]	@ (8008438 <HAL_RCC_GetSysClockFreq+0xbc>)
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f2:	4a10      	ldr	r2, [pc, #64]	@ (8008434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80083f4:	68d2      	ldr	r2, [r2, #12]
 80083f6:	0a12      	lsrs	r2, r2, #8
 80083f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80083fc:	fb02 f303 	mul.w	r3, r2, r3
 8008400:	617b      	str	r3, [r7, #20]
      break;
 8008402:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008404:	4b0b      	ldr	r3, [pc, #44]	@ (8008434 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	0e5b      	lsrs	r3, r3, #25
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	3301      	adds	r3, #1
 8008410:	005b      	lsls	r3, r3, #1
 8008412:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	fbb2 f3f3 	udiv	r3, r2, r3
 800841c:	613b      	str	r3, [r7, #16]
 800841e:	e001      	b.n	8008424 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008424:	693b      	ldr	r3, [r7, #16]
}
 8008426:	4618      	mov	r0, r3
 8008428:	371c      	adds	r7, #28
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	40021000 	.word	0x40021000
 8008438:	00f42400 	.word	0x00f42400
 800843c:	016e3600 	.word	0x016e3600

08008440 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008444:	4b03      	ldr	r3, [pc, #12]	@ (8008454 <HAL_RCC_GetHCLKFreq+0x14>)
 8008446:	681b      	ldr	r3, [r3, #0]
}
 8008448:	4618      	mov	r0, r3
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	20000288 	.word	0x20000288

08008458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800845c:	f7ff fff0 	bl	8008440 <HAL_RCC_GetHCLKFreq>
 8008460:	4602      	mov	r2, r0
 8008462:	4b06      	ldr	r3, [pc, #24]	@ (800847c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	0a1b      	lsrs	r3, r3, #8
 8008468:	f003 0307 	and.w	r3, r3, #7
 800846c:	4904      	ldr	r1, [pc, #16]	@ (8008480 <HAL_RCC_GetPCLK1Freq+0x28>)
 800846e:	5ccb      	ldrb	r3, [r1, r3]
 8008470:	f003 031f 	and.w	r3, r3, #31
 8008474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008478:	4618      	mov	r0, r3
 800847a:	bd80      	pop	{r7, pc}
 800847c:	40021000 	.word	0x40021000
 8008480:	0800d540 	.word	0x0800d540

08008484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008488:	f7ff ffda 	bl	8008440 <HAL_RCC_GetHCLKFreq>
 800848c:	4602      	mov	r2, r0
 800848e:	4b06      	ldr	r3, [pc, #24]	@ (80084a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	0adb      	lsrs	r3, r3, #11
 8008494:	f003 0307 	and.w	r3, r3, #7
 8008498:	4904      	ldr	r1, [pc, #16]	@ (80084ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800849a:	5ccb      	ldrb	r3, [r1, r3]
 800849c:	f003 031f 	and.w	r3, r3, #31
 80084a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	40021000 	.word	0x40021000
 80084ac:	0800d540 	.word	0x0800d540

080084b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80084b6:	4b1e      	ldr	r3, [pc, #120]	@ (8008530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	f003 0303 	and.w	r3, r3, #3
 80084be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80084c0:	4b1b      	ldr	r3, [pc, #108]	@ (8008530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	091b      	lsrs	r3, r3, #4
 80084c6:	f003 030f 	and.w	r3, r3, #15
 80084ca:	3301      	adds	r3, #1
 80084cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	d10c      	bne.n	80084ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80084d4:	4a17      	ldr	r2, [pc, #92]	@ (8008534 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084dc:	4a14      	ldr	r2, [pc, #80]	@ (8008530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80084de:	68d2      	ldr	r2, [r2, #12]
 80084e0:	0a12      	lsrs	r2, r2, #8
 80084e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80084e6:	fb02 f303 	mul.w	r3, r2, r3
 80084ea:	617b      	str	r3, [r7, #20]
    break;
 80084ec:	e00c      	b.n	8008508 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80084ee:	4a12      	ldr	r2, [pc, #72]	@ (8008538 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f6:	4a0e      	ldr	r2, [pc, #56]	@ (8008530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80084f8:	68d2      	ldr	r2, [r2, #12]
 80084fa:	0a12      	lsrs	r2, r2, #8
 80084fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008500:	fb02 f303 	mul.w	r3, r2, r3
 8008504:	617b      	str	r3, [r7, #20]
    break;
 8008506:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008508:	4b09      	ldr	r3, [pc, #36]	@ (8008530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	0e5b      	lsrs	r3, r3, #25
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	3301      	adds	r3, #1
 8008514:	005b      	lsls	r3, r3, #1
 8008516:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008520:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008522:	687b      	ldr	r3, [r7, #4]
}
 8008524:	4618      	mov	r0, r3
 8008526:	371c      	adds	r7, #28
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	40021000 	.word	0x40021000
 8008534:	016e3600 	.word	0x016e3600
 8008538:	00f42400 	.word	0x00f42400

0800853c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008544:	2300      	movs	r3, #0
 8008546:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008548:	2300      	movs	r3, #0
 800854a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 8098 	beq.w	800868a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800855a:	2300      	movs	r3, #0
 800855c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800855e:	4b43      	ldr	r3, [pc, #268]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10d      	bne.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800856a:	4b40      	ldr	r3, [pc, #256]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800856c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800856e:	4a3f      	ldr	r2, [pc, #252]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008574:	6593      	str	r3, [r2, #88]	@ 0x58
 8008576:	4b3d      	ldr	r3, [pc, #244]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800857a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800857e:	60bb      	str	r3, [r7, #8]
 8008580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008582:	2301      	movs	r3, #1
 8008584:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008586:	4b3a      	ldr	r3, [pc, #232]	@ (8008670 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a39      	ldr	r2, [pc, #228]	@ (8008670 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800858c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008590:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008592:	f7fd f853 	bl	800563c <HAL_GetTick>
 8008596:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008598:	e009      	b.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800859a:	f7fd f84f 	bl	800563c <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d902      	bls.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	74fb      	strb	r3, [r7, #19]
        break;
 80085ac:	e005      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085ae:	4b30      	ldr	r3, [pc, #192]	@ (8008670 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d0ef      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80085ba:	7cfb      	ldrb	r3, [r7, #19]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d159      	bne.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80085c0:	4b2a      	ldr	r3, [pc, #168]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d01e      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d019      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80085dc:	4b23      	ldr	r3, [pc, #140]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80085e8:	4b20      	ldr	r3, [pc, #128]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ee:	4a1f      	ldr	r2, [pc, #124]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80085f8:	4b1c      	ldr	r3, [pc, #112]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085fe:	4a1b      	ldr	r2, [pc, #108]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008600:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008608:	4a18      	ldr	r2, [pc, #96]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	2b00      	cmp	r3, #0
 8008618:	d016      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800861a:	f7fd f80f 	bl	800563c <HAL_GetTick>
 800861e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008620:	e00b      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008622:	f7fd f80b 	bl	800563c <HAL_GetTick>
 8008626:	4602      	mov	r2, r0
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	1ad3      	subs	r3, r2, r3
 800862c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008630:	4293      	cmp	r3, r2
 8008632:	d902      	bls.n	800863a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	74fb      	strb	r3, [r7, #19]
            break;
 8008638:	e006      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800863a:	4b0c      	ldr	r3, [pc, #48]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800863c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	2b00      	cmp	r3, #0
 8008646:	d0ec      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008648:	7cfb      	ldrb	r3, [r7, #19]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10b      	bne.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800864e:	4b07      	ldr	r3, [pc, #28]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008654:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800865c:	4903      	ldr	r1, [pc, #12]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800865e:	4313      	orrs	r3, r2
 8008660:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008664:	e008      	b.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008666:	7cfb      	ldrb	r3, [r7, #19]
 8008668:	74bb      	strb	r3, [r7, #18]
 800866a:	e005      	b.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800866c:	40021000 	.word	0x40021000
 8008670:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008674:	7cfb      	ldrb	r3, [r7, #19]
 8008676:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008678:	7c7b      	ldrb	r3, [r7, #17]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d105      	bne.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800867e:	4ba7      	ldr	r3, [pc, #668]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008682:	4aa6      	ldr	r2, [pc, #664]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008684:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008688:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00a      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008696:	4ba1      	ldr	r3, [pc, #644]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800869c:	f023 0203 	bic.w	r2, r3, #3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	499d      	ldr	r1, [pc, #628]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086a6:	4313      	orrs	r3, r2
 80086a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0302 	and.w	r3, r3, #2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00a      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80086b8:	4b98      	ldr	r3, [pc, #608]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086be:	f023 020c 	bic.w	r2, r3, #12
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	4995      	ldr	r1, [pc, #596]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 0304 	and.w	r3, r3, #4
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80086da:	4b90      	ldr	r3, [pc, #576]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	498c      	ldr	r1, [pc, #560]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0308 	and.w	r3, r3, #8
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00a      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80086fc:	4b87      	ldr	r3, [pc, #540]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008702:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	4984      	ldr	r1, [pc, #528]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800870c:	4313      	orrs	r3, r2
 800870e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0310 	and.w	r3, r3, #16
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00a      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800871e:	4b7f      	ldr	r3, [pc, #508]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008724:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	497b      	ldr	r1, [pc, #492]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800872e:	4313      	orrs	r3, r2
 8008730:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0320 	and.w	r3, r3, #32
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00a      	beq.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008740:	4b76      	ldr	r3, [pc, #472]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008746:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	4973      	ldr	r1, [pc, #460]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008750:	4313      	orrs	r3, r2
 8008752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00a      	beq.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008762:	4b6e      	ldr	r3, [pc, #440]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008768:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	496a      	ldr	r1, [pc, #424]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008772:	4313      	orrs	r3, r2
 8008774:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00a      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008784:	4b65      	ldr	r3, [pc, #404]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800878a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	4962      	ldr	r1, [pc, #392]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008794:	4313      	orrs	r3, r2
 8008796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00a      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80087a6:	4b5d      	ldr	r3, [pc, #372]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b4:	4959      	ldr	r1, [pc, #356]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087b6:	4313      	orrs	r3, r2
 80087b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00a      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80087c8:	4b54      	ldr	r3, [pc, #336]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087ce:	f023 0203 	bic.w	r2, r3, #3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d6:	4951      	ldr	r1, [pc, #324]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00a      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087ea:	4b4c      	ldr	r3, [pc, #304]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f8:	4948      	ldr	r1, [pc, #288]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008808:	2b00      	cmp	r3, #0
 800880a:	d015      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800880c:	4b43      	ldr	r3, [pc, #268]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800880e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008812:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800881a:	4940      	ldr	r1, [pc, #256]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800881c:	4313      	orrs	r3, r2
 800881e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008826:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800882a:	d105      	bne.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800882c:	4b3b      	ldr	r3, [pc, #236]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	4a3a      	ldr	r2, [pc, #232]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008836:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008840:	2b00      	cmp	r3, #0
 8008842:	d015      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008844:	4b35      	ldr	r3, [pc, #212]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800884a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008852:	4932      	ldr	r1, [pc, #200]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008854:	4313      	orrs	r3, r2
 8008856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800885e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008862:	d105      	bne.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008864:	4b2d      	ldr	r3, [pc, #180]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	4a2c      	ldr	r2, [pc, #176]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800886a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800886e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d015      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800887c:	4b27      	ldr	r3, [pc, #156]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800887e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008882:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800888a:	4924      	ldr	r1, [pc, #144]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800888c:	4313      	orrs	r3, r2
 800888e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008896:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800889a:	d105      	bne.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800889c:	4b1f      	ldr	r3, [pc, #124]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	4a1e      	ldr	r2, [pc, #120]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d015      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80088b4:	4b19      	ldr	r3, [pc, #100]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088c2:	4916      	ldr	r1, [pc, #88]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088c4:	4313      	orrs	r3, r2
 80088c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088d2:	d105      	bne.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088d4:	4b11      	ldr	r3, [pc, #68]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	4a10      	ldr	r2, [pc, #64]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d019      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80088ec:	4b0b      	ldr	r3, [pc, #44]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088fa:	4908      	ldr	r1, [pc, #32]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008906:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800890a:	d109      	bne.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800890c:	4b03      	ldr	r3, [pc, #12]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	4a02      	ldr	r2, [pc, #8]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008912:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008916:	60d3      	str	r3, [r2, #12]
 8008918:	e002      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800891a:	bf00      	nop
 800891c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d015      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800892c:	4b29      	ldr	r3, [pc, #164]	@ (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800892e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008932:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800893a:	4926      	ldr	r1, [pc, #152]	@ (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800893c:	4313      	orrs	r3, r2
 800893e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008946:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800894a:	d105      	bne.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800894c:	4b21      	ldr	r3, [pc, #132]	@ (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	4a20      	ldr	r2, [pc, #128]	@ (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008956:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d015      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008964:	4b1b      	ldr	r3, [pc, #108]	@ (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800896a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008972:	4918      	ldr	r1, [pc, #96]	@ (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008974:	4313      	orrs	r3, r2
 8008976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800897e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008982:	d105      	bne.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008984:	4b13      	ldr	r3, [pc, #76]	@ (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	4a12      	ldr	r2, [pc, #72]	@ (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800898a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800898e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d015      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800899c:	4b0d      	ldr	r3, [pc, #52]	@ (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800899e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80089a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089aa:	490a      	ldr	r1, [pc, #40]	@ (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089ba:	d105      	bne.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089bc:	4b05      	ldr	r3, [pc, #20]	@ (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	4a04      	ldr	r2, [pc, #16]	@ (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80089c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80089c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	40021000 	.word	0x40021000

080089d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e054      	b.n	8008a94 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d111      	bne.n	8008a1a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f001 feec 	bl	800a7dc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d102      	bne.n	8008a12 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a23      	ldr	r2, [pc, #140]	@ (8008a9c <HAL_TIM_Base_Init+0xc4>)
 8008a10:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	3304      	adds	r3, #4
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	f001 fa35 	bl	8009e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	080050c1 	.word	0x080050c1

08008aa0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d001      	beq.n	8008ab8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e04c      	b.n	8008b52 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2202      	movs	r2, #2
 8008abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a26      	ldr	r2, [pc, #152]	@ (8008b60 <HAL_TIM_Base_Start+0xc0>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d022      	beq.n	8008b10 <HAL_TIM_Base_Start+0x70>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ad2:	d01d      	beq.n	8008b10 <HAL_TIM_Base_Start+0x70>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a22      	ldr	r2, [pc, #136]	@ (8008b64 <HAL_TIM_Base_Start+0xc4>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d018      	beq.n	8008b10 <HAL_TIM_Base_Start+0x70>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a21      	ldr	r2, [pc, #132]	@ (8008b68 <HAL_TIM_Base_Start+0xc8>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d013      	beq.n	8008b10 <HAL_TIM_Base_Start+0x70>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a1f      	ldr	r2, [pc, #124]	@ (8008b6c <HAL_TIM_Base_Start+0xcc>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d00e      	beq.n	8008b10 <HAL_TIM_Base_Start+0x70>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a1e      	ldr	r2, [pc, #120]	@ (8008b70 <HAL_TIM_Base_Start+0xd0>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d009      	beq.n	8008b10 <HAL_TIM_Base_Start+0x70>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a1c      	ldr	r2, [pc, #112]	@ (8008b74 <HAL_TIM_Base_Start+0xd4>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d004      	beq.n	8008b10 <HAL_TIM_Base_Start+0x70>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8008b78 <HAL_TIM_Base_Start+0xd8>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d115      	bne.n	8008b3c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	689a      	ldr	r2, [r3, #8]
 8008b16:	4b19      	ldr	r3, [pc, #100]	@ (8008b7c <HAL_TIM_Base_Start+0xdc>)
 8008b18:	4013      	ands	r3, r2
 8008b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2b06      	cmp	r3, #6
 8008b20:	d015      	beq.n	8008b4e <HAL_TIM_Base_Start+0xae>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b28:	d011      	beq.n	8008b4e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f042 0201 	orr.w	r2, r2, #1
 8008b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b3a:	e008      	b.n	8008b4e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f042 0201 	orr.w	r2, r2, #1
 8008b4a:	601a      	str	r2, [r3, #0]
 8008b4c:	e000      	b.n	8008b50 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	40012c00 	.word	0x40012c00
 8008b64:	40000400 	.word	0x40000400
 8008b68:	40000800 	.word	0x40000800
 8008b6c:	40000c00 	.word	0x40000c00
 8008b70:	40013400 	.word	0x40013400
 8008b74:	40014000 	.word	0x40014000
 8008b78:	40015000 	.word	0x40015000
 8008b7c:	00010007 	.word	0x00010007

08008b80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d001      	beq.n	8008b98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e054      	b.n	8008c42 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68da      	ldr	r2, [r3, #12]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f042 0201 	orr.w	r2, r2, #1
 8008bae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a26      	ldr	r2, [pc, #152]	@ (8008c50 <HAL_TIM_Base_Start_IT+0xd0>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d022      	beq.n	8008c00 <HAL_TIM_Base_Start_IT+0x80>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bc2:	d01d      	beq.n	8008c00 <HAL_TIM_Base_Start_IT+0x80>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a22      	ldr	r2, [pc, #136]	@ (8008c54 <HAL_TIM_Base_Start_IT+0xd4>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d018      	beq.n	8008c00 <HAL_TIM_Base_Start_IT+0x80>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a21      	ldr	r2, [pc, #132]	@ (8008c58 <HAL_TIM_Base_Start_IT+0xd8>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d013      	beq.n	8008c00 <HAL_TIM_Base_Start_IT+0x80>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8008c5c <HAL_TIM_Base_Start_IT+0xdc>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00e      	beq.n	8008c00 <HAL_TIM_Base_Start_IT+0x80>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a1e      	ldr	r2, [pc, #120]	@ (8008c60 <HAL_TIM_Base_Start_IT+0xe0>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d009      	beq.n	8008c00 <HAL_TIM_Base_Start_IT+0x80>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8008c64 <HAL_TIM_Base_Start_IT+0xe4>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d004      	beq.n	8008c00 <HAL_TIM_Base_Start_IT+0x80>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8008c68 <HAL_TIM_Base_Start_IT+0xe8>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d115      	bne.n	8008c2c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	689a      	ldr	r2, [r3, #8]
 8008c06:	4b19      	ldr	r3, [pc, #100]	@ (8008c6c <HAL_TIM_Base_Start_IT+0xec>)
 8008c08:	4013      	ands	r3, r2
 8008c0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2b06      	cmp	r3, #6
 8008c10:	d015      	beq.n	8008c3e <HAL_TIM_Base_Start_IT+0xbe>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c18:	d011      	beq.n	8008c3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f042 0201 	orr.w	r2, r2, #1
 8008c28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c2a:	e008      	b.n	8008c3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f042 0201 	orr.w	r2, r2, #1
 8008c3a:	601a      	str	r2, [r3, #0]
 8008c3c:	e000      	b.n	8008c40 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	40012c00 	.word	0x40012c00
 8008c54:	40000400 	.word	0x40000400
 8008c58:	40000800 	.word	0x40000800
 8008c5c:	40000c00 	.word	0x40000c00
 8008c60:	40013400 	.word	0x40013400
 8008c64:	40014000 	.word	0x40014000
 8008c68:	40015000 	.word	0x40015000
 8008c6c:	00010007 	.word	0x00010007

08008c70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d101      	bne.n	8008c82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e054      	b.n	8008d2c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d111      	bne.n	8008cb2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f001 fda0 	bl	800a7dc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d102      	bne.n	8008caa <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a23      	ldr	r2, [pc, #140]	@ (8008d34 <HAL_TIM_PWM_Init+0xc4>)
 8008ca8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2202      	movs	r2, #2
 8008cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	f001 f8e9 	bl	8009e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2201      	movs	r2, #1
 8008d16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	08008d39 	.word	0x08008d39

08008d38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d109      	bne.n	8008d70 <HAL_TIM_PWM_Start+0x24>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	bf14      	ite	ne
 8008d68:	2301      	movne	r3, #1
 8008d6a:	2300      	moveq	r3, #0
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	e03c      	b.n	8008dea <HAL_TIM_PWM_Start+0x9e>
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2b04      	cmp	r3, #4
 8008d74:	d109      	bne.n	8008d8a <HAL_TIM_PWM_Start+0x3e>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	bf14      	ite	ne
 8008d82:	2301      	movne	r3, #1
 8008d84:	2300      	moveq	r3, #0
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	e02f      	b.n	8008dea <HAL_TIM_PWM_Start+0x9e>
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2b08      	cmp	r3, #8
 8008d8e:	d109      	bne.n	8008da4 <HAL_TIM_PWM_Start+0x58>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	bf14      	ite	ne
 8008d9c:	2301      	movne	r3, #1
 8008d9e:	2300      	moveq	r3, #0
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	e022      	b.n	8008dea <HAL_TIM_PWM_Start+0x9e>
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	2b0c      	cmp	r3, #12
 8008da8:	d109      	bne.n	8008dbe <HAL_TIM_PWM_Start+0x72>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	bf14      	ite	ne
 8008db6:	2301      	movne	r3, #1
 8008db8:	2300      	moveq	r3, #0
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	e015      	b.n	8008dea <HAL_TIM_PWM_Start+0x9e>
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b10      	cmp	r3, #16
 8008dc2:	d109      	bne.n	8008dd8 <HAL_TIM_PWM_Start+0x8c>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	bf14      	ite	ne
 8008dd0:	2301      	movne	r3, #1
 8008dd2:	2300      	moveq	r3, #0
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	e008      	b.n	8008dea <HAL_TIM_PWM_Start+0x9e>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	bf14      	ite	ne
 8008de4:	2301      	movne	r3, #1
 8008de6:	2300      	moveq	r3, #0
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e0a6      	b.n	8008f40 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d104      	bne.n	8008e02 <HAL_TIM_PWM_Start+0xb6>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e00:	e023      	b.n	8008e4a <HAL_TIM_PWM_Start+0xfe>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b04      	cmp	r3, #4
 8008e06:	d104      	bne.n	8008e12 <HAL_TIM_PWM_Start+0xc6>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e10:	e01b      	b.n	8008e4a <HAL_TIM_PWM_Start+0xfe>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b08      	cmp	r3, #8
 8008e16:	d104      	bne.n	8008e22 <HAL_TIM_PWM_Start+0xd6>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e20:	e013      	b.n	8008e4a <HAL_TIM_PWM_Start+0xfe>
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b0c      	cmp	r3, #12
 8008e26:	d104      	bne.n	8008e32 <HAL_TIM_PWM_Start+0xe6>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e30:	e00b      	b.n	8008e4a <HAL_TIM_PWM_Start+0xfe>
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	2b10      	cmp	r3, #16
 8008e36:	d104      	bne.n	8008e42 <HAL_TIM_PWM_Start+0xf6>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e40:	e003      	b.n	8008e4a <HAL_TIM_PWM_Start+0xfe>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2202      	movs	r2, #2
 8008e46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f001 fc9c 	bl	800a790 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a3a      	ldr	r2, [pc, #232]	@ (8008f48 <HAL_TIM_PWM_Start+0x1fc>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d018      	beq.n	8008e94 <HAL_TIM_PWM_Start+0x148>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a39      	ldr	r2, [pc, #228]	@ (8008f4c <HAL_TIM_PWM_Start+0x200>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d013      	beq.n	8008e94 <HAL_TIM_PWM_Start+0x148>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a37      	ldr	r2, [pc, #220]	@ (8008f50 <HAL_TIM_PWM_Start+0x204>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d00e      	beq.n	8008e94 <HAL_TIM_PWM_Start+0x148>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a36      	ldr	r2, [pc, #216]	@ (8008f54 <HAL_TIM_PWM_Start+0x208>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d009      	beq.n	8008e94 <HAL_TIM_PWM_Start+0x148>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a34      	ldr	r2, [pc, #208]	@ (8008f58 <HAL_TIM_PWM_Start+0x20c>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d004      	beq.n	8008e94 <HAL_TIM_PWM_Start+0x148>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a33      	ldr	r2, [pc, #204]	@ (8008f5c <HAL_TIM_PWM_Start+0x210>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d101      	bne.n	8008e98 <HAL_TIM_PWM_Start+0x14c>
 8008e94:	2301      	movs	r3, #1
 8008e96:	e000      	b.n	8008e9a <HAL_TIM_PWM_Start+0x14e>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d007      	beq.n	8008eae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008eac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a25      	ldr	r2, [pc, #148]	@ (8008f48 <HAL_TIM_PWM_Start+0x1fc>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d022      	beq.n	8008efe <HAL_TIM_PWM_Start+0x1b2>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ec0:	d01d      	beq.n	8008efe <HAL_TIM_PWM_Start+0x1b2>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a26      	ldr	r2, [pc, #152]	@ (8008f60 <HAL_TIM_PWM_Start+0x214>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d018      	beq.n	8008efe <HAL_TIM_PWM_Start+0x1b2>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a24      	ldr	r2, [pc, #144]	@ (8008f64 <HAL_TIM_PWM_Start+0x218>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d013      	beq.n	8008efe <HAL_TIM_PWM_Start+0x1b2>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a23      	ldr	r2, [pc, #140]	@ (8008f68 <HAL_TIM_PWM_Start+0x21c>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d00e      	beq.n	8008efe <HAL_TIM_PWM_Start+0x1b2>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a19      	ldr	r2, [pc, #100]	@ (8008f4c <HAL_TIM_PWM_Start+0x200>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d009      	beq.n	8008efe <HAL_TIM_PWM_Start+0x1b2>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a18      	ldr	r2, [pc, #96]	@ (8008f50 <HAL_TIM_PWM_Start+0x204>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d004      	beq.n	8008efe <HAL_TIM_PWM_Start+0x1b2>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a18      	ldr	r2, [pc, #96]	@ (8008f5c <HAL_TIM_PWM_Start+0x210>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d115      	bne.n	8008f2a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	689a      	ldr	r2, [r3, #8]
 8008f04:	4b19      	ldr	r3, [pc, #100]	@ (8008f6c <HAL_TIM_PWM_Start+0x220>)
 8008f06:	4013      	ands	r3, r2
 8008f08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2b06      	cmp	r3, #6
 8008f0e:	d015      	beq.n	8008f3c <HAL_TIM_PWM_Start+0x1f0>
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f16:	d011      	beq.n	8008f3c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f042 0201 	orr.w	r2, r2, #1
 8008f26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f28:	e008      	b.n	8008f3c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f042 0201 	orr.w	r2, r2, #1
 8008f38:	601a      	str	r2, [r3, #0]
 8008f3a:	e000      	b.n	8008f3e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	40012c00 	.word	0x40012c00
 8008f4c:	40013400 	.word	0x40013400
 8008f50:	40014000 	.word	0x40014000
 8008f54:	40014400 	.word	0x40014400
 8008f58:	40014800 	.word	0x40014800
 8008f5c:	40015000 	.word	0x40015000
 8008f60:	40000400 	.word	0x40000400
 8008f64:	40000800 	.word	0x40000800
 8008f68:	40000c00 	.word	0x40000c00
 8008f6c:	00010007 	.word	0x00010007

08008f70 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d101      	bne.n	8008f84 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e04c      	b.n	800901e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d111      	bne.n	8008fb4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f001 fc1f 	bl	800a7dc <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d102      	bne.n	8008fac <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8009028 <HAL_TIM_OnePulse_Init+0xb8>)
 8008faa:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	4610      	mov	r0, r2
 8008fc8:	f000 ff68 	bl	8009e9c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f022 0208 	bic.w	r2, r2, #8
 8008fda:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6819      	ldr	r1, [r3, #0]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	430a      	orrs	r2, r1
 8008fea:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	0800902d 	.word	0x0800902d

0800902c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009050:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009058:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009060:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009068:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800906a:	7bfb      	ldrb	r3, [r7, #15]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d108      	bne.n	8009082 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009070:	7bbb      	ldrb	r3, [r7, #14]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d105      	bne.n	8009082 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009076:	7b7b      	ldrb	r3, [r7, #13]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d102      	bne.n	8009082 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800907c:	7b3b      	ldrb	r3, [r7, #12]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d001      	beq.n	8009086 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e059      	b.n	800913a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2202      	movs	r2, #2
 800908a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2202      	movs	r2, #2
 8009092:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2202      	movs	r2, #2
 800909a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2202      	movs	r2, #2
 80090a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68da      	ldr	r2, [r3, #12]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f042 0202 	orr.w	r2, r2, #2
 80090b4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68da      	ldr	r2, [r3, #12]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f042 0204 	orr.w	r2, r2, #4
 80090c4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2201      	movs	r2, #1
 80090cc:	2100      	movs	r1, #0
 80090ce:	4618      	mov	r0, r3
 80090d0:	f001 fb5e 	bl	800a790 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2201      	movs	r2, #1
 80090da:	2104      	movs	r1, #4
 80090dc:	4618      	mov	r0, r3
 80090de:	f001 fb57 	bl	800a790 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a17      	ldr	r2, [pc, #92]	@ (8009144 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d018      	beq.n	800911e <HAL_TIM_OnePulse_Start_IT+0xde>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a15      	ldr	r2, [pc, #84]	@ (8009148 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d013      	beq.n	800911e <HAL_TIM_OnePulse_Start_IT+0xde>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a14      	ldr	r2, [pc, #80]	@ (800914c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d00e      	beq.n	800911e <HAL_TIM_OnePulse_Start_IT+0xde>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a12      	ldr	r2, [pc, #72]	@ (8009150 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d009      	beq.n	800911e <HAL_TIM_OnePulse_Start_IT+0xde>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a11      	ldr	r2, [pc, #68]	@ (8009154 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d004      	beq.n	800911e <HAL_TIM_OnePulse_Start_IT+0xde>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a0f      	ldr	r2, [pc, #60]	@ (8009158 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d101      	bne.n	8009122 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800911e:	2301      	movs	r3, #1
 8009120:	e000      	b.n	8009124 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8009122:	2300      	movs	r3, #0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d007      	beq.n	8009138 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009136:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	40012c00 	.word	0x40012c00
 8009148:	40013400 	.word	0x40013400
 800914c:	40014000 	.word	0x40014000
 8009150:	40014400 	.word	0x40014400
 8009154:	40014800 	.word	0x40014800
 8009158:	40015000 	.word	0x40015000

0800915c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d101      	bne.n	8009170 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	e0a2      	b.n	80092b6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009176:	b2db      	uxtb	r3, r3
 8009178:	2b00      	cmp	r3, #0
 800917a:	d111      	bne.n	80091a0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f001 fb29 	bl	800a7dc <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800918e:	2b00      	cmp	r3, #0
 8009190:	d102      	bne.n	8009198 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a4a      	ldr	r2, [pc, #296]	@ (80092c0 <HAL_TIM_Encoder_Init+0x164>)
 8009196:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2202      	movs	r2, #2
 80091a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	6812      	ldr	r2, [r2, #0]
 80091b2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80091b6:	f023 0307 	bic.w	r3, r3, #7
 80091ba:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3304      	adds	r3, #4
 80091c4:	4619      	mov	r1, r3
 80091c6:	4610      	mov	r0, r2
 80091c8:	f000 fe68 	bl	8009e9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091f4:	f023 0303 	bic.w	r3, r3, #3
 80091f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	689a      	ldr	r2, [r3, #8]
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	021b      	lsls	r3, r3, #8
 8009204:	4313      	orrs	r3, r2
 8009206:	693a      	ldr	r2, [r7, #16]
 8009208:	4313      	orrs	r3, r2
 800920a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009212:	f023 030c 	bic.w	r3, r3, #12
 8009216:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800921e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	68da      	ldr	r2, [r3, #12]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	69db      	ldr	r3, [r3, #28]
 800922c:	021b      	lsls	r3, r3, #8
 800922e:	4313      	orrs	r3, r2
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	4313      	orrs	r3, r2
 8009234:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	011a      	lsls	r2, r3, #4
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	6a1b      	ldr	r3, [r3, #32]
 8009240:	031b      	lsls	r3, r3, #12
 8009242:	4313      	orrs	r3, r2
 8009244:	693a      	ldr	r2, [r7, #16]
 8009246:	4313      	orrs	r3, r2
 8009248:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009250:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009258:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	685a      	ldr	r2, [r3, #4]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	695b      	ldr	r3, [r3, #20]
 8009262:	011b      	lsls	r3, r3, #4
 8009264:	4313      	orrs	r3, r2
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	4313      	orrs	r3, r2
 800926a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	693a      	ldr	r2, [r7, #16]
 800927a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3718      	adds	r7, #24
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	0800503d 	.word	0x0800503d

080092c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80092d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80092dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d110      	bne.n	8009316 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d102      	bne.n	8009300 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80092fa:	7b7b      	ldrb	r3, [r7, #13]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d001      	beq.n	8009304 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e069      	b.n	80093d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2202      	movs	r2, #2
 8009308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2202      	movs	r2, #2
 8009310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009314:	e031      	b.n	800937a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2b04      	cmp	r3, #4
 800931a:	d110      	bne.n	800933e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800931c:	7bbb      	ldrb	r3, [r7, #14]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d102      	bne.n	8009328 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009322:	7b3b      	ldrb	r3, [r7, #12]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d001      	beq.n	800932c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e055      	b.n	80093d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2202      	movs	r2, #2
 8009330:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2202      	movs	r2, #2
 8009338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800933c:	e01d      	b.n	800937a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800933e:	7bfb      	ldrb	r3, [r7, #15]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d108      	bne.n	8009356 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009344:	7bbb      	ldrb	r3, [r7, #14]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d105      	bne.n	8009356 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800934a:	7b7b      	ldrb	r3, [r7, #13]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d102      	bne.n	8009356 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009350:	7b3b      	ldrb	r3, [r7, #12]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d001      	beq.n	800935a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e03e      	b.n	80093d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2202      	movs	r2, #2
 800935e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2202      	movs	r2, #2
 8009366:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2202      	movs	r2, #2
 800936e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2202      	movs	r2, #2
 8009376:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d003      	beq.n	8009388 <HAL_TIM_Encoder_Start+0xc4>
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2b04      	cmp	r3, #4
 8009384:	d008      	beq.n	8009398 <HAL_TIM_Encoder_Start+0xd4>
 8009386:	e00f      	b.n	80093a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2201      	movs	r2, #1
 800938e:	2100      	movs	r1, #0
 8009390:	4618      	mov	r0, r3
 8009392:	f001 f9fd 	bl	800a790 <TIM_CCxChannelCmd>
      break;
 8009396:	e016      	b.n	80093c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2201      	movs	r2, #1
 800939e:	2104      	movs	r1, #4
 80093a0:	4618      	mov	r0, r3
 80093a2:	f001 f9f5 	bl	800a790 <TIM_CCxChannelCmd>
      break;
 80093a6:	e00e      	b.n	80093c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2201      	movs	r2, #1
 80093ae:	2100      	movs	r1, #0
 80093b0:	4618      	mov	r0, r3
 80093b2:	f001 f9ed 	bl	800a790 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2201      	movs	r2, #1
 80093bc:	2104      	movs	r1, #4
 80093be:	4618      	mov	r0, r3
 80093c0:	f001 f9e6 	bl	800a790 <TIM_CCxChannelCmd>
      break;
 80093c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f042 0201 	orr.w	r2, r2, #1
 80093d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	f003 0302 	and.w	r3, r3, #2
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d026      	beq.n	8009450 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f003 0302 	and.w	r3, r3, #2
 8009408:	2b00      	cmp	r3, #0
 800940a:	d021      	beq.n	8009450 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f06f 0202 	mvn.w	r2, #2
 8009414:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2201      	movs	r2, #1
 800941a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	f003 0303 	and.w	r3, r3, #3
 8009426:	2b00      	cmp	r3, #0
 8009428:	d005      	beq.n	8009436 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	4798      	blx	r3
 8009434:	e009      	b.n	800944a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f003 0304 	and.w	r3, r3, #4
 8009456:	2b00      	cmp	r3, #0
 8009458:	d026      	beq.n	80094a8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	2b00      	cmp	r3, #0
 8009462:	d021      	beq.n	80094a8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f06f 0204 	mvn.w	r2, #4
 800946c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2202      	movs	r2, #2
 8009472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800947e:	2b00      	cmp	r3, #0
 8009480:	d005      	beq.n	800948e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	4798      	blx	r3
 800948c:	e009      	b.n	80094a2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	f003 0308 	and.w	r3, r3, #8
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d026      	beq.n	8009500 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f003 0308 	and.w	r3, r3, #8
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d021      	beq.n	8009500 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f06f 0208 	mvn.w	r2, #8
 80094c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2204      	movs	r2, #4
 80094ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	69db      	ldr	r3, [r3, #28]
 80094d2:	f003 0303 	and.w	r3, r3, #3
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d005      	beq.n	80094e6 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	4798      	blx	r3
 80094e4:	e009      	b.n	80094fa <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	f003 0310 	and.w	r3, r3, #16
 8009506:	2b00      	cmp	r3, #0
 8009508:	d026      	beq.n	8009558 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f003 0310 	and.w	r3, r3, #16
 8009510:	2b00      	cmp	r3, #0
 8009512:	d021      	beq.n	8009558 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f06f 0210 	mvn.w	r2, #16
 800951c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2208      	movs	r2, #8
 8009522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	69db      	ldr	r3, [r3, #28]
 800952a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800952e:	2b00      	cmp	r3, #0
 8009530:	d005      	beq.n	800953e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	4798      	blx	r3
 800953c:	e009      	b.n	8009552 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00e      	beq.n	8009580 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	2b00      	cmp	r3, #0
 800956a:	d009      	beq.n	8009580 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f06f 0201 	mvn.w	r2, #1
 8009574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009586:	2b00      	cmp	r3, #0
 8009588:	d104      	bne.n	8009594 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00e      	beq.n	80095b2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800959a:	2b00      	cmp	r3, #0
 800959c:	d009      	beq.n	80095b2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80095a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00e      	beq.n	80095da <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d009      	beq.n	80095da <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80095ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00e      	beq.n	8009602 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d009      	beq.n	8009602 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80095f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	f003 0320 	and.w	r3, r3, #32
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00e      	beq.n	800962a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f003 0320 	and.w	r3, r3, #32
 8009612:	2b00      	cmp	r3, #0
 8009614:	d009      	beq.n	800962a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f06f 0220 	mvn.w	r2, #32
 800961e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00e      	beq.n	8009652 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800963a:	2b00      	cmp	r3, #0
 800963c:	d009      	beq.n	8009652 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00e      	beq.n	800967a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d009      	beq.n	800967a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800966e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00e      	beq.n	80096a2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d009      	beq.n	80096a2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00e      	beq.n	80096ca <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d009      	beq.n	80096ca <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80096be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096ca:	bf00      	nop
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
	...

080096d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d101      	bne.n	80096f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80096ee:	2302      	movs	r3, #2
 80096f0:	e0ff      	b.n	80098f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2b14      	cmp	r3, #20
 80096fe:	f200 80f0 	bhi.w	80098e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009702:	a201      	add	r2, pc, #4	@ (adr r2, 8009708 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009708:	0800975d 	.word	0x0800975d
 800970c:	080098e3 	.word	0x080098e3
 8009710:	080098e3 	.word	0x080098e3
 8009714:	080098e3 	.word	0x080098e3
 8009718:	0800979d 	.word	0x0800979d
 800971c:	080098e3 	.word	0x080098e3
 8009720:	080098e3 	.word	0x080098e3
 8009724:	080098e3 	.word	0x080098e3
 8009728:	080097df 	.word	0x080097df
 800972c:	080098e3 	.word	0x080098e3
 8009730:	080098e3 	.word	0x080098e3
 8009734:	080098e3 	.word	0x080098e3
 8009738:	0800981f 	.word	0x0800981f
 800973c:	080098e3 	.word	0x080098e3
 8009740:	080098e3 	.word	0x080098e3
 8009744:	080098e3 	.word	0x080098e3
 8009748:	08009861 	.word	0x08009861
 800974c:	080098e3 	.word	0x080098e3
 8009750:	080098e3 	.word	0x080098e3
 8009754:	080098e3 	.word	0x080098e3
 8009758:	080098a1 	.word	0x080098a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	68b9      	ldr	r1, [r7, #8]
 8009762:	4618      	mov	r0, r3
 8009764:	f000 fc4e 	bl	800a004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	699a      	ldr	r2, [r3, #24]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f042 0208 	orr.w	r2, r2, #8
 8009776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	699a      	ldr	r2, [r3, #24]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f022 0204 	bic.w	r2, r2, #4
 8009786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	6999      	ldr	r1, [r3, #24]
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	691a      	ldr	r2, [r3, #16]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	430a      	orrs	r2, r1
 8009798:	619a      	str	r2, [r3, #24]
      break;
 800979a:	e0a5      	b.n	80098e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68b9      	ldr	r1, [r7, #8]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 fcc8 	bl	800a138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	699a      	ldr	r2, [r3, #24]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	699a      	ldr	r2, [r3, #24]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	6999      	ldr	r1, [r3, #24]
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	021a      	lsls	r2, r3, #8
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	430a      	orrs	r2, r1
 80097da:	619a      	str	r2, [r3, #24]
      break;
 80097dc:	e084      	b.n	80098e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68b9      	ldr	r1, [r7, #8]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f000 fd3b 	bl	800a260 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	69da      	ldr	r2, [r3, #28]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f042 0208 	orr.w	r2, r2, #8
 80097f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	69da      	ldr	r2, [r3, #28]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f022 0204 	bic.w	r2, r2, #4
 8009808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	69d9      	ldr	r1, [r3, #28]
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	691a      	ldr	r2, [r3, #16]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	430a      	orrs	r2, r1
 800981a:	61da      	str	r2, [r3, #28]
      break;
 800981c:	e064      	b.n	80098e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68b9      	ldr	r1, [r7, #8]
 8009824:	4618      	mov	r0, r3
 8009826:	f000 fdad 	bl	800a384 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	69da      	ldr	r2, [r3, #28]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	69da      	ldr	r2, [r3, #28]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	69d9      	ldr	r1, [r3, #28]
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	021a      	lsls	r2, r3, #8
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	430a      	orrs	r2, r1
 800985c:	61da      	str	r2, [r3, #28]
      break;
 800985e:	e043      	b.n	80098e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68b9      	ldr	r1, [r7, #8]
 8009866:	4618      	mov	r0, r3
 8009868:	f000 fe20 	bl	800a4ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f042 0208 	orr.w	r2, r2, #8
 800987a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f022 0204 	bic.w	r2, r2, #4
 800988a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	691a      	ldr	r2, [r3, #16]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	430a      	orrs	r2, r1
 800989c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800989e:	e023      	b.n	80098e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68b9      	ldr	r1, [r7, #8]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 fe6a 	bl	800a580 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	021a      	lsls	r2, r3, #8
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	430a      	orrs	r2, r1
 80098de:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80098e0:	e002      	b.n	80098e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	75fb      	strb	r3, [r7, #23]
      break;
 80098e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80098f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3718      	adds	r7, #24
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop

080098fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009910:	2b01      	cmp	r3, #1
 8009912:	d101      	bne.n	8009918 <HAL_TIM_ConfigClockSource+0x1c>
 8009914:	2302      	movs	r3, #2
 8009916:	e0f6      	b.n	8009b06 <HAL_TIM_ConfigClockSource+0x20a>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2202      	movs	r2, #2
 8009924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009936:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800993a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009942:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a6f      	ldr	r2, [pc, #444]	@ (8009b10 <HAL_TIM_ConfigClockSource+0x214>)
 8009952:	4293      	cmp	r3, r2
 8009954:	f000 80c1 	beq.w	8009ada <HAL_TIM_ConfigClockSource+0x1de>
 8009958:	4a6d      	ldr	r2, [pc, #436]	@ (8009b10 <HAL_TIM_ConfigClockSource+0x214>)
 800995a:	4293      	cmp	r3, r2
 800995c:	f200 80c6 	bhi.w	8009aec <HAL_TIM_ConfigClockSource+0x1f0>
 8009960:	4a6c      	ldr	r2, [pc, #432]	@ (8009b14 <HAL_TIM_ConfigClockSource+0x218>)
 8009962:	4293      	cmp	r3, r2
 8009964:	f000 80b9 	beq.w	8009ada <HAL_TIM_ConfigClockSource+0x1de>
 8009968:	4a6a      	ldr	r2, [pc, #424]	@ (8009b14 <HAL_TIM_ConfigClockSource+0x218>)
 800996a:	4293      	cmp	r3, r2
 800996c:	f200 80be 	bhi.w	8009aec <HAL_TIM_ConfigClockSource+0x1f0>
 8009970:	4a69      	ldr	r2, [pc, #420]	@ (8009b18 <HAL_TIM_ConfigClockSource+0x21c>)
 8009972:	4293      	cmp	r3, r2
 8009974:	f000 80b1 	beq.w	8009ada <HAL_TIM_ConfigClockSource+0x1de>
 8009978:	4a67      	ldr	r2, [pc, #412]	@ (8009b18 <HAL_TIM_ConfigClockSource+0x21c>)
 800997a:	4293      	cmp	r3, r2
 800997c:	f200 80b6 	bhi.w	8009aec <HAL_TIM_ConfigClockSource+0x1f0>
 8009980:	4a66      	ldr	r2, [pc, #408]	@ (8009b1c <HAL_TIM_ConfigClockSource+0x220>)
 8009982:	4293      	cmp	r3, r2
 8009984:	f000 80a9 	beq.w	8009ada <HAL_TIM_ConfigClockSource+0x1de>
 8009988:	4a64      	ldr	r2, [pc, #400]	@ (8009b1c <HAL_TIM_ConfigClockSource+0x220>)
 800998a:	4293      	cmp	r3, r2
 800998c:	f200 80ae 	bhi.w	8009aec <HAL_TIM_ConfigClockSource+0x1f0>
 8009990:	4a63      	ldr	r2, [pc, #396]	@ (8009b20 <HAL_TIM_ConfigClockSource+0x224>)
 8009992:	4293      	cmp	r3, r2
 8009994:	f000 80a1 	beq.w	8009ada <HAL_TIM_ConfigClockSource+0x1de>
 8009998:	4a61      	ldr	r2, [pc, #388]	@ (8009b20 <HAL_TIM_ConfigClockSource+0x224>)
 800999a:	4293      	cmp	r3, r2
 800999c:	f200 80a6 	bhi.w	8009aec <HAL_TIM_ConfigClockSource+0x1f0>
 80099a0:	4a60      	ldr	r2, [pc, #384]	@ (8009b24 <HAL_TIM_ConfigClockSource+0x228>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	f000 8099 	beq.w	8009ada <HAL_TIM_ConfigClockSource+0x1de>
 80099a8:	4a5e      	ldr	r2, [pc, #376]	@ (8009b24 <HAL_TIM_ConfigClockSource+0x228>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	f200 809e 	bhi.w	8009aec <HAL_TIM_ConfigClockSource+0x1f0>
 80099b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80099b4:	f000 8091 	beq.w	8009ada <HAL_TIM_ConfigClockSource+0x1de>
 80099b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80099bc:	f200 8096 	bhi.w	8009aec <HAL_TIM_ConfigClockSource+0x1f0>
 80099c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099c4:	f000 8089 	beq.w	8009ada <HAL_TIM_ConfigClockSource+0x1de>
 80099c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099cc:	f200 808e 	bhi.w	8009aec <HAL_TIM_ConfigClockSource+0x1f0>
 80099d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099d4:	d03e      	beq.n	8009a54 <HAL_TIM_ConfigClockSource+0x158>
 80099d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099da:	f200 8087 	bhi.w	8009aec <HAL_TIM_ConfigClockSource+0x1f0>
 80099de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099e2:	f000 8086 	beq.w	8009af2 <HAL_TIM_ConfigClockSource+0x1f6>
 80099e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099ea:	d87f      	bhi.n	8009aec <HAL_TIM_ConfigClockSource+0x1f0>
 80099ec:	2b70      	cmp	r3, #112	@ 0x70
 80099ee:	d01a      	beq.n	8009a26 <HAL_TIM_ConfigClockSource+0x12a>
 80099f0:	2b70      	cmp	r3, #112	@ 0x70
 80099f2:	d87b      	bhi.n	8009aec <HAL_TIM_ConfigClockSource+0x1f0>
 80099f4:	2b60      	cmp	r3, #96	@ 0x60
 80099f6:	d050      	beq.n	8009a9a <HAL_TIM_ConfigClockSource+0x19e>
 80099f8:	2b60      	cmp	r3, #96	@ 0x60
 80099fa:	d877      	bhi.n	8009aec <HAL_TIM_ConfigClockSource+0x1f0>
 80099fc:	2b50      	cmp	r3, #80	@ 0x50
 80099fe:	d03c      	beq.n	8009a7a <HAL_TIM_ConfigClockSource+0x17e>
 8009a00:	2b50      	cmp	r3, #80	@ 0x50
 8009a02:	d873      	bhi.n	8009aec <HAL_TIM_ConfigClockSource+0x1f0>
 8009a04:	2b40      	cmp	r3, #64	@ 0x40
 8009a06:	d058      	beq.n	8009aba <HAL_TIM_ConfigClockSource+0x1be>
 8009a08:	2b40      	cmp	r3, #64	@ 0x40
 8009a0a:	d86f      	bhi.n	8009aec <HAL_TIM_ConfigClockSource+0x1f0>
 8009a0c:	2b30      	cmp	r3, #48	@ 0x30
 8009a0e:	d064      	beq.n	8009ada <HAL_TIM_ConfigClockSource+0x1de>
 8009a10:	2b30      	cmp	r3, #48	@ 0x30
 8009a12:	d86b      	bhi.n	8009aec <HAL_TIM_ConfigClockSource+0x1f0>
 8009a14:	2b20      	cmp	r3, #32
 8009a16:	d060      	beq.n	8009ada <HAL_TIM_ConfigClockSource+0x1de>
 8009a18:	2b20      	cmp	r3, #32
 8009a1a:	d867      	bhi.n	8009aec <HAL_TIM_ConfigClockSource+0x1f0>
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d05c      	beq.n	8009ada <HAL_TIM_ConfigClockSource+0x1de>
 8009a20:	2b10      	cmp	r3, #16
 8009a22:	d05a      	beq.n	8009ada <HAL_TIM_ConfigClockSource+0x1de>
 8009a24:	e062      	b.n	8009aec <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a36:	f000 fe8b 	bl	800a750 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009a48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	609a      	str	r2, [r3, #8]
      break;
 8009a52:	e04f      	b.n	8009af4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a64:	f000 fe74 	bl	800a750 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	689a      	ldr	r2, [r3, #8]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a76:	609a      	str	r2, [r3, #8]
      break;
 8009a78:	e03c      	b.n	8009af4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a86:	461a      	mov	r2, r3
 8009a88:	f000 fde6 	bl	800a658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2150      	movs	r1, #80	@ 0x50
 8009a92:	4618      	mov	r0, r3
 8009a94:	f000 fe3f 	bl	800a716 <TIM_ITRx_SetConfig>
      break;
 8009a98:	e02c      	b.n	8009af4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	f000 fe05 	bl	800a6b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2160      	movs	r1, #96	@ 0x60
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f000 fe2f 	bl	800a716 <TIM_ITRx_SetConfig>
      break;
 8009ab8:	e01c      	b.n	8009af4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	f000 fdc6 	bl	800a658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2140      	movs	r1, #64	@ 0x40
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f000 fe1f 	bl	800a716 <TIM_ITRx_SetConfig>
      break;
 8009ad8:	e00c      	b.n	8009af4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	f000 fe16 	bl	800a716 <TIM_ITRx_SetConfig>
      break;
 8009aea:	e003      	b.n	8009af4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	73fb      	strb	r3, [r7, #15]
      break;
 8009af0:	e000      	b.n	8009af4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009af2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	00100070 	.word	0x00100070
 8009b14:	00100060 	.word	0x00100060
 8009b18:	00100050 	.word	0x00100050
 8009b1c:	00100040 	.word	0x00100040
 8009b20:	00100030 	.word	0x00100030
 8009b24:	00100020 	.word	0x00100020

08009b28 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ba8:	bf00      	nop
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009bbc:	bf00      	nop
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b087      	sub	sp, #28
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	460b      	mov	r3, r1
 8009be6:	607a      	str	r2, [r7, #4]
 8009be8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d101      	bne.n	8009bf8 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e14a      	b.n	8009e8e <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	f040 80dd 	bne.w	8009dc0 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8009c06:	7afb      	ldrb	r3, [r7, #11]
 8009c08:	2b1f      	cmp	r3, #31
 8009c0a:	f200 80d6 	bhi.w	8009dba <HAL_TIM_RegisterCallback+0x1de>
 8009c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c14 <HAL_TIM_RegisterCallback+0x38>)
 8009c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c14:	08009c95 	.word	0x08009c95
 8009c18:	08009c9d 	.word	0x08009c9d
 8009c1c:	08009ca5 	.word	0x08009ca5
 8009c20:	08009cad 	.word	0x08009cad
 8009c24:	08009cb5 	.word	0x08009cb5
 8009c28:	08009cbd 	.word	0x08009cbd
 8009c2c:	08009cc5 	.word	0x08009cc5
 8009c30:	08009ccd 	.word	0x08009ccd
 8009c34:	08009cd5 	.word	0x08009cd5
 8009c38:	08009cdd 	.word	0x08009cdd
 8009c3c:	08009ce5 	.word	0x08009ce5
 8009c40:	08009ced 	.word	0x08009ced
 8009c44:	08009cf5 	.word	0x08009cf5
 8009c48:	08009cfd 	.word	0x08009cfd
 8009c4c:	08009d07 	.word	0x08009d07
 8009c50:	08009d11 	.word	0x08009d11
 8009c54:	08009d1b 	.word	0x08009d1b
 8009c58:	08009d25 	.word	0x08009d25
 8009c5c:	08009d2f 	.word	0x08009d2f
 8009c60:	08009d39 	.word	0x08009d39
 8009c64:	08009d43 	.word	0x08009d43
 8009c68:	08009d4d 	.word	0x08009d4d
 8009c6c:	08009d57 	.word	0x08009d57
 8009c70:	08009d61 	.word	0x08009d61
 8009c74:	08009d6b 	.word	0x08009d6b
 8009c78:	08009d75 	.word	0x08009d75
 8009c7c:	08009d7f 	.word	0x08009d7f
 8009c80:	08009d89 	.word	0x08009d89
 8009c84:	08009d93 	.word	0x08009d93
 8009c88:	08009d9d 	.word	0x08009d9d
 8009c8c:	08009da7 	.word	0x08009da7
 8009c90:	08009db1 	.word	0x08009db1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009c9a:	e0f7      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009ca2:	e0f3      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009caa:	e0ef      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009cb2:	e0eb      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009cba:	e0e7      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009cc2:	e0e3      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009cca:	e0df      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009cd2:	e0db      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009cda:	e0d7      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009ce2:	e0d3      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009cea:	e0cf      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009cf2:	e0cb      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009cfa:	e0c7      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009d04:	e0c2      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8009d0e:	e0bd      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8009d18:	e0b8      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8009d22:	e0b3      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8009d2c:	e0ae      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009d36:	e0a9      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009d40:	e0a4      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009d4a:	e09f      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009d54:	e09a      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009d5e:	e095      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009d68:	e090      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009d72:	e08b      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009d7c:	e086      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009d86:	e081      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009d90:	e07c      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009d9a:	e077      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009da4:	e072      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009dae:	e06d      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009db8:	e068      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	75fb      	strb	r3, [r7, #23]
        break;
 8009dbe:	e065      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d15d      	bne.n	8009e88 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8009dcc:	7afb      	ldrb	r3, [r7, #11]
 8009dce:	2b0d      	cmp	r3, #13
 8009dd0:	d857      	bhi.n	8009e82 <HAL_TIM_RegisterCallback+0x2a6>
 8009dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd8 <HAL_TIM_RegisterCallback+0x1fc>)
 8009dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd8:	08009e11 	.word	0x08009e11
 8009ddc:	08009e19 	.word	0x08009e19
 8009de0:	08009e21 	.word	0x08009e21
 8009de4:	08009e29 	.word	0x08009e29
 8009de8:	08009e31 	.word	0x08009e31
 8009dec:	08009e39 	.word	0x08009e39
 8009df0:	08009e41 	.word	0x08009e41
 8009df4:	08009e49 	.word	0x08009e49
 8009df8:	08009e51 	.word	0x08009e51
 8009dfc:	08009e59 	.word	0x08009e59
 8009e00:	08009e61 	.word	0x08009e61
 8009e04:	08009e69 	.word	0x08009e69
 8009e08:	08009e71 	.word	0x08009e71
 8009e0c:	08009e79 	.word	0x08009e79
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009e16:	e039      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009e1e:	e035      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009e26:	e031      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009e2e:	e02d      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009e36:	e029      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009e3e:	e025      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009e46:	e021      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009e4e:	e01d      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009e56:	e019      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009e5e:	e015      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009e66:	e011      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009e6e:	e00d      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009e76:	e009      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009e80:	e004      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	75fb      	strb	r3, [r7, #23]
        break;
 8009e86:	e001      	b.n	8009e8c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	371c      	adds	r7, #28
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop

08009e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a4c      	ldr	r2, [pc, #304]	@ (8009fe0 <TIM_Base_SetConfig+0x144>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d017      	beq.n	8009ee4 <TIM_Base_SetConfig+0x48>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eba:	d013      	beq.n	8009ee4 <TIM_Base_SetConfig+0x48>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a49      	ldr	r2, [pc, #292]	@ (8009fe4 <TIM_Base_SetConfig+0x148>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d00f      	beq.n	8009ee4 <TIM_Base_SetConfig+0x48>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a48      	ldr	r2, [pc, #288]	@ (8009fe8 <TIM_Base_SetConfig+0x14c>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d00b      	beq.n	8009ee4 <TIM_Base_SetConfig+0x48>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a47      	ldr	r2, [pc, #284]	@ (8009fec <TIM_Base_SetConfig+0x150>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d007      	beq.n	8009ee4 <TIM_Base_SetConfig+0x48>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a46      	ldr	r2, [pc, #280]	@ (8009ff0 <TIM_Base_SetConfig+0x154>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d003      	beq.n	8009ee4 <TIM_Base_SetConfig+0x48>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a45      	ldr	r2, [pc, #276]	@ (8009ff4 <TIM_Base_SetConfig+0x158>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d108      	bne.n	8009ef6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a39      	ldr	r2, [pc, #228]	@ (8009fe0 <TIM_Base_SetConfig+0x144>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d023      	beq.n	8009f46 <TIM_Base_SetConfig+0xaa>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f04:	d01f      	beq.n	8009f46 <TIM_Base_SetConfig+0xaa>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a36      	ldr	r2, [pc, #216]	@ (8009fe4 <TIM_Base_SetConfig+0x148>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d01b      	beq.n	8009f46 <TIM_Base_SetConfig+0xaa>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a35      	ldr	r2, [pc, #212]	@ (8009fe8 <TIM_Base_SetConfig+0x14c>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d017      	beq.n	8009f46 <TIM_Base_SetConfig+0xaa>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a34      	ldr	r2, [pc, #208]	@ (8009fec <TIM_Base_SetConfig+0x150>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d013      	beq.n	8009f46 <TIM_Base_SetConfig+0xaa>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a33      	ldr	r2, [pc, #204]	@ (8009ff0 <TIM_Base_SetConfig+0x154>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d00f      	beq.n	8009f46 <TIM_Base_SetConfig+0xaa>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a33      	ldr	r2, [pc, #204]	@ (8009ff8 <TIM_Base_SetConfig+0x15c>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d00b      	beq.n	8009f46 <TIM_Base_SetConfig+0xaa>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a32      	ldr	r2, [pc, #200]	@ (8009ffc <TIM_Base_SetConfig+0x160>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d007      	beq.n	8009f46 <TIM_Base_SetConfig+0xaa>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a31      	ldr	r2, [pc, #196]	@ (800a000 <TIM_Base_SetConfig+0x164>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d003      	beq.n	8009f46 <TIM_Base_SetConfig+0xaa>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a2c      	ldr	r2, [pc, #176]	@ (8009ff4 <TIM_Base_SetConfig+0x158>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d108      	bne.n	8009f58 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	695b      	ldr	r3, [r3, #20]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	689a      	ldr	r2, [r3, #8]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a18      	ldr	r2, [pc, #96]	@ (8009fe0 <TIM_Base_SetConfig+0x144>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d013      	beq.n	8009fac <TIM_Base_SetConfig+0x110>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a1a      	ldr	r2, [pc, #104]	@ (8009ff0 <TIM_Base_SetConfig+0x154>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d00f      	beq.n	8009fac <TIM_Base_SetConfig+0x110>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8009ff8 <TIM_Base_SetConfig+0x15c>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d00b      	beq.n	8009fac <TIM_Base_SetConfig+0x110>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a19      	ldr	r2, [pc, #100]	@ (8009ffc <TIM_Base_SetConfig+0x160>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d007      	beq.n	8009fac <TIM_Base_SetConfig+0x110>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a18      	ldr	r2, [pc, #96]	@ (800a000 <TIM_Base_SetConfig+0x164>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d003      	beq.n	8009fac <TIM_Base_SetConfig+0x110>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a13      	ldr	r2, [pc, #76]	@ (8009ff4 <TIM_Base_SetConfig+0x158>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d103      	bne.n	8009fb4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	691a      	ldr	r2, [r3, #16]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	f003 0301 	and.w	r3, r3, #1
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d105      	bne.n	8009fd2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	f023 0201 	bic.w	r2, r3, #1
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	611a      	str	r2, [r3, #16]
  }
}
 8009fd2:	bf00      	nop
 8009fd4:	3714      	adds	r7, #20
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	40012c00 	.word	0x40012c00
 8009fe4:	40000400 	.word	0x40000400
 8009fe8:	40000800 	.word	0x40000800
 8009fec:	40000c00 	.word	0x40000c00
 8009ff0:	40013400 	.word	0x40013400
 8009ff4:	40015000 	.word	0x40015000
 8009ff8:	40014000 	.word	0x40014000
 8009ffc:	40014400 	.word	0x40014400
 800a000:	40014800 	.word	0x40014800

0800a004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a004:	b480      	push	{r7}
 800a006:	b087      	sub	sp, #28
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a1b      	ldr	r3, [r3, #32]
 800a018:	f023 0201 	bic.w	r2, r3, #1
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f023 0303 	bic.w	r3, r3, #3
 800a03e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	4313      	orrs	r3, r2
 800a048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f023 0302 	bic.w	r3, r3, #2
 800a050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	4313      	orrs	r3, r2
 800a05a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4a30      	ldr	r2, [pc, #192]	@ (800a120 <TIM_OC1_SetConfig+0x11c>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d013      	beq.n	800a08c <TIM_OC1_SetConfig+0x88>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a2f      	ldr	r2, [pc, #188]	@ (800a124 <TIM_OC1_SetConfig+0x120>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d00f      	beq.n	800a08c <TIM_OC1_SetConfig+0x88>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a2e      	ldr	r2, [pc, #184]	@ (800a128 <TIM_OC1_SetConfig+0x124>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d00b      	beq.n	800a08c <TIM_OC1_SetConfig+0x88>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a2d      	ldr	r2, [pc, #180]	@ (800a12c <TIM_OC1_SetConfig+0x128>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d007      	beq.n	800a08c <TIM_OC1_SetConfig+0x88>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4a2c      	ldr	r2, [pc, #176]	@ (800a130 <TIM_OC1_SetConfig+0x12c>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d003      	beq.n	800a08c <TIM_OC1_SetConfig+0x88>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a2b      	ldr	r2, [pc, #172]	@ (800a134 <TIM_OC1_SetConfig+0x130>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d10c      	bne.n	800a0a6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	f023 0308 	bic.w	r3, r3, #8
 800a092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	697a      	ldr	r2, [r7, #20]
 800a09a:	4313      	orrs	r3, r2
 800a09c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f023 0304 	bic.w	r3, r3, #4
 800a0a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a120 <TIM_OC1_SetConfig+0x11c>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d013      	beq.n	800a0d6 <TIM_OC1_SetConfig+0xd2>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4a1c      	ldr	r2, [pc, #112]	@ (800a124 <TIM_OC1_SetConfig+0x120>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d00f      	beq.n	800a0d6 <TIM_OC1_SetConfig+0xd2>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4a1b      	ldr	r2, [pc, #108]	@ (800a128 <TIM_OC1_SetConfig+0x124>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d00b      	beq.n	800a0d6 <TIM_OC1_SetConfig+0xd2>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4a1a      	ldr	r2, [pc, #104]	@ (800a12c <TIM_OC1_SetConfig+0x128>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d007      	beq.n	800a0d6 <TIM_OC1_SetConfig+0xd2>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4a19      	ldr	r2, [pc, #100]	@ (800a130 <TIM_OC1_SetConfig+0x12c>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d003      	beq.n	800a0d6 <TIM_OC1_SetConfig+0xd2>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4a18      	ldr	r2, [pc, #96]	@ (800a134 <TIM_OC1_SetConfig+0x130>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d111      	bne.n	800a0fa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a0e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	695b      	ldr	r3, [r3, #20]
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	693a      	ldr	r2, [r7, #16]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	693a      	ldr	r2, [r7, #16]
 800a0fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	685a      	ldr	r2, [r3, #4]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	697a      	ldr	r2, [r7, #20]
 800a112:	621a      	str	r2, [r3, #32]
}
 800a114:	bf00      	nop
 800a116:	371c      	adds	r7, #28
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr
 800a120:	40012c00 	.word	0x40012c00
 800a124:	40013400 	.word	0x40013400
 800a128:	40014000 	.word	0x40014000
 800a12c:	40014400 	.word	0x40014400
 800a130:	40014800 	.word	0x40014800
 800a134:	40015000 	.word	0x40015000

0800a138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a138:	b480      	push	{r7}
 800a13a:	b087      	sub	sp, #28
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a1b      	ldr	r3, [r3, #32]
 800a146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a1b      	ldr	r3, [r3, #32]
 800a14c:	f023 0210 	bic.w	r2, r3, #16
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	699b      	ldr	r3, [r3, #24]
 800a15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a16a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	021b      	lsls	r3, r3, #8
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	f023 0320 	bic.w	r3, r3, #32
 800a186:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	011b      	lsls	r3, r3, #4
 800a18e:	697a      	ldr	r2, [r7, #20]
 800a190:	4313      	orrs	r3, r2
 800a192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a2c      	ldr	r2, [pc, #176]	@ (800a248 <TIM_OC2_SetConfig+0x110>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d007      	beq.n	800a1ac <TIM_OC2_SetConfig+0x74>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a2b      	ldr	r2, [pc, #172]	@ (800a24c <TIM_OC2_SetConfig+0x114>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d003      	beq.n	800a1ac <TIM_OC2_SetConfig+0x74>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a2a      	ldr	r2, [pc, #168]	@ (800a250 <TIM_OC2_SetConfig+0x118>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d10d      	bne.n	800a1c8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	011b      	lsls	r3, r3, #4
 800a1ba:	697a      	ldr	r2, [r7, #20]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4a1f      	ldr	r2, [pc, #124]	@ (800a248 <TIM_OC2_SetConfig+0x110>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d013      	beq.n	800a1f8 <TIM_OC2_SetConfig+0xc0>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4a1e      	ldr	r2, [pc, #120]	@ (800a24c <TIM_OC2_SetConfig+0x114>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d00f      	beq.n	800a1f8 <TIM_OC2_SetConfig+0xc0>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a1e      	ldr	r2, [pc, #120]	@ (800a254 <TIM_OC2_SetConfig+0x11c>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d00b      	beq.n	800a1f8 <TIM_OC2_SetConfig+0xc0>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a1d      	ldr	r2, [pc, #116]	@ (800a258 <TIM_OC2_SetConfig+0x120>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d007      	beq.n	800a1f8 <TIM_OC2_SetConfig+0xc0>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a1c      	ldr	r2, [pc, #112]	@ (800a25c <TIM_OC2_SetConfig+0x124>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d003      	beq.n	800a1f8 <TIM_OC2_SetConfig+0xc0>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a17      	ldr	r2, [pc, #92]	@ (800a250 <TIM_OC2_SetConfig+0x118>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d113      	bne.n	800a220 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a1fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	695b      	ldr	r3, [r3, #20]
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	4313      	orrs	r3, r2
 800a212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	699b      	ldr	r3, [r3, #24]
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	693a      	ldr	r2, [r7, #16]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	685a      	ldr	r2, [r3, #4]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	621a      	str	r2, [r3, #32]
}
 800a23a:	bf00      	nop
 800a23c:	371c      	adds	r7, #28
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	40012c00 	.word	0x40012c00
 800a24c:	40013400 	.word	0x40013400
 800a250:	40015000 	.word	0x40015000
 800a254:	40014000 	.word	0x40014000
 800a258:	40014400 	.word	0x40014400
 800a25c:	40014800 	.word	0x40014800

0800a260 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a260:	b480      	push	{r7}
 800a262:	b087      	sub	sp, #28
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a1b      	ldr	r3, [r3, #32]
 800a274:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	69db      	ldr	r3, [r3, #28]
 800a286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a28e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f023 0303 	bic.w	r3, r3, #3
 800a29a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a2ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	021b      	lsls	r3, r3, #8
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4a2b      	ldr	r2, [pc, #172]	@ (800a36c <TIM_OC3_SetConfig+0x10c>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d007      	beq.n	800a2d2 <TIM_OC3_SetConfig+0x72>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4a2a      	ldr	r2, [pc, #168]	@ (800a370 <TIM_OC3_SetConfig+0x110>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d003      	beq.n	800a2d2 <TIM_OC3_SetConfig+0x72>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a29      	ldr	r2, [pc, #164]	@ (800a374 <TIM_OC3_SetConfig+0x114>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d10d      	bne.n	800a2ee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a2d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	021b      	lsls	r3, r3, #8
 800a2e0:	697a      	ldr	r2, [r7, #20]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a2ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4a1e      	ldr	r2, [pc, #120]	@ (800a36c <TIM_OC3_SetConfig+0x10c>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d013      	beq.n	800a31e <TIM_OC3_SetConfig+0xbe>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a370 <TIM_OC3_SetConfig+0x110>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d00f      	beq.n	800a31e <TIM_OC3_SetConfig+0xbe>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a1d      	ldr	r2, [pc, #116]	@ (800a378 <TIM_OC3_SetConfig+0x118>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d00b      	beq.n	800a31e <TIM_OC3_SetConfig+0xbe>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a1c      	ldr	r2, [pc, #112]	@ (800a37c <TIM_OC3_SetConfig+0x11c>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d007      	beq.n	800a31e <TIM_OC3_SetConfig+0xbe>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a1b      	ldr	r2, [pc, #108]	@ (800a380 <TIM_OC3_SetConfig+0x120>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d003      	beq.n	800a31e <TIM_OC3_SetConfig+0xbe>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a16      	ldr	r2, [pc, #88]	@ (800a374 <TIM_OC3_SetConfig+0x114>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d113      	bne.n	800a346 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a32c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	695b      	ldr	r3, [r3, #20]
 800a332:	011b      	lsls	r3, r3, #4
 800a334:	693a      	ldr	r2, [r7, #16]
 800a336:	4313      	orrs	r3, r2
 800a338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	699b      	ldr	r3, [r3, #24]
 800a33e:	011b      	lsls	r3, r3, #4
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	4313      	orrs	r3, r2
 800a344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	693a      	ldr	r2, [r7, #16]
 800a34a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	685a      	ldr	r2, [r3, #4]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	697a      	ldr	r2, [r7, #20]
 800a35e:	621a      	str	r2, [r3, #32]
}
 800a360:	bf00      	nop
 800a362:	371c      	adds	r7, #28
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr
 800a36c:	40012c00 	.word	0x40012c00
 800a370:	40013400 	.word	0x40013400
 800a374:	40015000 	.word	0x40015000
 800a378:	40014000 	.word	0x40014000
 800a37c:	40014400 	.word	0x40014400
 800a380:	40014800 	.word	0x40014800

0800a384 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a384:	b480      	push	{r7}
 800a386:	b087      	sub	sp, #28
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6a1b      	ldr	r3, [r3, #32]
 800a392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a1b      	ldr	r3, [r3, #32]
 800a398:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	69db      	ldr	r3, [r3, #28]
 800a3aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a3b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	021b      	lsls	r3, r3, #8
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a3d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	031b      	lsls	r3, r3, #12
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a2c      	ldr	r2, [pc, #176]	@ (800a494 <TIM_OC4_SetConfig+0x110>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d007      	beq.n	800a3f8 <TIM_OC4_SetConfig+0x74>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a2b      	ldr	r2, [pc, #172]	@ (800a498 <TIM_OC4_SetConfig+0x114>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d003      	beq.n	800a3f8 <TIM_OC4_SetConfig+0x74>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a2a      	ldr	r2, [pc, #168]	@ (800a49c <TIM_OC4_SetConfig+0x118>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d10d      	bne.n	800a414 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a3fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	031b      	lsls	r3, r3, #12
 800a406:	697a      	ldr	r2, [r7, #20]
 800a408:	4313      	orrs	r3, r2
 800a40a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a412:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a1f      	ldr	r2, [pc, #124]	@ (800a494 <TIM_OC4_SetConfig+0x110>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d013      	beq.n	800a444 <TIM_OC4_SetConfig+0xc0>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a1e      	ldr	r2, [pc, #120]	@ (800a498 <TIM_OC4_SetConfig+0x114>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d00f      	beq.n	800a444 <TIM_OC4_SetConfig+0xc0>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a1e      	ldr	r2, [pc, #120]	@ (800a4a0 <TIM_OC4_SetConfig+0x11c>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d00b      	beq.n	800a444 <TIM_OC4_SetConfig+0xc0>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a1d      	ldr	r2, [pc, #116]	@ (800a4a4 <TIM_OC4_SetConfig+0x120>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d007      	beq.n	800a444 <TIM_OC4_SetConfig+0xc0>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a1c      	ldr	r2, [pc, #112]	@ (800a4a8 <TIM_OC4_SetConfig+0x124>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d003      	beq.n	800a444 <TIM_OC4_SetConfig+0xc0>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a17      	ldr	r2, [pc, #92]	@ (800a49c <TIM_OC4_SetConfig+0x118>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d113      	bne.n	800a46c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a44a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a452:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	695b      	ldr	r3, [r3, #20]
 800a458:	019b      	lsls	r3, r3, #6
 800a45a:	693a      	ldr	r2, [r7, #16]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	019b      	lsls	r3, r3, #6
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	4313      	orrs	r3, r2
 800a46a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	693a      	ldr	r2, [r7, #16]
 800a470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	697a      	ldr	r2, [r7, #20]
 800a484:	621a      	str	r2, [r3, #32]
}
 800a486:	bf00      	nop
 800a488:	371c      	adds	r7, #28
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	40012c00 	.word	0x40012c00
 800a498:	40013400 	.word	0x40013400
 800a49c:	40015000 	.word	0x40015000
 800a4a0:	40014000 	.word	0x40014000
 800a4a4:	40014400 	.word	0x40014400
 800a4a8:	40014800 	.word	0x40014800

0800a4ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b087      	sub	sp, #28
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a1b      	ldr	r3, [r3, #32]
 800a4ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a1b      	ldr	r3, [r3, #32]
 800a4c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a4da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a4f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	041b      	lsls	r3, r3, #16
 800a4f8:	693a      	ldr	r2, [r7, #16]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4a19      	ldr	r2, [pc, #100]	@ (800a568 <TIM_OC5_SetConfig+0xbc>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d013      	beq.n	800a52e <TIM_OC5_SetConfig+0x82>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4a18      	ldr	r2, [pc, #96]	@ (800a56c <TIM_OC5_SetConfig+0xc0>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d00f      	beq.n	800a52e <TIM_OC5_SetConfig+0x82>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4a17      	ldr	r2, [pc, #92]	@ (800a570 <TIM_OC5_SetConfig+0xc4>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d00b      	beq.n	800a52e <TIM_OC5_SetConfig+0x82>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a16      	ldr	r2, [pc, #88]	@ (800a574 <TIM_OC5_SetConfig+0xc8>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d007      	beq.n	800a52e <TIM_OC5_SetConfig+0x82>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a15      	ldr	r2, [pc, #84]	@ (800a578 <TIM_OC5_SetConfig+0xcc>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d003      	beq.n	800a52e <TIM_OC5_SetConfig+0x82>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4a14      	ldr	r2, [pc, #80]	@ (800a57c <TIM_OC5_SetConfig+0xd0>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d109      	bne.n	800a542 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a534:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	695b      	ldr	r3, [r3, #20]
 800a53a:	021b      	lsls	r3, r3, #8
 800a53c:	697a      	ldr	r2, [r7, #20]
 800a53e:	4313      	orrs	r3, r2
 800a540:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	697a      	ldr	r2, [r7, #20]
 800a546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	685a      	ldr	r2, [r3, #4]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	621a      	str	r2, [r3, #32]
}
 800a55c:	bf00      	nop
 800a55e:	371c      	adds	r7, #28
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr
 800a568:	40012c00 	.word	0x40012c00
 800a56c:	40013400 	.word	0x40013400
 800a570:	40014000 	.word	0x40014000
 800a574:	40014400 	.word	0x40014400
 800a578:	40014800 	.word	0x40014800
 800a57c:	40015000 	.word	0x40015000

0800a580 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a580:	b480      	push	{r7}
 800a582:	b087      	sub	sp, #28
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a1b      	ldr	r3, [r3, #32]
 800a58e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6a1b      	ldr	r3, [r3, #32]
 800a594:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a5ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	021b      	lsls	r3, r3, #8
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a5c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	051b      	lsls	r3, r3, #20
 800a5ce:	693a      	ldr	r2, [r7, #16]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a1a      	ldr	r2, [pc, #104]	@ (800a640 <TIM_OC6_SetConfig+0xc0>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d013      	beq.n	800a604 <TIM_OC6_SetConfig+0x84>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a19      	ldr	r2, [pc, #100]	@ (800a644 <TIM_OC6_SetConfig+0xc4>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d00f      	beq.n	800a604 <TIM_OC6_SetConfig+0x84>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a18      	ldr	r2, [pc, #96]	@ (800a648 <TIM_OC6_SetConfig+0xc8>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d00b      	beq.n	800a604 <TIM_OC6_SetConfig+0x84>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a17      	ldr	r2, [pc, #92]	@ (800a64c <TIM_OC6_SetConfig+0xcc>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d007      	beq.n	800a604 <TIM_OC6_SetConfig+0x84>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a16      	ldr	r2, [pc, #88]	@ (800a650 <TIM_OC6_SetConfig+0xd0>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d003      	beq.n	800a604 <TIM_OC6_SetConfig+0x84>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a15      	ldr	r2, [pc, #84]	@ (800a654 <TIM_OC6_SetConfig+0xd4>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d109      	bne.n	800a618 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a60a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	695b      	ldr	r3, [r3, #20]
 800a610:	029b      	lsls	r3, r3, #10
 800a612:	697a      	ldr	r2, [r7, #20]
 800a614:	4313      	orrs	r3, r2
 800a616:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	697a      	ldr	r2, [r7, #20]
 800a61c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	685a      	ldr	r2, [r3, #4]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	621a      	str	r2, [r3, #32]
}
 800a632:	bf00      	nop
 800a634:	371c      	adds	r7, #28
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	40012c00 	.word	0x40012c00
 800a644:	40013400 	.word	0x40013400
 800a648:	40014000 	.word	0x40014000
 800a64c:	40014400 	.word	0x40014400
 800a650:	40014800 	.word	0x40014800
 800a654:	40015000 	.word	0x40015000

0800a658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a658:	b480      	push	{r7}
 800a65a:	b087      	sub	sp, #28
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6a1b      	ldr	r3, [r3, #32]
 800a668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6a1b      	ldr	r3, [r3, #32]
 800a66e:	f023 0201 	bic.w	r2, r3, #1
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	699b      	ldr	r3, [r3, #24]
 800a67a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	011b      	lsls	r3, r3, #4
 800a688:	693a      	ldr	r2, [r7, #16]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	f023 030a 	bic.w	r3, r3, #10
 800a694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a696:	697a      	ldr	r2, [r7, #20]
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	693a      	ldr	r2, [r7, #16]
 800a6a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	697a      	ldr	r2, [r7, #20]
 800a6a8:	621a      	str	r2, [r3, #32]
}
 800a6aa:	bf00      	nop
 800a6ac:	371c      	adds	r7, #28
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	b087      	sub	sp, #28
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	60f8      	str	r0, [r7, #12]
 800a6be:	60b9      	str	r1, [r7, #8]
 800a6c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6a1b      	ldr	r3, [r3, #32]
 800a6c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6a1b      	ldr	r3, [r3, #32]
 800a6cc:	f023 0210 	bic.w	r2, r3, #16
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	699b      	ldr	r3, [r3, #24]
 800a6d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a6e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	031b      	lsls	r3, r3, #12
 800a6e6:	693a      	ldr	r2, [r7, #16]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a6f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	011b      	lsls	r3, r3, #4
 800a6f8:	697a      	ldr	r2, [r7, #20]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	697a      	ldr	r2, [r7, #20]
 800a708:	621a      	str	r2, [r3, #32]
}
 800a70a:	bf00      	nop
 800a70c:	371c      	adds	r7, #28
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr

0800a716 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a716:	b480      	push	{r7}
 800a718:	b085      	sub	sp, #20
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a72c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a730:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	4313      	orrs	r3, r2
 800a738:	f043 0307 	orr.w	r3, r3, #7
 800a73c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	609a      	str	r2, [r3, #8]
}
 800a744:	bf00      	nop
 800a746:	3714      	adds	r7, #20
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a750:	b480      	push	{r7}
 800a752:	b087      	sub	sp, #28
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
 800a75c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a76a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	021a      	lsls	r2, r3, #8
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	431a      	orrs	r2, r3
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	4313      	orrs	r3, r2
 800a778:	697a      	ldr	r2, [r7, #20]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	697a      	ldr	r2, [r7, #20]
 800a782:	609a      	str	r2, [r3, #8]
}
 800a784:	bf00      	nop
 800a786:	371c      	adds	r7, #28
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a790:	b480      	push	{r7}
 800a792:	b087      	sub	sp, #28
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	f003 031f 	and.w	r3, r3, #31
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	6a1a      	ldr	r2, [r3, #32]
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	43db      	mvns	r3, r3
 800a7b2:	401a      	ands	r2, r3
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6a1a      	ldr	r2, [r3, #32]
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	f003 031f 	and.w	r3, r3, #31
 800a7c2:	6879      	ldr	r1, [r7, #4]
 800a7c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a7c8:	431a      	orrs	r2, r3
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	621a      	str	r2, [r3, #32]
}
 800a7ce:	bf00      	nop
 800a7d0:	371c      	adds	r7, #28
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr
	...

0800a7dc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a26      	ldr	r2, [pc, #152]	@ (800a880 <TIM_ResetCallback+0xa4>)
 800a7e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4a25      	ldr	r2, [pc, #148]	@ (800a884 <TIM_ResetCallback+0xa8>)
 800a7f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4a24      	ldr	r2, [pc, #144]	@ (800a888 <TIM_ResetCallback+0xac>)
 800a7f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4a23      	ldr	r2, [pc, #140]	@ (800a88c <TIM_ResetCallback+0xb0>)
 800a800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4a22      	ldr	r2, [pc, #136]	@ (800a890 <TIM_ResetCallback+0xb4>)
 800a808:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	4a21      	ldr	r2, [pc, #132]	@ (800a894 <TIM_ResetCallback+0xb8>)
 800a810:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a20      	ldr	r2, [pc, #128]	@ (800a898 <TIM_ResetCallback+0xbc>)
 800a818:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4a1f      	ldr	r2, [pc, #124]	@ (800a89c <TIM_ResetCallback+0xc0>)
 800a820:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a1e      	ldr	r2, [pc, #120]	@ (800a8a0 <TIM_ResetCallback+0xc4>)
 800a828:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	4a1d      	ldr	r2, [pc, #116]	@ (800a8a4 <TIM_ResetCallback+0xc8>)
 800a830:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4a1c      	ldr	r2, [pc, #112]	@ (800a8a8 <TIM_ResetCallback+0xcc>)
 800a838:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a1b      	ldr	r2, [pc, #108]	@ (800a8ac <TIM_ResetCallback+0xd0>)
 800a840:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a1a      	ldr	r2, [pc, #104]	@ (800a8b0 <TIM_ResetCallback+0xd4>)
 800a848:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a19      	ldr	r2, [pc, #100]	@ (800a8b4 <TIM_ResetCallback+0xd8>)
 800a850:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a18      	ldr	r2, [pc, #96]	@ (800a8b8 <TIM_ResetCallback+0xdc>)
 800a858:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a17      	ldr	r2, [pc, #92]	@ (800a8bc <TIM_ResetCallback+0xe0>)
 800a860:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4a16      	ldr	r2, [pc, #88]	@ (800a8c0 <TIM_ResetCallback+0xe4>)
 800a868:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a15      	ldr	r2, [pc, #84]	@ (800a8c4 <TIM_ResetCallback+0xe8>)
 800a870:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	08002b09 	.word	0x08002b09
 800a884:	08009b29 	.word	0x08009b29
 800a888:	08009ba1 	.word	0x08009ba1
 800a88c:	08009bb5 	.word	0x08009bb5
 800a890:	08009b51 	.word	0x08009b51
 800a894:	08009b65 	.word	0x08009b65
 800a898:	08009b3d 	.word	0x08009b3d
 800a89c:	08009b79 	.word	0x08009b79
 800a8a0:	08009b8d 	.word	0x08009b8d
 800a8a4:	08009bc9 	.word	0x08009bc9
 800a8a8:	0800a9f5 	.word	0x0800a9f5
 800a8ac:	0800aa09 	.word	0x0800aa09
 800a8b0:	0800aa1d 	.word	0x0800aa1d
 800a8b4:	0800aa31 	.word	0x0800aa31
 800a8b8:	0800aa45 	.word	0x0800aa45
 800a8bc:	0800aa59 	.word	0x0800aa59
 800a8c0:	0800aa6d 	.word	0x0800aa6d
 800a8c4:	0800aa81 	.word	0x0800aa81

0800a8c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d101      	bne.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a8dc:	2302      	movs	r3, #2
 800a8de:	e074      	b.n	800a9ca <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2202      	movs	r2, #2
 800a8ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a34      	ldr	r2, [pc, #208]	@ (800a9d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d009      	beq.n	800a91e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a33      	ldr	r2, [pc, #204]	@ (800a9dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d004      	beq.n	800a91e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a31      	ldr	r2, [pc, #196]	@ (800a9e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d108      	bne.n	800a930 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a924:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	4313      	orrs	r3, r2
 800a92e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a93a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68fa      	ldr	r2, [r7, #12]
 800a942:	4313      	orrs	r3, r2
 800a944:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a21      	ldr	r2, [pc, #132]	@ (800a9d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d022      	beq.n	800a99e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a960:	d01d      	beq.n	800a99e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a1f      	ldr	r2, [pc, #124]	@ (800a9e4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d018      	beq.n	800a99e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a1d      	ldr	r2, [pc, #116]	@ (800a9e8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d013      	beq.n	800a99e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a1c      	ldr	r2, [pc, #112]	@ (800a9ec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d00e      	beq.n	800a99e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a15      	ldr	r2, [pc, #84]	@ (800a9dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d009      	beq.n	800a99e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a18      	ldr	r2, [pc, #96]	@ (800a9f0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d004      	beq.n	800a99e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a11      	ldr	r2, [pc, #68]	@ (800a9e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d10c      	bne.n	800a9b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68ba      	ldr	r2, [r7, #8]
 800a9b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3714      	adds	r7, #20
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	40012c00 	.word	0x40012c00
 800a9dc:	40013400 	.word	0x40013400
 800a9e0:	40015000 	.word	0x40015000
 800a9e4:	40000400 	.word	0x40000400
 800a9e8:	40000800 	.word	0x40000800
 800a9ec:	40000c00 	.word	0x40000c00
 800a9f0:	40014000 	.word	0x40014000

0800a9f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a9fc:	bf00      	nop
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800aa10:	bf00      	nop
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa24:	bf00      	nop
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa38:	bf00      	nop
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800aa4c:	bf00      	nop
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d101      	bne.n	800aaa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e050      	b.n	800ab48 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d114      	bne.n	800aada <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fdc5 	bl	800b648 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d103      	bne.n	800aad0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a21      	ldr	r2, [pc, #132]	@ (800ab50 <HAL_UART_Init+0xbc>)
 800aacc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2224      	movs	r2, #36	@ 0x24
 800aade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f022 0201 	bic.w	r2, r2, #1
 800aaf0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d002      	beq.n	800ab00 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f001 f8f2 	bl	800bce4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 fdf3 	bl	800b6ec <UART_SetConfig>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d101      	bne.n	800ab10 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e01b      	b.n	800ab48 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	685a      	ldr	r2, [r3, #4]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ab1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	689a      	ldr	r2, [r3, #8]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ab2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f042 0201 	orr.w	r2, r2, #1
 800ab3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f001 f971 	bl	800be28 <UART_CheckIdleState>
 800ab46:	4603      	mov	r3, r0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3708      	adds	r7, #8
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	08005275 	.word	0x08005275

0800ab54 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b087      	sub	sp, #28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	607a      	str	r2, [r7, #4]
 800ab60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d109      	bne.n	800ab80 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e09c      	b.n	800acba <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab86:	2b20      	cmp	r3, #32
 800ab88:	d16c      	bne.n	800ac64 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800ab8a:	7afb      	ldrb	r3, [r7, #11]
 800ab8c:	2b0c      	cmp	r3, #12
 800ab8e:	d85e      	bhi.n	800ac4e <HAL_UART_RegisterCallback+0xfa>
 800ab90:	a201      	add	r2, pc, #4	@ (adr r2, 800ab98 <HAL_UART_RegisterCallback+0x44>)
 800ab92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab96:	bf00      	nop
 800ab98:	0800abcd 	.word	0x0800abcd
 800ab9c:	0800abd7 	.word	0x0800abd7
 800aba0:	0800abe1 	.word	0x0800abe1
 800aba4:	0800abeb 	.word	0x0800abeb
 800aba8:	0800abf5 	.word	0x0800abf5
 800abac:	0800abff 	.word	0x0800abff
 800abb0:	0800ac09 	.word	0x0800ac09
 800abb4:	0800ac13 	.word	0x0800ac13
 800abb8:	0800ac1d 	.word	0x0800ac1d
 800abbc:	0800ac27 	.word	0x0800ac27
 800abc0:	0800ac31 	.word	0x0800ac31
 800abc4:	0800ac3b 	.word	0x0800ac3b
 800abc8:	0800ac45 	.word	0x0800ac45
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800abd4:	e070      	b.n	800acb8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800abde:	e06b      	b.n	800acb8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800abe8:	e066      	b.n	800acb8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800abf2:	e061      	b.n	800acb8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800abfc:	e05c      	b.n	800acb8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800ac06:	e057      	b.n	800acb8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800ac10:	e052      	b.n	800acb8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800ac1a:	e04d      	b.n	800acb8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800ac24:	e048      	b.n	800acb8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800ac2e:	e043      	b.n	800acb8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800ac38:	e03e      	b.n	800acb8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800ac42:	e039      	b.n	800acb8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800ac4c:	e034      	b.n	800acb8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac54:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	75fb      	strb	r3, [r7, #23]
        break;
 800ac62:	e029      	b.n	800acb8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d11a      	bne.n	800aca4 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800ac6e:	7afb      	ldrb	r3, [r7, #11]
 800ac70:	2b0b      	cmp	r3, #11
 800ac72:	d002      	beq.n	800ac7a <HAL_UART_RegisterCallback+0x126>
 800ac74:	2b0c      	cmp	r3, #12
 800ac76:	d005      	beq.n	800ac84 <HAL_UART_RegisterCallback+0x130>
 800ac78:	e009      	b.n	800ac8e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800ac82:	e019      	b.n	800acb8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800ac8c:	e014      	b.n	800acb8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac94:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	75fb      	strb	r3, [r7, #23]
        break;
 800aca2:	e009      	b.n	800acb8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acaa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800acb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	371c      	adds	r7, #28
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop

0800acc8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b08a      	sub	sp, #40	@ 0x28
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	4613      	mov	r3, r2
 800acd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acdc:	2b20      	cmp	r3, #32
 800acde:	d167      	bne.n	800adb0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d002      	beq.n	800acec <HAL_UART_Transmit_DMA+0x24>
 800ace6:	88fb      	ldrh	r3, [r7, #6]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d101      	bne.n	800acf0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	e060      	b.n	800adb2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	68ba      	ldr	r2, [r7, #8]
 800acf4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	88fa      	ldrh	r2, [r7, #6]
 800acfa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	88fa      	ldrh	r2, [r7, #6]
 800ad02:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2221      	movs	r2, #33	@ 0x21
 800ad12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d028      	beq.n	800ad70 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad22:	4a26      	ldr	r2, [pc, #152]	@ (800adbc <HAL_UART_Transmit_DMA+0xf4>)
 800ad24:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad2a:	4a25      	ldr	r2, [pc, #148]	@ (800adc0 <HAL_UART_Transmit_DMA+0xf8>)
 800ad2c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad32:	4a24      	ldr	r2, [pc, #144]	@ (800adc4 <HAL_UART_Transmit_DMA+0xfc>)
 800ad34:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad46:	4619      	mov	r1, r3
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	3328      	adds	r3, #40	@ 0x28
 800ad4e:	461a      	mov	r2, r3
 800ad50:	88fb      	ldrh	r3, [r7, #6]
 800ad52:	f7fc f9bd 	bl	80070d0 <HAL_DMA_Start_IT>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d009      	beq.n	800ad70 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2210      	movs	r2, #16
 800ad60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2220      	movs	r2, #32
 800ad68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e020      	b.n	800adb2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2240      	movs	r2, #64	@ 0x40
 800ad76:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	3308      	adds	r3, #8
 800ad7e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	e853 3f00 	ldrex	r3, [r3]
 800ad86:	613b      	str	r3, [r7, #16]
   return(result);
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	3308      	adds	r3, #8
 800ad96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad98:	623a      	str	r2, [r7, #32]
 800ad9a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9c:	69f9      	ldr	r1, [r7, #28]
 800ad9e:	6a3a      	ldr	r2, [r7, #32]
 800ada0:	e841 2300 	strex	r3, r2, [r1]
 800ada4:	61bb      	str	r3, [r7, #24]
   return(result);
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1e5      	bne.n	800ad78 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800adac:	2300      	movs	r3, #0
 800adae:	e000      	b.n	800adb2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800adb0:	2302      	movs	r3, #2
  }
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3728      	adds	r7, #40	@ 0x28
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	0800c2f3 	.word	0x0800c2f3
 800adc0:	0800c391 	.word	0x0800c391
 800adc4:	0800c52b 	.word	0x0800c52b

0800adc8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b08a      	sub	sp, #40	@ 0x28
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	4613      	mov	r3, r2
 800add4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800addc:	2b20      	cmp	r3, #32
 800adde:	d137      	bne.n	800ae50 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d002      	beq.n	800adec <HAL_UART_Receive_DMA+0x24>
 800ade6:	88fb      	ldrh	r3, [r7, #6]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d101      	bne.n	800adf0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800adec:	2301      	movs	r3, #1
 800adee:	e030      	b.n	800ae52 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2200      	movs	r2, #0
 800adf4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a18      	ldr	r2, [pc, #96]	@ (800ae5c <HAL_UART_Receive_DMA+0x94>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d01f      	beq.n	800ae40 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d018      	beq.n	800ae40 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	e853 3f00 	ldrex	r3, [r3]
 800ae1a:	613b      	str	r3, [r7, #16]
   return(result);
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ae22:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2c:	623b      	str	r3, [r7, #32]
 800ae2e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae30:	69f9      	ldr	r1, [r7, #28]
 800ae32:	6a3a      	ldr	r2, [r7, #32]
 800ae34:	e841 2300 	strex	r3, r2, [r1]
 800ae38:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d1e6      	bne.n	800ae0e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ae40:	88fb      	ldrh	r3, [r7, #6]
 800ae42:	461a      	mov	r2, r3
 800ae44:	68b9      	ldr	r1, [r7, #8]
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f001 f906 	bl	800c058 <UART_Start_Receive_DMA>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	e000      	b.n	800ae52 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ae50:	2302      	movs	r3, #2
  }
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3728      	adds	r7, #40	@ 0x28
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	40008000 	.word	0x40008000

0800ae60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b0ba      	sub	sp, #232	@ 0xe8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	69db      	ldr	r3, [r3, #28]
 800ae6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ae86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ae8a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ae8e:	4013      	ands	r3, r2
 800ae90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ae94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d11b      	bne.n	800aed4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ae9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aea0:	f003 0320 	and.w	r3, r3, #32
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d015      	beq.n	800aed4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aeac:	f003 0320 	and.w	r3, r3, #32
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d105      	bne.n	800aec0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aeb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aeb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d009      	beq.n	800aed4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f000 82f3 	beq.w	800b4b0 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	4798      	blx	r3
      }
      return;
 800aed2:	e2ed      	b.n	800b4b0 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aed4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 8129 	beq.w	800b130 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aede:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aee2:	4b90      	ldr	r3, [pc, #576]	@ (800b124 <HAL_UART_IRQHandler+0x2c4>)
 800aee4:	4013      	ands	r3, r2
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d106      	bne.n	800aef8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aeea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aeee:	4b8e      	ldr	r3, [pc, #568]	@ (800b128 <HAL_UART_IRQHandler+0x2c8>)
 800aef0:	4013      	ands	r3, r2
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f000 811c 	beq.w	800b130 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aefc:	f003 0301 	and.w	r3, r3, #1
 800af00:	2b00      	cmp	r3, #0
 800af02:	d011      	beq.n	800af28 <HAL_UART_IRQHandler+0xc8>
 800af04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00b      	beq.n	800af28 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2201      	movs	r2, #1
 800af16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af1e:	f043 0201 	orr.w	r2, r3, #1
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af2c:	f003 0302 	and.w	r3, r3, #2
 800af30:	2b00      	cmp	r3, #0
 800af32:	d011      	beq.n	800af58 <HAL_UART_IRQHandler+0xf8>
 800af34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af38:	f003 0301 	and.w	r3, r3, #1
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d00b      	beq.n	800af58 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	2202      	movs	r2, #2
 800af46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af4e:	f043 0204 	orr.w	r2, r3, #4
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af5c:	f003 0304 	and.w	r3, r3, #4
 800af60:	2b00      	cmp	r3, #0
 800af62:	d011      	beq.n	800af88 <HAL_UART_IRQHandler+0x128>
 800af64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af68:	f003 0301 	and.w	r3, r3, #1
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00b      	beq.n	800af88 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2204      	movs	r2, #4
 800af76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af7e:	f043 0202 	orr.w	r2, r3, #2
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800af88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af8c:	f003 0308 	and.w	r3, r3, #8
 800af90:	2b00      	cmp	r3, #0
 800af92:	d017      	beq.n	800afc4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800af94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af98:	f003 0320 	and.w	r3, r3, #32
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d105      	bne.n	800afac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800afa0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800afa4:	4b5f      	ldr	r3, [pc, #380]	@ (800b124 <HAL_UART_IRQHandler+0x2c4>)
 800afa6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d00b      	beq.n	800afc4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2208      	movs	r2, #8
 800afb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afba:	f043 0208 	orr.w	r2, r3, #8
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800afc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d012      	beq.n	800aff6 <HAL_UART_IRQHandler+0x196>
 800afd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d00c      	beq.n	800aff6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800afe4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afec:	f043 0220 	orr.w	r2, r3, #32
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800affc:	2b00      	cmp	r3, #0
 800affe:	f000 8259 	beq.w	800b4b4 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b006:	f003 0320 	and.w	r3, r3, #32
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d013      	beq.n	800b036 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b00e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b012:	f003 0320 	and.w	r3, r3, #32
 800b016:	2b00      	cmp	r3, #0
 800b018:	d105      	bne.n	800b026 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b01a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b01e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b022:	2b00      	cmp	r3, #0
 800b024:	d007      	beq.n	800b036 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d003      	beq.n	800b036 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b03c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b04a:	2b40      	cmp	r3, #64	@ 0x40
 800b04c:	d005      	beq.n	800b05a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b04e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b052:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b056:	2b00      	cmp	r3, #0
 800b058:	d058      	beq.n	800b10c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f001 f8e3 	bl	800c226 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b06a:	2b40      	cmp	r3, #64	@ 0x40
 800b06c:	d148      	bne.n	800b100 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	3308      	adds	r3, #8
 800b074:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b078:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b07c:	e853 3f00 	ldrex	r3, [r3]
 800b080:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b084:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b088:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b08c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	3308      	adds	r3, #8
 800b096:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b09a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b09e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b0a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b0aa:	e841 2300 	strex	r3, r2, [r1]
 800b0ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b0b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1d9      	bne.n	800b06e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d017      	beq.n	800b0f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0ca:	4a18      	ldr	r2, [pc, #96]	@ (800b12c <HAL_UART_IRQHandler+0x2cc>)
 800b0cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7fc f8cf 	bl	8007278 <HAL_DMA_Abort_IT>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d01f      	beq.n	800b120 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0f2:	e015      	b.n	800b120 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0fe:	e00f      	b.n	800b120 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b10a:	e009      	b.n	800b120 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b11e:	e1c9      	b.n	800b4b4 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b120:	bf00      	nop
    return;
 800b122:	e1c7      	b.n	800b4b4 <HAL_UART_IRQHandler+0x654>
 800b124:	10000001 	.word	0x10000001
 800b128:	04000120 	.word	0x04000120
 800b12c:	0800c5af 	.word	0x0800c5af

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b134:	2b01      	cmp	r3, #1
 800b136:	f040 8157 	bne.w	800b3e8 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b13a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b13e:	f003 0310 	and.w	r3, r3, #16
 800b142:	2b00      	cmp	r3, #0
 800b144:	f000 8150 	beq.w	800b3e8 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b14c:	f003 0310 	and.w	r3, r3, #16
 800b150:	2b00      	cmp	r3, #0
 800b152:	f000 8149 	beq.w	800b3e8 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2210      	movs	r2, #16
 800b15c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b168:	2b40      	cmp	r3, #64	@ 0x40
 800b16a:	f040 80bd 	bne.w	800b2e8 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b17c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b180:	2b00      	cmp	r3, #0
 800b182:	f000 8199 	beq.w	800b4b8 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b18c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b190:	429a      	cmp	r2, r3
 800b192:	f080 8191 	bcs.w	800b4b8 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b19c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f003 0320 	and.w	r3, r3, #32
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	f040 8087 	bne.w	800b2c2 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b1c0:	e853 3f00 	ldrex	r3, [r3]
 800b1c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b1c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b1cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b1d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	461a      	mov	r2, r3
 800b1da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b1de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b1e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b1ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b1ee:	e841 2300 	strex	r3, r2, [r1]
 800b1f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b1f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1da      	bne.n	800b1b4 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	3308      	adds	r3, #8
 800b204:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b206:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b208:	e853 3f00 	ldrex	r3, [r3]
 800b20c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b20e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b210:	f023 0301 	bic.w	r3, r3, #1
 800b214:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	3308      	adds	r3, #8
 800b21e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b222:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b226:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b228:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b22a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b22e:	e841 2300 	strex	r3, r2, [r1]
 800b232:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b234:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b236:	2b00      	cmp	r3, #0
 800b238:	d1e1      	bne.n	800b1fe <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	3308      	adds	r3, #8
 800b240:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b242:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b244:	e853 3f00 	ldrex	r3, [r3]
 800b248:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b24a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b24c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b250:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	3308      	adds	r3, #8
 800b25a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b25e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b260:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b262:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b264:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b266:	e841 2300 	strex	r3, r2, [r1]
 800b26a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b26c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1e3      	bne.n	800b23a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2220      	movs	r2, #32
 800b276:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b286:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b288:	e853 3f00 	ldrex	r3, [r3]
 800b28c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b28e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b290:	f023 0310 	bic.w	r3, r3, #16
 800b294:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	461a      	mov	r2, r3
 800b29e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b2a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b2a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b2aa:	e841 2300 	strex	r3, r2, [r1]
 800b2ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b2b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1e4      	bne.n	800b280 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7fb ff82 	bl	80071c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2202      	movs	r2, #2
 800b2c6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800b2da:	b292      	uxth	r2, r2
 800b2dc:	1a8a      	subs	r2, r1, r2
 800b2de:	b292      	uxth	r2, r2
 800b2e0:	4611      	mov	r1, r2
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b2e6:	e0e7      	b.n	800b4b8 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	1ad3      	subs	r3, r2, r3
 800b2f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b302:	b29b      	uxth	r3, r3
 800b304:	2b00      	cmp	r3, #0
 800b306:	f000 80d9 	beq.w	800b4bc <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800b30a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f000 80d4 	beq.w	800b4bc <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b31c:	e853 3f00 	ldrex	r3, [r3]
 800b320:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b324:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b328:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	461a      	mov	r2, r3
 800b332:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b336:	647b      	str	r3, [r7, #68]	@ 0x44
 800b338:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b33c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b33e:	e841 2300 	strex	r3, r2, [r1]
 800b342:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1e4      	bne.n	800b314 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	3308      	adds	r3, #8
 800b350:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b354:	e853 3f00 	ldrex	r3, [r3]
 800b358:	623b      	str	r3, [r7, #32]
   return(result);
 800b35a:	6a3b      	ldr	r3, [r7, #32]
 800b35c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b360:	f023 0301 	bic.w	r3, r3, #1
 800b364:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3308      	adds	r3, #8
 800b36e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b372:	633a      	str	r2, [r7, #48]	@ 0x30
 800b374:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b376:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b378:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b37a:	e841 2300 	strex	r3, r2, [r1]
 800b37e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1e1      	bne.n	800b34a <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2220      	movs	r2, #32
 800b38a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2200      	movs	r2, #0
 800b398:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	e853 3f00 	ldrex	r3, [r3]
 800b3a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f023 0310 	bic.w	r3, r3, #16
 800b3ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b3bc:	61fb      	str	r3, [r7, #28]
 800b3be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c0:	69b9      	ldr	r1, [r7, #24]
 800b3c2:	69fa      	ldr	r2, [r7, #28]
 800b3c4:	e841 2300 	strex	r3, r2, [r1]
 800b3c8:	617b      	str	r3, [r7, #20]
   return(result);
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1e4      	bne.n	800b39a <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2202      	movs	r2, #2
 800b3d4:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b3dc:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b3e6:	e069      	b.n	800b4bc <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b3e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d010      	beq.n	800b416 <HAL_UART_IRQHandler+0x5b6>
 800b3f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00a      	beq.n	800b416 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b408:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b414:	e055      	b.n	800b4c2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b41a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d014      	beq.n	800b44c <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d105      	bne.n	800b43a <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b42e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b432:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b436:	2b00      	cmp	r3, #0
 800b438:	d008      	beq.n	800b44c <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d03e      	beq.n	800b4c0 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	4798      	blx	r3
    }
    return;
 800b44a:	e039      	b.n	800b4c0 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b44c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b454:	2b00      	cmp	r3, #0
 800b456:	d009      	beq.n	800b46c <HAL_UART_IRQHandler+0x60c>
 800b458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b45c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b460:	2b00      	cmp	r3, #0
 800b462:	d003      	beq.n	800b46c <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f001 f8ba 	bl	800c5de <UART_EndTransmit_IT>
    return;
 800b46a:	e02a      	b.n	800b4c2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b46c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b470:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b474:	2b00      	cmp	r3, #0
 800b476:	d00b      	beq.n	800b490 <HAL_UART_IRQHandler+0x630>
 800b478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b47c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b480:	2b00      	cmp	r3, #0
 800b482:	d005      	beq.n	800b490 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b48e:	e018      	b.n	800b4c2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b494:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d012      	beq.n	800b4c2 <HAL_UART_IRQHandler+0x662>
 800b49c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	da0e      	bge.n	800b4c2 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b4ae:	e008      	b.n	800b4c2 <HAL_UART_IRQHandler+0x662>
      return;
 800b4b0:	bf00      	nop
 800b4b2:	e006      	b.n	800b4c2 <HAL_UART_IRQHandler+0x662>
    return;
 800b4b4:	bf00      	nop
 800b4b6:	e004      	b.n	800b4c2 <HAL_UART_IRQHandler+0x662>
      return;
 800b4b8:	bf00      	nop
 800b4ba:	e002      	b.n	800b4c2 <HAL_UART_IRQHandler+0x662>
      return;
 800b4bc:	bf00      	nop
 800b4be:	e000      	b.n	800b4c2 <HAL_UART_IRQHandler+0x662>
    return;
 800b4c0:	bf00      	nop
  }
}
 800b4c2:	37e8      	adds	r7, #232	@ 0xe8
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b4e4:	bf00      	nop
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b4f8:	bf00      	nop
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b50c:	bf00      	nop
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr

0800b518 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b520:	bf00      	nop
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b534:	bf00      	nop
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b548:	bf00      	nop
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr

0800b554 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b55c:	bf00      	nop
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	460b      	mov	r3, r1
 800b572:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b574:	bf00      	nop
 800b576:	370c      	adds	r7, #12
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a09      	ldr	r2, [pc, #36]	@ (800b5b4 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d009      	beq.n	800b5a8 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	695b      	ldr	r3, [r3, #20]
 800b59a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	683a      	ldr	r2, [r7, #0]
 800b5a4:	430a      	orrs	r2, r1
 800b5a6:	615a      	str	r2, [r3, #20]
  }
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr
 800b5b4:	40008000 	.word	0x40008000

0800b5b8 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a18      	ldr	r2, [pc, #96]	@ (800b628 <HAL_UART_EnableReceiverTimeout+0x70>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d027      	beq.n	800b61a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5d0:	2b20      	cmp	r3, #32
 800b5d2:	d120      	bne.n	800b616 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d101      	bne.n	800b5e2 <HAL_UART_EnableReceiverTimeout+0x2a>
 800b5de:	2302      	movs	r3, #2
 800b5e0:	e01c      	b.n	800b61c <HAL_UART_EnableReceiverTimeout+0x64>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2224      	movs	r2, #36	@ 0x24
 800b5ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	685a      	ldr	r2, [r3, #4]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800b600:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2220      	movs	r2, #32
 800b606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800b612:	2300      	movs	r3, #0
 800b614:	e002      	b.n	800b61c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800b616:	2302      	movs	r3, #2
 800b618:	e000      	b.n	800b61c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800b61a:	2301      	movs	r3, #1
  }
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr
 800b628:	40008000 	.word	0x40008000

0800b62c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
	...

0800b648 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4a1a      	ldr	r2, [pc, #104]	@ (800b6bc <UART_InitCallbacksToDefault+0x74>)
 800b654:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4a19      	ldr	r2, [pc, #100]	@ (800b6c0 <UART_InitCallbacksToDefault+0x78>)
 800b65c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	4a18      	ldr	r2, [pc, #96]	@ (800b6c4 <UART_InitCallbacksToDefault+0x7c>)
 800b664:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4a17      	ldr	r2, [pc, #92]	@ (800b6c8 <UART_InitCallbacksToDefault+0x80>)
 800b66c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4a16      	ldr	r2, [pc, #88]	@ (800b6cc <UART_InitCallbacksToDefault+0x84>)
 800b674:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	4a15      	ldr	r2, [pc, #84]	@ (800b6d0 <UART_InitCallbacksToDefault+0x88>)
 800b67c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4a14      	ldr	r2, [pc, #80]	@ (800b6d4 <UART_InitCallbacksToDefault+0x8c>)
 800b684:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4a13      	ldr	r2, [pc, #76]	@ (800b6d8 <UART_InitCallbacksToDefault+0x90>)
 800b68c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4a12      	ldr	r2, [pc, #72]	@ (800b6dc <UART_InitCallbacksToDefault+0x94>)
 800b694:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4a11      	ldr	r2, [pc, #68]	@ (800b6e0 <UART_InitCallbacksToDefault+0x98>)
 800b69c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4a10      	ldr	r2, [pc, #64]	@ (800b6e4 <UART_InitCallbacksToDefault+0x9c>)
 800b6a4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4a0f      	ldr	r2, [pc, #60]	@ (800b6e8 <UART_InitCallbacksToDefault+0xa0>)
 800b6ac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800b6b0:	bf00      	nop
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr
 800b6bc:	0800b4dd 	.word	0x0800b4dd
 800b6c0:	0800b4c9 	.word	0x0800b4c9
 800b6c4:	0800b505 	.word	0x0800b505
 800b6c8:	0800b4f1 	.word	0x0800b4f1
 800b6cc:	0800b519 	.word	0x0800b519
 800b6d0:	0800b52d 	.word	0x0800b52d
 800b6d4:	0800b541 	.word	0x0800b541
 800b6d8:	0800b555 	.word	0x0800b555
 800b6dc:	0800c639 	.word	0x0800c639
 800b6e0:	0800c64d 	.word	0x0800c64d
 800b6e4:	0800c661 	.word	0x0800c661
 800b6e8:	0800b569 	.word	0x0800b569

0800b6ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6f0:	b08c      	sub	sp, #48	@ 0x30
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	689a      	ldr	r2, [r3, #8]
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	691b      	ldr	r3, [r3, #16]
 800b704:	431a      	orrs	r2, r3
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	695b      	ldr	r3, [r3, #20]
 800b70a:	431a      	orrs	r2, r3
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	69db      	ldr	r3, [r3, #28]
 800b710:	4313      	orrs	r3, r2
 800b712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	4baa      	ldr	r3, [pc, #680]	@ (800b9c4 <UART_SetConfig+0x2d8>)
 800b71c:	4013      	ands	r3, r2
 800b71e:	697a      	ldr	r2, [r7, #20]
 800b720:	6812      	ldr	r2, [r2, #0]
 800b722:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b724:	430b      	orrs	r3, r1
 800b726:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	68da      	ldr	r2, [r3, #12]
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	430a      	orrs	r2, r1
 800b73c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	699b      	ldr	r3, [r3, #24]
 800b742:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a9f      	ldr	r2, [pc, #636]	@ (800b9c8 <UART_SetConfig+0x2dc>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d004      	beq.n	800b758 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	6a1b      	ldr	r3, [r3, #32]
 800b752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b754:	4313      	orrs	r3, r2
 800b756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b762:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b766:	697a      	ldr	r2, [r7, #20]
 800b768:	6812      	ldr	r2, [r2, #0]
 800b76a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b76c:	430b      	orrs	r3, r1
 800b76e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b776:	f023 010f 	bic.w	r1, r3, #15
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	430a      	orrs	r2, r1
 800b784:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a90      	ldr	r2, [pc, #576]	@ (800b9cc <UART_SetConfig+0x2e0>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d125      	bne.n	800b7dc <UART_SetConfig+0xf0>
 800b790:	4b8f      	ldr	r3, [pc, #572]	@ (800b9d0 <UART_SetConfig+0x2e4>)
 800b792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b796:	f003 0303 	and.w	r3, r3, #3
 800b79a:	2b03      	cmp	r3, #3
 800b79c:	d81a      	bhi.n	800b7d4 <UART_SetConfig+0xe8>
 800b79e:	a201      	add	r2, pc, #4	@ (adr r2, 800b7a4 <UART_SetConfig+0xb8>)
 800b7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a4:	0800b7b5 	.word	0x0800b7b5
 800b7a8:	0800b7c5 	.word	0x0800b7c5
 800b7ac:	0800b7bd 	.word	0x0800b7bd
 800b7b0:	0800b7cd 	.word	0x0800b7cd
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7ba:	e116      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b7bc:	2302      	movs	r3, #2
 800b7be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7c2:	e112      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b7c4:	2304      	movs	r3, #4
 800b7c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7ca:	e10e      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b7cc:	2308      	movs	r3, #8
 800b7ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7d2:	e10a      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b7d4:	2310      	movs	r3, #16
 800b7d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7da:	e106      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a7c      	ldr	r2, [pc, #496]	@ (800b9d4 <UART_SetConfig+0x2e8>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d138      	bne.n	800b858 <UART_SetConfig+0x16c>
 800b7e6:	4b7a      	ldr	r3, [pc, #488]	@ (800b9d0 <UART_SetConfig+0x2e4>)
 800b7e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7ec:	f003 030c 	and.w	r3, r3, #12
 800b7f0:	2b0c      	cmp	r3, #12
 800b7f2:	d82d      	bhi.n	800b850 <UART_SetConfig+0x164>
 800b7f4:	a201      	add	r2, pc, #4	@ (adr r2, 800b7fc <UART_SetConfig+0x110>)
 800b7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7fa:	bf00      	nop
 800b7fc:	0800b831 	.word	0x0800b831
 800b800:	0800b851 	.word	0x0800b851
 800b804:	0800b851 	.word	0x0800b851
 800b808:	0800b851 	.word	0x0800b851
 800b80c:	0800b841 	.word	0x0800b841
 800b810:	0800b851 	.word	0x0800b851
 800b814:	0800b851 	.word	0x0800b851
 800b818:	0800b851 	.word	0x0800b851
 800b81c:	0800b839 	.word	0x0800b839
 800b820:	0800b851 	.word	0x0800b851
 800b824:	0800b851 	.word	0x0800b851
 800b828:	0800b851 	.word	0x0800b851
 800b82c:	0800b849 	.word	0x0800b849
 800b830:	2300      	movs	r3, #0
 800b832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b836:	e0d8      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b838:	2302      	movs	r3, #2
 800b83a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b83e:	e0d4      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b840:	2304      	movs	r3, #4
 800b842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b846:	e0d0      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b848:	2308      	movs	r3, #8
 800b84a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b84e:	e0cc      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b850:	2310      	movs	r3, #16
 800b852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b856:	e0c8      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a5e      	ldr	r2, [pc, #376]	@ (800b9d8 <UART_SetConfig+0x2ec>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d125      	bne.n	800b8ae <UART_SetConfig+0x1c2>
 800b862:	4b5b      	ldr	r3, [pc, #364]	@ (800b9d0 <UART_SetConfig+0x2e4>)
 800b864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b868:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b86c:	2b30      	cmp	r3, #48	@ 0x30
 800b86e:	d016      	beq.n	800b89e <UART_SetConfig+0x1b2>
 800b870:	2b30      	cmp	r3, #48	@ 0x30
 800b872:	d818      	bhi.n	800b8a6 <UART_SetConfig+0x1ba>
 800b874:	2b20      	cmp	r3, #32
 800b876:	d00a      	beq.n	800b88e <UART_SetConfig+0x1a2>
 800b878:	2b20      	cmp	r3, #32
 800b87a:	d814      	bhi.n	800b8a6 <UART_SetConfig+0x1ba>
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d002      	beq.n	800b886 <UART_SetConfig+0x19a>
 800b880:	2b10      	cmp	r3, #16
 800b882:	d008      	beq.n	800b896 <UART_SetConfig+0x1aa>
 800b884:	e00f      	b.n	800b8a6 <UART_SetConfig+0x1ba>
 800b886:	2300      	movs	r3, #0
 800b888:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b88c:	e0ad      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b88e:	2302      	movs	r3, #2
 800b890:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b894:	e0a9      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b896:	2304      	movs	r3, #4
 800b898:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b89c:	e0a5      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b89e:	2308      	movs	r3, #8
 800b8a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8a4:	e0a1      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b8a6:	2310      	movs	r3, #16
 800b8a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8ac:	e09d      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4a4a      	ldr	r2, [pc, #296]	@ (800b9dc <UART_SetConfig+0x2f0>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d125      	bne.n	800b904 <UART_SetConfig+0x218>
 800b8b8:	4b45      	ldr	r3, [pc, #276]	@ (800b9d0 <UART_SetConfig+0x2e4>)
 800b8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b8c2:	2bc0      	cmp	r3, #192	@ 0xc0
 800b8c4:	d016      	beq.n	800b8f4 <UART_SetConfig+0x208>
 800b8c6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b8c8:	d818      	bhi.n	800b8fc <UART_SetConfig+0x210>
 800b8ca:	2b80      	cmp	r3, #128	@ 0x80
 800b8cc:	d00a      	beq.n	800b8e4 <UART_SetConfig+0x1f8>
 800b8ce:	2b80      	cmp	r3, #128	@ 0x80
 800b8d0:	d814      	bhi.n	800b8fc <UART_SetConfig+0x210>
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d002      	beq.n	800b8dc <UART_SetConfig+0x1f0>
 800b8d6:	2b40      	cmp	r3, #64	@ 0x40
 800b8d8:	d008      	beq.n	800b8ec <UART_SetConfig+0x200>
 800b8da:	e00f      	b.n	800b8fc <UART_SetConfig+0x210>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8e2:	e082      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8ea:	e07e      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b8ec:	2304      	movs	r3, #4
 800b8ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8f2:	e07a      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b8f4:	2308      	movs	r3, #8
 800b8f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8fa:	e076      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b8fc:	2310      	movs	r3, #16
 800b8fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b902:	e072      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4a35      	ldr	r2, [pc, #212]	@ (800b9e0 <UART_SetConfig+0x2f4>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d12a      	bne.n	800b964 <UART_SetConfig+0x278>
 800b90e:	4b30      	ldr	r3, [pc, #192]	@ (800b9d0 <UART_SetConfig+0x2e4>)
 800b910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b914:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b918:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b91c:	d01a      	beq.n	800b954 <UART_SetConfig+0x268>
 800b91e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b922:	d81b      	bhi.n	800b95c <UART_SetConfig+0x270>
 800b924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b928:	d00c      	beq.n	800b944 <UART_SetConfig+0x258>
 800b92a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b92e:	d815      	bhi.n	800b95c <UART_SetConfig+0x270>
 800b930:	2b00      	cmp	r3, #0
 800b932:	d003      	beq.n	800b93c <UART_SetConfig+0x250>
 800b934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b938:	d008      	beq.n	800b94c <UART_SetConfig+0x260>
 800b93a:	e00f      	b.n	800b95c <UART_SetConfig+0x270>
 800b93c:	2300      	movs	r3, #0
 800b93e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b942:	e052      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b944:	2302      	movs	r3, #2
 800b946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b94a:	e04e      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b94c:	2304      	movs	r3, #4
 800b94e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b952:	e04a      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b954:	2308      	movs	r3, #8
 800b956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b95a:	e046      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b95c:	2310      	movs	r3, #16
 800b95e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b962:	e042      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a17      	ldr	r2, [pc, #92]	@ (800b9c8 <UART_SetConfig+0x2dc>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d13a      	bne.n	800b9e4 <UART_SetConfig+0x2f8>
 800b96e:	4b18      	ldr	r3, [pc, #96]	@ (800b9d0 <UART_SetConfig+0x2e4>)
 800b970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b974:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b978:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b97c:	d01a      	beq.n	800b9b4 <UART_SetConfig+0x2c8>
 800b97e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b982:	d81b      	bhi.n	800b9bc <UART_SetConfig+0x2d0>
 800b984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b988:	d00c      	beq.n	800b9a4 <UART_SetConfig+0x2b8>
 800b98a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b98e:	d815      	bhi.n	800b9bc <UART_SetConfig+0x2d0>
 800b990:	2b00      	cmp	r3, #0
 800b992:	d003      	beq.n	800b99c <UART_SetConfig+0x2b0>
 800b994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b998:	d008      	beq.n	800b9ac <UART_SetConfig+0x2c0>
 800b99a:	e00f      	b.n	800b9bc <UART_SetConfig+0x2d0>
 800b99c:	2300      	movs	r3, #0
 800b99e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9a2:	e022      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b9a4:	2302      	movs	r3, #2
 800b9a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9aa:	e01e      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b9ac:	2304      	movs	r3, #4
 800b9ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9b2:	e01a      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b9b4:	2308      	movs	r3, #8
 800b9b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9ba:	e016      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b9bc:	2310      	movs	r3, #16
 800b9be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9c2:	e012      	b.n	800b9ea <UART_SetConfig+0x2fe>
 800b9c4:	cfff69f3 	.word	0xcfff69f3
 800b9c8:	40008000 	.word	0x40008000
 800b9cc:	40013800 	.word	0x40013800
 800b9d0:	40021000 	.word	0x40021000
 800b9d4:	40004400 	.word	0x40004400
 800b9d8:	40004800 	.word	0x40004800
 800b9dc:	40004c00 	.word	0x40004c00
 800b9e0:	40005000 	.word	0x40005000
 800b9e4:	2310      	movs	r3, #16
 800b9e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4aae      	ldr	r2, [pc, #696]	@ (800bca8 <UART_SetConfig+0x5bc>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	f040 8097 	bne.w	800bb24 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b9f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b9fa:	2b08      	cmp	r3, #8
 800b9fc:	d823      	bhi.n	800ba46 <UART_SetConfig+0x35a>
 800b9fe:	a201      	add	r2, pc, #4	@ (adr r2, 800ba04 <UART_SetConfig+0x318>)
 800ba00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba04:	0800ba29 	.word	0x0800ba29
 800ba08:	0800ba47 	.word	0x0800ba47
 800ba0c:	0800ba31 	.word	0x0800ba31
 800ba10:	0800ba47 	.word	0x0800ba47
 800ba14:	0800ba37 	.word	0x0800ba37
 800ba18:	0800ba47 	.word	0x0800ba47
 800ba1c:	0800ba47 	.word	0x0800ba47
 800ba20:	0800ba47 	.word	0x0800ba47
 800ba24:	0800ba3f 	.word	0x0800ba3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba28:	f7fc fd16 	bl	8008458 <HAL_RCC_GetPCLK1Freq>
 800ba2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba2e:	e010      	b.n	800ba52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba30:	4b9e      	ldr	r3, [pc, #632]	@ (800bcac <UART_SetConfig+0x5c0>)
 800ba32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba34:	e00d      	b.n	800ba52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba36:	f7fc fca1 	bl	800837c <HAL_RCC_GetSysClockFreq>
 800ba3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba3c:	e009      	b.n	800ba52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba44:	e005      	b.n	800ba52 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ba46:	2300      	movs	r3, #0
 800ba48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ba50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ba52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f000 8130 	beq.w	800bcba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba5e:	4a94      	ldr	r2, [pc, #592]	@ (800bcb0 <UART_SetConfig+0x5c4>)
 800ba60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba64:	461a      	mov	r2, r3
 800ba66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba68:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	685a      	ldr	r2, [r3, #4]
 800ba72:	4613      	mov	r3, r2
 800ba74:	005b      	lsls	r3, r3, #1
 800ba76:	4413      	add	r3, r2
 800ba78:	69ba      	ldr	r2, [r7, #24]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d305      	bcc.n	800ba8a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba84:	69ba      	ldr	r2, [r7, #24]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d903      	bls.n	800ba92 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ba90:	e113      	b.n	800bcba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba94:	2200      	movs	r2, #0
 800ba96:	60bb      	str	r3, [r7, #8]
 800ba98:	60fa      	str	r2, [r7, #12]
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba9e:	4a84      	ldr	r2, [pc, #528]	@ (800bcb0 <UART_SetConfig+0x5c4>)
 800baa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	2200      	movs	r2, #0
 800baa8:	603b      	str	r3, [r7, #0]
 800baaa:	607a      	str	r2, [r7, #4]
 800baac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bab0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bab4:	f7f5 f99a 	bl	8000dec <__aeabi_uldivmod>
 800bab8:	4602      	mov	r2, r0
 800baba:	460b      	mov	r3, r1
 800babc:	4610      	mov	r0, r2
 800babe:	4619      	mov	r1, r3
 800bac0:	f04f 0200 	mov.w	r2, #0
 800bac4:	f04f 0300 	mov.w	r3, #0
 800bac8:	020b      	lsls	r3, r1, #8
 800baca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bace:	0202      	lsls	r2, r0, #8
 800bad0:	6979      	ldr	r1, [r7, #20]
 800bad2:	6849      	ldr	r1, [r1, #4]
 800bad4:	0849      	lsrs	r1, r1, #1
 800bad6:	2000      	movs	r0, #0
 800bad8:	460c      	mov	r4, r1
 800bada:	4605      	mov	r5, r0
 800badc:	eb12 0804 	adds.w	r8, r2, r4
 800bae0:	eb43 0905 	adc.w	r9, r3, r5
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	469a      	mov	sl, r3
 800baec:	4693      	mov	fp, r2
 800baee:	4652      	mov	r2, sl
 800baf0:	465b      	mov	r3, fp
 800baf2:	4640      	mov	r0, r8
 800baf4:	4649      	mov	r1, r9
 800baf6:	f7f5 f979 	bl	8000dec <__aeabi_uldivmod>
 800bafa:	4602      	mov	r2, r0
 800bafc:	460b      	mov	r3, r1
 800bafe:	4613      	mov	r3, r2
 800bb00:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bb02:	6a3b      	ldr	r3, [r7, #32]
 800bb04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bb08:	d308      	bcc.n	800bb1c <UART_SetConfig+0x430>
 800bb0a:	6a3b      	ldr	r3, [r7, #32]
 800bb0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb10:	d204      	bcs.n	800bb1c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6a3a      	ldr	r2, [r7, #32]
 800bb18:	60da      	str	r2, [r3, #12]
 800bb1a:	e0ce      	b.n	800bcba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bb22:	e0ca      	b.n	800bcba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	69db      	ldr	r3, [r3, #28]
 800bb28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb2c:	d166      	bne.n	800bbfc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bb2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bb32:	2b08      	cmp	r3, #8
 800bb34:	d827      	bhi.n	800bb86 <UART_SetConfig+0x49a>
 800bb36:	a201      	add	r2, pc, #4	@ (adr r2, 800bb3c <UART_SetConfig+0x450>)
 800bb38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb3c:	0800bb61 	.word	0x0800bb61
 800bb40:	0800bb69 	.word	0x0800bb69
 800bb44:	0800bb71 	.word	0x0800bb71
 800bb48:	0800bb87 	.word	0x0800bb87
 800bb4c:	0800bb77 	.word	0x0800bb77
 800bb50:	0800bb87 	.word	0x0800bb87
 800bb54:	0800bb87 	.word	0x0800bb87
 800bb58:	0800bb87 	.word	0x0800bb87
 800bb5c:	0800bb7f 	.word	0x0800bb7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb60:	f7fc fc7a 	bl	8008458 <HAL_RCC_GetPCLK1Freq>
 800bb64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb66:	e014      	b.n	800bb92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb68:	f7fc fc8c 	bl	8008484 <HAL_RCC_GetPCLK2Freq>
 800bb6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb6e:	e010      	b.n	800bb92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb70:	4b4e      	ldr	r3, [pc, #312]	@ (800bcac <UART_SetConfig+0x5c0>)
 800bb72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb74:	e00d      	b.n	800bb92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb76:	f7fc fc01 	bl	800837c <HAL_RCC_GetSysClockFreq>
 800bb7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb7c:	e009      	b.n	800bb92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb84:	e005      	b.n	800bb92 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bb86:	2300      	movs	r3, #0
 800bb88:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bb90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f000 8090 	beq.w	800bcba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb9e:	4a44      	ldr	r2, [pc, #272]	@ (800bcb0 <UART_SetConfig+0x5c4>)
 800bba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bba4:	461a      	mov	r2, r3
 800bba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbac:	005a      	lsls	r2, r3, #1
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	085b      	lsrs	r3, r3, #1
 800bbb4:	441a      	add	r2, r3
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbbe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bbc0:	6a3b      	ldr	r3, [r7, #32]
 800bbc2:	2b0f      	cmp	r3, #15
 800bbc4:	d916      	bls.n	800bbf4 <UART_SetConfig+0x508>
 800bbc6:	6a3b      	ldr	r3, [r7, #32]
 800bbc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbcc:	d212      	bcs.n	800bbf4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bbce:	6a3b      	ldr	r3, [r7, #32]
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	f023 030f 	bic.w	r3, r3, #15
 800bbd6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bbd8:	6a3b      	ldr	r3, [r7, #32]
 800bbda:	085b      	lsrs	r3, r3, #1
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	f003 0307 	and.w	r3, r3, #7
 800bbe2:	b29a      	uxth	r2, r3
 800bbe4:	8bfb      	ldrh	r3, [r7, #30]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	8bfa      	ldrh	r2, [r7, #30]
 800bbf0:	60da      	str	r2, [r3, #12]
 800bbf2:	e062      	b.n	800bcba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bbfa:	e05e      	b.n	800bcba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bbfc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bc00:	2b08      	cmp	r3, #8
 800bc02:	d828      	bhi.n	800bc56 <UART_SetConfig+0x56a>
 800bc04:	a201      	add	r2, pc, #4	@ (adr r2, 800bc0c <UART_SetConfig+0x520>)
 800bc06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc0a:	bf00      	nop
 800bc0c:	0800bc31 	.word	0x0800bc31
 800bc10:	0800bc39 	.word	0x0800bc39
 800bc14:	0800bc41 	.word	0x0800bc41
 800bc18:	0800bc57 	.word	0x0800bc57
 800bc1c:	0800bc47 	.word	0x0800bc47
 800bc20:	0800bc57 	.word	0x0800bc57
 800bc24:	0800bc57 	.word	0x0800bc57
 800bc28:	0800bc57 	.word	0x0800bc57
 800bc2c:	0800bc4f 	.word	0x0800bc4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc30:	f7fc fc12 	bl	8008458 <HAL_RCC_GetPCLK1Freq>
 800bc34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc36:	e014      	b.n	800bc62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc38:	f7fc fc24 	bl	8008484 <HAL_RCC_GetPCLK2Freq>
 800bc3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc3e:	e010      	b.n	800bc62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc40:	4b1a      	ldr	r3, [pc, #104]	@ (800bcac <UART_SetConfig+0x5c0>)
 800bc42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bc44:	e00d      	b.n	800bc62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc46:	f7fc fb99 	bl	800837c <HAL_RCC_GetSysClockFreq>
 800bc4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc4c:	e009      	b.n	800bc62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bc54:	e005      	b.n	800bc62 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bc56:	2300      	movs	r3, #0
 800bc58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bc60:	bf00      	nop
    }

    if (pclk != 0U)
 800bc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d028      	beq.n	800bcba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc6c:	4a10      	ldr	r2, [pc, #64]	@ (800bcb0 <UART_SetConfig+0x5c4>)
 800bc6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc72:	461a      	mov	r2, r3
 800bc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc76:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	085b      	lsrs	r3, r3, #1
 800bc80:	441a      	add	r2, r3
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc8c:	6a3b      	ldr	r3, [r7, #32]
 800bc8e:	2b0f      	cmp	r3, #15
 800bc90:	d910      	bls.n	800bcb4 <UART_SetConfig+0x5c8>
 800bc92:	6a3b      	ldr	r3, [r7, #32]
 800bc94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc98:	d20c      	bcs.n	800bcb4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc9a:	6a3b      	ldr	r3, [r7, #32]
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	60da      	str	r2, [r3, #12]
 800bca4:	e009      	b.n	800bcba <UART_SetConfig+0x5ce>
 800bca6:	bf00      	nop
 800bca8:	40008000 	.word	0x40008000
 800bcac:	00f42400 	.word	0x00f42400
 800bcb0:	0800d548 	.word	0x0800d548
      }
      else
      {
        ret = HAL_ERROR;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	2200      	movs	r2, #0
 800bcce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bcd6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3730      	adds	r7, #48	@ 0x30
 800bcde:	46bd      	mov	sp, r7
 800bce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bce4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcf0:	f003 0308 	and.w	r3, r3, #8
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00a      	beq.n	800bd0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	430a      	orrs	r2, r1
 800bd0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd12:	f003 0301 	and.w	r3, r3, #1
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d00a      	beq.n	800bd30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	430a      	orrs	r2, r1
 800bd2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd34:	f003 0302 	and.w	r3, r3, #2
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00a      	beq.n	800bd52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	430a      	orrs	r2, r1
 800bd50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd56:	f003 0304 	and.w	r3, r3, #4
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d00a      	beq.n	800bd74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	430a      	orrs	r2, r1
 800bd72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd78:	f003 0310 	and.w	r3, r3, #16
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00a      	beq.n	800bd96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	430a      	orrs	r2, r1
 800bd94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd9a:	f003 0320 	and.w	r3, r3, #32
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00a      	beq.n	800bdb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	430a      	orrs	r2, r1
 800bdb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d01a      	beq.n	800bdfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	430a      	orrs	r2, r1
 800bdd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bde2:	d10a      	bne.n	800bdfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	430a      	orrs	r2, r1
 800bdf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be02:	2b00      	cmp	r3, #0
 800be04:	d00a      	beq.n	800be1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	430a      	orrs	r2, r1
 800be1a:	605a      	str	r2, [r3, #4]
  }
}
 800be1c:	bf00      	nop
 800be1e:	370c      	adds	r7, #12
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b098      	sub	sp, #96	@ 0x60
 800be2c:	af02      	add	r7, sp, #8
 800be2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be38:	f7f9 fc00 	bl	800563c <HAL_GetTick>
 800be3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f003 0308 	and.w	r3, r3, #8
 800be48:	2b08      	cmp	r3, #8
 800be4a:	d12f      	bne.n	800beac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be50:	9300      	str	r3, [sp, #0]
 800be52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be54:	2200      	movs	r2, #0
 800be56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 f88e 	bl	800bf7c <UART_WaitOnFlagUntilTimeout>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d022      	beq.n	800beac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be6e:	e853 3f00 	ldrex	r3, [r3]
 800be72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be7a:	653b      	str	r3, [r7, #80]	@ 0x50
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	461a      	mov	r2, r3
 800be82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be84:	647b      	str	r3, [r7, #68]	@ 0x44
 800be86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be8c:	e841 2300 	strex	r3, r2, [r1]
 800be90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be94:	2b00      	cmp	r3, #0
 800be96:	d1e6      	bne.n	800be66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2220      	movs	r2, #32
 800be9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bea8:	2303      	movs	r3, #3
 800beaa:	e063      	b.n	800bf74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f003 0304 	and.w	r3, r3, #4
 800beb6:	2b04      	cmp	r3, #4
 800beb8:	d149      	bne.n	800bf4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800beba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bebe:	9300      	str	r3, [sp, #0]
 800bec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bec2:	2200      	movs	r2, #0
 800bec4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 f857 	bl	800bf7c <UART_WaitOnFlagUntilTimeout>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d03c      	beq.n	800bf4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bedc:	e853 3f00 	ldrex	r3, [r3]
 800bee0:	623b      	str	r3, [r7, #32]
   return(result);
 800bee2:	6a3b      	ldr	r3, [r7, #32]
 800bee4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	461a      	mov	r2, r3
 800bef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bef2:	633b      	str	r3, [r7, #48]	@ 0x30
 800bef4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800befa:	e841 2300 	strex	r3, r2, [r1]
 800befe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bf00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d1e6      	bne.n	800bed4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	3308      	adds	r3, #8
 800bf0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	e853 3f00 	ldrex	r3, [r3]
 800bf14:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f023 0301 	bic.w	r3, r3, #1
 800bf1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	3308      	adds	r3, #8
 800bf24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf26:	61fa      	str	r2, [r7, #28]
 800bf28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2a:	69b9      	ldr	r1, [r7, #24]
 800bf2c:	69fa      	ldr	r2, [r7, #28]
 800bf2e:	e841 2300 	strex	r3, r2, [r1]
 800bf32:	617b      	str	r3, [r7, #20]
   return(result);
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1e5      	bne.n	800bf06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2220      	movs	r2, #32
 800bf3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2200      	movs	r2, #0
 800bf46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf4a:	2303      	movs	r3, #3
 800bf4c:	e012      	b.n	800bf74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2220      	movs	r2, #32
 800bf52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2220      	movs	r2, #32
 800bf5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf72:	2300      	movs	r3, #0
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3758      	adds	r7, #88	@ 0x58
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	603b      	str	r3, [r7, #0]
 800bf88:	4613      	mov	r3, r2
 800bf8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf8c:	e04f      	b.n	800c02e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf94:	d04b      	beq.n	800c02e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf96:	f7f9 fb51 	bl	800563c <HAL_GetTick>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	1ad3      	subs	r3, r2, r3
 800bfa0:	69ba      	ldr	r2, [r7, #24]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d302      	bcc.n	800bfac <UART_WaitOnFlagUntilTimeout+0x30>
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d101      	bne.n	800bfb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bfac:	2303      	movs	r3, #3
 800bfae:	e04e      	b.n	800c04e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f003 0304 	and.w	r3, r3, #4
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d037      	beq.n	800c02e <UART_WaitOnFlagUntilTimeout+0xb2>
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	2b80      	cmp	r3, #128	@ 0x80
 800bfc2:	d034      	beq.n	800c02e <UART_WaitOnFlagUntilTimeout+0xb2>
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	2b40      	cmp	r3, #64	@ 0x40
 800bfc8:	d031      	beq.n	800c02e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	69db      	ldr	r3, [r3, #28]
 800bfd0:	f003 0308 	and.w	r3, r3, #8
 800bfd4:	2b08      	cmp	r3, #8
 800bfd6:	d110      	bne.n	800bffa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	2208      	movs	r2, #8
 800bfde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bfe0:	68f8      	ldr	r0, [r7, #12]
 800bfe2:	f000 f920 	bl	800c226 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2208      	movs	r2, #8
 800bfea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2200      	movs	r2, #0
 800bff2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bff6:	2301      	movs	r3, #1
 800bff8:	e029      	b.n	800c04e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	69db      	ldr	r3, [r3, #28]
 800c000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c004:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c008:	d111      	bne.n	800c02e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c012:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f000 f906 	bl	800c226 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2220      	movs	r2, #32
 800c01e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2200      	movs	r2, #0
 800c026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c02a:	2303      	movs	r3, #3
 800c02c:	e00f      	b.n	800c04e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	69da      	ldr	r2, [r3, #28]
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	4013      	ands	r3, r2
 800c038:	68ba      	ldr	r2, [r7, #8]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	bf0c      	ite	eq
 800c03e:	2301      	moveq	r3, #1
 800c040:	2300      	movne	r3, #0
 800c042:	b2db      	uxtb	r3, r3
 800c044:	461a      	mov	r2, r3
 800c046:	79fb      	ldrb	r3, [r7, #7]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d0a0      	beq.n	800bf8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c04c:	2300      	movs	r3, #0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
	...

0800c058 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b096      	sub	sp, #88	@ 0x58
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	4613      	mov	r3, r2
 800c064:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	68ba      	ldr	r2, [r7, #8]
 800c06a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	88fa      	ldrh	r2, [r7, #6]
 800c070:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2200      	movs	r2, #0
 800c078:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2222      	movs	r2, #34	@ 0x22
 800c080:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d02d      	beq.n	800c0ea <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c094:	4a40      	ldr	r2, [pc, #256]	@ (800c198 <UART_Start_Receive_DMA+0x140>)
 800c096:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c09e:	4a3f      	ldr	r2, [pc, #252]	@ (800c19c <UART_Start_Receive_DMA+0x144>)
 800c0a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0a8:	4a3d      	ldr	r2, [pc, #244]	@ (800c1a0 <UART_Start_Receive_DMA+0x148>)
 800c0aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	3324      	adds	r3, #36	@ 0x24
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	88fb      	ldrh	r3, [r7, #6]
 800c0cc:	f7fb f800 	bl	80070d0 <HAL_DMA_Start_IT>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d009      	beq.n	800c0ea <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2210      	movs	r2, #16
 800c0da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2220      	movs	r2, #32
 800c0e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e051      	b.n	800c18e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	691b      	ldr	r3, [r3, #16]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d018      	beq.n	800c124 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0fa:	e853 3f00 	ldrex	r3, [r3]
 800c0fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c106:	657b      	str	r3, [r7, #84]	@ 0x54
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	461a      	mov	r2, r3
 800c10e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c110:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c112:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c114:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c116:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c118:	e841 2300 	strex	r3, r2, [r1]
 800c11c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c11e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c120:	2b00      	cmp	r3, #0
 800c122:	d1e6      	bne.n	800c0f2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	3308      	adds	r3, #8
 800c12a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c12e:	e853 3f00 	ldrex	r3, [r3]
 800c132:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c136:	f043 0301 	orr.w	r3, r3, #1
 800c13a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	3308      	adds	r3, #8
 800c142:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c144:	637a      	str	r2, [r7, #52]	@ 0x34
 800c146:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c148:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c14a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c14c:	e841 2300 	strex	r3, r2, [r1]
 800c150:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c154:	2b00      	cmp	r3, #0
 800c156:	d1e5      	bne.n	800c124 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	3308      	adds	r3, #8
 800c15e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	e853 3f00 	ldrex	r3, [r3]
 800c166:	613b      	str	r3, [r7, #16]
   return(result);
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c16e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	3308      	adds	r3, #8
 800c176:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c178:	623a      	str	r2, [r7, #32]
 800c17a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c17c:	69f9      	ldr	r1, [r7, #28]
 800c17e:	6a3a      	ldr	r2, [r7, #32]
 800c180:	e841 2300 	strex	r3, r2, [r1]
 800c184:	61bb      	str	r3, [r7, #24]
   return(result);
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d1e5      	bne.n	800c158 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3758      	adds	r7, #88	@ 0x58
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	0800c3b1 	.word	0x0800c3b1
 800c19c:	0800c4e5 	.word	0x0800c4e5
 800c1a0:	0800c52b 	.word	0x0800c52b

0800c1a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b08f      	sub	sp, #60	@ 0x3c
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b2:	6a3b      	ldr	r3, [r7, #32]
 800c1b4:	e853 3f00 	ldrex	r3, [r3]
 800c1b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c1ba:	69fb      	ldr	r3, [r7, #28]
 800c1bc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c1c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c1cc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c1d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1d2:	e841 2300 	strex	r3, r2, [r1]
 800c1d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d1e6      	bne.n	800c1ac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	3308      	adds	r3, #8
 800c1e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	e853 3f00 	ldrex	r3, [r3]
 800c1ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c1f4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	3308      	adds	r3, #8
 800c1fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1fe:	61ba      	str	r2, [r7, #24]
 800c200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c202:	6979      	ldr	r1, [r7, #20]
 800c204:	69ba      	ldr	r2, [r7, #24]
 800c206:	e841 2300 	strex	r3, r2, [r1]
 800c20a:	613b      	str	r3, [r7, #16]
   return(result);
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d1e5      	bne.n	800c1de <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2220      	movs	r2, #32
 800c216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c21a:	bf00      	nop
 800c21c:	373c      	adds	r7, #60	@ 0x3c
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr

0800c226 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c226:	b480      	push	{r7}
 800c228:	b095      	sub	sp, #84	@ 0x54
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c236:	e853 3f00 	ldrex	r3, [r3]
 800c23a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c23e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c242:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	461a      	mov	r2, r3
 800c24a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c24c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c24e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c250:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c252:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c254:	e841 2300 	strex	r3, r2, [r1]
 800c258:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d1e6      	bne.n	800c22e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	3308      	adds	r3, #8
 800c266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c268:	6a3b      	ldr	r3, [r7, #32]
 800c26a:	e853 3f00 	ldrex	r3, [r3]
 800c26e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c276:	f023 0301 	bic.w	r3, r3, #1
 800c27a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	3308      	adds	r3, #8
 800c282:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c284:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c286:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c288:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c28a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c28c:	e841 2300 	strex	r3, r2, [r1]
 800c290:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c294:	2b00      	cmp	r3, #0
 800c296:	d1e3      	bne.n	800c260 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d118      	bne.n	800c2d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	e853 3f00 	ldrex	r3, [r3]
 800c2ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	f023 0310 	bic.w	r3, r3, #16
 800c2b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2be:	61bb      	str	r3, [r7, #24]
 800c2c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c2:	6979      	ldr	r1, [r7, #20]
 800c2c4:	69ba      	ldr	r2, [r7, #24]
 800c2c6:	e841 2300 	strex	r3, r2, [r1]
 800c2ca:	613b      	str	r3, [r7, #16]
   return(result);
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1e6      	bne.n	800c2a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2220      	movs	r2, #32
 800c2d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c2e6:	bf00      	nop
 800c2e8:	3754      	adds	r7, #84	@ 0x54
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr

0800c2f2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b090      	sub	sp, #64	@ 0x40
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f003 0320 	and.w	r3, r3, #32
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d137      	bne.n	800c37e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c30e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c310:	2200      	movs	r2, #0
 800c312:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	3308      	adds	r3, #8
 800c31c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c320:	e853 3f00 	ldrex	r3, [r3]
 800c324:	623b      	str	r3, [r7, #32]
   return(result);
 800c326:	6a3b      	ldr	r3, [r7, #32]
 800c328:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c32c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c32e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	3308      	adds	r3, #8
 800c334:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c336:	633a      	str	r2, [r7, #48]	@ 0x30
 800c338:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c33a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c33c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c33e:	e841 2300 	strex	r3, r2, [r1]
 800c342:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1e5      	bne.n	800c316 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c34a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	e853 3f00 	ldrex	r3, [r3]
 800c356:	60fb      	str	r3, [r7, #12]
   return(result);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c35e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	461a      	mov	r2, r3
 800c366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c368:	61fb      	str	r3, [r7, #28]
 800c36a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c36c:	69b9      	ldr	r1, [r7, #24]
 800c36e:	69fa      	ldr	r2, [r7, #28]
 800c370:	e841 2300 	strex	r3, r2, [r1]
 800c374:	617b      	str	r3, [r7, #20]
   return(result);
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1e6      	bne.n	800c34a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c37c:	e004      	b.n	800c388 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800c37e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c380:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c384:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c386:	4798      	blx	r3
}
 800c388:	bf00      	nop
 800c38a:	3740      	adds	r7, #64	@ 0x40
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c39c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3a8:	bf00      	nop
 800c3aa:	3710      	adds	r7, #16
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b09c      	sub	sp, #112	@ 0x70
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3bc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f003 0320 	and.w	r3, r3, #32
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d171      	bne.n	800c4b0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c3cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3dc:	e853 3f00 	ldrex	r3, [r3]
 800c3e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c3e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c3e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c3ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c3f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c3f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c3f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c3fa:	e841 2300 	strex	r3, r2, [r1]
 800c3fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1e6      	bne.n	800c3d4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c406:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	3308      	adds	r3, #8
 800c40c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c410:	e853 3f00 	ldrex	r3, [r3]
 800c414:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c418:	f023 0301 	bic.w	r3, r3, #1
 800c41c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c41e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	3308      	adds	r3, #8
 800c424:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c426:	647a      	str	r2, [r7, #68]	@ 0x44
 800c428:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c42c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c42e:	e841 2300 	strex	r3, r2, [r1]
 800c432:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c436:	2b00      	cmp	r3, #0
 800c438:	d1e5      	bne.n	800c406 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c43a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	3308      	adds	r3, #8
 800c440:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c444:	e853 3f00 	ldrex	r3, [r3]
 800c448:	623b      	str	r3, [r7, #32]
   return(result);
 800c44a:	6a3b      	ldr	r3, [r7, #32]
 800c44c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c450:	663b      	str	r3, [r7, #96]	@ 0x60
 800c452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	3308      	adds	r3, #8
 800c458:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c45a:	633a      	str	r2, [r7, #48]	@ 0x30
 800c45c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c45e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c462:	e841 2300 	strex	r3, r2, [r1]
 800c466:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d1e5      	bne.n	800c43a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c46e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c470:	2220      	movs	r2, #32
 800c472:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c478:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d118      	bne.n	800c4b0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c47e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	e853 3f00 	ldrex	r3, [r3]
 800c48a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f023 0310 	bic.w	r3, r3, #16
 800c492:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	461a      	mov	r2, r3
 800c49a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c49c:	61fb      	str	r3, [r7, #28]
 800c49e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a0:	69b9      	ldr	r1, [r7, #24]
 800c4a2:	69fa      	ldr	r2, [r7, #28]
 800c4a4:	e841 2300 	strex	r3, r2, [r1]
 800c4a8:	617b      	str	r3, [r7, #20]
   return(result);
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d1e6      	bne.n	800c47e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c4b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d109      	bne.n	800c4d2 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800c4be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c4c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c4c6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c4ca:	4611      	mov	r1, r2
 800c4cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c4ce:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c4d0:	e004      	b.n	800c4dc <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800c4d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c4d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c4da:	4798      	blx	r3
}
 800c4dc:	bf00      	nop
 800c4de:	3770      	adds	r7, #112	@ 0x70
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4f0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d10b      	bne.n	800c518 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c506:	68fa      	ldr	r2, [r7, #12]
 800c508:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c50c:	0852      	lsrs	r2, r2, #1
 800c50e:	b292      	uxth	r2, r2
 800c510:	4611      	mov	r1, r2
 800c512:	68f8      	ldr	r0, [r7, #12]
 800c514:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c516:	e004      	b.n	800c522 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c51e:	68f8      	ldr	r0, [r7, #12]
 800c520:	4798      	blx	r3
}
 800c522:	bf00      	nop
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b086      	sub	sp, #24
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c536:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c53e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c546:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c552:	2b80      	cmp	r3, #128	@ 0x80
 800c554:	d109      	bne.n	800c56a <UART_DMAError+0x40>
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	2b21      	cmp	r3, #33	@ 0x21
 800c55a:	d106      	bne.n	800c56a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	2200      	movs	r2, #0
 800c560:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c564:	6978      	ldr	r0, [r7, #20]
 800c566:	f7ff fe1d 	bl	800c1a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c574:	2b40      	cmp	r3, #64	@ 0x40
 800c576:	d109      	bne.n	800c58c <UART_DMAError+0x62>
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2b22      	cmp	r3, #34	@ 0x22
 800c57c:	d106      	bne.n	800c58c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	2200      	movs	r2, #0
 800c582:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c586:	6978      	ldr	r0, [r7, #20]
 800c588:	f7ff fe4d 	bl	800c226 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c592:	f043 0210 	orr.w	r2, r3, #16
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c5a2:	6978      	ldr	r0, [r7, #20]
 800c5a4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5a6:	bf00      	nop
 800c5a8:	3718      	adds	r7, #24
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b084      	sub	sp, #16
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5d6:	bf00      	nop
 800c5d8:	3710      	adds	r7, #16
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}

0800c5de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b088      	sub	sp, #32
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	e853 3f00 	ldrex	r3, [r3]
 800c5f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5fa:	61fb      	str	r3, [r7, #28]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	461a      	mov	r2, r3
 800c602:	69fb      	ldr	r3, [r7, #28]
 800c604:	61bb      	str	r3, [r7, #24]
 800c606:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c608:	6979      	ldr	r1, [r7, #20]
 800c60a:	69ba      	ldr	r2, [r7, #24]
 800c60c:	e841 2300 	strex	r3, r2, [r1]
 800c610:	613b      	str	r3, [r7, #16]
   return(result);
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d1e6      	bne.n	800c5e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2220      	movs	r2, #32
 800c61c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2200      	movs	r2, #0
 800c624:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c630:	bf00      	nop
 800c632:	3720      	adds	r7, #32
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c640:	bf00      	nop
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c654:	bf00      	nop
 800c656:	370c      	adds	r7, #12
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr

0800c660 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c660:	b480      	push	{r7}
 800c662:	b083      	sub	sp, #12
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c668:	bf00      	nop
 800c66a:	370c      	adds	r7, #12
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr

0800c674 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c674:	b480      	push	{r7}
 800c676:	b085      	sub	sp, #20
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c682:	2b01      	cmp	r3, #1
 800c684:	d101      	bne.n	800c68a <HAL_UARTEx_DisableFifoMode+0x16>
 800c686:	2302      	movs	r3, #2
 800c688:	e027      	b.n	800c6da <HAL_UARTEx_DisableFifoMode+0x66>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2201      	movs	r2, #1
 800c68e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2224      	movs	r2, #36	@ 0x24
 800c696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	681a      	ldr	r2, [r3, #0]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f022 0201 	bic.w	r2, r2, #1
 800c6b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c6b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2220      	movs	r2, #32
 800c6cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c6d8:	2300      	movs	r3, #0
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3714      	adds	r7, #20
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr

0800c6e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b084      	sub	sp, #16
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
 800c6ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d101      	bne.n	800c6fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c6fa:	2302      	movs	r3, #2
 800c6fc:	e02d      	b.n	800c75a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2201      	movs	r2, #1
 800c702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2224      	movs	r2, #36	@ 0x24
 800c70a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f022 0201 	bic.w	r2, r2, #1
 800c724:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	689b      	ldr	r3, [r3, #8]
 800c72c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	683a      	ldr	r2, [r7, #0]
 800c736:	430a      	orrs	r2, r1
 800c738:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 f850 	bl	800c7e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2220      	movs	r2, #32
 800c74c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2200      	movs	r2, #0
 800c754:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c758:	2300      	movs	r3, #0
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3710      	adds	r7, #16
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}

0800c762 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c762:	b580      	push	{r7, lr}
 800c764:	b084      	sub	sp, #16
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
 800c76a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c772:	2b01      	cmp	r3, #1
 800c774:	d101      	bne.n	800c77a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c776:	2302      	movs	r3, #2
 800c778:	e02d      	b.n	800c7d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2201      	movs	r2, #1
 800c77e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2224      	movs	r2, #36	@ 0x24
 800c786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f022 0201 	bic.w	r2, r2, #1
 800c7a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	689b      	ldr	r3, [r3, #8]
 800c7a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	683a      	ldr	r2, [r7, #0]
 800c7b2:	430a      	orrs	r2, r1
 800c7b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 f812 	bl	800c7e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	68fa      	ldr	r2, [r7, #12]
 800c7c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2220      	movs	r2, #32
 800c7c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7d4:	2300      	movs	r3, #0
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3710      	adds	r7, #16
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
	...

0800c7e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b085      	sub	sp, #20
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d108      	bne.n	800c802 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c800:	e031      	b.n	800c866 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c802:	2308      	movs	r3, #8
 800c804:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c806:	2308      	movs	r3, #8
 800c808:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	689b      	ldr	r3, [r3, #8]
 800c810:	0e5b      	lsrs	r3, r3, #25
 800c812:	b2db      	uxtb	r3, r3
 800c814:	f003 0307 	and.w	r3, r3, #7
 800c818:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	0f5b      	lsrs	r3, r3, #29
 800c822:	b2db      	uxtb	r3, r3
 800c824:	f003 0307 	and.w	r3, r3, #7
 800c828:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c82a:	7bbb      	ldrb	r3, [r7, #14]
 800c82c:	7b3a      	ldrb	r2, [r7, #12]
 800c82e:	4911      	ldr	r1, [pc, #68]	@ (800c874 <UARTEx_SetNbDataToProcess+0x94>)
 800c830:	5c8a      	ldrb	r2, [r1, r2]
 800c832:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c836:	7b3a      	ldrb	r2, [r7, #12]
 800c838:	490f      	ldr	r1, [pc, #60]	@ (800c878 <UARTEx_SetNbDataToProcess+0x98>)
 800c83a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c83c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c840:	b29a      	uxth	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c848:	7bfb      	ldrb	r3, [r7, #15]
 800c84a:	7b7a      	ldrb	r2, [r7, #13]
 800c84c:	4909      	ldr	r1, [pc, #36]	@ (800c874 <UARTEx_SetNbDataToProcess+0x94>)
 800c84e:	5c8a      	ldrb	r2, [r1, r2]
 800c850:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c854:	7b7a      	ldrb	r2, [r7, #13]
 800c856:	4908      	ldr	r1, [pc, #32]	@ (800c878 <UARTEx_SetNbDataToProcess+0x98>)
 800c858:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c85a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c85e:	b29a      	uxth	r2, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c866:	bf00      	nop
 800c868:	3714      	adds	r7, #20
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr
 800c872:	bf00      	nop
 800c874:	0800d560 	.word	0x0800d560
 800c878:	0800d568 	.word	0x0800d568

0800c87c <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	ed93 7a06 	vldr	s14, [r3, #24]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	edd3 7a07 	vldr	s15, [r3, #28]
 800c892:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	edd3 7a08 	vldr	s15, [r3, #32]
 800c89c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	edd3 7a06 	vldr	s15, [r3, #24]
 800c8ac:	eeb1 7a67 	vneg.f32	s14, s15
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	edd3 7a08 	vldr	s15, [r3, #32]
 800c8b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c8ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6a1a      	ldr	r2, [r3, #32]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d006      	beq.n	800c8e0 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	330c      	adds	r3, #12
 800c8d6:	220c      	movs	r2, #12
 800c8d8:	2100      	movs	r1, #0
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f000 fcc4 	bl	800d268 <memset>
  }

}
 800c8e0:	bf00      	nop
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b08b      	sub	sp, #44	@ 0x2c
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	881b      	ldrh	r3, [r3, #0]
 800c90a:	461a      	mov	r2, r3
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	885b      	ldrh	r3, [r3, #2]
 800c910:	fb02 f303 	mul.w	r3, r2, r3
 800c914:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800c91a:	e013      	b.n	800c944 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800c91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91e:	1d1a      	adds	r2, r3, #4
 800c920:	627a      	str	r2, [r7, #36]	@ 0x24
 800c922:	ed93 7a00 	vldr	s14, [r3]
 800c926:	6a3b      	ldr	r3, [r7, #32]
 800c928:	1d1a      	adds	r2, r3, #4
 800c92a:	623a      	str	r2, [r7, #32]
 800c92c:	edd3 7a00 	vldr	s15, [r3]
 800c930:	69fb      	ldr	r3, [r7, #28]
 800c932:	1d1a      	adds	r2, r3, #4
 800c934:	61fa      	str	r2, [r7, #28]
 800c936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c93a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	3b01      	subs	r3, #1
 800c942:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1e8      	bne.n	800c91c <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c94a:	2300      	movs	r3, #0
 800c94c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800c94e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c952:	4618      	mov	r0, r3
 800c954:	372c      	adds	r7, #44	@ 0x2c
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr

0800c95e <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800c95e:	b480      	push	{r7}
 800c960:	b085      	sub	sp, #20
 800c962:	af00      	add	r7, sp, #0
 800c964:	60f8      	str	r0, [r7, #12]
 800c966:	607b      	str	r3, [r7, #4]
 800c968:	460b      	mov	r3, r1
 800c96a:	817b      	strh	r3, [r7, #10]
 800c96c:	4613      	mov	r3, r2
 800c96e:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	897a      	ldrh	r2, [r7, #10]
 800c974:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	893a      	ldrh	r2, [r7, #8]
 800c97a:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	605a      	str	r2, [r3, #4]
}
 800c982:	bf00      	nop
 800c984:	3714      	adds	r7, #20
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr

0800c98e <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800c98e:	b480      	push	{r7}
 800c990:	b0bb      	sub	sp, #236	@ 0xec
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	881b      	ldrh	r3, [r3, #0]
 800c9a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	885b      	ldrh	r3, [r3, #2]
 800c9ae:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800c9b0:	f04f 0300 	mov.w	r3, #0
 800c9b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c9b8:	f04f 0300 	mov.w	r3, #0
 800c9bc:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800c9be:	2300      	movs	r3, #0
 800c9c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800c9c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800c9ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c9cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800c9d0:	e03b      	b.n	800ca4a <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800c9d2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c9d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c9d8:	1ad3      	subs	r3, r2, r3
 800c9da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c9de:	e00c      	b.n	800c9fa <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800c9e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9e4:	1d1a      	adds	r2, r3, #4
 800c9e6:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800c9ea:	f04f 0200 	mov.w	r2, #0
 800c9ee:	601a      	str	r2, [r3, #0]
        j--;
 800c9f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c9f4:	3b01      	subs	r3, #1
 800c9f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c9fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d1ee      	bne.n	800c9e0 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800ca02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca06:	1d1a      	adds	r2, r3, #4
 800ca08:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ca0c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ca10:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800ca12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ca16:	3b01      	subs	r3, #1
 800ca18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ca1c:	e00c      	b.n	800ca38 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800ca1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca22:	1d1a      	adds	r2, r3, #4
 800ca24:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ca28:	f04f 0200 	mov.w	r2, #0
 800ca2c:	601a      	str	r2, [r3, #0]
        j--;
 800ca2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ca32:	3b01      	subs	r3, #1
 800ca34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ca38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d1ee      	bne.n	800ca1e <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800ca40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ca44:	3b01      	subs	r3, #1
 800ca46:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800ca4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d1bf      	bne.n	800c9d2 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800ca52:	2300      	movs	r3, #0
 800ca54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ca58:	e2c7      	b.n	800cfea <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800ca5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca5e:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	685a      	ldr	r2, [r3, #4]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	885b      	ldrh	r3, [r3, #2]
 800ca68:	3301      	adds	r3, #1
 800ca6a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800ca6e:	fb01 f303 	mul.w	r3, r1, r3
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	4413      	add	r3, r2
 800ca76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800ca7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800ca84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca88:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800ca8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca90:	3301      	adds	r3, #1
 800ca92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ca96:	e02c      	b.n	800caf2 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	685a      	ldr	r2, [r3, #4]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	885b      	ldrh	r3, [r3, #2]
 800caa0:	4619      	mov	r1, r3
 800caa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800caa6:	fb03 f101 	mul.w	r1, r3, r1
 800caaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800caae:	440b      	add	r3, r1
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	4413      	add	r3, r2
 800cab4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800cab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800cac0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800cac4:	eeb0 7ae7 	vabs.f32	s14, s15
 800cac8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cacc:	eef0 7ae7 	vabs.f32	s15, s15
 800cad0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cad8:	dd06      	ble.n	800cae8 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800cada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cade:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800cae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cae4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800cae8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800caec:	3301      	adds	r3, #1
 800caee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800caf2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800caf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d3cd      	bcc.n	800ca98 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800cafc:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cb00:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb08:	f000 809b 	beq.w	800cc42 <arm_mat_inverse_f32+0x2b4>
 800cb0c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cb10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cb14:	429a      	cmp	r2, r3
 800cb16:	f000 8094 	beq.w	800cc42 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	885b      	ldrh	r3, [r3, #2]
 800cb2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cb36:	1ad3      	subs	r3, r2, r3
 800cb38:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb3c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cb3e:	fb03 f202 	mul.w	r2, r3, r2
 800cb42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cb46:	4413      	add	r3, r2
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800cb4e:	4413      	add	r3, r2
 800cb50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cb54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cb5a:	fb03 f202 	mul.w	r2, r3, r2
 800cb5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cb62:	4413      	add	r3, r2
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cb6a:	4413      	add	r3, r2
 800cb6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cb70:	2300      	movs	r3, #0
 800cb72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cb76:	e018      	b.n	800cbaa <arm_mat_inverse_f32+0x21c>
 800cb78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cb80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cb84:	1d1a      	adds	r2, r3, #4
 800cb86:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800cb8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cb8e:	6812      	ldr	r2, [r2, #0]
 800cb90:	601a      	str	r2, [r3, #0]
 800cb92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cb96:	1d1a      	adds	r2, r3, #4
 800cb98:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800cb9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb9e:	601a      	str	r2, [r3, #0]
 800cba0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800cba4:	3301      	adds	r3, #1
 800cba6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cbaa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800cbae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	dbe1      	blt.n	800cb78 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	885b      	ldrh	r3, [r3, #2]
 800cbc8:	647b      	str	r3, [r7, #68]	@ 0x44
 800cbca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbcc:	643b      	str	r3, [r7, #64]	@ 0x40
 800cbce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbd0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cbd2:	fb02 f303 	mul.w	r3, r2, r3
 800cbd6:	009b      	lsls	r3, r3, #2
 800cbd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cbdc:	4413      	add	r3, r2
 800cbde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cbe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbe4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cbe8:	fb02 f303 	mul.w	r3, r2, r3
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cbf2:	4413      	add	r3, r2
 800cbf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cbfe:	e018      	b.n	800cc32 <arm_mat_inverse_f32+0x2a4>
 800cc00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc0c:	1d1a      	adds	r2, r3, #4
 800cc0e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800cc12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cc16:	6812      	ldr	r2, [r2, #0]
 800cc18:	601a      	str	r2, [r3, #0]
 800cc1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cc1e:	1d1a      	adds	r2, r3, #4
 800cc20:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cc24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cc26:	601a      	str	r2, [r3, #0]
 800cc28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cc32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cc36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	dbe1      	blt.n	800cc00 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800cc42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d009      	beq.n	800cc5e <arm_mat_inverse_f32+0x2d0>
 800cc4a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cc4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cc52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc56:	d102      	bne.n	800cc5e <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800cc58:	f06f 0304 	mvn.w	r3, #4
 800cc5c:	e208      	b.n	800d070 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800cc5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc62:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800cc66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc6a:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	885b      	ldrh	r3, [r3, #2]
 800cc7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cc82:	1ad3      	subs	r3, r2, r3
 800cc84:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc8a:	fb03 f202 	mul.w	r2, r3, r2
 800cc8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cc92:	4413      	add	r3, r2
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800cc9a:	4413      	add	r3, r2
 800cc9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cca0:	2300      	movs	r3, #0
 800cca2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cca6:	e011      	b.n	800cccc <arm_mat_inverse_f32+0x33e>
 800cca8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ccac:	1d1a      	adds	r2, r3, #4
 800ccae:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800ccb2:	ed93 7a00 	vldr	s14, [r3]
 800ccb6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ccba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccbe:	edc3 7a00 	vstr	s15, [r3]
 800ccc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cccc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800ccd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	dbe8      	blt.n	800cca8 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	885b      	ldrh	r3, [r3, #2]
 800cce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cce6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ccec:	fb02 f303 	mul.w	r3, r2, r3
 800ccf0:	009b      	lsls	r3, r3, #2
 800ccf2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ccf6:	4413      	add	r3, r2
 800ccf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cd02:	e011      	b.n	800cd28 <arm_mat_inverse_f32+0x39a>
 800cd04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cd08:	1d1a      	adds	r2, r3, #4
 800cd0a:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800cd0e:	ed93 7a00 	vldr	s14, [r3]
 800cd12:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cd16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd1a:	edc3 7a00 	vstr	s15, [r3]
 800cd1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cd22:	3301      	adds	r3, #1
 800cd24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cd28:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800cd2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	dbe8      	blt.n	800cd04 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800cd32:	2300      	movs	r3, #0
 800cd34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800cd38:	e0ae      	b.n	800ce98 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	685a      	ldr	r2, [r3, #4]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	885b      	ldrh	r3, [r3, #2]
 800cd42:	4619      	mov	r1, r3
 800cd44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cd48:	fb03 f101 	mul.w	r1, r3, r1
 800cd4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cd50:	440b      	add	r3, r1
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	4413      	add	r3, r2
 800cd56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800cd5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	685b      	ldr	r3, [r3, #4]
 800cd70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	885b      	ldrh	r3, [r3, #2]
 800cd78:	617b      	str	r3, [r7, #20]
 800cd7a:	697a      	ldr	r2, [r7, #20]
 800cd7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cd80:	1ad3      	subs	r3, r2, r3
 800cd82:	613b      	str	r3, [r7, #16]
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cd8a:	fb03 f202 	mul.w	r2, r3, r2
 800cd8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cd92:	4413      	add	r3, r2
 800cd94:	009b      	lsls	r3, r3, #2
 800cd96:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800cd9a:	4413      	add	r3, r2
 800cd9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cda4:	fb03 f202 	mul.w	r2, r3, r2
 800cda8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cdac:	4413      	add	r3, r2
 800cdae:	009b      	lsls	r3, r3, #2
 800cdb0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800cdb4:	4413      	add	r3, r2
 800cdb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cdba:	2300      	movs	r3, #0
 800cdbc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cdc0:	e01a      	b.n	800cdf8 <arm_mat_inverse_f32+0x46a>
 800cdc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cdc6:	1d1a      	adds	r2, r3, #4
 800cdc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800cdcc:	ed93 7a00 	vldr	s14, [r3]
 800cdd0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cdd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cddc:	1d1a      	adds	r2, r3, #4
 800cdde:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800cde2:	ed93 7a00 	vldr	s14, [r3]
 800cde6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdea:	edc3 7a00 	vstr	s15, [r3]
 800cdee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cdf8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	dbdf      	blt.n	800cdc2 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	885b      	ldrh	r3, [r3, #2]
 800ce16:	60fb      	str	r3, [r7, #12]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	60bb      	str	r3, [r7, #8]
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ce22:	fb02 f303 	mul.w	r3, r2, r3
 800ce26:	009b      	lsls	r3, r3, #2
 800ce28:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ce2c:	4413      	add	r3, r2
 800ce2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce36:	fb02 f303 	mul.w	r3, r2, r3
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ce40:	4413      	add	r3, r2
 800ce42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ce46:	2300      	movs	r3, #0
 800ce48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ce4c:	e01a      	b.n	800ce84 <arm_mat_inverse_f32+0x4f6>
 800ce4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ce52:	1d1a      	adds	r2, r3, #4
 800ce54:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ce58:	ed93 7a00 	vldr	s14, [r3]
 800ce5c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ce60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ce68:	1d1a      	adds	r2, r3, #4
 800ce6a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800ce6e:	ed93 7a00 	vldr	s14, [r3]
 800ce72:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce76:	edc3 7a00 	vstr	s15, [r3]
 800ce7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ce7e:	3301      	adds	r3, #1
 800ce80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ce84:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	dbdf      	blt.n	800ce4e <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800ce8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ce92:	3301      	adds	r3, #1
 800ce94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ce98:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ce9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	f4ff af4b 	bcc.w	800cd3a <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800cea4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cea6:	3301      	adds	r3, #1
 800cea8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ceac:	e092      	b.n	800cfd4 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	685a      	ldr	r2, [r3, #4]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	885b      	ldrh	r3, [r3, #2]
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cebc:	fb03 f101 	mul.w	r1, r3, r1
 800cec0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cec4:	440b      	add	r3, r1
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	4413      	add	r3, r2
 800ceca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800cece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	677b      	str	r3, [r7, #116]	@ 0x74
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	885b      	ldrh	r3, [r3, #2]
 800cee8:	627b      	str	r3, [r7, #36]	@ 0x24
 800ceea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ceec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cef0:	1ad3      	subs	r3, r2, r3
 800cef2:	623b      	str	r3, [r7, #32]
 800cef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cefa:	fb03 f202 	mul.w	r2, r3, r2
 800cefe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cf02:	4413      	add	r3, r2
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800cf08:	4413      	add	r3, r2
 800cf0a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cf0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cf10:	fb03 f202 	mul.w	r2, r3, r2
 800cf14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cf18:	4413      	add	r3, r2
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800cf1e:	4413      	add	r3, r2
 800cf20:	677b      	str	r3, [r7, #116]	@ 0x74
 800cf22:	2300      	movs	r3, #0
 800cf24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cf26:	e014      	b.n	800cf52 <arm_mat_inverse_f32+0x5c4>
 800cf28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf2a:	1d1a      	adds	r2, r3, #4
 800cf2c:	677a      	str	r2, [r7, #116]	@ 0x74
 800cf2e:	ed93 7a00 	vldr	s14, [r3]
 800cf32:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cf36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf3c:	1d1a      	adds	r2, r3, #4
 800cf3e:	67ba      	str	r2, [r7, #120]	@ 0x78
 800cf40:	ed93 7a00 	vldr	s14, [r3]
 800cf44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf48:	edc3 7a00 	vstr	s15, [r3]
 800cf4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cf4e:	3301      	adds	r3, #1
 800cf50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cf52:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cf54:	6a3b      	ldr	r3, [r7, #32]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	dbe6      	blt.n	800cf28 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	885b      	ldrh	r3, [r3, #2]
 800cf6a:	61fb      	str	r3, [r7, #28]
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	61bb      	str	r3, [r7, #24]
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cf76:	fb02 f303 	mul.w	r3, r2, r3
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cf7e:	4413      	add	r3, r2
 800cf80:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cf82:	69fb      	ldr	r3, [r7, #28]
 800cf84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cf86:	fb02 f303 	mul.w	r3, r2, r3
 800cf8a:	009b      	lsls	r3, r3, #2
 800cf8c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cf8e:	4413      	add	r3, r2
 800cf90:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cf92:	2300      	movs	r3, #0
 800cf94:	673b      	str	r3, [r7, #112]	@ 0x70
 800cf96:	e014      	b.n	800cfc2 <arm_mat_inverse_f32+0x634>
 800cf98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cf9a:	1d1a      	adds	r2, r3, #4
 800cf9c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800cf9e:	ed93 7a00 	vldr	s14, [r3]
 800cfa2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cfa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cfac:	1d1a      	adds	r2, r3, #4
 800cfae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cfb0:	ed93 7a00 	vldr	s14, [r3]
 800cfb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfb8:	edc3 7a00 	vstr	s15, [r3]
 800cfbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	673b      	str	r3, [r7, #112]	@ 0x70
 800cfc2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	dbe6      	blt.n	800cf98 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800cfca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cfce:	3301      	adds	r3, #1
 800cfd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cfd4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cfd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	f4ff af67 	bcc.w	800ceae <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800cfe0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cfea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cfee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cff0:	429a      	cmp	r2, r3
 800cff2:	f4ff ad32 	bcc.w	800ca5a <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800cff6:	2300      	movs	r3, #0
 800cff8:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800cffc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d000:	2b01      	cmp	r3, #1
 800d002:	d033      	beq.n	800d06c <arm_mat_inverse_f32+0x6de>
 800d004:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d008:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d010:	d12c      	bne.n	800d06c <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800d018:	2300      	movs	r3, #0
 800d01a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d01e:	e010      	b.n	800d042 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800d020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d024:	009b      	lsls	r3, r3, #2
 800d026:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d028:	4413      	add	r3, r2
 800d02a:	edd3 7a00 	vldr	s15, [r3]
 800d02e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d036:	d10d      	bne.n	800d054 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800d038:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d03c:	3301      	adds	r3, #1
 800d03e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d042:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d044:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d046:	fb02 f303 	mul.w	r3, r2, r3
 800d04a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800d04e:	429a      	cmp	r2, r3
 800d050:	d3e6      	bcc.n	800d020 <arm_mat_inverse_f32+0x692>
 800d052:	e000      	b.n	800d056 <arm_mat_inverse_f32+0x6c8>
            break;
 800d054:	bf00      	nop
      }

      if (i == numRows * numCols)
 800d056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d058:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d05a:	fb02 f303 	mul.w	r3, r2, r3
 800d05e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800d062:	429a      	cmp	r2, r3
 800d064:	d102      	bne.n	800d06c <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800d066:	23fb      	movs	r3, #251	@ 0xfb
 800d068:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800d06c:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800d070:	4618      	mov	r0, r3
 800d072:	37ec      	adds	r7, #236	@ 0xec
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b093      	sub	sp, #76	@ 0x4c
 800d080:	af00      	add	r7, sp, #0
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	881b      	ldrh	r3, [r3, #0]
 800d0aa:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	885b      	ldrh	r3, [r3, #2]
 800d0b0:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	885b      	ldrh	r3, [r3, #2]
 800d0b6:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d0bc:	8b7b      	ldrh	r3, [r7, #26]
 800d0be:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800d0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	69fa      	ldr	r2, [r7, #28]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800d0ca:	8b3b      	ldrh	r3, [r7, #24]
 800d0cc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	685b      	ldr	r3, [r3, #4]
 800d0d2:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800d0d4:	f04f 0300 	mov.w	r3, #0
 800d0d8:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800d0da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0dc:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800d0de:	8afb      	ldrh	r3, [r7, #22]
 800d0e0:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800d0e2:	e017      	b.n	800d114 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800d0e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0e6:	1d1a      	adds	r2, r3, #4
 800d0e8:	647a      	str	r2, [r7, #68]	@ 0x44
 800d0ea:	ed93 7a00 	vldr	s14, [r3]
 800d0ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0f0:	edd3 7a00 	vldr	s15, [r3]
 800d0f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0f8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800d0fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d100:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800d104:	8b3b      	ldrh	r3, [r7, #24]
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d10a:	4413      	add	r3, r2
 800d10c:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800d10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d110:	3b01      	subs	r3, #1
 800d112:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800d114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d116:	2b00      	cmp	r3, #0
 800d118:	d1e4      	bne.n	800d0e4 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800d11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d11c:	1d1a      	adds	r2, r3, #4
 800d11e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d120:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d122:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800d124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d126:	3b01      	subs	r3, #1
 800d128:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800d12a:	8b3a      	ldrh	r2, [r7, #24]
 800d12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d12e:	1ad3      	subs	r3, r2, r3
 800d130:	009b      	lsls	r3, r3, #2
 800d132:	6a3a      	ldr	r2, [r7, #32]
 800d134:	4413      	add	r3, r2
 800d136:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800d138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d1ca      	bne.n	800d0d4 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800d13e:	8b3b      	ldrh	r3, [r7, #24]
 800d140:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d142:	4413      	add	r3, r2
 800d144:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800d146:	8afb      	ldrh	r3, [r7, #22]
 800d148:	009b      	lsls	r3, r3, #2
 800d14a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d14c:	4413      	add	r3, r2
 800d14e:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800d150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d152:	3b01      	subs	r3, #1
 800d154:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800d156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d1b1      	bne.n	800d0c0 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d15c:	2300      	movs	r3, #0
 800d15e:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800d160:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800d164:	4618      	mov	r0, r3
 800d166:	374c      	adds	r7, #76	@ 0x4c
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr

0800d170 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d170:	b480      	push	{r7}
 800d172:	b08b      	sub	sp, #44	@ 0x2c
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	881b      	ldrh	r3, [r3, #0]
 800d192:	461a      	mov	r2, r3
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	885b      	ldrh	r3, [r3, #2]
 800d198:	fb02 f303 	mul.w	r3, r2, r3
 800d19c:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800d1a2:	e013      	b.n	800d1cc <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1a6:	1d1a      	adds	r2, r3, #4
 800d1a8:	627a      	str	r2, [r7, #36]	@ 0x24
 800d1aa:	ed93 7a00 	vldr	s14, [r3]
 800d1ae:	6a3b      	ldr	r3, [r7, #32]
 800d1b0:	1d1a      	adds	r2, r3, #4
 800d1b2:	623a      	str	r2, [r7, #32]
 800d1b4:	edd3 7a00 	vldr	s15, [r3]
 800d1b8:	69fb      	ldr	r3, [r7, #28]
 800d1ba:	1d1a      	adds	r2, r3, #4
 800d1bc:	61fa      	str	r2, [r7, #28]
 800d1be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1c2:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	3b01      	subs	r3, #1
 800d1ca:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800d1cc:	69bb      	ldr	r3, [r7, #24]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d1e8      	bne.n	800d1a4 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800d1d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	372c      	adds	r7, #44	@ 0x2c
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e4:	4770      	bx	lr

0800d1e6 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800d1e6:	b480      	push	{r7}
 800d1e8:	b08b      	sub	sp, #44	@ 0x2c
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
 800d1ee:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	881b      	ldrh	r3, [r3, #0]
 800d200:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	885b      	ldrh	r3, [r3, #2]
 800d206:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800d208:	89fb      	ldrh	r3, [r7, #14]
 800d20a:	61bb      	str	r3, [r7, #24]
 800d20c:	2300      	movs	r3, #0
 800d20e:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	693a      	ldr	r2, [r7, #16]
 800d216:	4413      	add	r3, r2
 800d218:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800d21a:	89bb      	ldrh	r3, [r7, #12]
 800d21c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800d21e:	e00d      	b.n	800d23c <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800d220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d222:	1d1a      	adds	r2, r3, #4
 800d224:	627a      	str	r2, [r7, #36]	@ 0x24
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	6a3b      	ldr	r3, [r7, #32]
 800d22a:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800d22c:	89fb      	ldrh	r3, [r7, #14]
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	6a3a      	ldr	r2, [r7, #32]
 800d232:	4413      	add	r3, r2
 800d234:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	3b01      	subs	r3, #1
 800d23a:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d1ee      	bne.n	800d220 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	3301      	adds	r3, #1
 800d246:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800d248:	69bb      	ldr	r3, [r7, #24]
 800d24a:	3b01      	subs	r3, #1
 800d24c:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800d24e:	69bb      	ldr	r3, [r7, #24]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d1dd      	bne.n	800d210 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d254:	2300      	movs	r3, #0
 800d256:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800d258:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	372c      	adds	r7, #44	@ 0x2c
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr

0800d268 <memset>:
 800d268:	4402      	add	r2, r0
 800d26a:	4603      	mov	r3, r0
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d100      	bne.n	800d272 <memset+0xa>
 800d270:	4770      	bx	lr
 800d272:	f803 1b01 	strb.w	r1, [r3], #1
 800d276:	e7f9      	b.n	800d26c <memset+0x4>

0800d278 <__errno>:
 800d278:	4b01      	ldr	r3, [pc, #4]	@ (800d280 <__errno+0x8>)
 800d27a:	6818      	ldr	r0, [r3, #0]
 800d27c:	4770      	bx	lr
 800d27e:	bf00      	nop
 800d280:	20000294 	.word	0x20000294

0800d284 <__libc_init_array>:
 800d284:	b570      	push	{r4, r5, r6, lr}
 800d286:	4d0d      	ldr	r5, [pc, #52]	@ (800d2bc <__libc_init_array+0x38>)
 800d288:	4c0d      	ldr	r4, [pc, #52]	@ (800d2c0 <__libc_init_array+0x3c>)
 800d28a:	1b64      	subs	r4, r4, r5
 800d28c:	10a4      	asrs	r4, r4, #2
 800d28e:	2600      	movs	r6, #0
 800d290:	42a6      	cmp	r6, r4
 800d292:	d109      	bne.n	800d2a8 <__libc_init_array+0x24>
 800d294:	4d0b      	ldr	r5, [pc, #44]	@ (800d2c4 <__libc_init_array+0x40>)
 800d296:	4c0c      	ldr	r4, [pc, #48]	@ (800d2c8 <__libc_init_array+0x44>)
 800d298:	f000 f92c 	bl	800d4f4 <_init>
 800d29c:	1b64      	subs	r4, r4, r5
 800d29e:	10a4      	asrs	r4, r4, #2
 800d2a0:	2600      	movs	r6, #0
 800d2a2:	42a6      	cmp	r6, r4
 800d2a4:	d105      	bne.n	800d2b2 <__libc_init_array+0x2e>
 800d2a6:	bd70      	pop	{r4, r5, r6, pc}
 800d2a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2ac:	4798      	blx	r3
 800d2ae:	3601      	adds	r6, #1
 800d2b0:	e7ee      	b.n	800d290 <__libc_init_array+0xc>
 800d2b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2b6:	4798      	blx	r3
 800d2b8:	3601      	adds	r6, #1
 800d2ba:	e7f2      	b.n	800d2a2 <__libc_init_array+0x1e>
 800d2bc:	0800d578 	.word	0x0800d578
 800d2c0:	0800d578 	.word	0x0800d578
 800d2c4:	0800d578 	.word	0x0800d578
 800d2c8:	0800d57c 	.word	0x0800d57c

0800d2cc <memcpy>:
 800d2cc:	440a      	add	r2, r1
 800d2ce:	4291      	cmp	r1, r2
 800d2d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2d4:	d100      	bne.n	800d2d8 <memcpy+0xc>
 800d2d6:	4770      	bx	lr
 800d2d8:	b510      	push	{r4, lr}
 800d2da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2e2:	4291      	cmp	r1, r2
 800d2e4:	d1f9      	bne.n	800d2da <memcpy+0xe>
 800d2e6:	bd10      	pop	{r4, pc}

0800d2e8 <sqrt>:
 800d2e8:	b538      	push	{r3, r4, r5, lr}
 800d2ea:	ed2d 8b02 	vpush	{d8}
 800d2ee:	ec55 4b10 	vmov	r4, r5, d0
 800d2f2:	f000 f825 	bl	800d340 <__ieee754_sqrt>
 800d2f6:	4622      	mov	r2, r4
 800d2f8:	462b      	mov	r3, r5
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	4629      	mov	r1, r5
 800d2fe:	eeb0 8a40 	vmov.f32	s16, s0
 800d302:	eef0 8a60 	vmov.f32	s17, s1
 800d306:	f7f3 fbdd 	bl	8000ac4 <__aeabi_dcmpun>
 800d30a:	b990      	cbnz	r0, 800d332 <sqrt+0x4a>
 800d30c:	2200      	movs	r2, #0
 800d30e:	2300      	movs	r3, #0
 800d310:	4620      	mov	r0, r4
 800d312:	4629      	mov	r1, r5
 800d314:	f7f3 fbae 	bl	8000a74 <__aeabi_dcmplt>
 800d318:	b158      	cbz	r0, 800d332 <sqrt+0x4a>
 800d31a:	f7ff ffad 	bl	800d278 <__errno>
 800d31e:	2321      	movs	r3, #33	@ 0x21
 800d320:	6003      	str	r3, [r0, #0]
 800d322:	2200      	movs	r2, #0
 800d324:	2300      	movs	r3, #0
 800d326:	4610      	mov	r0, r2
 800d328:	4619      	mov	r1, r3
 800d32a:	f7f3 fa5b 	bl	80007e4 <__aeabi_ddiv>
 800d32e:	ec41 0b18 	vmov	d8, r0, r1
 800d332:	eeb0 0a48 	vmov.f32	s0, s16
 800d336:	eef0 0a68 	vmov.f32	s1, s17
 800d33a:	ecbd 8b02 	vpop	{d8}
 800d33e:	bd38      	pop	{r3, r4, r5, pc}

0800d340 <__ieee754_sqrt>:
 800d340:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d344:	4a68      	ldr	r2, [pc, #416]	@ (800d4e8 <__ieee754_sqrt+0x1a8>)
 800d346:	ec55 4b10 	vmov	r4, r5, d0
 800d34a:	43aa      	bics	r2, r5
 800d34c:	462b      	mov	r3, r5
 800d34e:	4621      	mov	r1, r4
 800d350:	d110      	bne.n	800d374 <__ieee754_sqrt+0x34>
 800d352:	4622      	mov	r2, r4
 800d354:	4620      	mov	r0, r4
 800d356:	4629      	mov	r1, r5
 800d358:	f7f3 f91a 	bl	8000590 <__aeabi_dmul>
 800d35c:	4602      	mov	r2, r0
 800d35e:	460b      	mov	r3, r1
 800d360:	4620      	mov	r0, r4
 800d362:	4629      	mov	r1, r5
 800d364:	f7f2 ff5e 	bl	8000224 <__adddf3>
 800d368:	4604      	mov	r4, r0
 800d36a:	460d      	mov	r5, r1
 800d36c:	ec45 4b10 	vmov	d0, r4, r5
 800d370:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d374:	2d00      	cmp	r5, #0
 800d376:	dc0e      	bgt.n	800d396 <__ieee754_sqrt+0x56>
 800d378:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d37c:	4322      	orrs	r2, r4
 800d37e:	d0f5      	beq.n	800d36c <__ieee754_sqrt+0x2c>
 800d380:	b19d      	cbz	r5, 800d3aa <__ieee754_sqrt+0x6a>
 800d382:	4622      	mov	r2, r4
 800d384:	4620      	mov	r0, r4
 800d386:	4629      	mov	r1, r5
 800d388:	f7f2 ff4a 	bl	8000220 <__aeabi_dsub>
 800d38c:	4602      	mov	r2, r0
 800d38e:	460b      	mov	r3, r1
 800d390:	f7f3 fa28 	bl	80007e4 <__aeabi_ddiv>
 800d394:	e7e8      	b.n	800d368 <__ieee754_sqrt+0x28>
 800d396:	152a      	asrs	r2, r5, #20
 800d398:	d115      	bne.n	800d3c6 <__ieee754_sqrt+0x86>
 800d39a:	2000      	movs	r0, #0
 800d39c:	e009      	b.n	800d3b2 <__ieee754_sqrt+0x72>
 800d39e:	0acb      	lsrs	r3, r1, #11
 800d3a0:	3a15      	subs	r2, #21
 800d3a2:	0549      	lsls	r1, r1, #21
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d0fa      	beq.n	800d39e <__ieee754_sqrt+0x5e>
 800d3a8:	e7f7      	b.n	800d39a <__ieee754_sqrt+0x5a>
 800d3aa:	462a      	mov	r2, r5
 800d3ac:	e7fa      	b.n	800d3a4 <__ieee754_sqrt+0x64>
 800d3ae:	005b      	lsls	r3, r3, #1
 800d3b0:	3001      	adds	r0, #1
 800d3b2:	02dc      	lsls	r4, r3, #11
 800d3b4:	d5fb      	bpl.n	800d3ae <__ieee754_sqrt+0x6e>
 800d3b6:	1e44      	subs	r4, r0, #1
 800d3b8:	1b12      	subs	r2, r2, r4
 800d3ba:	f1c0 0420 	rsb	r4, r0, #32
 800d3be:	fa21 f404 	lsr.w	r4, r1, r4
 800d3c2:	4323      	orrs	r3, r4
 800d3c4:	4081      	lsls	r1, r0
 800d3c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3ca:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d3ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d3d2:	07d2      	lsls	r2, r2, #31
 800d3d4:	bf5c      	itt	pl
 800d3d6:	005b      	lslpl	r3, r3, #1
 800d3d8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d3dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d3e0:	bf58      	it	pl
 800d3e2:	0049      	lslpl	r1, r1, #1
 800d3e4:	2600      	movs	r6, #0
 800d3e6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d3ea:	106d      	asrs	r5, r5, #1
 800d3ec:	0049      	lsls	r1, r1, #1
 800d3ee:	2016      	movs	r0, #22
 800d3f0:	4632      	mov	r2, r6
 800d3f2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d3f6:	1917      	adds	r7, r2, r4
 800d3f8:	429f      	cmp	r7, r3
 800d3fa:	bfde      	ittt	le
 800d3fc:	193a      	addle	r2, r7, r4
 800d3fe:	1bdb      	suble	r3, r3, r7
 800d400:	1936      	addle	r6, r6, r4
 800d402:	0fcf      	lsrs	r7, r1, #31
 800d404:	3801      	subs	r0, #1
 800d406:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d40a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d40e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d412:	d1f0      	bne.n	800d3f6 <__ieee754_sqrt+0xb6>
 800d414:	4604      	mov	r4, r0
 800d416:	2720      	movs	r7, #32
 800d418:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d41c:	429a      	cmp	r2, r3
 800d41e:	eb00 0e0c 	add.w	lr, r0, ip
 800d422:	db02      	blt.n	800d42a <__ieee754_sqrt+0xea>
 800d424:	d113      	bne.n	800d44e <__ieee754_sqrt+0x10e>
 800d426:	458e      	cmp	lr, r1
 800d428:	d811      	bhi.n	800d44e <__ieee754_sqrt+0x10e>
 800d42a:	f1be 0f00 	cmp.w	lr, #0
 800d42e:	eb0e 000c 	add.w	r0, lr, ip
 800d432:	da42      	bge.n	800d4ba <__ieee754_sqrt+0x17a>
 800d434:	2800      	cmp	r0, #0
 800d436:	db40      	blt.n	800d4ba <__ieee754_sqrt+0x17a>
 800d438:	f102 0801 	add.w	r8, r2, #1
 800d43c:	1a9b      	subs	r3, r3, r2
 800d43e:	458e      	cmp	lr, r1
 800d440:	bf88      	it	hi
 800d442:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d446:	eba1 010e 	sub.w	r1, r1, lr
 800d44a:	4464      	add	r4, ip
 800d44c:	4642      	mov	r2, r8
 800d44e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d452:	3f01      	subs	r7, #1
 800d454:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d458:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d45c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d460:	d1dc      	bne.n	800d41c <__ieee754_sqrt+0xdc>
 800d462:	4319      	orrs	r1, r3
 800d464:	d01b      	beq.n	800d49e <__ieee754_sqrt+0x15e>
 800d466:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d4ec <__ieee754_sqrt+0x1ac>
 800d46a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d4f0 <__ieee754_sqrt+0x1b0>
 800d46e:	e9da 0100 	ldrd	r0, r1, [sl]
 800d472:	e9db 2300 	ldrd	r2, r3, [fp]
 800d476:	f7f2 fed3 	bl	8000220 <__aeabi_dsub>
 800d47a:	e9da 8900 	ldrd	r8, r9, [sl]
 800d47e:	4602      	mov	r2, r0
 800d480:	460b      	mov	r3, r1
 800d482:	4640      	mov	r0, r8
 800d484:	4649      	mov	r1, r9
 800d486:	f7f3 faff 	bl	8000a88 <__aeabi_dcmple>
 800d48a:	b140      	cbz	r0, 800d49e <__ieee754_sqrt+0x15e>
 800d48c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d490:	e9da 0100 	ldrd	r0, r1, [sl]
 800d494:	e9db 2300 	ldrd	r2, r3, [fp]
 800d498:	d111      	bne.n	800d4be <__ieee754_sqrt+0x17e>
 800d49a:	3601      	adds	r6, #1
 800d49c:	463c      	mov	r4, r7
 800d49e:	1072      	asrs	r2, r6, #1
 800d4a0:	0863      	lsrs	r3, r4, #1
 800d4a2:	07f1      	lsls	r1, r6, #31
 800d4a4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d4a8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d4ac:	bf48      	it	mi
 800d4ae:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d4b2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	e756      	b.n	800d368 <__ieee754_sqrt+0x28>
 800d4ba:	4690      	mov	r8, r2
 800d4bc:	e7be      	b.n	800d43c <__ieee754_sqrt+0xfc>
 800d4be:	f7f2 feb1 	bl	8000224 <__adddf3>
 800d4c2:	e9da 8900 	ldrd	r8, r9, [sl]
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	4640      	mov	r0, r8
 800d4cc:	4649      	mov	r1, r9
 800d4ce:	f7f3 fad1 	bl	8000a74 <__aeabi_dcmplt>
 800d4d2:	b120      	cbz	r0, 800d4de <__ieee754_sqrt+0x19e>
 800d4d4:	1ca0      	adds	r0, r4, #2
 800d4d6:	bf08      	it	eq
 800d4d8:	3601      	addeq	r6, #1
 800d4da:	3402      	adds	r4, #2
 800d4dc:	e7df      	b.n	800d49e <__ieee754_sqrt+0x15e>
 800d4de:	1c63      	adds	r3, r4, #1
 800d4e0:	f023 0401 	bic.w	r4, r3, #1
 800d4e4:	e7db      	b.n	800d49e <__ieee754_sqrt+0x15e>
 800d4e6:	bf00      	nop
 800d4e8:	7ff00000 	.word	0x7ff00000
 800d4ec:	200002f0 	.word	0x200002f0
 800d4f0:	200002e8 	.word	0x200002e8

0800d4f4 <_init>:
 800d4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f6:	bf00      	nop
 800d4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4fa:	bc08      	pop	{r3}
 800d4fc:	469e      	mov	lr, r3
 800d4fe:	4770      	bx	lr

0800d500 <_fini>:
 800d500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d502:	bf00      	nop
 800d504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d506:	bc08      	pop	{r3}
 800d508:	469e      	mov	lr, r3
 800d50a:	4770      	bx	lr
