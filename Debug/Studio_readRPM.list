
Studio_readRPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a84  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009c5c  08009c5c  0000ac5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c9c  08009c9c  0000b214  2**0
                  CONTENTS
  4 .ARM          00000008  08009c9c  08009c9c  0000ac9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ca4  08009ca4  0000b214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ca4  08009ca4  0000aca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ca8  08009ca8  0000aca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08009cac  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e44  20000218  08009ec0  0000b218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000105c  08009ec0  0000c05c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b139  00000000  00000000  0000b244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030db  00000000  00000000  0002637d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00029458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001189  00000000  00000000  0002aac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000290a1  00000000  00000000  0002bc49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d95  00000000  00000000  00054cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001154bc  00000000  00000000  0006ea7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00183f3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006250  00000000  00000000  00183f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0018a1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000218 	.word	0x20000218
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009c44 	.word	0x08009c44

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000021c 	.word	0x2000021c
 8000214:	08009c44 	.word	0x08009c44

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aa8:	f000 b96a 	b.w	8000d80 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	460c      	mov	r4, r1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14e      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	458c      	cmp	ip, r1
 8000ad4:	4686      	mov	lr, r0
 8000ad6:	fab2 f282 	clz	r2, r2
 8000ada:	d962      	bls.n	8000ba2 <__udivmoddi4+0xde>
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	4319      	orrs	r1, r3
 8000aee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af6:	fa1f f68c 	uxth.w	r6, ip
 8000afa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb07 1114 	mls	r1, r7, r4, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb04 f106 	mul.w	r1, r4, r6
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b1a:	f080 8112 	bcs.w	8000d42 <__udivmoddi4+0x27e>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 810f 	bls.w	8000d42 <__udivmoddi4+0x27e>
 8000b24:	3c02      	subs	r4, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a59      	subs	r1, r3, r1
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b32:	fb07 1110 	mls	r1, r7, r0, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb00 f606 	mul.w	r6, r0, r6
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x94>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b4a:	f080 80fc 	bcs.w	8000d46 <__udivmoddi4+0x282>
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	f240 80f9 	bls.w	8000d46 <__udivmoddi4+0x282>
 8000b54:	4463      	add	r3, ip
 8000b56:	3802      	subs	r0, #2
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b5e:	2100      	movs	r1, #0
 8000b60:	b11d      	cbz	r5, 8000b6a <__udivmoddi4+0xa6>
 8000b62:	40d3      	lsrs	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d905      	bls.n	8000b7e <__udivmoddi4+0xba>
 8000b72:	b10d      	cbz	r5, 8000b78 <__udivmoddi4+0xb4>
 8000b74:	e9c5 0100 	strd	r0, r1, [r5]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e7f5      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000b7e:	fab3 f183 	clz	r1, r3
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d146      	bne.n	8000c14 <__udivmoddi4+0x150>
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xcc>
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	f0c0 80f0 	bcc.w	8000d70 <__udivmoddi4+0x2ac>
 8000b90:	1a86      	subs	r6, r0, r2
 8000b92:	eb64 0303 	sbc.w	r3, r4, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d0e6      	beq.n	8000b6a <__udivmoddi4+0xa6>
 8000b9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba0:	e7e3      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8090 	bne.w	8000cc8 <__udivmoddi4+0x204>
 8000ba8:	eba1 040c 	sub.w	r4, r1, ip
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	fa1f f78c 	uxth.w	r7, ip
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb07 f006 	mul.w	r0, r7, r6
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x11c>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x11a>
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000bde:	4626      	mov	r6, r4
 8000be0:	1a1c      	subs	r4, r3, r0
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bea:	fb08 4410 	mls	r4, r8, r0, r4
 8000bee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf2:	fb00 f707 	mul.w	r7, r0, r7
 8000bf6:	429f      	cmp	r7, r3
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x148>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x146>
 8000c04:	429f      	cmp	r7, r3
 8000c06:	f200 80b0 	bhi.w	8000d6a <__udivmoddi4+0x2a6>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	1bdb      	subs	r3, r3, r7
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	e7a5      	b.n	8000b60 <__udivmoddi4+0x9c>
 8000c14:	f1c1 0620 	rsb	r6, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c24:	fa04 f301 	lsl.w	r3, r4, r1
 8000c28:	ea43 030c 	orr.w	r3, r3, ip
 8000c2c:	40f4      	lsrs	r4, r6
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	0c38      	lsrs	r0, r7, #16
 8000c34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c38:	fbb4 fef0 	udiv	lr, r4, r0
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fb00 441e 	mls	r4, r0, lr, r4
 8000c44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c48:	fb0e f90c 	mul.w	r9, lr, ip
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x1a6>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c5a:	f080 8084 	bcs.w	8000d66 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8081 	bls.w	8000d66 <__udivmoddi4+0x2a2>
 8000c64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	eba4 0409 	sub.w	r4, r4, r9
 8000c6e:	fa1f f983 	uxth.w	r9, r3
 8000c72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c76:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x1d2>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c8c:	d267      	bcs.n	8000d5e <__udivmoddi4+0x29a>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0x29a>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	443c      	add	r4, r7
 8000c96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	d351      	bcc.n	8000d4e <__udivmoddi4+0x28a>
 8000caa:	d04e      	beq.n	8000d4a <__udivmoddi4+0x286>
 8000cac:	b155      	cbz	r5, 8000cc4 <__udivmoddi4+0x200>
 8000cae:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cba:	40cb      	lsrs	r3, r1
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e750      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	430c      	orrs	r4, r1
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf0:	0c23      	lsrs	r3, r4, #16
 8000cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf6:	fb00 f107 	mul.w	r1, r0, r7
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x24c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d06:	d22c      	bcs.n	8000d62 <__udivmoddi4+0x29e>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d92a      	bls.n	8000d62 <__udivmoddi4+0x29e>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d18:	fb08 3311 	mls	r3, r8, r1, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb01 f307 	mul.w	r3, r1, r7
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x276>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d30:	d213      	bcs.n	8000d5a <__udivmoddi4+0x296>
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	d911      	bls.n	8000d5a <__udivmoddi4+0x296>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	1ae4      	subs	r4, r4, r3
 8000d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d40:	e739      	b.n	8000bb6 <__udivmoddi4+0xf2>
 8000d42:	4604      	mov	r4, r0
 8000d44:	e6f0      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e706      	b.n	8000b58 <__udivmoddi4+0x94>
 8000d4a:	45c8      	cmp	r8, r9
 8000d4c:	d2ae      	bcs.n	8000cac <__udivmoddi4+0x1e8>
 8000d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7a8      	b.n	8000cac <__udivmoddi4+0x1e8>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e7ed      	b.n	8000d3a <__udivmoddi4+0x276>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e799      	b.n	8000c96 <__udivmoddi4+0x1d2>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e7d4      	b.n	8000d10 <__udivmoddi4+0x24c>
 8000d66:	46d6      	mov	lr, sl
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1a6>
 8000d6a:	4463      	add	r3, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	e74d      	b.n	8000c0c <__udivmoddi4+0x148>
 8000d70:	4606      	mov	r6, r0
 8000d72:	4623      	mov	r3, r4
 8000d74:	4608      	mov	r0, r1
 8000d76:	e70f      	b.n	8000b98 <__udivmoddi4+0xd4>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	e730      	b.n	8000be0 <__udivmoddi4+0x11c>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <modbus_1t5_Timeout>:
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);
void Hearthbeat();

// function for interrupt
void modbus_1t5_Timeout()
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000d88:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc0 <modbus_1t5_Timeout+0x3c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000d90:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <modbus_1t5_Timeout+0x3c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <modbus_1t5_Timeout+0x3c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <modbus_1t5_Timeout+0x3c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	691b      	ldr	r3, [r3, #16]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 0201 	orr.w	r2, r2, #1
 8000db2:	601a      	str	r2, [r3, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000234 	.word	0x20000234

08000dc4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000dcc:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <modbus_3t5_Timeout+0x1c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	755a      	strb	r2, [r3, #21]

}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	20000234 	.word	0x20000234

08000de4 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f007 fd91 	bl	8008914 <HAL_UART_GetError>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b20      	cmp	r3, #32
 8000df6:	d101      	bne.n	8000dfc <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000df8:	f7ff ffc4 	bl	8000d84 <modbus_1t5_Timeout>

	}
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000e0e:	4a25      	ldr	r2, [pc, #148]	@ (8000ea4 <Modbus_init+0xa0>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000e14:	4b23      	ldr	r3, [pc, #140]	@ (8000ea4 <Modbus_init+0xa0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	4a21      	ldr	r2, [pc, #132]	@ (8000ea8 <Modbus_init+0xa4>)
 8000e22:	210e      	movs	r1, #14
 8000e24:	4618      	mov	r0, r3
 8000e26:	f006 f84d 	bl	8006ec4 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	2110      	movs	r1, #16
 8000e30:	4618      	mov	r0, r3
 8000e32:	f007 fd19 	bl	8008868 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f007 fd30 	bl	80088a0 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	4a19      	ldr	r2, [pc, #100]	@ (8000eac <Modbus_init+0xa8>)
 8000e46:	2104      	movs	r1, #4
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f006 fff7 	bl	8007e3c <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000e4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <Modbus_init+0xa0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000e54:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <Modbus_init+0xa0>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <Modbus_init+0xa0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000e60:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000e64:	4413      	add	r3, r2
 8000e66:	3302      	adds	r3, #2
 8000e68:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f007 f91f 	bl	80080b0 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000e72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <Modbus_init+0xa0>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d10c      	bne.n	8000e9c <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000e82:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <Modbus_init+0xa0>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f004 ffed 	bl	8005e68 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000e8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <Modbus_init+0xa0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f005 fa46 	bl	8006328 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000234 	.word	0x20000234
 8000ea8:	08000dc5 	.word	0x08000dc5
 8000eac:	08000de5 	.word	0x08000de5

08000eb0 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000ebc:	23ff      	movs	r3, #255	@ 0xff
 8000ebe:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000ec0:	23ff      	movs	r3, #255	@ 0xff
 8000ec2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000ec4:	e013      	b.n	8000eee <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	1c5a      	adds	r2, r3, #1
 8000eca:	607a      	str	r2, [r7, #4]
 8000ecc:	781a      	ldrb	r2, [r3, #0]
 8000ece:	7bbb      	ldrb	r3, [r7, #14]
 8000ed0:	4053      	eors	r3, r2
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f14 <CRC16+0x64>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4413      	add	r3, r2
 8000edc:	781a      	ldrb	r2, [r3, #0]
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	4053      	eors	r3, r2
 8000ee2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8000f18 <CRC16+0x68>)
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	4413      	add	r3, r2
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000eee:	883b      	ldrh	r3, [r7, #0]
 8000ef0:	1e5a      	subs	r2, r3, #1
 8000ef2:	803a      	strh	r2, [r7, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1e6      	bne.n	8000ec6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	7bbb      	ldrb	r3, [r7, #14]
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b21b      	sxth	r3, r3
 8000f06:	b29b      	uxth	r3, r3
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	20000100 	.word	0x20000100
 8000f18:	20000000 	.word	0x20000000

08000f1c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000f22:	4b7e      	ldr	r3, [pc, #504]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	7ddb      	ldrb	r3, [r3, #23]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d80a      	bhi.n	8000f44 <Modbus_Protocal_Worker+0x28>
 8000f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f34 <Modbus_Protocal_Worker+0x18>)
 8000f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f34:	08000f4f 	.word	0x08000f4f
 8000f38:	080010e3 	.word	0x080010e3
 8000f3c:	08000fdb 	.word	0x08000fdb
 8000f40:	0800101f 	.word	0x0800101f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000f44:	4b75      	ldr	r3, [pc, #468]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	75da      	strb	r2, [r3, #23]
		break;
 8000f4c:	e0e1      	b.n	8001112 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000f4e:	4b73      	ldr	r3, [pc, #460]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d006      	beq.n	8000f68 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 8000f5a:	4b70      	ldr	r3, [pc, #448]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2202      	movs	r2, #2
 8000f60:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8000f62:	f000 f9cd 	bl	8001300 <Modbus_Emission>
 8000f66:	e018      	b.n	8000f9a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8000f68:	4b6c      	ldr	r3, [pc, #432]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8000f72:	4b6a      	ldr	r3, [pc, #424]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d00b      	beq.n	8000f9a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000f82:	4b66      	ldr	r3, [pc, #408]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8000f8a:	4b64      	ldr	r3, [pc, #400]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000f92:	4b62      	ldr	r3, [pc, #392]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2203      	movs	r2, #3
 8000f98:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000f9a:	4b60      	ldr	r3, [pc, #384]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fa4:	2b20      	cmp	r3, #32
 8000fa6:	f040 80ad 	bne.w	8001104 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000faa:	4b5c      	ldr	r3, [pc, #368]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000fb4:	4b59      	ldr	r3, [pc, #356]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000fba:	4b58      	ldr	r3, [pc, #352]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4b57      	ldr	r3, [pc, #348]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000fc6:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000fca:	4413      	add	r3, r2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f007 f86c 	bl	80080b0 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8000fd8:	e094      	b.n	8001104 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8000fda:	4b50      	ldr	r3, [pc, #320]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	7d1b      	ldrb	r3, [r3, #20]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 8091 	beq.w	8001108 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000fe6:	4b4d      	ldr	r3, [pc, #308]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	22fe      	movs	r2, #254	@ 0xfe
 8000fec:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000fee:	4b4b      	ldr	r3, [pc, #300]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8000ff8:	4b48      	ldr	r3, [pc, #288]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001008:	4b44      	ldr	r3, [pc, #272]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 800100a:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800100c:	1a8a      	subs	r2, r1, r2
 800100e:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001010:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001014:	4b41      	ldr	r3, [pc, #260]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2204      	movs	r2, #4
 800101a:	75da      	strb	r2, [r3, #23]
		}
		break;
 800101c:	e074      	b.n	8001108 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800101e:	4b3f      	ldr	r3, [pc, #252]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001026:	f113 0f02 	cmn.w	r3, #2
 800102a:	d150      	bne.n	80010ce <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800102c:	4b3b      	ldr	r3, [pc, #236]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2200      	movs	r2, #0
 8001032:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001034:	4b39      	ldr	r3, [pc, #228]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f203 2272 	addw	r2, r3, #626	@ 0x272
 800103c:	4b37      	ldr	r3, [pc, #220]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001044:	3b02      	subs	r3, #2
 8001046:	4619      	mov	r1, r3
 8001048:	4610      	mov	r0, r2
 800104a:	f7ff ff31 	bl	8000eb0 <CRC16>
 800104e:	4603      	mov	r3, r0
 8001050:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001052:	793a      	ldrb	r2, [r7, #4]
 8001054:	4b31      	ldr	r3, [pc, #196]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8001056:	6819      	ldr	r1, [r3, #0]
 8001058:	4b30      	ldr	r3, [pc, #192]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001060:	3b02      	subs	r3, #2
 8001062:	440b      	add	r3, r1
 8001064:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001068:	429a      	cmp	r2, r3
 800106a:	d10c      	bne.n	8001086 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800106c:	797a      	ldrb	r2, [r7, #5]
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8001070:	6819      	ldr	r1, [r3, #0]
 8001072:	4b2a      	ldr	r3, [pc, #168]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800107a:	3b01      	subs	r3, #1
 800107c:	440b      	add	r3, r1
 800107e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001082:	429a      	cmp	r2, r3
 8001084:	d004      	beq.n	8001090 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	22ff      	movs	r2, #255	@ 0xff
 800108c:	759a      	strb	r2, [r3, #22]
				break;
 800108e:	e040      	b.n	8001112 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001090:	4b22      	ldr	r3, [pc, #136]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001098:	4b20      	ldr	r3, [pc, #128]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d113      	bne.n	80010ca <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80010a2:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80010aa:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80010b2:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80010bc:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80010be:	461a      	mov	r2, r3
 80010c0:	f008 fdb2 	bl	8009c28 <memcpy>

			//execute command
			Modbus_frame_response();
 80010c4:	f000 f904 	bl	80012d0 <Modbus_frame_response>
 80010c8:	e001      	b.n	80010ce <Modbus_Protocal_Worker+0x1b2>
				break;
 80010ca:	bf00      	nop
					}
		break;


	}
}
 80010cc:	e021      	b.n	8001112 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 80010ce:	4b13      	ldr	r3, [pc, #76]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	7d5b      	ldrb	r3, [r3, #21]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d019      	beq.n	800110c <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80010d8:	4b10      	ldr	r3, [pc, #64]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2201      	movs	r2, #1
 80010de:	75da      	strb	r2, [r3, #23]
		break;
 80010e0:	e014      	b.n	800110c <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80010e2:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ec:	2b20      	cmp	r3, #32
 80010ee:	d10f      	bne.n	8001110 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 80010fa:	4b08      	ldr	r3, [pc, #32]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2201      	movs	r2, #1
 8001100:	75da      	strb	r2, [r3, #23]
		break;
 8001102:	e005      	b.n	8001110 <Modbus_Protocal_Worker+0x1f4>
		break;
 8001104:	bf00      	nop
 8001106:	e004      	b.n	8001112 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001108:	bf00      	nop
 800110a:	e002      	b.n	8001112 <Modbus_Protocal_Worker+0x1f6>
		break;
 800110c:	bf00      	nop
 800110e:	e000      	b.n	8001112 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001110:	bf00      	nop
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000234 	.word	0x20000234

08001120 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001126:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <modbusWrite1Register+0x7c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	7e5b      	ldrb	r3, [r3, #25]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b29b      	uxth	r3, r3
 8001130:	4a1a      	ldr	r2, [pc, #104]	@ (800119c <modbusWrite1Register+0x7c>)
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	7e92      	ldrb	r2, [r2, #26]
 8001136:	4413      	add	r3, r2
 8001138:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800113a:	88fa      	ldrh	r2, [r7, #6]
 800113c:	4b17      	ldr	r3, [pc, #92]	@ (800119c <modbusWrite1Register+0x7c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	429a      	cmp	r2, r3
 8001144:	d903      	bls.n	800114e <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001146:	2002      	movs	r0, #2
 8001148:	f000 f8a0 	bl	800128c <ModbusErrorReply>
			 return;
 800114c:	e023      	b.n	8001196 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800114e:	4b13      	ldr	r3, [pc, #76]	@ (800119c <modbusWrite1Register+0x7c>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4b12      	ldr	r3, [pc, #72]	@ (800119c <modbusWrite1Register+0x7c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6859      	ldr	r1, [r3, #4]
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	440b      	add	r3, r1
 800115e:	7ed2      	ldrb	r2, [r2, #27]
 8001160:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001162:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <modbusWrite1Register+0x7c>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <modbusWrite1Register+0x7c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6859      	ldr	r1, [r3, #4]
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	440b      	add	r3, r1
 8001172:	7f12      	ldrb	r2, [r2, #28]
 8001174:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001176:	4b09      	ldr	r3, [pc, #36]	@ (800119c <modbusWrite1Register+0x7c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800117e:	4b07      	ldr	r3, [pc, #28]	@ (800119c <modbusWrite1Register+0x7c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001184:	2208      	movs	r2, #8
 8001186:	4619      	mov	r1, r3
 8001188:	f008 fd4e 	bl	8009c28 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800118c:	4b03      	ldr	r3, [pc, #12]	@ (800119c <modbusWrite1Register+0x7c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2205      	movs	r2, #5
 8001192:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000234 	.word	0x20000234

080011a0 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80011a6:	4b38      	ldr	r3, [pc, #224]	@ (8001288 <modbusRead1Register+0xe8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	7edb      	ldrb	r3, [r3, #27]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	4a35      	ldr	r2, [pc, #212]	@ (8001288 <modbusRead1Register+0xe8>)
 80011b2:	6812      	ldr	r2, [r2, #0]
 80011b4:	7f12      	ldrb	r2, [r2, #28]
 80011b6:	4413      	add	r3, r2
 80011b8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80011ba:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <modbusRead1Register+0xe8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	7e5b      	ldrb	r3, [r3, #25]
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	4a30      	ldr	r2, [pc, #192]	@ (8001288 <modbusRead1Register+0xe8>)
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	7e92      	ldrb	r2, [r2, #26]
 80011ca:	4413      	add	r3, r2
 80011cc:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <modbusRead1Register+0x3a>
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	2b7d      	cmp	r3, #125	@ 0x7d
 80011d8:	d903      	bls.n	80011e2 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80011da:	2003      	movs	r0, #3
 80011dc:	f000 f856 	bl	800128c <ModbusErrorReply>
		 return;
 80011e0:	e04e      	b.n	8001280 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80011e2:	88ba      	ldrh	r2, [r7, #4]
 80011e4:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <modbusRead1Register+0xe8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d808      	bhi.n	8001200 <modbusRead1Register+0x60>
 80011ee:	88ba      	ldrh	r2, [r7, #4]
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	4413      	add	r3, r2
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <modbusRead1Register+0xe8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d903      	bls.n	8001208 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001200:	2002      	movs	r0, #2
 8001202:	f000 f843 	bl	800128c <ModbusErrorReply>
		 return;
 8001206:	e03b      	b.n	8001280 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001208:	4b1f      	ldr	r3, [pc, #124]	@ (8001288 <modbusRead1Register+0xe8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2203      	movs	r2, #3
 800120e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <modbusRead1Register+0xe8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	0052      	lsls	r2, r2, #1
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001222:	2400      	movs	r4, #0
 8001224:	e020      	b.n	8001268 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001226:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <modbusRead1Register+0xe8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	88bb      	ldrh	r3, [r7, #4]
 800122e:	4423      	add	r3, r4
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	18d1      	adds	r1, r2, r3
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <modbusRead1Register+0xe8>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	1c63      	adds	r3, r4, #1
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	7849      	ldrb	r1, [r1, #1]
 800123e:	4413      	add	r3, r2
 8001240:	460a      	mov	r2, r1
 8001242:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <modbusRead1Register+0xe8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	88bb      	ldrh	r3, [r7, #4]
 800124e:	4423      	add	r3, r4
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	18d1      	adds	r1, r2, r3
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <modbusRead1Register+0xe8>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	0063      	lsls	r3, r4, #1
 800125a:	3303      	adds	r3, #3
 800125c:	7809      	ldrb	r1, [r1, #0]
 800125e:	4413      	add	r3, r2
 8001260:	460a      	mov	r2, r1
 8001262:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001266:	3401      	adds	r4, #1
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	429c      	cmp	r4, r3
 800126c:	dbdb      	blt.n	8001226 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	3301      	adds	r3, #1
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b04      	ldr	r3, [pc, #16]	@ (8001288 <modbusRead1Register+0xe8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	0052      	lsls	r2, r2, #1
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bd90      	pop	{r4, r7, pc}
 8001286:	bf00      	nop
 8001288:	20000234 	.word	0x20000234

0800128c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001296:	4b0d      	ldr	r3, [pc, #52]	@ (80012cc <ModbusErrorReply+0x40>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	7e1a      	ldrb	r2, [r3, #24]
 800129c:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <ModbusErrorReply+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80012aa:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <ModbusErrorReply+0x40>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	79fa      	ldrb	r2, [r7, #7]
 80012b0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80012b4:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <ModbusErrorReply+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2202      	movs	r2, #2
 80012ba:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000234 	.word	0x20000234

080012d0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80012d4:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <Modbus_frame_response+0x2c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	7e1b      	ldrb	r3, [r3, #24]
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d004      	beq.n	80012e8 <Modbus_frame_response+0x18>
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d105      	bne.n	80012ee <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80012e2:	f7ff ff1d 	bl	8001120 <modbusWrite1Register>
		break;
 80012e6:	e006      	b.n	80012f6 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80012e8:	f7ff ff5a 	bl	80011a0 <modbusRead1Register>
		break;
 80012ec:	e003      	b.n	80012f6 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80012ee:	2001      	movs	r0, #1
 80012f0:	f7ff ffcc 	bl	800128c <ModbusErrorReply>
		break;
 80012f4:	bf00      	nop

	}
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000234 	.word	0x20000234

08001300 <Modbus_Emission>:

void Modbus_Emission()
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001306:	4b38      	ldr	r3, [pc, #224]	@ (80013e8 <Modbus_Emission+0xe8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001310:	2b20      	cmp	r3, #32
 8001312:	d15d      	bne.n	80013d0 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001314:	4b34      	ldr	r3, [pc, #208]	@ (80013e8 <Modbus_Emission+0xe8>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b33      	ldr	r3, [pc, #204]	@ (80013e8 <Modbus_Emission+0xe8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	7812      	ldrb	r2, [r2, #0]
 800131e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001322:	4b31      	ldr	r3, [pc, #196]	@ (80013e8 <Modbus_Emission+0xe8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800132a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800132c:	4b2e      	ldr	r3, [pc, #184]	@ (80013e8 <Modbus_Emission+0xe8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001334:	4b2c      	ldr	r3, [pc, #176]	@ (80013e8 <Modbus_Emission+0xe8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 800133c:	461a      	mov	r2, r3
 800133e:	f008 fc73 	bl	8009c28 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001342:	4b29      	ldr	r3, [pc, #164]	@ (80013e8 <Modbus_Emission+0xe8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800134a:	461a      	mov	r2, r3
 800134c:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <Modbus_Emission+0xe8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3203      	adds	r2, #3
 8001352:	b292      	uxth	r2, r2
 8001354:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001358:	4b23      	ldr	r3, [pc, #140]	@ (80013e8 <Modbus_Emission+0xe8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001360:	4b21      	ldr	r3, [pc, #132]	@ (80013e8 <Modbus_Emission+0xe8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001368:	3b02      	subs	r3, #2
 800136a:	4619      	mov	r1, r3
 800136c:	4610      	mov	r0, r2
 800136e:	f7ff fd9f 	bl	8000eb0 <CRC16>
 8001372:	4603      	mov	r3, r0
 8001374:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001376:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <Modbus_Emission+0xe8>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <Modbus_Emission+0xe8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001382:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001384:	7939      	ldrb	r1, [r7, #4]
 8001386:	4413      	add	r3, r2
 8001388:	460a      	mov	r2, r1
 800138a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800138e:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <Modbus_Emission+0xe8>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <Modbus_Emission+0xe8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800139a:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800139c:	7979      	ldrb	r1, [r7, #5]
 800139e:	4413      	add	r3, r2
 80013a0:	460a      	mov	r2, r1
 80013a2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <Modbus_Emission+0xe8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013b0:	2b20      	cmp	r3, #32
 80013b2:	d10d      	bne.n	80013d0 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80013b4:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <Modbus_Emission+0xe8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80013ba:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <Modbus_Emission+0xe8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80013c2:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <Modbus_Emission+0xe8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80013c6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80013ca:	461a      	mov	r2, r3
 80013cc:	f006 fdf0 	bl	8007fb0 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80013d0:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <Modbus_Emission+0xe8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2200      	movs	r2, #0
 80013d6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80013d8:	4b03      	ldr	r3, [pc, #12]	@ (80013e8 <Modbus_Emission+0xe8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2200      	movs	r2, #0
 80013de:	755a      	strb	r2, [r3, #21]

}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000234 	.word	0x20000234

080013ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f0:	f001 fa6d 	bl	80028ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f4:	f000 f892 	bl	800151c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f8:	f000 fbca 	bl	8001b90 <MX_GPIO_Init>
  MX_DMA_Init();
 80013fc:	f000 fb82 	bl	8001b04 <MX_DMA_Init>
  MX_TIM3_Init();
 8001400:	f000 f9b6 	bl	8001770 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001404:	f000 f960 	bl	80016c8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001408:	f000 fa78 	bl	80018fc <MX_TIM5_Init>
  MX_ADC1_Init();
 800140c:	f000 f8d2 	bl	80015b4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001410:	f000 fa26 	bl	8001860 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001414:	f000 fac0 	bl	8001998 <MX_TIM6_Init>
  MX_TIM16_Init();
 8001418:	f000 faf6 	bl	8001a08 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800141c:	f000 fb24 	bl	8001a68 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //PWM Motor
  HAL_TIM_Base_Start(&htim3);
 8001420:	482c      	ldr	r0, [pc, #176]	@ (80014d4 <main+0xe8>)
 8001422:	f004 fcb1 	bl	8005d88 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001426:	2100      	movs	r1, #0
 8001428:	482a      	ldr	r0, [pc, #168]	@ (80014d4 <main+0xe8>)
 800142a:	f004 fe03 	bl	8006034 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 800142e:	4b29      	ldr	r3, [pc, #164]	@ (80014d4 <main+0xe8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001436:	635a      	str	r2, [r3, #52]	@ 0x34

  //Read Encoder
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001438:	213c      	movs	r1, #60	@ 0x3c
 800143a:	4827      	ldr	r0, [pc, #156]	@ (80014d8 <main+0xec>)
 800143c:	f005 f8b6 	bl	80065ac <HAL_TIM_Encoder_Start>

  //time microsec
  HAL_TIM_Base_Start_IT(&htim5);
 8001440:	4826      	ldr	r0, [pc, #152]	@ (80014dc <main+0xf0>)
 8001442:	f004 fd11 	bl	8005e68 <HAL_TIM_Base_Start_IT>

  //Read joystick
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 2);
 8001446:	2202      	movs	r2, #2
 8001448:	4925      	ldr	r1, [pc, #148]	@ (80014e0 <main+0xf4>)
 800144a:	4826      	ldr	r0, [pc, #152]	@ (80014e4 <main+0xf8>)
 800144c:	f001 fe8a 	bl	8003164 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim4);
 8001450:	4825      	ldr	r0, [pc, #148]	@ (80014e8 <main+0xfc>)
 8001452:	f004 fc99 	bl	8005d88 <HAL_TIM_Base_Start>

  //PID Control Position
  PID1.Kp = 5; //No more than 0.92
 8001456:	4b25      	ldr	r3, [pc, #148]	@ (80014ec <main+0x100>)
 8001458:	4a25      	ldr	r2, [pc, #148]	@ (80014f0 <main+0x104>)
 800145a:	619a      	str	r2, [r3, #24]
  PID1.Ki = 0.00002;
 800145c:	4b23      	ldr	r3, [pc, #140]	@ (80014ec <main+0x100>)
 800145e:	4a25      	ldr	r2, [pc, #148]	@ (80014f4 <main+0x108>)
 8001460:	61da      	str	r2, [r3, #28]
  PID1.Kd = 1;
 8001462:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <main+0x100>)
 8001464:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001468:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID1, 0);
 800146a:	2100      	movs	r1, #0
 800146c:	481f      	ldr	r0, [pc, #124]	@ (80014ec <main+0x100>)
 800146e:	f008 fb79 	bl	8009b64 <arm_pid_init_f32>

  //PID Control Velocity
  PID2.Kp = 0.15;  //No more than 0.044
 8001472:	4b21      	ldr	r3, [pc, #132]	@ (80014f8 <main+0x10c>)
 8001474:	4a21      	ldr	r2, [pc, #132]	@ (80014fc <main+0x110>)
 8001476:	619a      	str	r2, [r3, #24]
  PID2.Ki = 0.006;
 8001478:	4b1f      	ldr	r3, [pc, #124]	@ (80014f8 <main+0x10c>)
 800147a:	4a21      	ldr	r2, [pc, #132]	@ (8001500 <main+0x114>)
 800147c:	61da      	str	r2, [r3, #28]
  PID2.Kd = 0.05;
 800147e:	4b1e      	ldr	r3, [pc, #120]	@ (80014f8 <main+0x10c>)
 8001480:	4a20      	ldr	r2, [pc, #128]	@ (8001504 <main+0x118>)
 8001482:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID2, 0);
 8001484:	2100      	movs	r1, #0
 8001486:	481c      	ldr	r0, [pc, #112]	@ (80014f8 <main+0x10c>)
 8001488:	f008 fb6c 	bl	8009b64 <arm_pid_init_f32>

  //Modbus Setting
  // manaul add
  HAL_TIM_Base_Start_IT(&htim6);
 800148c:	481e      	ldr	r0, [pc, #120]	@ (8001508 <main+0x11c>)
 800148e:	f004 fceb 	bl	8005e68 <HAL_TIM_Base_Start_IT>

  //  modbus
  hmodbus.huart = &huart2;
 8001492:	4b1e      	ldr	r3, [pc, #120]	@ (800150c <main+0x120>)
 8001494:	4a1e      	ldr	r2, [pc, #120]	@ (8001510 <main+0x124>)
 8001496:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8001498:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <main+0x120>)
 800149a:	4a1e      	ldr	r2, [pc, #120]	@ (8001514 <main+0x128>)
 800149c:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 800149e:	4b1b      	ldr	r3, [pc, #108]	@ (800150c <main+0x120>)
 80014a0:	2215      	movs	r2, #21
 80014a2:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80014a4:	4b19      	ldr	r3, [pc, #100]	@ (800150c <main+0x120>)
 80014a6:	22c8      	movs	r2, #200	@ 0xc8
 80014a8:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80014aa:	491b      	ldr	r1, [pc, #108]	@ (8001518 <main+0x12c>)
 80014ac:	4817      	ldr	r0, [pc, #92]	@ (800150c <main+0x120>)
 80014ae:	f7ff fca9 	bl	8000e04 <Modbus_init>
//		  }
//
//	  }

	  //------Modbus Function------//
	  Modbus_Protocal_Worker();
 80014b2:	f7ff fd33 	bl	8000f1c <Modbus_Protocal_Worker>
	  check_vaccum_status();
 80014b6:	f000 fd8f 	bl	8001fd8 <check_vaccum_status>
	  check_gripper_status();
 80014ba:	f000 fdab 	bl	8002014 <check_gripper_status>
	  set_shelf();
 80014be:	f000 fdc7 	bl	8002050 <set_shelf>
	  Pointmode();
 80014c2:	f000 fe15 	bl	80020f0 <Pointmode>
	  Home();
 80014c6:	f000 fe55 	bl	8002174 <Home>
	  Run_jog();
 80014ca:	f000 fe87 	bl	80021dc <Run_jog>
	  Modbus_Protocal_Worker();
 80014ce:	bf00      	nop
 80014d0:	e7ef      	b.n	80014b2 <main+0xc6>
 80014d2:	bf00      	nop
 80014d4:	200003d0 	.word	0x200003d0
 80014d8:	20000304 	.word	0x20000304
 80014dc:	20000568 	.word	0x20000568
 80014e0:	20000960 	.word	0x20000960
 80014e4:	20000238 	.word	0x20000238
 80014e8:	2000049c 	.word	0x2000049c
 80014ec:	20000968 	.word	0x20000968
 80014f0:	40a00000 	.word	0x40a00000
 80014f4:	37a7c5ac 	.word	0x37a7c5ac
 80014f8:	2000098c 	.word	0x2000098c
 80014fc:	3e19999a 	.word	0x3e19999a
 8001500:	3bc49ba6 	.word	0x3bc49ba6
 8001504:	3d4ccccd 	.word	0x3d4ccccd
 8001508:	20000634 	.word	0x20000634
 800150c:	200009b8 	.word	0x200009b8
 8001510:	200007cc 	.word	0x200007cc
 8001514:	20000700 	.word	0x20000700
 8001518:	20000e90 	.word	0x20000e90

0800151c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b094      	sub	sp, #80	@ 0x50
 8001520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	2238      	movs	r2, #56	@ 0x38
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f008 fb50 	bl	8009bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800153e:	2000      	movs	r0, #0
 8001540:	f003 fb8e 	bl	8004c60 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001544:	2302      	movs	r3, #2
 8001546:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001548:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800154e:	2340      	movs	r3, #64	@ 0x40
 8001550:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001552:	2302      	movs	r3, #2
 8001554:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001556:	2302      	movs	r3, #2
 8001558:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800155a:	2304      	movs	r3, #4
 800155c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800155e:	2355      	movs	r3, #85	@ 0x55
 8001560:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001562:	2302      	movs	r3, #2
 8001564:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001566:	2302      	movs	r3, #2
 8001568:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800156a:	2302      	movs	r3, #2
 800156c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156e:	f107 0318 	add.w	r3, r7, #24
 8001572:	4618      	mov	r0, r3
 8001574:	f003 fc28 	bl	8004dc8 <HAL_RCC_OscConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800157e:	f000 fe59 	bl	8002234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001582:	230f      	movs	r3, #15
 8001584:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001586:	2303      	movs	r3, #3
 8001588:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	2104      	movs	r1, #4
 800159a:	4618      	mov	r0, r3
 800159c:	f003 ff26 	bl	80053ec <HAL_RCC_ClockConfig>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80015a6:	f000 fe45 	bl	8002234 <Error_Handler>
  }
}
 80015aa:	bf00      	nop
 80015ac:	3750      	adds	r7, #80	@ 0x50
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08c      	sub	sp, #48	@ 0x30
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80015ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2220      	movs	r2, #32
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f008 faff 	bl	8009bd0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015d2:	4b3a      	ldr	r3, [pc, #232]	@ (80016bc <MX_ADC1_Init+0x108>)
 80015d4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80015d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015da:	4b38      	ldr	r3, [pc, #224]	@ (80016bc <MX_ADC1_Init+0x108>)
 80015dc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80015e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015e2:	4b36      	ldr	r3, [pc, #216]	@ (80016bc <MX_ADC1_Init+0x108>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015e8:	4b34      	ldr	r3, [pc, #208]	@ (80016bc <MX_ADC1_Init+0x108>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80015ee:	4b33      	ldr	r3, [pc, #204]	@ (80016bc <MX_ADC1_Init+0x108>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015f4:	4b31      	ldr	r3, [pc, #196]	@ (80016bc <MX_ADC1_Init+0x108>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015fa:	4b30      	ldr	r3, [pc, #192]	@ (80016bc <MX_ADC1_Init+0x108>)
 80015fc:	2204      	movs	r2, #4
 80015fe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001600:	4b2e      	ldr	r3, [pc, #184]	@ (80016bc <MX_ADC1_Init+0x108>)
 8001602:	2200      	movs	r2, #0
 8001604:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001606:	4b2d      	ldr	r3, [pc, #180]	@ (80016bc <MX_ADC1_Init+0x108>)
 8001608:	2200      	movs	r2, #0
 800160a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800160c:	4b2b      	ldr	r3, [pc, #172]	@ (80016bc <MX_ADC1_Init+0x108>)
 800160e:	2202      	movs	r2, #2
 8001610:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001612:	4b2a      	ldr	r3, [pc, #168]	@ (80016bc <MX_ADC1_Init+0x108>)
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 800161a:	4b28      	ldr	r3, [pc, #160]	@ (80016bc <MX_ADC1_Init+0x108>)
 800161c:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 8001620:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001622:	4b26      	ldr	r3, [pc, #152]	@ (80016bc <MX_ADC1_Init+0x108>)
 8001624:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001628:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800162a:	4b24      	ldr	r3, [pc, #144]	@ (80016bc <MX_ADC1_Init+0x108>)
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001632:	4b22      	ldr	r3, [pc, #136]	@ (80016bc <MX_ADC1_Init+0x108>)
 8001634:	2200      	movs	r2, #0
 8001636:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001638:	4b20      	ldr	r3, [pc, #128]	@ (80016bc <MX_ADC1_Init+0x108>)
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001640:	481e      	ldr	r0, [pc, #120]	@ (80016bc <MX_ADC1_Init+0x108>)
 8001642:	f001 fbd3 	bl	8002dec <HAL_ADC_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800164c:	f000 fdf2 	bl	8002234 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001658:	4619      	mov	r1, r3
 800165a:	4818      	ldr	r0, [pc, #96]	@ (80016bc <MX_ADC1_Init+0x108>)
 800165c:	f002 fc04 	bl	8003e68 <HAL_ADCEx_MultiModeConfigChannel>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001666:	f000 fde5 	bl	8002234 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <MX_ADC1_Init+0x10c>)
 800166c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800166e:	2306      	movs	r3, #6
 8001670:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001676:	237f      	movs	r3, #127	@ 0x7f
 8001678:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800167a:	2304      	movs	r3, #4
 800167c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	4619      	mov	r1, r3
 8001686:	480d      	ldr	r0, [pc, #52]	@ (80016bc <MX_ADC1_Init+0x108>)
 8001688:	f001 fe5e 	bl	8003348 <HAL_ADC_ConfigChannel>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001692:	f000 fdcf 	bl	8002234 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001696:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <MX_ADC1_Init+0x110>)
 8001698:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800169a:	230c      	movs	r3, #12
 800169c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	4619      	mov	r1, r3
 80016a2:	4806      	ldr	r0, [pc, #24]	@ (80016bc <MX_ADC1_Init+0x108>)
 80016a4:	f001 fe50 	bl	8003348 <HAL_ADC_ConfigChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80016ae:	f000 fdc1 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	3730      	adds	r7, #48	@ 0x30
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000238 	.word	0x20000238
 80016c0:	04300002 	.word	0x04300002
 80016c4:	14f00020 	.word	0x14f00020

080016c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	@ 0x30
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	2224      	movs	r2, #36	@ 0x24
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f008 fa7a 	bl	8009bd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016dc:	463b      	mov	r3, r7
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016e6:	4b21      	ldr	r3, [pc, #132]	@ (800176c <MX_TIM2_Init+0xa4>)
 80016e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016ee:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <MX_TIM2_Init+0xa4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	4b1d      	ldr	r3, [pc, #116]	@ (800176c <MX_TIM2_Init+0xa4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016fa:	4b1c      	ldr	r3, [pc, #112]	@ (800176c <MX_TIM2_Init+0xa4>)
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001700:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001702:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <MX_TIM2_Init+0xa4>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001708:	4b18      	ldr	r3, [pc, #96]	@ (800176c <MX_TIM2_Init+0xa4>)
 800170a:	2200      	movs	r2, #0
 800170c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800170e:	2303      	movs	r3, #3
 8001710:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001716:	2301      	movs	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001726:	2301      	movs	r3, #1
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	4619      	mov	r1, r3
 8001738:	480c      	ldr	r0, [pc, #48]	@ (800176c <MX_TIM2_Init+0xa4>)
 800173a:	f004 fe83 	bl	8006444 <HAL_TIM_Encoder_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001744:	f000 fd76 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001748:	2300      	movs	r3, #0
 800174a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001750:	463b      	mov	r3, r7
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	@ (800176c <MX_TIM2_Init+0xa4>)
 8001756:	f006 fa2b 	bl	8007bb0 <HAL_TIMEx_MasterConfigSynchronization>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001760:	f000 fd68 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	3730      	adds	r7, #48	@ 0x30
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000304 	.word	0x20000304

08001770 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08e      	sub	sp, #56	@ 0x38
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001776:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001790:	463b      	mov	r3, r7
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	611a      	str	r2, [r3, #16]
 800179e:	615a      	str	r2, [r3, #20]
 80017a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001858 <MX_TIM3_Init+0xe8>)
 80017a4:	4a2d      	ldr	r2, [pc, #180]	@ (800185c <MX_TIM3_Init+0xec>)
 80017a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80017a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001858 <MX_TIM3_Init+0xe8>)
 80017aa:	22a9      	movs	r2, #169	@ 0xa9
 80017ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001858 <MX_TIM3_Init+0xe8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80017b4:	4b28      	ldr	r3, [pc, #160]	@ (8001858 <MX_TIM3_Init+0xe8>)
 80017b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017bc:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <MX_TIM3_Init+0xe8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c2:	4b25      	ldr	r3, [pc, #148]	@ (8001858 <MX_TIM3_Init+0xe8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017c8:	4823      	ldr	r0, [pc, #140]	@ (8001858 <MX_TIM3_Init+0xe8>)
 80017ca:	f004 fa79 	bl	8005cc0 <HAL_TIM_Base_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80017d4:	f000 fd2e 	bl	8002234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017e2:	4619      	mov	r1, r3
 80017e4:	481c      	ldr	r0, [pc, #112]	@ (8001858 <MX_TIM3_Init+0xe8>)
 80017e6:	f005 f9fd 	bl	8006be4 <HAL_TIM_ConfigClockSource>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80017f0:	f000 fd20 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017f4:	4818      	ldr	r0, [pc, #96]	@ (8001858 <MX_TIM3_Init+0xe8>)
 80017f6:	f004 fbaf 	bl	8005f58 <HAL_TIM_PWM_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001800:	f000 fd18 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4619      	mov	r1, r3
 8001812:	4811      	ldr	r0, [pc, #68]	@ (8001858 <MX_TIM3_Init+0xe8>)
 8001814:	f006 f9cc 	bl	8007bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800181e:	f000 fd09 	bl	8002234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001822:	2360      	movs	r3, #96	@ 0x60
 8001824:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001826:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800182a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001834:	463b      	mov	r3, r7
 8001836:	2200      	movs	r2, #0
 8001838:	4619      	mov	r1, r3
 800183a:	4807      	ldr	r0, [pc, #28]	@ (8001858 <MX_TIM3_Init+0xe8>)
 800183c:	f005 f8be 	bl	80069bc <HAL_TIM_PWM_ConfigChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001846:	f000 fcf5 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800184a:	4803      	ldr	r0, [pc, #12]	@ (8001858 <MX_TIM3_Init+0xe8>)
 800184c:	f000 fe82 	bl	8002554 <HAL_TIM_MspPostInit>

}
 8001850:	bf00      	nop
 8001852:	3738      	adds	r7, #56	@ 0x38
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200003d0 	.word	0x200003d0
 800185c:	40000400 	.word	0x40000400

08001860 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800187e:	4b1d      	ldr	r3, [pc, #116]	@ (80018f4 <MX_TIM4_Init+0x94>)
 8001880:	4a1d      	ldr	r2, [pc, #116]	@ (80018f8 <MX_TIM4_Init+0x98>)
 8001882:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001884:	4b1b      	ldr	r3, [pc, #108]	@ (80018f4 <MX_TIM4_Init+0x94>)
 8001886:	22a9      	movs	r2, #169	@ 0xa9
 8001888:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188a:	4b1a      	ldr	r3, [pc, #104]	@ (80018f4 <MX_TIM4_Init+0x94>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001890:	4b18      	ldr	r3, [pc, #96]	@ (80018f4 <MX_TIM4_Init+0x94>)
 8001892:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001896:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001898:	4b16      	ldr	r3, [pc, #88]	@ (80018f4 <MX_TIM4_Init+0x94>)
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <MX_TIM4_Init+0x94>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018a4:	4813      	ldr	r0, [pc, #76]	@ (80018f4 <MX_TIM4_Init+0x94>)
 80018a6:	f004 fa0b 	bl	8005cc0 <HAL_TIM_Base_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80018b0:	f000 fcc0 	bl	8002234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018ba:	f107 0310 	add.w	r3, r7, #16
 80018be:	4619      	mov	r1, r3
 80018c0:	480c      	ldr	r0, [pc, #48]	@ (80018f4 <MX_TIM4_Init+0x94>)
 80018c2:	f005 f98f 	bl	8006be4 <HAL_TIM_ConfigClockSource>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80018cc:	f000 fcb2 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018d0:	2320      	movs	r3, #32
 80018d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <MX_TIM4_Init+0x94>)
 80018de:	f006 f967 	bl	8007bb0 <HAL_TIMEx_MasterConfigSynchronization>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80018e8:	f000 fca4 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	2000049c 	.word	0x2000049c
 80018f8:	40000800 	.word	0x40000800

080018fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001902:	f107 0310 	add.w	r3, r7, #16
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800191a:	4b1d      	ldr	r3, [pc, #116]	@ (8001990 <MX_TIM5_Init+0x94>)
 800191c:	4a1d      	ldr	r2, [pc, #116]	@ (8001994 <MX_TIM5_Init+0x98>)
 800191e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001920:	4b1b      	ldr	r3, [pc, #108]	@ (8001990 <MX_TIM5_Init+0x94>)
 8001922:	22a9      	movs	r2, #169	@ 0xa9
 8001924:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001926:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <MX_TIM5_Init+0x94>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800192c:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <MX_TIM5_Init+0x94>)
 800192e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001932:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001934:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <MX_TIM5_Init+0x94>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <MX_TIM5_Init+0x94>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001940:	4813      	ldr	r0, [pc, #76]	@ (8001990 <MX_TIM5_Init+0x94>)
 8001942:	f004 f9bd 	bl	8005cc0 <HAL_TIM_Base_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800194c:	f000 fc72 	bl	8002234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001950:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001954:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	4619      	mov	r1, r3
 800195c:	480c      	ldr	r0, [pc, #48]	@ (8001990 <MX_TIM5_Init+0x94>)
 800195e:	f005 f941 	bl	8006be4 <HAL_TIM_ConfigClockSource>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001968:	f000 fc64 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	4619      	mov	r1, r3
 8001978:	4805      	ldr	r0, [pc, #20]	@ (8001990 <MX_TIM5_Init+0x94>)
 800197a:	f006 f919 	bl	8007bb0 <HAL_TIMEx_MasterConfigSynchronization>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001984:	f000 fc56 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001988:	bf00      	nop
 800198a:	3720      	adds	r7, #32
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000568 	.word	0x20000568
 8001994:	40000c00 	.word	0x40000c00

08001998 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019a8:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <MX_TIM6_Init+0x68>)
 80019aa:	4a16      	ldr	r2, [pc, #88]	@ (8001a04 <MX_TIM6_Init+0x6c>)
 80019ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1699;
 80019ae:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <MX_TIM6_Init+0x68>)
 80019b0:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80019b4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b6:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <MX_TIM6_Init+0x68>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 80019bc:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <MX_TIM6_Init+0x68>)
 80019be:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80019c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <MX_TIM6_Init+0x68>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019ca:	480d      	ldr	r0, [pc, #52]	@ (8001a00 <MX_TIM6_Init+0x68>)
 80019cc:	f004 f978 	bl	8005cc0 <HAL_TIM_Base_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80019d6:	f000 fc2d 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	4619      	mov	r1, r3
 80019e6:	4806      	ldr	r0, [pc, #24]	@ (8001a00 <MX_TIM6_Init+0x68>)
 80019e8:	f006 f8e2 	bl	8007bb0 <HAL_TIMEx_MasterConfigSynchronization>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80019f2:	f000 fc1f 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000634 	.word	0x20000634
 8001a04:	40001000 	.word	0x40001000

08001a08 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <MX_TIM16_Init+0x58>)
 8001a0e:	4a15      	ldr	r2, [pc, #84]	@ (8001a64 <MX_TIM16_Init+0x5c>)
 8001a10:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001a12:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <MX_TIM16_Init+0x58>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a18:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <MX_TIM16_Init+0x58>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001a1e:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <MX_TIM16_Init+0x58>)
 8001a20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a24:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <MX_TIM16_Init+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <MX_TIM16_Init+0x58>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a32:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <MX_TIM16_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001a38:	4809      	ldr	r0, [pc, #36]	@ (8001a60 <MX_TIM16_Init+0x58>)
 8001a3a:	f004 f941 	bl	8005cc0 <HAL_TIM_Base_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001a44:	f000 fbf6 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001a48:	2108      	movs	r1, #8
 8001a4a:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <MX_TIM16_Init+0x58>)
 8001a4c:	f004 fc04 	bl	8006258 <HAL_TIM_OnePulse_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001a56:	f000 fbed 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000700 	.word	0x20000700
 8001a64:	40014400 	.word	0x40014400

08001a68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a6c:	4b23      	ldr	r3, [pc, #140]	@ (8001afc <MX_USART2_UART_Init+0x94>)
 8001a6e:	4a24      	ldr	r2, [pc, #144]	@ (8001b00 <MX_USART2_UART_Init+0x98>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001a72:	4b22      	ldr	r3, [pc, #136]	@ (8001afc <MX_USART2_UART_Init+0x94>)
 8001a74:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001a78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001a7a:	4b20      	ldr	r3, [pc, #128]	@ (8001afc <MX_USART2_UART_Init+0x94>)
 8001a7c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a80:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a82:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <MX_USART2_UART_Init+0x94>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001a88:	4b1c      	ldr	r3, [pc, #112]	@ (8001afc <MX_USART2_UART_Init+0x94>)
 8001a8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a90:	4b1a      	ldr	r3, [pc, #104]	@ (8001afc <MX_USART2_UART_Init+0x94>)
 8001a92:	220c      	movs	r2, #12
 8001a94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a96:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <MX_USART2_UART_Init+0x94>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a9c:	4b17      	ldr	r3, [pc, #92]	@ (8001afc <MX_USART2_UART_Init+0x94>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aa2:	4b16      	ldr	r3, [pc, #88]	@ (8001afc <MX_USART2_UART_Init+0x94>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aa8:	4b14      	ldr	r3, [pc, #80]	@ (8001afc <MX_USART2_UART_Init+0x94>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aae:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <MX_USART2_UART_Init+0x94>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ab4:	4811      	ldr	r0, [pc, #68]	@ (8001afc <MX_USART2_UART_Init+0x94>)
 8001ab6:	f006 f961 	bl	8007d7c <HAL_UART_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001ac0:	f000 fbb8 	bl	8002234 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	480d      	ldr	r0, [pc, #52]	@ (8001afc <MX_USART2_UART_Init+0x94>)
 8001ac8:	f007 ff81 	bl	80099ce <HAL_UARTEx_SetTxFifoThreshold>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001ad2:	f000 fbaf 	bl	8002234 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4808      	ldr	r0, [pc, #32]	@ (8001afc <MX_USART2_UART_Init+0x94>)
 8001ada:	f007 ffb6 	bl	8009a4a <HAL_UARTEx_SetRxFifoThreshold>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001ae4:	f000 fba6 	bl	8002234 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ae8:	4804      	ldr	r0, [pc, #16]	@ (8001afc <MX_USART2_UART_Init+0x94>)
 8001aea:	f007 ff37 	bl	800995c <HAL_UARTEx_DisableFifoMode>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001af4:	f000 fb9e 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200007cc 	.word	0x200007cc
 8001b00:	40004400 	.word	0x40004400

08001b04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b0a:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <MX_DMA_Init+0x88>)
 8001b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001b8c <MX_DMA_Init+0x88>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b16:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <MX_DMA_Init+0x88>)
 8001b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b22:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <MX_DMA_Init+0x88>)
 8001b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b26:	4a19      	ldr	r2, [pc, #100]	@ (8001b8c <MX_DMA_Init+0x88>)
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b2e:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <MX_DMA_Init+0x88>)
 8001b30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b3a:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <MX_DMA_Init+0x88>)
 8001b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b3e:	4a13      	ldr	r2, [pc, #76]	@ (8001b8c <MX_DMA_Init+0x88>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b46:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <MX_DMA_Init+0x88>)
 8001b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	200b      	movs	r0, #11
 8001b58:	f002 fb69 	bl	800422e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b5c:	200b      	movs	r0, #11
 8001b5e:	f002 fb80 	bl	8004262 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	200c      	movs	r0, #12
 8001b68:	f002 fb61 	bl	800422e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001b6c:	200c      	movs	r0, #12
 8001b6e:	f002 fb78 	bl	8004262 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	2038      	movs	r0, #56	@ 0x38
 8001b78:	f002 fb59 	bl	800422e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001b7c:	2038      	movs	r0, #56	@ 0x38
 8001b7e:	f002 fb70 	bl	8004262 <HAL_NVIC_EnableIRQ>

}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000

08001b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	@ 0x28
 8001b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
 8001ba4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba6:	4b7c      	ldr	r3, [pc, #496]	@ (8001d98 <MX_GPIO_Init+0x208>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001baa:	4a7b      	ldr	r2, [pc, #492]	@ (8001d98 <MX_GPIO_Init+0x208>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bb2:	4b79      	ldr	r3, [pc, #484]	@ (8001d98 <MX_GPIO_Init+0x208>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bbe:	4b76      	ldr	r3, [pc, #472]	@ (8001d98 <MX_GPIO_Init+0x208>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc2:	4a75      	ldr	r2, [pc, #468]	@ (8001d98 <MX_GPIO_Init+0x208>)
 8001bc4:	f043 0320 	orr.w	r3, r3, #32
 8001bc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bca:	4b73      	ldr	r3, [pc, #460]	@ (8001d98 <MX_GPIO_Init+0x208>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bce:	f003 0320 	and.w	r3, r3, #32
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	4b70      	ldr	r3, [pc, #448]	@ (8001d98 <MX_GPIO_Init+0x208>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bda:	4a6f      	ldr	r2, [pc, #444]	@ (8001d98 <MX_GPIO_Init+0x208>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001be2:	4b6d      	ldr	r3, [pc, #436]	@ (8001d98 <MX_GPIO_Init+0x208>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	4b6a      	ldr	r3, [pc, #424]	@ (8001d98 <MX_GPIO_Init+0x208>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf2:	4a69      	ldr	r2, [pc, #420]	@ (8001d98 <MX_GPIO_Init+0x208>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bfa:	4b67      	ldr	r3, [pc, #412]	@ (8001d98 <MX_GPIO_Init+0x208>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c06:	4b64      	ldr	r3, [pc, #400]	@ (8001d98 <MX_GPIO_Init+0x208>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0a:	4a63      	ldr	r2, [pc, #396]	@ (8001d98 <MX_GPIO_Init+0x208>)
 8001c0c:	f043 0308 	orr.w	r3, r3, #8
 8001c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c12:	4b61      	ldr	r3, [pc, #388]	@ (8001d98 <MX_GPIO_Init+0x208>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8001c24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c28:	f002 ffea 	bl	8004c00 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	21b0      	movs	r1, #176	@ 0xb0
 8001c30:	485a      	ldr	r0, [pc, #360]	@ (8001d9c <MX_GPIO_Init+0x20c>)
 8001c32:	f002 ffe5 	bl	8004c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c36:	2200      	movs	r2, #0
 8001c38:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8001c3c:	4858      	ldr	r0, [pc, #352]	@ (8001da0 <MX_GPIO_Init+0x210>)
 8001c3e:	f002 ffdf 	bl	8004c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c48:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4619      	mov	r1, r3
 8001c58:	4850      	ldr	r0, [pc, #320]	@ (8001d9c <MX_GPIO_Init+0x20c>)
 8001c5a:	f002 fe4f 	bl	80048fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8
                           PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c5e:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8001c62:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c64:	2301      	movs	r3, #1
 8001c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4619      	mov	r1, r3
 8001c76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c7a:	f002 fe3f 	bl	80048fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001c7e:	23b0      	movs	r3, #176	@ 0xb0
 8001c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4841      	ldr	r0, [pc, #260]	@ (8001d9c <MX_GPIO_Init+0x20c>)
 8001c96:	f002 fe31 	bl	80048fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_6;
 8001c9a:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8001c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	483b      	ldr	r0, [pc, #236]	@ (8001da0 <MX_GPIO_Init+0x210>)
 8001cb4:	f002 fe22 	bl	80048fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cd0:	f002 fe14 	bl	80048fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cda:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	4619      	mov	r1, r3
 8001cea:	482c      	ldr	r0, [pc, #176]	@ (8001d9c <MX_GPIO_Init+0x20c>)
 8001cec:	f002 fe06 	bl	80048fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cf0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	4825      	ldr	r0, [pc, #148]	@ (8001d9c <MX_GPIO_Init+0x20c>)
 8001d06:	f002 fdf9 	bl	80048fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d12:	2302      	movs	r3, #2
 8001d14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4821      	ldr	r0, [pc, #132]	@ (8001da4 <MX_GPIO_Init+0x214>)
 8001d1e:	f002 fded 	bl	80048fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d22:	2330      	movs	r3, #48	@ 0x30
 8001d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	481a      	ldr	r0, [pc, #104]	@ (8001da0 <MX_GPIO_Init+0x210>)
 8001d36:	f002 fde1 	bl	80048fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d3a:	2380      	movs	r3, #128	@ 0x80
 8001d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4814      	ldr	r0, [pc, #80]	@ (8001da0 <MX_GPIO_Init+0x210>)
 8001d4e:	f002 fdd5 	bl	80048fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d52:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d58:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	480d      	ldr	r0, [pc, #52]	@ (8001da0 <MX_GPIO_Init+0x210>)
 8001d6a:	f002 fdc7 	bl	80048fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	2017      	movs	r0, #23
 8001d74:	f002 fa5b 	bl	800422e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d78:	2017      	movs	r0, #23
 8001d7a:	f002 fa72 	bl	8004262 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	2028      	movs	r0, #40	@ 0x28
 8001d84:	f002 fa53 	bl	800422e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d88:	2028      	movs	r0, #40	@ 0x28
 8001d8a:	f002 fa6a 	bl	8004262 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d8e:	bf00      	nop
 8001d90:	3728      	adds	r7, #40	@ 0x28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	48000800 	.word	0x48000800
 8001da0:	48000400 	.word	0x48000400
 8001da4:	48000c00 	.word	0x48000c00

08001da8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a0e      	ldr	r2, [pc, #56]	@ (8001dec <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d108      	bne.n	8001dca <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 8001db8:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	1e54      	subs	r4, r2, #1
 8001dc0:	f143 0500 	adc.w	r5, r3, #0
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001dc6:	e9c3 4500 	strd	r4, r5, [r3]
	}
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim6)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a09      	ldr	r2, [pc, #36]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d108      	bne.n	8001de4 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
	    check2 +=1;
 8001dd2:	4b09      	ldr	r3, [pc, #36]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	4a07      	ldr	r2, [pc, #28]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001dda:	6013      	str	r3, [r2, #0]
		Heartbeat();
 8001ddc:	f000 f8b4 	bl	8001f48 <Heartbeat>
		Routine();
 8001de0:	f000 f8ca 	bl	8001f78 <Routine>
	}
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bdb0      	pop	{r4, r5, r7, pc}
 8001dec:	20000568 	.word	0x20000568
 8001df0:	20000958 	.word	0x20000958
 8001df4:	20000634 	.word	0x20000634
 8001df8:	20001020 	.word	0x20001020

08001dfc <HAL_GPIO_EXTI_Callback>:
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_10)  //change mode IT
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e0c:	d121      	bne.n	8001e52 <HAL_GPIO_EXTI_Callback+0x56>
	{
//		setPosition = 100;
		mode += 1;
 8001e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e80 <HAL_GPIO_EXTI_Callback+0x84>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	3301      	adds	r3, #1
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4b1a      	ldr	r3, [pc, #104]	@ (8001e80 <HAL_GPIO_EXTI_Callback+0x84>)
 8001e18:	701a      	strb	r2, [r3, #0]
		if(mode==4){
 8001e1a:	4b19      	ldr	r3, [pc, #100]	@ (8001e80 <HAL_GPIO_EXTI_Callback+0x84>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d102      	bne.n	8001e28 <HAL_GPIO_EXTI_Callback+0x2c>
			mode = 1;
 8001e22:	4b17      	ldr	r3, [pc, #92]	@ (8001e80 <HAL_GPIO_EXTI_Callback+0x84>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	701a      	strb	r2, [r3, #0]
		}

		if(mode == 1){
 8001e28:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <HAL_GPIO_EXTI_Callback+0x84>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d106      	bne.n	8001e3e <HAL_GPIO_EXTI_Callback+0x42>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001e30:	2201      	movs	r2, #1
 8001e32:	2140      	movs	r1, #64	@ 0x40
 8001e34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e38:	f002 fee2 	bl	8004c00 <HAL_GPIO_WritePin>
 8001e3c:	e009      	b.n	8001e52 <HAL_GPIO_EXTI_Callback+0x56>
		}
		else if(mode == 2){
 8001e3e:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <HAL_GPIO_EXTI_Callback+0x84>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d105      	bne.n	8001e52 <HAL_GPIO_EXTI_Callback+0x56>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2140      	movs	r1, #64	@ 0x40
 8001e4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e4e:	f002 fed7 	bl	8004c00 <HAL_GPIO_WritePin>
		}
	}
	if(GPIO_Pin == GPIO_PIN_8){ //check top sensor
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e58:	d104      	bne.n	8001e64 <HAL_GPIO_EXTI_Callback+0x68>
		S_top = 1;
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <HAL_GPIO_EXTI_Callback+0x88>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
		//Vin = -2;
		DriveMotor();
 8001e60:	f000 f816 	bl	8001e90 <DriveMotor>
	}
	if(GPIO_Pin == GPIO_PIN_9){ //check down sensor
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e6a:	d104      	bne.n	8001e76 <HAL_GPIO_EXTI_Callback+0x7a>
		S_down = 1;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	601a      	str	r2, [r3, #0]
		//Vin = 2;
		DriveMotor();
 8001e72:	f000 f80d 	bl	8001e90 <DriveMotor>
	}
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000200 	.word	0x20000200
 8001e84:	200009b0 	.word	0x200009b0
 8001e88:	200009b4 	.word	0x200009b4
 8001e8c:	00000000 	.word	0x00000000

08001e90 <DriveMotor>:
	}
}

//--------------------------Drive Motor----------------//

void DriveMotor(){
 8001e90:	b598      	push	{r3, r4, r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	//PWM Motor
	duty_cycle = (fabs(Vin)*100)/24;
 8001e94:	4b26      	ldr	r3, [pc, #152]	@ (8001f30 <DriveMotor+0xa0>)
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	eef0 7ae7 	vabs.f32	s15, s15
 8001e9e:	ee17 0a90 	vmov	r0, s15
 8001ea2:	f7fe fb1d 	bl	80004e0 <__aeabi_f2d>
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	4b22      	ldr	r3, [pc, #136]	@ (8001f34 <DriveMotor+0xa4>)
 8001eac:	f7fe fb70 	bl	8000590 <__aeabi_dmul>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f38 <DriveMotor+0xa8>)
 8001ebe:	f7fe fc91 	bl	80007e4 <__aeabi_ddiv>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f7fe fd93 	bl	80009f4 <__aeabi_d2f>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4a1a      	ldr	r2, [pc, #104]	@ (8001f3c <DriveMotor+0xac>)
 8001ed2:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycle*9.99);
 8001ed4:	4b19      	ldr	r3, [pc, #100]	@ (8001f3c <DriveMotor+0xac>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fb01 	bl	80004e0 <__aeabi_f2d>
 8001ede:	a312      	add	r3, pc, #72	@ (adr r3, 8001f28 <DriveMotor+0x98>)
 8001ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee4:	f7fe fb54 	bl	8000590 <__aeabi_dmul>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4914      	ldr	r1, [pc, #80]	@ (8001f40 <DriveMotor+0xb0>)
 8001eee:	680c      	ldr	r4, [r1, #0]
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f7fe fd5e 	bl	80009b4 <__aeabi_d2uiz>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	6363      	str	r3, [r4, #52]	@ 0x34

	//Control Motor Direction
	if(Vin < 0){
 8001efc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <DriveMotor+0xa0>)
 8001efe:	edd3 7a00 	vldr	s15, [r3]
 8001f02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0a:	d505      	bpl.n	8001f18 <DriveMotor+0x88>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	2120      	movs	r1, #32
 8001f10:	480c      	ldr	r0, [pc, #48]	@ (8001f44 <DriveMotor+0xb4>)
 8001f12:	f002 fe75 	bl	8004c00 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
	}
}
 8001f16:	e004      	b.n	8001f22 <DriveMotor+0x92>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2120      	movs	r1, #32
 8001f1c:	4809      	ldr	r0, [pc, #36]	@ (8001f44 <DriveMotor+0xb4>)
 8001f1e:	f002 fe6f 	bl	8004c00 <HAL_GPIO_WritePin>
}
 8001f22:	bf00      	nop
 8001f24:	bd98      	pop	{r3, r4, r7, pc}
 8001f26:	bf00      	nop
 8001f28:	47ae147b 	.word	0x47ae147b
 8001f2c:	4023fae1 	.word	0x4023fae1
 8001f30:	20000964 	.word	0x20000964
 8001f34:	40590000 	.word	0x40590000
 8001f38:	40380000 	.word	0x40380000
 8001f3c:	20000204 	.word	0x20000204
 8001f40:	200003d0 	.word	0x200003d0
 8001f44:	48000800 	.word	0x48000800

08001f48 <Heartbeat>:
}

//-------------------------------------------------//

//-------------------------MODBUS FUNCTIONS--------------------------//
void Heartbeat(){
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16 = 22881;
 8001f4c:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <Heartbeat+0x2c>)
 8001f4e:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001f52:	801a      	strh	r2, [r3, #0]
	if (registerFrame[0x00].U16 == 18537)
 8001f54:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <Heartbeat+0x2c>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	f644 0269 	movw	r2, #18537	@ 0x4869
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d103      	bne.n	8001f68 <Heartbeat+0x20>
	{
		registerFrame[0x00].U16 = 22881;
 8001f60:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <Heartbeat+0x2c>)
 8001f62:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001f66:	801a      	strh	r2, [r3, #0]
	}
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000e90 	.word	0x20000e90

08001f78 <Routine>:
void Routine(){
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
		if (gripper_status == 0 ) // not suck  in
 8001f7c:	4b14      	ldr	r3, [pc, #80]	@ (8001fd0 <Routine+0x58>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d106      	bne.n	8001f92 <Routine+0x1a>
		{
			registerFrame[0x04].U16 = 0b0000;
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <Routine+0x5c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	811a      	strh	r2, [r3, #8]
			registerFrame[0x04].U16 = 0b0001;
 8001f8a:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <Routine+0x5c>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	811a      	strh	r2, [r3, #8]
 8001f90:	e009      	b.n	8001fa6 <Routine+0x2e>
		}
		else if (gripper_status == 1) // suck in
 8001f92:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd0 <Routine+0x58>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d105      	bne.n	8001fa6 <Routine+0x2e>
		{
			registerFrame[0x04].U16 = 0b0000;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <Routine+0x5c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	811a      	strh	r2, [r3, #8]
			registerFrame[0x04].U16 = 0b0010;
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <Routine+0x5c>)
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	811a      	strh	r2, [r3, #8]
		}
		registerFrame[0x10].U16 = 0;
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <Routine+0x5c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = 10;
 8001fac:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <Routine+0x5c>)
 8001fae:	220a      	movs	r2, #10
 8001fb0:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[0x12].U16 = 100;
 8001fb2:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <Routine+0x5c>)
 8001fb4:	2264      	movs	r2, #100	@ 0x64
 8001fb6:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[0x13].U16 = 10;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <Routine+0x5c>)
 8001fba:	220a      	movs	r2, #10
 8001fbc:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[0x40].U16 = 10;
 8001fbe:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <Routine+0x5c>)
 8001fc0:	220a      	movs	r2, #10
 8001fc2:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
//		}
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	20001028 	.word	0x20001028
 8001fd4:	20000e90 	.word	0x20000e90

08001fd8 <check_vaccum_status>:

void check_vaccum_status()
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
	check_state = 1;
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <check_vaccum_status+0x30>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]
	if(registerFrame[0x02].U16 == 0b0000){ // not suck  in
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800200c <check_vaccum_status+0x34>)
 8001fe4:	889b      	ldrh	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d102      	bne.n	8001ff0 <check_vaccum_status+0x18>
		vaccum_status = 0;
 8001fea:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <check_vaccum_status+0x38>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
//		registerFrame[0x04].U16 = 0b0000;
//		registerFrame[0x04].U16 = 0b0001;
	}
	if(registerFrame[0x02].U16 == 0b0001){ //suck  in
 8001ff0:	4b06      	ldr	r3, [pc, #24]	@ (800200c <check_vaccum_status+0x34>)
 8001ff2:	889b      	ldrh	r3, [r3, #4]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d102      	bne.n	8001ffe <check_vaccum_status+0x26>
		vaccum_status = 1;
 8001ff8:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <check_vaccum_status+0x38>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
//		registerFrame[0x04].U16 = 0b0000;
//		registerFrame[0x04].U16 = 0b0010;
	}
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	2000102c 	.word	0x2000102c
 800200c:	20000e90 	.word	0x20000e90
 8002010:	20001024 	.word	0x20001024

08002014 <check_gripper_status>:

void check_gripper_status()
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
	check_state = 2;
 8002018:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <check_gripper_status+0x30>)
 800201a:	2202      	movs	r2, #2
 800201c:	601a      	str	r2, [r3, #0]
	if(registerFrame[0x03].U16 == 0b0000) //back ,not on
 800201e:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <check_gripper_status+0x34>)
 8002020:	88db      	ldrh	r3, [r3, #6]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <check_gripper_status+0x18>
	{
		gripper_status = 0;
 8002026:	4b09      	ldr	r3, [pc, #36]	@ (800204c <check_gripper_status+0x38>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

	}
	if(registerFrame[0x03].U16 == 0b0001) //back ,not on
 800202c:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <check_gripper_status+0x34>)
 800202e:	88db      	ldrh	r3, [r3, #6]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d102      	bne.n	800203a <check_gripper_status+0x26>
	{
		gripper_status = 1;
 8002034:	4b05      	ldr	r3, [pc, #20]	@ (800204c <check_gripper_status+0x38>)
 8002036:	2201      	movs	r2, #1
 8002038:	601a      	str	r2, [r3, #0]

	}
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	2000102c 	.word	0x2000102c
 8002048:	20000e90 	.word	0x20000e90
 800204c:	20001028 	.word	0x20001028

08002050 <set_shelf>:

void set_shelf()
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
	check_state = 3;
 8002054:	4b22      	ldr	r3, [pc, #136]	@ (80020e0 <set_shelf+0x90>)
 8002056:	2203      	movs	r2, #3
 8002058:	601a      	str	r2, [r3, #0]
	if(registerFrame[0x01].U16 ==  0b0001)
 800205a:	4b22      	ldr	r3, [pc, #136]	@ (80020e4 <set_shelf+0x94>)
 800205c:	885b      	ldrh	r3, [r3, #2]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d102      	bne.n	8002068 <set_shelf+0x18>
	{
		set_shelf_state = 1;
 8002062:	4b21      	ldr	r3, [pc, #132]	@ (80020e8 <set_shelf+0x98>)
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]
	}

	if (set_shelf_state == 1 && Enter_click ==0)
 8002068:	4b1f      	ldr	r3, [pc, #124]	@ (80020e8 <set_shelf+0x98>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d109      	bne.n	8002084 <set_shelf+0x34>
 8002070:	4b1e      	ldr	r3, [pc, #120]	@ (80020ec <set_shelf+0x9c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d105      	bne.n	8002084 <set_shelf+0x34>
	{
			registerFrame[0x01].U16 = 0b0000;
 8002078:	4b1a      	ldr	r3, [pc, #104]	@ (80020e4 <set_shelf+0x94>)
 800207a:	2200      	movs	r2, #0
 800207c:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0b0001; // set
 800207e:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <set_shelf+0x94>)
 8002080:	2201      	movs	r2, #1
 8002082:	841a      	strh	r2, [r3, #32]
	}

	if (set_shelf_state == 1 && Enter_click == 1)
 8002084:	4b18      	ldr	r3, [pc, #96]	@ (80020e8 <set_shelf+0x98>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d123      	bne.n	80020d4 <set_shelf+0x84>
 800208c:	4b17      	ldr	r3, [pc, #92]	@ (80020ec <set_shelf+0x9c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d11f      	bne.n	80020d4 <set_shelf+0x84>
	{
		registerFrame[0x01].U16 = 0b0000;
 8002094:	4b13      	ldr	r3, [pc, #76]	@ (80020e4 <set_shelf+0x94>)
 8002096:	2200      	movs	r2, #0
 8002098:	805a      	strh	r2, [r3, #2]
		registerFrame[0x23].U16 = 10;
 800209a:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <set_shelf+0x94>)
 800209c:	220a      	movs	r2, #10
 800209e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		registerFrame[0x24].U16 = 20;
 80020a2:	4b10      	ldr	r3, [pc, #64]	@ (80020e4 <set_shelf+0x94>)
 80020a4:	2214      	movs	r2, #20
 80020a6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		registerFrame[0x25].U16 = 30;
 80020aa:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <set_shelf+0x94>)
 80020ac:	221e      	movs	r2, #30
 80020ae:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		registerFrame[0x26].U16 = 40;
 80020b2:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <set_shelf+0x94>)
 80020b4:	2228      	movs	r2, #40	@ 0x28
 80020b6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		registerFrame[0x27].U16 = 50;
 80020ba:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <set_shelf+0x94>)
 80020bc:	2232      	movs	r2, #50	@ 0x32
 80020be:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
		registerFrame[0x10].U16 = 0b0000;
 80020c2:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <set_shelf+0x94>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	841a      	strh	r2, [r3, #32]
		set_shelf_state = 0;
 80020c8:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <set_shelf+0x98>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
		Enter_click = 0;
 80020ce:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <set_shelf+0x9c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
	}

}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	2000102c 	.word	0x2000102c
 80020e4:	20000e90 	.word	0x20000e90
 80020e8:	20001034 	.word	0x20001034
 80020ec:	20001030 	.word	0x20001030

080020f0 <Pointmode>:

void Pointmode()
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 ==  0b1000) // Run Point Mode
 80020f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002160 <Pointmode+0x70>)
 80020f6:	885b      	ldrh	r3, [r3, #2]
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d110      	bne.n	800211e <Pointmode+0x2e>
		{
			 set_point_state = 1;
 80020fc:	4b19      	ldr	r3, [pc, #100]	@ (8002164 <Pointmode+0x74>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]
			 set_point_modbus = (registerFrame[0x30].U16) / 10;
 8002102:	4b17      	ldr	r3, [pc, #92]	@ (8002160 <Pointmode+0x70>)
 8002104:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002108:	4a17      	ldr	r2, [pc, #92]	@ (8002168 <Pointmode+0x78>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	08db      	lsrs	r3, r3, #3
 8002110:	b29b      	uxth	r3, r3
 8002112:	461a      	mov	r2, r3
 8002114:	4b15      	ldr	r3, [pc, #84]	@ (800216c <Pointmode+0x7c>)
 8002116:	601a      	str	r2, [r3, #0]
			 registerFrame[0x01].U16 = 0b0000;
 8002118:	4b11      	ldr	r3, [pc, #68]	@ (8002160 <Pointmode+0x70>)
 800211a:	2200      	movs	r2, #0
 800211c:	805a      	strh	r2, [r3, #2]
		}

	if (point_state_triger == 0 && set_point_state == 1)
 800211e:	4b14      	ldr	r3, [pc, #80]	@ (8002170 <Pointmode+0x80>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <Pointmode+0x44>
 8002126:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <Pointmode+0x74>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d102      	bne.n	8002134 <Pointmode+0x44>
		{
				registerFrame[0x10].U16 = 16;
 800212e:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <Pointmode+0x70>)
 8002130:	2210      	movs	r2, #16
 8002132:	841a      	strh	r2, [r3, #32]
		}
	if (point_state_triger == 1 && set_point_state == 1)
 8002134:	4b0e      	ldr	r3, [pc, #56]	@ (8002170 <Pointmode+0x80>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d10c      	bne.n	8002156 <Pointmode+0x66>
 800213c:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <Pointmode+0x74>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d108      	bne.n	8002156 <Pointmode+0x66>
		{
		registerFrame[0x10].U16 = 0;
 8002144:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <Pointmode+0x70>)
 8002146:	2200      	movs	r2, #0
 8002148:	841a      	strh	r2, [r3, #32]
		set_point_state = 0;
 800214a:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <Pointmode+0x74>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
		point_state_triger = 0;
 8002150:	4b07      	ldr	r3, [pc, #28]	@ (8002170 <Pointmode+0x80>)
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]

		}
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	20000e90 	.word	0x20000e90
 8002164:	20001040 	.word	0x20001040
 8002168:	cccccccd 	.word	0xcccccccd
 800216c:	20001038 	.word	0x20001038
 8002170:	2000103c 	.word	0x2000103c

08002174 <Home>:
void Home()
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 ==  0b0010) // Run Home Mode
 8002178:	4b15      	ldr	r3, [pc, #84]	@ (80021d0 <Home+0x5c>)
 800217a:	885b      	ldrh	r3, [r3, #2]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d105      	bne.n	800218c <Home+0x18>
		{
			 set_Home_state = 1;
 8002180:	4b14      	ldr	r3, [pc, #80]	@ (80021d4 <Home+0x60>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]
			 registerFrame[0x01].U16 = 0b0000;
 8002186:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <Home+0x5c>)
 8002188:	2200      	movs	r2, #0
 800218a:	805a      	strh	r2, [r3, #2]
		}
	if (Home_state_triger == 0 && set_Home_state == 1)
 800218c:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <Home+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d106      	bne.n	80021a2 <Home+0x2e>
 8002194:	4b0f      	ldr	r3, [pc, #60]	@ (80021d4 <Home+0x60>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d102      	bne.n	80021a2 <Home+0x2e>
	{
					registerFrame[0x10].U16 = 0b0010;
 800219c:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <Home+0x5c>)
 800219e:	2202      	movs	r2, #2
 80021a0:	841a      	strh	r2, [r3, #32]
	}
	if (Home_state_triger == 1 && set_Home_state == 1)
 80021a2:	4b0d      	ldr	r3, [pc, #52]	@ (80021d8 <Home+0x64>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d10c      	bne.n	80021c4 <Home+0x50>
 80021aa:	4b0a      	ldr	r3, [pc, #40]	@ (80021d4 <Home+0x60>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d108      	bne.n	80021c4 <Home+0x50>
	{
			registerFrame[0x10].U16 = 0;
 80021b2:	4b07      	ldr	r3, [pc, #28]	@ (80021d0 <Home+0x5c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	841a      	strh	r2, [r3, #32]
			set_Home_state = 0;
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <Home+0x60>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
			Home_state_triger = 0;
 80021be:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <Home+0x64>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
	}
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000e90 	.word	0x20000e90
 80021d4:	20001044 	.word	0x20001044
 80021d8:	20001048 	.word	0x20001048

080021dc <Run_jog>:
void Run_jog()
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 ==  0b0100) // Run Jog Mode
 80021e0:	4b10      	ldr	r3, [pc, #64]	@ (8002224 <Run_jog+0x48>)
 80021e2:	885b      	ldrh	r3, [r3, #2]
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d111      	bne.n	800220c <Run_jog+0x30>
			{
				set_jog_state = 1;
 80021e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002228 <Run_jog+0x4c>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
				PickOrder = registerFrame[0x21].U16;
 80021ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002224 <Run_jog+0x48>)
 80021f0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b0d      	ldr	r3, [pc, #52]	@ (800222c <Run_jog+0x50>)
 80021f8:	601a      	str	r2, [r3, #0]
				PlasceOrder = registerFrame[0x22].U16;
 80021fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002224 <Run_jog+0x48>)
 80021fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002200:	461a      	mov	r2, r3
 8002202:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <Run_jog+0x54>)
 8002204:	601a      	str	r2, [r3, #0]
				registerFrame[0x01].U16 = 0b0000;
 8002206:	4b07      	ldr	r3, [pc, #28]	@ (8002224 <Run_jog+0x48>)
 8002208:	2200      	movs	r2, #0
 800220a:	805a      	strh	r2, [r3, #2]
			}
	// run 5 loop of pick and place

	if (set_jog_state == 2)
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <Run_jog+0x4c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d102      	bne.n	800221a <Run_jog+0x3e>
	{
		registerFrame[0x10].U16 =  0b00000;
 8002214:	4b03      	ldr	r3, [pc, #12]	@ (8002224 <Run_jog+0x48>)
 8002216:	2200      	movs	r2, #0
 8002218:	841a      	strh	r2, [r3, #32]
	}
}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	20000e90 	.word	0x20000e90
 8002228:	20001054 	.word	0x20001054
 800222c:	2000104c 	.word	0x2000104c
 8002230:	20001050 	.word	0x20001050

08002234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002238:	b672      	cpsid	i
}
 800223a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <Error_Handler+0x8>

08002240 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002246:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <HAL_MspInit+0x44>)
 8002248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800224a:	4a0e      	ldr	r2, [pc, #56]	@ (8002284 <HAL_MspInit+0x44>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6613      	str	r3, [r2, #96]	@ 0x60
 8002252:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <HAL_MspInit+0x44>)
 8002254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	607b      	str	r3, [r7, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800225e:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <HAL_MspInit+0x44>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002262:	4a08      	ldr	r2, [pc, #32]	@ (8002284 <HAL_MspInit+0x44>)
 8002264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002268:	6593      	str	r3, [r2, #88]	@ 0x58
 800226a:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <HAL_MspInit+0x44>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002276:	f002 fd97 	bl	8004da8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000

08002288 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b0a0      	sub	sp, #128	@ 0x80
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022a0:	f107 0318 	add.w	r3, r7, #24
 80022a4:	2254      	movs	r2, #84	@ 0x54
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f007 fc91 	bl	8009bd0 <memset>
  if(hadc->Instance==ADC1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022b6:	d178      	bne.n	80023aa <HAL_ADC_MspInit+0x122>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80022b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80022be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80022c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022c4:	f107 0318 	add.w	r3, r7, #24
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 faab 	bl	8005824 <HAL_RCCEx_PeriphCLKConfig>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80022d4:	f7ff ffae 	bl	8002234 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80022d8:	4b36      	ldr	r3, [pc, #216]	@ (80023b4 <HAL_ADC_MspInit+0x12c>)
 80022da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022dc:	4a35      	ldr	r2, [pc, #212]	@ (80023b4 <HAL_ADC_MspInit+0x12c>)
 80022de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022e4:	4b33      	ldr	r3, [pc, #204]	@ (80023b4 <HAL_ADC_MspInit+0x12c>)
 80022e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f0:	4b30      	ldr	r3, [pc, #192]	@ (80023b4 <HAL_ADC_MspInit+0x12c>)
 80022f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f4:	4a2f      	ldr	r2, [pc, #188]	@ (80023b4 <HAL_ADC_MspInit+0x12c>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022fc:	4b2d      	ldr	r3, [pc, #180]	@ (80023b4 <HAL_ADC_MspInit+0x12c>)
 80022fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002308:	4b2a      	ldr	r3, [pc, #168]	@ (80023b4 <HAL_ADC_MspInit+0x12c>)
 800230a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230c:	4a29      	ldr	r2, [pc, #164]	@ (80023b4 <HAL_ADC_MspInit+0x12c>)
 800230e:	f043 0302 	orr.w	r3, r3, #2
 8002312:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002314:	4b27      	ldr	r3, [pc, #156]	@ (80023b4 <HAL_ADC_MspInit+0x12c>)
 8002316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002320:	2301      	movs	r3, #1
 8002322:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002324:	2303      	movs	r3, #3
 8002326:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002330:	4619      	mov	r1, r3
 8002332:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002336:	f002 fae1 	bl	80048fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800233a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800233e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002340:	2303      	movs	r3, #3
 8002342:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002348:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800234c:	4619      	mov	r1, r3
 800234e:	481a      	ldr	r0, [pc, #104]	@ (80023b8 <HAL_ADC_MspInit+0x130>)
 8002350:	f002 fad4 	bl	80048fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 8002354:	4b19      	ldr	r3, [pc, #100]	@ (80023bc <HAL_ADC_MspInit+0x134>)
 8002356:	4a1a      	ldr	r2, [pc, #104]	@ (80023c0 <HAL_ADC_MspInit+0x138>)
 8002358:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800235a:	4b18      	ldr	r3, [pc, #96]	@ (80023bc <HAL_ADC_MspInit+0x134>)
 800235c:	2205      	movs	r2, #5
 800235e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002360:	4b16      	ldr	r3, [pc, #88]	@ (80023bc <HAL_ADC_MspInit+0x134>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002366:	4b15      	ldr	r3, [pc, #84]	@ (80023bc <HAL_ADC_MspInit+0x134>)
 8002368:	2200      	movs	r2, #0
 800236a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800236c:	4b13      	ldr	r3, [pc, #76]	@ (80023bc <HAL_ADC_MspInit+0x134>)
 800236e:	2280      	movs	r2, #128	@ 0x80
 8002370:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002372:	4b12      	ldr	r3, [pc, #72]	@ (80023bc <HAL_ADC_MspInit+0x134>)
 8002374:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002378:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800237a:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <HAL_ADC_MspInit+0x134>)
 800237c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002380:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002382:	4b0e      	ldr	r3, [pc, #56]	@ (80023bc <HAL_ADC_MspInit+0x134>)
 8002384:	2220      	movs	r2, #32
 8002386:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002388:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <HAL_ADC_MspInit+0x134>)
 800238a:	2200      	movs	r2, #0
 800238c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800238e:	480b      	ldr	r0, [pc, #44]	@ (80023bc <HAL_ADC_MspInit+0x134>)
 8002390:	f001 ff82 	bl	8004298 <HAL_DMA_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 800239a:	f7ff ff4b 	bl	8002234 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a06      	ldr	r2, [pc, #24]	@ (80023bc <HAL_ADC_MspInit+0x134>)
 80023a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80023a4:	4a05      	ldr	r2, [pc, #20]	@ (80023bc <HAL_ADC_MspInit+0x134>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023aa:	bf00      	nop
 80023ac:	3780      	adds	r7, #128	@ 0x80
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	48000400 	.word	0x48000400
 80023bc:	200002a4 	.word	0x200002a4
 80023c0:	40020408 	.word	0x40020408

080023c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	@ 0x28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023e4:	d129      	bne.n	800243a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023e6:	4b17      	ldr	r3, [pc, #92]	@ (8002444 <HAL_TIM_Encoder_MspInit+0x80>)
 80023e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ea:	4a16      	ldr	r2, [pc, #88]	@ (8002444 <HAL_TIM_Encoder_MspInit+0x80>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80023f2:	4b14      	ldr	r3, [pc, #80]	@ (8002444 <HAL_TIM_Encoder_MspInit+0x80>)
 80023f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fe:	4b11      	ldr	r3, [pc, #68]	@ (8002444 <HAL_TIM_Encoder_MspInit+0x80>)
 8002400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002402:	4a10      	ldr	r2, [pc, #64]	@ (8002444 <HAL_TIM_Encoder_MspInit+0x80>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800240a:	4b0e      	ldr	r3, [pc, #56]	@ (8002444 <HAL_TIM_Encoder_MspInit+0x80>)
 800240c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8002416:	f248 0302 	movw	r3, #32770	@ 0x8002
 800241a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002424:	2300      	movs	r3, #0
 8002426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002428:	2301      	movs	r3, #1
 800242a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4619      	mov	r1, r3
 8002432:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002436:	f002 fa61 	bl	80048fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800243a:	bf00      	nop
 800243c:	3728      	adds	r7, #40	@ 0x28
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000

08002448 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a39      	ldr	r2, [pc, #228]	@ (800253c <HAL_TIM_Base_MspInit+0xf4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d10c      	bne.n	8002474 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800245a:	4b39      	ldr	r3, [pc, #228]	@ (8002540 <HAL_TIM_Base_MspInit+0xf8>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245e:	4a38      	ldr	r2, [pc, #224]	@ (8002540 <HAL_TIM_Base_MspInit+0xf8>)
 8002460:	f043 0302 	orr.w	r3, r3, #2
 8002464:	6593      	str	r3, [r2, #88]	@ 0x58
 8002466:	4b36      	ldr	r3, [pc, #216]	@ (8002540 <HAL_TIM_Base_MspInit+0xf8>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002472:	e05e      	b.n	8002532 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM4)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a32      	ldr	r2, [pc, #200]	@ (8002544 <HAL_TIM_Base_MspInit+0xfc>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d10c      	bne.n	8002498 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800247e:	4b30      	ldr	r3, [pc, #192]	@ (8002540 <HAL_TIM_Base_MspInit+0xf8>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002482:	4a2f      	ldr	r2, [pc, #188]	@ (8002540 <HAL_TIM_Base_MspInit+0xf8>)
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	6593      	str	r3, [r2, #88]	@ 0x58
 800248a:	4b2d      	ldr	r3, [pc, #180]	@ (8002540 <HAL_TIM_Base_MspInit+0xf8>)
 800248c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	61bb      	str	r3, [r7, #24]
 8002494:	69bb      	ldr	r3, [r7, #24]
}
 8002496:	e04c      	b.n	8002532 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM5)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a2a      	ldr	r2, [pc, #168]	@ (8002548 <HAL_TIM_Base_MspInit+0x100>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d114      	bne.n	80024cc <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024a2:	4b27      	ldr	r3, [pc, #156]	@ (8002540 <HAL_TIM_Base_MspInit+0xf8>)
 80024a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a6:	4a26      	ldr	r2, [pc, #152]	@ (8002540 <HAL_TIM_Base_MspInit+0xf8>)
 80024a8:	f043 0308 	orr.w	r3, r3, #8
 80024ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ae:	4b24      	ldr	r3, [pc, #144]	@ (8002540 <HAL_TIM_Base_MspInit+0xf8>)
 80024b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2100      	movs	r1, #0
 80024be:	2032      	movs	r0, #50	@ 0x32
 80024c0:	f001 feb5 	bl	800422e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80024c4:	2032      	movs	r0, #50	@ 0x32
 80024c6:	f001 fecc 	bl	8004262 <HAL_NVIC_EnableIRQ>
}
 80024ca:	e032      	b.n	8002532 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM6)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1e      	ldr	r2, [pc, #120]	@ (800254c <HAL_TIM_Base_MspInit+0x104>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d114      	bne.n	8002500 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80024d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <HAL_TIM_Base_MspInit+0xf8>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024da:	4a19      	ldr	r2, [pc, #100]	@ (8002540 <HAL_TIM_Base_MspInit+0xf8>)
 80024dc:	f043 0310 	orr.w	r3, r3, #16
 80024e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80024e2:	4b17      	ldr	r3, [pc, #92]	@ (8002540 <HAL_TIM_Base_MspInit+0xf8>)
 80024e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2100      	movs	r1, #0
 80024f2:	2036      	movs	r0, #54	@ 0x36
 80024f4:	f001 fe9b 	bl	800422e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024f8:	2036      	movs	r0, #54	@ 0x36
 80024fa:	f001 feb2 	bl	8004262 <HAL_NVIC_EnableIRQ>
}
 80024fe:	e018      	b.n	8002532 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a12      	ldr	r2, [pc, #72]	@ (8002550 <HAL_TIM_Base_MspInit+0x108>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d113      	bne.n	8002532 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800250a:	4b0d      	ldr	r3, [pc, #52]	@ (8002540 <HAL_TIM_Base_MspInit+0xf8>)
 800250c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800250e:	4a0c      	ldr	r2, [pc, #48]	@ (8002540 <HAL_TIM_Base_MspInit+0xf8>)
 8002510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002514:	6613      	str	r3, [r2, #96]	@ 0x60
 8002516:	4b0a      	ldr	r3, [pc, #40]	@ (8002540 <HAL_TIM_Base_MspInit+0xf8>)
 8002518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800251a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	2019      	movs	r0, #25
 8002528:	f001 fe81 	bl	800422e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800252c:	2019      	movs	r0, #25
 800252e:	f001 fe98 	bl	8004262 <HAL_NVIC_EnableIRQ>
}
 8002532:	bf00      	nop
 8002534:	3720      	adds	r7, #32
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40000400 	.word	0x40000400
 8002540:	40021000 	.word	0x40021000
 8002544:	40000800 	.word	0x40000800
 8002548:	40000c00 	.word	0x40000c00
 800254c:	40001000 	.word	0x40001000
 8002550:	40014400 	.word	0x40014400

08002554 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 030c 	add.w	r3, r7, #12
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a11      	ldr	r2, [pc, #68]	@ (80025b8 <HAL_TIM_MspPostInit+0x64>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d11b      	bne.n	80025ae <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002576:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <HAL_TIM_MspPostInit+0x68>)
 8002578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800257a:	4a10      	ldr	r2, [pc, #64]	@ (80025bc <HAL_TIM_MspPostInit+0x68>)
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002582:	4b0e      	ldr	r3, [pc, #56]	@ (80025bc <HAL_TIM_MspPostInit+0x68>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800258e:	2340      	movs	r3, #64	@ 0x40
 8002590:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800259e:	2302      	movs	r3, #2
 80025a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a2:	f107 030c 	add.w	r3, r7, #12
 80025a6:	4619      	mov	r1, r3
 80025a8:	4805      	ldr	r0, [pc, #20]	@ (80025c0 <HAL_TIM_MspPostInit+0x6c>)
 80025aa:	f002 f9a7 	bl	80048fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80025ae:	bf00      	nop
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40000400 	.word	0x40000400
 80025bc:	40021000 	.word	0x40021000
 80025c0:	48000800 	.word	0x48000800

080025c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b09e      	sub	sp, #120	@ 0x78
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025dc:	f107 0310 	add.w	r3, r7, #16
 80025e0:	2254      	movs	r2, #84	@ 0x54
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f007 faf3 	bl	8009bd0 <memset>
  if(huart->Instance==USART2)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002724 <HAL_UART_MspInit+0x160>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	f040 8092 	bne.w	800271a <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025f6:	2302      	movs	r3, #2
 80025f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025fe:	f107 0310 	add.w	r3, r7, #16
 8002602:	4618      	mov	r0, r3
 8002604:	f003 f90e 	bl	8005824 <HAL_RCCEx_PeriphCLKConfig>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800260e:	f7ff fe11 	bl	8002234 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002612:	4b45      	ldr	r3, [pc, #276]	@ (8002728 <HAL_UART_MspInit+0x164>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002616:	4a44      	ldr	r2, [pc, #272]	@ (8002728 <HAL_UART_MspInit+0x164>)
 8002618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800261c:	6593      	str	r3, [r2, #88]	@ 0x58
 800261e:	4b42      	ldr	r3, [pc, #264]	@ (8002728 <HAL_UART_MspInit+0x164>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	4b3f      	ldr	r3, [pc, #252]	@ (8002728 <HAL_UART_MspInit+0x164>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262e:	4a3e      	ldr	r2, [pc, #248]	@ (8002728 <HAL_UART_MspInit+0x164>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002636:	4b3c      	ldr	r3, [pc, #240]	@ (8002728 <HAL_UART_MspInit+0x164>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002642:	230c      	movs	r3, #12
 8002644:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002646:	2302      	movs	r3, #2
 8002648:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264e:	2300      	movs	r3, #0
 8002650:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002652:	2307      	movs	r3, #7
 8002654:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002656:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800265a:	4619      	mov	r1, r3
 800265c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002660:	f002 f94c 	bl	80048fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8002664:	4b31      	ldr	r3, [pc, #196]	@ (800272c <HAL_UART_MspInit+0x168>)
 8002666:	4a32      	ldr	r2, [pc, #200]	@ (8002730 <HAL_UART_MspInit+0x16c>)
 8002668:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800266a:	4b30      	ldr	r3, [pc, #192]	@ (800272c <HAL_UART_MspInit+0x168>)
 800266c:	221b      	movs	r2, #27
 800266e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002670:	4b2e      	ldr	r3, [pc, #184]	@ (800272c <HAL_UART_MspInit+0x168>)
 8002672:	2210      	movs	r2, #16
 8002674:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002676:	4b2d      	ldr	r3, [pc, #180]	@ (800272c <HAL_UART_MspInit+0x168>)
 8002678:	2200      	movs	r2, #0
 800267a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800267c:	4b2b      	ldr	r3, [pc, #172]	@ (800272c <HAL_UART_MspInit+0x168>)
 800267e:	2280      	movs	r2, #128	@ 0x80
 8002680:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002682:	4b2a      	ldr	r3, [pc, #168]	@ (800272c <HAL_UART_MspInit+0x168>)
 8002684:	2200      	movs	r2, #0
 8002686:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002688:	4b28      	ldr	r3, [pc, #160]	@ (800272c <HAL_UART_MspInit+0x168>)
 800268a:	2200      	movs	r2, #0
 800268c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800268e:	4b27      	ldr	r3, [pc, #156]	@ (800272c <HAL_UART_MspInit+0x168>)
 8002690:	2200      	movs	r2, #0
 8002692:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002694:	4b25      	ldr	r3, [pc, #148]	@ (800272c <HAL_UART_MspInit+0x168>)
 8002696:	2200      	movs	r2, #0
 8002698:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800269a:	4824      	ldr	r0, [pc, #144]	@ (800272c <HAL_UART_MspInit+0x168>)
 800269c:	f001 fdfc 	bl	8004298 <HAL_DMA_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80026a6:	f7ff fdc5 	bl	8002234 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a1f      	ldr	r2, [pc, #124]	@ (800272c <HAL_UART_MspInit+0x168>)
 80026ae:	67da      	str	r2, [r3, #124]	@ 0x7c
 80026b0:	4a1e      	ldr	r2, [pc, #120]	@ (800272c <HAL_UART_MspInit+0x168>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80026b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002734 <HAL_UART_MspInit+0x170>)
 80026b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002738 <HAL_UART_MspInit+0x174>)
 80026ba:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80026bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002734 <HAL_UART_MspInit+0x170>)
 80026be:	221a      	movs	r2, #26
 80026c0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002734 <HAL_UART_MspInit+0x170>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002734 <HAL_UART_MspInit+0x170>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026ce:	4b19      	ldr	r3, [pc, #100]	@ (8002734 <HAL_UART_MspInit+0x170>)
 80026d0:	2280      	movs	r2, #128	@ 0x80
 80026d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026d4:	4b17      	ldr	r3, [pc, #92]	@ (8002734 <HAL_UART_MspInit+0x170>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026da:	4b16      	ldr	r3, [pc, #88]	@ (8002734 <HAL_UART_MspInit+0x170>)
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80026e0:	4b14      	ldr	r3, [pc, #80]	@ (8002734 <HAL_UART_MspInit+0x170>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026e6:	4b13      	ldr	r3, [pc, #76]	@ (8002734 <HAL_UART_MspInit+0x170>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026ec:	4811      	ldr	r0, [pc, #68]	@ (8002734 <HAL_UART_MspInit+0x170>)
 80026ee:	f001 fdd3 	bl	8004298 <HAL_DMA_Init>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80026f8:	f7ff fd9c 	bl	8002234 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002734 <HAL_UART_MspInit+0x170>)
 8002700:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002704:	4a0b      	ldr	r2, [pc, #44]	@ (8002734 <HAL_UART_MspInit+0x170>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800270a:	2200      	movs	r2, #0
 800270c:	2100      	movs	r1, #0
 800270e:	2026      	movs	r0, #38	@ 0x26
 8002710:	f001 fd8d 	bl	800422e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002714:	2026      	movs	r0, #38	@ 0x26
 8002716:	f001 fda4 	bl	8004262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800271a:	bf00      	nop
 800271c:	3778      	adds	r7, #120	@ 0x78
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40004400 	.word	0x40004400
 8002728:	40021000 	.word	0x40021000
 800272c:	20000898 	.word	0x20000898
 8002730:	40020008 	.word	0x40020008
 8002734:	200008f8 	.word	0x200008f8
 8002738:	4002001c 	.word	0x4002001c

0800273c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002740:	bf00      	nop
 8002742:	e7fd      	b.n	8002740 <NMI_Handler+0x4>

08002744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <HardFault_Handler+0x4>

0800274c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002750:	bf00      	nop
 8002752:	e7fd      	b.n	8002750 <MemManage_Handler+0x4>

08002754 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002758:	bf00      	nop
 800275a:	e7fd      	b.n	8002758 <BusFault_Handler+0x4>

0800275c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <UsageFault_Handler+0x4>

08002764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002792:	f000 f8ef 	bl	8002974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80027a0:	4802      	ldr	r0, [pc, #8]	@ (80027ac <DMA1_Channel1_IRQHandler+0x10>)
 80027a2:	f001 ff5c 	bl	800465e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000898 	.word	0x20000898

080027b0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80027b4:	4802      	ldr	r0, [pc, #8]	@ (80027c0 <DMA1_Channel2_IRQHandler+0x10>)
 80027b6:	f001 ff52 	bl	800465e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200008f8 	.word	0x200008f8

080027c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80027c8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80027cc:	f002 fa30 	bl	8004c30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80027d0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80027d4:	f002 fa2c 	bl	8004c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}

080027dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80027e0:	4802      	ldr	r0, [pc, #8]	@ (80027ec <TIM1_UP_TIM16_IRQHandler+0x10>)
 80027e2:	f003 ff71 	bl	80066c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000700 	.word	0x20000700

080027f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027f4:	4802      	ldr	r0, [pc, #8]	@ (8002800 <USART2_IRQHandler+0x10>)
 80027f6:	f005 fca7 	bl	8008148 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200007cc 	.word	0x200007cc

08002804 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002808:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800280c:	f002 fa10 	bl	8004c30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002810:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002814:	f002 fa0c 	bl	8004c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}

0800281c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002820:	4802      	ldr	r0, [pc, #8]	@ (800282c <TIM5_IRQHandler+0x10>)
 8002822:	f003 ff51 	bl	80066c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000568 	.word	0x20000568

08002830 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002834:	4802      	ldr	r0, [pc, #8]	@ (8002840 <TIM6_DAC_IRQHandler+0x10>)
 8002836:	f003 ff47 	bl	80066c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000634 	.word	0x20000634

08002844 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002848:	4802      	ldr	r0, [pc, #8]	@ (8002854 <DMA2_Channel1_IRQHandler+0x10>)
 800284a:	f001 ff08 	bl	800465e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200002a4 	.word	0x200002a4

08002858 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800285c:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <SystemInit+0x20>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002862:	4a05      	ldr	r2, [pc, #20]	@ (8002878 <SystemInit+0x20>)
 8002864:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002868:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800287c:	480d      	ldr	r0, [pc, #52]	@ (80028b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800287e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002880:	f7ff ffea 	bl	8002858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002884:	480c      	ldr	r0, [pc, #48]	@ (80028b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002886:	490d      	ldr	r1, [pc, #52]	@ (80028bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002888:	4a0d      	ldr	r2, [pc, #52]	@ (80028c0 <LoopForever+0xe>)
  movs r3, #0
 800288a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800288c:	e002      	b.n	8002894 <LoopCopyDataInit>

0800288e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800288e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002892:	3304      	adds	r3, #4

08002894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002898:	d3f9      	bcc.n	800288e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800289a:	4a0a      	ldr	r2, [pc, #40]	@ (80028c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800289c:	4c0a      	ldr	r4, [pc, #40]	@ (80028c8 <LoopForever+0x16>)
  movs r3, #0
 800289e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028a0:	e001      	b.n	80028a6 <LoopFillZerobss>

080028a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a4:	3204      	adds	r2, #4

080028a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a8:	d3fb      	bcc.n	80028a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028aa:	f007 f999 	bl	8009be0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028ae:	f7fe fd9d 	bl	80013ec <main>

080028b2 <LoopForever>:

LoopForever:
    b LoopForever
 80028b2:	e7fe      	b.n	80028b2 <LoopForever>
  ldr   r0, =_estack
 80028b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028bc:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80028c0:	08009cac 	.word	0x08009cac
  ldr r2, =_sbss
 80028c4:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80028c8:	2000105c 	.word	0x2000105c

080028cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028cc:	e7fe      	b.n	80028cc <ADC1_2_IRQHandler>

080028ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d8:	2003      	movs	r0, #3
 80028da:	f001 fc9d 	bl	8004218 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028de:	2000      	movs	r0, #0
 80028e0:	f000 f80e 	bl	8002900 <HAL_InitTick>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	71fb      	strb	r3, [r7, #7]
 80028ee:	e001      	b.n	80028f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028f0:	f7ff fca6 	bl	8002240 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028f4:	79fb      	ldrb	r3, [r7, #7]

}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800290c:	4b16      	ldr	r3, [pc, #88]	@ (8002968 <HAL_InitTick+0x68>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d022      	beq.n	800295a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002914:	4b15      	ldr	r3, [pc, #84]	@ (800296c <HAL_InitTick+0x6c>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4b13      	ldr	r3, [pc, #76]	@ (8002968 <HAL_InitTick+0x68>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002920:	fbb1 f3f3 	udiv	r3, r1, r3
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	4618      	mov	r0, r3
 800292a:	f001 fca8 	bl	800427e <HAL_SYSTICK_Config>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10f      	bne.n	8002954 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b0f      	cmp	r3, #15
 8002938:	d809      	bhi.n	800294e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800293a:	2200      	movs	r2, #0
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002942:	f001 fc74 	bl	800422e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002946:	4a0a      	ldr	r2, [pc, #40]	@ (8002970 <HAL_InitTick+0x70>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	e007      	b.n	800295e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
 8002952:	e004      	b.n	800295e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
 8002958:	e001      	b.n	800295e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800295e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000210 	.word	0x20000210
 800296c:	20000208 	.word	0x20000208
 8002970:	2000020c 	.word	0x2000020c

08002974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002978:	4b05      	ldr	r3, [pc, #20]	@ (8002990 <HAL_IncTick+0x1c>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <HAL_IncTick+0x20>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4413      	add	r3, r2
 8002982:	4a03      	ldr	r2, [pc, #12]	@ (8002990 <HAL_IncTick+0x1c>)
 8002984:	6013      	str	r3, [r2, #0]
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	20001058 	.word	0x20001058
 8002994:	20000210 	.word	0x20000210

08002998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return uwTick;
 800299c:	4b03      	ldr	r3, [pc, #12]	@ (80029ac <HAL_GetTick+0x14>)
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20001058 	.word	0x20001058

080029b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	609a      	str	r2, [r3, #8]
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	609a      	str	r2, [r3, #8]
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3360      	adds	r3, #96	@ 0x60
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b08      	ldr	r3, [pc, #32]	@ (8002a5c <LL_ADC_SetOffset+0x44>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a50:	bf00      	nop
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	03fff000 	.word	0x03fff000

08002a60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3360      	adds	r3, #96	@ 0x60
 8002a6e:	461a      	mov	r2, r3
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3360      	adds	r3, #96	@ 0x60
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ab6:	bf00      	nop
 8002ab8:	371c      	adds	r7, #28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b087      	sub	sp, #28
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	3360      	adds	r3, #96	@ 0x60
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002aec:	bf00      	nop
 8002aee:	371c      	adds	r7, #28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	3360      	adds	r3, #96	@ 0x60
 8002b08:	461a      	mov	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	615a      	str	r2, [r3, #20]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b087      	sub	sp, #28
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3330      	adds	r3, #48	@ 0x30
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	4413      	add	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	211f      	movs	r1, #31
 8002ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	401a      	ands	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	0e9b      	lsrs	r3, r3, #26
 8002bb2:	f003 011f 	and.w	r1, r3, #31
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bc6:	bf00      	nop
 8002bc8:	371c      	adds	r7, #28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b087      	sub	sp, #28
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3314      	adds	r3, #20
 8002be2:	461a      	mov	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	0e5b      	lsrs	r3, r3, #25
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	4413      	add	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	0d1b      	lsrs	r3, r3, #20
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2107      	movs	r1, #7
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	401a      	ands	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	0d1b      	lsrs	r3, r3, #20
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	431a      	orrs	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c1c:	bf00      	nop
 8002c1e:	371c      	adds	r7, #28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c40:	43db      	mvns	r3, r3
 8002c42:	401a      	ands	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f003 0318 	and.w	r3, r3, #24
 8002c4a:	4908      	ldr	r1, [pc, #32]	@ (8002c6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c4c:	40d9      	lsrs	r1, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	400b      	ands	r3, r1
 8002c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c56:	431a      	orrs	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	0007ffff 	.word	0x0007ffff

08002c70 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 031f 	and.w	r3, r3, #31
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002c9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6093      	str	r3, [r2, #8]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cc4:	d101      	bne.n	8002cca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002ce8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d14:	d101      	bne.n	8002d1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d3c:	f043 0201 	orr.w	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <LL_ADC_IsEnabled+0x18>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <LL_ADC_IsEnabled+0x1a>
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d86:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d8a:	f043 0204 	orr.w	r2, r3, #4
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d101      	bne.n	8002db6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d101      	bne.n	8002ddc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b089      	sub	sp, #36	@ 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e1a9      	b.n	800315a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d109      	bne.n	8002e28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff fa37 	bl	8002288 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff3f 	bl	8002cb0 <LL_ADC_IsDeepPowerDownEnabled>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d004      	beq.n	8002e42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff25 	bl	8002c8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff ff5a 	bl	8002d00 <LL_ADC_IsInternalRegulatorEnabled>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d115      	bne.n	8002e7e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff3e 	bl	8002cd8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e5c:	4b9c      	ldr	r3, [pc, #624]	@ (80030d0 <HAL_ADC_Init+0x2e4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	099b      	lsrs	r3, r3, #6
 8002e62:	4a9c      	ldr	r2, [pc, #624]	@ (80030d4 <HAL_ADC_Init+0x2e8>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	099b      	lsrs	r3, r3, #6
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e70:	e002      	b.n	8002e78 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3b01      	subs	r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f9      	bne.n	8002e72 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff ff3c 	bl	8002d00 <LL_ADC_IsInternalRegulatorEnabled>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10d      	bne.n	8002eaa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e92:	f043 0210 	orr.w	r2, r3, #16
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9e:	f043 0201 	orr.w	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ff75 	bl	8002d9e <LL_ADC_REG_IsConversionOngoing>
 8002eb4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f040 8142 	bne.w	8003148 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f040 813e 	bne.w	8003148 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002ed4:	f043 0202 	orr.w	r2, r3, #2
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff35 	bl	8002d50 <LL_ADC_IsEnabled>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d141      	bne.n	8002f70 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ef4:	d004      	beq.n	8002f00 <HAL_ADC_Init+0x114>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a77      	ldr	r2, [pc, #476]	@ (80030d8 <HAL_ADC_Init+0x2ec>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d10f      	bne.n	8002f20 <HAL_ADC_Init+0x134>
 8002f00:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f04:	f7ff ff24 	bl	8002d50 <LL_ADC_IsEnabled>
 8002f08:	4604      	mov	r4, r0
 8002f0a:	4873      	ldr	r0, [pc, #460]	@ (80030d8 <HAL_ADC_Init+0x2ec>)
 8002f0c:	f7ff ff20 	bl	8002d50 <LL_ADC_IsEnabled>
 8002f10:	4603      	mov	r3, r0
 8002f12:	4323      	orrs	r3, r4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	e012      	b.n	8002f46 <HAL_ADC_Init+0x15a>
 8002f20:	486e      	ldr	r0, [pc, #440]	@ (80030dc <HAL_ADC_Init+0x2f0>)
 8002f22:	f7ff ff15 	bl	8002d50 <LL_ADC_IsEnabled>
 8002f26:	4604      	mov	r4, r0
 8002f28:	486d      	ldr	r0, [pc, #436]	@ (80030e0 <HAL_ADC_Init+0x2f4>)
 8002f2a:	f7ff ff11 	bl	8002d50 <LL_ADC_IsEnabled>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	431c      	orrs	r4, r3
 8002f32:	486c      	ldr	r0, [pc, #432]	@ (80030e4 <HAL_ADC_Init+0x2f8>)
 8002f34:	f7ff ff0c 	bl	8002d50 <LL_ADC_IsEnabled>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	4323      	orrs	r3, r4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf0c      	ite	eq
 8002f40:	2301      	moveq	r3, #1
 8002f42:	2300      	movne	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d012      	beq.n	8002f70 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f52:	d004      	beq.n	8002f5e <HAL_ADC_Init+0x172>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a5f      	ldr	r2, [pc, #380]	@ (80030d8 <HAL_ADC_Init+0x2ec>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADC_Init+0x176>
 8002f5e:	4a62      	ldr	r2, [pc, #392]	@ (80030e8 <HAL_ADC_Init+0x2fc>)
 8002f60:	e000      	b.n	8002f64 <HAL_ADC_Init+0x178>
 8002f62:	4a62      	ldr	r2, [pc, #392]	@ (80030ec <HAL_ADC_Init+0x300>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	f7ff fd20 	bl	80029b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	7f5b      	ldrb	r3, [r3, #29]
 8002f74:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f7a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002f80:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002f86:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f8e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d106      	bne.n	8002fac <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	045b      	lsls	r3, r3, #17
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d009      	beq.n	8002fc8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	4b48      	ldr	r3, [pc, #288]	@ (80030f0 <HAL_ADC_Init+0x304>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	69b9      	ldr	r1, [r7, #24]
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fee4 	bl	8002dc4 <LL_ADC_INJ_IsConversionOngoing>
 8002ffc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d17f      	bne.n	8003104 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d17c      	bne.n	8003104 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800300e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003016:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003026:	f023 0302 	bic.w	r3, r3, #2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	430b      	orrs	r3, r1
 8003032:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d017      	beq.n	800306c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800304a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003054:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003058:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6911      	ldr	r1, [r2, #16]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	430b      	orrs	r3, r1
 8003066:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800306a:	e013      	b.n	8003094 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691a      	ldr	r2, [r3, #16]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800307a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800308c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003090:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800309a:	2b01      	cmp	r3, #1
 800309c:	d12a      	bne.n	80030f4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80030a8:	f023 0304 	bic.w	r3, r3, #4
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80030b4:	4311      	orrs	r1, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80030ba:	4311      	orrs	r1, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80030c0:	430a      	orrs	r2, r1
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0201 	orr.w	r2, r2, #1
 80030cc:	611a      	str	r2, [r3, #16]
 80030ce:	e019      	b.n	8003104 <HAL_ADC_Init+0x318>
 80030d0:	20000208 	.word	0x20000208
 80030d4:	053e2d63 	.word	0x053e2d63
 80030d8:	50000100 	.word	0x50000100
 80030dc:	50000400 	.word	0x50000400
 80030e0:	50000500 	.word	0x50000500
 80030e4:	50000600 	.word	0x50000600
 80030e8:	50000300 	.word	0x50000300
 80030ec:	50000700 	.word	0x50000700
 80030f0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d10c      	bne.n	8003126 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	f023 010f 	bic.w	r1, r3, #15
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	1e5a      	subs	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	631a      	str	r2, [r3, #48]	@ 0x30
 8003124:	e007      	b.n	8003136 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 020f 	bic.w	r2, r2, #15
 8003134:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313a:	f023 0303 	bic.w	r3, r3, #3
 800313e:	f043 0201 	orr.w	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003146:	e007      	b.n	8003158 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314c:	f043 0210 	orr.w	r2, r3, #16
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003158:	7ffb      	ldrb	r3, [r7, #31]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3724      	adds	r7, #36	@ 0x24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd90      	pop	{r4, r7, pc}
 8003162:	bf00      	nop

08003164 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003178:	d004      	beq.n	8003184 <HAL_ADC_Start_DMA+0x20>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a5a      	ldr	r2, [pc, #360]	@ (80032e8 <HAL_ADC_Start_DMA+0x184>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d101      	bne.n	8003188 <HAL_ADC_Start_DMA+0x24>
 8003184:	4b59      	ldr	r3, [pc, #356]	@ (80032ec <HAL_ADC_Start_DMA+0x188>)
 8003186:	e000      	b.n	800318a <HAL_ADC_Start_DMA+0x26>
 8003188:	4b59      	ldr	r3, [pc, #356]	@ (80032f0 <HAL_ADC_Start_DMA+0x18c>)
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fd70 	bl	8002c70 <LL_ADC_GetMultimode>
 8003190:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fe01 	bl	8002d9e <LL_ADC_REG_IsConversionOngoing>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 809b 	bne.w	80032da <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_ADC_Start_DMA+0x4e>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e096      	b.n	80032e0 <HAL_ADC_Start_DMA+0x17c>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a4d      	ldr	r2, [pc, #308]	@ (80032f4 <HAL_ADC_Start_DMA+0x190>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d008      	beq.n	80031d6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2b05      	cmp	r3, #5
 80031ce:	d002      	beq.n	80031d6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	2b09      	cmp	r3, #9
 80031d4:	d17a      	bne.n	80032cc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fcf6 	bl	8003bc8 <ADC_Enable>
 80031dc:	4603      	mov	r3, r0
 80031de:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d16d      	bne.n	80032c2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a3a      	ldr	r2, [pc, #232]	@ (80032e8 <HAL_ADC_Start_DMA+0x184>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d009      	beq.n	8003218 <HAL_ADC_Start_DMA+0xb4>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a3b      	ldr	r2, [pc, #236]	@ (80032f8 <HAL_ADC_Start_DMA+0x194>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d002      	beq.n	8003214 <HAL_ADC_Start_DMA+0xb0>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	e003      	b.n	800321c <HAL_ADC_Start_DMA+0xb8>
 8003214:	4b39      	ldr	r3, [pc, #228]	@ (80032fc <HAL_ADC_Start_DMA+0x198>)
 8003216:	e001      	b.n	800321c <HAL_ADC_Start_DMA+0xb8>
 8003218:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	4293      	cmp	r3, r2
 8003222:	d002      	beq.n	800322a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d105      	bne.n	8003236 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d006      	beq.n	8003250 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003246:	f023 0206 	bic.w	r2, r3, #6
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	661a      	str	r2, [r3, #96]	@ 0x60
 800324e:	e002      	b.n	8003256 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325a:	4a29      	ldr	r2, [pc, #164]	@ (8003300 <HAL_ADC_Start_DMA+0x19c>)
 800325c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003262:	4a28      	ldr	r2, [pc, #160]	@ (8003304 <HAL_ADC_Start_DMA+0x1a0>)
 8003264:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326a:	4a27      	ldr	r2, [pc, #156]	@ (8003308 <HAL_ADC_Start_DMA+0x1a4>)
 800326c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	221c      	movs	r2, #28
 8003274:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0210 	orr.w	r2, r2, #16
 800328c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 0201 	orr.w	r2, r2, #1
 800329c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3340      	adds	r3, #64	@ 0x40
 80032a8:	4619      	mov	r1, r3
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f001 f89b 	bl	80043e8 <HAL_DMA_Start_IT>
 80032b2:	4603      	mov	r3, r0
 80032b4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fd5b 	bl	8002d76 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80032c0:	e00d      	b.n	80032de <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80032ca:	e008      	b.n	80032de <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80032d8:	e001      	b.n	80032de <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032da:	2302      	movs	r3, #2
 80032dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032de:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	50000100 	.word	0x50000100
 80032ec:	50000300 	.word	0x50000300
 80032f0:	50000700 	.word	0x50000700
 80032f4:	50000600 	.word	0x50000600
 80032f8:	50000500 	.word	0x50000500
 80032fc:	50000400 	.word	0x50000400
 8003300:	08003cf5 	.word	0x08003cf5
 8003304:	08003dcd 	.word	0x08003dcd
 8003308:	08003de9 	.word	0x08003de9

0800330c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b0b6      	sub	sp, #216	@ 0xd8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003362:	2b01      	cmp	r3, #1
 8003364:	d102      	bne.n	800336c <HAL_ADC_ConfigChannel+0x24>
 8003366:	2302      	movs	r3, #2
 8003368:	f000 bc13 	b.w	8003b92 <HAL_ADC_ConfigChannel+0x84a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff fd10 	bl	8002d9e <LL_ADC_REG_IsConversionOngoing>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	f040 83f3 	bne.w	8003b6c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6859      	ldr	r1, [r3, #4]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	f7ff fbf1 	bl	8002b7a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fcfe 	bl	8002d9e <LL_ADC_REG_IsConversionOngoing>
 80033a2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fd0a 	bl	8002dc4 <LL_ADC_INJ_IsConversionOngoing>
 80033b0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f040 81d9 	bne.w	8003770 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f040 81d4 	bne.w	8003770 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033d0:	d10f      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2200      	movs	r2, #0
 80033dc:	4619      	mov	r1, r3
 80033de:	f7ff fbf8 	bl	8002bd2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fb9f 	bl	8002b2e <LL_ADC_SetSamplingTimeCommonConfig>
 80033f0:	e00e      	b.n	8003410 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6819      	ldr	r1, [r3, #0]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	461a      	mov	r2, r3
 8003400:	f7ff fbe7 	bl	8002bd2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2100      	movs	r1, #0
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fb8f 	bl	8002b2e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	695a      	ldr	r2, [r3, #20]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	08db      	lsrs	r3, r3, #3
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	2b04      	cmp	r3, #4
 8003430:	d022      	beq.n	8003478 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	6919      	ldr	r1, [r3, #16]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003442:	f7ff fae9 	bl	8002a18 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6919      	ldr	r1, [r3, #16]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	461a      	mov	r2, r3
 8003454:	f7ff fb35 	bl	8002ac2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003464:	2b01      	cmp	r3, #1
 8003466:	d102      	bne.n	800346e <HAL_ADC_ConfigChannel+0x126>
 8003468:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800346c:	e000      	b.n	8003470 <HAL_ADC_ConfigChannel+0x128>
 800346e:	2300      	movs	r3, #0
 8003470:	461a      	mov	r2, r3
 8003472:	f7ff fb41 	bl	8002af8 <LL_ADC_SetOffsetSaturation>
 8003476:	e17b      	b.n	8003770 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2100      	movs	r1, #0
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff faee 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 8003484:	4603      	mov	r3, r0
 8003486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x15c>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2100      	movs	r1, #0
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fae3 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 800349a:	4603      	mov	r3, r0
 800349c:	0e9b      	lsrs	r3, r3, #26
 800349e:	f003 021f 	and.w	r2, r3, #31
 80034a2:	e01e      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x19a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff fad8 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80034d2:	2320      	movs	r3, #32
 80034d4:	e004      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80034d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d105      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x1b2>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	0e9b      	lsrs	r3, r3, #26
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	e018      	b.n	800352c <HAL_ADC_ConfigChannel+0x1e4>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800350e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003512:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003516:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800351e:	2320      	movs	r3, #32
 8003520:	e004      	b.n	800352c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003522:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800352c:	429a      	cmp	r2, r3
 800352e:	d106      	bne.n	800353e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2200      	movs	r2, #0
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff faa7 	bl	8002a8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2101      	movs	r1, #1
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fa8b 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 800354a:	4603      	mov	r3, r0
 800354c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10a      	bne.n	800356a <HAL_ADC_ConfigChannel+0x222>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2101      	movs	r1, #1
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fa80 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 8003560:	4603      	mov	r3, r0
 8003562:	0e9b      	lsrs	r3, r3, #26
 8003564:	f003 021f 	and.w	r2, r3, #31
 8003568:	e01e      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x260>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2101      	movs	r1, #1
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fa75 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 8003576:	4603      	mov	r3, r0
 8003578:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003580:	fa93 f3a3 	rbit	r3, r3
 8003584:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003588:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800358c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003590:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003598:	2320      	movs	r3, #32
 800359a:	e004      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800359c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035a0:	fab3 f383 	clz	r3, r3
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d105      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x278>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	0e9b      	lsrs	r3, r3, #26
 80035ba:	f003 031f 	and.w	r3, r3, #31
 80035be:	e018      	b.n	80035f2 <HAL_ADC_ConfigChannel+0x2aa>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035cc:	fa93 f3a3 	rbit	r3, r3
 80035d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80035d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80035dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80035e4:	2320      	movs	r3, #32
 80035e6:	e004      	b.n	80035f2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80035e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035ec:	fab3 f383 	clz	r3, r3
 80035f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d106      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2200      	movs	r2, #0
 80035fc:	2101      	movs	r1, #1
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff fa44 	bl	8002a8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2102      	movs	r1, #2
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff fa28 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 8003610:	4603      	mov	r3, r0
 8003612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10a      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x2e8>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2102      	movs	r1, #2
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fa1d 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 8003626:	4603      	mov	r3, r0
 8003628:	0e9b      	lsrs	r3, r3, #26
 800362a:	f003 021f 	and.w	r2, r3, #31
 800362e:	e01e      	b.n	800366e <HAL_ADC_ConfigChannel+0x326>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2102      	movs	r1, #2
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff fa12 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 800363c:	4603      	mov	r3, r0
 800363e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003646:	fa93 f3a3 	rbit	r3, r3
 800364a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800364e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003652:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003656:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800365e:	2320      	movs	r3, #32
 8003660:	e004      	b.n	800366c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003662:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003666:	fab3 f383 	clz	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003676:	2b00      	cmp	r3, #0
 8003678:	d105      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x33e>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	0e9b      	lsrs	r3, r3, #26
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	e016      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x36c>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003698:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800369a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800369e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80036a6:	2320      	movs	r3, #32
 80036a8:	e004      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80036aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036ae:	fab3 f383 	clz	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d106      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2200      	movs	r2, #0
 80036be:	2102      	movs	r1, #2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff f9e3 	bl	8002a8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2103      	movs	r1, #3
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff f9c7 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10a      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x3aa>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2103      	movs	r1, #3
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff f9bc 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 80036e8:	4603      	mov	r3, r0
 80036ea:	0e9b      	lsrs	r3, r3, #26
 80036ec:	f003 021f 	and.w	r2, r3, #31
 80036f0:	e017      	b.n	8003722 <HAL_ADC_ConfigChannel+0x3da>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2103      	movs	r1, #3
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff f9b1 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 80036fe:	4603      	mov	r3, r0
 8003700:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003704:	fa93 f3a3 	rbit	r3, r3
 8003708:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800370a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800370c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800370e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003714:	2320      	movs	r3, #32
 8003716:	e003      	b.n	8003720 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003718:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372a:	2b00      	cmp	r3, #0
 800372c:	d105      	bne.n	800373a <HAL_ADC_ConfigChannel+0x3f2>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	0e9b      	lsrs	r3, r3, #26
 8003734:	f003 031f 	and.w	r3, r3, #31
 8003738:	e011      	b.n	800375e <HAL_ADC_ConfigChannel+0x416>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003748:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800374a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800374c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003752:	2320      	movs	r3, #32
 8003754:	e003      	b.n	800375e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003758:	fab3 f383 	clz	r3, r3
 800375c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800375e:	429a      	cmp	r2, r3
 8003760:	d106      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2200      	movs	r2, #0
 8003768:	2103      	movs	r1, #3
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff f98e 	bl	8002a8c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff faeb 	bl	8002d50 <LL_ADC_IsEnabled>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	f040 813d 	bne.w	80039fc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6819      	ldr	r1, [r3, #0]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	461a      	mov	r2, r3
 8003790:	f7ff fa4a 	bl	8002c28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4aa2      	ldr	r2, [pc, #648]	@ (8003a24 <HAL_ADC_ConfigChannel+0x6dc>)
 800379a:	4293      	cmp	r3, r2
 800379c:	f040 812e 	bne.w	80039fc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10b      	bne.n	80037c8 <HAL_ADC_ConfigChannel+0x480>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	0e9b      	lsrs	r3, r3, #26
 80037b6:	3301      	adds	r3, #1
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	2b09      	cmp	r3, #9
 80037be:	bf94      	ite	ls
 80037c0:	2301      	movls	r3, #1
 80037c2:	2300      	movhi	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	e019      	b.n	80037fc <HAL_ADC_ConfigChannel+0x4b4>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037d0:	fa93 f3a3 	rbit	r3, r3
 80037d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80037d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037d8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80037da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80037e0:	2320      	movs	r3, #32
 80037e2:	e003      	b.n	80037ec <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80037e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037e6:	fab3 f383 	clz	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	3301      	adds	r3, #1
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	2b09      	cmp	r3, #9
 80037f4:	bf94      	ite	ls
 80037f6:	2301      	movls	r3, #1
 80037f8:	2300      	movhi	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d079      	beq.n	80038f4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003808:	2b00      	cmp	r3, #0
 800380a:	d107      	bne.n	800381c <HAL_ADC_ConfigChannel+0x4d4>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	0e9b      	lsrs	r3, r3, #26
 8003812:	3301      	adds	r3, #1
 8003814:	069b      	lsls	r3, r3, #26
 8003816:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800381a:	e015      	b.n	8003848 <HAL_ADC_ConfigChannel+0x500>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003824:	fa93 f3a3 	rbit	r3, r3
 8003828:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800382a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800382c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800382e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003834:	2320      	movs	r3, #32
 8003836:	e003      	b.n	8003840 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800383a:	fab3 f383 	clz	r3, r3
 800383e:	b2db      	uxtb	r3, r3
 8003840:	3301      	adds	r3, #1
 8003842:	069b      	lsls	r3, r3, #26
 8003844:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003850:	2b00      	cmp	r3, #0
 8003852:	d109      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x520>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	0e9b      	lsrs	r3, r3, #26
 800385a:	3301      	adds	r3, #1
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	2101      	movs	r1, #1
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	e017      	b.n	8003898 <HAL_ADC_ConfigChannel+0x550>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003870:	fa93 f3a3 	rbit	r3, r3
 8003874:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003876:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003878:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800387a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003880:	2320      	movs	r3, #32
 8003882:	e003      	b.n	800388c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003884:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003886:	fab3 f383 	clz	r3, r3
 800388a:	b2db      	uxtb	r3, r3
 800388c:	3301      	adds	r3, #1
 800388e:	f003 031f 	and.w	r3, r3, #31
 8003892:	2101      	movs	r1, #1
 8003894:	fa01 f303 	lsl.w	r3, r1, r3
 8003898:	ea42 0103 	orr.w	r1, r2, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10a      	bne.n	80038be <HAL_ADC_ConfigChannel+0x576>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	0e9b      	lsrs	r3, r3, #26
 80038ae:	3301      	adds	r3, #1
 80038b0:	f003 021f 	and.w	r2, r3, #31
 80038b4:	4613      	mov	r3, r2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4413      	add	r3, r2
 80038ba:	051b      	lsls	r3, r3, #20
 80038bc:	e018      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x5a8>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80038cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80038d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80038d6:	2320      	movs	r3, #32
 80038d8:	e003      	b.n	80038e2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80038da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038dc:	fab3 f383 	clz	r3, r3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	f003 021f 	and.w	r2, r3, #31
 80038e8:	4613      	mov	r3, r2
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4413      	add	r3, r2
 80038ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038f0:	430b      	orrs	r3, r1
 80038f2:	e07e      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d107      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x5c8>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0e9b      	lsrs	r3, r3, #26
 8003906:	3301      	adds	r3, #1
 8003908:	069b      	lsls	r3, r3, #26
 800390a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800390e:	e015      	b.n	800393c <HAL_ADC_ConfigChannel+0x5f4>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003918:	fa93 f3a3 	rbit	r3, r3
 800391c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800391e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003920:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003928:	2320      	movs	r3, #32
 800392a:	e003      	b.n	8003934 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800392c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392e:	fab3 f383 	clz	r3, r3
 8003932:	b2db      	uxtb	r3, r3
 8003934:	3301      	adds	r3, #1
 8003936:	069b      	lsls	r3, r3, #26
 8003938:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HAL_ADC_ConfigChannel+0x614>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	0e9b      	lsrs	r3, r3, #26
 800394e:	3301      	adds	r3, #1
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	2101      	movs	r1, #1
 8003956:	fa01 f303 	lsl.w	r3, r1, r3
 800395a:	e017      	b.n	800398c <HAL_ADC_ConfigChannel+0x644>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	fa93 f3a3 	rbit	r3, r3
 8003968:	61fb      	str	r3, [r7, #28]
  return result;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003974:	2320      	movs	r3, #32
 8003976:	e003      	b.n	8003980 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397a:	fab3 f383 	clz	r3, r3
 800397e:	b2db      	uxtb	r3, r3
 8003980:	3301      	adds	r3, #1
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	2101      	movs	r1, #1
 8003988:	fa01 f303 	lsl.w	r3, r1, r3
 800398c:	ea42 0103 	orr.w	r1, r2, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10d      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x670>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	0e9b      	lsrs	r3, r3, #26
 80039a2:	3301      	adds	r3, #1
 80039a4:	f003 021f 	and.w	r2, r3, #31
 80039a8:	4613      	mov	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4413      	add	r3, r2
 80039ae:	3b1e      	subs	r3, #30
 80039b0:	051b      	lsls	r3, r3, #20
 80039b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039b6:	e01b      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x6a8>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	fa93 f3a3 	rbit	r3, r3
 80039c4:	613b      	str	r3, [r7, #16]
  return result;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80039d0:	2320      	movs	r3, #32
 80039d2:	e003      	b.n	80039dc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	fab3 f383 	clz	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	3301      	adds	r3, #1
 80039de:	f003 021f 	and.w	r2, r3, #31
 80039e2:	4613      	mov	r3, r2
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	4413      	add	r3, r2
 80039e8:	3b1e      	subs	r3, #30
 80039ea:	051b      	lsls	r3, r3, #20
 80039ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039f0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039f6:	4619      	mov	r1, r3
 80039f8:	f7ff f8eb 	bl	8002bd2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4b09      	ldr	r3, [pc, #36]	@ (8003a28 <HAL_ADC_ConfigChannel+0x6e0>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80be 	beq.w	8003b86 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a12:	d004      	beq.n	8003a1e <HAL_ADC_ConfigChannel+0x6d6>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a04      	ldr	r2, [pc, #16]	@ (8003a2c <HAL_ADC_ConfigChannel+0x6e4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d10a      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x6ec>
 8003a1e:	4b04      	ldr	r3, [pc, #16]	@ (8003a30 <HAL_ADC_ConfigChannel+0x6e8>)
 8003a20:	e009      	b.n	8003a36 <HAL_ADC_ConfigChannel+0x6ee>
 8003a22:	bf00      	nop
 8003a24:	407f0000 	.word	0x407f0000
 8003a28:	80080000 	.word	0x80080000
 8003a2c:	50000100 	.word	0x50000100
 8003a30:	50000300 	.word	0x50000300
 8003a34:	4b59      	ldr	r3, [pc, #356]	@ (8003b9c <HAL_ADC_ConfigChannel+0x854>)
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe ffe0 	bl	80029fc <LL_ADC_GetCommonPathInternalCh>
 8003a3c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a56      	ldr	r2, [pc, #344]	@ (8003ba0 <HAL_ADC_ConfigChannel+0x858>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d004      	beq.n	8003a54 <HAL_ADC_ConfigChannel+0x70c>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a55      	ldr	r2, [pc, #340]	@ (8003ba4 <HAL_ADC_ConfigChannel+0x85c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d13a      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d134      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a68:	d005      	beq.n	8003a76 <HAL_ADC_ConfigChannel+0x72e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a4e      	ldr	r2, [pc, #312]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x860>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	f040 8085 	bne.w	8003b80 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a7e:	d004      	beq.n	8003a8a <HAL_ADC_ConfigChannel+0x742>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a49      	ldr	r2, [pc, #292]	@ (8003bac <HAL_ADC_ConfigChannel+0x864>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d101      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x746>
 8003a8a:	4a49      	ldr	r2, [pc, #292]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x868>)
 8003a8c:	e000      	b.n	8003a90 <HAL_ADC_ConfigChannel+0x748>
 8003a8e:	4a43      	ldr	r2, [pc, #268]	@ (8003b9c <HAL_ADC_ConfigChannel+0x854>)
 8003a90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f7fe ff9b 	bl	80029d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003aa0:	4b44      	ldr	r3, [pc, #272]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x86c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	099b      	lsrs	r3, r3, #6
 8003aa6:	4a44      	ldr	r2, [pc, #272]	@ (8003bb8 <HAL_ADC_ConfigChannel+0x870>)
 8003aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aac:	099b      	lsrs	r3, r3, #6
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003aba:	e002      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f9      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ac8:	e05a      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a3b      	ldr	r2, [pc, #236]	@ (8003bbc <HAL_ADC_ConfigChannel+0x874>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d125      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ad4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d11f      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a31      	ldr	r2, [pc, #196]	@ (8003bac <HAL_ADC_ConfigChannel+0x864>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d104      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x7ac>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a34      	ldr	r2, [pc, #208]	@ (8003bc0 <HAL_ADC_ConfigChannel+0x878>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d047      	beq.n	8003b84 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003afc:	d004      	beq.n	8003b08 <HAL_ADC_ConfigChannel+0x7c0>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a2a      	ldr	r2, [pc, #168]	@ (8003bac <HAL_ADC_ConfigChannel+0x864>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d101      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x7c4>
 8003b08:	4a29      	ldr	r2, [pc, #164]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x868>)
 8003b0a:	e000      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x7c6>
 8003b0c:	4a23      	ldr	r2, [pc, #140]	@ (8003b9c <HAL_ADC_ConfigChannel+0x854>)
 8003b0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b16:	4619      	mov	r1, r3
 8003b18:	4610      	mov	r0, r2
 8003b1a:	f7fe ff5c 	bl	80029d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b1e:	e031      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a27      	ldr	r2, [pc, #156]	@ (8003bc4 <HAL_ADC_ConfigChannel+0x87c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d12d      	bne.n	8003b86 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d127      	bne.n	8003b86 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bac <HAL_ADC_ConfigChannel+0x864>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d022      	beq.n	8003b86 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b48:	d004      	beq.n	8003b54 <HAL_ADC_ConfigChannel+0x80c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a17      	ldr	r2, [pc, #92]	@ (8003bac <HAL_ADC_ConfigChannel+0x864>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d101      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x810>
 8003b54:	4a16      	ldr	r2, [pc, #88]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x868>)
 8003b56:	e000      	b.n	8003b5a <HAL_ADC_ConfigChannel+0x812>
 8003b58:	4a10      	ldr	r2, [pc, #64]	@ (8003b9c <HAL_ADC_ConfigChannel+0x854>)
 8003b5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b62:	4619      	mov	r1, r3
 8003b64:	4610      	mov	r0, r2
 8003b66:	f7fe ff36 	bl	80029d6 <LL_ADC_SetCommonPathInternalCh>
 8003b6a:	e00c      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003b7e:	e002      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b80:	bf00      	nop
 8003b82:	e000      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b84:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b8e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	37d8      	adds	r7, #216	@ 0xd8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	50000700 	.word	0x50000700
 8003ba0:	c3210000 	.word	0xc3210000
 8003ba4:	90c00010 	.word	0x90c00010
 8003ba8:	50000600 	.word	0x50000600
 8003bac:	50000100 	.word	0x50000100
 8003bb0:	50000300 	.word	0x50000300
 8003bb4:	20000208 	.word	0x20000208
 8003bb8:	053e2d63 	.word	0x053e2d63
 8003bbc:	c7520000 	.word	0xc7520000
 8003bc0:	50000500 	.word	0x50000500
 8003bc4:	cb840000 	.word	0xcb840000

08003bc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff f8b9 	bl	8002d50 <LL_ADC_IsEnabled>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d176      	bne.n	8003cd2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	4b3c      	ldr	r3, [pc, #240]	@ (8003cdc <ADC_Enable+0x114>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00d      	beq.n	8003c0e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf6:	f043 0210 	orr.w	r2, r3, #16
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c02:	f043 0201 	orr.w	r2, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e062      	b.n	8003cd4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff f888 	bl	8002d28 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c20:	d004      	beq.n	8003c2c <ADC_Enable+0x64>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a2e      	ldr	r2, [pc, #184]	@ (8003ce0 <ADC_Enable+0x118>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d101      	bne.n	8003c30 <ADC_Enable+0x68>
 8003c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce4 <ADC_Enable+0x11c>)
 8003c2e:	e000      	b.n	8003c32 <ADC_Enable+0x6a>
 8003c30:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce8 <ADC_Enable+0x120>)
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe fee2 	bl	80029fc <LL_ADC_GetCommonPathInternalCh>
 8003c38:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003c3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d013      	beq.n	8003c6a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c42:	4b2a      	ldr	r3, [pc, #168]	@ (8003cec <ADC_Enable+0x124>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	099b      	lsrs	r3, r3, #6
 8003c48:	4a29      	ldr	r2, [pc, #164]	@ (8003cf0 <ADC_Enable+0x128>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	099b      	lsrs	r3, r3, #6
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	4613      	mov	r3, r2
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c5c:	e002      	b.n	8003c64 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	3b01      	subs	r3, #1
 8003c62:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f9      	bne.n	8003c5e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c6a:	f7fe fe95 	bl	8002998 <HAL_GetTick>
 8003c6e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c70:	e028      	b.n	8003cc4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff f86a 	bl	8002d50 <LL_ADC_IsEnabled>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d104      	bne.n	8003c8c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff f84e 	bl	8002d28 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c8c:	f7fe fe84 	bl	8002998 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d914      	bls.n	8003cc4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d00d      	beq.n	8003cc4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cac:	f043 0210 	orr.w	r2, r3, #16
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb8:	f043 0201 	orr.w	r2, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e007      	b.n	8003cd4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d1cf      	bne.n	8003c72 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	8000003f 	.word	0x8000003f
 8003ce0:	50000100 	.word	0x50000100
 8003ce4:	50000300 	.word	0x50000300
 8003ce8:	50000700 	.word	0x50000700
 8003cec:	20000208 	.word	0x20000208
 8003cf0:	053e2d63 	.word	0x053e2d63

08003cf4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d06:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d14b      	bne.n	8003da6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d12:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d021      	beq.n	8003d6c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fe ff11 	bl	8002b54 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d032      	beq.n	8003d9e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d12b      	bne.n	8003d9e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d11f      	bne.n	8003d9e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d62:	f043 0201 	orr.w	r2, r3, #1
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d6a:	e018      	b.n	8003d9e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d111      	bne.n	8003d9e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d105      	bne.n	8003d9e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d96:	f043 0201 	orr.w	r2, r3, #1
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f7ff fab4 	bl	800330c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003da4:	e00e      	b.n	8003dc4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003daa:	f003 0310 	and.w	r3, r3, #16
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f7ff fabe 	bl	8003334 <HAL_ADC_ErrorCallback>
}
 8003db8:	e004      	b.n	8003dc4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	4798      	blx	r3
}
 8003dc4:	bf00      	nop
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f7ff faa0 	bl	8003320 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003de0:	bf00      	nop
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dfa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e06:	f043 0204 	orr.w	r2, r3, #4
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f7ff fa90 	bl	8003334 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e14:	bf00      	nop
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <LL_ADC_IsEnabled>:
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <LL_ADC_IsEnabled+0x18>
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <LL_ADC_IsEnabled+0x1a>
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <LL_ADC_REG_IsConversionOngoing>:
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d101      	bne.n	8003e5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003e68:	b590      	push	{r4, r7, lr}
 8003e6a:	b0a1      	sub	sp, #132	@ 0x84
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e0e7      	b.n	8004056 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003e8e:	2300      	movs	r3, #0
 8003e90:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003e92:	2300      	movs	r3, #0
 8003e94:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e9e:	d102      	bne.n	8003ea6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ea0:	4b6f      	ldr	r3, [pc, #444]	@ (8004060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	e009      	b.n	8003eba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a6e      	ldr	r2, [pc, #440]	@ (8004064 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d102      	bne.n	8003eb6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003eb0:	4b6d      	ldr	r3, [pc, #436]	@ (8004068 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003eb2:	60bb      	str	r3, [r7, #8]
 8003eb4:	e001      	b.n	8003eba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10b      	bne.n	8003ed8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec4:	f043 0220 	orr.w	r2, r3, #32
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0be      	b.n	8004056 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff ffb1 	bl	8003e42 <LL_ADC_REG_IsConversionOngoing>
 8003ee0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff ffab 	bl	8003e42 <LL_ADC_REG_IsConversionOngoing>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f040 80a0 	bne.w	8004034 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003ef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f040 809c 	bne.w	8004034 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f04:	d004      	beq.n	8003f10 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a55      	ldr	r2, [pc, #340]	@ (8004060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d101      	bne.n	8003f14 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003f10:	4b56      	ldr	r3, [pc, #344]	@ (800406c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003f12:	e000      	b.n	8003f16 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003f14:	4b56      	ldr	r3, [pc, #344]	@ (8004070 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003f16:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d04b      	beq.n	8003fb8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003f20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	6859      	ldr	r1, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f32:	035b      	lsls	r3, r3, #13
 8003f34:	430b      	orrs	r3, r1
 8003f36:	431a      	orrs	r2, r3
 8003f38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f44:	d004      	beq.n	8003f50 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a45      	ldr	r2, [pc, #276]	@ (8004060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d10f      	bne.n	8003f70 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003f50:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003f54:	f7ff ff62 	bl	8003e1c <LL_ADC_IsEnabled>
 8003f58:	4604      	mov	r4, r0
 8003f5a:	4841      	ldr	r0, [pc, #260]	@ (8004060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f5c:	f7ff ff5e 	bl	8003e1c <LL_ADC_IsEnabled>
 8003f60:	4603      	mov	r3, r0
 8003f62:	4323      	orrs	r3, r4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	e012      	b.n	8003f96 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003f70:	483c      	ldr	r0, [pc, #240]	@ (8004064 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f72:	f7ff ff53 	bl	8003e1c <LL_ADC_IsEnabled>
 8003f76:	4604      	mov	r4, r0
 8003f78:	483b      	ldr	r0, [pc, #236]	@ (8004068 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f7a:	f7ff ff4f 	bl	8003e1c <LL_ADC_IsEnabled>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	431c      	orrs	r4, r3
 8003f82:	483c      	ldr	r0, [pc, #240]	@ (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003f84:	f7ff ff4a 	bl	8003e1c <LL_ADC_IsEnabled>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	4323      	orrs	r3, r4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d056      	beq.n	8004048 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003fa2:	f023 030f 	bic.w	r3, r3, #15
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	6811      	ldr	r1, [r2, #0]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	6892      	ldr	r2, [r2, #8]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fb4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003fb6:	e047      	b.n	8004048 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003fb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fc2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fcc:	d004      	beq.n	8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a23      	ldr	r2, [pc, #140]	@ (8004060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d10f      	bne.n	8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003fd8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003fdc:	f7ff ff1e 	bl	8003e1c <LL_ADC_IsEnabled>
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	481f      	ldr	r0, [pc, #124]	@ (8004060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003fe4:	f7ff ff1a 	bl	8003e1c <LL_ADC_IsEnabled>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	4323      	orrs	r3, r4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	bf0c      	ite	eq
 8003ff0:	2301      	moveq	r3, #1
 8003ff2:	2300      	movne	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	e012      	b.n	800401e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003ff8:	481a      	ldr	r0, [pc, #104]	@ (8004064 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ffa:	f7ff ff0f 	bl	8003e1c <LL_ADC_IsEnabled>
 8003ffe:	4604      	mov	r4, r0
 8004000:	4819      	ldr	r0, [pc, #100]	@ (8004068 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004002:	f7ff ff0b 	bl	8003e1c <LL_ADC_IsEnabled>
 8004006:	4603      	mov	r3, r0
 8004008:	431c      	orrs	r4, r3
 800400a:	481a      	ldr	r0, [pc, #104]	@ (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800400c:	f7ff ff06 	bl	8003e1c <LL_ADC_IsEnabled>
 8004010:	4603      	mov	r3, r0
 8004012:	4323      	orrs	r3, r4
 8004014:	2b00      	cmp	r3, #0
 8004016:	bf0c      	ite	eq
 8004018:	2301      	moveq	r3, #1
 800401a:	2300      	movne	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d012      	beq.n	8004048 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004022:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800402a:	f023 030f 	bic.w	r3, r3, #15
 800402e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004030:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004032:	e009      	b.n	8004048 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004038:	f043 0220 	orr.w	r2, r3, #32
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004046:	e000      	b.n	800404a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004048:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004052:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004056:	4618      	mov	r0, r3
 8004058:	3784      	adds	r7, #132	@ 0x84
 800405a:	46bd      	mov	sp, r7
 800405c:	bd90      	pop	{r4, r7, pc}
 800405e:	bf00      	nop
 8004060:	50000100 	.word	0x50000100
 8004064:	50000400 	.word	0x50000400
 8004068:	50000500 	.word	0x50000500
 800406c:	50000300 	.word	0x50000300
 8004070:	50000700 	.word	0x50000700
 8004074:	50000600 	.word	0x50000600

08004078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004088:	4b0c      	ldr	r3, [pc, #48]	@ (80040bc <__NVIC_SetPriorityGrouping+0x44>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004094:	4013      	ands	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80040a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040aa:	4a04      	ldr	r2, [pc, #16]	@ (80040bc <__NVIC_SetPriorityGrouping+0x44>)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	60d3      	str	r3, [r2, #12]
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	e000ed00 	.word	0xe000ed00

080040c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040c4:	4b04      	ldr	r3, [pc, #16]	@ (80040d8 <__NVIC_GetPriorityGrouping+0x18>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	0a1b      	lsrs	r3, r3, #8
 80040ca:	f003 0307 	and.w	r3, r3, #7
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	e000ed00 	.word	0xe000ed00

080040dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	db0b      	blt.n	8004106 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	f003 021f 	and.w	r2, r3, #31
 80040f4:	4907      	ldr	r1, [pc, #28]	@ (8004114 <__NVIC_EnableIRQ+0x38>)
 80040f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	2001      	movs	r0, #1
 80040fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	e000e100 	.word	0xe000e100

08004118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	6039      	str	r1, [r7, #0]
 8004122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004128:	2b00      	cmp	r3, #0
 800412a:	db0a      	blt.n	8004142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	b2da      	uxtb	r2, r3
 8004130:	490c      	ldr	r1, [pc, #48]	@ (8004164 <__NVIC_SetPriority+0x4c>)
 8004132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004136:	0112      	lsls	r2, r2, #4
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	440b      	add	r3, r1
 800413c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004140:	e00a      	b.n	8004158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	b2da      	uxtb	r2, r3
 8004146:	4908      	ldr	r1, [pc, #32]	@ (8004168 <__NVIC_SetPriority+0x50>)
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	3b04      	subs	r3, #4
 8004150:	0112      	lsls	r2, r2, #4
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	440b      	add	r3, r1
 8004156:	761a      	strb	r2, [r3, #24]
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	e000e100 	.word	0xe000e100
 8004168:	e000ed00 	.word	0xe000ed00

0800416c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800416c:	b480      	push	{r7}
 800416e:	b089      	sub	sp, #36	@ 0x24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f1c3 0307 	rsb	r3, r3, #7
 8004186:	2b04      	cmp	r3, #4
 8004188:	bf28      	it	cs
 800418a:	2304      	movcs	r3, #4
 800418c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	3304      	adds	r3, #4
 8004192:	2b06      	cmp	r3, #6
 8004194:	d902      	bls.n	800419c <NVIC_EncodePriority+0x30>
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	3b03      	subs	r3, #3
 800419a:	e000      	b.n	800419e <NVIC_EncodePriority+0x32>
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43da      	mvns	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	401a      	ands	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	fa01 f303 	lsl.w	r3, r1, r3
 80041be:	43d9      	mvns	r1, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041c4:	4313      	orrs	r3, r2
         );
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3724      	adds	r7, #36	@ 0x24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
	...

080041d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3b01      	subs	r3, #1
 80041e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041e4:	d301      	bcc.n	80041ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041e6:	2301      	movs	r3, #1
 80041e8:	e00f      	b.n	800420a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004214 <SysTick_Config+0x40>)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041f2:	210f      	movs	r1, #15
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041f8:	f7ff ff8e 	bl	8004118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041fc:	4b05      	ldr	r3, [pc, #20]	@ (8004214 <SysTick_Config+0x40>)
 80041fe:	2200      	movs	r2, #0
 8004200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004202:	4b04      	ldr	r3, [pc, #16]	@ (8004214 <SysTick_Config+0x40>)
 8004204:	2207      	movs	r2, #7
 8004206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	e000e010 	.word	0xe000e010

08004218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff ff29 	bl	8004078 <__NVIC_SetPriorityGrouping>
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b086      	sub	sp, #24
 8004232:	af00      	add	r7, sp, #0
 8004234:	4603      	mov	r3, r0
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	607a      	str	r2, [r7, #4]
 800423a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800423c:	f7ff ff40 	bl	80040c0 <__NVIC_GetPriorityGrouping>
 8004240:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	6978      	ldr	r0, [r7, #20]
 8004248:	f7ff ff90 	bl	800416c <NVIC_EncodePriority>
 800424c:	4602      	mov	r2, r0
 800424e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004252:	4611      	mov	r1, r2
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff ff5f 	bl	8004118 <__NVIC_SetPriority>
}
 800425a:	bf00      	nop
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	4603      	mov	r3, r0
 800426a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800426c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff ff33 	bl	80040dc <__NVIC_EnableIRQ>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff ffa4 	bl	80041d4 <SysTick_Config>
 800428c:	4603      	mov	r3, r0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e08d      	b.n	80043c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	4b47      	ldr	r3, [pc, #284]	@ (80043d0 <HAL_DMA_Init+0x138>)
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d80f      	bhi.n	80042d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	4b45      	ldr	r3, [pc, #276]	@ (80043d4 <HAL_DMA_Init+0x13c>)
 80042be:	4413      	add	r3, r2
 80042c0:	4a45      	ldr	r2, [pc, #276]	@ (80043d8 <HAL_DMA_Init+0x140>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	091b      	lsrs	r3, r3, #4
 80042c8:	009a      	lsls	r2, r3, #2
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a42      	ldr	r2, [pc, #264]	@ (80043dc <HAL_DMA_Init+0x144>)
 80042d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80042d4:	e00e      	b.n	80042f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	4b40      	ldr	r3, [pc, #256]	@ (80043e0 <HAL_DMA_Init+0x148>)
 80042de:	4413      	add	r3, r2
 80042e0:	4a3d      	ldr	r2, [pc, #244]	@ (80043d8 <HAL_DMA_Init+0x140>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	091b      	lsrs	r3, r3, #4
 80042e8:	009a      	lsls	r2, r3, #2
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a3c      	ldr	r2, [pc, #240]	@ (80043e4 <HAL_DMA_Init+0x14c>)
 80042f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800430a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800430e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fa76 	bl	8004838 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004354:	d102      	bne.n	800435c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004370:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d010      	beq.n	800439c <HAL_DMA_Init+0x104>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b04      	cmp	r3, #4
 8004380:	d80c      	bhi.n	800439c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fa96 	bl	80048b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004398:	605a      	str	r2, [r3, #4]
 800439a:	e008      	b.n	80043ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40020407 	.word	0x40020407
 80043d4:	bffdfff8 	.word	0xbffdfff8
 80043d8:	cccccccd 	.word	0xcccccccd
 80043dc:	40020000 	.word	0x40020000
 80043e0:	bffdfbf8 	.word	0xbffdfbf8
 80043e4:	40020400 	.word	0x40020400

080043e8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_DMA_Start_IT+0x20>
 8004404:	2302      	movs	r3, #2
 8004406:	e066      	b.n	80044d6 <HAL_DMA_Start_IT+0xee>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d155      	bne.n	80044c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0201 	bic.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 f9bb 	bl	80047bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 020e 	orr.w	r2, r2, #14
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	e00f      	b.n	8004480 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0204 	bic.w	r2, r2, #4
 800446e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 020a 	orr.w	r2, r2, #10
 800447e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d007      	beq.n	800449e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004498:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800449c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0201 	orr.w	r2, r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	e005      	b.n	80044d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80044d0:	2302      	movs	r3, #2
 80044d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044de:	b480      	push	{r7}
 80044e0:	b085      	sub	sp, #20
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d005      	beq.n	8004502 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2204      	movs	r2, #4
 80044fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
 8004500:	e037      	b.n	8004572 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 020e 	bic.w	r2, r2, #14
 8004510:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800451c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004520:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0201 	bic.w	r2, r2, #1
 8004530:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004536:	f003 021f 	and.w	r2, r3, #31
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	2101      	movs	r1, #1
 8004540:	fa01 f202 	lsl.w	r2, r1, r2
 8004544:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800454e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00c      	beq.n	8004572 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004562:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004566:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004570:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004582:	7bfb      	ldrb	r3, [r7, #15]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d00d      	beq.n	80045c4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2204      	movs	r2, #4
 80045ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	73fb      	strb	r3, [r7, #15]
 80045c2:	e047      	b.n	8004654 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 020e 	bic.w	r2, r2, #14
 80045d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0201 	bic.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f8:	f003 021f 	and.w	r2, r3, #31
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004600:	2101      	movs	r1, #1
 8004602:	fa01 f202 	lsl.w	r2, r1, r2
 8004606:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004610:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00c      	beq.n	8004634 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004624:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004628:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004632:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4798      	blx	r3
    }
  }
  return status;
 8004654:	7bfb      	ldrb	r3, [r7, #15]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b084      	sub	sp, #16
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467a:	f003 031f 	and.w	r3, r3, #31
 800467e:	2204      	movs	r2, #4
 8004680:	409a      	lsls	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4013      	ands	r3, r2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d026      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x7a>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d021      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d107      	bne.n	80046b2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0204 	bic.w	r2, r2, #4
 80046b0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b6:	f003 021f 	and.w	r2, r3, #31
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046be:	2104      	movs	r1, #4
 80046c0:	fa01 f202 	lsl.w	r2, r1, r2
 80046c4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d071      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80046d6:	e06c      	b.n	80047b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046dc:	f003 031f 	and.w	r3, r3, #31
 80046e0:	2202      	movs	r2, #2
 80046e2:	409a      	lsls	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d02e      	beq.n	800474a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d029      	beq.n	800474a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10b      	bne.n	800471c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 020a 	bic.w	r2, r2, #10
 8004712:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004720:	f003 021f 	and.w	r2, r3, #31
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004728:	2102      	movs	r1, #2
 800472a:	fa01 f202 	lsl.w	r2, r1, r2
 800472e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473c:	2b00      	cmp	r3, #0
 800473e:	d038      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004748:	e033      	b.n	80047b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	2208      	movs	r2, #8
 8004754:	409a      	lsls	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4013      	ands	r3, r2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d02a      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d025      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 020e 	bic.w	r2, r2, #14
 8004776:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477c:	f003 021f 	and.w	r2, r3, #31
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004784:	2101      	movs	r1, #1
 8004786:	fa01 f202 	lsl.w	r2, r1, r2
 800478a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d004      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047b2:	bf00      	nop
 80047b4:	bf00      	nop
}
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80047d2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d004      	beq.n	80047e6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80047e4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ea:	f003 021f 	and.w	r2, r3, #31
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f2:	2101      	movs	r1, #1
 80047f4:	fa01 f202 	lsl.w	r2, r1, r2
 80047f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	2b10      	cmp	r3, #16
 8004808:	d108      	bne.n	800481c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800481a:	e007      	b.n	800482c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	60da      	str	r2, [r3, #12]
}
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	461a      	mov	r2, r3
 8004846:	4b16      	ldr	r3, [pc, #88]	@ (80048a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004848:	429a      	cmp	r2, r3
 800484a:	d802      	bhi.n	8004852 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800484c:	4b15      	ldr	r3, [pc, #84]	@ (80048a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	e001      	b.n	8004856 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004852:	4b15      	ldr	r3, [pc, #84]	@ (80048a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004854:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	b2db      	uxtb	r3, r3
 8004860:	3b08      	subs	r3, #8
 8004862:	4a12      	ldr	r2, [pc, #72]	@ (80048ac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004864:	fba2 2303 	umull	r2, r3, r2, r3
 8004868:	091b      	lsrs	r3, r3, #4
 800486a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004870:	089b      	lsrs	r3, r3, #2
 8004872:	009a      	lsls	r2, r3, #2
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4413      	add	r3, r2
 8004878:	461a      	mov	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a0b      	ldr	r2, [pc, #44]	@ (80048b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004882:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f003 031f 	and.w	r3, r3, #31
 800488a:	2201      	movs	r2, #1
 800488c:	409a      	lsls	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40020407 	.word	0x40020407
 80048a4:	40020800 	.word	0x40020800
 80048a8:	40020820 	.word	0x40020820
 80048ac:	cccccccd 	.word	0xcccccccd
 80048b0:	40020880 	.word	0x40020880

080048b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80048c8:	4413      	add	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	461a      	mov	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a08      	ldr	r2, [pc, #32]	@ (80048f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80048d6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3b01      	subs	r3, #1
 80048dc:	f003 031f 	and.w	r3, r3, #31
 80048e0:	2201      	movs	r2, #1
 80048e2:	409a      	lsls	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	1000823f 	.word	0x1000823f
 80048f8:	40020940 	.word	0x40020940

080048fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800490a:	e15a      	b.n	8004bc2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	2101      	movs	r1, #1
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	fa01 f303 	lsl.w	r3, r1, r3
 8004918:	4013      	ands	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 814c 	beq.w	8004bbc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	2b01      	cmp	r3, #1
 800492e:	d005      	beq.n	800493c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004938:	2b02      	cmp	r3, #2
 800493a:	d130      	bne.n	800499e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	2203      	movs	r2, #3
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4013      	ands	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004972:	2201      	movs	r2, #1
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43db      	mvns	r3, r3
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4013      	ands	r3, r2
 8004980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	091b      	lsrs	r3, r3, #4
 8004988:	f003 0201 	and.w	r2, r3, #1
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	d017      	beq.n	80049da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	2203      	movs	r2, #3
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43db      	mvns	r3, r3
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4013      	ands	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d123      	bne.n	8004a2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	08da      	lsrs	r2, r3, #3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3208      	adds	r2, #8
 80049ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	220f      	movs	r2, #15
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	43db      	mvns	r3, r3
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4013      	ands	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	08da      	lsrs	r2, r3, #3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3208      	adds	r2, #8
 8004a28:	6939      	ldr	r1, [r7, #16]
 8004a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	2203      	movs	r2, #3
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4013      	ands	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f003 0203 	and.w	r2, r3, #3
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 80a6 	beq.w	8004bbc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a70:	4b5b      	ldr	r3, [pc, #364]	@ (8004be0 <HAL_GPIO_Init+0x2e4>)
 8004a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a74:	4a5a      	ldr	r2, [pc, #360]	@ (8004be0 <HAL_GPIO_Init+0x2e4>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a7c:	4b58      	ldr	r3, [pc, #352]	@ (8004be0 <HAL_GPIO_Init+0x2e4>)
 8004a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	60bb      	str	r3, [r7, #8]
 8004a86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a88:	4a56      	ldr	r2, [pc, #344]	@ (8004be4 <HAL_GPIO_Init+0x2e8>)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	089b      	lsrs	r3, r3, #2
 8004a8e:	3302      	adds	r3, #2
 8004a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	220f      	movs	r2, #15
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004ab2:	d01f      	beq.n	8004af4 <HAL_GPIO_Init+0x1f8>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a4c      	ldr	r2, [pc, #304]	@ (8004be8 <HAL_GPIO_Init+0x2ec>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d019      	beq.n	8004af0 <HAL_GPIO_Init+0x1f4>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a4b      	ldr	r2, [pc, #300]	@ (8004bec <HAL_GPIO_Init+0x2f0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d013      	beq.n	8004aec <HAL_GPIO_Init+0x1f0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a4a      	ldr	r2, [pc, #296]	@ (8004bf0 <HAL_GPIO_Init+0x2f4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00d      	beq.n	8004ae8 <HAL_GPIO_Init+0x1ec>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a49      	ldr	r2, [pc, #292]	@ (8004bf4 <HAL_GPIO_Init+0x2f8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d007      	beq.n	8004ae4 <HAL_GPIO_Init+0x1e8>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a48      	ldr	r2, [pc, #288]	@ (8004bf8 <HAL_GPIO_Init+0x2fc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d101      	bne.n	8004ae0 <HAL_GPIO_Init+0x1e4>
 8004adc:	2305      	movs	r3, #5
 8004ade:	e00a      	b.n	8004af6 <HAL_GPIO_Init+0x1fa>
 8004ae0:	2306      	movs	r3, #6
 8004ae2:	e008      	b.n	8004af6 <HAL_GPIO_Init+0x1fa>
 8004ae4:	2304      	movs	r3, #4
 8004ae6:	e006      	b.n	8004af6 <HAL_GPIO_Init+0x1fa>
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e004      	b.n	8004af6 <HAL_GPIO_Init+0x1fa>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e002      	b.n	8004af6 <HAL_GPIO_Init+0x1fa>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e000      	b.n	8004af6 <HAL_GPIO_Init+0x1fa>
 8004af4:	2300      	movs	r3, #0
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	f002 0203 	and.w	r2, r2, #3
 8004afc:	0092      	lsls	r2, r2, #2
 8004afe:	4093      	lsls	r3, r2
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b06:	4937      	ldr	r1, [pc, #220]	@ (8004be4 <HAL_GPIO_Init+0x2e8>)
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	089b      	lsrs	r3, r3, #2
 8004b0c:	3302      	adds	r3, #2
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b14:	4b39      	ldr	r3, [pc, #228]	@ (8004bfc <HAL_GPIO_Init+0x300>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	4013      	ands	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b38:	4a30      	ldr	r2, [pc, #192]	@ (8004bfc <HAL_GPIO_Init+0x300>)
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8004bfc <HAL_GPIO_Init+0x300>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	43db      	mvns	r3, r3
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b62:	4a26      	ldr	r2, [pc, #152]	@ (8004bfc <HAL_GPIO_Init+0x300>)
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004b68:	4b24      	ldr	r3, [pc, #144]	@ (8004bfc <HAL_GPIO_Init+0x300>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	43db      	mvns	r3, r3
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4013      	ands	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bfc <HAL_GPIO_Init+0x300>)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b92:	4b1a      	ldr	r3, [pc, #104]	@ (8004bfc <HAL_GPIO_Init+0x300>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004bb6:	4a11      	ldr	r2, [pc, #68]	@ (8004bfc <HAL_GPIO_Init+0x300>)
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f47f ae9d 	bne.w	800490c <HAL_GPIO_Init+0x10>
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	bf00      	nop
 8004bd6:	371c      	adds	r7, #28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	40021000 	.word	0x40021000
 8004be4:	40010000 	.word	0x40010000
 8004be8:	48000400 	.word	0x48000400
 8004bec:	48000800 	.word	0x48000800
 8004bf0:	48000c00 	.word	0x48000c00
 8004bf4:	48001000 	.word	0x48001000
 8004bf8:	48001400 	.word	0x48001400
 8004bfc:	40010400 	.word	0x40010400

08004c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	807b      	strh	r3, [r7, #2]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c10:	787b      	ldrb	r3, [r7, #1]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c16:	887a      	ldrh	r2, [r7, #2]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c1c:	e002      	b.n	8004c24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c1e:	887a      	ldrh	r2, [r7, #2]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c3a:	4b08      	ldr	r3, [pc, #32]	@ (8004c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c3c:	695a      	ldr	r2, [r3, #20]
 8004c3e:	88fb      	ldrh	r3, [r7, #6]
 8004c40:	4013      	ands	r3, r2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d006      	beq.n	8004c54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c46:	4a05      	ldr	r2, [pc, #20]	@ (8004c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c48:	88fb      	ldrh	r3, [r7, #6]
 8004c4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c4c:	88fb      	ldrh	r3, [r7, #6]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fd f8d4 	bl	8001dfc <HAL_GPIO_EXTI_Callback>
  }
}
 8004c54:	bf00      	nop
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40010400 	.word	0x40010400

08004c60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d141      	bne.n	8004cf2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c6e:	4b4b      	ldr	r3, [pc, #300]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c7a:	d131      	bne.n	8004ce0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c7c:	4b47      	ldr	r3, [pc, #284]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c82:	4a46      	ldr	r2, [pc, #280]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c8c:	4b43      	ldr	r3, [pc, #268]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c94:	4a41      	ldr	r2, [pc, #260]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c9c:	4b40      	ldr	r3, [pc, #256]	@ (8004da0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2232      	movs	r2, #50	@ 0x32
 8004ca2:	fb02 f303 	mul.w	r3, r2, r3
 8004ca6:	4a3f      	ldr	r2, [pc, #252]	@ (8004da4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cac:	0c9b      	lsrs	r3, r3, #18
 8004cae:	3301      	adds	r3, #1
 8004cb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cb2:	e002      	b.n	8004cba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cba:	4b38      	ldr	r3, [pc, #224]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc6:	d102      	bne.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f2      	bne.n	8004cb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cce:	4b33      	ldr	r3, [pc, #204]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cda:	d158      	bne.n	8004d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e057      	b.n	8004d90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004cf0:	e04d      	b.n	8004d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cf8:	d141      	bne.n	8004d7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cfa:	4b28      	ldr	r3, [pc, #160]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d06:	d131      	bne.n	8004d6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d08:	4b24      	ldr	r3, [pc, #144]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d0e:	4a23      	ldr	r2, [pc, #140]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d18:	4b20      	ldr	r3, [pc, #128]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d20:	4a1e      	ldr	r2, [pc, #120]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d28:	4b1d      	ldr	r3, [pc, #116]	@ (8004da0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2232      	movs	r2, #50	@ 0x32
 8004d2e:	fb02 f303 	mul.w	r3, r2, r3
 8004d32:	4a1c      	ldr	r2, [pc, #112]	@ (8004da4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d34:	fba2 2303 	umull	r2, r3, r2, r3
 8004d38:	0c9b      	lsrs	r3, r3, #18
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d3e:	e002      	b.n	8004d46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d46:	4b15      	ldr	r3, [pc, #84]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d52:	d102      	bne.n	8004d5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f2      	bne.n	8004d40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d5a:	4b10      	ldr	r3, [pc, #64]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d66:	d112      	bne.n	8004d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e011      	b.n	8004d90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d72:	4a0a      	ldr	r2, [pc, #40]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004d7c:	e007      	b.n	8004d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d7e:	4b07      	ldr	r3, [pc, #28]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d86:	4a05      	ldr	r2, [pc, #20]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	40007000 	.word	0x40007000
 8004da0:	20000208 	.word	0x20000208
 8004da4:	431bde83 	.word	0x431bde83

08004da8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004dac:	4b05      	ldr	r3, [pc, #20]	@ (8004dc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	4a04      	ldr	r2, [pc, #16]	@ (8004dc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004db2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004db6:	6093      	str	r3, [r2, #8]
}
 8004db8:	bf00      	nop
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40007000 	.word	0x40007000

08004dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e2fe      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d075      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004de6:	4b97      	ldr	r3, [pc, #604]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 030c 	and.w	r3, r3, #12
 8004dee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004df0:	4b94      	ldr	r3, [pc, #592]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	2b0c      	cmp	r3, #12
 8004dfe:	d102      	bne.n	8004e06 <HAL_RCC_OscConfig+0x3e>
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d002      	beq.n	8004e0c <HAL_RCC_OscConfig+0x44>
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d10b      	bne.n	8004e24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e0c:	4b8d      	ldr	r3, [pc, #564]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d05b      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x108>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d157      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e2d9      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e2c:	d106      	bne.n	8004e3c <HAL_RCC_OscConfig+0x74>
 8004e2e:	4b85      	ldr	r3, [pc, #532]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a84      	ldr	r2, [pc, #528]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	e01d      	b.n	8004e78 <HAL_RCC_OscConfig+0xb0>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e44:	d10c      	bne.n	8004e60 <HAL_RCC_OscConfig+0x98>
 8004e46:	4b7f      	ldr	r3, [pc, #508]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a7e      	ldr	r2, [pc, #504]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004e4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	4b7c      	ldr	r3, [pc, #496]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a7b      	ldr	r2, [pc, #492]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	e00b      	b.n	8004e78 <HAL_RCC_OscConfig+0xb0>
 8004e60:	4b78      	ldr	r3, [pc, #480]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a77      	ldr	r2, [pc, #476]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	4b75      	ldr	r3, [pc, #468]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a74      	ldr	r2, [pc, #464]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d013      	beq.n	8004ea8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fd fd8a 	bl	8002998 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e88:	f7fd fd86 	bl	8002998 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	@ 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e29e      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e9a:	4b6a      	ldr	r3, [pc, #424]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0xc0>
 8004ea6:	e014      	b.n	8004ed2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea8:	f7fd fd76 	bl	8002998 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eb0:	f7fd fd72 	bl	8002998 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b64      	cmp	r3, #100	@ 0x64
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e28a      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ec2:	4b60      	ldr	r3, [pc, #384]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f0      	bne.n	8004eb0 <HAL_RCC_OscConfig+0xe8>
 8004ece:	e000      	b.n	8004ed2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d075      	beq.n	8004fca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ede:	4b59      	ldr	r3, [pc, #356]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 030c 	and.w	r3, r3, #12
 8004ee6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ee8:	4b56      	ldr	r3, [pc, #344]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	2b0c      	cmp	r3, #12
 8004ef6:	d102      	bne.n	8004efe <HAL_RCC_OscConfig+0x136>
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d002      	beq.n	8004f04 <HAL_RCC_OscConfig+0x13c>
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d11f      	bne.n	8004f44 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f04:	4b4f      	ldr	r3, [pc, #316]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_RCC_OscConfig+0x154>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e25d      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f1c:	4b49      	ldr	r3, [pc, #292]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	061b      	lsls	r3, r3, #24
 8004f2a:	4946      	ldr	r1, [pc, #280]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004f30:	4b45      	ldr	r3, [pc, #276]	@ (8005048 <HAL_RCC_OscConfig+0x280>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fd fce3 	bl	8002900 <HAL_InitTick>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d043      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e249      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d023      	beq.n	8004f94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f4c:	4b3d      	ldr	r3, [pc, #244]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a3c      	ldr	r2, [pc, #240]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f58:	f7fd fd1e 	bl	8002998 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f60:	f7fd fd1a 	bl	8002998 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e232      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f72:	4b34      	ldr	r3, [pc, #208]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0f0      	beq.n	8004f60 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7e:	4b31      	ldr	r3, [pc, #196]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	061b      	lsls	r3, r3, #24
 8004f8c:	492d      	ldr	r1, [pc, #180]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	604b      	str	r3, [r1, #4]
 8004f92:	e01a      	b.n	8004fca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f94:	4b2b      	ldr	r3, [pc, #172]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a2a      	ldr	r2, [pc, #168]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004f9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa0:	f7fd fcfa 	bl	8002998 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fa8:	f7fd fcf6 	bl	8002998 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e20e      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fba:	4b22      	ldr	r3, [pc, #136]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f0      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x1e0>
 8004fc6:	e000      	b.n	8004fca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d041      	beq.n	800505a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01c      	beq.n	8005018 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fde:	4b19      	ldr	r3, [pc, #100]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fe4:	4a17      	ldr	r2, [pc, #92]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004fe6:	f043 0301 	orr.w	r3, r3, #1
 8004fea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fee:	f7fd fcd3 	bl	8002998 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff6:	f7fd fccf 	bl	8002998 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e1e7      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005008:	4b0e      	ldr	r3, [pc, #56]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 800500a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0ef      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x22e>
 8005016:	e020      	b.n	800505a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005018:	4b0a      	ldr	r3, [pc, #40]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 800501a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800501e:	4a09      	ldr	r2, [pc, #36]	@ (8005044 <HAL_RCC_OscConfig+0x27c>)
 8005020:	f023 0301 	bic.w	r3, r3, #1
 8005024:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005028:	f7fd fcb6 	bl	8002998 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800502e:	e00d      	b.n	800504c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005030:	f7fd fcb2 	bl	8002998 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d906      	bls.n	800504c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e1ca      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>
 8005042:	bf00      	nop
 8005044:	40021000 	.word	0x40021000
 8005048:	2000020c 	.word	0x2000020c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800504c:	4b8c      	ldr	r3, [pc, #560]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 800504e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1ea      	bne.n	8005030 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 80a6 	beq.w	80051b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005068:	2300      	movs	r3, #0
 800506a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800506c:	4b84      	ldr	r3, [pc, #528]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 800506e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <HAL_RCC_OscConfig+0x2b4>
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <HAL_RCC_OscConfig+0x2b6>
 800507c:	2300      	movs	r3, #0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00d      	beq.n	800509e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005082:	4b7f      	ldr	r3, [pc, #508]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 8005084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005086:	4a7e      	ldr	r2, [pc, #504]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 8005088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800508c:	6593      	str	r3, [r2, #88]	@ 0x58
 800508e:	4b7c      	ldr	r3, [pc, #496]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 8005090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800509a:	2301      	movs	r3, #1
 800509c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800509e:	4b79      	ldr	r3, [pc, #484]	@ (8005284 <HAL_RCC_OscConfig+0x4bc>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d118      	bne.n	80050dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050aa:	4b76      	ldr	r3, [pc, #472]	@ (8005284 <HAL_RCC_OscConfig+0x4bc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a75      	ldr	r2, [pc, #468]	@ (8005284 <HAL_RCC_OscConfig+0x4bc>)
 80050b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050b6:	f7fd fc6f 	bl	8002998 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050be:	f7fd fc6b 	bl	8002998 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e183      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050d0:	4b6c      	ldr	r3, [pc, #432]	@ (8005284 <HAL_RCC_OscConfig+0x4bc>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f0      	beq.n	80050be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d108      	bne.n	80050f6 <HAL_RCC_OscConfig+0x32e>
 80050e4:	4b66      	ldr	r3, [pc, #408]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 80050e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ea:	4a65      	ldr	r2, [pc, #404]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 80050ec:	f043 0301 	orr.w	r3, r3, #1
 80050f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050f4:	e024      	b.n	8005140 <HAL_RCC_OscConfig+0x378>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	2b05      	cmp	r3, #5
 80050fc:	d110      	bne.n	8005120 <HAL_RCC_OscConfig+0x358>
 80050fe:	4b60      	ldr	r3, [pc, #384]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 8005100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005104:	4a5e      	ldr	r2, [pc, #376]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 8005106:	f043 0304 	orr.w	r3, r3, #4
 800510a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800510e:	4b5c      	ldr	r3, [pc, #368]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 8005110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005114:	4a5a      	ldr	r2, [pc, #360]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 8005116:	f043 0301 	orr.w	r3, r3, #1
 800511a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800511e:	e00f      	b.n	8005140 <HAL_RCC_OscConfig+0x378>
 8005120:	4b57      	ldr	r3, [pc, #348]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 8005122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005126:	4a56      	ldr	r2, [pc, #344]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 8005128:	f023 0301 	bic.w	r3, r3, #1
 800512c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005130:	4b53      	ldr	r3, [pc, #332]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 8005132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005136:	4a52      	ldr	r2, [pc, #328]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 8005138:	f023 0304 	bic.w	r3, r3, #4
 800513c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d016      	beq.n	8005176 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005148:	f7fd fc26 	bl	8002998 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800514e:	e00a      	b.n	8005166 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005150:	f7fd fc22 	bl	8002998 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800515e:	4293      	cmp	r3, r2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e138      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005166:	4b46      	ldr	r3, [pc, #280]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 8005168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0ed      	beq.n	8005150 <HAL_RCC_OscConfig+0x388>
 8005174:	e015      	b.n	80051a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005176:	f7fd fc0f 	bl	8002998 <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800517c:	e00a      	b.n	8005194 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517e:	f7fd fc0b 	bl	8002998 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800518c:	4293      	cmp	r3, r2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e121      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005194:	4b3a      	ldr	r3, [pc, #232]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1ed      	bne.n	800517e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051a2:	7ffb      	ldrb	r3, [r7, #31]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d105      	bne.n	80051b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a8:	4b35      	ldr	r3, [pc, #212]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 80051aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ac:	4a34      	ldr	r2, [pc, #208]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 80051ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0320 	and.w	r3, r3, #32
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d03c      	beq.n	800523a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01c      	beq.n	8005202 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 80051ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 80051d0:	f043 0301 	orr.w	r3, r3, #1
 80051d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d8:	f7fd fbde 	bl	8002998 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051e0:	f7fd fbda 	bl	8002998 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e0f2      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051f2:	4b23      	ldr	r3, [pc, #140]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 80051f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0ef      	beq.n	80051e0 <HAL_RCC_OscConfig+0x418>
 8005200:	e01b      	b.n	800523a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005202:	4b1f      	ldr	r3, [pc, #124]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 8005204:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005208:	4a1d      	ldr	r2, [pc, #116]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 800520a:	f023 0301 	bic.w	r3, r3, #1
 800520e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005212:	f7fd fbc1 	bl	8002998 <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800521a:	f7fd fbbd 	bl	8002998 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e0d5      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800522c:	4b14      	ldr	r3, [pc, #80]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 800522e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1ef      	bne.n	800521a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 80c9 	beq.w	80053d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005244:	4b0e      	ldr	r3, [pc, #56]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 030c 	and.w	r3, r3, #12
 800524c:	2b0c      	cmp	r3, #12
 800524e:	f000 8083 	beq.w	8005358 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d15e      	bne.n	8005318 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525a:	4b09      	ldr	r3, [pc, #36]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a08      	ldr	r2, [pc, #32]	@ (8005280 <HAL_RCC_OscConfig+0x4b8>)
 8005260:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005266:	f7fd fb97 	bl	8002998 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800526c:	e00c      	b.n	8005288 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800526e:	f7fd fb93 	bl	8002998 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d905      	bls.n	8005288 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e0ab      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>
 8005280:	40021000 	.word	0x40021000
 8005284:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005288:	4b55      	ldr	r3, [pc, #340]	@ (80053e0 <HAL_RCC_OscConfig+0x618>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1ec      	bne.n	800526e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005294:	4b52      	ldr	r3, [pc, #328]	@ (80053e0 <HAL_RCC_OscConfig+0x618>)
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	4b52      	ldr	r3, [pc, #328]	@ (80053e4 <HAL_RCC_OscConfig+0x61c>)
 800529a:	4013      	ands	r3, r2
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6a11      	ldr	r1, [r2, #32]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052a4:	3a01      	subs	r2, #1
 80052a6:	0112      	lsls	r2, r2, #4
 80052a8:	4311      	orrs	r1, r2
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80052ae:	0212      	lsls	r2, r2, #8
 80052b0:	4311      	orrs	r1, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80052b6:	0852      	lsrs	r2, r2, #1
 80052b8:	3a01      	subs	r2, #1
 80052ba:	0552      	lsls	r2, r2, #21
 80052bc:	4311      	orrs	r1, r2
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80052c2:	0852      	lsrs	r2, r2, #1
 80052c4:	3a01      	subs	r2, #1
 80052c6:	0652      	lsls	r2, r2, #25
 80052c8:	4311      	orrs	r1, r2
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80052ce:	06d2      	lsls	r2, r2, #27
 80052d0:	430a      	orrs	r2, r1
 80052d2:	4943      	ldr	r1, [pc, #268]	@ (80053e0 <HAL_RCC_OscConfig+0x618>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052d8:	4b41      	ldr	r3, [pc, #260]	@ (80053e0 <HAL_RCC_OscConfig+0x618>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a40      	ldr	r2, [pc, #256]	@ (80053e0 <HAL_RCC_OscConfig+0x618>)
 80052de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052e4:	4b3e      	ldr	r3, [pc, #248]	@ (80053e0 <HAL_RCC_OscConfig+0x618>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	4a3d      	ldr	r2, [pc, #244]	@ (80053e0 <HAL_RCC_OscConfig+0x618>)
 80052ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f0:	f7fd fb52 	bl	8002998 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f8:	f7fd fb4e 	bl	8002998 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e066      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800530a:	4b35      	ldr	r3, [pc, #212]	@ (80053e0 <HAL_RCC_OscConfig+0x618>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0f0      	beq.n	80052f8 <HAL_RCC_OscConfig+0x530>
 8005316:	e05e      	b.n	80053d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005318:	4b31      	ldr	r3, [pc, #196]	@ (80053e0 <HAL_RCC_OscConfig+0x618>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a30      	ldr	r2, [pc, #192]	@ (80053e0 <HAL_RCC_OscConfig+0x618>)
 800531e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005324:	f7fd fb38 	bl	8002998 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800532c:	f7fd fb34 	bl	8002998 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e04c      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800533e:	4b28      	ldr	r3, [pc, #160]	@ (80053e0 <HAL_RCC_OscConfig+0x618>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1f0      	bne.n	800532c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800534a:	4b25      	ldr	r3, [pc, #148]	@ (80053e0 <HAL_RCC_OscConfig+0x618>)
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	4924      	ldr	r1, [pc, #144]	@ (80053e0 <HAL_RCC_OscConfig+0x618>)
 8005350:	4b25      	ldr	r3, [pc, #148]	@ (80053e8 <HAL_RCC_OscConfig+0x620>)
 8005352:	4013      	ands	r3, r2
 8005354:	60cb      	str	r3, [r1, #12]
 8005356:	e03e      	b.n	80053d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e039      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005364:	4b1e      	ldr	r3, [pc, #120]	@ (80053e0 <HAL_RCC_OscConfig+0x618>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f003 0203 	and.w	r2, r3, #3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	429a      	cmp	r2, r3
 8005376:	d12c      	bne.n	80053d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005382:	3b01      	subs	r3, #1
 8005384:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005386:	429a      	cmp	r2, r3
 8005388:	d123      	bne.n	80053d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005394:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005396:	429a      	cmp	r2, r3
 8005398:	d11b      	bne.n	80053d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d113      	bne.n	80053d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	3b01      	subs	r3, #1
 80053b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d109      	bne.n	80053d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c8:	085b      	lsrs	r3, r3, #1
 80053ca:	3b01      	subs	r3, #1
 80053cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d001      	beq.n	80053d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3720      	adds	r7, #32
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40021000 	.word	0x40021000
 80053e4:	019f800c 	.word	0x019f800c
 80053e8:	feeefffc 	.word	0xfeeefffc

080053ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e11e      	b.n	8005642 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005404:	4b91      	ldr	r3, [pc, #580]	@ (800564c <HAL_RCC_ClockConfig+0x260>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 030f 	and.w	r3, r3, #15
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d910      	bls.n	8005434 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005412:	4b8e      	ldr	r3, [pc, #568]	@ (800564c <HAL_RCC_ClockConfig+0x260>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f023 020f 	bic.w	r2, r3, #15
 800541a:	498c      	ldr	r1, [pc, #560]	@ (800564c <HAL_RCC_ClockConfig+0x260>)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	4313      	orrs	r3, r2
 8005420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005422:	4b8a      	ldr	r3, [pc, #552]	@ (800564c <HAL_RCC_ClockConfig+0x260>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d001      	beq.n	8005434 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e106      	b.n	8005642 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d073      	beq.n	8005528 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b03      	cmp	r3, #3
 8005446:	d129      	bne.n	800549c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005448:	4b81      	ldr	r3, [pc, #516]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e0f4      	b.n	8005642 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005458:	f000 f99e 	bl	8005798 <RCC_GetSysClockFreqFromPLLSource>
 800545c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4a7c      	ldr	r2, [pc, #496]	@ (8005654 <HAL_RCC_ClockConfig+0x268>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d93f      	bls.n	80054e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005466:	4b7a      	ldr	r3, [pc, #488]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d009      	beq.n	8005486 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800547a:	2b00      	cmp	r3, #0
 800547c:	d033      	beq.n	80054e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005482:	2b00      	cmp	r3, #0
 8005484:	d12f      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005486:	4b72      	ldr	r3, [pc, #456]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800548e:	4a70      	ldr	r2, [pc, #448]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 8005490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005494:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005496:	2380      	movs	r3, #128	@ 0x80
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	e024      	b.n	80054e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d107      	bne.n	80054b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d109      	bne.n	80054c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e0c6      	b.n	8005642 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054b4:	4b66      	ldr	r3, [pc, #408]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e0be      	b.n	8005642 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80054c4:	f000 f8ce 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 80054c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	4a61      	ldr	r2, [pc, #388]	@ (8005654 <HAL_RCC_ClockConfig+0x268>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d909      	bls.n	80054e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054d2:	4b5f      	ldr	r3, [pc, #380]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054da:	4a5d      	ldr	r2, [pc, #372]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 80054dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80054e2:	2380      	movs	r3, #128	@ 0x80
 80054e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054e6:	4b5a      	ldr	r3, [pc, #360]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f023 0203 	bic.w	r2, r3, #3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	4957      	ldr	r1, [pc, #348]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f8:	f7fd fa4e 	bl	8002998 <HAL_GetTick>
 80054fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054fe:	e00a      	b.n	8005516 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005500:	f7fd fa4a 	bl	8002998 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800550e:	4293      	cmp	r3, r2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e095      	b.n	8005642 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005516:	4b4e      	ldr	r3, [pc, #312]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 020c 	and.w	r2, r3, #12
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	429a      	cmp	r2, r3
 8005526:	d1eb      	bne.n	8005500 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d023      	beq.n	800557c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005540:	4b43      	ldr	r3, [pc, #268]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	4a42      	ldr	r2, [pc, #264]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 8005546:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800554a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005558:	4b3d      	ldr	r3, [pc, #244]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005560:	4a3b      	ldr	r2, [pc, #236]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 8005562:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005566:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005568:	4b39      	ldr	r3, [pc, #228]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	4936      	ldr	r1, [pc, #216]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 8005576:	4313      	orrs	r3, r2
 8005578:	608b      	str	r3, [r1, #8]
 800557a:	e008      	b.n	800558e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2b80      	cmp	r3, #128	@ 0x80
 8005580:	d105      	bne.n	800558e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005582:	4b33      	ldr	r3, [pc, #204]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	4a32      	ldr	r2, [pc, #200]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 8005588:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800558c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800558e:	4b2f      	ldr	r3, [pc, #188]	@ (800564c <HAL_RCC_ClockConfig+0x260>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	429a      	cmp	r2, r3
 800559a:	d21d      	bcs.n	80055d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559c:	4b2b      	ldr	r3, [pc, #172]	@ (800564c <HAL_RCC_ClockConfig+0x260>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f023 020f 	bic.w	r2, r3, #15
 80055a4:	4929      	ldr	r1, [pc, #164]	@ (800564c <HAL_RCC_ClockConfig+0x260>)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055ac:	f7fd f9f4 	bl	8002998 <HAL_GetTick>
 80055b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b2:	e00a      	b.n	80055ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055b4:	f7fd f9f0 	bl	8002998 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e03b      	b.n	8005642 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ca:	4b20      	ldr	r3, [pc, #128]	@ (800564c <HAL_RCC_ClockConfig+0x260>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d1ed      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d008      	beq.n	80055f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	4917      	ldr	r1, [pc, #92]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0308 	and.w	r3, r3, #8
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005602:	4b13      	ldr	r3, [pc, #76]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	490f      	ldr	r1, [pc, #60]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 8005612:	4313      	orrs	r3, r2
 8005614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005616:	f000 f825 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 800561a:	4602      	mov	r2, r0
 800561c:	4b0c      	ldr	r3, [pc, #48]	@ (8005650 <HAL_RCC_ClockConfig+0x264>)
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	091b      	lsrs	r3, r3, #4
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	490c      	ldr	r1, [pc, #48]	@ (8005658 <HAL_RCC_ClockConfig+0x26c>)
 8005628:	5ccb      	ldrb	r3, [r1, r3]
 800562a:	f003 031f 	and.w	r3, r3, #31
 800562e:	fa22 f303 	lsr.w	r3, r2, r3
 8005632:	4a0a      	ldr	r2, [pc, #40]	@ (800565c <HAL_RCC_ClockConfig+0x270>)
 8005634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005636:	4b0a      	ldr	r3, [pc, #40]	@ (8005660 <HAL_RCC_ClockConfig+0x274>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4618      	mov	r0, r3
 800563c:	f7fd f960 	bl	8002900 <HAL_InitTick>
 8005640:	4603      	mov	r3, r0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40022000 	.word	0x40022000
 8005650:	40021000 	.word	0x40021000
 8005654:	04c4b400 	.word	0x04c4b400
 8005658:	08009c5c 	.word	0x08009c5c
 800565c:	20000208 	.word	0x20000208
 8005660:	2000020c 	.word	0x2000020c

08005664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800566a:	4b2c      	ldr	r3, [pc, #176]	@ (800571c <HAL_RCC_GetSysClockFreq+0xb8>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 030c 	and.w	r3, r3, #12
 8005672:	2b04      	cmp	r3, #4
 8005674:	d102      	bne.n	800567c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005676:	4b2a      	ldr	r3, [pc, #168]	@ (8005720 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005678:	613b      	str	r3, [r7, #16]
 800567a:	e047      	b.n	800570c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800567c:	4b27      	ldr	r3, [pc, #156]	@ (800571c <HAL_RCC_GetSysClockFreq+0xb8>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 030c 	and.w	r3, r3, #12
 8005684:	2b08      	cmp	r3, #8
 8005686:	d102      	bne.n	800568e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005688:	4b26      	ldr	r3, [pc, #152]	@ (8005724 <HAL_RCC_GetSysClockFreq+0xc0>)
 800568a:	613b      	str	r3, [r7, #16]
 800568c:	e03e      	b.n	800570c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800568e:	4b23      	ldr	r3, [pc, #140]	@ (800571c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f003 030c 	and.w	r3, r3, #12
 8005696:	2b0c      	cmp	r3, #12
 8005698:	d136      	bne.n	8005708 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800569a:	4b20      	ldr	r3, [pc, #128]	@ (800571c <HAL_RCC_GetSysClockFreq+0xb8>)
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056a4:	4b1d      	ldr	r3, [pc, #116]	@ (800571c <HAL_RCC_GetSysClockFreq+0xb8>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	091b      	lsrs	r3, r3, #4
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	3301      	adds	r3, #1
 80056b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b03      	cmp	r3, #3
 80056b6:	d10c      	bne.n	80056d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005724 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c0:	4a16      	ldr	r2, [pc, #88]	@ (800571c <HAL_RCC_GetSysClockFreq+0xb8>)
 80056c2:	68d2      	ldr	r2, [r2, #12]
 80056c4:	0a12      	lsrs	r2, r2, #8
 80056c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056ca:	fb02 f303 	mul.w	r3, r2, r3
 80056ce:	617b      	str	r3, [r7, #20]
      break;
 80056d0:	e00c      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056d2:	4a13      	ldr	r2, [pc, #76]	@ (8005720 <HAL_RCC_GetSysClockFreq+0xbc>)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056da:	4a10      	ldr	r2, [pc, #64]	@ (800571c <HAL_RCC_GetSysClockFreq+0xb8>)
 80056dc:	68d2      	ldr	r2, [r2, #12]
 80056de:	0a12      	lsrs	r2, r2, #8
 80056e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056e4:	fb02 f303 	mul.w	r3, r2, r3
 80056e8:	617b      	str	r3, [r7, #20]
      break;
 80056ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056ec:	4b0b      	ldr	r3, [pc, #44]	@ (800571c <HAL_RCC_GetSysClockFreq+0xb8>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	0e5b      	lsrs	r3, r3, #25
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	3301      	adds	r3, #1
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	fbb2 f3f3 	udiv	r3, r2, r3
 8005704:	613b      	str	r3, [r7, #16]
 8005706:	e001      	b.n	800570c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800570c:	693b      	ldr	r3, [r7, #16]
}
 800570e:	4618      	mov	r0, r3
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40021000 	.word	0x40021000
 8005720:	00f42400 	.word	0x00f42400
 8005724:	016e3600 	.word	0x016e3600

08005728 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800572c:	4b03      	ldr	r3, [pc, #12]	@ (800573c <HAL_RCC_GetHCLKFreq+0x14>)
 800572e:	681b      	ldr	r3, [r3, #0]
}
 8005730:	4618      	mov	r0, r3
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	20000208 	.word	0x20000208

08005740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005744:	f7ff fff0 	bl	8005728 <HAL_RCC_GetHCLKFreq>
 8005748:	4602      	mov	r2, r0
 800574a:	4b06      	ldr	r3, [pc, #24]	@ (8005764 <HAL_RCC_GetPCLK1Freq+0x24>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	0a1b      	lsrs	r3, r3, #8
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	4904      	ldr	r1, [pc, #16]	@ (8005768 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005756:	5ccb      	ldrb	r3, [r1, r3]
 8005758:	f003 031f 	and.w	r3, r3, #31
 800575c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005760:	4618      	mov	r0, r3
 8005762:	bd80      	pop	{r7, pc}
 8005764:	40021000 	.word	0x40021000
 8005768:	08009c6c 	.word	0x08009c6c

0800576c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005770:	f7ff ffda 	bl	8005728 <HAL_RCC_GetHCLKFreq>
 8005774:	4602      	mov	r2, r0
 8005776:	4b06      	ldr	r3, [pc, #24]	@ (8005790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	0adb      	lsrs	r3, r3, #11
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	4904      	ldr	r1, [pc, #16]	@ (8005794 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005782:	5ccb      	ldrb	r3, [r1, r3]
 8005784:	f003 031f 	and.w	r3, r3, #31
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800578c:	4618      	mov	r0, r3
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40021000 	.word	0x40021000
 8005794:	08009c6c 	.word	0x08009c6c

08005798 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800579e:	4b1e      	ldr	r3, [pc, #120]	@ (8005818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	091b      	lsrs	r3, r3, #4
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	3301      	adds	r3, #1
 80057b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d10c      	bne.n	80057d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057bc:	4a17      	ldr	r2, [pc, #92]	@ (800581c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c4:	4a14      	ldr	r2, [pc, #80]	@ (8005818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057c6:	68d2      	ldr	r2, [r2, #12]
 80057c8:	0a12      	lsrs	r2, r2, #8
 80057ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057ce:	fb02 f303 	mul.w	r3, r2, r3
 80057d2:	617b      	str	r3, [r7, #20]
    break;
 80057d4:	e00c      	b.n	80057f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057d6:	4a12      	ldr	r2, [pc, #72]	@ (8005820 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	fbb2 f3f3 	udiv	r3, r2, r3
 80057de:	4a0e      	ldr	r2, [pc, #56]	@ (8005818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057e0:	68d2      	ldr	r2, [r2, #12]
 80057e2:	0a12      	lsrs	r2, r2, #8
 80057e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057e8:	fb02 f303 	mul.w	r3, r2, r3
 80057ec:	617b      	str	r3, [r7, #20]
    break;
 80057ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057f0:	4b09      	ldr	r3, [pc, #36]	@ (8005818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	0e5b      	lsrs	r3, r3, #25
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	3301      	adds	r3, #1
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	fbb2 f3f3 	udiv	r3, r2, r3
 8005808:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800580a:	687b      	ldr	r3, [r7, #4]
}
 800580c:	4618      	mov	r0, r3
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	40021000 	.word	0x40021000
 800581c:	016e3600 	.word	0x016e3600
 8005820:	00f42400 	.word	0x00f42400

08005824 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800582c:	2300      	movs	r3, #0
 800582e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005830:	2300      	movs	r3, #0
 8005832:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 8098 	beq.w	8005972 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005842:	2300      	movs	r3, #0
 8005844:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005846:	4b43      	ldr	r3, [pc, #268]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800584a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10d      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005852:	4b40      	ldr	r3, [pc, #256]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005856:	4a3f      	ldr	r2, [pc, #252]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800585c:	6593      	str	r3, [r2, #88]	@ 0x58
 800585e:	4b3d      	ldr	r3, [pc, #244]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005866:	60bb      	str	r3, [r7, #8]
 8005868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800586a:	2301      	movs	r3, #1
 800586c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800586e:	4b3a      	ldr	r3, [pc, #232]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a39      	ldr	r2, [pc, #228]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005878:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800587a:	f7fd f88d 	bl	8002998 <HAL_GetTick>
 800587e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005880:	e009      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005882:	f7fd f889 	bl	8002998 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d902      	bls.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	74fb      	strb	r3, [r7, #19]
        break;
 8005894:	e005      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005896:	4b30      	ldr	r3, [pc, #192]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0ef      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80058a2:	7cfb      	ldrb	r3, [r7, #19]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d159      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058a8:	4b2a      	ldr	r3, [pc, #168]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d01e      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d019      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058c4:	4b23      	ldr	r3, [pc, #140]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058d0:	4b20      	ldr	r3, [pc, #128]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058f0:	4a18      	ldr	r2, [pc, #96]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d016      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005902:	f7fd f849 	bl	8002998 <HAL_GetTick>
 8005906:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005908:	e00b      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800590a:	f7fd f845 	bl	8002998 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005918:	4293      	cmp	r3, r2
 800591a:	d902      	bls.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	74fb      	strb	r3, [r7, #19]
            break;
 8005920:	e006      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005922:	4b0c      	ldr	r3, [pc, #48]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0ec      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005930:	7cfb      	ldrb	r3, [r7, #19]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10b      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005936:	4b07      	ldr	r3, [pc, #28]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800593c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005944:	4903      	ldr	r1, [pc, #12]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800594c:	e008      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800594e:	7cfb      	ldrb	r3, [r7, #19]
 8005950:	74bb      	strb	r3, [r7, #18]
 8005952:	e005      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005954:	40021000 	.word	0x40021000
 8005958:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800595c:	7cfb      	ldrb	r3, [r7, #19]
 800595e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005960:	7c7b      	ldrb	r3, [r7, #17]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d105      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005966:	4ba7      	ldr	r3, [pc, #668]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800596a:	4aa6      	ldr	r2, [pc, #664]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800596c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005970:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800597e:	4ba1      	ldr	r3, [pc, #644]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005984:	f023 0203 	bic.w	r2, r3, #3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	499d      	ldr	r1, [pc, #628]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00a      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059a0:	4b98      	ldr	r3, [pc, #608]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a6:	f023 020c 	bic.w	r2, r3, #12
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	4995      	ldr	r1, [pc, #596]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0304 	and.w	r3, r3, #4
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059c2:	4b90      	ldr	r3, [pc, #576]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	498c      	ldr	r1, [pc, #560]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00a      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059e4:	4b87      	ldr	r3, [pc, #540]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	4984      	ldr	r1, [pc, #528]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0310 	and.w	r3, r3, #16
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a06:	4b7f      	ldr	r3, [pc, #508]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	497b      	ldr	r1, [pc, #492]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00a      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a28:	4b76      	ldr	r3, [pc, #472]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	4973      	ldr	r1, [pc, #460]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a4a:	4b6e      	ldr	r3, [pc, #440]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a50:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	496a      	ldr	r1, [pc, #424]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00a      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a6c:	4b65      	ldr	r3, [pc, #404]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a72:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	4962      	ldr	r1, [pc, #392]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a8e:	4b5d      	ldr	r3, [pc, #372]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9c:	4959      	ldr	r1, [pc, #356]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00a      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ab0:	4b54      	ldr	r3, [pc, #336]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ab2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ab6:	f023 0203 	bic.w	r2, r3, #3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005abe:	4951      	ldr	r1, [pc, #324]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00a      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ad2:	4b4c      	ldr	r3, [pc, #304]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae0:	4948      	ldr	r1, [pc, #288]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d015      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005af4:	4b43      	ldr	r3, [pc, #268]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005afa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b02:	4940      	ldr	r1, [pc, #256]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b12:	d105      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b14:	4b3b      	ldr	r3, [pc, #236]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	4a3a      	ldr	r2, [pc, #232]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d015      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b2c:	4b35      	ldr	r3, [pc, #212]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b32:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b3a:	4932      	ldr	r1, [pc, #200]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b4a:	d105      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	4a2c      	ldr	r2, [pc, #176]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b56:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d015      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b64:	4b27      	ldr	r3, [pc, #156]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b6a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b72:	4924      	ldr	r1, [pc, #144]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b82:	d105      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b84:	4b1f      	ldr	r3, [pc, #124]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	4a1e      	ldr	r2, [pc, #120]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b8e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d015      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b9c:	4b19      	ldr	r3, [pc, #100]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005baa:	4916      	ldr	r1, [pc, #88]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bba:	d105      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bbc:	4b11      	ldr	r3, [pc, #68]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	4a10      	ldr	r2, [pc, #64]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bc6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d019      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be2:	4908      	ldr	r1, [pc, #32]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bf2:	d109      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bf4:	4b03      	ldr	r3, [pc, #12]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	4a02      	ldr	r2, [pc, #8]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bfe:	60d3      	str	r3, [r2, #12]
 8005c00:	e002      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005c02:	bf00      	nop
 8005c04:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d015      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005c14:	4b29      	ldr	r3, [pc, #164]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c22:	4926      	ldr	r1, [pc, #152]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c32:	d105      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c34:	4b21      	ldr	r3, [pc, #132]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	4a20      	ldr	r2, [pc, #128]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c3e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d015      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c52:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c5a:	4918      	ldr	r1, [pc, #96]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c6a:	d105      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c6c:	4b13      	ldr	r3, [pc, #76]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	4a12      	ldr	r2, [pc, #72]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c76:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d015      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c84:	4b0d      	ldr	r3, [pc, #52]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c92:	490a      	ldr	r1, [pc, #40]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ca2:	d105      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ca4:	4b05      	ldr	r3, [pc, #20]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	4a04      	ldr	r2, [pc, #16]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005caa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005cb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	40021000 	.word	0x40021000

08005cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e054      	b.n	8005d7c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d111      	bne.n	8005d02 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f001 feec 	bl	8007ac4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d102      	bne.n	8005cfa <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a23      	ldr	r2, [pc, #140]	@ (8005d84 <HAL_TIM_Base_Init+0xc4>)
 8005cf8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3304      	adds	r3, #4
 8005d12:	4619      	mov	r1, r3
 8005d14:	4610      	mov	r0, r2
 8005d16:	f001 fa35 	bl	8007184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	08002449 	.word	0x08002449

08005d88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d001      	beq.n	8005da0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e04c      	b.n	8005e3a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a26      	ldr	r2, [pc, #152]	@ (8005e48 <HAL_TIM_Base_Start+0xc0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d022      	beq.n	8005df8 <HAL_TIM_Base_Start+0x70>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dba:	d01d      	beq.n	8005df8 <HAL_TIM_Base_Start+0x70>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a22      	ldr	r2, [pc, #136]	@ (8005e4c <HAL_TIM_Base_Start+0xc4>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d018      	beq.n	8005df8 <HAL_TIM_Base_Start+0x70>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a21      	ldr	r2, [pc, #132]	@ (8005e50 <HAL_TIM_Base_Start+0xc8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d013      	beq.n	8005df8 <HAL_TIM_Base_Start+0x70>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8005e54 <HAL_TIM_Base_Start+0xcc>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00e      	beq.n	8005df8 <HAL_TIM_Base_Start+0x70>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1e      	ldr	r2, [pc, #120]	@ (8005e58 <HAL_TIM_Base_Start+0xd0>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d009      	beq.n	8005df8 <HAL_TIM_Base_Start+0x70>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1c      	ldr	r2, [pc, #112]	@ (8005e5c <HAL_TIM_Base_Start+0xd4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d004      	beq.n	8005df8 <HAL_TIM_Base_Start+0x70>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1b      	ldr	r2, [pc, #108]	@ (8005e60 <HAL_TIM_Base_Start+0xd8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d115      	bne.n	8005e24 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	4b19      	ldr	r3, [pc, #100]	@ (8005e64 <HAL_TIM_Base_Start+0xdc>)
 8005e00:	4013      	ands	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b06      	cmp	r3, #6
 8005e08:	d015      	beq.n	8005e36 <HAL_TIM_Base_Start+0xae>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e10:	d011      	beq.n	8005e36 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0201 	orr.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e22:	e008      	b.n	8005e36 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	e000      	b.n	8005e38 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40012c00 	.word	0x40012c00
 8005e4c:	40000400 	.word	0x40000400
 8005e50:	40000800 	.word	0x40000800
 8005e54:	40000c00 	.word	0x40000c00
 8005e58:	40013400 	.word	0x40013400
 8005e5c:	40014000 	.word	0x40014000
 8005e60:	40015000 	.word	0x40015000
 8005e64:	00010007 	.word	0x00010007

08005e68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d001      	beq.n	8005e80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e054      	b.n	8005f2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0201 	orr.w	r2, r2, #1
 8005e96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a26      	ldr	r2, [pc, #152]	@ (8005f38 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d022      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eaa:	d01d      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a22      	ldr	r2, [pc, #136]	@ (8005f3c <HAL_TIM_Base_Start_IT+0xd4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d018      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a21      	ldr	r2, [pc, #132]	@ (8005f40 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d013      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a1f      	ldr	r2, [pc, #124]	@ (8005f44 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00e      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a1e      	ldr	r2, [pc, #120]	@ (8005f48 <HAL_TIM_Base_Start_IT+0xe0>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d009      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a1c      	ldr	r2, [pc, #112]	@ (8005f4c <HAL_TIM_Base_Start_IT+0xe4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d004      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8005f50 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d115      	bne.n	8005f14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	4b19      	ldr	r3, [pc, #100]	@ (8005f54 <HAL_TIM_Base_Start_IT+0xec>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b06      	cmp	r3, #6
 8005ef8:	d015      	beq.n	8005f26 <HAL_TIM_Base_Start_IT+0xbe>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f00:	d011      	beq.n	8005f26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0201 	orr.w	r2, r2, #1
 8005f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f12:	e008      	b.n	8005f26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0201 	orr.w	r2, r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	e000      	b.n	8005f28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	40012c00 	.word	0x40012c00
 8005f3c:	40000400 	.word	0x40000400
 8005f40:	40000800 	.word	0x40000800
 8005f44:	40000c00 	.word	0x40000c00
 8005f48:	40013400 	.word	0x40013400
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40015000 	.word	0x40015000
 8005f54:	00010007 	.word	0x00010007

08005f58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e054      	b.n	8006014 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d111      	bne.n	8005f9a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f001 fda0 	bl	8007ac4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d102      	bne.n	8005f92 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a23      	ldr	r2, [pc, #140]	@ (800601c <HAL_TIM_PWM_Init+0xc4>)
 8005f90:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	4619      	mov	r1, r3
 8005fac:	4610      	mov	r0, r2
 8005fae:	f001 f8e9 	bl	8007184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	08006021 	.word	0x08006021

08006020 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d109      	bne.n	8006058 <HAL_TIM_PWM_Start+0x24>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	bf14      	ite	ne
 8006050:	2301      	movne	r3, #1
 8006052:	2300      	moveq	r3, #0
 8006054:	b2db      	uxtb	r3, r3
 8006056:	e03c      	b.n	80060d2 <HAL_TIM_PWM_Start+0x9e>
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2b04      	cmp	r3, #4
 800605c:	d109      	bne.n	8006072 <HAL_TIM_PWM_Start+0x3e>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b01      	cmp	r3, #1
 8006068:	bf14      	ite	ne
 800606a:	2301      	movne	r3, #1
 800606c:	2300      	moveq	r3, #0
 800606e:	b2db      	uxtb	r3, r3
 8006070:	e02f      	b.n	80060d2 <HAL_TIM_PWM_Start+0x9e>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b08      	cmp	r3, #8
 8006076:	d109      	bne.n	800608c <HAL_TIM_PWM_Start+0x58>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b01      	cmp	r3, #1
 8006082:	bf14      	ite	ne
 8006084:	2301      	movne	r3, #1
 8006086:	2300      	moveq	r3, #0
 8006088:	b2db      	uxtb	r3, r3
 800608a:	e022      	b.n	80060d2 <HAL_TIM_PWM_Start+0x9e>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2b0c      	cmp	r3, #12
 8006090:	d109      	bne.n	80060a6 <HAL_TIM_PWM_Start+0x72>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b01      	cmp	r3, #1
 800609c:	bf14      	ite	ne
 800609e:	2301      	movne	r3, #1
 80060a0:	2300      	moveq	r3, #0
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	e015      	b.n	80060d2 <HAL_TIM_PWM_Start+0x9e>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d109      	bne.n	80060c0 <HAL_TIM_PWM_Start+0x8c>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	bf14      	ite	ne
 80060b8:	2301      	movne	r3, #1
 80060ba:	2300      	moveq	r3, #0
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	e008      	b.n	80060d2 <HAL_TIM_PWM_Start+0x9e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	bf14      	ite	ne
 80060cc:	2301      	movne	r3, #1
 80060ce:	2300      	moveq	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e0a6      	b.n	8006228 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d104      	bne.n	80060ea <HAL_TIM_PWM_Start+0xb6>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060e8:	e023      	b.n	8006132 <HAL_TIM_PWM_Start+0xfe>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d104      	bne.n	80060fa <HAL_TIM_PWM_Start+0xc6>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060f8:	e01b      	b.n	8006132 <HAL_TIM_PWM_Start+0xfe>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	d104      	bne.n	800610a <HAL_TIM_PWM_Start+0xd6>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006108:	e013      	b.n	8006132 <HAL_TIM_PWM_Start+0xfe>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b0c      	cmp	r3, #12
 800610e:	d104      	bne.n	800611a <HAL_TIM_PWM_Start+0xe6>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006118:	e00b      	b.n	8006132 <HAL_TIM_PWM_Start+0xfe>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b10      	cmp	r3, #16
 800611e:	d104      	bne.n	800612a <HAL_TIM_PWM_Start+0xf6>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006128:	e003      	b.n	8006132 <HAL_TIM_PWM_Start+0xfe>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2202      	movs	r2, #2
 800612e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2201      	movs	r2, #1
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f001 fc9c 	bl	8007a78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a3a      	ldr	r2, [pc, #232]	@ (8006230 <HAL_TIM_PWM_Start+0x1fc>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d018      	beq.n	800617c <HAL_TIM_PWM_Start+0x148>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a39      	ldr	r2, [pc, #228]	@ (8006234 <HAL_TIM_PWM_Start+0x200>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d013      	beq.n	800617c <HAL_TIM_PWM_Start+0x148>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a37      	ldr	r2, [pc, #220]	@ (8006238 <HAL_TIM_PWM_Start+0x204>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00e      	beq.n	800617c <HAL_TIM_PWM_Start+0x148>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a36      	ldr	r2, [pc, #216]	@ (800623c <HAL_TIM_PWM_Start+0x208>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d009      	beq.n	800617c <HAL_TIM_PWM_Start+0x148>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a34      	ldr	r2, [pc, #208]	@ (8006240 <HAL_TIM_PWM_Start+0x20c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d004      	beq.n	800617c <HAL_TIM_PWM_Start+0x148>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a33      	ldr	r2, [pc, #204]	@ (8006244 <HAL_TIM_PWM_Start+0x210>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d101      	bne.n	8006180 <HAL_TIM_PWM_Start+0x14c>
 800617c:	2301      	movs	r3, #1
 800617e:	e000      	b.n	8006182 <HAL_TIM_PWM_Start+0x14e>
 8006180:	2300      	movs	r3, #0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d007      	beq.n	8006196 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006194:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a25      	ldr	r2, [pc, #148]	@ (8006230 <HAL_TIM_PWM_Start+0x1fc>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d022      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x1b2>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a8:	d01d      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x1b2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a26      	ldr	r2, [pc, #152]	@ (8006248 <HAL_TIM_PWM_Start+0x214>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d018      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x1b2>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a24      	ldr	r2, [pc, #144]	@ (800624c <HAL_TIM_PWM_Start+0x218>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d013      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x1b2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a23      	ldr	r2, [pc, #140]	@ (8006250 <HAL_TIM_PWM_Start+0x21c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d00e      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x1b2>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a19      	ldr	r2, [pc, #100]	@ (8006234 <HAL_TIM_PWM_Start+0x200>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d009      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x1b2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a18      	ldr	r2, [pc, #96]	@ (8006238 <HAL_TIM_PWM_Start+0x204>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d004      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x1b2>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a18      	ldr	r2, [pc, #96]	@ (8006244 <HAL_TIM_PWM_Start+0x210>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d115      	bne.n	8006212 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	4b19      	ldr	r3, [pc, #100]	@ (8006254 <HAL_TIM_PWM_Start+0x220>)
 80061ee:	4013      	ands	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2b06      	cmp	r3, #6
 80061f6:	d015      	beq.n	8006224 <HAL_TIM_PWM_Start+0x1f0>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061fe:	d011      	beq.n	8006224 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006210:	e008      	b.n	8006224 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f042 0201 	orr.w	r2, r2, #1
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	e000      	b.n	8006226 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006224:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	40012c00 	.word	0x40012c00
 8006234:	40013400 	.word	0x40013400
 8006238:	40014000 	.word	0x40014000
 800623c:	40014400 	.word	0x40014400
 8006240:	40014800 	.word	0x40014800
 8006244:	40015000 	.word	0x40015000
 8006248:	40000400 	.word	0x40000400
 800624c:	40000800 	.word	0x40000800
 8006250:	40000c00 	.word	0x40000c00
 8006254:	00010007 	.word	0x00010007

08006258 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e04c      	b.n	8006306 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d111      	bne.n	800629c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f001 fc1f 	bl	8007ac4 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800628a:	2b00      	cmp	r3, #0
 800628c:	d102      	bne.n	8006294 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a1f      	ldr	r2, [pc, #124]	@ (8006310 <HAL_TIM_OnePulse_Init+0xb8>)
 8006292:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3304      	adds	r3, #4
 80062ac:	4619      	mov	r1, r3
 80062ae:	4610      	mov	r0, r2
 80062b0:	f000 ff68 	bl	8007184 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0208 	bic.w	r2, r2, #8
 80062c2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6819      	ldr	r1, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	08006315 	.word	0x08006315

08006314 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006338:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006340:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006348:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006350:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006352:	7bfb      	ldrb	r3, [r7, #15]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d108      	bne.n	800636a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d105      	bne.n	800636a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800635e:	7b7b      	ldrb	r3, [r7, #13]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d102      	bne.n	800636a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006364:	7b3b      	ldrb	r3, [r7, #12]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d001      	beq.n	800636e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e059      	b.n	8006422 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2202      	movs	r2, #2
 8006372:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2202      	movs	r2, #2
 800637a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2202      	movs	r2, #2
 8006382:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2202      	movs	r2, #2
 800638a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0202 	orr.w	r2, r2, #2
 800639c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f042 0204 	orr.w	r2, r2, #4
 80063ac:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2201      	movs	r2, #1
 80063b4:	2100      	movs	r1, #0
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 fb5e 	bl	8007a78 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2201      	movs	r2, #1
 80063c2:	2104      	movs	r1, #4
 80063c4:	4618      	mov	r0, r3
 80063c6:	f001 fb57 	bl	8007a78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a17      	ldr	r2, [pc, #92]	@ (800642c <HAL_TIM_OnePulse_Start_IT+0x104>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d018      	beq.n	8006406 <HAL_TIM_OnePulse_Start_IT+0xde>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a15      	ldr	r2, [pc, #84]	@ (8006430 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d013      	beq.n	8006406 <HAL_TIM_OnePulse_Start_IT+0xde>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a14      	ldr	r2, [pc, #80]	@ (8006434 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00e      	beq.n	8006406 <HAL_TIM_OnePulse_Start_IT+0xde>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a12      	ldr	r2, [pc, #72]	@ (8006438 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d009      	beq.n	8006406 <HAL_TIM_OnePulse_Start_IT+0xde>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a11      	ldr	r2, [pc, #68]	@ (800643c <HAL_TIM_OnePulse_Start_IT+0x114>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d004      	beq.n	8006406 <HAL_TIM_OnePulse_Start_IT+0xde>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a0f      	ldr	r2, [pc, #60]	@ (8006440 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d101      	bne.n	800640a <HAL_TIM_OnePulse_Start_IT+0xe2>
 8006406:	2301      	movs	r3, #1
 8006408:	e000      	b.n	800640c <HAL_TIM_OnePulse_Start_IT+0xe4>
 800640a:	2300      	movs	r3, #0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d007      	beq.n	8006420 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800641e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	40012c00 	.word	0x40012c00
 8006430:	40013400 	.word	0x40013400
 8006434:	40014000 	.word	0x40014000
 8006438:	40014400 	.word	0x40014400
 800643c:	40014800 	.word	0x40014800
 8006440:	40015000 	.word	0x40015000

08006444 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e0a2      	b.n	800659e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d111      	bne.n	8006488 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 fb29 	bl	8007ac4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006476:	2b00      	cmp	r3, #0
 8006478:	d102      	bne.n	8006480 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a4a      	ldr	r2, [pc, #296]	@ (80065a8 <HAL_TIM_Encoder_Init+0x164>)
 800647e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6812      	ldr	r2, [r2, #0]
 800649a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800649e:	f023 0307 	bic.w	r3, r3, #7
 80064a2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3304      	adds	r3, #4
 80064ac:	4619      	mov	r1, r3
 80064ae:	4610      	mov	r0, r2
 80064b0:	f000 fe68 	bl	8007184 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064dc:	f023 0303 	bic.w	r3, r3, #3
 80064e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	4313      	orrs	r3, r2
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80064fa:	f023 030c 	bic.w	r3, r3, #12
 80064fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006506:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800650a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	021b      	lsls	r3, r3, #8
 8006516:	4313      	orrs	r3, r2
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	011a      	lsls	r2, r3, #4
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	031b      	lsls	r3, r3, #12
 800652a:	4313      	orrs	r3, r2
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	4313      	orrs	r3, r2
 8006530:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006538:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006540:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	011b      	lsls	r3, r3, #4
 800654c:	4313      	orrs	r3, r2
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	4313      	orrs	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	080023c5 	.word	0x080023c5

080065ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d110      	bne.n	80065fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d102      	bne.n	80065e8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80065e2:	7b7b      	ldrb	r3, [r7, #13]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d001      	beq.n	80065ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e069      	b.n	80066c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2202      	movs	r2, #2
 80065f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065fc:	e031      	b.n	8006662 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b04      	cmp	r3, #4
 8006602:	d110      	bne.n	8006626 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006604:	7bbb      	ldrb	r3, [r7, #14]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d102      	bne.n	8006610 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800660a:	7b3b      	ldrb	r3, [r7, #12]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d001      	beq.n	8006614 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e055      	b.n	80066c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2202      	movs	r2, #2
 8006618:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006624:	e01d      	b.n	8006662 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d108      	bne.n	800663e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800662c:	7bbb      	ldrb	r3, [r7, #14]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d105      	bne.n	800663e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006632:	7b7b      	ldrb	r3, [r7, #13]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d102      	bne.n	800663e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006638:	7b3b      	ldrb	r3, [r7, #12]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d001      	beq.n	8006642 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e03e      	b.n	80066c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2202      	movs	r2, #2
 8006646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2202      	movs	r2, #2
 800664e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2202      	movs	r2, #2
 8006656:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2202      	movs	r2, #2
 800665e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <HAL_TIM_Encoder_Start+0xc4>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2b04      	cmp	r3, #4
 800666c:	d008      	beq.n	8006680 <HAL_TIM_Encoder_Start+0xd4>
 800666e:	e00f      	b.n	8006690 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2201      	movs	r2, #1
 8006676:	2100      	movs	r1, #0
 8006678:	4618      	mov	r0, r3
 800667a:	f001 f9fd 	bl	8007a78 <TIM_CCxChannelCmd>
      break;
 800667e:	e016      	b.n	80066ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2201      	movs	r2, #1
 8006686:	2104      	movs	r1, #4
 8006688:	4618      	mov	r0, r3
 800668a:	f001 f9f5 	bl	8007a78 <TIM_CCxChannelCmd>
      break;
 800668e:	e00e      	b.n	80066ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2201      	movs	r2, #1
 8006696:	2100      	movs	r1, #0
 8006698:	4618      	mov	r0, r3
 800669a:	f001 f9ed 	bl	8007a78 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2201      	movs	r2, #1
 80066a4:	2104      	movs	r1, #4
 80066a6:	4618      	mov	r0, r3
 80066a8:	f001 f9e6 	bl	8007a78 <TIM_CCxChannelCmd>
      break;
 80066ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0201 	orr.w	r2, r2, #1
 80066bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d026      	beq.n	8006738 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d021      	beq.n	8006738 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f06f 0202 	mvn.w	r2, #2
 80066fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	f003 0303 	and.w	r3, r3, #3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d005      	beq.n	800671e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	4798      	blx	r3
 800671c:	e009      	b.n	8006732 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b00      	cmp	r3, #0
 8006740:	d026      	beq.n	8006790 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b00      	cmp	r3, #0
 800674a:	d021      	beq.n	8006790 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f06f 0204 	mvn.w	r2, #4
 8006754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	4798      	blx	r3
 8006774:	e009      	b.n	800678a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	f003 0308 	and.w	r3, r3, #8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d026      	beq.n	80067e8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f003 0308 	and.w	r3, r3, #8
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d021      	beq.n	80067e8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f06f 0208 	mvn.w	r2, #8
 80067ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2204      	movs	r2, #4
 80067b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d005      	beq.n	80067ce <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	4798      	blx	r3
 80067cc:	e009      	b.n	80067e2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	f003 0310 	and.w	r3, r3, #16
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d026      	beq.n	8006840 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f003 0310 	and.w	r3, r3, #16
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d021      	beq.n	8006840 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f06f 0210 	mvn.w	r2, #16
 8006804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2208      	movs	r2, #8
 800680a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006816:	2b00      	cmp	r3, #0
 8006818:	d005      	beq.n	8006826 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	4798      	blx	r3
 8006824:	e009      	b.n	800683a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00e      	beq.n	8006868 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d009      	beq.n	8006868 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f06f 0201 	mvn.w	r2, #1
 800685c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800686e:	2b00      	cmp	r3, #0
 8006870:	d104      	bne.n	800687c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00e      	beq.n	800689a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006882:	2b00      	cmp	r3, #0
 8006884:	d009      	beq.n	800689a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800688e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00e      	beq.n	80068c2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d009      	beq.n	80068c2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80068b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00e      	beq.n	80068ea <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d009      	beq.n	80068ea <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80068de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00e      	beq.n	8006912 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d009      	beq.n	8006912 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f06f 0220 	mvn.w	r2, #32
 8006906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00e      	beq.n	800693a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d009      	beq.n	800693a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800692e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00e      	beq.n	8006962 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d009      	beq.n	8006962 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00e      	beq.n	800698a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d009      	beq.n	800698a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800697e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00e      	beq.n	80069b2 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d009      	beq.n	80069b2 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80069a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069b2:	bf00      	nop
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069c8:	2300      	movs	r3, #0
 80069ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069d6:	2302      	movs	r3, #2
 80069d8:	e0ff      	b.n	8006bda <HAL_TIM_PWM_ConfigChannel+0x21e>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b14      	cmp	r3, #20
 80069e6:	f200 80f0 	bhi.w	8006bca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80069ea:	a201      	add	r2, pc, #4	@ (adr r2, 80069f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f0:	08006a45 	.word	0x08006a45
 80069f4:	08006bcb 	.word	0x08006bcb
 80069f8:	08006bcb 	.word	0x08006bcb
 80069fc:	08006bcb 	.word	0x08006bcb
 8006a00:	08006a85 	.word	0x08006a85
 8006a04:	08006bcb 	.word	0x08006bcb
 8006a08:	08006bcb 	.word	0x08006bcb
 8006a0c:	08006bcb 	.word	0x08006bcb
 8006a10:	08006ac7 	.word	0x08006ac7
 8006a14:	08006bcb 	.word	0x08006bcb
 8006a18:	08006bcb 	.word	0x08006bcb
 8006a1c:	08006bcb 	.word	0x08006bcb
 8006a20:	08006b07 	.word	0x08006b07
 8006a24:	08006bcb 	.word	0x08006bcb
 8006a28:	08006bcb 	.word	0x08006bcb
 8006a2c:	08006bcb 	.word	0x08006bcb
 8006a30:	08006b49 	.word	0x08006b49
 8006a34:	08006bcb 	.word	0x08006bcb
 8006a38:	08006bcb 	.word	0x08006bcb
 8006a3c:	08006bcb 	.word	0x08006bcb
 8006a40:	08006b89 	.word	0x08006b89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68b9      	ldr	r1, [r7, #8]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 fc4e 	bl	80072ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	699a      	ldr	r2, [r3, #24]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0208 	orr.w	r2, r2, #8
 8006a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 0204 	bic.w	r2, r2, #4
 8006a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6999      	ldr	r1, [r3, #24]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	691a      	ldr	r2, [r3, #16]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	619a      	str	r2, [r3, #24]
      break;
 8006a82:	e0a5      	b.n	8006bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68b9      	ldr	r1, [r7, #8]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 fcc8 	bl	8007420 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699a      	ldr	r2, [r3, #24]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	699a      	ldr	r2, [r3, #24]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6999      	ldr	r1, [r3, #24]
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	021a      	lsls	r2, r3, #8
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	619a      	str	r2, [r3, #24]
      break;
 8006ac4:	e084      	b.n	8006bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 fd3b 	bl	8007548 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	69da      	ldr	r2, [r3, #28]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f042 0208 	orr.w	r2, r2, #8
 8006ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69da      	ldr	r2, [r3, #28]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 0204 	bic.w	r2, r2, #4
 8006af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69d9      	ldr	r1, [r3, #28]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	691a      	ldr	r2, [r3, #16]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	61da      	str	r2, [r3, #28]
      break;
 8006b04:	e064      	b.n	8006bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68b9      	ldr	r1, [r7, #8]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fdad 	bl	800766c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69da      	ldr	r2, [r3, #28]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69da      	ldr	r2, [r3, #28]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	69d9      	ldr	r1, [r3, #28]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	021a      	lsls	r2, r3, #8
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	61da      	str	r2, [r3, #28]
      break;
 8006b46:	e043      	b.n	8006bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68b9      	ldr	r1, [r7, #8]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 fe20 	bl	8007794 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f042 0208 	orr.w	r2, r2, #8
 8006b62:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 0204 	bic.w	r2, r2, #4
 8006b72:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	691a      	ldr	r2, [r3, #16]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006b86:	e023      	b.n	8006bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 fe6a 	bl	8007868 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ba2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bb2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	021a      	lsls	r2, r3, #8
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006bc8:	e002      	b.n	8006bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8006bce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop

08006be4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d101      	bne.n	8006c00 <HAL_TIM_ConfigClockSource+0x1c>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	e0f6      	b.n	8006dee <HAL_TIM_ConfigClockSource+0x20a>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006c1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a6f      	ldr	r2, [pc, #444]	@ (8006df8 <HAL_TIM_ConfigClockSource+0x214>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	f000 80c1 	beq.w	8006dc2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c40:	4a6d      	ldr	r2, [pc, #436]	@ (8006df8 <HAL_TIM_ConfigClockSource+0x214>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	f200 80c6 	bhi.w	8006dd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c48:	4a6c      	ldr	r2, [pc, #432]	@ (8006dfc <HAL_TIM_ConfigClockSource+0x218>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	f000 80b9 	beq.w	8006dc2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c50:	4a6a      	ldr	r2, [pc, #424]	@ (8006dfc <HAL_TIM_ConfigClockSource+0x218>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	f200 80be 	bhi.w	8006dd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c58:	4a69      	ldr	r2, [pc, #420]	@ (8006e00 <HAL_TIM_ConfigClockSource+0x21c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	f000 80b1 	beq.w	8006dc2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c60:	4a67      	ldr	r2, [pc, #412]	@ (8006e00 <HAL_TIM_ConfigClockSource+0x21c>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	f200 80b6 	bhi.w	8006dd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c68:	4a66      	ldr	r2, [pc, #408]	@ (8006e04 <HAL_TIM_ConfigClockSource+0x220>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	f000 80a9 	beq.w	8006dc2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c70:	4a64      	ldr	r2, [pc, #400]	@ (8006e04 <HAL_TIM_ConfigClockSource+0x220>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	f200 80ae 	bhi.w	8006dd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c78:	4a63      	ldr	r2, [pc, #396]	@ (8006e08 <HAL_TIM_ConfigClockSource+0x224>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	f000 80a1 	beq.w	8006dc2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c80:	4a61      	ldr	r2, [pc, #388]	@ (8006e08 <HAL_TIM_ConfigClockSource+0x224>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	f200 80a6 	bhi.w	8006dd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c88:	4a60      	ldr	r2, [pc, #384]	@ (8006e0c <HAL_TIM_ConfigClockSource+0x228>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	f000 8099 	beq.w	8006dc2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c90:	4a5e      	ldr	r2, [pc, #376]	@ (8006e0c <HAL_TIM_ConfigClockSource+0x228>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	f200 809e 	bhi.w	8006dd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c98:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006c9c:	f000 8091 	beq.w	8006dc2 <HAL_TIM_ConfigClockSource+0x1de>
 8006ca0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006ca4:	f200 8096 	bhi.w	8006dd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ca8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cac:	f000 8089 	beq.w	8006dc2 <HAL_TIM_ConfigClockSource+0x1de>
 8006cb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cb4:	f200 808e 	bhi.w	8006dd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cbc:	d03e      	beq.n	8006d3c <HAL_TIM_ConfigClockSource+0x158>
 8006cbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cc2:	f200 8087 	bhi.w	8006dd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cca:	f000 8086 	beq.w	8006dda <HAL_TIM_ConfigClockSource+0x1f6>
 8006cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cd2:	d87f      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cd4:	2b70      	cmp	r3, #112	@ 0x70
 8006cd6:	d01a      	beq.n	8006d0e <HAL_TIM_ConfigClockSource+0x12a>
 8006cd8:	2b70      	cmp	r3, #112	@ 0x70
 8006cda:	d87b      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cdc:	2b60      	cmp	r3, #96	@ 0x60
 8006cde:	d050      	beq.n	8006d82 <HAL_TIM_ConfigClockSource+0x19e>
 8006ce0:	2b60      	cmp	r3, #96	@ 0x60
 8006ce2:	d877      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ce4:	2b50      	cmp	r3, #80	@ 0x50
 8006ce6:	d03c      	beq.n	8006d62 <HAL_TIM_ConfigClockSource+0x17e>
 8006ce8:	2b50      	cmp	r3, #80	@ 0x50
 8006cea:	d873      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cec:	2b40      	cmp	r3, #64	@ 0x40
 8006cee:	d058      	beq.n	8006da2 <HAL_TIM_ConfigClockSource+0x1be>
 8006cf0:	2b40      	cmp	r3, #64	@ 0x40
 8006cf2:	d86f      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cf4:	2b30      	cmp	r3, #48	@ 0x30
 8006cf6:	d064      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x1de>
 8006cf8:	2b30      	cmp	r3, #48	@ 0x30
 8006cfa:	d86b      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	d060      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d00:	2b20      	cmp	r3, #32
 8006d02:	d867      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d05c      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d05a      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d0c:	e062      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d1e:	f000 fe8b 	bl	8007a38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	609a      	str	r2, [r3, #8]
      break;
 8006d3a:	e04f      	b.n	8006ddc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d4c:	f000 fe74 	bl	8007a38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689a      	ldr	r2, [r3, #8]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d5e:	609a      	str	r2, [r3, #8]
      break;
 8006d60:	e03c      	b.n	8006ddc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d6e:	461a      	mov	r2, r3
 8006d70:	f000 fde6 	bl	8007940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2150      	movs	r1, #80	@ 0x50
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 fe3f 	bl	80079fe <TIM_ITRx_SetConfig>
      break;
 8006d80:	e02c      	b.n	8006ddc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f000 fe05 	bl	800799e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2160      	movs	r1, #96	@ 0x60
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 fe2f 	bl	80079fe <TIM_ITRx_SetConfig>
      break;
 8006da0:	e01c      	b.n	8006ddc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dae:	461a      	mov	r2, r3
 8006db0:	f000 fdc6 	bl	8007940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2140      	movs	r1, #64	@ 0x40
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 fe1f 	bl	80079fe <TIM_ITRx_SetConfig>
      break;
 8006dc0:	e00c      	b.n	8006ddc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4610      	mov	r0, r2
 8006dce:	f000 fe16 	bl	80079fe <TIM_ITRx_SetConfig>
      break;
 8006dd2:	e003      	b.n	8006ddc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8006dd8:	e000      	b.n	8006ddc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006dda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	00100070 	.word	0x00100070
 8006dfc:	00100060 	.word	0x00100060
 8006e00:	00100050 	.word	0x00100050
 8006e04:	00100040 	.word	0x00100040
 8006e08:	00100030 	.word	0x00100030
 8006e0c:	00100020 	.word	0x00100020

08006e10 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	607a      	str	r2, [r7, #4]
 8006ed0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e14a      	b.n	8007176 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	f040 80dd 	bne.w	80070a8 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8006eee:	7afb      	ldrb	r3, [r7, #11]
 8006ef0:	2b1f      	cmp	r3, #31
 8006ef2:	f200 80d6 	bhi.w	80070a2 <HAL_TIM_RegisterCallback+0x1de>
 8006ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8006efc <HAL_TIM_RegisterCallback+0x38>)
 8006ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efc:	08006f7d 	.word	0x08006f7d
 8006f00:	08006f85 	.word	0x08006f85
 8006f04:	08006f8d 	.word	0x08006f8d
 8006f08:	08006f95 	.word	0x08006f95
 8006f0c:	08006f9d 	.word	0x08006f9d
 8006f10:	08006fa5 	.word	0x08006fa5
 8006f14:	08006fad 	.word	0x08006fad
 8006f18:	08006fb5 	.word	0x08006fb5
 8006f1c:	08006fbd 	.word	0x08006fbd
 8006f20:	08006fc5 	.word	0x08006fc5
 8006f24:	08006fcd 	.word	0x08006fcd
 8006f28:	08006fd5 	.word	0x08006fd5
 8006f2c:	08006fdd 	.word	0x08006fdd
 8006f30:	08006fe5 	.word	0x08006fe5
 8006f34:	08006fef 	.word	0x08006fef
 8006f38:	08006ff9 	.word	0x08006ff9
 8006f3c:	08007003 	.word	0x08007003
 8006f40:	0800700d 	.word	0x0800700d
 8006f44:	08007017 	.word	0x08007017
 8006f48:	08007021 	.word	0x08007021
 8006f4c:	0800702b 	.word	0x0800702b
 8006f50:	08007035 	.word	0x08007035
 8006f54:	0800703f 	.word	0x0800703f
 8006f58:	08007049 	.word	0x08007049
 8006f5c:	08007053 	.word	0x08007053
 8006f60:	0800705d 	.word	0x0800705d
 8006f64:	08007067 	.word	0x08007067
 8006f68:	08007071 	.word	0x08007071
 8006f6c:	0800707b 	.word	0x0800707b
 8006f70:	08007085 	.word	0x08007085
 8006f74:	0800708f 	.word	0x0800708f
 8006f78:	08007099 	.word	0x08007099
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8006f82:	e0f7      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8006f8a:	e0f3      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8006f92:	e0ef      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8006f9a:	e0eb      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006fa2:	e0e7      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8006faa:	e0e3      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006fb2:	e0df      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8006fba:	e0db      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006fc2:	e0d7      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006fca:	e0d3      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006fd2:	e0cf      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8006fda:	e0cb      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006fe2:	e0c7      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8006fec:	e0c2      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8006ff6:	e0bd      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007000:	e0b8      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800700a:	e0b3      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007014:	e0ae      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800701e:	e0a9      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007028:	e0a4      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007032:	e09f      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800703c:	e09a      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007046:	e095      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007050:	e090      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800705a:	e08b      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007064:	e086      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800706e:	e081      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007078:	e07c      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007082:	e077      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800708c:	e072      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007096:	e06d      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80070a0:	e068      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	75fb      	strb	r3, [r7, #23]
        break;
 80070a6:	e065      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d15d      	bne.n	8007170 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80070b4:	7afb      	ldrb	r3, [r7, #11]
 80070b6:	2b0d      	cmp	r3, #13
 80070b8:	d857      	bhi.n	800716a <HAL_TIM_RegisterCallback+0x2a6>
 80070ba:	a201      	add	r2, pc, #4	@ (adr r2, 80070c0 <HAL_TIM_RegisterCallback+0x1fc>)
 80070bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c0:	080070f9 	.word	0x080070f9
 80070c4:	08007101 	.word	0x08007101
 80070c8:	08007109 	.word	0x08007109
 80070cc:	08007111 	.word	0x08007111
 80070d0:	08007119 	.word	0x08007119
 80070d4:	08007121 	.word	0x08007121
 80070d8:	08007129 	.word	0x08007129
 80070dc:	08007131 	.word	0x08007131
 80070e0:	08007139 	.word	0x08007139
 80070e4:	08007141 	.word	0x08007141
 80070e8:	08007149 	.word	0x08007149
 80070ec:	08007151 	.word	0x08007151
 80070f0:	08007159 	.word	0x08007159
 80070f4:	08007161 	.word	0x08007161
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80070fe:	e039      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007106:	e035      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800710e:	e031      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007116:	e02d      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800711e:	e029      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007126:	e025      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800712e:	e021      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007136:	e01d      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800713e:	e019      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007146:	e015      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800714e:	e011      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007156:	e00d      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800715e:	e009      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007168:	e004      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	75fb      	strb	r3, [r7, #23]
        break;
 800716e:	e001      	b.n	8007174 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007174:	7dfb      	ldrb	r3, [r7, #23]
}
 8007176:	4618      	mov	r0, r3
 8007178:	371c      	adds	r7, #28
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop

08007184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a4c      	ldr	r2, [pc, #304]	@ (80072c8 <TIM_Base_SetConfig+0x144>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d017      	beq.n	80071cc <TIM_Base_SetConfig+0x48>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071a2:	d013      	beq.n	80071cc <TIM_Base_SetConfig+0x48>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a49      	ldr	r2, [pc, #292]	@ (80072cc <TIM_Base_SetConfig+0x148>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d00f      	beq.n	80071cc <TIM_Base_SetConfig+0x48>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a48      	ldr	r2, [pc, #288]	@ (80072d0 <TIM_Base_SetConfig+0x14c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d00b      	beq.n	80071cc <TIM_Base_SetConfig+0x48>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a47      	ldr	r2, [pc, #284]	@ (80072d4 <TIM_Base_SetConfig+0x150>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d007      	beq.n	80071cc <TIM_Base_SetConfig+0x48>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a46      	ldr	r2, [pc, #280]	@ (80072d8 <TIM_Base_SetConfig+0x154>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d003      	beq.n	80071cc <TIM_Base_SetConfig+0x48>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a45      	ldr	r2, [pc, #276]	@ (80072dc <TIM_Base_SetConfig+0x158>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d108      	bne.n	80071de <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	4313      	orrs	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a39      	ldr	r2, [pc, #228]	@ (80072c8 <TIM_Base_SetConfig+0x144>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d023      	beq.n	800722e <TIM_Base_SetConfig+0xaa>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071ec:	d01f      	beq.n	800722e <TIM_Base_SetConfig+0xaa>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a36      	ldr	r2, [pc, #216]	@ (80072cc <TIM_Base_SetConfig+0x148>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d01b      	beq.n	800722e <TIM_Base_SetConfig+0xaa>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a35      	ldr	r2, [pc, #212]	@ (80072d0 <TIM_Base_SetConfig+0x14c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d017      	beq.n	800722e <TIM_Base_SetConfig+0xaa>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a34      	ldr	r2, [pc, #208]	@ (80072d4 <TIM_Base_SetConfig+0x150>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d013      	beq.n	800722e <TIM_Base_SetConfig+0xaa>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a33      	ldr	r2, [pc, #204]	@ (80072d8 <TIM_Base_SetConfig+0x154>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d00f      	beq.n	800722e <TIM_Base_SetConfig+0xaa>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a33      	ldr	r2, [pc, #204]	@ (80072e0 <TIM_Base_SetConfig+0x15c>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d00b      	beq.n	800722e <TIM_Base_SetConfig+0xaa>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a32      	ldr	r2, [pc, #200]	@ (80072e4 <TIM_Base_SetConfig+0x160>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d007      	beq.n	800722e <TIM_Base_SetConfig+0xaa>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a31      	ldr	r2, [pc, #196]	@ (80072e8 <TIM_Base_SetConfig+0x164>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d003      	beq.n	800722e <TIM_Base_SetConfig+0xaa>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a2c      	ldr	r2, [pc, #176]	@ (80072dc <TIM_Base_SetConfig+0x158>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d108      	bne.n	8007240 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	4313      	orrs	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	689a      	ldr	r2, [r3, #8]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a18      	ldr	r2, [pc, #96]	@ (80072c8 <TIM_Base_SetConfig+0x144>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d013      	beq.n	8007294 <TIM_Base_SetConfig+0x110>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a1a      	ldr	r2, [pc, #104]	@ (80072d8 <TIM_Base_SetConfig+0x154>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d00f      	beq.n	8007294 <TIM_Base_SetConfig+0x110>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a1a      	ldr	r2, [pc, #104]	@ (80072e0 <TIM_Base_SetConfig+0x15c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00b      	beq.n	8007294 <TIM_Base_SetConfig+0x110>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a19      	ldr	r2, [pc, #100]	@ (80072e4 <TIM_Base_SetConfig+0x160>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d007      	beq.n	8007294 <TIM_Base_SetConfig+0x110>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a18      	ldr	r2, [pc, #96]	@ (80072e8 <TIM_Base_SetConfig+0x164>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d003      	beq.n	8007294 <TIM_Base_SetConfig+0x110>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a13      	ldr	r2, [pc, #76]	@ (80072dc <TIM_Base_SetConfig+0x158>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d103      	bne.n	800729c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	691a      	ldr	r2, [r3, #16]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d105      	bne.n	80072ba <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	f023 0201 	bic.w	r2, r3, #1
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	611a      	str	r2, [r3, #16]
  }
}
 80072ba:	bf00      	nop
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	40012c00 	.word	0x40012c00
 80072cc:	40000400 	.word	0x40000400
 80072d0:	40000800 	.word	0x40000800
 80072d4:	40000c00 	.word	0x40000c00
 80072d8:	40013400 	.word	0x40013400
 80072dc:	40015000 	.word	0x40015000
 80072e0:	40014000 	.word	0x40014000
 80072e4:	40014400 	.word	0x40014400
 80072e8:	40014800 	.word	0x40014800

080072ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a1b      	ldr	r3, [r3, #32]
 8007300:	f023 0201 	bic.w	r2, r3, #1
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800731a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800731e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f023 0303 	bic.w	r3, r3, #3
 8007326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f023 0302 	bic.w	r3, r3, #2
 8007338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	4313      	orrs	r3, r2
 8007342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a30      	ldr	r2, [pc, #192]	@ (8007408 <TIM_OC1_SetConfig+0x11c>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d013      	beq.n	8007374 <TIM_OC1_SetConfig+0x88>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a2f      	ldr	r2, [pc, #188]	@ (800740c <TIM_OC1_SetConfig+0x120>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d00f      	beq.n	8007374 <TIM_OC1_SetConfig+0x88>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a2e      	ldr	r2, [pc, #184]	@ (8007410 <TIM_OC1_SetConfig+0x124>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d00b      	beq.n	8007374 <TIM_OC1_SetConfig+0x88>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a2d      	ldr	r2, [pc, #180]	@ (8007414 <TIM_OC1_SetConfig+0x128>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d007      	beq.n	8007374 <TIM_OC1_SetConfig+0x88>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a2c      	ldr	r2, [pc, #176]	@ (8007418 <TIM_OC1_SetConfig+0x12c>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d003      	beq.n	8007374 <TIM_OC1_SetConfig+0x88>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a2b      	ldr	r2, [pc, #172]	@ (800741c <TIM_OC1_SetConfig+0x130>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d10c      	bne.n	800738e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	f023 0308 	bic.w	r3, r3, #8
 800737a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	4313      	orrs	r3, r2
 8007384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f023 0304 	bic.w	r3, r3, #4
 800738c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a1d      	ldr	r2, [pc, #116]	@ (8007408 <TIM_OC1_SetConfig+0x11c>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d013      	beq.n	80073be <TIM_OC1_SetConfig+0xd2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a1c      	ldr	r2, [pc, #112]	@ (800740c <TIM_OC1_SetConfig+0x120>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d00f      	beq.n	80073be <TIM_OC1_SetConfig+0xd2>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a1b      	ldr	r2, [pc, #108]	@ (8007410 <TIM_OC1_SetConfig+0x124>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d00b      	beq.n	80073be <TIM_OC1_SetConfig+0xd2>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a1a      	ldr	r2, [pc, #104]	@ (8007414 <TIM_OC1_SetConfig+0x128>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d007      	beq.n	80073be <TIM_OC1_SetConfig+0xd2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a19      	ldr	r2, [pc, #100]	@ (8007418 <TIM_OC1_SetConfig+0x12c>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d003      	beq.n	80073be <TIM_OC1_SetConfig+0xd2>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a18      	ldr	r2, [pc, #96]	@ (800741c <TIM_OC1_SetConfig+0x130>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d111      	bne.n	80073e2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80073cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	4313      	orrs	r3, r2
 80073e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	621a      	str	r2, [r3, #32]
}
 80073fc:	bf00      	nop
 80073fe:	371c      	adds	r7, #28
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	40012c00 	.word	0x40012c00
 800740c:	40013400 	.word	0x40013400
 8007410:	40014000 	.word	0x40014000
 8007414:	40014400 	.word	0x40014400
 8007418:	40014800 	.word	0x40014800
 800741c:	40015000 	.word	0x40015000

08007420 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	f023 0210 	bic.w	r2, r3, #16
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800744e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800745a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	021b      	lsls	r3, r3, #8
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	4313      	orrs	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f023 0320 	bic.w	r3, r3, #32
 800746e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	011b      	lsls	r3, r3, #4
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	4313      	orrs	r3, r2
 800747a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a2c      	ldr	r2, [pc, #176]	@ (8007530 <TIM_OC2_SetConfig+0x110>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d007      	beq.n	8007494 <TIM_OC2_SetConfig+0x74>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a2b      	ldr	r2, [pc, #172]	@ (8007534 <TIM_OC2_SetConfig+0x114>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d003      	beq.n	8007494 <TIM_OC2_SetConfig+0x74>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a2a      	ldr	r2, [pc, #168]	@ (8007538 <TIM_OC2_SetConfig+0x118>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d10d      	bne.n	80074b0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800749a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a1f      	ldr	r2, [pc, #124]	@ (8007530 <TIM_OC2_SetConfig+0x110>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d013      	beq.n	80074e0 <TIM_OC2_SetConfig+0xc0>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007534 <TIM_OC2_SetConfig+0x114>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00f      	beq.n	80074e0 <TIM_OC2_SetConfig+0xc0>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a1e      	ldr	r2, [pc, #120]	@ (800753c <TIM_OC2_SetConfig+0x11c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d00b      	beq.n	80074e0 <TIM_OC2_SetConfig+0xc0>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a1d      	ldr	r2, [pc, #116]	@ (8007540 <TIM_OC2_SetConfig+0x120>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d007      	beq.n	80074e0 <TIM_OC2_SetConfig+0xc0>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a1c      	ldr	r2, [pc, #112]	@ (8007544 <TIM_OC2_SetConfig+0x124>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d003      	beq.n	80074e0 <TIM_OC2_SetConfig+0xc0>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a17      	ldr	r2, [pc, #92]	@ (8007538 <TIM_OC2_SetConfig+0x118>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d113      	bne.n	8007508 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80074e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80074ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	4313      	orrs	r3, r2
 8007506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	621a      	str	r2, [r3, #32]
}
 8007522:	bf00      	nop
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	40012c00 	.word	0x40012c00
 8007534:	40013400 	.word	0x40013400
 8007538:	40015000 	.word	0x40015000
 800753c:	40014000 	.word	0x40014000
 8007540:	40014400 	.word	0x40014400
 8007544:	40014800 	.word	0x40014800

08007548 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007548:	b480      	push	{r7}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800757a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f023 0303 	bic.w	r3, r3, #3
 8007582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	021b      	lsls	r3, r3, #8
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	4313      	orrs	r3, r2
 80075a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a2b      	ldr	r2, [pc, #172]	@ (8007654 <TIM_OC3_SetConfig+0x10c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d007      	beq.n	80075ba <TIM_OC3_SetConfig+0x72>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a2a      	ldr	r2, [pc, #168]	@ (8007658 <TIM_OC3_SetConfig+0x110>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d003      	beq.n	80075ba <TIM_OC3_SetConfig+0x72>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a29      	ldr	r2, [pc, #164]	@ (800765c <TIM_OC3_SetConfig+0x114>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d10d      	bne.n	80075d6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80075c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	021b      	lsls	r3, r3, #8
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80075d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a1e      	ldr	r2, [pc, #120]	@ (8007654 <TIM_OC3_SetConfig+0x10c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d013      	beq.n	8007606 <TIM_OC3_SetConfig+0xbe>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007658 <TIM_OC3_SetConfig+0x110>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d00f      	beq.n	8007606 <TIM_OC3_SetConfig+0xbe>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007660 <TIM_OC3_SetConfig+0x118>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d00b      	beq.n	8007606 <TIM_OC3_SetConfig+0xbe>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007664 <TIM_OC3_SetConfig+0x11c>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d007      	beq.n	8007606 <TIM_OC3_SetConfig+0xbe>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a1b      	ldr	r2, [pc, #108]	@ (8007668 <TIM_OC3_SetConfig+0x120>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d003      	beq.n	8007606 <TIM_OC3_SetConfig+0xbe>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a16      	ldr	r2, [pc, #88]	@ (800765c <TIM_OC3_SetConfig+0x114>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d113      	bne.n	800762e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800760c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	011b      	lsls	r3, r3, #4
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	4313      	orrs	r3, r2
 8007620:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	011b      	lsls	r3, r3, #4
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	4313      	orrs	r3, r2
 800762c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	621a      	str	r2, [r3, #32]
}
 8007648:	bf00      	nop
 800764a:	371c      	adds	r7, #28
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	40012c00 	.word	0x40012c00
 8007658:	40013400 	.word	0x40013400
 800765c:	40015000 	.word	0x40015000
 8007660:	40014000 	.word	0x40014000
 8007664:	40014400 	.word	0x40014400
 8007668:	40014800 	.word	0x40014800

0800766c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800769a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800769e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	021b      	lsls	r3, r3, #8
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80076ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	031b      	lsls	r3, r3, #12
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a2c      	ldr	r2, [pc, #176]	@ (800777c <TIM_OC4_SetConfig+0x110>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d007      	beq.n	80076e0 <TIM_OC4_SetConfig+0x74>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a2b      	ldr	r2, [pc, #172]	@ (8007780 <TIM_OC4_SetConfig+0x114>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d003      	beq.n	80076e0 <TIM_OC4_SetConfig+0x74>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a2a      	ldr	r2, [pc, #168]	@ (8007784 <TIM_OC4_SetConfig+0x118>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d10d      	bne.n	80076fc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80076e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	031b      	lsls	r3, r3, #12
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a1f      	ldr	r2, [pc, #124]	@ (800777c <TIM_OC4_SetConfig+0x110>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d013      	beq.n	800772c <TIM_OC4_SetConfig+0xc0>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a1e      	ldr	r2, [pc, #120]	@ (8007780 <TIM_OC4_SetConfig+0x114>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d00f      	beq.n	800772c <TIM_OC4_SetConfig+0xc0>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a1e      	ldr	r2, [pc, #120]	@ (8007788 <TIM_OC4_SetConfig+0x11c>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d00b      	beq.n	800772c <TIM_OC4_SetConfig+0xc0>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a1d      	ldr	r2, [pc, #116]	@ (800778c <TIM_OC4_SetConfig+0x120>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d007      	beq.n	800772c <TIM_OC4_SetConfig+0xc0>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a1c      	ldr	r2, [pc, #112]	@ (8007790 <TIM_OC4_SetConfig+0x124>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d003      	beq.n	800772c <TIM_OC4_SetConfig+0xc0>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a17      	ldr	r2, [pc, #92]	@ (8007784 <TIM_OC4_SetConfig+0x118>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d113      	bne.n	8007754 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007732:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800773a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	019b      	lsls	r3, r3, #6
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	4313      	orrs	r3, r2
 8007746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	019b      	lsls	r3, r3, #6
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	4313      	orrs	r3, r2
 8007752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	621a      	str	r2, [r3, #32]
}
 800776e:	bf00      	nop
 8007770:	371c      	adds	r7, #28
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	40012c00 	.word	0x40012c00
 8007780:	40013400 	.word	0x40013400
 8007784:	40015000 	.word	0x40015000
 8007788:	40014000 	.word	0x40014000
 800778c:	40014400 	.word	0x40014400
 8007790:	40014800 	.word	0x40014800

08007794 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007794:	b480      	push	{r7}
 8007796:	b087      	sub	sp, #28
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a1b      	ldr	r3, [r3, #32]
 80077a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80077d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	041b      	lsls	r3, r3, #16
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a19      	ldr	r2, [pc, #100]	@ (8007850 <TIM_OC5_SetConfig+0xbc>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d013      	beq.n	8007816 <TIM_OC5_SetConfig+0x82>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a18      	ldr	r2, [pc, #96]	@ (8007854 <TIM_OC5_SetConfig+0xc0>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d00f      	beq.n	8007816 <TIM_OC5_SetConfig+0x82>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a17      	ldr	r2, [pc, #92]	@ (8007858 <TIM_OC5_SetConfig+0xc4>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d00b      	beq.n	8007816 <TIM_OC5_SetConfig+0x82>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a16      	ldr	r2, [pc, #88]	@ (800785c <TIM_OC5_SetConfig+0xc8>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d007      	beq.n	8007816 <TIM_OC5_SetConfig+0x82>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a15      	ldr	r2, [pc, #84]	@ (8007860 <TIM_OC5_SetConfig+0xcc>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d003      	beq.n	8007816 <TIM_OC5_SetConfig+0x82>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a14      	ldr	r2, [pc, #80]	@ (8007864 <TIM_OC5_SetConfig+0xd0>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d109      	bne.n	800782a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800781c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	021b      	lsls	r3, r3, #8
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	4313      	orrs	r3, r2
 8007828:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	621a      	str	r2, [r3, #32]
}
 8007844:	bf00      	nop
 8007846:	371c      	adds	r7, #28
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	40012c00 	.word	0x40012c00
 8007854:	40013400 	.word	0x40013400
 8007858:	40014000 	.word	0x40014000
 800785c:	40014400 	.word	0x40014400
 8007860:	40014800 	.word	0x40014800
 8007864:	40015000 	.word	0x40015000

08007868 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007868:	b480      	push	{r7}
 800786a:	b087      	sub	sp, #28
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800788e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800789a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80078ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	051b      	lsls	r3, r3, #20
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a1a      	ldr	r2, [pc, #104]	@ (8007928 <TIM_OC6_SetConfig+0xc0>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d013      	beq.n	80078ec <TIM_OC6_SetConfig+0x84>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a19      	ldr	r2, [pc, #100]	@ (800792c <TIM_OC6_SetConfig+0xc4>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d00f      	beq.n	80078ec <TIM_OC6_SetConfig+0x84>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a18      	ldr	r2, [pc, #96]	@ (8007930 <TIM_OC6_SetConfig+0xc8>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d00b      	beq.n	80078ec <TIM_OC6_SetConfig+0x84>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a17      	ldr	r2, [pc, #92]	@ (8007934 <TIM_OC6_SetConfig+0xcc>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d007      	beq.n	80078ec <TIM_OC6_SetConfig+0x84>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a16      	ldr	r2, [pc, #88]	@ (8007938 <TIM_OC6_SetConfig+0xd0>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d003      	beq.n	80078ec <TIM_OC6_SetConfig+0x84>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a15      	ldr	r2, [pc, #84]	@ (800793c <TIM_OC6_SetConfig+0xd4>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d109      	bne.n	8007900 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	029b      	lsls	r3, r3, #10
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	621a      	str	r2, [r3, #32]
}
 800791a:	bf00      	nop
 800791c:	371c      	adds	r7, #28
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	40012c00 	.word	0x40012c00
 800792c:	40013400 	.word	0x40013400
 8007930:	40014000 	.word	0x40014000
 8007934:	40014400 	.word	0x40014400
 8007938:	40014800 	.word	0x40014800
 800793c:	40015000 	.word	0x40015000

08007940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6a1b      	ldr	r3, [r3, #32]
 8007950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	f023 0201 	bic.w	r2, r3, #1
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800796a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	011b      	lsls	r3, r3, #4
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	4313      	orrs	r3, r2
 8007974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f023 030a 	bic.w	r3, r3, #10
 800797c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	4313      	orrs	r3, r2
 8007984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	621a      	str	r2, [r3, #32]
}
 8007992:	bf00      	nop
 8007994:	371c      	adds	r7, #28
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800799e:	b480      	push	{r7}
 80079a0:	b087      	sub	sp, #28
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	60f8      	str	r0, [r7, #12]
 80079a6:	60b9      	str	r1, [r7, #8]
 80079a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	f023 0210 	bic.w	r2, r3, #16
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	031b      	lsls	r3, r3, #12
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80079da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	011b      	lsls	r3, r3, #4
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	621a      	str	r2, [r3, #32]
}
 80079f2:	bf00      	nop
 80079f4:	371c      	adds	r7, #28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b085      	sub	sp, #20
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007a14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a1a:	683a      	ldr	r2, [r7, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	f043 0307 	orr.w	r3, r3, #7
 8007a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	609a      	str	r2, [r3, #8]
}
 8007a2c:	bf00      	nop
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
 8007a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	021a      	lsls	r2, r3, #8
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	609a      	str	r2, [r3, #8]
}
 8007a6c:	bf00      	nop
 8007a6e:	371c      	adds	r7, #28
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	f003 031f 	and.w	r3, r3, #31
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6a1a      	ldr	r2, [r3, #32]
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	43db      	mvns	r3, r3
 8007a9a:	401a      	ands	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6a1a      	ldr	r2, [r3, #32]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f003 031f 	and.w	r3, r3, #31
 8007aaa:	6879      	ldr	r1, [r7, #4]
 8007aac:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab0:	431a      	orrs	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	621a      	str	r2, [r3, #32]
}
 8007ab6:	bf00      	nop
 8007ab8:	371c      	adds	r7, #28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
	...

08007ac4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a26      	ldr	r2, [pc, #152]	@ (8007b68 <TIM_ResetCallback+0xa4>)
 8007ad0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a25      	ldr	r2, [pc, #148]	@ (8007b6c <TIM_ResetCallback+0xa8>)
 8007ad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a24      	ldr	r2, [pc, #144]	@ (8007b70 <TIM_ResetCallback+0xac>)
 8007ae0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a23      	ldr	r2, [pc, #140]	@ (8007b74 <TIM_ResetCallback+0xb0>)
 8007ae8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a22      	ldr	r2, [pc, #136]	@ (8007b78 <TIM_ResetCallback+0xb4>)
 8007af0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a21      	ldr	r2, [pc, #132]	@ (8007b7c <TIM_ResetCallback+0xb8>)
 8007af8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a20      	ldr	r2, [pc, #128]	@ (8007b80 <TIM_ResetCallback+0xbc>)
 8007b00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a1f      	ldr	r2, [pc, #124]	@ (8007b84 <TIM_ResetCallback+0xc0>)
 8007b08:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8007b88 <TIM_ResetCallback+0xc4>)
 8007b10:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a1d      	ldr	r2, [pc, #116]	@ (8007b8c <TIM_ResetCallback+0xc8>)
 8007b18:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8007b90 <TIM_ResetCallback+0xcc>)
 8007b20:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a1b      	ldr	r2, [pc, #108]	@ (8007b94 <TIM_ResetCallback+0xd0>)
 8007b28:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8007b98 <TIM_ResetCallback+0xd4>)
 8007b30:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a19      	ldr	r2, [pc, #100]	@ (8007b9c <TIM_ResetCallback+0xd8>)
 8007b38:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a18      	ldr	r2, [pc, #96]	@ (8007ba0 <TIM_ResetCallback+0xdc>)
 8007b40:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a17      	ldr	r2, [pc, #92]	@ (8007ba4 <TIM_ResetCallback+0xe0>)
 8007b48:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a16      	ldr	r2, [pc, #88]	@ (8007ba8 <TIM_ResetCallback+0xe4>)
 8007b50:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a15      	ldr	r2, [pc, #84]	@ (8007bac <TIM_ResetCallback+0xe8>)
 8007b58:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr
 8007b68:	08001da9 	.word	0x08001da9
 8007b6c:	08006e11 	.word	0x08006e11
 8007b70:	08006e89 	.word	0x08006e89
 8007b74:	08006e9d 	.word	0x08006e9d
 8007b78:	08006e39 	.word	0x08006e39
 8007b7c:	08006e4d 	.word	0x08006e4d
 8007b80:	08006e25 	.word	0x08006e25
 8007b84:	08006e61 	.word	0x08006e61
 8007b88:	08006e75 	.word	0x08006e75
 8007b8c:	08006eb1 	.word	0x08006eb1
 8007b90:	08007cdd 	.word	0x08007cdd
 8007b94:	08007cf1 	.word	0x08007cf1
 8007b98:	08007d05 	.word	0x08007d05
 8007b9c:	08007d19 	.word	0x08007d19
 8007ba0:	08007d2d 	.word	0x08007d2d
 8007ba4:	08007d41 	.word	0x08007d41
 8007ba8:	08007d55 	.word	0x08007d55
 8007bac:	08007d69 	.word	0x08007d69

08007bb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d101      	bne.n	8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	e074      	b.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a34      	ldr	r2, [pc, #208]	@ (8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d009      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a33      	ldr	r2, [pc, #204]	@ (8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d004      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a31      	ldr	r2, [pc, #196]	@ (8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d108      	bne.n	8007c18 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007c0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a21      	ldr	r2, [pc, #132]	@ (8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d022      	beq.n	8007c86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c48:	d01d      	beq.n	8007c86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8007ccc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d018      	beq.n	8007c86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a1d      	ldr	r2, [pc, #116]	@ (8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d013      	beq.n	8007c86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a1c      	ldr	r2, [pc, #112]	@ (8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d00e      	beq.n	8007c86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a15      	ldr	r2, [pc, #84]	@ (8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d009      	beq.n	8007c86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a18      	ldr	r2, [pc, #96]	@ (8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d004      	beq.n	8007c86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a11      	ldr	r2, [pc, #68]	@ (8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d10c      	bne.n	8007ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	40012c00 	.word	0x40012c00
 8007cc4:	40013400 	.word	0x40013400
 8007cc8:	40015000 	.word	0x40015000
 8007ccc:	40000400 	.word	0x40000400
 8007cd0:	40000800 	.word	0x40000800
 8007cd4:	40000c00 	.word	0x40000c00
 8007cd8:	40014000 	.word	0x40014000

08007cdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e050      	b.n	8007e30 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d114      	bne.n	8007dc2 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fdc5 	bl	8008930 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d103      	bne.n	8007db8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a21      	ldr	r2, [pc, #132]	@ (8007e38 <HAL_UART_Init+0xbc>)
 8007db4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2224      	movs	r2, #36	@ 0x24
 8007dc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f022 0201 	bic.w	r2, r2, #1
 8007dd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f001 f8f2 	bl	8008fcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fdf3 	bl	80089d4 <UART_SetConfig>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d101      	bne.n	8007df8 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e01b      	b.n	8007e30 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689a      	ldr	r2, [r3, #8]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f042 0201 	orr.w	r2, r2, #1
 8007e26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f001 f971 	bl	8009110 <UART_CheckIdleState>
 8007e2e:	4603      	mov	r3, r0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	080025c5 	.word	0x080025c5

08007e3c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	460b      	mov	r3, r1
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d109      	bne.n	8007e68 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e09c      	b.n	8007fa2 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e6e:	2b20      	cmp	r3, #32
 8007e70:	d16c      	bne.n	8007f4c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8007e72:	7afb      	ldrb	r3, [r7, #11]
 8007e74:	2b0c      	cmp	r3, #12
 8007e76:	d85e      	bhi.n	8007f36 <HAL_UART_RegisterCallback+0xfa>
 8007e78:	a201      	add	r2, pc, #4	@ (adr r2, 8007e80 <HAL_UART_RegisterCallback+0x44>)
 8007e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7e:	bf00      	nop
 8007e80:	08007eb5 	.word	0x08007eb5
 8007e84:	08007ebf 	.word	0x08007ebf
 8007e88:	08007ec9 	.word	0x08007ec9
 8007e8c:	08007ed3 	.word	0x08007ed3
 8007e90:	08007edd 	.word	0x08007edd
 8007e94:	08007ee7 	.word	0x08007ee7
 8007e98:	08007ef1 	.word	0x08007ef1
 8007e9c:	08007efb 	.word	0x08007efb
 8007ea0:	08007f05 	.word	0x08007f05
 8007ea4:	08007f0f 	.word	0x08007f0f
 8007ea8:	08007f19 	.word	0x08007f19
 8007eac:	08007f23 	.word	0x08007f23
 8007eb0:	08007f2d 	.word	0x08007f2d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007ebc:	e070      	b.n	8007fa0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007ec6:	e06b      	b.n	8007fa0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007ed0:	e066      	b.n	8007fa0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007eda:	e061      	b.n	8007fa0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007ee4:	e05c      	b.n	8007fa0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007eee:	e057      	b.n	8007fa0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007ef8:	e052      	b.n	8007fa0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007f02:	e04d      	b.n	8007fa0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8007f0c:	e048      	b.n	8007fa0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007f16:	e043      	b.n	8007fa0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007f20:	e03e      	b.n	8007fa0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007f2a:	e039      	b.n	8007fa0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007f34:	e034      	b.n	8007fa0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f3c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	75fb      	strb	r3, [r7, #23]
        break;
 8007f4a:	e029      	b.n	8007fa0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d11a      	bne.n	8007f8c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8007f56:	7afb      	ldrb	r3, [r7, #11]
 8007f58:	2b0b      	cmp	r3, #11
 8007f5a:	d002      	beq.n	8007f62 <HAL_UART_RegisterCallback+0x126>
 8007f5c:	2b0c      	cmp	r3, #12
 8007f5e:	d005      	beq.n	8007f6c <HAL_UART_RegisterCallback+0x130>
 8007f60:	e009      	b.n	8007f76 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007f6a:	e019      	b.n	8007fa0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007f74:	e014      	b.n	8007fa0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f7c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	75fb      	strb	r3, [r7, #23]
        break;
 8007f8a:	e009      	b.n	8007fa0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop

08007fb0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b08a      	sub	sp, #40	@ 0x28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fc4:	2b20      	cmp	r3, #32
 8007fc6:	d167      	bne.n	8008098 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d002      	beq.n	8007fd4 <HAL_UART_Transmit_DMA+0x24>
 8007fce:	88fb      	ldrh	r3, [r7, #6]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e060      	b.n	800809a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	88fa      	ldrh	r2, [r7, #6]
 8007fe2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	88fa      	ldrh	r2, [r7, #6]
 8007fea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2221      	movs	r2, #33	@ 0x21
 8007ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008002:	2b00      	cmp	r3, #0
 8008004:	d028      	beq.n	8008058 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800800a:	4a26      	ldr	r2, [pc, #152]	@ (80080a4 <HAL_UART_Transmit_DMA+0xf4>)
 800800c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008012:	4a25      	ldr	r2, [pc, #148]	@ (80080a8 <HAL_UART_Transmit_DMA+0xf8>)
 8008014:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800801a:	4a24      	ldr	r2, [pc, #144]	@ (80080ac <HAL_UART_Transmit_DMA+0xfc>)
 800801c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008022:	2200      	movs	r2, #0
 8008024:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800802e:	4619      	mov	r1, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3328      	adds	r3, #40	@ 0x28
 8008036:	461a      	mov	r2, r3
 8008038:	88fb      	ldrh	r3, [r7, #6]
 800803a:	f7fc f9d5 	bl	80043e8 <HAL_DMA_Start_IT>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d009      	beq.n	8008058 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2210      	movs	r2, #16
 8008048:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2220      	movs	r2, #32
 8008050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e020      	b.n	800809a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2240      	movs	r2, #64	@ 0x40
 800805e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3308      	adds	r3, #8
 8008066:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	e853 3f00 	ldrex	r3, [r3]
 800806e:	613b      	str	r3, [r7, #16]
   return(result);
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008076:	627b      	str	r3, [r7, #36]	@ 0x24
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	3308      	adds	r3, #8
 800807e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008080:	623a      	str	r2, [r7, #32]
 8008082:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008084:	69f9      	ldr	r1, [r7, #28]
 8008086:	6a3a      	ldr	r2, [r7, #32]
 8008088:	e841 2300 	strex	r3, r2, [r1]
 800808c:	61bb      	str	r3, [r7, #24]
   return(result);
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1e5      	bne.n	8008060 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	e000      	b.n	800809a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008098:	2302      	movs	r3, #2
  }
}
 800809a:	4618      	mov	r0, r3
 800809c:	3728      	adds	r7, #40	@ 0x28
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	080095db 	.word	0x080095db
 80080a8:	08009679 	.word	0x08009679
 80080ac:	08009813 	.word	0x08009813

080080b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08a      	sub	sp, #40	@ 0x28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	4613      	mov	r3, r2
 80080bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080c4:	2b20      	cmp	r3, #32
 80080c6:	d137      	bne.n	8008138 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d002      	beq.n	80080d4 <HAL_UART_Receive_DMA+0x24>
 80080ce:	88fb      	ldrh	r3, [r7, #6]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d101      	bne.n	80080d8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e030      	b.n	800813a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a18      	ldr	r2, [pc, #96]	@ (8008144 <HAL_UART_Receive_DMA+0x94>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d01f      	beq.n	8008128 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d018      	beq.n	8008128 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	e853 3f00 	ldrex	r3, [r3]
 8008102:	613b      	str	r3, [r7, #16]
   return(result);
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800810a:	627b      	str	r3, [r7, #36]	@ 0x24
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008114:	623b      	str	r3, [r7, #32]
 8008116:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008118:	69f9      	ldr	r1, [r7, #28]
 800811a:	6a3a      	ldr	r2, [r7, #32]
 800811c:	e841 2300 	strex	r3, r2, [r1]
 8008120:	61bb      	str	r3, [r7, #24]
   return(result);
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1e6      	bne.n	80080f6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008128:	88fb      	ldrh	r3, [r7, #6]
 800812a:	461a      	mov	r2, r3
 800812c:	68b9      	ldr	r1, [r7, #8]
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f001 f906 	bl	8009340 <UART_Start_Receive_DMA>
 8008134:	4603      	mov	r3, r0
 8008136:	e000      	b.n	800813a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008138:	2302      	movs	r3, #2
  }
}
 800813a:	4618      	mov	r0, r3
 800813c:	3728      	adds	r7, #40	@ 0x28
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	40008000 	.word	0x40008000

08008148 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b0ba      	sub	sp, #232	@ 0xe8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800816e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008172:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008176:	4013      	ands	r3, r2
 8008178:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800817c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008180:	2b00      	cmp	r3, #0
 8008182:	d11b      	bne.n	80081bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	2b00      	cmp	r3, #0
 800818e:	d015      	beq.n	80081bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008194:	f003 0320 	and.w	r3, r3, #32
 8008198:	2b00      	cmp	r3, #0
 800819a:	d105      	bne.n	80081a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800819c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d009      	beq.n	80081bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 82f3 	beq.w	8008798 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	4798      	blx	r3
      }
      return;
 80081ba:	e2ed      	b.n	8008798 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80081bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 8129 	beq.w	8008418 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80081c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80081ca:	4b90      	ldr	r3, [pc, #576]	@ (800840c <HAL_UART_IRQHandler+0x2c4>)
 80081cc:	4013      	ands	r3, r2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d106      	bne.n	80081e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80081d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80081d6:	4b8e      	ldr	r3, [pc, #568]	@ (8008410 <HAL_UART_IRQHandler+0x2c8>)
 80081d8:	4013      	ands	r3, r2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 811c 	beq.w	8008418 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081e4:	f003 0301 	and.w	r3, r3, #1
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d011      	beq.n	8008210 <HAL_UART_IRQHandler+0xc8>
 80081ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00b      	beq.n	8008210 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2201      	movs	r2, #1
 80081fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008206:	f043 0201 	orr.w	r2, r3, #1
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008214:	f003 0302 	and.w	r3, r3, #2
 8008218:	2b00      	cmp	r3, #0
 800821a:	d011      	beq.n	8008240 <HAL_UART_IRQHandler+0xf8>
 800821c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00b      	beq.n	8008240 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2202      	movs	r2, #2
 800822e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008236:	f043 0204 	orr.w	r2, r3, #4
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008244:	f003 0304 	and.w	r3, r3, #4
 8008248:	2b00      	cmp	r3, #0
 800824a:	d011      	beq.n	8008270 <HAL_UART_IRQHandler+0x128>
 800824c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00b      	beq.n	8008270 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2204      	movs	r2, #4
 800825e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008266:	f043 0202 	orr.w	r2, r3, #2
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008274:	f003 0308 	and.w	r3, r3, #8
 8008278:	2b00      	cmp	r3, #0
 800827a:	d017      	beq.n	80082ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800827c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008280:	f003 0320 	and.w	r3, r3, #32
 8008284:	2b00      	cmp	r3, #0
 8008286:	d105      	bne.n	8008294 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008288:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800828c:	4b5f      	ldr	r3, [pc, #380]	@ (800840c <HAL_UART_IRQHandler+0x2c4>)
 800828e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00b      	beq.n	80082ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2208      	movs	r2, #8
 800829a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082a2:	f043 0208 	orr.w	r2, r3, #8
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80082ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d012      	beq.n	80082de <HAL_UART_IRQHandler+0x196>
 80082b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00c      	beq.n	80082de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80082cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082d4:	f043 0220 	orr.w	r2, r3, #32
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f000 8259 	beq.w	800879c <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082ee:	f003 0320 	and.w	r3, r3, #32
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d013      	beq.n	800831e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082fa:	f003 0320 	and.w	r3, r3, #32
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d105      	bne.n	800830e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d007      	beq.n	800831e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008324:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008332:	2b40      	cmp	r3, #64	@ 0x40
 8008334:	d005      	beq.n	8008342 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800833a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800833e:	2b00      	cmp	r3, #0
 8008340:	d058      	beq.n	80083f4 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f001 f8e3 	bl	800950e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008352:	2b40      	cmp	r3, #64	@ 0x40
 8008354:	d148      	bne.n	80083e8 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	3308      	adds	r3, #8
 800835c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008360:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008364:	e853 3f00 	ldrex	r3, [r3]
 8008368:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800836c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008374:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3308      	adds	r3, #8
 800837e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008382:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008386:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800838e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008392:	e841 2300 	strex	r3, r2, [r1]
 8008396:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800839a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1d9      	bne.n	8008356 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d017      	beq.n	80083dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083b2:	4a18      	ldr	r2, [pc, #96]	@ (8008414 <HAL_UART_IRQHandler+0x2cc>)
 80083b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fc f8e7 	bl	8004590 <HAL_DMA_Abort_IT>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d01f      	beq.n	8008408 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80083d6:	4610      	mov	r0, r2
 80083d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083da:	e015      	b.n	8008408 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e6:	e00f      	b.n	8008408 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f2:	e009      	b.n	8008408 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008406:	e1c9      	b.n	800879c <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008408:	bf00      	nop
    return;
 800840a:	e1c7      	b.n	800879c <HAL_UART_IRQHandler+0x654>
 800840c:	10000001 	.word	0x10000001
 8008410:	04000120 	.word	0x04000120
 8008414:	08009897 	.word	0x08009897

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800841c:	2b01      	cmp	r3, #1
 800841e:	f040 8157 	bne.w	80086d0 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008426:	f003 0310 	and.w	r3, r3, #16
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 8150 	beq.w	80086d0 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008434:	f003 0310 	and.w	r3, r3, #16
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 8149 	beq.w	80086d0 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2210      	movs	r2, #16
 8008444:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008450:	2b40      	cmp	r3, #64	@ 0x40
 8008452:	f040 80bd 	bne.w	80085d0 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008464:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 8199 	beq.w	80087a0 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008474:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008478:	429a      	cmp	r2, r3
 800847a:	f080 8191 	bcs.w	80087a0 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008484:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 0320 	and.w	r3, r3, #32
 8008496:	2b00      	cmp	r3, #0
 8008498:	f040 8087 	bne.w	80085aa <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084a8:	e853 3f00 	ldrex	r3, [r3]
 80084ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80084b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80084b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80084c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80084ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80084d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80084d6:	e841 2300 	strex	r3, r2, [r1]
 80084da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80084de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1da      	bne.n	800849c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3308      	adds	r3, #8
 80084ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084f0:	e853 3f00 	ldrex	r3, [r3]
 80084f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80084f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084f8:	f023 0301 	bic.w	r3, r3, #1
 80084fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3308      	adds	r3, #8
 8008506:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800850a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800850e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008510:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008512:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008516:	e841 2300 	strex	r3, r2, [r1]
 800851a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800851c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1e1      	bne.n	80084e6 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3308      	adds	r3, #8
 8008528:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800852c:	e853 3f00 	ldrex	r3, [r3]
 8008530:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008532:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008534:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008538:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3308      	adds	r3, #8
 8008542:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008546:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008548:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800854c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800854e:	e841 2300 	strex	r3, r2, [r1]
 8008552:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1e3      	bne.n	8008522 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2220      	movs	r2, #32
 800855e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008570:	e853 3f00 	ldrex	r3, [r3]
 8008574:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008578:	f023 0310 	bic.w	r3, r3, #16
 800857c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	461a      	mov	r2, r3
 8008586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800858a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800858c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008590:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008598:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e4      	bne.n	8008568 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fb ff9a 	bl	80044de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2202      	movs	r2, #2
 80085ae:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80085c2:	b292      	uxth	r2, r2
 80085c4:	1a8a      	subs	r2, r1, r2
 80085c6:	b292      	uxth	r2, r2
 80085c8:	4611      	mov	r1, r2
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085ce:	e0e7      	b.n	80087a0 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80085dc:	b29b      	uxth	r3, r3
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 80d9 	beq.w	80087a4 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 80085f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 80d4 	beq.w	80087a4 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008604:	e853 3f00 	ldrex	r3, [r3]
 8008608:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800860a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800860c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008610:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	461a      	mov	r2, r3
 800861a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800861e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008620:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008622:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008624:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008626:	e841 2300 	strex	r3, r2, [r1]
 800862a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800862c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1e4      	bne.n	80085fc <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3308      	adds	r3, #8
 8008638:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863c:	e853 3f00 	ldrex	r3, [r3]
 8008640:	623b      	str	r3, [r7, #32]
   return(result);
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008648:	f023 0301 	bic.w	r3, r3, #1
 800864c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3308      	adds	r3, #8
 8008656:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800865a:	633a      	str	r2, [r7, #48]	@ 0x30
 800865c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008662:	e841 2300 	strex	r3, r2, [r1]
 8008666:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1e1      	bne.n	8008632 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2220      	movs	r2, #32
 8008672:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	e853 3f00 	ldrex	r3, [r3]
 800868e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f023 0310 	bic.w	r3, r3, #16
 8008696:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80086a4:	61fb      	str	r3, [r7, #28]
 80086a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a8:	69b9      	ldr	r1, [r7, #24]
 80086aa:	69fa      	ldr	r2, [r7, #28]
 80086ac:	e841 2300 	strex	r3, r2, [r1]
 80086b0:	617b      	str	r3, [r7, #20]
   return(result);
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1e4      	bne.n	8008682 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2202      	movs	r2, #2
 80086bc:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80086c4:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80086c8:	4611      	mov	r1, r2
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80086ce:	e069      	b.n	80087a4 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80086d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d010      	beq.n	80086fe <HAL_UART_IRQHandler+0x5b6>
 80086dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00a      	beq.n	80086fe <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80086f0:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086fc:	e055      	b.n	80087aa <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80086fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008706:	2b00      	cmp	r3, #0
 8008708:	d014      	beq.n	8008734 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800870a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800870e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008712:	2b00      	cmp	r3, #0
 8008714:	d105      	bne.n	8008722 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800871a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d008      	beq.n	8008734 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008726:	2b00      	cmp	r3, #0
 8008728:	d03e      	beq.n	80087a8 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	4798      	blx	r3
    }
    return;
 8008732:	e039      	b.n	80087a8 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800873c:	2b00      	cmp	r3, #0
 800873e:	d009      	beq.n	8008754 <HAL_UART_IRQHandler+0x60c>
 8008740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f001 f8ba 	bl	80098c6 <UART_EndTransmit_IT>
    return;
 8008752:	e02a      	b.n	80087aa <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008758:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00b      	beq.n	8008778 <HAL_UART_IRQHandler+0x630>
 8008760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008764:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d005      	beq.n	8008778 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008776:	e018      	b.n	80087aa <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800877c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d012      	beq.n	80087aa <HAL_UART_IRQHandler+0x662>
 8008784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008788:	2b00      	cmp	r3, #0
 800878a:	da0e      	bge.n	80087aa <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008796:	e008      	b.n	80087aa <HAL_UART_IRQHandler+0x662>
      return;
 8008798:	bf00      	nop
 800879a:	e006      	b.n	80087aa <HAL_UART_IRQHandler+0x662>
    return;
 800879c:	bf00      	nop
 800879e:	e004      	b.n	80087aa <HAL_UART_IRQHandler+0x662>
      return;
 80087a0:	bf00      	nop
 80087a2:	e002      	b.n	80087aa <HAL_UART_IRQHandler+0x662>
      return;
 80087a4:	bf00      	nop
 80087a6:	e000      	b.n	80087aa <HAL_UART_IRQHandler+0x662>
    return;
 80087a8:	bf00      	nop
  }
}
 80087aa:	37e8      	adds	r7, #232	@ 0xe8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	460b      	mov	r3, r1
 800885a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a09      	ldr	r2, [pc, #36]	@ (800889c <HAL_UART_ReceiverTimeout_Config+0x34>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d009      	beq.n	8008890 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	430a      	orrs	r2, r1
 800888e:	615a      	str	r2, [r3, #20]
  }
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	40008000 	.word	0x40008000

080088a0 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a18      	ldr	r2, [pc, #96]	@ (8008910 <HAL_UART_EnableReceiverTimeout+0x70>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d027      	beq.n	8008902 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088b8:	2b20      	cmp	r3, #32
 80088ba:	d120      	bne.n	80088fe <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d101      	bne.n	80088ca <HAL_UART_EnableReceiverTimeout+0x2a>
 80088c6:	2302      	movs	r3, #2
 80088c8:	e01c      	b.n	8008904 <HAL_UART_EnableReceiverTimeout+0x64>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2224      	movs	r2, #36	@ 0x24
 80088d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	685a      	ldr	r2, [r3, #4]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80088e8:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2220      	movs	r2, #32
 80088ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	e002      	b.n	8008904 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 80088fe:	2302      	movs	r3, #2
 8008900:	e000      	b.n	8008904 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
  }
}
 8008904:	4618      	mov	r0, r3
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	40008000 	.word	0x40008000

08008914 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8008922:	4618      	mov	r0, r3
 8008924:	370c      	adds	r7, #12
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
	...

08008930 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a1a      	ldr	r2, [pc, #104]	@ (80089a4 <UART_InitCallbacksToDefault+0x74>)
 800893c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a19      	ldr	r2, [pc, #100]	@ (80089a8 <UART_InitCallbacksToDefault+0x78>)
 8008944:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a18      	ldr	r2, [pc, #96]	@ (80089ac <UART_InitCallbacksToDefault+0x7c>)
 800894c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a17      	ldr	r2, [pc, #92]	@ (80089b0 <UART_InitCallbacksToDefault+0x80>)
 8008954:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a16      	ldr	r2, [pc, #88]	@ (80089b4 <UART_InitCallbacksToDefault+0x84>)
 800895c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a15      	ldr	r2, [pc, #84]	@ (80089b8 <UART_InitCallbacksToDefault+0x88>)
 8008964:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a14      	ldr	r2, [pc, #80]	@ (80089bc <UART_InitCallbacksToDefault+0x8c>)
 800896c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a13      	ldr	r2, [pc, #76]	@ (80089c0 <UART_InitCallbacksToDefault+0x90>)
 8008974:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a12      	ldr	r2, [pc, #72]	@ (80089c4 <UART_InitCallbacksToDefault+0x94>)
 800897c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a11      	ldr	r2, [pc, #68]	@ (80089c8 <UART_InitCallbacksToDefault+0x98>)
 8008984:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a10      	ldr	r2, [pc, #64]	@ (80089cc <UART_InitCallbacksToDefault+0x9c>)
 800898c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a0f      	ldr	r2, [pc, #60]	@ (80089d0 <UART_InitCallbacksToDefault+0xa0>)
 8008994:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr
 80089a4:	080087c5 	.word	0x080087c5
 80089a8:	080087b1 	.word	0x080087b1
 80089ac:	080087ed 	.word	0x080087ed
 80089b0:	080087d9 	.word	0x080087d9
 80089b4:	08008801 	.word	0x08008801
 80089b8:	08008815 	.word	0x08008815
 80089bc:	08008829 	.word	0x08008829
 80089c0:	0800883d 	.word	0x0800883d
 80089c4:	08009921 	.word	0x08009921
 80089c8:	08009935 	.word	0x08009935
 80089cc:	08009949 	.word	0x08009949
 80089d0:	08008851 	.word	0x08008851

080089d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089d8:	b08c      	sub	sp, #48	@ 0x30
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	689a      	ldr	r2, [r3, #8]
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	431a      	orrs	r2, r3
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	431a      	orrs	r2, r3
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	4baa      	ldr	r3, [pc, #680]	@ (8008cac <UART_SetConfig+0x2d8>)
 8008a04:	4013      	ands	r3, r2
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	6812      	ldr	r2, [r2, #0]
 8008a0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a0c:	430b      	orrs	r3, r1
 8008a0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a9f      	ldr	r2, [pc, #636]	@ (8008cb0 <UART_SetConfig+0x2dc>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d004      	beq.n	8008a40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008a4a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	6812      	ldr	r2, [r2, #0]
 8008a52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a54:	430b      	orrs	r3, r1
 8008a56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a5e:	f023 010f 	bic.w	r1, r3, #15
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a90      	ldr	r2, [pc, #576]	@ (8008cb4 <UART_SetConfig+0x2e0>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d125      	bne.n	8008ac4 <UART_SetConfig+0xf0>
 8008a78:	4b8f      	ldr	r3, [pc, #572]	@ (8008cb8 <UART_SetConfig+0x2e4>)
 8008a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a7e:	f003 0303 	and.w	r3, r3, #3
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d81a      	bhi.n	8008abc <UART_SetConfig+0xe8>
 8008a86:	a201      	add	r2, pc, #4	@ (adr r2, 8008a8c <UART_SetConfig+0xb8>)
 8008a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8c:	08008a9d 	.word	0x08008a9d
 8008a90:	08008aad 	.word	0x08008aad
 8008a94:	08008aa5 	.word	0x08008aa5
 8008a98:	08008ab5 	.word	0x08008ab5
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aa2:	e116      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aaa:	e112      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008aac:	2304      	movs	r3, #4
 8008aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ab2:	e10e      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008ab4:	2308      	movs	r3, #8
 8008ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aba:	e10a      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008abc:	2310      	movs	r3, #16
 8008abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ac2:	e106      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a7c      	ldr	r2, [pc, #496]	@ (8008cbc <UART_SetConfig+0x2e8>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d138      	bne.n	8008b40 <UART_SetConfig+0x16c>
 8008ace:	4b7a      	ldr	r3, [pc, #488]	@ (8008cb8 <UART_SetConfig+0x2e4>)
 8008ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ad4:	f003 030c 	and.w	r3, r3, #12
 8008ad8:	2b0c      	cmp	r3, #12
 8008ada:	d82d      	bhi.n	8008b38 <UART_SetConfig+0x164>
 8008adc:	a201      	add	r2, pc, #4	@ (adr r2, 8008ae4 <UART_SetConfig+0x110>)
 8008ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae2:	bf00      	nop
 8008ae4:	08008b19 	.word	0x08008b19
 8008ae8:	08008b39 	.word	0x08008b39
 8008aec:	08008b39 	.word	0x08008b39
 8008af0:	08008b39 	.word	0x08008b39
 8008af4:	08008b29 	.word	0x08008b29
 8008af8:	08008b39 	.word	0x08008b39
 8008afc:	08008b39 	.word	0x08008b39
 8008b00:	08008b39 	.word	0x08008b39
 8008b04:	08008b21 	.word	0x08008b21
 8008b08:	08008b39 	.word	0x08008b39
 8008b0c:	08008b39 	.word	0x08008b39
 8008b10:	08008b39 	.word	0x08008b39
 8008b14:	08008b31 	.word	0x08008b31
 8008b18:	2300      	movs	r3, #0
 8008b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b1e:	e0d8      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008b20:	2302      	movs	r3, #2
 8008b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b26:	e0d4      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008b28:	2304      	movs	r3, #4
 8008b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b2e:	e0d0      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008b30:	2308      	movs	r3, #8
 8008b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b36:	e0cc      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008b38:	2310      	movs	r3, #16
 8008b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b3e:	e0c8      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a5e      	ldr	r2, [pc, #376]	@ (8008cc0 <UART_SetConfig+0x2ec>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d125      	bne.n	8008b96 <UART_SetConfig+0x1c2>
 8008b4a:	4b5b      	ldr	r3, [pc, #364]	@ (8008cb8 <UART_SetConfig+0x2e4>)
 8008b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008b54:	2b30      	cmp	r3, #48	@ 0x30
 8008b56:	d016      	beq.n	8008b86 <UART_SetConfig+0x1b2>
 8008b58:	2b30      	cmp	r3, #48	@ 0x30
 8008b5a:	d818      	bhi.n	8008b8e <UART_SetConfig+0x1ba>
 8008b5c:	2b20      	cmp	r3, #32
 8008b5e:	d00a      	beq.n	8008b76 <UART_SetConfig+0x1a2>
 8008b60:	2b20      	cmp	r3, #32
 8008b62:	d814      	bhi.n	8008b8e <UART_SetConfig+0x1ba>
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d002      	beq.n	8008b6e <UART_SetConfig+0x19a>
 8008b68:	2b10      	cmp	r3, #16
 8008b6a:	d008      	beq.n	8008b7e <UART_SetConfig+0x1aa>
 8008b6c:	e00f      	b.n	8008b8e <UART_SetConfig+0x1ba>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b74:	e0ad      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008b76:	2302      	movs	r3, #2
 8008b78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b7c:	e0a9      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008b7e:	2304      	movs	r3, #4
 8008b80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b84:	e0a5      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008b86:	2308      	movs	r3, #8
 8008b88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b8c:	e0a1      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008b8e:	2310      	movs	r3, #16
 8008b90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b94:	e09d      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a4a      	ldr	r2, [pc, #296]	@ (8008cc4 <UART_SetConfig+0x2f0>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d125      	bne.n	8008bec <UART_SetConfig+0x218>
 8008ba0:	4b45      	ldr	r3, [pc, #276]	@ (8008cb8 <UART_SetConfig+0x2e4>)
 8008ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ba6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008baa:	2bc0      	cmp	r3, #192	@ 0xc0
 8008bac:	d016      	beq.n	8008bdc <UART_SetConfig+0x208>
 8008bae:	2bc0      	cmp	r3, #192	@ 0xc0
 8008bb0:	d818      	bhi.n	8008be4 <UART_SetConfig+0x210>
 8008bb2:	2b80      	cmp	r3, #128	@ 0x80
 8008bb4:	d00a      	beq.n	8008bcc <UART_SetConfig+0x1f8>
 8008bb6:	2b80      	cmp	r3, #128	@ 0x80
 8008bb8:	d814      	bhi.n	8008be4 <UART_SetConfig+0x210>
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d002      	beq.n	8008bc4 <UART_SetConfig+0x1f0>
 8008bbe:	2b40      	cmp	r3, #64	@ 0x40
 8008bc0:	d008      	beq.n	8008bd4 <UART_SetConfig+0x200>
 8008bc2:	e00f      	b.n	8008be4 <UART_SetConfig+0x210>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bca:	e082      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008bcc:	2302      	movs	r3, #2
 8008bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bd2:	e07e      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008bd4:	2304      	movs	r3, #4
 8008bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bda:	e07a      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008bdc:	2308      	movs	r3, #8
 8008bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008be2:	e076      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008be4:	2310      	movs	r3, #16
 8008be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bea:	e072      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a35      	ldr	r2, [pc, #212]	@ (8008cc8 <UART_SetConfig+0x2f4>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d12a      	bne.n	8008c4c <UART_SetConfig+0x278>
 8008bf6:	4b30      	ldr	r3, [pc, #192]	@ (8008cb8 <UART_SetConfig+0x2e4>)
 8008bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c04:	d01a      	beq.n	8008c3c <UART_SetConfig+0x268>
 8008c06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c0a:	d81b      	bhi.n	8008c44 <UART_SetConfig+0x270>
 8008c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c10:	d00c      	beq.n	8008c2c <UART_SetConfig+0x258>
 8008c12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c16:	d815      	bhi.n	8008c44 <UART_SetConfig+0x270>
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <UART_SetConfig+0x250>
 8008c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c20:	d008      	beq.n	8008c34 <UART_SetConfig+0x260>
 8008c22:	e00f      	b.n	8008c44 <UART_SetConfig+0x270>
 8008c24:	2300      	movs	r3, #0
 8008c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c2a:	e052      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c32:	e04e      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008c34:	2304      	movs	r3, #4
 8008c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c3a:	e04a      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008c3c:	2308      	movs	r3, #8
 8008c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c42:	e046      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008c44:	2310      	movs	r3, #16
 8008c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c4a:	e042      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a17      	ldr	r2, [pc, #92]	@ (8008cb0 <UART_SetConfig+0x2dc>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d13a      	bne.n	8008ccc <UART_SetConfig+0x2f8>
 8008c56:	4b18      	ldr	r3, [pc, #96]	@ (8008cb8 <UART_SetConfig+0x2e4>)
 8008c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008c60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008c64:	d01a      	beq.n	8008c9c <UART_SetConfig+0x2c8>
 8008c66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008c6a:	d81b      	bhi.n	8008ca4 <UART_SetConfig+0x2d0>
 8008c6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c70:	d00c      	beq.n	8008c8c <UART_SetConfig+0x2b8>
 8008c72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c76:	d815      	bhi.n	8008ca4 <UART_SetConfig+0x2d0>
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d003      	beq.n	8008c84 <UART_SetConfig+0x2b0>
 8008c7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c80:	d008      	beq.n	8008c94 <UART_SetConfig+0x2c0>
 8008c82:	e00f      	b.n	8008ca4 <UART_SetConfig+0x2d0>
 8008c84:	2300      	movs	r3, #0
 8008c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c8a:	e022      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c92:	e01e      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008c94:	2304      	movs	r3, #4
 8008c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c9a:	e01a      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008c9c:	2308      	movs	r3, #8
 8008c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ca2:	e016      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008ca4:	2310      	movs	r3, #16
 8008ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008caa:	e012      	b.n	8008cd2 <UART_SetConfig+0x2fe>
 8008cac:	cfff69f3 	.word	0xcfff69f3
 8008cb0:	40008000 	.word	0x40008000
 8008cb4:	40013800 	.word	0x40013800
 8008cb8:	40021000 	.word	0x40021000
 8008cbc:	40004400 	.word	0x40004400
 8008cc0:	40004800 	.word	0x40004800
 8008cc4:	40004c00 	.word	0x40004c00
 8008cc8:	40005000 	.word	0x40005000
 8008ccc:	2310      	movs	r3, #16
 8008cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4aae      	ldr	r2, [pc, #696]	@ (8008f90 <UART_SetConfig+0x5bc>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	f040 8097 	bne.w	8008e0c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008cde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ce2:	2b08      	cmp	r3, #8
 8008ce4:	d823      	bhi.n	8008d2e <UART_SetConfig+0x35a>
 8008ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cec <UART_SetConfig+0x318>)
 8008ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cec:	08008d11 	.word	0x08008d11
 8008cf0:	08008d2f 	.word	0x08008d2f
 8008cf4:	08008d19 	.word	0x08008d19
 8008cf8:	08008d2f 	.word	0x08008d2f
 8008cfc:	08008d1f 	.word	0x08008d1f
 8008d00:	08008d2f 	.word	0x08008d2f
 8008d04:	08008d2f 	.word	0x08008d2f
 8008d08:	08008d2f 	.word	0x08008d2f
 8008d0c:	08008d27 	.word	0x08008d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d10:	f7fc fd16 	bl	8005740 <HAL_RCC_GetPCLK1Freq>
 8008d14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d16:	e010      	b.n	8008d3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d18:	4b9e      	ldr	r3, [pc, #632]	@ (8008f94 <UART_SetConfig+0x5c0>)
 8008d1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d1c:	e00d      	b.n	8008d3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d1e:	f7fc fca1 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 8008d22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d24:	e009      	b.n	8008d3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d2c:	e005      	b.n	8008d3a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008d38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 8130 	beq.w	8008fa2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d46:	4a94      	ldr	r2, [pc, #592]	@ (8008f98 <UART_SetConfig+0x5c4>)
 8008d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d50:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d54:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	685a      	ldr	r2, [r3, #4]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	005b      	lsls	r3, r3, #1
 8008d5e:	4413      	add	r3, r2
 8008d60:	69ba      	ldr	r2, [r7, #24]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d305      	bcc.n	8008d72 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d903      	bls.n	8008d7a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008d78:	e113      	b.n	8008fa2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	60bb      	str	r3, [r7, #8]
 8008d80:	60fa      	str	r2, [r7, #12]
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d86:	4a84      	ldr	r2, [pc, #528]	@ (8008f98 <UART_SetConfig+0x5c4>)
 8008d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	2200      	movs	r2, #0
 8008d90:	603b      	str	r3, [r7, #0]
 8008d92:	607a      	str	r2, [r7, #4]
 8008d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d9c:	f7f7 fe7a 	bl	8000a94 <__aeabi_uldivmod>
 8008da0:	4602      	mov	r2, r0
 8008da2:	460b      	mov	r3, r1
 8008da4:	4610      	mov	r0, r2
 8008da6:	4619      	mov	r1, r3
 8008da8:	f04f 0200 	mov.w	r2, #0
 8008dac:	f04f 0300 	mov.w	r3, #0
 8008db0:	020b      	lsls	r3, r1, #8
 8008db2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008db6:	0202      	lsls	r2, r0, #8
 8008db8:	6979      	ldr	r1, [r7, #20]
 8008dba:	6849      	ldr	r1, [r1, #4]
 8008dbc:	0849      	lsrs	r1, r1, #1
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	460c      	mov	r4, r1
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	eb12 0804 	adds.w	r8, r2, r4
 8008dc8:	eb43 0905 	adc.w	r9, r3, r5
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	469a      	mov	sl, r3
 8008dd4:	4693      	mov	fp, r2
 8008dd6:	4652      	mov	r2, sl
 8008dd8:	465b      	mov	r3, fp
 8008dda:	4640      	mov	r0, r8
 8008ddc:	4649      	mov	r1, r9
 8008dde:	f7f7 fe59 	bl	8000a94 <__aeabi_uldivmod>
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	4613      	mov	r3, r2
 8008de8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008dea:	6a3b      	ldr	r3, [r7, #32]
 8008dec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008df0:	d308      	bcc.n	8008e04 <UART_SetConfig+0x430>
 8008df2:	6a3b      	ldr	r3, [r7, #32]
 8008df4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008df8:	d204      	bcs.n	8008e04 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6a3a      	ldr	r2, [r7, #32]
 8008e00:	60da      	str	r2, [r3, #12]
 8008e02:	e0ce      	b.n	8008fa2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008e0a:	e0ca      	b.n	8008fa2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	69db      	ldr	r3, [r3, #28]
 8008e10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e14:	d166      	bne.n	8008ee4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008e16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008e1a:	2b08      	cmp	r3, #8
 8008e1c:	d827      	bhi.n	8008e6e <UART_SetConfig+0x49a>
 8008e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e24 <UART_SetConfig+0x450>)
 8008e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e24:	08008e49 	.word	0x08008e49
 8008e28:	08008e51 	.word	0x08008e51
 8008e2c:	08008e59 	.word	0x08008e59
 8008e30:	08008e6f 	.word	0x08008e6f
 8008e34:	08008e5f 	.word	0x08008e5f
 8008e38:	08008e6f 	.word	0x08008e6f
 8008e3c:	08008e6f 	.word	0x08008e6f
 8008e40:	08008e6f 	.word	0x08008e6f
 8008e44:	08008e67 	.word	0x08008e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e48:	f7fc fc7a 	bl	8005740 <HAL_RCC_GetPCLK1Freq>
 8008e4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e4e:	e014      	b.n	8008e7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e50:	f7fc fc8c 	bl	800576c <HAL_RCC_GetPCLK2Freq>
 8008e54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e56:	e010      	b.n	8008e7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e58:	4b4e      	ldr	r3, [pc, #312]	@ (8008f94 <UART_SetConfig+0x5c0>)
 8008e5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e5c:	e00d      	b.n	8008e7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e5e:	f7fc fc01 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 8008e62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e64:	e009      	b.n	8008e7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e6c:	e005      	b.n	8008e7a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008e78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f000 8090 	beq.w	8008fa2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e86:	4a44      	ldr	r2, [pc, #272]	@ (8008f98 <UART_SetConfig+0x5c4>)
 8008e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e90:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e94:	005a      	lsls	r2, r3, #1
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	085b      	lsrs	r3, r3, #1
 8008e9c:	441a      	add	r2, r3
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ea8:	6a3b      	ldr	r3, [r7, #32]
 8008eaa:	2b0f      	cmp	r3, #15
 8008eac:	d916      	bls.n	8008edc <UART_SetConfig+0x508>
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008eb4:	d212      	bcs.n	8008edc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	f023 030f 	bic.w	r3, r3, #15
 8008ebe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	085b      	lsrs	r3, r3, #1
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	f003 0307 	and.w	r3, r3, #7
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	8bfb      	ldrh	r3, [r7, #30]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	8bfa      	ldrh	r2, [r7, #30]
 8008ed8:	60da      	str	r2, [r3, #12]
 8008eda:	e062      	b.n	8008fa2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008ee2:	e05e      	b.n	8008fa2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ee4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ee8:	2b08      	cmp	r3, #8
 8008eea:	d828      	bhi.n	8008f3e <UART_SetConfig+0x56a>
 8008eec:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef4 <UART_SetConfig+0x520>)
 8008eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef2:	bf00      	nop
 8008ef4:	08008f19 	.word	0x08008f19
 8008ef8:	08008f21 	.word	0x08008f21
 8008efc:	08008f29 	.word	0x08008f29
 8008f00:	08008f3f 	.word	0x08008f3f
 8008f04:	08008f2f 	.word	0x08008f2f
 8008f08:	08008f3f 	.word	0x08008f3f
 8008f0c:	08008f3f 	.word	0x08008f3f
 8008f10:	08008f3f 	.word	0x08008f3f
 8008f14:	08008f37 	.word	0x08008f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f18:	f7fc fc12 	bl	8005740 <HAL_RCC_GetPCLK1Freq>
 8008f1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f1e:	e014      	b.n	8008f4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f20:	f7fc fc24 	bl	800576c <HAL_RCC_GetPCLK2Freq>
 8008f24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f26:	e010      	b.n	8008f4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f28:	4b1a      	ldr	r3, [pc, #104]	@ (8008f94 <UART_SetConfig+0x5c0>)
 8008f2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f2c:	e00d      	b.n	8008f4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f2e:	f7fc fb99 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 8008f32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f34:	e009      	b.n	8008f4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f3c:	e005      	b.n	8008f4a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008f48:	bf00      	nop
    }

    if (pclk != 0U)
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d028      	beq.n	8008fa2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f54:	4a10      	ldr	r2, [pc, #64]	@ (8008f98 <UART_SetConfig+0x5c4>)
 8008f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	085b      	lsrs	r3, r3, #1
 8008f68:	441a      	add	r2, r3
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f74:	6a3b      	ldr	r3, [r7, #32]
 8008f76:	2b0f      	cmp	r3, #15
 8008f78:	d910      	bls.n	8008f9c <UART_SetConfig+0x5c8>
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f80:	d20c      	bcs.n	8008f9c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	60da      	str	r2, [r3, #12]
 8008f8c:	e009      	b.n	8008fa2 <UART_SetConfig+0x5ce>
 8008f8e:	bf00      	nop
 8008f90:	40008000 	.word	0x40008000
 8008f94:	00f42400 	.word	0x00f42400
 8008f98:	08009c74 	.word	0x08009c74
      }
      else
      {
        ret = HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008fbe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3730      	adds	r7, #48	@ 0x30
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008fcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd8:	f003 0308 	and.w	r3, r3, #8
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00a      	beq.n	8008ff6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	430a      	orrs	r2, r1
 8008ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00a      	beq.n	8009018 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	430a      	orrs	r2, r1
 8009016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901c:	f003 0302 	and.w	r3, r3, #2
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00a      	beq.n	800903a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	430a      	orrs	r2, r1
 8009038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800903e:	f003 0304 	and.w	r3, r3, #4
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00a      	beq.n	800905c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	430a      	orrs	r2, r1
 800905a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009060:	f003 0310 	and.w	r3, r3, #16
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00a      	beq.n	800907e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	430a      	orrs	r2, r1
 800907c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009082:	f003 0320 	and.w	r3, r3, #32
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00a      	beq.n	80090a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	430a      	orrs	r2, r1
 800909e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d01a      	beq.n	80090e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	430a      	orrs	r2, r1
 80090c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090ca:	d10a      	bne.n	80090e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	430a      	orrs	r2, r1
 80090e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00a      	beq.n	8009104 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	430a      	orrs	r2, r1
 8009102:	605a      	str	r2, [r3, #4]
  }
}
 8009104:	bf00      	nop
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b098      	sub	sp, #96	@ 0x60
 8009114:	af02      	add	r7, sp, #8
 8009116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009120:	f7f9 fc3a 	bl	8002998 <HAL_GetTick>
 8009124:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0308 	and.w	r3, r3, #8
 8009130:	2b08      	cmp	r3, #8
 8009132:	d12f      	bne.n	8009194 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009134:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800913c:	2200      	movs	r2, #0
 800913e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f88e 	bl	8009264 <UART_WaitOnFlagUntilTimeout>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d022      	beq.n	8009194 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009156:	e853 3f00 	ldrex	r3, [r3]
 800915a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800915c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800915e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009162:	653b      	str	r3, [r7, #80]	@ 0x50
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	461a      	mov	r2, r3
 800916a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800916c:	647b      	str	r3, [r7, #68]	@ 0x44
 800916e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009170:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009172:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009174:	e841 2300 	strex	r3, r2, [r1]
 8009178:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800917a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1e6      	bne.n	800914e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2220      	movs	r2, #32
 8009184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e063      	b.n	800925c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0304 	and.w	r3, r3, #4
 800919e:	2b04      	cmp	r3, #4
 80091a0:	d149      	bne.n	8009236 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091aa:	2200      	movs	r2, #0
 80091ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f857 	bl	8009264 <UART_WaitOnFlagUntilTimeout>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d03c      	beq.n	8009236 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	623b      	str	r3, [r7, #32]
   return(result);
 80091ca:	6a3b      	ldr	r3, [r7, #32]
 80091cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	461a      	mov	r2, r3
 80091d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091da:	633b      	str	r3, [r7, #48]	@ 0x30
 80091dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e6      	bne.n	80091bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3308      	adds	r3, #8
 80091f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f023 0301 	bic.w	r3, r3, #1
 8009204:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3308      	adds	r3, #8
 800920c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800920e:	61fa      	str	r2, [r7, #28]
 8009210:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009212:	69b9      	ldr	r1, [r7, #24]
 8009214:	69fa      	ldr	r2, [r7, #28]
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	617b      	str	r3, [r7, #20]
   return(result);
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e5      	bne.n	80091ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2220      	movs	r2, #32
 8009226:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009232:	2303      	movs	r3, #3
 8009234:	e012      	b.n	800925c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2220      	movs	r2, #32
 800923a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2220      	movs	r2, #32
 8009242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3758      	adds	r7, #88	@ 0x58
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	603b      	str	r3, [r7, #0]
 8009270:	4613      	mov	r3, r2
 8009272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009274:	e04f      	b.n	8009316 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800927c:	d04b      	beq.n	8009316 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800927e:	f7f9 fb8b 	bl	8002998 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	69ba      	ldr	r2, [r7, #24]
 800928a:	429a      	cmp	r2, r3
 800928c:	d302      	bcc.n	8009294 <UART_WaitOnFlagUntilTimeout+0x30>
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d101      	bne.n	8009298 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e04e      	b.n	8009336 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 0304 	and.w	r3, r3, #4
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d037      	beq.n	8009316 <UART_WaitOnFlagUntilTimeout+0xb2>
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	2b80      	cmp	r3, #128	@ 0x80
 80092aa:	d034      	beq.n	8009316 <UART_WaitOnFlagUntilTimeout+0xb2>
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	2b40      	cmp	r3, #64	@ 0x40
 80092b0:	d031      	beq.n	8009316 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	69db      	ldr	r3, [r3, #28]
 80092b8:	f003 0308 	and.w	r3, r3, #8
 80092bc:	2b08      	cmp	r3, #8
 80092be:	d110      	bne.n	80092e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2208      	movs	r2, #8
 80092c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f000 f920 	bl	800950e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2208      	movs	r2, #8
 80092d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	e029      	b.n	8009336 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	69db      	ldr	r3, [r3, #28]
 80092e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092f0:	d111      	bne.n	8009316 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80092fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f000 f906 	bl	800950e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2220      	movs	r2, #32
 8009306:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009312:	2303      	movs	r3, #3
 8009314:	e00f      	b.n	8009336 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	69da      	ldr	r2, [r3, #28]
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	4013      	ands	r3, r2
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	429a      	cmp	r2, r3
 8009324:	bf0c      	ite	eq
 8009326:	2301      	moveq	r3, #1
 8009328:	2300      	movne	r3, #0
 800932a:	b2db      	uxtb	r3, r3
 800932c:	461a      	mov	r2, r3
 800932e:	79fb      	ldrb	r3, [r7, #7]
 8009330:	429a      	cmp	r2, r3
 8009332:	d0a0      	beq.n	8009276 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
	...

08009340 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b096      	sub	sp, #88	@ 0x58
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	4613      	mov	r3, r2
 800934c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	88fa      	ldrh	r2, [r7, #6]
 8009358:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2222      	movs	r2, #34	@ 0x22
 8009368:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009372:	2b00      	cmp	r3, #0
 8009374:	d02d      	beq.n	80093d2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800937c:	4a40      	ldr	r2, [pc, #256]	@ (8009480 <UART_Start_Receive_DMA+0x140>)
 800937e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009386:	4a3f      	ldr	r2, [pc, #252]	@ (8009484 <UART_Start_Receive_DMA+0x144>)
 8009388:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009390:	4a3d      	ldr	r2, [pc, #244]	@ (8009488 <UART_Start_Receive_DMA+0x148>)
 8009392:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800939a:	2200      	movs	r2, #0
 800939c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	3324      	adds	r3, #36	@ 0x24
 80093aa:	4619      	mov	r1, r3
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093b0:	461a      	mov	r2, r3
 80093b2:	88fb      	ldrh	r3, [r7, #6]
 80093b4:	f7fb f818 	bl	80043e8 <HAL_DMA_Start_IT>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d009      	beq.n	80093d2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2210      	movs	r2, #16
 80093c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2220      	movs	r2, #32
 80093ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e051      	b.n	8009476 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d018      	beq.n	800940c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093e2:	e853 3f00 	ldrex	r3, [r3]
 80093e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	461a      	mov	r2, r3
 80093f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093fa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80093fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009400:	e841 2300 	strex	r3, r2, [r1]
 8009404:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1e6      	bne.n	80093da <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3308      	adds	r3, #8
 8009412:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009416:	e853 3f00 	ldrex	r3, [r3]
 800941a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800941c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941e:	f043 0301 	orr.w	r3, r3, #1
 8009422:	653b      	str	r3, [r7, #80]	@ 0x50
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	3308      	adds	r3, #8
 800942a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800942c:	637a      	str	r2, [r7, #52]	@ 0x34
 800942e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009430:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009432:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009434:	e841 2300 	strex	r3, r2, [r1]
 8009438:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800943a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1e5      	bne.n	800940c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3308      	adds	r3, #8
 8009446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	e853 3f00 	ldrex	r3, [r3]
 800944e:	613b      	str	r3, [r7, #16]
   return(result);
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009456:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3308      	adds	r3, #8
 800945e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009460:	623a      	str	r2, [r7, #32]
 8009462:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009464:	69f9      	ldr	r1, [r7, #28]
 8009466:	6a3a      	ldr	r2, [r7, #32]
 8009468:	e841 2300 	strex	r3, r2, [r1]
 800946c:	61bb      	str	r3, [r7, #24]
   return(result);
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1e5      	bne.n	8009440 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3758      	adds	r7, #88	@ 0x58
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	08009699 	.word	0x08009699
 8009484:	080097cd 	.word	0x080097cd
 8009488:	08009813 	.word	0x08009813

0800948c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800948c:	b480      	push	{r7}
 800948e:	b08f      	sub	sp, #60	@ 0x3c
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949a:	6a3b      	ldr	r3, [r7, #32]
 800949c:	e853 3f00 	ldrex	r3, [r3]
 80094a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80094a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	461a      	mov	r2, r3
 80094b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094b4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094ba:	e841 2300 	strex	r3, r2, [r1]
 80094be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1e6      	bne.n	8009494 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3308      	adds	r3, #8
 80094cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	e853 3f00 	ldrex	r3, [r3]
 80094d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80094dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3308      	adds	r3, #8
 80094e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094e6:	61ba      	str	r2, [r7, #24]
 80094e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ea:	6979      	ldr	r1, [r7, #20]
 80094ec:	69ba      	ldr	r2, [r7, #24]
 80094ee:	e841 2300 	strex	r3, r2, [r1]
 80094f2:	613b      	str	r3, [r7, #16]
   return(result);
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1e5      	bne.n	80094c6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009502:	bf00      	nop
 8009504:	373c      	adds	r7, #60	@ 0x3c
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr

0800950e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800950e:	b480      	push	{r7}
 8009510:	b095      	sub	sp, #84	@ 0x54
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800951e:	e853 3f00 	ldrex	r3, [r3]
 8009522:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009526:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800952a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	461a      	mov	r2, r3
 8009532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009534:	643b      	str	r3, [r7, #64]	@ 0x40
 8009536:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009538:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800953a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800953c:	e841 2300 	strex	r3, r2, [r1]
 8009540:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1e6      	bne.n	8009516 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3308      	adds	r3, #8
 800954e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	e853 3f00 	ldrex	r3, [r3]
 8009556:	61fb      	str	r3, [r7, #28]
   return(result);
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800955e:	f023 0301 	bic.w	r3, r3, #1
 8009562:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3308      	adds	r3, #8
 800956a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800956c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800956e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009570:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009572:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009574:	e841 2300 	strex	r3, r2, [r1]
 8009578:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800957a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1e3      	bne.n	8009548 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009584:	2b01      	cmp	r3, #1
 8009586:	d118      	bne.n	80095ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	60bb      	str	r3, [r7, #8]
   return(result);
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	f023 0310 	bic.w	r3, r3, #16
 800959c:	647b      	str	r3, [r7, #68]	@ 0x44
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	461a      	mov	r2, r3
 80095a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095a6:	61bb      	str	r3, [r7, #24]
 80095a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095aa:	6979      	ldr	r1, [r7, #20]
 80095ac:	69ba      	ldr	r2, [r7, #24]
 80095ae:	e841 2300 	strex	r3, r2, [r1]
 80095b2:	613b      	str	r3, [r7, #16]
   return(result);
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1e6      	bne.n	8009588 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2220      	movs	r2, #32
 80095be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80095ce:	bf00      	nop
 80095d0:	3754      	adds	r7, #84	@ 0x54
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr

080095da <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b090      	sub	sp, #64	@ 0x40
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0320 	and.w	r3, r3, #32
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d137      	bne.n	8009666 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80095f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095f8:	2200      	movs	r2, #0
 80095fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	3308      	adds	r3, #8
 8009604:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009608:	e853 3f00 	ldrex	r3, [r3]
 800960c:	623b      	str	r3, [r7, #32]
   return(result);
 800960e:	6a3b      	ldr	r3, [r7, #32]
 8009610:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009614:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3308      	adds	r3, #8
 800961c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800961e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009620:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009622:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009626:	e841 2300 	strex	r3, r2, [r1]
 800962a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800962c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1e5      	bne.n	80095fe <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	e853 3f00 	ldrex	r3, [r3]
 800963e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009646:	637b      	str	r3, [r7, #52]	@ 0x34
 8009648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	461a      	mov	r2, r3
 800964e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009650:	61fb      	str	r3, [r7, #28]
 8009652:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009654:	69b9      	ldr	r1, [r7, #24]
 8009656:	69fa      	ldr	r2, [r7, #28]
 8009658:	e841 2300 	strex	r3, r2, [r1]
 800965c:	617b      	str	r3, [r7, #20]
   return(result);
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1e6      	bne.n	8009632 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009664:	e004      	b.n	8009670 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8009666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009668:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800966c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800966e:	4798      	blx	r3
}
 8009670:	bf00      	nop
 8009672:	3740      	adds	r7, #64	@ 0x40
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009684:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009690:	bf00      	nop
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b09c      	sub	sp, #112	@ 0x70
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0320 	and.w	r3, r3, #32
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d171      	bne.n	8009798 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80096b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096b6:	2200      	movs	r2, #0
 80096b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096c4:	e853 3f00 	ldrex	r3, [r3]
 80096c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80096ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80096d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	461a      	mov	r2, r3
 80096d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80096da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80096e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096e2:	e841 2300 	strex	r3, r2, [r1]
 80096e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80096e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1e6      	bne.n	80096bc <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3308      	adds	r3, #8
 80096f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f8:	e853 3f00 	ldrex	r3, [r3]
 80096fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009700:	f023 0301 	bic.w	r3, r3, #1
 8009704:	667b      	str	r3, [r7, #100]	@ 0x64
 8009706:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3308      	adds	r3, #8
 800970c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800970e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009710:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009712:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009714:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009716:	e841 2300 	strex	r3, r2, [r1]
 800971a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800971c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1e5      	bne.n	80096ee <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009722:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3308      	adds	r3, #8
 8009728:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972c:	e853 3f00 	ldrex	r3, [r3]
 8009730:	623b      	str	r3, [r7, #32]
   return(result);
 8009732:	6a3b      	ldr	r3, [r7, #32]
 8009734:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009738:	663b      	str	r3, [r7, #96]	@ 0x60
 800973a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3308      	adds	r3, #8
 8009740:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009742:	633a      	str	r2, [r7, #48]	@ 0x30
 8009744:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009746:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009748:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800974a:	e841 2300 	strex	r3, r2, [r1]
 800974e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1e5      	bne.n	8009722 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009758:	2220      	movs	r2, #32
 800975a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800975e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009762:	2b01      	cmp	r3, #1
 8009764:	d118      	bne.n	8009798 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009766:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	e853 3f00 	ldrex	r3, [r3]
 8009772:	60fb      	str	r3, [r7, #12]
   return(result);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f023 0310 	bic.w	r3, r3, #16
 800977a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800977c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	461a      	mov	r2, r3
 8009782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009784:	61fb      	str	r3, [r7, #28]
 8009786:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009788:	69b9      	ldr	r1, [r7, #24]
 800978a:	69fa      	ldr	r2, [r7, #28]
 800978c:	e841 2300 	strex	r3, r2, [r1]
 8009790:	617b      	str	r3, [r7, #20]
   return(result);
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1e6      	bne.n	8009766 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009798:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800979a:	2200      	movs	r2, #0
 800979c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800979e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d109      	bne.n	80097ba <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80097a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80097ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80097ae:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80097b2:	4611      	mov	r1, r2
 80097b4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80097b6:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80097b8:	e004      	b.n	80097c4 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 80097ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80097c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80097c2:	4798      	blx	r3
}
 80097c4:	bf00      	nop
 80097c6:	3770      	adds	r7, #112	@ 0x70
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2201      	movs	r2, #1
 80097de:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d10b      	bne.n	8009800 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80097f4:	0852      	lsrs	r2, r2, #1
 80097f6:	b292      	uxth	r2, r2
 80097f8:	4611      	mov	r1, r2
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80097fe:	e004      	b.n	800980a <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	4798      	blx	r3
}
 800980a:	bf00      	nop
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b086      	sub	sp, #24
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800981e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009826:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800982e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800983a:	2b80      	cmp	r3, #128	@ 0x80
 800983c:	d109      	bne.n	8009852 <UART_DMAError+0x40>
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	2b21      	cmp	r3, #33	@ 0x21
 8009842:	d106      	bne.n	8009852 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2200      	movs	r2, #0
 8009848:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800984c:	6978      	ldr	r0, [r7, #20]
 800984e:	f7ff fe1d 	bl	800948c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800985c:	2b40      	cmp	r3, #64	@ 0x40
 800985e:	d109      	bne.n	8009874 <UART_DMAError+0x62>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b22      	cmp	r3, #34	@ 0x22
 8009864:	d106      	bne.n	8009874 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	2200      	movs	r2, #0
 800986a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800986e:	6978      	ldr	r0, [r7, #20]
 8009870:	f7ff fe4d 	bl	800950e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800987a:	f043 0210 	orr.w	r2, r3, #16
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800988a:	6978      	ldr	r0, [r7, #20]
 800988c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800988e:	bf00      	nop
 8009890:	3718      	adds	r7, #24
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098be:	bf00      	nop
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b088      	sub	sp, #32
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	e853 3f00 	ldrex	r3, [r3]
 80098da:	60bb      	str	r3, [r7, #8]
   return(result);
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098e2:	61fb      	str	r3, [r7, #28]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	461a      	mov	r2, r3
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	61bb      	str	r3, [r7, #24]
 80098ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f0:	6979      	ldr	r1, [r7, #20]
 80098f2:	69ba      	ldr	r2, [r7, #24]
 80098f4:	e841 2300 	strex	r3, r2, [r1]
 80098f8:	613b      	str	r3, [r7, #16]
   return(result);
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1e6      	bne.n	80098ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2220      	movs	r2, #32
 8009904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009918:	bf00      	nop
 800991a:	3720      	adds	r7, #32
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800995c:	b480      	push	{r7}
 800995e:	b085      	sub	sp, #20
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800996a:	2b01      	cmp	r3, #1
 800996c:	d101      	bne.n	8009972 <HAL_UARTEx_DisableFifoMode+0x16>
 800996e:	2302      	movs	r3, #2
 8009970:	e027      	b.n	80099c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2224      	movs	r2, #36	@ 0x24
 800997e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f022 0201 	bic.w	r2, r2, #1
 8009998:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80099a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2220      	movs	r2, #32
 80099b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3714      	adds	r7, #20
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b084      	sub	sp, #16
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d101      	bne.n	80099e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80099e2:	2302      	movs	r3, #2
 80099e4:	e02d      	b.n	8009a42 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2224      	movs	r2, #36	@ 0x24
 80099f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f022 0201 	bic.w	r2, r2, #1
 8009a0c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	683a      	ldr	r2, [r7, #0]
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f850 	bl	8009ac8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2220      	movs	r2, #32
 8009a34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b084      	sub	sp, #16
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d101      	bne.n	8009a62 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a5e:	2302      	movs	r3, #2
 8009a60:	e02d      	b.n	8009abe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2201      	movs	r2, #1
 8009a66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2224      	movs	r2, #36	@ 0x24
 8009a6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f022 0201 	bic.w	r2, r2, #1
 8009a88:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	430a      	orrs	r2, r1
 8009a9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f812 	bl	8009ac8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2220      	movs	r2, #32
 8009ab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
	...

08009ac8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d108      	bne.n	8009aea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ae8:	e031      	b.n	8009b4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009aea:	2308      	movs	r3, #8
 8009aec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009aee:	2308      	movs	r3, #8
 8009af0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	0e5b      	lsrs	r3, r3, #25
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	f003 0307 	and.w	r3, r3, #7
 8009b00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	0f5b      	lsrs	r3, r3, #29
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	f003 0307 	and.w	r3, r3, #7
 8009b10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b12:	7bbb      	ldrb	r3, [r7, #14]
 8009b14:	7b3a      	ldrb	r2, [r7, #12]
 8009b16:	4911      	ldr	r1, [pc, #68]	@ (8009b5c <UARTEx_SetNbDataToProcess+0x94>)
 8009b18:	5c8a      	ldrb	r2, [r1, r2]
 8009b1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b1e:	7b3a      	ldrb	r2, [r7, #12]
 8009b20:	490f      	ldr	r1, [pc, #60]	@ (8009b60 <UARTEx_SetNbDataToProcess+0x98>)
 8009b22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b24:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b30:	7bfb      	ldrb	r3, [r7, #15]
 8009b32:	7b7a      	ldrb	r2, [r7, #13]
 8009b34:	4909      	ldr	r1, [pc, #36]	@ (8009b5c <UARTEx_SetNbDataToProcess+0x94>)
 8009b36:	5c8a      	ldrb	r2, [r1, r2]
 8009b38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b3c:	7b7a      	ldrb	r2, [r7, #13]
 8009b3e:	4908      	ldr	r1, [pc, #32]	@ (8009b60 <UARTEx_SetNbDataToProcess+0x98>)
 8009b40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b42:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009b4e:	bf00      	nop
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	08009c8c 	.word	0x08009c8c
 8009b60:	08009c94 	.word	0x08009c94

08009b64 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	ed93 7a06 	vldr	s14, [r3, #24]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	edd3 7a07 	vldr	s15, [r3, #28]
 8009b7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	edd3 7a08 	vldr	s15, [r3, #32]
 8009b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	edd3 7a06 	vldr	s15, [r3, #24]
 8009b94:	eeb1 7a67 	vneg.f32	s14, s15
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	edd3 7a08 	vldr	s15, [r3, #32]
 8009b9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009ba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a1a      	ldr	r2, [r3, #32]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d006      	beq.n	8009bc8 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	330c      	adds	r3, #12
 8009bbe:	220c      	movs	r2, #12
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 f804 	bl	8009bd0 <memset>
  }

}
 8009bc8:	bf00      	nop
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <memset>:
 8009bd0:	4402      	add	r2, r0
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d100      	bne.n	8009bda <memset+0xa>
 8009bd8:	4770      	bx	lr
 8009bda:	f803 1b01 	strb.w	r1, [r3], #1
 8009bde:	e7f9      	b.n	8009bd4 <memset+0x4>

08009be0 <__libc_init_array>:
 8009be0:	b570      	push	{r4, r5, r6, lr}
 8009be2:	4d0d      	ldr	r5, [pc, #52]	@ (8009c18 <__libc_init_array+0x38>)
 8009be4:	4c0d      	ldr	r4, [pc, #52]	@ (8009c1c <__libc_init_array+0x3c>)
 8009be6:	1b64      	subs	r4, r4, r5
 8009be8:	10a4      	asrs	r4, r4, #2
 8009bea:	2600      	movs	r6, #0
 8009bec:	42a6      	cmp	r6, r4
 8009bee:	d109      	bne.n	8009c04 <__libc_init_array+0x24>
 8009bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8009c20 <__libc_init_array+0x40>)
 8009bf2:	4c0c      	ldr	r4, [pc, #48]	@ (8009c24 <__libc_init_array+0x44>)
 8009bf4:	f000 f826 	bl	8009c44 <_init>
 8009bf8:	1b64      	subs	r4, r4, r5
 8009bfa:	10a4      	asrs	r4, r4, #2
 8009bfc:	2600      	movs	r6, #0
 8009bfe:	42a6      	cmp	r6, r4
 8009c00:	d105      	bne.n	8009c0e <__libc_init_array+0x2e>
 8009c02:	bd70      	pop	{r4, r5, r6, pc}
 8009c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c08:	4798      	blx	r3
 8009c0a:	3601      	adds	r6, #1
 8009c0c:	e7ee      	b.n	8009bec <__libc_init_array+0xc>
 8009c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c12:	4798      	blx	r3
 8009c14:	3601      	adds	r6, #1
 8009c16:	e7f2      	b.n	8009bfe <__libc_init_array+0x1e>
 8009c18:	08009ca4 	.word	0x08009ca4
 8009c1c:	08009ca4 	.word	0x08009ca4
 8009c20:	08009ca4 	.word	0x08009ca4
 8009c24:	08009ca8 	.word	0x08009ca8

08009c28 <memcpy>:
 8009c28:	440a      	add	r2, r1
 8009c2a:	4291      	cmp	r1, r2
 8009c2c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009c30:	d100      	bne.n	8009c34 <memcpy+0xc>
 8009c32:	4770      	bx	lr
 8009c34:	b510      	push	{r4, lr}
 8009c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c3e:	4291      	cmp	r1, r2
 8009c40:	d1f9      	bne.n	8009c36 <memcpy+0xe>
 8009c42:	bd10      	pop	{r4, pc}

08009c44 <_init>:
 8009c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c46:	bf00      	nop
 8009c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c4a:	bc08      	pop	{r3}
 8009c4c:	469e      	mov	lr, r3
 8009c4e:	4770      	bx	lr

08009c50 <_fini>:
 8009c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c52:	bf00      	nop
 8009c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c56:	bc08      	pop	{r3}
 8009c58:	469e      	mov	lr, r3
 8009c5a:	4770      	bx	lr
