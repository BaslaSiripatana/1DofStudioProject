
Studio_readRPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf80  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800c158  0800c158  0000d158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c198  0800c198  0000e288  2**0
                  CONTENTS
  4 .ARM          00000008  0800c198  0800c198  0000d198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1a0  0800c1a0  0000e288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1a0  0800c1a0  0000d1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1a4  0800c1a4  0000d1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800c1a8  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001084  20000288  0800c430  0000e288  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000130c  0800c430  0000e30c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e288  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b3a7  00000000  00000000  0000e2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003148  00000000  00000000  0002965f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  0002c7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b1  00000000  00000000  0002de40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000290a1  00000000  00000000  0002eff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2a2  00000000  00000000  00058092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001155b0  00000000  00000000  00072334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001878e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065f4  00000000  00000000  00187928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0018df1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000288 	.word	0x20000288
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c140 	.word	0x0800c140

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000028c 	.word	0x2000028c
 8000214:	0800c140 	.word	0x0800c140

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000e00:	f000 b96a 	b.w	80010d8 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	460c      	mov	r4, r1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d14e      	bne.n	8000ec6 <__udivmoddi4+0xaa>
 8000e28:	4694      	mov	ip, r2
 8000e2a:	458c      	cmp	ip, r1
 8000e2c:	4686      	mov	lr, r0
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	d962      	bls.n	8000efa <__udivmoddi4+0xde>
 8000e34:	b14a      	cbz	r2, 8000e4a <__udivmoddi4+0x2e>
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	4091      	lsls	r1, r2
 8000e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e44:	4319      	orrs	r1, r3
 8000e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f f68c 	uxth.w	r6, ip
 8000e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d90a      	bls.n	8000e80 <__udivmoddi4+0x64>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e72:	f080 8112 	bcs.w	800109a <__udivmoddi4+0x27e>
 8000e76:	4299      	cmp	r1, r3
 8000e78:	f240 810f 	bls.w	800109a <__udivmoddi4+0x27e>
 8000e7c:	3c02      	subs	r4, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	1a59      	subs	r1, r3, r1
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e92:	fb00 f606 	mul.w	r6, r0, r6
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d90a      	bls.n	8000eb0 <__udivmoddi4+0x94>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ea2:	f080 80fc 	bcs.w	800109e <__udivmoddi4+0x282>
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	f240 80f9 	bls.w	800109e <__udivmoddi4+0x282>
 8000eac:	4463      	add	r3, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	b11d      	cbz	r5, 8000ec2 <__udivmoddi4+0xa6>
 8000eba:	40d3      	lsrs	r3, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d905      	bls.n	8000ed6 <__udivmoddi4+0xba>
 8000eca:	b10d      	cbz	r5, 8000ed0 <__udivmoddi4+0xb4>
 8000ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e7f5      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000ed6:	fab3 f183 	clz	r1, r3
 8000eda:	2900      	cmp	r1, #0
 8000edc:	d146      	bne.n	8000f6c <__udivmoddi4+0x150>
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xcc>
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	f0c0 80f0 	bcc.w	80010c8 <__udivmoddi4+0x2ac>
 8000ee8:	1a86      	subs	r6, r0, r2
 8000eea:	eb64 0303 	sbc.w	r3, r4, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d0e6      	beq.n	8000ec2 <__udivmoddi4+0xa6>
 8000ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ef8:	e7e3      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	f040 8090 	bne.w	8001020 <__udivmoddi4+0x204>
 8000f00:	eba1 040c 	sub.w	r4, r1, ip
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f16:	fb08 4416 	mls	r4, r8, r6, r4
 8000f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f1e:	fb07 f006 	mul.w	r0, r7, r6
 8000f22:	4298      	cmp	r0, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x11c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x11a>
 8000f30:	4298      	cmp	r0, r3
 8000f32:	f200 80cd 	bhi.w	80010d0 <__udivmoddi4+0x2b4>
 8000f36:	4626      	mov	r6, r4
 8000f38:	1a1c      	subs	r4, r3, r0
 8000f3a:	fa1f f38e 	uxth.w	r3, lr
 8000f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f42:	fb08 4410 	mls	r4, r8, r0, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb00 f707 	mul.w	r7, r0, r7
 8000f4e:	429f      	cmp	r7, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x148>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x146>
 8000f5c:	429f      	cmp	r7, r3
 8000f5e:	f200 80b0 	bhi.w	80010c2 <__udivmoddi4+0x2a6>
 8000f62:	4620      	mov	r0, r4
 8000f64:	1bdb      	subs	r3, r3, r7
 8000f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f6a:	e7a5      	b.n	8000eb8 <__udivmoddi4+0x9c>
 8000f6c:	f1c1 0620 	rsb	r6, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 f706 	lsr.w	r7, r2, r6
 8000f76:	431f      	orrs	r7, r3
 8000f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000f80:	ea43 030c 	orr.w	r3, r3, ip
 8000f84:	40f4      	lsrs	r4, r6
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	0c38      	lsrs	r0, r7, #16
 8000f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f90:	fbb4 fef0 	udiv	lr, r4, r0
 8000f94:	fa1f fc87 	uxth.w	ip, r7
 8000f98:	fb00 441e 	mls	r4, r0, lr, r4
 8000f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fa4:	45a1      	cmp	r9, r4
 8000fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x1a6>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000fb2:	f080 8084 	bcs.w	80010be <__udivmoddi4+0x2a2>
 8000fb6:	45a1      	cmp	r9, r4
 8000fb8:	f240 8081 	bls.w	80010be <__udivmoddi4+0x2a2>
 8000fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	eba4 0409 	sub.w	r4, r4, r9
 8000fc6:	fa1f f983 	uxth.w	r9, r3
 8000fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fce:	fb00 4413 	mls	r4, r0, r3, r4
 8000fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fda:	45a4      	cmp	ip, r4
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x1d2>
 8000fde:	193c      	adds	r4, r7, r4
 8000fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000fe4:	d267      	bcs.n	80010b6 <__udivmoddi4+0x29a>
 8000fe6:	45a4      	cmp	ip, r4
 8000fe8:	d965      	bls.n	80010b6 <__udivmoddi4+0x29a>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ff6:	eba4 040c 	sub.w	r4, r4, ip
 8000ffa:	429c      	cmp	r4, r3
 8000ffc:	46ce      	mov	lr, r9
 8000ffe:	469c      	mov	ip, r3
 8001000:	d351      	bcc.n	80010a6 <__udivmoddi4+0x28a>
 8001002:	d04e      	beq.n	80010a2 <__udivmoddi4+0x286>
 8001004:	b155      	cbz	r5, 800101c <__udivmoddi4+0x200>
 8001006:	ebb8 030e 	subs.w	r3, r8, lr
 800100a:	eb64 040c 	sbc.w	r4, r4, ip
 800100e:	fa04 f606 	lsl.w	r6, r4, r6
 8001012:	40cb      	lsrs	r3, r1
 8001014:	431e      	orrs	r6, r3
 8001016:	40cc      	lsrs	r4, r1
 8001018:	e9c5 6400 	strd	r6, r4, [r5]
 800101c:	2100      	movs	r1, #0
 800101e:	e750      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8001020:	f1c2 0320 	rsb	r3, r2, #32
 8001024:	fa20 f103 	lsr.w	r1, r0, r3
 8001028:	fa0c fc02 	lsl.w	ip, ip, r2
 800102c:	fa24 f303 	lsr.w	r3, r4, r3
 8001030:	4094      	lsls	r4, r2
 8001032:	430c      	orrs	r4, r1
 8001034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001038:	fa00 fe02 	lsl.w	lr, r0, r2
 800103c:	fa1f f78c 	uxth.w	r7, ip
 8001040:	fbb3 f0f8 	udiv	r0, r3, r8
 8001044:	fb08 3110 	mls	r1, r8, r0, r3
 8001048:	0c23      	lsrs	r3, r4, #16
 800104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104e:	fb00 f107 	mul.w	r1, r0, r7
 8001052:	4299      	cmp	r1, r3
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x24c>
 8001056:	eb1c 0303 	adds.w	r3, ip, r3
 800105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800105e:	d22c      	bcs.n	80010ba <__udivmoddi4+0x29e>
 8001060:	4299      	cmp	r1, r3
 8001062:	d92a      	bls.n	80010ba <__udivmoddi4+0x29e>
 8001064:	3802      	subs	r0, #2
 8001066:	4463      	add	r3, ip
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001070:	fb08 3311 	mls	r3, r8, r1, r3
 8001074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001078:	fb01 f307 	mul.w	r3, r1, r7
 800107c:	42a3      	cmp	r3, r4
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x276>
 8001080:	eb1c 0404 	adds.w	r4, ip, r4
 8001084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001088:	d213      	bcs.n	80010b2 <__udivmoddi4+0x296>
 800108a:	42a3      	cmp	r3, r4
 800108c:	d911      	bls.n	80010b2 <__udivmoddi4+0x296>
 800108e:	3902      	subs	r1, #2
 8001090:	4464      	add	r4, ip
 8001092:	1ae4      	subs	r4, r4, r3
 8001094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001098:	e739      	b.n	8000f0e <__udivmoddi4+0xf2>
 800109a:	4604      	mov	r4, r0
 800109c:	e6f0      	b.n	8000e80 <__udivmoddi4+0x64>
 800109e:	4608      	mov	r0, r1
 80010a0:	e706      	b.n	8000eb0 <__udivmoddi4+0x94>
 80010a2:	45c8      	cmp	r8, r9
 80010a4:	d2ae      	bcs.n	8001004 <__udivmoddi4+0x1e8>
 80010a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ae:	3801      	subs	r0, #1
 80010b0:	e7a8      	b.n	8001004 <__udivmoddi4+0x1e8>
 80010b2:	4631      	mov	r1, r6
 80010b4:	e7ed      	b.n	8001092 <__udivmoddi4+0x276>
 80010b6:	4603      	mov	r3, r0
 80010b8:	e799      	b.n	8000fee <__udivmoddi4+0x1d2>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e7d4      	b.n	8001068 <__udivmoddi4+0x24c>
 80010be:	46d6      	mov	lr, sl
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1a6>
 80010c2:	4463      	add	r3, ip
 80010c4:	3802      	subs	r0, #2
 80010c6:	e74d      	b.n	8000f64 <__udivmoddi4+0x148>
 80010c8:	4606      	mov	r6, r0
 80010ca:	4623      	mov	r3, r4
 80010cc:	4608      	mov	r0, r1
 80010ce:	e70f      	b.n	8000ef0 <__udivmoddi4+0xd4>
 80010d0:	3e02      	subs	r6, #2
 80010d2:	4463      	add	r3, ip
 80010d4:	e730      	b.n	8000f38 <__udivmoddi4+0x11c>
 80010d6:	bf00      	nop

080010d8 <__aeabi_idiv0>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <modbus_1t5_Timeout>:
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);
void Hearthbeat();

// function for interrupt
void modbus_1t5_Timeout()
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2201      	movs	r2, #1
 80010e6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0201 	orr.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	200002a4 	.word	0x200002a4

0800111c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <modbus_3t5_Timeout+0x1c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2201      	movs	r2, #1
 800112a:	755a      	strb	r2, [r3, #21]

}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	200002a4 	.word	0x200002a4

0800113c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f009 fd57 	bl	800abf8 <HAL_UART_GetError>
 800114a:	4603      	mov	r3, r0
 800114c:	2b20      	cmp	r3, #32
 800114e:	d101      	bne.n	8001154 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001150:	f7ff ffc4 	bl	80010dc <modbus_1t5_Timeout>

	}
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001166:	4a25      	ldr	r2, [pc, #148]	@ (80011fc <Modbus_init+0xa0>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800116c:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <Modbus_init+0xa0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	4a21      	ldr	r2, [pc, #132]	@ (8001200 <Modbus_init+0xa4>)
 800117a:	210e      	movs	r1, #14
 800117c:	4618      	mov	r0, r3
 800117e:	f008 f813 	bl	80091a8 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2110      	movs	r1, #16
 8001188:	4618      	mov	r0, r3
 800118a:	f009 fcdf 	bl	800ab4c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	4618      	mov	r0, r3
 8001194:	f009 fcf6 	bl	800ab84 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	4a19      	ldr	r2, [pc, #100]	@ (8001204 <Modbus_init+0xa8>)
 800119e:	2104      	movs	r1, #4
 80011a0:	4618      	mov	r0, r3
 80011a2:	f008 ffbd 	bl	800a120 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <Modbus_init+0xa0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <Modbus_init+0xa0>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <Modbus_init+0xa0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80011b8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011bc:	4413      	add	r3, r2
 80011be:	3302      	adds	r3, #2
 80011c0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011c4:	4619      	mov	r1, r3
 80011c6:	f009 f8e5 	bl	800a394 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <Modbus_init+0xa0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d10c      	bne.n	80011f4 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f006 ffb3 	bl	800814c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011e6:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <Modbus_init+0xa0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f007 fa0c 	bl	800860c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200002a4 	.word	0x200002a4
 8001200:	0800111d 	.word	0x0800111d
 8001204:	0800113d 	.word	0x0800113d

08001208 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001214:	23ff      	movs	r3, #255	@ 0xff
 8001216:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001218:	23ff      	movs	r3, #255	@ 0xff
 800121a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800121c:	e013      	b.n	8001246 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	781a      	ldrb	r2, [r3, #0]
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	4053      	eors	r3, r2
 800122a:	b2db      	uxtb	r3, r3
 800122c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800122e:	4a0f      	ldr	r2, [pc, #60]	@ (800126c <CRC16+0x64>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4413      	add	r3, r2
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	4053      	eors	r3, r2
 800123a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800123c:	4a0c      	ldr	r2, [pc, #48]	@ (8001270 <CRC16+0x68>)
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	4413      	add	r3, r2
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001246:	883b      	ldrh	r3, [r7, #0]
 8001248:	1e5a      	subs	r2, r3, #1
 800124a:	803a      	strh	r2, [r7, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1e6      	bne.n	800121e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	7bbb      	ldrb	r3, [r7, #14]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21b      	sxth	r3, r3
 800125e:	b29b      	uxth	r3, r3
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	20000100 	.word	0x20000100
 8001270:	20000000 	.word	0x20000000

08001274 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800127a:	4b7e      	ldr	r3, [pc, #504]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	7ddb      	ldrb	r3, [r3, #23]
 8001280:	3b01      	subs	r3, #1
 8001282:	2b03      	cmp	r3, #3
 8001284:	d80a      	bhi.n	800129c <Modbus_Protocal_Worker+0x28>
 8001286:	a201      	add	r2, pc, #4	@ (adr r2, 800128c <Modbus_Protocal_Worker+0x18>)
 8001288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128c:	080012a7 	.word	0x080012a7
 8001290:	0800143b 	.word	0x0800143b
 8001294:	08001333 	.word	0x08001333
 8001298:	08001377 	.word	0x08001377
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 800129c:	4b75      	ldr	r3, [pc, #468]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2201      	movs	r2, #1
 80012a2:	75da      	strb	r2, [r3, #23]
		break;
 80012a4:	e0e1      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80012a6:	4b73      	ldr	r3, [pc, #460]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80012b2:	4b70      	ldr	r3, [pc, #448]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2202      	movs	r2, #2
 80012b8:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80012ba:	f000 f9cd 	bl	8001658 <Modbus_Emission>
 80012be:	e018      	b.n	80012f2 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80012c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80012ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d00b      	beq.n	80012f2 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80012da:	4b66      	ldr	r3, [pc, #408]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2200      	movs	r2, #0
 80012e0:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80012e2:	4b64      	ldr	r3, [pc, #400]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2200      	movs	r2, #0
 80012e8:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80012ea:	4b62      	ldr	r3, [pc, #392]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2203      	movs	r2, #3
 80012f0:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80012f2:	4b60      	ldr	r3, [pc, #384]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012fc:	2b20      	cmp	r3, #32
 80012fe:	f040 80ad 	bne.w	800145c <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001302:	4b5c      	ldr	r3, [pc, #368]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2200      	movs	r2, #0
 8001308:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800130c:	4b59      	ldr	r3, [pc, #356]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001312:	4b58      	ldr	r3, [pc, #352]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b57      	ldr	r3, [pc, #348]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800131e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001322:	4413      	add	r3, r2
 8001324:	3302      	adds	r3, #2
 8001326:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800132a:	4619      	mov	r1, r3
 800132c:	f009 f832 	bl	800a394 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001330:	e094      	b.n	800145c <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001332:	4b50      	ldr	r3, [pc, #320]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	7d1b      	ldrb	r3, [r3, #20]
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 8091 	beq.w	8001460 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800133e:	4b4d      	ldr	r3, [pc, #308]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	22fe      	movs	r2, #254	@ 0xfe
 8001344:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001346:	4b4b      	ldr	r3, [pc, #300]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001350:	4b48      	ldr	r3, [pc, #288]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001360:	4b44      	ldr	r3, [pc, #272]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001362:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001364:	1a8a      	subs	r2, r1, r2
 8001366:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001368:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800136c:	4b41      	ldr	r3, [pc, #260]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2204      	movs	r2, #4
 8001372:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001374:	e074      	b.n	8001460 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001376:	4b3f      	ldr	r3, [pc, #252]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800137e:	f113 0f02 	cmn.w	r3, #2
 8001382:	d150      	bne.n	8001426 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001384:	4b3b      	ldr	r3, [pc, #236]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2200      	movs	r2, #0
 800138a:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 800138c:	4b39      	ldr	r3, [pc, #228]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001394:	4b37      	ldr	r3, [pc, #220]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800139c:	3b02      	subs	r3, #2
 800139e:	4619      	mov	r1, r3
 80013a0:	4610      	mov	r0, r2
 80013a2:	f7ff ff31 	bl	8001208 <CRC16>
 80013a6:	4603      	mov	r3, r0
 80013a8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013aa:	793a      	ldrb	r2, [r7, #4]
 80013ac:	4b31      	ldr	r3, [pc, #196]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013ae:	6819      	ldr	r1, [r3, #0]
 80013b0:	4b30      	ldr	r3, [pc, #192]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013b8:	3b02      	subs	r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d10c      	bne.n	80013de <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80013c4:	797a      	ldrb	r2, [r7, #5]
 80013c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013c8:	6819      	ldr	r1, [r3, #0]
 80013ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013d2:	3b01      	subs	r3, #1
 80013d4:	440b      	add	r3, r1
 80013d6:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d004      	beq.n	80013e8 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80013de:	4b25      	ldr	r3, [pc, #148]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	22ff      	movs	r2, #255	@ 0xff
 80013e4:	759a      	strb	r2, [r3, #22]
				break;
 80013e6:	e040      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80013e8:	4b22      	ldr	r3, [pc, #136]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80013f0:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d113      	bne.n	8001422 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80013fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001402:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800140a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800140c:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001414:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001416:	461a      	mov	r2, r3
 8001418:	f00a fd7e 	bl	800bf18 <memcpy>

			//execute command
			Modbus_frame_response();
 800141c:	f000 f904 	bl	8001628 <Modbus_frame_response>
 8001420:	e001      	b.n	8001426 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001422:	bf00      	nop
					}
		break;


	}
}
 8001424:	e021      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8001426:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	7d5b      	ldrb	r3, [r3, #21]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d019      	beq.n	8001464 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001430:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2201      	movs	r2, #1
 8001436:	75da      	strb	r2, [r3, #23]
		break;
 8001438:	e014      	b.n	8001464 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800143a:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001444:	2b20      	cmp	r3, #32
 8001446:	d10f      	bne.n	8001468 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001448:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001452:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2201      	movs	r2, #1
 8001458:	75da      	strb	r2, [r3, #23]
		break;
 800145a:	e005      	b.n	8001468 <Modbus_Protocal_Worker+0x1f4>
		break;
 800145c:	bf00      	nop
 800145e:	e004      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		break;
 8001460:	bf00      	nop
 8001462:	e002      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		break;
 8001464:	bf00      	nop
 8001466:	e000      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		break;
 8001468:	bf00      	nop
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200002a4 	.word	0x200002a4

08001478 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800147e:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <modbusWrite1Register+0x7c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	7e5b      	ldrb	r3, [r3, #25]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	b29b      	uxth	r3, r3
 8001488:	4a1a      	ldr	r2, [pc, #104]	@ (80014f4 <modbusWrite1Register+0x7c>)
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	7e92      	ldrb	r2, [r2, #26]
 800148e:	4413      	add	r3, r2
 8001490:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001492:	88fa      	ldrh	r2, [r7, #6]
 8001494:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <modbusWrite1Register+0x7c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	429a      	cmp	r2, r3
 800149c:	d903      	bls.n	80014a6 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800149e:	2002      	movs	r0, #2
 80014a0:	f000 f8a0 	bl	80015e4 <ModbusErrorReply>
			 return;
 80014a4:	e023      	b.n	80014ee <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80014a6:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	440b      	add	r3, r1
 80014b6:	7ed2      	ldrb	r2, [r2, #27]
 80014b8:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6859      	ldr	r1, [r3, #4]
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	440b      	add	r3, r1
 80014ca:	7f12      	ldrb	r2, [r2, #28]
 80014cc:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80014d6:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80014dc:	2208      	movs	r2, #8
 80014de:	4619      	mov	r1, r3
 80014e0:	f00a fd1a 	bl	800bf18 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2205      	movs	r2, #5
 80014ea:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200002a4 	.word	0x200002a4

080014f8 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80014fe:	4b38      	ldr	r3, [pc, #224]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	7edb      	ldrb	r3, [r3, #27]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b29b      	uxth	r3, r3
 8001508:	4a35      	ldr	r2, [pc, #212]	@ (80015e0 <modbusRead1Register+0xe8>)
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	7f12      	ldrb	r2, [r2, #28]
 800150e:	4413      	add	r3, r2
 8001510:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001512:	4b33      	ldr	r3, [pc, #204]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	7e5b      	ldrb	r3, [r3, #25]
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	b29b      	uxth	r3, r3
 800151c:	4a30      	ldr	r2, [pc, #192]	@ (80015e0 <modbusRead1Register+0xe8>)
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	7e92      	ldrb	r2, [r2, #26]
 8001522:	4413      	add	r3, r2
 8001524:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <modbusRead1Register+0x3a>
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	2b7d      	cmp	r3, #125	@ 0x7d
 8001530:	d903      	bls.n	800153a <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001532:	2003      	movs	r0, #3
 8001534:	f000 f856 	bl	80015e4 <ModbusErrorReply>
		 return;
 8001538:	e04e      	b.n	80015d8 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800153a:	88ba      	ldrh	r2, [r7, #4]
 800153c:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <modbusRead1Register+0xe8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	429a      	cmp	r2, r3
 8001544:	d808      	bhi.n	8001558 <modbusRead1Register+0x60>
 8001546:	88ba      	ldrh	r2, [r7, #4]
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	4413      	add	r3, r2
 800154c:	461a      	mov	r2, r3
 800154e:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	429a      	cmp	r2, r3
 8001556:	d903      	bls.n	8001560 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001558:	2002      	movs	r0, #2
 800155a:	f000 f843 	bl	80015e4 <ModbusErrorReply>
		 return;
 800155e:	e03b      	b.n	80015d8 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001560:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2203      	movs	r2, #3
 8001566:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0052      	lsls	r2, r2, #1
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800157a:	2400      	movs	r4, #0
 800157c:	e020      	b.n	80015c0 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800157e:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	88bb      	ldrh	r3, [r7, #4]
 8001586:	4423      	add	r3, r4
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	18d1      	adds	r1, r2, r3
 800158c:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <modbusRead1Register+0xe8>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	1c63      	adds	r3, r4, #1
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	7849      	ldrb	r1, [r1, #1]
 8001596:	4413      	add	r3, r2
 8001598:	460a      	mov	r2, r1
 800159a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <modbusRead1Register+0xe8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	88bb      	ldrh	r3, [r7, #4]
 80015a6:	4423      	add	r3, r4
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	18d1      	adds	r1, r2, r3
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <modbusRead1Register+0xe8>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	0063      	lsls	r3, r4, #1
 80015b2:	3303      	adds	r3, #3
 80015b4:	7809      	ldrb	r1, [r1, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	460a      	mov	r2, r1
 80015ba:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80015be:	3401      	adds	r4, #1
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	429c      	cmp	r4, r3
 80015c4:	dbdb      	blt.n	800157e <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	3301      	adds	r3, #1
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b04      	ldr	r3, [pc, #16]	@ (80015e0 <modbusRead1Register+0xe8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	0052      	lsls	r2, r2, #1
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	200002a4 	.word	0x200002a4

080015e4 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80015ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001624 <ModbusErrorReply+0x40>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	7e1a      	ldrb	r2, [r3, #24]
 80015f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <ModbusErrorReply+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001602:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <ModbusErrorReply+0x40>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	79fa      	ldrb	r2, [r7, #7]
 8001608:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 800160c:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <ModbusErrorReply+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2202      	movs	r2, #2
 8001612:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	200002a4 	.word	0x200002a4

08001628 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 800162c:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <Modbus_frame_response+0x2c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	7e1b      	ldrb	r3, [r3, #24]
 8001632:	2b03      	cmp	r3, #3
 8001634:	d004      	beq.n	8001640 <Modbus_frame_response+0x18>
 8001636:	2b06      	cmp	r3, #6
 8001638:	d105      	bne.n	8001646 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800163a:	f7ff ff1d 	bl	8001478 <modbusWrite1Register>
		break;
 800163e:	e006      	b.n	800164e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001640:	f7ff ff5a 	bl	80014f8 <modbusRead1Register>
		break;
 8001644:	e003      	b.n	800164e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001646:	2001      	movs	r0, #1
 8001648:	f7ff ffcc 	bl	80015e4 <ModbusErrorReply>
		break;
 800164c:	bf00      	nop

	}
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200002a4 	.word	0x200002a4

08001658 <Modbus_Emission>:

void Modbus_Emission()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800165e:	4b38      	ldr	r3, [pc, #224]	@ (8001740 <Modbus_Emission+0xe8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001668:	2b20      	cmp	r3, #32
 800166a:	d15d      	bne.n	8001728 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800166c:	4b34      	ldr	r3, [pc, #208]	@ (8001740 <Modbus_Emission+0xe8>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b33      	ldr	r3, [pc, #204]	@ (8001740 <Modbus_Emission+0xe8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800167a:	4b31      	ldr	r3, [pc, #196]	@ (8001740 <Modbus_Emission+0xe8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001682:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001684:	4b2e      	ldr	r3, [pc, #184]	@ (8001740 <Modbus_Emission+0xe8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 800168c:	4b2c      	ldr	r3, [pc, #176]	@ (8001740 <Modbus_Emission+0xe8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001694:	461a      	mov	r2, r3
 8001696:	f00a fc3f 	bl	800bf18 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800169a:	4b29      	ldr	r3, [pc, #164]	@ (8001740 <Modbus_Emission+0xe8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b26      	ldr	r3, [pc, #152]	@ (8001740 <Modbus_Emission+0xe8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3203      	adds	r2, #3
 80016aa:	b292      	uxth	r2, r2
 80016ac:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016b0:	4b23      	ldr	r3, [pc, #140]	@ (8001740 <Modbus_Emission+0xe8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80016b8:	4b21      	ldr	r3, [pc, #132]	@ (8001740 <Modbus_Emission+0xe8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016c0:	3b02      	subs	r3, #2
 80016c2:	4619      	mov	r1, r3
 80016c4:	4610      	mov	r0, r2
 80016c6:	f7ff fd9f 	bl	8001208 <CRC16>
 80016ca:	4603      	mov	r3, r0
 80016cc:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80016ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <Modbus_Emission+0xe8>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <Modbus_Emission+0xe8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80016da:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80016dc:	7939      	ldrb	r1, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	460a      	mov	r2, r1
 80016e2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80016e6:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <Modbus_Emission+0xe8>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <Modbus_Emission+0xe8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80016f2:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80016f4:	7979      	ldrb	r1, [r7, #5]
 80016f6:	4413      	add	r3, r2
 80016f8:	460a      	mov	r2, r1
 80016fa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80016fe:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <Modbus_Emission+0xe8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001708:	2b20      	cmp	r3, #32
 800170a:	d10d      	bne.n	8001728 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <Modbus_Emission+0xe8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <Modbus_Emission+0xe8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <Modbus_Emission+0xe8>)
 800171c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800171e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001722:	461a      	mov	r2, r3
 8001724:	f008 fdb6 	bl	800a294 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <Modbus_Emission+0xe8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2200      	movs	r2, #0
 800172e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <Modbus_Emission+0xe8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2200      	movs	r2, #0
 8001736:	755a      	strb	r2, [r3, #21]

}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200002a4 	.word	0x200002a4
 8001744:	00000000 	.word	0x00000000

08001748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001748:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800174c:	b08c      	sub	sp, #48	@ 0x30
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001750:	f003 f9f5 	bl	8004b3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001754:	f000 fb38 	bl	8001dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001758:	f000 fe70 	bl	800243c <MX_GPIO_Init>
  MX_DMA_Init();
 800175c:	f000 fe28 	bl	80023b0 <MX_DMA_Init>
  MX_TIM3_Init();
 8001760:	f000 fc5c 	bl	800201c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001764:	f000 fc06 	bl	8001f74 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001768:	f000 fd1e 	bl	80021a8 <MX_TIM5_Init>
  MX_ADC1_Init();
 800176c:	f000 fb78 	bl	8001e60 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001770:	f000 fccc 	bl	800210c <MX_TIM4_Init>
  MX_TIM6_Init();
 8001774:	f000 fd66 	bl	8002244 <MX_TIM6_Init>
  MX_TIM16_Init();
 8001778:	f000 fd9c 	bl	80022b4 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800177c:	f000 fdca 	bl	8002314 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //PWM Motor
  HAL_TIM_Base_Start(&htim3);
 8001780:	48b3      	ldr	r0, [pc, #716]	@ (8001a50 <main+0x308>)
 8001782:	f006 fc73 	bl	800806c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001786:	2100      	movs	r1, #0
 8001788:	48b1      	ldr	r0, [pc, #708]	@ (8001a50 <main+0x308>)
 800178a:	f006 fdc5 	bl	8008318 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 800178e:	4bb0      	ldr	r3, [pc, #704]	@ (8001a50 <main+0x308>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001796:	635a      	str	r2, [r3, #52]	@ 0x34

  //Read Encoder
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001798:	213c      	movs	r1, #60	@ 0x3c
 800179a:	48ae      	ldr	r0, [pc, #696]	@ (8001a54 <main+0x30c>)
 800179c:	f007 f878 	bl	8008890 <HAL_TIM_Encoder_Start>

  //time microsec
  HAL_TIM_Base_Start_IT(&htim5);
 80017a0:	48ad      	ldr	r0, [pc, #692]	@ (8001a58 <main+0x310>)
 80017a2:	f006 fcd3 	bl	800814c <HAL_TIM_Base_Start_IT>

  //Read joystick
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 2);
 80017a6:	2202      	movs	r2, #2
 80017a8:	49ac      	ldr	r1, [pc, #688]	@ (8001a5c <main+0x314>)
 80017aa:	48ad      	ldr	r0, [pc, #692]	@ (8001a60 <main+0x318>)
 80017ac:	f003 fe34 	bl	8005418 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim4);
 80017b0:	48ac      	ldr	r0, [pc, #688]	@ (8001a64 <main+0x31c>)
 80017b2:	f006 fc5b 	bl	800806c <HAL_TIM_Base_Start>

  //PID Control Position
  PID1.Kp = 5; //No more than 0.92
 80017b6:	4bac      	ldr	r3, [pc, #688]	@ (8001a68 <main+0x320>)
 80017b8:	4aac      	ldr	r2, [pc, #688]	@ (8001a6c <main+0x324>)
 80017ba:	619a      	str	r2, [r3, #24]
  PID1.Ki = 0.00002;
 80017bc:	4baa      	ldr	r3, [pc, #680]	@ (8001a68 <main+0x320>)
 80017be:	4aac      	ldr	r2, [pc, #688]	@ (8001a70 <main+0x328>)
 80017c0:	61da      	str	r2, [r3, #28]
  PID1.Kd = 1;
 80017c2:	4ba9      	ldr	r3, [pc, #676]	@ (8001a68 <main+0x320>)
 80017c4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80017c8:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID1, 0);
 80017ca:	2100      	movs	r1, #0
 80017cc:	48a6      	ldr	r0, [pc, #664]	@ (8001a68 <main+0x320>)
 80017ce:	f00a fb3b 	bl	800be48 <arm_pid_init_f32>

  //PID Control Velocity
  PID2.Kp = 0.15;  //No more than 0.044
 80017d2:	4ba8      	ldr	r3, [pc, #672]	@ (8001a74 <main+0x32c>)
 80017d4:	4aa8      	ldr	r2, [pc, #672]	@ (8001a78 <main+0x330>)
 80017d6:	619a      	str	r2, [r3, #24]
  PID2.Ki = 0.006;
 80017d8:	4ba6      	ldr	r3, [pc, #664]	@ (8001a74 <main+0x32c>)
 80017da:	4aa8      	ldr	r2, [pc, #672]	@ (8001a7c <main+0x334>)
 80017dc:	61da      	str	r2, [r3, #28]
  PID2.Kd = 0.05;
 80017de:	4ba5      	ldr	r3, [pc, #660]	@ (8001a74 <main+0x32c>)
 80017e0:	4aa7      	ldr	r2, [pc, #668]	@ (8001a80 <main+0x338>)
 80017e2:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID2, 0);
 80017e4:	2100      	movs	r1, #0
 80017e6:	48a3      	ldr	r0, [pc, #652]	@ (8001a74 <main+0x32c>)
 80017e8:	f00a fb2e 	bl	800be48 <arm_pid_init_f32>

  //Modbus Setting
  // manaul add
  HAL_TIM_Base_Start_IT(&htim6);
 80017ec:	48a5      	ldr	r0, [pc, #660]	@ (8001a84 <main+0x33c>)
 80017ee:	f006 fcad 	bl	800814c <HAL_TIM_Base_Start_IT>

  //  modbus
  hmodbus.huart = &huart2;
 80017f2:	4ba5      	ldr	r3, [pc, #660]	@ (8001a88 <main+0x340>)
 80017f4:	4aa5      	ldr	r2, [pc, #660]	@ (8001a8c <main+0x344>)
 80017f6:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80017f8:	4ba3      	ldr	r3, [pc, #652]	@ (8001a88 <main+0x340>)
 80017fa:	4aa5      	ldr	r2, [pc, #660]	@ (8001a90 <main+0x348>)
 80017fc:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80017fe:	4ba2      	ldr	r3, [pc, #648]	@ (8001a88 <main+0x340>)
 8001800:	2215      	movs	r2, #21
 8001802:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8001804:	4ba0      	ldr	r3, [pc, #640]	@ (8001a88 <main+0x340>)
 8001806:	22c8      	movs	r2, #200	@ 0xc8
 8001808:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 800180a:	49a2      	ldr	r1, [pc, #648]	@ (8001a94 <main+0x34c>)
 800180c:	489e      	ldr	r0, [pc, #632]	@ (8001a88 <main+0x340>)
 800180e:	f7ff fca5 	bl	800115c <Modbus_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //------Modbus Function------//
	  Modbus_Protocal_Worker();
 8001812:	f7ff fd2f 	bl	8001274 <Modbus_Protocal_Worker>
	  check_vaccum_status();
 8001816:	f002 f943 	bl	8003aa0 <check_vaccum_status>
	  check_gripper_status();
 800181a:	f002 f96b 	bl	8003af4 <check_gripper_status>
	  set_shelf();
 800181e:	f002 f9a1 	bl	8003b64 <set_shelf>
	  Pointmode();
 8001822:	f002 fa31 	bl	8003c88 <Pointmode>
	  Home();
 8001826:	f002 fab1 	bl	8003d8c <Home>
	  Run_jog();
 800182a:	f002 faf5 	bl	8003e18 <Run_jog>

	  static uint64_t timestamp = 0;
	  static uint64_t timestamp2 = 0;

	  int64_t currentTime = micros();
 800182e:	f000 ff3d 	bl	80026ac <micros>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	  if (max_velo < QEIdata.linearVel)
 800183a:	4b97      	ldr	r3, [pc, #604]	@ (8001a98 <main+0x350>)
 800183c:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001840:	4b96      	ldr	r3, [pc, #600]	@ (8001a9c <main+0x354>)
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800184a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184e:	dd03      	ble.n	8001858 <main+0x110>
	  {
		  max_velo = QEIdata.linearVel;
 8001850:	4b91      	ldr	r3, [pc, #580]	@ (8001a98 <main+0x350>)
 8001852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001854:	4a91      	ldr	r2, [pc, #580]	@ (8001a9c <main+0x354>)
 8001856:	6013      	str	r3, [r2, #0]
	  }
	  if(currentTime > timestamp2){
 8001858:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800185c:	4990      	ldr	r1, [pc, #576]	@ (8001aa0 <main+0x358>)
 800185e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001862:	4290      	cmp	r0, r2
 8001864:	eb71 0303 	sbcs.w	r3, r1, r3
 8001868:	f080 8149 	bcs.w	8001afe <main+0x3b6>
		  timestamp2 = currentTime + 167; //6,000 Hz
 800186c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001870:	f112 04a7 	adds.w	r4, r2, #167	@ 0xa7
 8001874:	f143 0500 	adc.w	r5, r3, #0
 8001878:	4622      	mov	r2, r4
 800187a:	462b      	mov	r3, r5
 800187c:	4988      	ldr	r1, [pc, #544]	@ (8001aa0 <main+0x358>)
 800187e:	e9c1 2300 	strd	r2, r3, [r1]

		  //Read encoder
		  QEIEncoderPosVel_Update();
 8001882:	f000 ff2d 	bl	80026e0 <QEIEncoderPosVel_Update>

		  //Create Trajectory
		  q_f = setPosition;
 8001886:	4b87      	ldr	r3, [pc, #540]	@ (8001aa4 <main+0x35c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a87      	ldr	r2, [pc, #540]	@ (8001aa8 <main+0x360>)
 800188c:	6013      	str	r3, [r2, #0]
		  checkStartMoving();
 800188e:	f001 f865 	bl	800295c <checkStartMoving>
		  createTrajectory();
 8001892:	f001 fa93 	bl	8002dbc <createTrajectory>

		  if(mode == 1){
 8001896:	4b85      	ldr	r3, [pc, #532]	@ (8001aac <main+0x364>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b01      	cmp	r3, #1
 800189c:	f040 8116 	bne.w	8001acc <main+0x384>
			  if(fabs(setPosition - QEIdata.linearPos) < 0.05){
 80018a0:	4b80      	ldr	r3, [pc, #512]	@ (8001aa4 <main+0x35c>)
 80018a2:	ed93 7a00 	vldr	s14, [r3]
 80018a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001a98 <main+0x350>)
 80018a8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80018ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b0:	eef0 7ae7 	vabs.f32	s15, s15
 80018b4:	ee17 0a90 	vmov	r0, s15
 80018b8:	f7fe fe12 	bl	80004e0 <__aeabi_f2d>
 80018bc:	a360      	add	r3, pc, #384	@ (adr r3, 8001a40 <main+0x2f8>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f7ff f8d7 	bl	8000a74 <__aeabi_dcmplt>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d004      	beq.n	80018d6 <main+0x18e>
				  Vin = 0;
 80018cc:	4b78      	ldr	r3, [pc, #480]	@ (8001ab0 <main+0x368>)
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	e099      	b.n	8001a0a <main+0x2c2>
			  }
			  else if(setPosition - QEIdata.linearPos < 3 && setPosition - QEIdata.linearPos > 0.05){
 80018d6:	4b73      	ldr	r3, [pc, #460]	@ (8001aa4 <main+0x35c>)
 80018d8:	ed93 7a00 	vldr	s14, [r3]
 80018dc:	4b6e      	ldr	r3, [pc, #440]	@ (8001a98 <main+0x350>)
 80018de:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80018e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80018ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f2:	d51b      	bpl.n	800192c <main+0x1e4>
 80018f4:	4b6b      	ldr	r3, [pc, #428]	@ (8001aa4 <main+0x35c>)
 80018f6:	ed93 7a00 	vldr	s14, [r3]
 80018fa:	4b67      	ldr	r3, [pc, #412]	@ (8001a98 <main+0x350>)
 80018fc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001900:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001904:	ee17 0a90 	vmov	r0, s15
 8001908:	f7fe fdea 	bl	80004e0 <__aeabi_f2d>
 800190c:	a34c      	add	r3, pc, #304	@ (adr r3, 8001a40 <main+0x2f8>)
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	f7ff f8cd 	bl	8000ab0 <__aeabi_dcmpgt>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d007      	beq.n	800192c <main+0x1e4>
				  Vin = 2;
 800191c:	4b64      	ldr	r3, [pc, #400]	@ (8001ab0 <main+0x368>)
 800191e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001922:	601a      	str	r2, [r3, #0]
				  check = 1;
 8001924:	4b63      	ldr	r3, [pc, #396]	@ (8001ab4 <main+0x36c>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e06e      	b.n	8001a0a <main+0x2c2>
			  }
			  else if(setPosition - QEIdata.linearPos > -3 && setPosition - QEIdata.linearPos < -0.05){
 800192c:	4b5d      	ldr	r3, [pc, #372]	@ (8001aa4 <main+0x35c>)
 800192e:	ed93 7a00 	vldr	s14, [r3]
 8001932:	4b59      	ldr	r3, [pc, #356]	@ (8001a98 <main+0x350>)
 8001934:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001938:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193c:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 8001940:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001948:	dd1b      	ble.n	8001982 <main+0x23a>
 800194a:	4b56      	ldr	r3, [pc, #344]	@ (8001aa4 <main+0x35c>)
 800194c:	ed93 7a00 	vldr	s14, [r3]
 8001950:	4b51      	ldr	r3, [pc, #324]	@ (8001a98 <main+0x350>)
 8001952:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800195a:	ee17 0a90 	vmov	r0, s15
 800195e:	f7fe fdbf 	bl	80004e0 <__aeabi_f2d>
 8001962:	a339      	add	r3, pc, #228	@ (adr r3, 8001a48 <main+0x300>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	f7ff f884 	bl	8000a74 <__aeabi_dcmplt>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d007      	beq.n	8001982 <main+0x23a>
			  	  Vin = -1.5;
 8001972:	4b4f      	ldr	r3, [pc, #316]	@ (8001ab0 <main+0x368>)
 8001974:	4a50      	ldr	r2, [pc, #320]	@ (8001ab8 <main+0x370>)
 8001976:	601a      	str	r2, [r3, #0]
			  	  check = -1;
 8001978:	4b4e      	ldr	r3, [pc, #312]	@ (8001ab4 <main+0x36c>)
 800197a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e043      	b.n	8001a0a <main+0x2c2>
			  }
			  else{
				  Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 - QEIdata.linearVel);
 8001982:	4b4e      	ldr	r3, [pc, #312]	@ (8001abc <main+0x374>)
 8001984:	ed93 7a00 	vldr	s14, [r3]
 8001988:	4b4d      	ldr	r3, [pc, #308]	@ (8001ac0 <main+0x378>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001992:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001996:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800199a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a98 <main+0x350>)
 800199c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80019a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a4:	4b33      	ldr	r3, [pc, #204]	@ (8001a74 <main+0x32c>)
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80019a8:	edc7 7a08 	vstr	s15, [r7, #32]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	ed93 7a00 	vldr	s14, [r3]
 80019b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80019b6:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80019c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80019c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80019ca:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80019d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80019da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80019e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ec:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Update state */
    S->state[1] = S->state[0];
 80019f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f6:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80019f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fa:	6a3a      	ldr	r2, [r7, #32]
 80019fc:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	4a2a      	ldr	r2, [pc, #168]	@ (8001ab0 <main+0x368>)
 8001a08:	6013      	str	r3, [r2, #0]
				  //Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
			  }
			  if(Vin > 24){
 8001a0a:	4b29      	ldr	r3, [pc, #164]	@ (8001ab0 <main+0x368>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8001a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1c:	dd02      	ble.n	8001a24 <main+0x2dc>
	  			  Vin = 24;
 8001a1e:	4b24      	ldr	r3, [pc, #144]	@ (8001ab0 <main+0x368>)
 8001a20:	4a28      	ldr	r2, [pc, #160]	@ (8001ac4 <main+0x37c>)
 8001a22:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 8001a24:	4b22      	ldr	r3, [pc, #136]	@ (8001ab0 <main+0x368>)
 8001a26:	edd3 7a00 	vldr	s15, [r3]
 8001a2a:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 8001a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a36:	d55e      	bpl.n	8001af6 <main+0x3ae>
				  Vin = -24;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <main+0x368>)
 8001a3a:	4a23      	ldr	r2, [pc, #140]	@ (8001ac8 <main+0x380>)
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e05a      	b.n	8001af6 <main+0x3ae>
 8001a40:	9999999a 	.word	0x9999999a
 8001a44:	3fa99999 	.word	0x3fa99999
 8001a48:	9999999a 	.word	0x9999999a
 8001a4c:	bfa99999 	.word	0xbfa99999
 8001a50:	20000440 	.word	0x20000440
 8001a54:	20000374 	.word	0x20000374
 8001a58:	200005d8 	.word	0x200005d8
 8001a5c:	20000a10 	.word	0x20000a10
 8001a60:	200002a8 	.word	0x200002a8
 8001a64:	2000050c 	.word	0x2000050c
 8001a68:	20000a88 	.word	0x20000a88
 8001a6c:	40a00000 	.word	0x40a00000
 8001a70:	37a7c5ac 	.word	0x37a7c5ac
 8001a74:	20000aac 	.word	0x20000aac
 8001a78:	3e19999a 	.word	0x3e19999a
 8001a7c:	3bc49ba6 	.word	0x3bc49ba6
 8001a80:	3d4ccccd 	.word	0x3d4ccccd
 8001a84:	200006a4 	.word	0x200006a4
 8001a88:	20000ae4 	.word	0x20000ae4
 8001a8c:	2000083c 	.word	0x2000083c
 8001a90:	20000770 	.word	0x20000770
 8001a94:	20000fbc 	.word	0x20000fbc
 8001a98:	200009c8 	.word	0x200009c8
 8001a9c:	20000ad8 	.word	0x20000ad8
 8001aa0:	200011c0 	.word	0x200011c0
 8001aa4:	20000ad0 	.word	0x20000ad0
 8001aa8:	20000a28 	.word	0x20000a28
 8001aac:	20000200 	.word	0x20000200
 8001ab0:	20000a20 	.word	0x20000a20
 8001ab4:	2000114c 	.word	0x2000114c
 8001ab8:	bfc00000 	.word	0xbfc00000
 8001abc:	20000ad4 	.word	0x20000ad4
 8001ac0:	20000a38 	.word	0x20000a38
 8001ac4:	41c00000 	.word	0x41c00000
 8001ac8:	c1c00000 	.word	0xc1c00000
			  }
		  }
	      else if(mode == 2){ //manual (control with joy stick)
 8001acc:	4bb0      	ldr	r3, [pc, #704]	@ (8001d90 <main+0x648>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d108      	bne.n	8001ae6 <main+0x39e>
			  JoystickInput();
 8001ad4:	f001 fe04 	bl	80036e0 <JoystickInput>
			  button_up_down_input();
 8001ad8:	f001 fe4a 	bl	8003770 <button_up_down_input>
			  button_reset_input(); //set 0;
 8001adc:	f001 fec6 	bl	800386c <button_reset_input>
			  button_save_position();
 8001ae0:	f001 ff2a 	bl	8003938 <button_save_position>
 8001ae4:	e007      	b.n	8001af6 <main+0x3ae>
		  }
		  else if(mode == 3){ //stop mode
 8001ae6:	4baa      	ldr	r3, [pc, #680]	@ (8001d90 <main+0x648>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d103      	bne.n	8001af6 <main+0x3ae>
			  Vin = 0;
 8001aee:	4ba9      	ldr	r3, [pc, #676]	@ (8001d94 <main+0x64c>)
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
		  }

		  //software limit
		  SoftwareLimit();
 8001af6:	f001 fd9b 	bl	8003630 <SoftwareLimit>

		  //Drive Motor which PWM
		  DriveMotor();
 8001afa:	f001 fd3d 	bl	8003578 <DriveMotor>

	  }

	  if(currentTime > timestamp){
 8001afe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b02:	49a5      	ldr	r1, [pc, #660]	@ (8001d98 <main+0x650>)
 8001b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b08:	4290      	cmp	r0, r2
 8001b0a:	eb71 0303 	sbcs.w	r3, r1, r3
 8001b0e:	f080 8127 	bcs.w	8001d60 <main+0x618>
		  timestamp = currentTime + 4000; //250 Hz
 8001b12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b16:	f512 687a 	adds.w	r8, r2, #4000	@ 0xfa0
 8001b1a:	f143 0900 	adc.w	r9, r3, #0
 8001b1e:	4642      	mov	r2, r8
 8001b20:	464b      	mov	r3, r9
 8001b22:	499d      	ldr	r1, [pc, #628]	@ (8001d98 <main+0x650>)
 8001b24:	e9c1 2300 	strd	r2, r3, [r1]

		  //control mode
		  if(mode == 1){ //auto
 8001b28:	4b99      	ldr	r3, [pc, #612]	@ (8001d90 <main+0x648>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	f040 8117 	bne.w	8001d60 <main+0x618>
			  if(fabs(setPosition - QEIdata.linearPos) < 0.05){
 8001b32:	4b9a      	ldr	r3, [pc, #616]	@ (8001d9c <main+0x654>)
 8001b34:	ed93 7a00 	vldr	s14, [r3]
 8001b38:	4b99      	ldr	r3, [pc, #612]	@ (8001da0 <main+0x658>)
 8001b3a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b42:	eef0 7ae7 	vabs.f32	s15, s15
 8001b46:	ee17 0a90 	vmov	r0, s15
 8001b4a:	f7fe fcc9 	bl	80004e0 <__aeabi_f2d>
 8001b4e:	a38c      	add	r3, pc, #560	@ (adr r3, 8001d80 <main+0x638>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe ff8e 	bl	8000a74 <__aeabi_dcmplt>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d004      	beq.n	8001b68 <main+0x420>
				  Vin = 0;
 8001b5e:	4b8d      	ldr	r3, [pc, #564]	@ (8001d94 <main+0x64c>)
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	e0dd      	b.n	8001d24 <main+0x5dc>
			  }
			  else if(setPosition - QEIdata.linearPos < 3 && setPosition - QEIdata.linearPos > 0.05){
 8001b68:	4b8c      	ldr	r3, [pc, #560]	@ (8001d9c <main+0x654>)
 8001b6a:	ed93 7a00 	vldr	s14, [r3]
 8001b6e:	4b8c      	ldr	r3, [pc, #560]	@ (8001da0 <main+0x658>)
 8001b70:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b78:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b84:	d51b      	bpl.n	8001bbe <main+0x476>
 8001b86:	4b85      	ldr	r3, [pc, #532]	@ (8001d9c <main+0x654>)
 8001b88:	ed93 7a00 	vldr	s14, [r3]
 8001b8c:	4b84      	ldr	r3, [pc, #528]	@ (8001da0 <main+0x658>)
 8001b8e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b96:	ee17 0a90 	vmov	r0, s15
 8001b9a:	f7fe fca1 	bl	80004e0 <__aeabi_f2d>
 8001b9e:	a378      	add	r3, pc, #480	@ (adr r3, 8001d80 <main+0x638>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	f7fe ff84 	bl	8000ab0 <__aeabi_dcmpgt>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <main+0x476>
			  	  Vin = 2;
 8001bae:	4b79      	ldr	r3, [pc, #484]	@ (8001d94 <main+0x64c>)
 8001bb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bb4:	601a      	str	r2, [r3, #0]
			  	  check = 2;
 8001bb6:	4b7b      	ldr	r3, [pc, #492]	@ (8001da4 <main+0x65c>)
 8001bb8:	2202      	movs	r2, #2
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e0b2      	b.n	8001d24 <main+0x5dc>
			  }
			  else if(setPosition - QEIdata.linearPos > -3 && setPosition - QEIdata.linearPos < -0.05){
 8001bbe:	4b77      	ldr	r3, [pc, #476]	@ (8001d9c <main+0x654>)
 8001bc0:	ed93 7a00 	vldr	s14, [r3]
 8001bc4:	4b76      	ldr	r3, [pc, #472]	@ (8001da0 <main+0x658>)
 8001bc6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bce:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 8001bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	dd1b      	ble.n	8001c14 <main+0x4cc>
 8001bdc:	4b6f      	ldr	r3, [pc, #444]	@ (8001d9c <main+0x654>)
 8001bde:	ed93 7a00 	vldr	s14, [r3]
 8001be2:	4b6f      	ldr	r3, [pc, #444]	@ (8001da0 <main+0x658>)
 8001be4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001be8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bec:	ee17 0a90 	vmov	r0, s15
 8001bf0:	f7fe fc76 	bl	80004e0 <__aeabi_f2d>
 8001bf4:	a364      	add	r3, pc, #400	@ (adr r3, 8001d88 <main+0x640>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	f7fe ff3b 	bl	8000a74 <__aeabi_dcmplt>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d007      	beq.n	8001c14 <main+0x4cc>
			  	  Vin = -1.5;
 8001c04:	4b63      	ldr	r3, [pc, #396]	@ (8001d94 <main+0x64c>)
 8001c06:	4a68      	ldr	r2, [pc, #416]	@ (8001da8 <main+0x660>)
 8001c08:	601a      	str	r2, [r3, #0]
			  	  check = -2;
 8001c0a:	4b66      	ldr	r3, [pc, #408]	@ (8001da4 <main+0x65c>)
 8001c0c:	f06f 0201 	mvn.w	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e087      	b.n	8001d24 <main+0x5dc>
			  }
			  else{
				  setVelocity = arm_pid_f32(&PID1, (setPosition + ref_p)/2 - QEIdata.linearPos);
 8001c14:	4b61      	ldr	r3, [pc, #388]	@ (8001d9c <main+0x654>)
 8001c16:	ed93 7a00 	vldr	s14, [r3]
 8001c1a:	4b64      	ldr	r3, [pc, #400]	@ (8001dac <main+0x664>)
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c24:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001c28:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8001da0 <main+0x658>)
 8001c2e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c36:	4b5e      	ldr	r3, [pc, #376]	@ (8001db0 <main+0x668>)
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	edc7 7a02 	vstr	s15, [r7, #8]
    out = (S->A0 * in) +
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	ed93 7a00 	vldr	s14, [r3]
 8001c44:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c48:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c58:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001c5c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c7e:	edc7 7a01 	vstr	s15, [r7, #4]
    S->state[1] = S->state[0];
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	615a      	str	r2, [r3, #20]
    return (out);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a46      	ldr	r2, [pc, #280]	@ (8001db4 <main+0x66c>)
 8001c9a:	6013      	str	r3, [r2, #0]
				  Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 + QEIdata.linearVel);
 8001c9c:	4b45      	ldr	r3, [pc, #276]	@ (8001db4 <main+0x66c>)
 8001c9e:	ed93 7a00 	vldr	s14, [r3]
 8001ca2:	4b45      	ldr	r3, [pc, #276]	@ (8001db8 <main+0x670>)
 8001ca4:	edd3 7a00 	vldr	s15, [r3]
 8001ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cac:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001cb0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cb4:	4b3a      	ldr	r3, [pc, #232]	@ (8001da0 <main+0x658>)
 8001cb6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cbe:	4b3f      	ldr	r3, [pc, #252]	@ (8001dbc <main+0x674>)
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	edc7 7a05 	vstr	s15, [r7, #20]
    out = (S->A0 * in) +
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	ed93 7a00 	vldr	s14, [r3]
 8001ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cd0:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	edd3 6a01 	vldr	s13, [r3, #4]
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	edd3 6a02 	vldr	s13, [r3, #8]
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d06:	edc7 7a04 	vstr	s15, [r7, #16]
    S->state[1] = S->state[0];
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	615a      	str	r2, [r3, #20]
    return (out);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4a1c      	ldr	r2, [pc, #112]	@ (8001d94 <main+0x64c>)
 8001d22:	6013      	str	r3, [r2, #0]
				  //Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
			  }
			  if(Vin > 24){
 8001d24:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <main+0x64c>)
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8001d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	dd02      	ble.n	8001d3e <main+0x5f6>
				  Vin = 24;
 8001d38:	4b16      	ldr	r3, [pc, #88]	@ (8001d94 <main+0x64c>)
 8001d3a:	4a21      	ldr	r2, [pc, #132]	@ (8001dc0 <main+0x678>)
 8001d3c:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 8001d3e:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <main+0x64c>)
 8001d40:	edd3 7a00 	vldr	s15, [r3]
 8001d44:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 8001d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d50:	d502      	bpl.n	8001d58 <main+0x610>
				  Vin = -24;
 8001d52:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <main+0x64c>)
 8001d54:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc4 <main+0x67c>)
 8001d56:	601a      	str	r2, [r3, #0]
			  }

			  //software limit
			  SoftwareLimit();
 8001d58:	f001 fc6a 	bl	8003630 <SoftwareLimit>

			  //Drive Motor which PWM
			  DriveMotor();
 8001d5c:	f001 fc0c 	bl	8003578 <DriveMotor>
		  }

	  }

	  //Check Emergency Status
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 1){
 8001d60:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d68:	f005 f8a4 	bl	8006eb4 <HAL_GPIO_ReadPin>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	f47f ad4f 	bne.w	8001812 <main+0xca>
		  LED_Emergency();
 8001d74:	f002 fad8 	bl	8004328 <LED_Emergency>
  {
 8001d78:	e54b      	b.n	8001812 <main+0xca>
 8001d7a:	bf00      	nop
 8001d7c:	f3af 8000 	nop.w
 8001d80:	9999999a 	.word	0x9999999a
 8001d84:	3fa99999 	.word	0x3fa99999
 8001d88:	9999999a 	.word	0x9999999a
 8001d8c:	bfa99999 	.word	0xbfa99999
 8001d90:	20000200 	.word	0x20000200
 8001d94:	20000a20 	.word	0x20000a20
 8001d98:	200011c8 	.word	0x200011c8
 8001d9c:	20000ad0 	.word	0x20000ad0
 8001da0:	200009c8 	.word	0x200009c8
 8001da4:	2000114c 	.word	0x2000114c
 8001da8:	bfc00000 	.word	0xbfc00000
 8001dac:	20000a34 	.word	0x20000a34
 8001db0:	20000a88 	.word	0x20000a88
 8001db4:	20000ad4 	.word	0x20000ad4
 8001db8:	20000a38 	.word	0x20000a38
 8001dbc:	20000aac 	.word	0x20000aac
 8001dc0:	41c00000 	.word	0x41c00000
 8001dc4:	c1c00000 	.word	0xc1c00000

08001dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b094      	sub	sp, #80	@ 0x50
 8001dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dce:	f107 0318 	add.w	r3, r7, #24
 8001dd2:	2238      	movs	r2, #56	@ 0x38
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f00a f86c 	bl	800beb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
 8001de8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001dea:	2000      	movs	r0, #0
 8001dec:	f005 f8aa 	bl	8006f44 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001df0:	2302      	movs	r3, #2
 8001df2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001df4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001df8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dfa:	2340      	movs	r3, #64	@ 0x40
 8001dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e02:	2302      	movs	r3, #2
 8001e04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001e06:	2304      	movs	r3, #4
 8001e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001e0a:	2355      	movs	r3, #85	@ 0x55
 8001e0c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e12:	2302      	movs	r3, #2
 8001e14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e16:	2302      	movs	r3, #2
 8001e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e1a:	f107 0318 	add.w	r3, r7, #24
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f005 f944 	bl	80070ac <HAL_RCC_OscConfig>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e2a:	f002 fb3b 	bl	80044a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e2e:	230f      	movs	r3, #15
 8001e30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e32:	2303      	movs	r3, #3
 8001e34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	2104      	movs	r1, #4
 8001e46:	4618      	mov	r0, r3
 8001e48:	f005 fc42 	bl	80076d0 <HAL_RCC_ClockConfig>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001e52:	f002 fb27 	bl	80044a4 <Error_Handler>
  }
}
 8001e56:	bf00      	nop
 8001e58:	3750      	adds	r7, #80	@ 0x50
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08c      	sub	sp, #48	@ 0x30
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	2220      	movs	r2, #32
 8001e76:	2100      	movs	r1, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f00a f81b 	bl	800beb4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001e80:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001e84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e86:	4b38      	ldr	r3, [pc, #224]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001e88:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e8e:	4b36      	ldr	r3, [pc, #216]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e94:	4b34      	ldr	r3, [pc, #208]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001e9a:	4b33      	ldr	r3, [pc, #204]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001ea0:	4b31      	ldr	r3, [pc, #196]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ea6:	4b30      	ldr	r3, [pc, #192]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001eac:	4b2e      	ldr	r3, [pc, #184]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001eb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001eba:	2202      	movs	r2, #2
 8001ebc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001ec6:	4b28      	ldr	r3, [pc, #160]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001ec8:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 8001ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001ece:	4b26      	ldr	r3, [pc, #152]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001ed0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ed4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ed6:	4b24      	ldr	r3, [pc, #144]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ede:	4b22      	ldr	r3, [pc, #136]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001ee4:	4b20      	ldr	r3, [pc, #128]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001eec:	481e      	ldr	r0, [pc, #120]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001eee:	f003 f8d7 	bl	80050a0 <HAL_ADC_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001ef8:	f002 fad4 	bl	80044a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001efc:	2300      	movs	r3, #0
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f04:	4619      	mov	r1, r3
 8001f06:	4818      	ldr	r0, [pc, #96]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001f08:	f004 f908 	bl	800611c <HAL_ADCEx_MultiModeConfigChannel>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001f12:	f002 fac7 	bl	80044a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <MX_ADC1_Init+0x10c>)
 8001f18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f1a:	2306      	movs	r3, #6
 8001f1c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f22:	237f      	movs	r3, #127	@ 0x7f
 8001f24:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f26:	2304      	movs	r3, #4
 8001f28:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	4619      	mov	r1, r3
 8001f32:	480d      	ldr	r0, [pc, #52]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001f34:	f003 fb62 	bl	80055fc <HAL_ADC_ConfigChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001f3e:	f002 fab1 	bl	80044a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001f42:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <MX_ADC1_Init+0x110>)
 8001f44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001f46:	230c      	movs	r3, #12
 8001f48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4806      	ldr	r0, [pc, #24]	@ (8001f68 <MX_ADC1_Init+0x108>)
 8001f50:	f003 fb54 	bl	80055fc <HAL_ADC_ConfigChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001f5a:	f002 faa3 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	3730      	adds	r7, #48	@ 0x30
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200002a8 	.word	0x200002a8
 8001f6c:	04300002 	.word	0x04300002
 8001f70:	14f00020 	.word	0x14f00020

08001f74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08c      	sub	sp, #48	@ 0x30
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f7a:	f107 030c 	add.w	r3, r7, #12
 8001f7e:	2224      	movs	r2, #36	@ 0x24
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f009 ff96 	bl	800beb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f88:	463b      	mov	r3, r7
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f92:	4b21      	ldr	r3, [pc, #132]	@ (8002018 <MX_TIM2_Init+0xa4>)
 8001f94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002018 <MX_TIM2_Init+0xa4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8002018 <MX_TIM2_Init+0xa4>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8002018 <MX_TIM2_Init+0xa4>)
 8001fa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fae:	4b1a      	ldr	r3, [pc, #104]	@ (8002018 <MX_TIM2_Init+0xa4>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb4:	4b18      	ldr	r3, [pc, #96]	@ (8002018 <MX_TIM2_Init+0xa4>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480c      	ldr	r0, [pc, #48]	@ (8002018 <MX_TIM2_Init+0xa4>)
 8001fe6:	f006 fb9f 	bl	8008728 <HAL_TIM_Encoder_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001ff0:	f002 fa58 	bl	80044a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	4619      	mov	r1, r3
 8002000:	4805      	ldr	r0, [pc, #20]	@ (8002018 <MX_TIM2_Init+0xa4>)
 8002002:	f007 ff47 	bl	8009e94 <HAL_TIMEx_MasterConfigSynchronization>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800200c:	f002 fa4a 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002010:	bf00      	nop
 8002012:	3730      	adds	r7, #48	@ 0x30
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000374 	.word	0x20000374

0800201c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08e      	sub	sp, #56	@ 0x38
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002022:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002030:	f107 031c 	add.w	r3, r7, #28
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800203c:	463b      	mov	r3, r7
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	60da      	str	r2, [r3, #12]
 8002048:	611a      	str	r2, [r3, #16]
 800204a:	615a      	str	r2, [r3, #20]
 800204c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800204e:	4b2d      	ldr	r3, [pc, #180]	@ (8002104 <MX_TIM3_Init+0xe8>)
 8002050:	4a2d      	ldr	r2, [pc, #180]	@ (8002108 <MX_TIM3_Init+0xec>)
 8002052:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8002054:	4b2b      	ldr	r3, [pc, #172]	@ (8002104 <MX_TIM3_Init+0xe8>)
 8002056:	22a9      	movs	r2, #169	@ 0xa9
 8002058:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205a:	4b2a      	ldr	r3, [pc, #168]	@ (8002104 <MX_TIM3_Init+0xe8>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002060:	4b28      	ldr	r3, [pc, #160]	@ (8002104 <MX_TIM3_Init+0xe8>)
 8002062:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002066:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002068:	4b26      	ldr	r3, [pc, #152]	@ (8002104 <MX_TIM3_Init+0xe8>)
 800206a:	2200      	movs	r2, #0
 800206c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206e:	4b25      	ldr	r3, [pc, #148]	@ (8002104 <MX_TIM3_Init+0xe8>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002074:	4823      	ldr	r0, [pc, #140]	@ (8002104 <MX_TIM3_Init+0xe8>)
 8002076:	f005 ff95 	bl	8007fa4 <HAL_TIM_Base_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002080:	f002 fa10 	bl	80044a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002084:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002088:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800208a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800208e:	4619      	mov	r1, r3
 8002090:	481c      	ldr	r0, [pc, #112]	@ (8002104 <MX_TIM3_Init+0xe8>)
 8002092:	f006 ff19 	bl	8008ec8 <HAL_TIM_ConfigClockSource>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800209c:	f002 fa02 	bl	80044a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020a0:	4818      	ldr	r0, [pc, #96]	@ (8002104 <MX_TIM3_Init+0xe8>)
 80020a2:	f006 f8cb 	bl	800823c <HAL_TIM_PWM_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80020ac:	f002 f9fa 	bl	80044a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	4619      	mov	r1, r3
 80020be:	4811      	ldr	r0, [pc, #68]	@ (8002104 <MX_TIM3_Init+0xe8>)
 80020c0:	f007 fee8 	bl	8009e94 <HAL_TIMEx_MasterConfigSynchronization>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80020ca:	f002 f9eb 	bl	80044a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ce:	2360      	movs	r3, #96	@ 0x60
 80020d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80020d2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80020d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d8:	2300      	movs	r3, #0
 80020da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020dc:	2300      	movs	r3, #0
 80020de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020e0:	463b      	mov	r3, r7
 80020e2:	2200      	movs	r2, #0
 80020e4:	4619      	mov	r1, r3
 80020e6:	4807      	ldr	r0, [pc, #28]	@ (8002104 <MX_TIM3_Init+0xe8>)
 80020e8:	f006 fdda 	bl	8008ca0 <HAL_TIM_PWM_ConfigChannel>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80020f2:	f002 f9d7 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020f6:	4803      	ldr	r0, [pc, #12]	@ (8002104 <MX_TIM3_Init+0xe8>)
 80020f8:	f002 fb64 	bl	80047c4 <HAL_TIM_MspPostInit>

}
 80020fc:	bf00      	nop
 80020fe:	3738      	adds	r7, #56	@ 0x38
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000440 	.word	0x20000440
 8002108:	40000400 	.word	0x40000400

0800210c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002112:	f107 0310 	add.w	r3, r7, #16
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800212a:	4b1d      	ldr	r3, [pc, #116]	@ (80021a0 <MX_TIM4_Init+0x94>)
 800212c:	4a1d      	ldr	r2, [pc, #116]	@ (80021a4 <MX_TIM4_Init+0x98>)
 800212e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8002130:	4b1b      	ldr	r3, [pc, #108]	@ (80021a0 <MX_TIM4_Init+0x94>)
 8002132:	22a9      	movs	r2, #169	@ 0xa9
 8002134:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002136:	4b1a      	ldr	r3, [pc, #104]	@ (80021a0 <MX_TIM4_Init+0x94>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800213c:	4b18      	ldr	r3, [pc, #96]	@ (80021a0 <MX_TIM4_Init+0x94>)
 800213e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002142:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002144:	4b16      	ldr	r3, [pc, #88]	@ (80021a0 <MX_TIM4_Init+0x94>)
 8002146:	2200      	movs	r2, #0
 8002148:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214a:	4b15      	ldr	r3, [pc, #84]	@ (80021a0 <MX_TIM4_Init+0x94>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002150:	4813      	ldr	r0, [pc, #76]	@ (80021a0 <MX_TIM4_Init+0x94>)
 8002152:	f005 ff27 	bl	8007fa4 <HAL_TIM_Base_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800215c:	f002 f9a2 	bl	80044a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002160:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002164:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002166:	f107 0310 	add.w	r3, r7, #16
 800216a:	4619      	mov	r1, r3
 800216c:	480c      	ldr	r0, [pc, #48]	@ (80021a0 <MX_TIM4_Init+0x94>)
 800216e:	f006 feab 	bl	8008ec8 <HAL_TIM_ConfigClockSource>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002178:	f002 f994 	bl	80044a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800217c:	2320      	movs	r3, #32
 800217e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	4619      	mov	r1, r3
 8002188:	4805      	ldr	r0, [pc, #20]	@ (80021a0 <MX_TIM4_Init+0x94>)
 800218a:	f007 fe83 	bl	8009e94 <HAL_TIMEx_MasterConfigSynchronization>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002194:	f002 f986 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002198:	bf00      	nop
 800219a:	3720      	adds	r7, #32
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	2000050c 	.word	0x2000050c
 80021a4:	40000800 	.word	0x40000800

080021a8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ae:	f107 0310 	add.w	r3, r7, #16
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80021c6:	4b1d      	ldr	r3, [pc, #116]	@ (800223c <MX_TIM5_Init+0x94>)
 80021c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002240 <MX_TIM5_Init+0x98>)
 80021ca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80021cc:	4b1b      	ldr	r3, [pc, #108]	@ (800223c <MX_TIM5_Init+0x94>)
 80021ce:	22a9      	movs	r2, #169	@ 0xa9
 80021d0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d2:	4b1a      	ldr	r3, [pc, #104]	@ (800223c <MX_TIM5_Init+0x94>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80021d8:	4b18      	ldr	r3, [pc, #96]	@ (800223c <MX_TIM5_Init+0x94>)
 80021da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021de:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e0:	4b16      	ldr	r3, [pc, #88]	@ (800223c <MX_TIM5_Init+0x94>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e6:	4b15      	ldr	r3, [pc, #84]	@ (800223c <MX_TIM5_Init+0x94>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80021ec:	4813      	ldr	r0, [pc, #76]	@ (800223c <MX_TIM5_Init+0x94>)
 80021ee:	f005 fed9 	bl	8007fa4 <HAL_TIM_Base_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80021f8:	f002 f954 	bl	80044a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002200:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002202:	f107 0310 	add.w	r3, r7, #16
 8002206:	4619      	mov	r1, r3
 8002208:	480c      	ldr	r0, [pc, #48]	@ (800223c <MX_TIM5_Init+0x94>)
 800220a:	f006 fe5d 	bl	8008ec8 <HAL_TIM_ConfigClockSource>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002214:	f002 f946 	bl	80044a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002218:	2300      	movs	r3, #0
 800221a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	4619      	mov	r1, r3
 8002224:	4805      	ldr	r0, [pc, #20]	@ (800223c <MX_TIM5_Init+0x94>)
 8002226:	f007 fe35 	bl	8009e94 <HAL_TIMEx_MasterConfigSynchronization>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002230:	f002 f938 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002234:	bf00      	nop
 8002236:	3720      	adds	r7, #32
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200005d8 	.word	0x200005d8
 8002240:	40000c00 	.word	0x40000c00

08002244 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002254:	4b15      	ldr	r3, [pc, #84]	@ (80022ac <MX_TIM6_Init+0x68>)
 8002256:	4a16      	ldr	r2, [pc, #88]	@ (80022b0 <MX_TIM6_Init+0x6c>)
 8002258:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1699;
 800225a:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <MX_TIM6_Init+0x68>)
 800225c:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002260:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002262:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <MX_TIM6_Init+0x68>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 8002268:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <MX_TIM6_Init+0x68>)
 800226a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800226e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002270:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <MX_TIM6_Init+0x68>)
 8002272:	2200      	movs	r2, #0
 8002274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002276:	480d      	ldr	r0, [pc, #52]	@ (80022ac <MX_TIM6_Init+0x68>)
 8002278:	f005 fe94 	bl	8007fa4 <HAL_TIM_Base_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002282:	f002 f90f 	bl	80044a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	4619      	mov	r1, r3
 8002292:	4806      	ldr	r0, [pc, #24]	@ (80022ac <MX_TIM6_Init+0x68>)
 8002294:	f007 fdfe 	bl	8009e94 <HAL_TIMEx_MasterConfigSynchronization>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800229e:	f002 f901 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200006a4 	.word	0x200006a4
 80022b0:	40001000 	.word	0x40001000

080022b4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80022b8:	4b14      	ldr	r3, [pc, #80]	@ (800230c <MX_TIM16_Init+0x58>)
 80022ba:	4a15      	ldr	r2, [pc, #84]	@ (8002310 <MX_TIM16_Init+0x5c>)
 80022bc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80022be:	4b13      	ldr	r3, [pc, #76]	@ (800230c <MX_TIM16_Init+0x58>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c4:	4b11      	ldr	r3, [pc, #68]	@ (800230c <MX_TIM16_Init+0x58>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80022ca:	4b10      	ldr	r3, [pc, #64]	@ (800230c <MX_TIM16_Init+0x58>)
 80022cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022d0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d2:	4b0e      	ldr	r3, [pc, #56]	@ (800230c <MX_TIM16_Init+0x58>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80022d8:	4b0c      	ldr	r3, [pc, #48]	@ (800230c <MX_TIM16_Init+0x58>)
 80022da:	2200      	movs	r2, #0
 80022dc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022de:	4b0b      	ldr	r3, [pc, #44]	@ (800230c <MX_TIM16_Init+0x58>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80022e4:	4809      	ldr	r0, [pc, #36]	@ (800230c <MX_TIM16_Init+0x58>)
 80022e6:	f005 fe5d 	bl	8007fa4 <HAL_TIM_Base_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80022f0:	f002 f8d8 	bl	80044a4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80022f4:	2108      	movs	r1, #8
 80022f6:	4805      	ldr	r0, [pc, #20]	@ (800230c <MX_TIM16_Init+0x58>)
 80022f8:	f006 f920 	bl	800853c <HAL_TIM_OnePulse_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8002302:	f002 f8cf 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000770 	.word	0x20000770
 8002310:	40014400 	.word	0x40014400

08002314 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002318:	4b23      	ldr	r3, [pc, #140]	@ (80023a8 <MX_USART2_UART_Init+0x94>)
 800231a:	4a24      	ldr	r2, [pc, #144]	@ (80023ac <MX_USART2_UART_Init+0x98>)
 800231c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800231e:	4b22      	ldr	r3, [pc, #136]	@ (80023a8 <MX_USART2_UART_Init+0x94>)
 8002320:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002324:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002326:	4b20      	ldr	r3, [pc, #128]	@ (80023a8 <MX_USART2_UART_Init+0x94>)
 8002328:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800232c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800232e:	4b1e      	ldr	r3, [pc, #120]	@ (80023a8 <MX_USART2_UART_Init+0x94>)
 8002330:	2200      	movs	r2, #0
 8002332:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002334:	4b1c      	ldr	r3, [pc, #112]	@ (80023a8 <MX_USART2_UART_Init+0x94>)
 8002336:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800233a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800233c:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <MX_USART2_UART_Init+0x94>)
 800233e:	220c      	movs	r2, #12
 8002340:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002342:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <MX_USART2_UART_Init+0x94>)
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002348:	4b17      	ldr	r3, [pc, #92]	@ (80023a8 <MX_USART2_UART_Init+0x94>)
 800234a:	2200      	movs	r2, #0
 800234c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800234e:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <MX_USART2_UART_Init+0x94>)
 8002350:	2200      	movs	r2, #0
 8002352:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002354:	4b14      	ldr	r3, [pc, #80]	@ (80023a8 <MX_USART2_UART_Init+0x94>)
 8002356:	2200      	movs	r2, #0
 8002358:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800235a:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <MX_USART2_UART_Init+0x94>)
 800235c:	2200      	movs	r2, #0
 800235e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002360:	4811      	ldr	r0, [pc, #68]	@ (80023a8 <MX_USART2_UART_Init+0x94>)
 8002362:	f007 fe7d 	bl	800a060 <HAL_UART_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800236c:	f002 f89a 	bl	80044a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002370:	2100      	movs	r1, #0
 8002372:	480d      	ldr	r0, [pc, #52]	@ (80023a8 <MX_USART2_UART_Init+0x94>)
 8002374:	f009 fc9d 	bl	800bcb2 <HAL_UARTEx_SetTxFifoThreshold>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800237e:	f002 f891 	bl	80044a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002382:	2100      	movs	r1, #0
 8002384:	4808      	ldr	r0, [pc, #32]	@ (80023a8 <MX_USART2_UART_Init+0x94>)
 8002386:	f009 fcd2 	bl	800bd2e <HAL_UARTEx_SetRxFifoThreshold>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002390:	f002 f888 	bl	80044a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002394:	4804      	ldr	r0, [pc, #16]	@ (80023a8 <MX_USART2_UART_Init+0x94>)
 8002396:	f009 fc53 	bl	800bc40 <HAL_UARTEx_DisableFifoMode>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80023a0:	f002 f880 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	2000083c 	.word	0x2000083c
 80023ac:	40004400 	.word	0x40004400

080023b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80023b6:	4b20      	ldr	r3, [pc, #128]	@ (8002438 <MX_DMA_Init+0x88>)
 80023b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002438 <MX_DMA_Init+0x88>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80023c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002438 <MX_DMA_Init+0x88>)
 80023c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002438 <MX_DMA_Init+0x88>)
 80023d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023d2:	4a19      	ldr	r2, [pc, #100]	@ (8002438 <MX_DMA_Init+0x88>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80023da:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <MX_DMA_Init+0x88>)
 80023dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023e6:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <MX_DMA_Init+0x88>)
 80023e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ea:	4a13      	ldr	r2, [pc, #76]	@ (8002438 <MX_DMA_Init+0x88>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80023f2:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <MX_DMA_Init+0x88>)
 80023f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2100      	movs	r1, #0
 8002402:	200b      	movs	r0, #11
 8002404:	f004 f86d 	bl	80064e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002408:	200b      	movs	r0, #11
 800240a:	f004 f884 	bl	8006516 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	2100      	movs	r1, #0
 8002412:	200c      	movs	r0, #12
 8002414:	f004 f865 	bl	80064e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002418:	200c      	movs	r0, #12
 800241a:	f004 f87c 	bl	8006516 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	2100      	movs	r1, #0
 8002422:	2038      	movs	r0, #56	@ 0x38
 8002424:	f004 f85d 	bl	80064e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002428:	2038      	movs	r0, #56	@ 0x38
 800242a:	f004 f874 	bl	8006516 <HAL_NVIC_EnableIRQ>

}
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000

0800243c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	@ 0x28
 8002440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	609a      	str	r2, [r3, #8]
 800244e:	60da      	str	r2, [r3, #12]
 8002450:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002452:	4b7d      	ldr	r3, [pc, #500]	@ (8002648 <MX_GPIO_Init+0x20c>)
 8002454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002456:	4a7c      	ldr	r2, [pc, #496]	@ (8002648 <MX_GPIO_Init+0x20c>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800245e:	4b7a      	ldr	r3, [pc, #488]	@ (8002648 <MX_GPIO_Init+0x20c>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800246a:	4b77      	ldr	r3, [pc, #476]	@ (8002648 <MX_GPIO_Init+0x20c>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246e:	4a76      	ldr	r2, [pc, #472]	@ (8002648 <MX_GPIO_Init+0x20c>)
 8002470:	f043 0320 	orr.w	r3, r3, #32
 8002474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002476:	4b74      	ldr	r3, [pc, #464]	@ (8002648 <MX_GPIO_Init+0x20c>)
 8002478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002482:	4b71      	ldr	r3, [pc, #452]	@ (8002648 <MX_GPIO_Init+0x20c>)
 8002484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002486:	4a70      	ldr	r2, [pc, #448]	@ (8002648 <MX_GPIO_Init+0x20c>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800248e:	4b6e      	ldr	r3, [pc, #440]	@ (8002648 <MX_GPIO_Init+0x20c>)
 8002490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800249a:	4b6b      	ldr	r3, [pc, #428]	@ (8002648 <MX_GPIO_Init+0x20c>)
 800249c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249e:	4a6a      	ldr	r2, [pc, #424]	@ (8002648 <MX_GPIO_Init+0x20c>)
 80024a0:	f043 0302 	orr.w	r3, r3, #2
 80024a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024a6:	4b68      	ldr	r3, [pc, #416]	@ (8002648 <MX_GPIO_Init+0x20c>)
 80024a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024b2:	4b65      	ldr	r3, [pc, #404]	@ (8002648 <MX_GPIO_Init+0x20c>)
 80024b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b6:	4a64      	ldr	r2, [pc, #400]	@ (8002648 <MX_GPIO_Init+0x20c>)
 80024b8:	f043 0308 	orr.w	r3, r3, #8
 80024bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024be:	4b62      	ldr	r3, [pc, #392]	@ (8002648 <MX_GPIO_Init+0x20c>)
 80024c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 80024ca:	2200      	movs	r2, #0
 80024cc:	f244 01b0 	movw	r1, #16560	@ 0x40b0
 80024d0:	485e      	ldr	r0, [pc, #376]	@ (800264c <MX_GPIO_Init+0x210>)
 80024d2:	f004 fd07 	bl	8006ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80024d6:	2200      	movs	r2, #0
 80024d8:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 80024dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024e0:	f004 fd00 	bl	8006ee4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_6, GPIO_PIN_RESET);
 80024e4:	2200      	movs	r2, #0
 80024e6:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80024ea:	4859      	ldr	r0, [pc, #356]	@ (8002650 <MX_GPIO_Init+0x214>)
 80024ec:	f004 fcfa 	bl	8006ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80024f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80024fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	4619      	mov	r1, r3
 8002506:	4851      	ldr	r0, [pc, #324]	@ (800264c <MX_GPIO_Init+0x210>)
 8002508:	f004 fb52 	bl	8006bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC4 PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800250c:	f244 03b0 	movw	r3, #16560	@ 0x40b0
 8002510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002512:	2301      	movs	r3, #1
 8002514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	4619      	mov	r1, r3
 8002524:	4849      	ldr	r0, [pc, #292]	@ (800264c <MX_GPIO_Init+0x210>)
 8002526:	f004 fb43 	bl	8006bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8
                           PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800252a:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 800252e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002530:	2301      	movs	r3, #1
 8002532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002538:	2300      	movs	r3, #0
 800253a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	4619      	mov	r1, r3
 8002542:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002546:	f004 fb33 	bl	8006bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_6;
 800254a:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 800254e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002550:	2301      	movs	r3, #1
 8002552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	2300      	movs	r3, #0
 800255a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	4619      	mov	r1, r3
 8002562:	483b      	ldr	r0, [pc, #236]	@ (8002650 <MX_GPIO_Init+0x214>)
 8002564:	f004 fb24 	bl	8006bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002568:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800256c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002576:	f107 0314 	add.w	r3, r7, #20
 800257a:	4619      	mov	r1, r3
 800257c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002580:	f004 fb16 	bl	8006bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002584:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800258a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800258e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002590:	2302      	movs	r3, #2
 8002592:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	4619      	mov	r1, r3
 800259a:	482c      	ldr	r0, [pc, #176]	@ (800264c <MX_GPIO_Init+0x210>)
 800259c:	f004 fb08 	bl	8006bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80025a0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80025a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025aa:	2302      	movs	r3, #2
 80025ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ae:	f107 0314 	add.w	r3, r7, #20
 80025b2:	4619      	mov	r1, r3
 80025b4:	4825      	ldr	r0, [pc, #148]	@ (800264c <MX_GPIO_Init+0x210>)
 80025b6:	f004 fafb 	bl	8006bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025ba:	2304      	movs	r3, #4
 80025bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025c2:	2302      	movs	r3, #2
 80025c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	4619      	mov	r1, r3
 80025cc:	4821      	ldr	r0, [pc, #132]	@ (8002654 <MX_GPIO_Init+0x218>)
 80025ce:	f004 faef 	bl	8006bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80025d2:	2330      	movs	r3, #48	@ 0x30
 80025d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025de:	f107 0314 	add.w	r3, r7, #20
 80025e2:	4619      	mov	r1, r3
 80025e4:	481a      	ldr	r0, [pc, #104]	@ (8002650 <MX_GPIO_Init+0x214>)
 80025e6:	f004 fae3 	bl	8006bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025ea:	2380      	movs	r3, #128	@ 0x80
 80025ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025f2:	2302      	movs	r3, #2
 80025f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f6:	f107 0314 	add.w	r3, r7, #20
 80025fa:	4619      	mov	r1, r3
 80025fc:	4814      	ldr	r0, [pc, #80]	@ (8002650 <MX_GPIO_Init+0x214>)
 80025fe:	f004 fad7 	bl	8006bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002602:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002608:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800260c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	480d      	ldr	r0, [pc, #52]	@ (8002650 <MX_GPIO_Init+0x214>)
 800261a:	f004 fac9 	bl	8006bb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	2100      	movs	r1, #0
 8002622:	2017      	movs	r0, #23
 8002624:	f003 ff5d 	bl	80064e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002628:	2017      	movs	r0, #23
 800262a:	f003 ff74 	bl	8006516 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	2100      	movs	r1, #0
 8002632:	2028      	movs	r0, #40	@ 0x28
 8002634:	f003 ff55 	bl	80064e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002638:	2028      	movs	r0, #40	@ 0x28
 800263a:	f003 ff6c 	bl	8006516 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800263e:	bf00      	nop
 8002640:	3728      	adds	r7, #40	@ 0x28
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000
 800264c:	48000800 	.word	0x48000800
 8002650:	48000400 	.word	0x48000400
 8002654:	48000c00 	.word	0x48000c00

08002658 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002658:	b5b0      	push	{r4, r5, r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a0e      	ldr	r2, [pc, #56]	@ (800269c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d108      	bne.n	800267a <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 8002668:	4b0d      	ldr	r3, [pc, #52]	@ (80026a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	1e54      	subs	r4, r2, #1
 8002670:	f143 0500 	adc.w	r5, r3, #0
 8002674:	4b0a      	ldr	r3, [pc, #40]	@ (80026a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002676:	e9c3 4500 	strd	r4, r5, [r3]
	}
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim6)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a09      	ldr	r2, [pc, #36]	@ (80026a4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d108      	bne.n	8002694 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
	    check2 +=1;
 8002682:	4b09      	ldr	r3, [pc, #36]	@ (80026a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	3301      	adds	r3, #1
 8002688:	4a07      	ldr	r2, [pc, #28]	@ (80026a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800268a:	6013      	str	r3, [r2, #0]
		Heartbeat();
 800268c:	f001 f984 	bl	8003998 <Heartbeat>
		Routine();
 8002690:	f001 f990 	bl	80039b4 <Routine>
	}
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bdb0      	pop	{r4, r5, r7, pc}
 800269c:	200005d8 	.word	0x200005d8
 80026a0:	20000a08 	.word	0x20000a08
 80026a4:	200006a4 	.word	0x200006a4
 80026a8:	20001150 	.word	0x20001150

080026ac <micros>:

uint64_t micros()
{
 80026ac:	b4b0      	push	{r4, r5, r7}
 80026ae:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 80026b0:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <micros+0x2c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	2200      	movs	r2, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	4611      	mov	r1, r2
 80026bc:	4b07      	ldr	r3, [pc, #28]	@ (80026dc <micros+0x30>)
 80026be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c2:	1884      	adds	r4, r0, r2
 80026c4:	eb41 0503 	adc.w	r5, r1, r3
 80026c8:	4622      	mov	r2, r4
 80026ca:	462b      	mov	r3, r5
}
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bcb0      	pop	{r4, r5, r7}
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	200005d8 	.word	0x200005d8
 80026dc:	20000a08 	.word	0x20000a08

080026e0 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 80026e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = micros();
 80026e8:	f7ff ffe0 	bl	80026ac <micros>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4971      	ldr	r1, [pc, #452]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 80026f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim2);
 80026f6:	4b71      	ldr	r3, [pc, #452]	@ (80028bc <QEIEncoderPosVel_Update+0x1dc>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	4a6e      	ldr	r2, [pc, #440]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 80026fe:	6013      	str	r3, [r2, #0]
	//Postion 1 turn calculation
	QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 8002700:	4b6d      	ldr	r3, [pc, #436]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002708:	ee07 3a90 	vmov	s15, r3
 800270c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002710:	4b69      	ldr	r3, [pc, #420]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 8002712:	edc3 7a06 	vstr	s15, [r3, #24]
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8002716:	4b68      	ldr	r3, [pc, #416]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4b67      	ldr	r3, [pc, #412]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	607b      	str	r3, [r7, #4]
	//Handle Warp around
	if(diffPosition > UINT32_MAX/2)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	da02      	bge.n	800272e <QEIEncoderPosVel_Update+0x4e>
		diffPosition -=UINT32_MAX;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3301      	adds	r3, #1
 800272c:	607b      	str	r3, [r7, #4]
	if(diffPosition < -UINT32_MAX/2)
		diffPosition +=UINT32_MAX;
	//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001; //sec
 800272e:	4b62      	ldr	r3, [pc, #392]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 8002730:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002734:	4b60      	ldr	r3, [pc, #384]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 8002736:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800273a:	ebb0 0a02 	subs.w	sl, r0, r2
 800273e:	eb61 0b03 	sbc.w	fp, r1, r3
 8002742:	4650      	mov	r0, sl
 8002744:	4659      	mov	r1, fp
 8002746:	f7fd feed 	bl	8000524 <__aeabi_ul2d>
 800274a:	a357      	add	r3, pc, #348	@ (adr r3, 80028a8 <QEIEncoderPosVel_Update+0x1c8>)
 800274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002750:	f7fd ff1e 	bl	8000590 <__aeabi_dmul>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	f7fe f9e8 	bl	8000b30 <__aeabi_d2f>
 8002760:	4603      	mov	r3, r0
 8002762:	603b      	str	r3, [r7, #0]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;  //pulse/sec
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800276e:	ed97 7a00 	vldr	s14, [r7]
 8002772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002776:	4b50      	ldr	r3, [pc, #320]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 8002778:	edc3 7a07 	vstr	s15, [r3, #28]

	QEIdata.rad_s = (QEIdata.QEIAngularVelocity*2*3.14)/8192;
 800277c:	4b4e      	ldr	r3, [pc, #312]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 800277e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002782:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002786:	ee17 0a90 	vmov	r0, s15
 800278a:	f7fd fea9 	bl	80004e0 <__aeabi_f2d>
 800278e:	a348      	add	r3, pc, #288	@ (adr r3, 80028b0 <QEIEncoderPosVel_Update+0x1d0>)
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	f7fd fefc 	bl	8000590 <__aeabi_dmul>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4610      	mov	r0, r2
 800279e:	4619      	mov	r1, r3
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	4b46      	ldr	r3, [pc, #280]	@ (80028c0 <QEIEncoderPosVel_Update+0x1e0>)
 80027a6:	f7fe f81d 	bl	80007e4 <__aeabi_ddiv>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	f7fe f9bd 	bl	8000b30 <__aeabi_d2f>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4a3f      	ldr	r2, [pc, #252]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 80027ba:	6213      	str	r3, [r2, #32]
	QEIdata.rpm = (QEIdata.QEIAngularVelocity*60)/8192;
 80027bc:	4b3e      	ldr	r3, [pc, #248]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 80027be:	edd3 7a07 	vldr	s15, [r3, #28]
 80027c2:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 80028c4 <QEIEncoderPosVel_Update+0x1e4>
 80027c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027ca:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80028c8 <QEIEncoderPosVel_Update+0x1e8>
 80027ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027d2:	4b39      	ldr	r3, [pc, #228]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 80027d4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	QEIdata.linearVel = (QEIdata.QEIAngularVelocity*10)/8192; //velocity (mm/s)
 80027d8:	4b37      	ldr	r3, [pc, #220]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 80027da:	edd3 7a07 	vldr	s15, [r3, #28]
 80027de:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80027e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027e6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80028c8 <QEIEncoderPosVel_Update+0x1e8>
 80027ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027ee:	4b32      	ldr	r3, [pc, #200]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 80027f0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	QEIdata.Velocity[NEW] = QEIdata.linearVel;
 80027f4:	4b30      	ldr	r3, [pc, #192]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 80027f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f8:	4a2f      	ldr	r2, [pc, #188]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 80027fa:	6313      	str	r3, [r2, #48]	@ 0x30
	QEIdata.linearAcc = (QEIdata.Velocity[NEW]-QEIdata.Velocity[OLD])/diffTime;
 80027fc:	4b2e      	ldr	r3, [pc, #184]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 80027fe:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8002802:	4b2d      	ldr	r3, [pc, #180]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 8002804:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002808:	ee77 6a67 	vsub.f32	s13, s14, s15
 800280c:	ed97 7a00 	vldr	s14, [r7]
 8002810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002814:	4b28      	ldr	r3, [pc, #160]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 8002816:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38


	if(QEIdata.Position[NEW] < 2147483648){
 800281a:	4b27      	ldr	r3, [pc, #156]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	db11      	blt.n	8002846 <QEIEncoderPosVel_Update+0x166>
		QEIdata.linearPos = ((float)QEIdata.Position[NEW]*10)/8192; //position (mm)
 8002822:	4b25      	ldr	r3, [pc, #148]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	ee07 3a90 	vmov	s15, r3
 800282a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800282e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002832:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002836:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80028c8 <QEIEncoderPosVel_Update+0x1e8>
 800283a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800283e:	4b1e      	ldr	r3, [pc, #120]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 8002840:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 8002844:	e01c      	b.n	8002880 <QEIEncoderPosVel_Update+0x1a0>
	}
	else{
		QEIdata.linearPos = -((float)(4294967295 - QEIdata.Position[NEW])*10)/8192;
 8002846:	4b1c      	ldr	r3, [pc, #112]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2200      	movs	r2, #0
 800284c:	461c      	mov	r4, r3
 800284e:	4615      	mov	r5, r2
 8002850:	2300      	movs	r3, #0
 8002852:	f1d4 38ff 	rsbs	r8, r4, #4294967295	@ 0xffffffff
 8002856:	eb63 0905 	sbc.w	r9, r3, r5
 800285a:	4640      	mov	r0, r8
 800285c:	4649      	mov	r1, r9
 800285e:	f7fe fa87 	bl	8000d70 <__aeabi_l2f>
 8002862:	ee07 0a10 	vmov	s14, r0
 8002866:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800286a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286e:	eeb1 7a67 	vneg.f32	s14, s15
 8002872:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80028c8 <QEIEncoderPosVel_Update+0x1e8>
 8002876:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800287a:	4b0f      	ldr	r3, [pc, #60]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 800287c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	}

	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8002880:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a0c      	ldr	r2, [pc, #48]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 8002886:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8002888:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 800288a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800288e:	490a      	ldr	r1, [pc, #40]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 8002890:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata.Velocity[OLD] = QEIdata.Velocity[NEW];
 8002894:	4b08      	ldr	r3, [pc, #32]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 8002896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002898:	4a07      	ldr	r2, [pc, #28]	@ (80028b8 <QEIEncoderPosVel_Update+0x1d8>)
 800289a:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028a6:	bf00      	nop
 80028a8:	a0b5ed8d 	.word	0xa0b5ed8d
 80028ac:	3eb0c6f7 	.word	0x3eb0c6f7
 80028b0:	51eb851f 	.word	0x51eb851f
 80028b4:	40091eb8 	.word	0x40091eb8
 80028b8:	200009c8 	.word	0x200009c8
 80028bc:	20000374 	.word	0x20000374
 80028c0:	40c00000 	.word	0x40c00000
 80028c4:	42700000 	.word	0x42700000
 80028c8:	46000000 	.word	0x46000000

080028cc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_10)  //change mode IT
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028dc:	d121      	bne.n	8002922 <HAL_GPIO_EXTI_Callback+0x56>
	{
//		setPosition = 100;
		mode += 1;
 80028de:	4b1c      	ldr	r3, [pc, #112]	@ (8002950 <HAL_GPIO_EXTI_Callback+0x84>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	3301      	adds	r3, #1
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002950 <HAL_GPIO_EXTI_Callback+0x84>)
 80028e8:	701a      	strb	r2, [r3, #0]
		if(mode==4){
 80028ea:	4b19      	ldr	r3, [pc, #100]	@ (8002950 <HAL_GPIO_EXTI_Callback+0x84>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d102      	bne.n	80028f8 <HAL_GPIO_EXTI_Callback+0x2c>
			mode = 1;
 80028f2:	4b17      	ldr	r3, [pc, #92]	@ (8002950 <HAL_GPIO_EXTI_Callback+0x84>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]
		}

		if(mode == 1){
 80028f8:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <HAL_GPIO_EXTI_Callback+0x84>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d106      	bne.n	800290e <HAL_GPIO_EXTI_Callback+0x42>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8002900:	2201      	movs	r2, #1
 8002902:	2140      	movs	r1, #64	@ 0x40
 8002904:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002908:	f004 faec 	bl	8006ee4 <HAL_GPIO_WritePin>
 800290c:	e009      	b.n	8002922 <HAL_GPIO_EXTI_Callback+0x56>
		}
		else if(mode == 2){
 800290e:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <HAL_GPIO_EXTI_Callback+0x84>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d105      	bne.n	8002922 <HAL_GPIO_EXTI_Callback+0x56>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2140      	movs	r1, #64	@ 0x40
 800291a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800291e:	f004 fae1 	bl	8006ee4 <HAL_GPIO_WritePin>
		}
	}
	if(GPIO_Pin == GPIO_PIN_8){ //check top sensor
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002928:	d104      	bne.n	8002934 <HAL_GPIO_EXTI_Callback+0x68>
		S_top = 1;
 800292a:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <HAL_GPIO_EXTI_Callback+0x88>)
 800292c:	2201      	movs	r2, #1
 800292e:	601a      	str	r2, [r3, #0]
		//Vin = -2;
		DriveMotor();
 8002930:	f000 fe22 	bl	8003578 <DriveMotor>
	}
	if(GPIO_Pin == GPIO_PIN_9){ //check down sensor
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800293a:	d104      	bne.n	8002946 <HAL_GPIO_EXTI_Callback+0x7a>
		S_down = 1;
 800293c:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <HAL_GPIO_EXTI_Callback+0x8c>)
 800293e:	2201      	movs	r2, #1
 8002940:	601a      	str	r2, [r3, #0]
		//Vin = 2;
		DriveMotor();
 8002942:	f000 fe19 	bl	8003578 <DriveMotor>
	}
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000200 	.word	0x20000200
 8002954:	20000adc 	.word	0x20000adc
 8002958:	20000ae0 	.word	0x20000ae0

0800295c <checkStartMoving>:

//-----------------------------------Trajectory------------------------------------------//
void checkStartMoving(){
 800295c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
	if(q_f != q_f_old){
 8002964:	4b9d      	ldr	r3, [pc, #628]	@ (8002bdc <checkStartMoving+0x280>)
 8002966:	ed93 7a00 	vldr	s14, [r3]
 800296a:	4b9d      	ldr	r3, [pc, #628]	@ (8002be0 <checkStartMoving+0x284>)
 800296c:	edd3 7a00 	vldr	s15, [r3]
 8002970:	eeb4 7a67 	vcmp.f32	s14, s15
 8002974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002978:	f000 8201 	beq.w	8002d7e <checkStartMoving+0x422>
		q_i = q_f_old;   //Define q_i
 800297c:	4b98      	ldr	r3, [pc, #608]	@ (8002be0 <checkStartMoving+0x284>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a98      	ldr	r2, [pc, #608]	@ (8002be4 <checkStartMoving+0x288>)
 8002982:	6013      	str	r3, [r2, #0]
		delta_q = q_f - q_i;
 8002984:	4b95      	ldr	r3, [pc, #596]	@ (8002bdc <checkStartMoving+0x280>)
 8002986:	ed93 7a00 	vldr	s14, [r3]
 800298a:	4b96      	ldr	r3, [pc, #600]	@ (8002be4 <checkStartMoving+0x288>)
 800298c:	edd3 7a00 	vldr	s15, [r3]
 8002990:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002994:	4b94      	ldr	r3, [pc, #592]	@ (8002be8 <checkStartMoving+0x28c>)
 8002996:	edc3 7a00 	vstr	s15, [r3]
		if(delta_q < 0){
 800299a:	4b93      	ldr	r3, [pc, #588]	@ (8002be8 <checkStartMoving+0x28c>)
 800299c:	edd3 7a00 	vldr	s15, [r3]
 80029a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a8:	d504      	bpl.n	80029b4 <checkStartMoving+0x58>
			dir = -1;
 80029aa:	4b90      	ldr	r3, [pc, #576]	@ (8002bec <checkStartMoving+0x290>)
 80029ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	e002      	b.n	80029ba <checkStartMoving+0x5e>
		}
		else{
			dir = 1;
 80029b4:	4b8d      	ldr	r3, [pc, #564]	@ (8002bec <checkStartMoving+0x290>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
		}

		float q_check = fabs(q_d_i + q_2d_max*sqrt(fabs(delta_q)/q_2d_max)*dir);
 80029ba:	4b8d      	ldr	r3, [pc, #564]	@ (8002bf0 <checkStartMoving+0x294>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fd fd8e 	bl	80004e0 <__aeabi_f2d>
 80029c4:	4604      	mov	r4, r0
 80029c6:	460d      	mov	r5, r1
 80029c8:	4b8a      	ldr	r3, [pc, #552]	@ (8002bf4 <checkStartMoving+0x298>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fd87 	bl	80004e0 <__aeabi_f2d>
 80029d2:	4680      	mov	r8, r0
 80029d4:	4689      	mov	r9, r1
 80029d6:	4b84      	ldr	r3, [pc, #528]	@ (8002be8 <checkStartMoving+0x28c>)
 80029d8:	edd3 7a00 	vldr	s15, [r3]
 80029dc:	eef0 7ae7 	vabs.f32	s15, s15
 80029e0:	ee17 0a90 	vmov	r0, s15
 80029e4:	f7fd fd7c 	bl	80004e0 <__aeabi_f2d>
 80029e8:	4682      	mov	sl, r0
 80029ea:	468b      	mov	fp, r1
 80029ec:	4b81      	ldr	r3, [pc, #516]	@ (8002bf4 <checkStartMoving+0x298>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fd fd75 	bl	80004e0 <__aeabi_f2d>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4650      	mov	r0, sl
 80029fc:	4659      	mov	r1, fp
 80029fe:	f7fd fef1 	bl	80007e4 <__aeabi_ddiv>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	ec43 2b17 	vmov	d7, r2, r3
 8002a0a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a0e:	eef0 0a67 	vmov.f32	s1, s15
 8002a12:	f009 fa8f 	bl	800bf34 <sqrt>
 8002a16:	ec53 2b10 	vmov	r2, r3, d0
 8002a1a:	4640      	mov	r0, r8
 8002a1c:	4649      	mov	r1, r9
 8002a1e:	f7fd fdb7 	bl	8000590 <__aeabi_dmul>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4690      	mov	r8, r2
 8002a28:	4699      	mov	r9, r3
 8002a2a:	4b70      	ldr	r3, [pc, #448]	@ (8002bec <checkStartMoving+0x290>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fd fd44 	bl	80004bc <__aeabi_i2d>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4640      	mov	r0, r8
 8002a3a:	4649      	mov	r1, r9
 8002a3c:	f7fd fda8 	bl	8000590 <__aeabi_dmul>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4620      	mov	r0, r4
 8002a46:	4629      	mov	r1, r5
 8002a48:	f7fd fbec 	bl	8000224 <__adddf3>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	f7fe f86c 	bl	8000b30 <__aeabi_d2f>
 8002a58:	ee07 0a90 	vmov	s15, r0
 8002a5c:	eef0 7ae7 	vabs.f32	s15, s15
 8002a60:	edc7 7a01 	vstr	s15, [r7, #4]

		if(q_check >= q_d_max){ //Accelerate to maximum speed
 8002a64:	4b64      	ldr	r3, [pc, #400]	@ (8002bf8 <checkStartMoving+0x29c>)
 8002a66:	edd3 7a00 	vldr	s15, [r3]
 8002a6a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a76:	f2c0 80cf 	blt.w	8002c18 <checkStartMoving+0x2bc>
			calmode = 1;
 8002a7a:	4b60      	ldr	r3, [pc, #384]	@ (8002bfc <checkStartMoving+0x2a0>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]
			t_acc = fabs((q_d_max-q_d_i)/q_2d_max);
 8002a80:	4b5d      	ldr	r3, [pc, #372]	@ (8002bf8 <checkStartMoving+0x29c>)
 8002a82:	ed93 7a00 	vldr	s14, [r3]
 8002a86:	4b5a      	ldr	r3, [pc, #360]	@ (8002bf0 <checkStartMoving+0x294>)
 8002a88:	edd3 7a00 	vldr	s15, [r3]
 8002a8c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002a90:	4b58      	ldr	r3, [pc, #352]	@ (8002bf4 <checkStartMoving+0x298>)
 8002a92:	ed93 7a00 	vldr	s14, [r3]
 8002a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a9a:	eef0 7ae7 	vabs.f32	s15, s15
 8002a9e:	4b58      	ldr	r3, [pc, #352]	@ (8002c00 <checkStartMoving+0x2a4>)
 8002aa0:	edc3 7a00 	vstr	s15, [r3]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 8002aa4:	4b52      	ldr	r3, [pc, #328]	@ (8002bf0 <checkStartMoving+0x294>)
 8002aa6:	ed93 7a00 	vldr	s14, [r3]
 8002aaa:	4b55      	ldr	r3, [pc, #340]	@ (8002c00 <checkStartMoving+0x2a4>)
 8002aac:	edd3 7a00 	vldr	s15, [r3]
 8002ab0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ab4:	4b4d      	ldr	r3, [pc, #308]	@ (8002bec <checkStartMoving+0x290>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	ee07 3a90 	vmov	s15, r3
 8002abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac4:	ee17 0a90 	vmov	r0, s15
 8002ac8:	f7fd fd0a 	bl	80004e0 <__aeabi_f2d>
 8002acc:	4604      	mov	r4, r0
 8002ace:	460d      	mov	r5, r1
 8002ad0:	4b48      	ldr	r3, [pc, #288]	@ (8002bf4 <checkStartMoving+0x298>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd fd03 	bl	80004e0 <__aeabi_f2d>
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	4b49      	ldr	r3, [pc, #292]	@ (8002c04 <checkStartMoving+0x2a8>)
 8002ae0:	f7fd fd56 	bl	8000590 <__aeabi_dmul>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4690      	mov	r8, r2
 8002aea:	4699      	mov	r9, r3
 8002aec:	4b44      	ldr	r3, [pc, #272]	@ (8002c00 <checkStartMoving+0x2a4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fd fcf5 	bl	80004e0 <__aeabi_f2d>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4640      	mov	r0, r8
 8002afc:	4649      	mov	r1, r9
 8002afe:	f7fd fd47 	bl	8000590 <__aeabi_dmul>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4690      	mov	r8, r2
 8002b08:	4699      	mov	r9, r3
 8002b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c00 <checkStartMoving+0x2a4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fd fce6 	bl	80004e0 <__aeabi_f2d>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4640      	mov	r0, r8
 8002b1a:	4649      	mov	r1, r9
 8002b1c:	f7fd fd38 	bl	8000590 <__aeabi_dmul>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4690      	mov	r8, r2
 8002b26:	4699      	mov	r9, r3
 8002b28:	4b30      	ldr	r3, [pc, #192]	@ (8002bec <checkStartMoving+0x290>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd fcc5 	bl	80004bc <__aeabi_i2d>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4640      	mov	r0, r8
 8002b38:	4649      	mov	r1, r9
 8002b3a:	f7fd fd29 	bl	8000590 <__aeabi_dmul>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4620      	mov	r0, r4
 8002b44:	4629      	mov	r1, r5
 8002b46:	f7fd fb6d 	bl	8000224 <__adddf3>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	f7fd ffed 	bl	8000b30 <__aeabi_d2f>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4a2b      	ldr	r2, [pc, #172]	@ (8002c08 <checkStartMoving+0x2ac>)
 8002b5a:	6013      	str	r3, [r2, #0]
			t_const = fabs((q_f-q_i-2*q_acc)/q_d_max);
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bdc <checkStartMoving+0x280>)
 8002b5e:	ed93 7a00 	vldr	s14, [r3]
 8002b62:	4b20      	ldr	r3, [pc, #128]	@ (8002be4 <checkStartMoving+0x288>)
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b6c:	4b26      	ldr	r3, [pc, #152]	@ (8002c08 <checkStartMoving+0x2ac>)
 8002b6e:	edd3 7a00 	vldr	s15, [r3]
 8002b72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b76:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf8 <checkStartMoving+0x29c>)
 8002b7c:	ed93 7a00 	vldr	s14, [r3]
 8002b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b84:	eef0 7ae7 	vabs.f32	s15, s15
 8002b88:	4b20      	ldr	r3, [pc, #128]	@ (8002c0c <checkStartMoving+0x2b0>)
 8002b8a:	edc3 7a00 	vstr	s15, [r3]
			q_const = q_acc + q_d_max*t_const*dir;
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf8 <checkStartMoving+0x29c>)
 8002b90:	ed93 7a00 	vldr	s14, [r3]
 8002b94:	4b1d      	ldr	r3, [pc, #116]	@ (8002c0c <checkStartMoving+0x2b0>)
 8002b96:	edd3 7a00 	vldr	s15, [r3]
 8002b9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b9e:	4b13      	ldr	r3, [pc, #76]	@ (8002bec <checkStartMoving+0x290>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	ee07 3a90 	vmov	s15, r3
 8002ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002baa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bae:	4b16      	ldr	r3, [pc, #88]	@ (8002c08 <checkStartMoving+0x2ac>)
 8002bb0:	edd3 7a00 	vldr	s15, [r3]
 8002bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb8:	4b15      	ldr	r3, [pc, #84]	@ (8002c10 <checkStartMoving+0x2b4>)
 8002bba:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc + t_const;
 8002bbe:	4b10      	ldr	r3, [pc, #64]	@ (8002c00 <checkStartMoving+0x2a4>)
 8002bc0:	edd3 7a00 	vldr	s15, [r3]
 8002bc4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002bc8:	4b10      	ldr	r3, [pc, #64]	@ (8002c0c <checkStartMoving+0x2b0>)
 8002bca:	edd3 7a00 	vldr	s15, [r3]
 8002bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd2:	4b10      	ldr	r3, [pc, #64]	@ (8002c14 <checkStartMoving+0x2b8>)
 8002bd4:	edc3 7a00 	vstr	s15, [r3]
 8002bd8:	e0c6      	b.n	8002d68 <checkStartMoving+0x40c>
 8002bda:	bf00      	nop
 8002bdc:	20000a28 	.word	0x20000a28
 8002be0:	20000a40 	.word	0x20000a40
 8002be4:	20000a2c 	.word	0x20000a2c
 8002be8:	20000a30 	.word	0x20000a30
 8002bec:	20000214 	.word	0x20000214
 8002bf0:	20000a24 	.word	0x20000a24
 8002bf4:	2000020c 	.word	0x2000020c
 8002bf8:	20000208 	.word	0x20000208
 8002bfc:	20000210 	.word	0x20000210
 8002c00:	20000a44 	.word	0x20000a44
 8002c04:	3fe00000 	.word	0x3fe00000
 8002c08:	20000a48 	.word	0x20000a48
 8002c0c:	20000a4c 	.word	0x20000a4c
 8002c10:	20000a50 	.word	0x20000a50
 8002c14:	20000a64 	.word	0x20000a64
		}
		else{ //Accelerating does not reach maximum speed
			calmode = 2;
 8002c18:	4b5b      	ldr	r3, [pc, #364]	@ (8002d88 <checkStartMoving+0x42c>)
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	701a      	strb	r2, [r3, #0]
			t_acc = sqrt(fabs(delta_q)/q_2d_max);
 8002c1e:	4b5b      	ldr	r3, [pc, #364]	@ (8002d8c <checkStartMoving+0x430>)
 8002c20:	edd3 7a00 	vldr	s15, [r3]
 8002c24:	eef0 7ae7 	vabs.f32	s15, s15
 8002c28:	ee17 0a90 	vmov	r0, s15
 8002c2c:	f7fd fc58 	bl	80004e0 <__aeabi_f2d>
 8002c30:	4604      	mov	r4, r0
 8002c32:	460d      	mov	r5, r1
 8002c34:	4b56      	ldr	r3, [pc, #344]	@ (8002d90 <checkStartMoving+0x434>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fd fc51 	bl	80004e0 <__aeabi_f2d>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4620      	mov	r0, r4
 8002c44:	4629      	mov	r1, r5
 8002c46:	f7fd fdcd 	bl	80007e4 <__aeabi_ddiv>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	ec43 2b17 	vmov	d7, r2, r3
 8002c52:	eeb0 0a47 	vmov.f32	s0, s14
 8002c56:	eef0 0a67 	vmov.f32	s1, s15
 8002c5a:	f009 f96b 	bl	800bf34 <sqrt>
 8002c5e:	ec53 2b10 	vmov	r2, r3, d0
 8002c62:	4610      	mov	r0, r2
 8002c64:	4619      	mov	r1, r3
 8002c66:	f7fd ff63 	bl	8000b30 <__aeabi_d2f>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4a49      	ldr	r2, [pc, #292]	@ (8002d94 <checkStartMoving+0x438>)
 8002c6e:	6013      	str	r3, [r2, #0]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 8002c70:	4b49      	ldr	r3, [pc, #292]	@ (8002d98 <checkStartMoving+0x43c>)
 8002c72:	ed93 7a00 	vldr	s14, [r3]
 8002c76:	4b47      	ldr	r3, [pc, #284]	@ (8002d94 <checkStartMoving+0x438>)
 8002c78:	edd3 7a00 	vldr	s15, [r3]
 8002c7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c80:	4b46      	ldr	r3, [pc, #280]	@ (8002d9c <checkStartMoving+0x440>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	ee07 3a90 	vmov	s15, r3
 8002c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c90:	ee17 0a90 	vmov	r0, s15
 8002c94:	f7fd fc24 	bl	80004e0 <__aeabi_f2d>
 8002c98:	4604      	mov	r4, r0
 8002c9a:	460d      	mov	r5, r1
 8002c9c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d90 <checkStartMoving+0x434>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd fc1d 	bl	80004e0 <__aeabi_f2d>
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	4b3d      	ldr	r3, [pc, #244]	@ (8002da0 <checkStartMoving+0x444>)
 8002cac:	f7fd fc70 	bl	8000590 <__aeabi_dmul>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4690      	mov	r8, r2
 8002cb6:	4699      	mov	r9, r3
 8002cb8:	4b36      	ldr	r3, [pc, #216]	@ (8002d94 <checkStartMoving+0x438>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fc0f 	bl	80004e0 <__aeabi_f2d>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4640      	mov	r0, r8
 8002cc8:	4649      	mov	r1, r9
 8002cca:	f7fd fc61 	bl	8000590 <__aeabi_dmul>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4690      	mov	r8, r2
 8002cd4:	4699      	mov	r9, r3
 8002cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8002d94 <checkStartMoving+0x438>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fc00 	bl	80004e0 <__aeabi_f2d>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4640      	mov	r0, r8
 8002ce6:	4649      	mov	r1, r9
 8002ce8:	f7fd fc52 	bl	8000590 <__aeabi_dmul>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4690      	mov	r8, r2
 8002cf2:	4699      	mov	r9, r3
 8002cf4:	4b29      	ldr	r3, [pc, #164]	@ (8002d9c <checkStartMoving+0x440>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd fbdf 	bl	80004bc <__aeabi_i2d>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4640      	mov	r0, r8
 8002d04:	4649      	mov	r1, r9
 8002d06:	f7fd fc43 	bl	8000590 <__aeabi_dmul>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4620      	mov	r0, r4
 8002d10:	4629      	mov	r1, r5
 8002d12:	f7fd fa87 	bl	8000224 <__adddf3>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f7fd ff07 	bl	8000b30 <__aeabi_d2f>
 8002d22:	4603      	mov	r3, r0
 8002d24:	4a1f      	ldr	r2, [pc, #124]	@ (8002da4 <checkStartMoving+0x448>)
 8002d26:	6013      	str	r3, [r2, #0]
			q_d_acc = q_d_i + q_2d_max*t_acc*dir;
 8002d28:	4b19      	ldr	r3, [pc, #100]	@ (8002d90 <checkStartMoving+0x434>)
 8002d2a:	ed93 7a00 	vldr	s14, [r3]
 8002d2e:	4b19      	ldr	r3, [pc, #100]	@ (8002d94 <checkStartMoving+0x438>)
 8002d30:	edd3 7a00 	vldr	s15, [r3]
 8002d34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d38:	4b18      	ldr	r3, [pc, #96]	@ (8002d9c <checkStartMoving+0x440>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	ee07 3a90 	vmov	s15, r3
 8002d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d48:	4b13      	ldr	r3, [pc, #76]	@ (8002d98 <checkStartMoving+0x43c>)
 8002d4a:	edd3 7a00 	vldr	s15, [r3]
 8002d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d52:	4b15      	ldr	r3, [pc, #84]	@ (8002da8 <checkStartMoving+0x44c>)
 8002d54:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc;
 8002d58:	4b0e      	ldr	r3, [pc, #56]	@ (8002d94 <checkStartMoving+0x438>)
 8002d5a:	edd3 7a00 	vldr	s15, [r3]
 8002d5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d62:	4b12      	ldr	r3, [pc, #72]	@ (8002dac <checkStartMoving+0x450>)
 8002d64:	edc3 7a00 	vstr	s15, [r3]
		}
		T_start = micros();
 8002d68:	f7ff fca0 	bl	80026ac <micros>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	490f      	ldr	r1, [pc, #60]	@ (8002db0 <checkStartMoving+0x454>)
 8002d72:	e9c1 2300 	strd	r2, r3, [r1]
		q_f_old = q_f;
 8002d76:	4b0f      	ldr	r3, [pc, #60]	@ (8002db4 <checkStartMoving+0x458>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8002db8 <checkStartMoving+0x45c>)
 8002d7c:	6013      	str	r3, [r2, #0]
	}
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d88:	20000210 	.word	0x20000210
 8002d8c:	20000a30 	.word	0x20000a30
 8002d90:	2000020c 	.word	0x2000020c
 8002d94:	20000a44 	.word	0x20000a44
 8002d98:	20000a24 	.word	0x20000a24
 8002d9c:	20000214 	.word	0x20000214
 8002da0:	3fe00000 	.word	0x3fe00000
 8002da4:	20000a48 	.word	0x20000a48
 8002da8:	20000a54 	.word	0x20000a54
 8002dac:	20000a64 	.word	0x20000a64
 8002db0:	20000a58 	.word	0x20000a58
 8002db4:	20000a28 	.word	0x20000a28
 8002db8:	20000a40 	.word	0x20000a40

08002dbc <createTrajectory>:

void createTrajectory(){
 8002dbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002dc0:	af00      	add	r7, sp, #0
	if(calmode == 1){
 8002dc2:	4b84      	ldr	r3, [pc, #528]	@ (8002fd4 <createTrajectory+0x218>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	f040 822c 	bne.w	8003224 <createTrajectory+0x468>
		t = (float)(micros()-T_start)/1000000; //sec
 8002dcc:	f7ff fc6e 	bl	80026ac <micros>
 8002dd0:	4b81      	ldr	r3, [pc, #516]	@ (8002fd8 <createTrajectory+0x21c>)
 8002dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd6:	ebb0 0802 	subs.w	r8, r0, r2
 8002dda:	eb61 0903 	sbc.w	r9, r1, r3
 8002dde:	4640      	mov	r0, r8
 8002de0:	4649      	mov	r1, r9
 8002de2:	f7fd ffbd 	bl	8000d60 <__aeabi_ul2f>
 8002de6:	ee06 0a90 	vmov	s13, r0
 8002dea:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8002fdc <createTrajectory+0x220>
 8002dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002df2:	4b7b      	ldr	r3, [pc, #492]	@ (8002fe0 <createTrajectory+0x224>)
 8002df4:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 8002df8:	4b79      	ldr	r3, [pc, #484]	@ (8002fe0 <createTrajectory+0x224>)
 8002dfa:	edd3 7a00 	vldr	s15, [r3]
 8002dfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e06:	f2c0 8094 	blt.w	8002f32 <createTrajectory+0x176>
 8002e0a:	4b75      	ldr	r3, [pc, #468]	@ (8002fe0 <createTrajectory+0x224>)
 8002e0c:	ed93 7a00 	vldr	s14, [r3]
 8002e10:	4b74      	ldr	r3, [pc, #464]	@ (8002fe4 <createTrajectory+0x228>)
 8002e12:	edd3 7a00 	vldr	s15, [r3]
 8002e16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e1e:	f140 8088 	bpl.w	8002f32 <createTrajectory+0x176>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 8002e22:	4b71      	ldr	r3, [pc, #452]	@ (8002fe8 <createTrajectory+0x22c>)
 8002e24:	ed93 7a00 	vldr	s14, [r3]
 8002e28:	4b6d      	ldr	r3, [pc, #436]	@ (8002fe0 <createTrajectory+0x224>)
 8002e2a:	edd3 7a00 	vldr	s15, [r3]
 8002e2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e32:	4b6e      	ldr	r3, [pc, #440]	@ (8002fec <createTrajectory+0x230>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	ee07 3a90 	vmov	s15, r3
 8002e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e42:	4b6b      	ldr	r3, [pc, #428]	@ (8002ff0 <createTrajectory+0x234>)
 8002e44:	edd3 7a00 	vldr	s15, [r3]
 8002e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4c:	ee17 0a90 	vmov	r0, s15
 8002e50:	f7fd fb46 	bl	80004e0 <__aeabi_f2d>
 8002e54:	4604      	mov	r4, r0
 8002e56:	460d      	mov	r5, r1
 8002e58:	4b66      	ldr	r3, [pc, #408]	@ (8002ff4 <createTrajectory+0x238>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fd fb3f 	bl	80004e0 <__aeabi_f2d>
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	4b64      	ldr	r3, [pc, #400]	@ (8002ff8 <createTrajectory+0x23c>)
 8002e68:	f7fd fb92 	bl	8000590 <__aeabi_dmul>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4690      	mov	r8, r2
 8002e72:	4699      	mov	r9, r3
 8002e74:	4b5a      	ldr	r3, [pc, #360]	@ (8002fe0 <createTrajectory+0x224>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd fb31 	bl	80004e0 <__aeabi_f2d>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4640      	mov	r0, r8
 8002e84:	4649      	mov	r1, r9
 8002e86:	f7fd fb83 	bl	8000590 <__aeabi_dmul>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4690      	mov	r8, r2
 8002e90:	4699      	mov	r9, r3
 8002e92:	4b53      	ldr	r3, [pc, #332]	@ (8002fe0 <createTrajectory+0x224>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd fb22 	bl	80004e0 <__aeabi_f2d>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4640      	mov	r0, r8
 8002ea2:	4649      	mov	r1, r9
 8002ea4:	f7fd fb74 	bl	8000590 <__aeabi_dmul>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4690      	mov	r8, r2
 8002eae:	4699      	mov	r9, r3
 8002eb0:	4b4e      	ldr	r3, [pc, #312]	@ (8002fec <createTrajectory+0x230>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd fb01 	bl	80004bc <__aeabi_i2d>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4649      	mov	r1, r9
 8002ec2:	f7fd fb65 	bl	8000590 <__aeabi_dmul>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4620      	mov	r0, r4
 8002ecc:	4629      	mov	r1, r5
 8002ece:	f7fd f9a9 	bl	8000224 <__adddf3>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f7fd fe29 	bl	8000b30 <__aeabi_d2f>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4a46      	ldr	r2, [pc, #280]	@ (8002ffc <createTrajectory+0x240>)
 8002ee2:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 8002ee4:	4b43      	ldr	r3, [pc, #268]	@ (8002ff4 <createTrajectory+0x238>)
 8002ee6:	ed93 7a00 	vldr	s14, [r3]
 8002eea:	4b3d      	ldr	r3, [pc, #244]	@ (8002fe0 <createTrajectory+0x224>)
 8002eec:	edd3 7a00 	vldr	s15, [r3]
 8002ef0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ef4:	4b3d      	ldr	r3, [pc, #244]	@ (8002fec <createTrajectory+0x230>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	ee07 3a90 	vmov	s15, r3
 8002efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f04:	4b38      	ldr	r3, [pc, #224]	@ (8002fe8 <createTrajectory+0x22c>)
 8002f06:	edd3 7a00 	vldr	s15, [r3]
 8002f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8003000 <createTrajectory+0x244>)
 8002f10:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 8002f14:	4b35      	ldr	r3, [pc, #212]	@ (8002fec <createTrajectory+0x230>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	ee07 3a90 	vmov	s15, r3
 8002f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f20:	4b34      	ldr	r3, [pc, #208]	@ (8002ff4 <createTrajectory+0x238>)
 8002f22:	edd3 7a00 	vldr	s15, [r3]
 8002f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2a:	4b36      	ldr	r3, [pc, #216]	@ (8003004 <createTrajectory+0x248>)
 8002f2c:	edc3 7a00 	vstr	s15, [r3]
 8002f30:	e2fd      	b.n	800352e <createTrajectory+0x772>
		}
		else if((t_acc <= t) && (t < t_acc+t_const)){ //Constant Velocity Segment
 8002f32:	4b2c      	ldr	r3, [pc, #176]	@ (8002fe4 <createTrajectory+0x228>)
 8002f34:	ed93 7a00 	vldr	s14, [r3]
 8002f38:	4b29      	ldr	r3, [pc, #164]	@ (8002fe0 <createTrajectory+0x224>)
 8002f3a:	edd3 7a00 	vldr	s15, [r3]
 8002f3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f46:	d865      	bhi.n	8003014 <createTrajectory+0x258>
 8002f48:	4b26      	ldr	r3, [pc, #152]	@ (8002fe4 <createTrajectory+0x228>)
 8002f4a:	ed93 7a00 	vldr	s14, [r3]
 8002f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8003008 <createTrajectory+0x24c>)
 8002f50:	edd3 7a00 	vldr	s15, [r3]
 8002f54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f58:	4b21      	ldr	r3, [pc, #132]	@ (8002fe0 <createTrajectory+0x224>)
 8002f5a:	edd3 7a00 	vldr	s15, [r3]
 8002f5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f66:	dd55      	ble.n	8003014 <createTrajectory+0x258>
			ref_p = q_i + q_acc + q_d_max*(t-t_acc)*dir;
 8002f68:	4b21      	ldr	r3, [pc, #132]	@ (8002ff0 <createTrajectory+0x234>)
 8002f6a:	ed93 7a00 	vldr	s14, [r3]
 8002f6e:	4b27      	ldr	r3, [pc, #156]	@ (800300c <createTrajectory+0x250>)
 8002f70:	edd3 7a00 	vldr	s15, [r3]
 8002f74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f78:	4b19      	ldr	r3, [pc, #100]	@ (8002fe0 <createTrajectory+0x224>)
 8002f7a:	edd3 6a00 	vldr	s13, [r3]
 8002f7e:	4b19      	ldr	r3, [pc, #100]	@ (8002fe4 <createTrajectory+0x228>)
 8002f80:	edd3 7a00 	vldr	s15, [r3]
 8002f84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002f88:	4b21      	ldr	r3, [pc, #132]	@ (8003010 <createTrajectory+0x254>)
 8002f8a:	edd3 7a00 	vldr	s15, [r3]
 8002f8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f92:	4b16      	ldr	r3, [pc, #88]	@ (8002fec <createTrajectory+0x230>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	ee07 3a90 	vmov	s15, r3
 8002f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa6:	4b15      	ldr	r3, [pc, #84]	@ (8002ffc <createTrajectory+0x240>)
 8002fa8:	edc3 7a00 	vstr	s15, [r3]
			ref_v = q_d_max*dir;
 8002fac:	4b0f      	ldr	r3, [pc, #60]	@ (8002fec <createTrajectory+0x230>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	ee07 3a90 	vmov	s15, r3
 8002fb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fb8:	4b15      	ldr	r3, [pc, #84]	@ (8003010 <createTrajectory+0x254>)
 8002fba:	edd3 7a00 	vldr	s15, [r3]
 8002fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8003000 <createTrajectory+0x244>)
 8002fc4:	edc3 7a00 	vstr	s15, [r3]
			ref_a = 0;
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8003004 <createTrajectory+0x248>)
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e2ad      	b.n	800352e <createTrajectory+0x772>
 8002fd2:	bf00      	nop
 8002fd4:	20000210 	.word	0x20000210
 8002fd8:	20000a58 	.word	0x20000a58
 8002fdc:	49742400 	.word	0x49742400
 8002fe0:	20000a60 	.word	0x20000a60
 8002fe4:	20000a44 	.word	0x20000a44
 8002fe8:	20000a24 	.word	0x20000a24
 8002fec:	20000214 	.word	0x20000214
 8002ff0:	20000a2c 	.word	0x20000a2c
 8002ff4:	2000020c 	.word	0x2000020c
 8002ff8:	3fe00000 	.word	0x3fe00000
 8002ffc:	20000a34 	.word	0x20000a34
 8003000:	20000a38 	.word	0x20000a38
 8003004:	20000a3c 	.word	0x20000a3c
 8003008:	20000a4c 	.word	0x20000a4c
 800300c:	20000a48 	.word	0x20000a48
 8003010:	20000208 	.word	0x20000208
		}
		else if((t_acc+t_const <= t) && (t < 2*t_acc+t_const)){ //Deceleration Segment
 8003014:	4b76      	ldr	r3, [pc, #472]	@ (80031f0 <createTrajectory+0x434>)
 8003016:	ed93 7a00 	vldr	s14, [r3]
 800301a:	4b76      	ldr	r3, [pc, #472]	@ (80031f4 <createTrajectory+0x438>)
 800301c:	edd3 7a00 	vldr	s15, [r3]
 8003020:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003024:	4b74      	ldr	r3, [pc, #464]	@ (80031f8 <createTrajectory+0x43c>)
 8003026:	edd3 7a00 	vldr	s15, [r3]
 800302a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800302e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003032:	f200 80d8 	bhi.w	80031e6 <createTrajectory+0x42a>
 8003036:	4b6e      	ldr	r3, [pc, #440]	@ (80031f0 <createTrajectory+0x434>)
 8003038:	edd3 7a00 	vldr	s15, [r3]
 800303c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003040:	4b6c      	ldr	r3, [pc, #432]	@ (80031f4 <createTrajectory+0x438>)
 8003042:	edd3 7a00 	vldr	s15, [r3]
 8003046:	ee37 7a27 	vadd.f32	s14, s14, s15
 800304a:	4b6b      	ldr	r3, [pc, #428]	@ (80031f8 <createTrajectory+0x43c>)
 800304c:	edd3 7a00 	vldr	s15, [r3]
 8003050:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003058:	f340 80c5 	ble.w	80031e6 <createTrajectory+0x42a>
			ref_p = q_i + q_const + q_d_max*(t-t_acc-t_const)*dir-0.5*q_2d_max*(t-t_acc-t_const)*(t-t_acc-t_const)*dir;
 800305c:	4b67      	ldr	r3, [pc, #412]	@ (80031fc <createTrajectory+0x440>)
 800305e:	ed93 7a00 	vldr	s14, [r3]
 8003062:	4b67      	ldr	r3, [pc, #412]	@ (8003200 <createTrajectory+0x444>)
 8003064:	edd3 7a00 	vldr	s15, [r3]
 8003068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800306c:	4b62      	ldr	r3, [pc, #392]	@ (80031f8 <createTrajectory+0x43c>)
 800306e:	edd3 6a00 	vldr	s13, [r3]
 8003072:	4b5f      	ldr	r3, [pc, #380]	@ (80031f0 <createTrajectory+0x434>)
 8003074:	edd3 7a00 	vldr	s15, [r3]
 8003078:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800307c:	4b5d      	ldr	r3, [pc, #372]	@ (80031f4 <createTrajectory+0x438>)
 800307e:	edd3 7a00 	vldr	s15, [r3]
 8003082:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003086:	4b5f      	ldr	r3, [pc, #380]	@ (8003204 <createTrajectory+0x448>)
 8003088:	edd3 7a00 	vldr	s15, [r3]
 800308c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003090:	4b5d      	ldr	r3, [pc, #372]	@ (8003208 <createTrajectory+0x44c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	ee07 3a90 	vmov	s15, r3
 8003098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800309c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a4:	ee17 0a90 	vmov	r0, s15
 80030a8:	f7fd fa1a 	bl	80004e0 <__aeabi_f2d>
 80030ac:	4604      	mov	r4, r0
 80030ae:	460d      	mov	r5, r1
 80030b0:	4b56      	ldr	r3, [pc, #344]	@ (800320c <createTrajectory+0x450>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fd fa13 	bl	80004e0 <__aeabi_f2d>
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	4b54      	ldr	r3, [pc, #336]	@ (8003210 <createTrajectory+0x454>)
 80030c0:	f7fd fa66 	bl	8000590 <__aeabi_dmul>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4690      	mov	r8, r2
 80030ca:	4699      	mov	r9, r3
 80030cc:	4b4a      	ldr	r3, [pc, #296]	@ (80031f8 <createTrajectory+0x43c>)
 80030ce:	ed93 7a00 	vldr	s14, [r3]
 80030d2:	4b47      	ldr	r3, [pc, #284]	@ (80031f0 <createTrajectory+0x434>)
 80030d4:	edd3 7a00 	vldr	s15, [r3]
 80030d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030dc:	4b45      	ldr	r3, [pc, #276]	@ (80031f4 <createTrajectory+0x438>)
 80030de:	edd3 7a00 	vldr	s15, [r3]
 80030e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030e6:	ee17 0a90 	vmov	r0, s15
 80030ea:	f7fd f9f9 	bl	80004e0 <__aeabi_f2d>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4640      	mov	r0, r8
 80030f4:	4649      	mov	r1, r9
 80030f6:	f7fd fa4b 	bl	8000590 <__aeabi_dmul>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4690      	mov	r8, r2
 8003100:	4699      	mov	r9, r3
 8003102:	4b3d      	ldr	r3, [pc, #244]	@ (80031f8 <createTrajectory+0x43c>)
 8003104:	ed93 7a00 	vldr	s14, [r3]
 8003108:	4b39      	ldr	r3, [pc, #228]	@ (80031f0 <createTrajectory+0x434>)
 800310a:	edd3 7a00 	vldr	s15, [r3]
 800310e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003112:	4b38      	ldr	r3, [pc, #224]	@ (80031f4 <createTrajectory+0x438>)
 8003114:	edd3 7a00 	vldr	s15, [r3]
 8003118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800311c:	ee17 0a90 	vmov	r0, s15
 8003120:	f7fd f9de 	bl	80004e0 <__aeabi_f2d>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4640      	mov	r0, r8
 800312a:	4649      	mov	r1, r9
 800312c:	f7fd fa30 	bl	8000590 <__aeabi_dmul>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4690      	mov	r8, r2
 8003136:	4699      	mov	r9, r3
 8003138:	4b33      	ldr	r3, [pc, #204]	@ (8003208 <createTrajectory+0x44c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f7fd f9bd 	bl	80004bc <__aeabi_i2d>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4640      	mov	r0, r8
 8003148:	4649      	mov	r1, r9
 800314a:	f7fd fa21 	bl	8000590 <__aeabi_dmul>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4620      	mov	r0, r4
 8003154:	4629      	mov	r1, r5
 8003156:	f7fd f863 	bl	8000220 <__aeabi_dsub>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4610      	mov	r0, r2
 8003160:	4619      	mov	r1, r3
 8003162:	f7fd fce5 	bl	8000b30 <__aeabi_d2f>
 8003166:	4603      	mov	r3, r0
 8003168:	4a2a      	ldr	r2, [pc, #168]	@ (8003214 <createTrajectory+0x458>)
 800316a:	6013      	str	r3, [r2, #0]
			ref_v = -q_2d_max*(t-t_acc-t_const)*dir + q_d_max*dir;
 800316c:	4b27      	ldr	r3, [pc, #156]	@ (800320c <createTrajectory+0x450>)
 800316e:	edd3 7a00 	vldr	s15, [r3]
 8003172:	eeb1 7a67 	vneg.f32	s14, s15
 8003176:	4b20      	ldr	r3, [pc, #128]	@ (80031f8 <createTrajectory+0x43c>)
 8003178:	edd3 6a00 	vldr	s13, [r3]
 800317c:	4b1c      	ldr	r3, [pc, #112]	@ (80031f0 <createTrajectory+0x434>)
 800317e:	edd3 7a00 	vldr	s15, [r3]
 8003182:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003186:	4b1b      	ldr	r3, [pc, #108]	@ (80031f4 <createTrajectory+0x438>)
 8003188:	edd3 7a00 	vldr	s15, [r3]
 800318c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003190:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003194:	4b1c      	ldr	r3, [pc, #112]	@ (8003208 <createTrajectory+0x44c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	ee07 3a90 	vmov	s15, r3
 800319c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031a4:	4b18      	ldr	r3, [pc, #96]	@ (8003208 <createTrajectory+0x44c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	ee07 3a90 	vmov	s15, r3
 80031ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031b0:	4b14      	ldr	r3, [pc, #80]	@ (8003204 <createTrajectory+0x448>)
 80031b2:	edd3 7a00 	vldr	s15, [r3]
 80031b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031be:	4b16      	ldr	r3, [pc, #88]	@ (8003218 <createTrajectory+0x45c>)
 80031c0:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 80031c4:	4b11      	ldr	r3, [pc, #68]	@ (800320c <createTrajectory+0x450>)
 80031c6:	edd3 7a00 	vldr	s15, [r3]
 80031ca:	eeb1 7a67 	vneg.f32	s14, s15
 80031ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003208 <createTrajectory+0x44c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	ee07 3a90 	vmov	s15, r3
 80031d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031de:	4b0f      	ldr	r3, [pc, #60]	@ (800321c <createTrajectory+0x460>)
 80031e0:	edc3 7a00 	vstr	s15, [r3]
 80031e4:	e1a3      	b.n	800352e <createTrajectory+0x772>
		}
		else{
			calmode = 3;
 80031e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003220 <createTrajectory+0x464>)
 80031e8:	2203      	movs	r2, #3
 80031ea:	701a      	strb	r2, [r3, #0]
	else if(calmode == 3){ //stop
		ref_p = q_f;
		ref_v = 0;
		ref_a = 0;
	}
}
 80031ec:	e19f      	b.n	800352e <createTrajectory+0x772>
 80031ee:	bf00      	nop
 80031f0:	20000a44 	.word	0x20000a44
 80031f4:	20000a4c 	.word	0x20000a4c
 80031f8:	20000a60 	.word	0x20000a60
 80031fc:	20000a2c 	.word	0x20000a2c
 8003200:	20000a50 	.word	0x20000a50
 8003204:	20000208 	.word	0x20000208
 8003208:	20000214 	.word	0x20000214
 800320c:	2000020c 	.word	0x2000020c
 8003210:	3fe00000 	.word	0x3fe00000
 8003214:	20000a34 	.word	0x20000a34
 8003218:	20000a38 	.word	0x20000a38
 800321c:	20000a3c 	.word	0x20000a3c
 8003220:	20000210 	.word	0x20000210
	else if(calmode == 2){
 8003224:	4bc3      	ldr	r3, [pc, #780]	@ (8003534 <createTrajectory+0x778>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b02      	cmp	r3, #2
 800322a:	f040 816f 	bne.w	800350c <createTrajectory+0x750>
		t = (float)(micros()-T_start)/1000000; //sec
 800322e:	f7ff fa3d 	bl	80026ac <micros>
 8003232:	4bc1      	ldr	r3, [pc, #772]	@ (8003538 <createTrajectory+0x77c>)
 8003234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003238:	1a84      	subs	r4, r0, r2
 800323a:	eb61 0503 	sbc.w	r5, r1, r3
 800323e:	4620      	mov	r0, r4
 8003240:	4629      	mov	r1, r5
 8003242:	f7fd fd8d 	bl	8000d60 <__aeabi_ul2f>
 8003246:	ee06 0a90 	vmov	s13, r0
 800324a:	ed9f 7abc 	vldr	s14, [pc, #752]	@ 800353c <createTrajectory+0x780>
 800324e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003252:	4bbb      	ldr	r3, [pc, #748]	@ (8003540 <createTrajectory+0x784>)
 8003254:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 8003258:	4bb9      	ldr	r3, [pc, #740]	@ (8003540 <createTrajectory+0x784>)
 800325a:	edd3 7a00 	vldr	s15, [r3]
 800325e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003266:	f2c0 8094 	blt.w	8003392 <createTrajectory+0x5d6>
 800326a:	4bb5      	ldr	r3, [pc, #724]	@ (8003540 <createTrajectory+0x784>)
 800326c:	ed93 7a00 	vldr	s14, [r3]
 8003270:	4bb4      	ldr	r3, [pc, #720]	@ (8003544 <createTrajectory+0x788>)
 8003272:	edd3 7a00 	vldr	s15, [r3]
 8003276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800327a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327e:	f140 8088 	bpl.w	8003392 <createTrajectory+0x5d6>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 8003282:	4bb1      	ldr	r3, [pc, #708]	@ (8003548 <createTrajectory+0x78c>)
 8003284:	ed93 7a00 	vldr	s14, [r3]
 8003288:	4bad      	ldr	r3, [pc, #692]	@ (8003540 <createTrajectory+0x784>)
 800328a:	edd3 7a00 	vldr	s15, [r3]
 800328e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003292:	4bae      	ldr	r3, [pc, #696]	@ (800354c <createTrajectory+0x790>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	ee07 3a90 	vmov	s15, r3
 800329a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800329e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032a2:	4bab      	ldr	r3, [pc, #684]	@ (8003550 <createTrajectory+0x794>)
 80032a4:	edd3 7a00 	vldr	s15, [r3]
 80032a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ac:	ee17 0a90 	vmov	r0, s15
 80032b0:	f7fd f916 	bl	80004e0 <__aeabi_f2d>
 80032b4:	4604      	mov	r4, r0
 80032b6:	460d      	mov	r5, r1
 80032b8:	4ba6      	ldr	r3, [pc, #664]	@ (8003554 <createTrajectory+0x798>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fd f90f 	bl	80004e0 <__aeabi_f2d>
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	4ba4      	ldr	r3, [pc, #656]	@ (8003558 <createTrajectory+0x79c>)
 80032c8:	f7fd f962 	bl	8000590 <__aeabi_dmul>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4690      	mov	r8, r2
 80032d2:	4699      	mov	r9, r3
 80032d4:	4b9a      	ldr	r3, [pc, #616]	@ (8003540 <createTrajectory+0x784>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fd f901 	bl	80004e0 <__aeabi_f2d>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4640      	mov	r0, r8
 80032e4:	4649      	mov	r1, r9
 80032e6:	f7fd f953 	bl	8000590 <__aeabi_dmul>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4690      	mov	r8, r2
 80032f0:	4699      	mov	r9, r3
 80032f2:	4b93      	ldr	r3, [pc, #588]	@ (8003540 <createTrajectory+0x784>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fd f8f2 	bl	80004e0 <__aeabi_f2d>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4640      	mov	r0, r8
 8003302:	4649      	mov	r1, r9
 8003304:	f7fd f944 	bl	8000590 <__aeabi_dmul>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4690      	mov	r8, r2
 800330e:	4699      	mov	r9, r3
 8003310:	4b8e      	ldr	r3, [pc, #568]	@ (800354c <createTrajectory+0x790>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd f8d1 	bl	80004bc <__aeabi_i2d>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4640      	mov	r0, r8
 8003320:	4649      	mov	r1, r9
 8003322:	f7fd f935 	bl	8000590 <__aeabi_dmul>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4620      	mov	r0, r4
 800332c:	4629      	mov	r1, r5
 800332e:	f7fc ff79 	bl	8000224 <__adddf3>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4610      	mov	r0, r2
 8003338:	4619      	mov	r1, r3
 800333a:	f7fd fbf9 	bl	8000b30 <__aeabi_d2f>
 800333e:	4603      	mov	r3, r0
 8003340:	4a86      	ldr	r2, [pc, #536]	@ (800355c <createTrajectory+0x7a0>)
 8003342:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 8003344:	4b83      	ldr	r3, [pc, #524]	@ (8003554 <createTrajectory+0x798>)
 8003346:	ed93 7a00 	vldr	s14, [r3]
 800334a:	4b7d      	ldr	r3, [pc, #500]	@ (8003540 <createTrajectory+0x784>)
 800334c:	edd3 7a00 	vldr	s15, [r3]
 8003350:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003354:	4b7d      	ldr	r3, [pc, #500]	@ (800354c <createTrajectory+0x790>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	ee07 3a90 	vmov	s15, r3
 800335c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003360:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003364:	4b78      	ldr	r3, [pc, #480]	@ (8003548 <createTrajectory+0x78c>)
 8003366:	edd3 7a00 	vldr	s15, [r3]
 800336a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800336e:	4b7c      	ldr	r3, [pc, #496]	@ (8003560 <createTrajectory+0x7a4>)
 8003370:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 8003374:	4b75      	ldr	r3, [pc, #468]	@ (800354c <createTrajectory+0x790>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	ee07 3a90 	vmov	s15, r3
 800337c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003380:	4b74      	ldr	r3, [pc, #464]	@ (8003554 <createTrajectory+0x798>)
 8003382:	edd3 7a00 	vldr	s15, [r3]
 8003386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338a:	4b76      	ldr	r3, [pc, #472]	@ (8003564 <createTrajectory+0x7a8>)
 800338c:	edc3 7a00 	vstr	s15, [r3]
 8003390:	e0cd      	b.n	800352e <createTrajectory+0x772>
		else if((t_acc <= t) && (t < t_acc*2)){
 8003392:	4b6c      	ldr	r3, [pc, #432]	@ (8003544 <createTrajectory+0x788>)
 8003394:	ed93 7a00 	vldr	s14, [r3]
 8003398:	4b69      	ldr	r3, [pc, #420]	@ (8003540 <createTrajectory+0x784>)
 800339a:	edd3 7a00 	vldr	s15, [r3]
 800339e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a6:	f200 80ad 	bhi.w	8003504 <createTrajectory+0x748>
 80033aa:	4b66      	ldr	r3, [pc, #408]	@ (8003544 <createTrajectory+0x788>)
 80033ac:	edd3 7a00 	vldr	s15, [r3]
 80033b0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80033b4:	4b62      	ldr	r3, [pc, #392]	@ (8003540 <createTrajectory+0x784>)
 80033b6:	edd3 7a00 	vldr	s15, [r3]
 80033ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c2:	f340 809f 	ble.w	8003504 <createTrajectory+0x748>
			ref_p = q_i + q_acc + q_d_acc*(t-t_acc) - 0.5*q_2d_max*(t-t_acc)*(t-t_acc)*dir;
 80033c6:	4b62      	ldr	r3, [pc, #392]	@ (8003550 <createTrajectory+0x794>)
 80033c8:	ed93 7a00 	vldr	s14, [r3]
 80033cc:	4b66      	ldr	r3, [pc, #408]	@ (8003568 <createTrajectory+0x7ac>)
 80033ce:	edd3 7a00 	vldr	s15, [r3]
 80033d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033d6:	4b5a      	ldr	r3, [pc, #360]	@ (8003540 <createTrajectory+0x784>)
 80033d8:	edd3 6a00 	vldr	s13, [r3]
 80033dc:	4b59      	ldr	r3, [pc, #356]	@ (8003544 <createTrajectory+0x788>)
 80033de:	edd3 7a00 	vldr	s15, [r3]
 80033e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80033e6:	4b61      	ldr	r3, [pc, #388]	@ (800356c <createTrajectory+0x7b0>)
 80033e8:	edd3 7a00 	vldr	s15, [r3]
 80033ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f4:	ee17 0a90 	vmov	r0, s15
 80033f8:	f7fd f872 	bl	80004e0 <__aeabi_f2d>
 80033fc:	4604      	mov	r4, r0
 80033fe:	460d      	mov	r5, r1
 8003400:	4b54      	ldr	r3, [pc, #336]	@ (8003554 <createTrajectory+0x798>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7fd f86b 	bl	80004e0 <__aeabi_f2d>
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	4b52      	ldr	r3, [pc, #328]	@ (8003558 <createTrajectory+0x79c>)
 8003410:	f7fd f8be 	bl	8000590 <__aeabi_dmul>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4690      	mov	r8, r2
 800341a:	4699      	mov	r9, r3
 800341c:	4b48      	ldr	r3, [pc, #288]	@ (8003540 <createTrajectory+0x784>)
 800341e:	ed93 7a00 	vldr	s14, [r3]
 8003422:	4b48      	ldr	r3, [pc, #288]	@ (8003544 <createTrajectory+0x788>)
 8003424:	edd3 7a00 	vldr	s15, [r3]
 8003428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800342c:	ee17 0a90 	vmov	r0, s15
 8003430:	f7fd f856 	bl	80004e0 <__aeabi_f2d>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4640      	mov	r0, r8
 800343a:	4649      	mov	r1, r9
 800343c:	f7fd f8a8 	bl	8000590 <__aeabi_dmul>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4690      	mov	r8, r2
 8003446:	4699      	mov	r9, r3
 8003448:	4b3d      	ldr	r3, [pc, #244]	@ (8003540 <createTrajectory+0x784>)
 800344a:	ed93 7a00 	vldr	s14, [r3]
 800344e:	4b3d      	ldr	r3, [pc, #244]	@ (8003544 <createTrajectory+0x788>)
 8003450:	edd3 7a00 	vldr	s15, [r3]
 8003454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003458:	ee17 0a90 	vmov	r0, s15
 800345c:	f7fd f840 	bl	80004e0 <__aeabi_f2d>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4640      	mov	r0, r8
 8003466:	4649      	mov	r1, r9
 8003468:	f7fd f892 	bl	8000590 <__aeabi_dmul>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4690      	mov	r8, r2
 8003472:	4699      	mov	r9, r3
 8003474:	4b35      	ldr	r3, [pc, #212]	@ (800354c <createTrajectory+0x790>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd f81f 	bl	80004bc <__aeabi_i2d>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4640      	mov	r0, r8
 8003484:	4649      	mov	r1, r9
 8003486:	f7fd f883 	bl	8000590 <__aeabi_dmul>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4620      	mov	r0, r4
 8003490:	4629      	mov	r1, r5
 8003492:	f7fc fec5 	bl	8000220 <__aeabi_dsub>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4610      	mov	r0, r2
 800349c:	4619      	mov	r1, r3
 800349e:	f7fd fb47 	bl	8000b30 <__aeabi_d2f>
 80034a2:	4603      	mov	r3, r0
 80034a4:	4a2d      	ldr	r2, [pc, #180]	@ (800355c <createTrajectory+0x7a0>)
 80034a6:	6013      	str	r3, [r2, #0]
			ref_v = q_d_acc - q_2d_max*(t-t_acc)*dir;
 80034a8:	4b30      	ldr	r3, [pc, #192]	@ (800356c <createTrajectory+0x7b0>)
 80034aa:	ed93 7a00 	vldr	s14, [r3]
 80034ae:	4b24      	ldr	r3, [pc, #144]	@ (8003540 <createTrajectory+0x784>)
 80034b0:	edd3 6a00 	vldr	s13, [r3]
 80034b4:	4b23      	ldr	r3, [pc, #140]	@ (8003544 <createTrajectory+0x788>)
 80034b6:	edd3 7a00 	vldr	s15, [r3]
 80034ba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80034be:	4b25      	ldr	r3, [pc, #148]	@ (8003554 <createTrajectory+0x798>)
 80034c0:	edd3 7a00 	vldr	s15, [r3]
 80034c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034c8:	4b20      	ldr	r3, [pc, #128]	@ (800354c <createTrajectory+0x790>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	ee07 3a90 	vmov	s15, r3
 80034d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034dc:	4b20      	ldr	r3, [pc, #128]	@ (8003560 <createTrajectory+0x7a4>)
 80034de:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 80034e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003554 <createTrajectory+0x798>)
 80034e4:	edd3 7a00 	vldr	s15, [r3]
 80034e8:	eeb1 7a67 	vneg.f32	s14, s15
 80034ec:	4b17      	ldr	r3, [pc, #92]	@ (800354c <createTrajectory+0x790>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	ee07 3a90 	vmov	s15, r3
 80034f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fc:	4b19      	ldr	r3, [pc, #100]	@ (8003564 <createTrajectory+0x7a8>)
 80034fe:	edc3 7a00 	vstr	s15, [r3]
 8003502:	e014      	b.n	800352e <createTrajectory+0x772>
			calmode = 3;
 8003504:	4b0b      	ldr	r3, [pc, #44]	@ (8003534 <createTrajectory+0x778>)
 8003506:	2203      	movs	r2, #3
 8003508:	701a      	strb	r2, [r3, #0]
}
 800350a:	e010      	b.n	800352e <createTrajectory+0x772>
	else if(calmode == 3){ //stop
 800350c:	4b09      	ldr	r3, [pc, #36]	@ (8003534 <createTrajectory+0x778>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b03      	cmp	r3, #3
 8003512:	d10c      	bne.n	800352e <createTrajectory+0x772>
		ref_p = q_f;
 8003514:	4b16      	ldr	r3, [pc, #88]	@ (8003570 <createTrajectory+0x7b4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a10      	ldr	r2, [pc, #64]	@ (800355c <createTrajectory+0x7a0>)
 800351a:	6013      	str	r3, [r2, #0]
		ref_v = 0;
 800351c:	4b10      	ldr	r3, [pc, #64]	@ (8003560 <createTrajectory+0x7a4>)
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
		ref_a = 0;
 8003524:	4b0f      	ldr	r3, [pc, #60]	@ (8003564 <createTrajectory+0x7a8>)
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
}
 800352c:	e7ff      	b.n	800352e <createTrajectory+0x772>
 800352e:	bf00      	nop
 8003530:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003534:	20000210 	.word	0x20000210
 8003538:	20000a58 	.word	0x20000a58
 800353c:	49742400 	.word	0x49742400
 8003540:	20000a60 	.word	0x20000a60
 8003544:	20000a44 	.word	0x20000a44
 8003548:	20000a24 	.word	0x20000a24
 800354c:	20000214 	.word	0x20000214
 8003550:	20000a2c 	.word	0x20000a2c
 8003554:	2000020c 	.word	0x2000020c
 8003558:	3fe00000 	.word	0x3fe00000
 800355c:	20000a34 	.word	0x20000a34
 8003560:	20000a38 	.word	0x20000a38
 8003564:	20000a3c 	.word	0x20000a3c
 8003568:	20000a48 	.word	0x20000a48
 800356c:	20000a54 	.word	0x20000a54
 8003570:	20000a28 	.word	0x20000a28
 8003574:	00000000 	.word	0x00000000

08003578 <DriveMotor>:

//--------------------------Drive Motor----------------//

void DriveMotor(){
 8003578:	b598      	push	{r3, r4, r7, lr}
 800357a:	af00      	add	r7, sp, #0
	//PWM Motor
	duty_cycle = (fabs(Vin)*100)/24;
 800357c:	4b26      	ldr	r3, [pc, #152]	@ (8003618 <DriveMotor+0xa0>)
 800357e:	edd3 7a00 	vldr	s15, [r3]
 8003582:	eef0 7ae7 	vabs.f32	s15, s15
 8003586:	ee17 0a90 	vmov	r0, s15
 800358a:	f7fc ffa9 	bl	80004e0 <__aeabi_f2d>
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	4b22      	ldr	r3, [pc, #136]	@ (800361c <DriveMotor+0xa4>)
 8003594:	f7fc fffc 	bl	8000590 <__aeabi_dmul>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4610      	mov	r0, r2
 800359e:	4619      	mov	r1, r3
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003620 <DriveMotor+0xa8>)
 80035a6:	f7fd f91d 	bl	80007e4 <__aeabi_ddiv>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4610      	mov	r0, r2
 80035b0:	4619      	mov	r1, r3
 80035b2:	f7fd fabd 	bl	8000b30 <__aeabi_d2f>
 80035b6:	4603      	mov	r3, r0
 80035b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003624 <DriveMotor+0xac>)
 80035ba:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycle*9.99);
 80035bc:	4b19      	ldr	r3, [pc, #100]	@ (8003624 <DriveMotor+0xac>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fc ff8d 	bl	80004e0 <__aeabi_f2d>
 80035c6:	a312      	add	r3, pc, #72	@ (adr r3, 8003610 <DriveMotor+0x98>)
 80035c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035cc:	f7fc ffe0 	bl	8000590 <__aeabi_dmul>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4914      	ldr	r1, [pc, #80]	@ (8003628 <DriveMotor+0xb0>)
 80035d6:	680c      	ldr	r4, [r1, #0]
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	f7fd fa88 	bl	8000af0 <__aeabi_d2uiz>
 80035e0:	4603      	mov	r3, r0
 80035e2:	6363      	str	r3, [r4, #52]	@ 0x34

	//Control Motor Direction
	if(Vin < 0){
 80035e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003618 <DriveMotor+0xa0>)
 80035e6:	edd3 7a00 	vldr	s15, [r3]
 80035ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f2:	d505      	bpl.n	8003600 <DriveMotor+0x88>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 80035f4:	2201      	movs	r2, #1
 80035f6:	2120      	movs	r1, #32
 80035f8:	480c      	ldr	r0, [pc, #48]	@ (800362c <DriveMotor+0xb4>)
 80035fa:	f003 fc73 	bl	8006ee4 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
	}
}
 80035fe:	e004      	b.n	800360a <DriveMotor+0x92>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 8003600:	2200      	movs	r2, #0
 8003602:	2120      	movs	r1, #32
 8003604:	4809      	ldr	r0, [pc, #36]	@ (800362c <DriveMotor+0xb4>)
 8003606:	f003 fc6d 	bl	8006ee4 <HAL_GPIO_WritePin>
}
 800360a:	bf00      	nop
 800360c:	bd98      	pop	{r3, r4, r7, pc}
 800360e:	bf00      	nop
 8003610:	47ae147b 	.word	0x47ae147b
 8003614:	4023fae1 	.word	0x4023fae1
 8003618:	20000a20 	.word	0x20000a20
 800361c:	40590000 	.word	0x40590000
 8003620:	40380000 	.word	0x40380000
 8003624:	20000204 	.word	0x20000204
 8003628:	20000440 	.word	0x20000440
 800362c:	48000800 	.word	0x48000800

08003630 <SoftwareLimit>:

void SoftwareLimit(){
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
	if(S_top == 1 && Vin >= -2){
 8003634:	4b26      	ldr	r3, [pc, #152]	@ (80036d0 <SoftwareLimit+0xa0>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d10e      	bne.n	800365a <SoftwareLimit+0x2a>
 800363c:	4b25      	ldr	r3, [pc, #148]	@ (80036d4 <SoftwareLimit+0xa4>)
 800363e:	edd3 7a00 	vldr	s15, [r3]
 8003642:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800364a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364e:	db04      	blt.n	800365a <SoftwareLimit+0x2a>
		Vin = 0;
 8003650:	4b20      	ldr	r3, [pc, #128]	@ (80036d4 <SoftwareLimit+0xa4>)
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	e010      	b.n	800367c <SoftwareLimit+0x4c>
	}
	else if(S_top == 1 && Vin < -2){
 800365a:	4b1d      	ldr	r3, [pc, #116]	@ (80036d0 <SoftwareLimit+0xa0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d10c      	bne.n	800367c <SoftwareLimit+0x4c>
 8003662:	4b1c      	ldr	r3, [pc, #112]	@ (80036d4 <SoftwareLimit+0xa4>)
 8003664:	edd3 7a00 	vldr	s15, [r3]
 8003668:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800366c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003674:	d502      	bpl.n	800367c <SoftwareLimit+0x4c>
		S_top = 0;
 8003676:	4b16      	ldr	r3, [pc, #88]	@ (80036d0 <SoftwareLimit+0xa0>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
	}

	if(S_down == 1 && Vin <= 2){
 800367c:	4b16      	ldr	r3, [pc, #88]	@ (80036d8 <SoftwareLimit+0xa8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d10e      	bne.n	80036a2 <SoftwareLimit+0x72>
 8003684:	4b13      	ldr	r3, [pc, #76]	@ (80036d4 <SoftwareLimit+0xa4>)
 8003686:	edd3 7a00 	vldr	s15, [r3]
 800368a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800368e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003696:	d804      	bhi.n	80036a2 <SoftwareLimit+0x72>
		Vin = 0;
 8003698:	4b0e      	ldr	r3, [pc, #56]	@ (80036d4 <SoftwareLimit+0xa4>)
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
	}
	else if(S_down == 1 && Vin > 2){
		S_down = 0;
	}

}
 80036a0:	e011      	b.n	80036c6 <SoftwareLimit+0x96>
	else if(S_down == 1 && Vin > 2){
 80036a2:	4b0d      	ldr	r3, [pc, #52]	@ (80036d8 <SoftwareLimit+0xa8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d10d      	bne.n	80036c6 <SoftwareLimit+0x96>
 80036aa:	4b0a      	ldr	r3, [pc, #40]	@ (80036d4 <SoftwareLimit+0xa4>)
 80036ac:	edd3 7a00 	vldr	s15, [r3]
 80036b0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80036b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036bc:	dc00      	bgt.n	80036c0 <SoftwareLimit+0x90>
}
 80036be:	e002      	b.n	80036c6 <SoftwareLimit+0x96>
		S_down = 0;
 80036c0:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <SoftwareLimit+0xa8>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
}
 80036c6:	bf00      	nop
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	20000adc 	.word	0x20000adc
 80036d4:	20000a20 	.word	0x20000a20
 80036d8:	20000ae0 	.word	0x20000ae0
 80036dc:	00000000 	.word	0x00000000

080036e0 <JoystickInput>:


//------------------------------------Joy---------------------------------------//

void JoystickInput(){
 80036e0:	b5b0      	push	{r4, r5, r7, lr}
 80036e2:	af00      	add	r7, sp, #0
	//Control y-axis by joy
	Vin = (float)(ADCBuffer[1]-1850)*24/2048; //0->24V
 80036e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003760 <JoystickInput+0x80>)
 80036e6:	885b      	ldrh	r3, [r3, #2]
 80036e8:	f2a3 733a 	subw	r3, r3, #1850	@ 0x73a
 80036ec:	ee07 3a90 	vmov	s15, r3
 80036f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f4:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80036f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80036fc:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8003764 <JoystickInput+0x84>
 8003700:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003704:	4b18      	ldr	r3, [pc, #96]	@ (8003768 <JoystickInput+0x88>)
 8003706:	edc3 7a00 	vstr	s15, [r3]

	//Control x-axis by joy
	x_position += ((ADCBuffer[0]-2048)*0.005);
 800370a:	4b18      	ldr	r3, [pc, #96]	@ (800376c <JoystickInput+0x8c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7fc fee6 	bl	80004e0 <__aeabi_f2d>
 8003714:	4604      	mov	r4, r0
 8003716:	460d      	mov	r5, r1
 8003718:	4b11      	ldr	r3, [pc, #68]	@ (8003760 <JoystickInput+0x80>)
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8003720:	4618      	mov	r0, r3
 8003722:	f7fc fecb 	bl	80004bc <__aeabi_i2d>
 8003726:	a30c      	add	r3, pc, #48	@ (adr r3, 8003758 <JoystickInput+0x78>)
 8003728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372c:	f7fc ff30 	bl	8000590 <__aeabi_dmul>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4620      	mov	r0, r4
 8003736:	4629      	mov	r1, r5
 8003738:	f7fc fd74 	bl	8000224 <__adddf3>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	f7fd f9f4 	bl	8000b30 <__aeabi_d2f>
 8003748:	4603      	mov	r3, r0
 800374a:	4a08      	ldr	r2, [pc, #32]	@ (800376c <JoystickInput+0x8c>)
 800374c:	6013      	str	r3, [r2, #0]
}
 800374e:	bf00      	nop
 8003750:	bdb0      	pop	{r4, r5, r7, pc}
 8003752:	bf00      	nop
 8003754:	f3af 8000 	nop.w
 8003758:	47ae147b 	.word	0x47ae147b
 800375c:	3f747ae1 	.word	0x3f747ae1
 8003760:	20000a10 	.word	0x20000a10
 8003764:	45000000 	.word	0x45000000
 8003768:	20000a20 	.word	0x20000a20
 800376c:	20000a14 	.word	0x20000a14

08003770 <button_up_down_input>:

void button_up_down_input(){
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
	//check button up
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 1){
 8003774:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003778:	4832      	ldr	r0, [pc, #200]	@ (8003844 <button_up_down_input+0xd4>)
 800377a:	f003 fb9b 	bl	8006eb4 <HAL_GPIO_ReadPin>
 800377e:	4603      	mov	r3, r0
 8003780:	2b01      	cmp	r3, #1
 8003782:	d110      	bne.n	80037a6 <button_up_down_input+0x36>
		set_manual_point = QEIdata.linearPos + 10; //stem 10 mm
 8003784:	4b30      	ldr	r3, [pc, #192]	@ (8003848 <button_up_down_input+0xd8>)
 8003786:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800378a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800378e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003792:	4b2e      	ldr	r3, [pc, #184]	@ (800384c <button_up_down_input+0xdc>)
 8003794:	edc3 7a00 	vstr	s15, [r3]
		check_up = 1;
 8003798:	4b2d      	ldr	r3, [pc, #180]	@ (8003850 <button_up_down_input+0xe0>)
 800379a:	2201      	movs	r2, #1
 800379c:	701a      	strb	r2, [r3, #0]
		B_up = 1;
 800379e:	4b2d      	ldr	r3, [pc, #180]	@ (8003854 <button_up_down_input+0xe4>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	701a      	strb	r2, [r3, #0]
 80037a4:	e002      	b.n	80037ac <button_up_down_input+0x3c>
	}
	else{
		B_up = 0;
 80037a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003854 <button_up_down_input+0xe4>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
	}
	if(QEIdata.linearPos < set_manual_point && check_up == 1){
 80037ac:	4b26      	ldr	r3, [pc, #152]	@ (8003848 <button_up_down_input+0xd8>)
 80037ae:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80037b2:	4b26      	ldr	r3, [pc, #152]	@ (800384c <button_up_down_input+0xdc>)
 80037b4:	edd3 7a00 	vldr	s15, [r3]
 80037b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c0:	d507      	bpl.n	80037d2 <button_up_down_input+0x62>
 80037c2:	4b23      	ldr	r3, [pc, #140]	@ (8003850 <button_up_down_input+0xe0>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d103      	bne.n	80037d2 <button_up_down_input+0x62>
		Vin = 4.5;
 80037ca:	4b23      	ldr	r3, [pc, #140]	@ (8003858 <button_up_down_input+0xe8>)
 80037cc:	4a23      	ldr	r2, [pc, #140]	@ (800385c <button_up_down_input+0xec>)
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e002      	b.n	80037d8 <button_up_down_input+0x68>
	}
	else{
		check_up = 0;
 80037d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003850 <button_up_down_input+0xe0>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]
	}

	//check button down
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == 1){
 80037d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80037dc:	4819      	ldr	r0, [pc, #100]	@ (8003844 <button_up_down_input+0xd4>)
 80037de:	f003 fb69 	bl	8006eb4 <HAL_GPIO_ReadPin>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d110      	bne.n	800380a <button_up_down_input+0x9a>
		set_manual_point = QEIdata.linearPos - 10;
 80037e8:	4b17      	ldr	r3, [pc, #92]	@ (8003848 <button_up_down_input+0xd8>)
 80037ea:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80037ee:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80037f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037f6:	4b15      	ldr	r3, [pc, #84]	@ (800384c <button_up_down_input+0xdc>)
 80037f8:	edc3 7a00 	vstr	s15, [r3]
		check_down = 1;
 80037fc:	4b18      	ldr	r3, [pc, #96]	@ (8003860 <button_up_down_input+0xf0>)
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]
		B_down = 1;
 8003802:	4b18      	ldr	r3, [pc, #96]	@ (8003864 <button_up_down_input+0xf4>)
 8003804:	2201      	movs	r2, #1
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	e002      	b.n	8003810 <button_up_down_input+0xa0>
	}
	else{
		B_down = 0;
 800380a:	4b16      	ldr	r3, [pc, #88]	@ (8003864 <button_up_down_input+0xf4>)
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
	}
	if(QEIdata.linearPos > set_manual_point && check_down == 1){
 8003810:	4b0d      	ldr	r3, [pc, #52]	@ (8003848 <button_up_down_input+0xd8>)
 8003812:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003816:	4b0d      	ldr	r3, [pc, #52]	@ (800384c <button_up_down_input+0xdc>)
 8003818:	edd3 7a00 	vldr	s15, [r3]
 800381c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003824:	dd07      	ble.n	8003836 <button_up_down_input+0xc6>
 8003826:	4b0e      	ldr	r3, [pc, #56]	@ (8003860 <button_up_down_input+0xf0>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d103      	bne.n	8003836 <button_up_down_input+0xc6>
		Vin = -3.5;
 800382e:	4b0a      	ldr	r3, [pc, #40]	@ (8003858 <button_up_down_input+0xe8>)
 8003830:	4a0d      	ldr	r2, [pc, #52]	@ (8003868 <button_up_down_input+0xf8>)
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	e003      	b.n	800383e <button_up_down_input+0xce>
	}
	else{
		check_down = 0;
 8003836:	4b0a      	ldr	r3, [pc, #40]	@ (8003860 <button_up_down_input+0xf0>)
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
	}
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	48000800 	.word	0x48000800
 8003848:	200009c8 	.word	0x200009c8
 800384c:	20000a18 	.word	0x20000a18
 8003850:	20000a1c 	.word	0x20000a1c
 8003854:	20000a68 	.word	0x20000a68
 8003858:	20000a20 	.word	0x20000a20
 800385c:	40900000 	.word	0x40900000
 8003860:	20000a1d 	.word	0x20000a1d
 8003864:	20000a69 	.word	0x20000a69
 8003868:	c0600000 	.word	0xc0600000

0800386c <button_reset_input>:

void button_reset_input(){
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
	//check button reset
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1 || set_Home_state == 1){
 8003870:	2104      	movs	r1, #4
 8003872:	4827      	ldr	r0, [pc, #156]	@ (8003910 <button_reset_input+0xa4>)
 8003874:	f003 fb1e 	bl	8006eb4 <HAL_GPIO_ReadPin>
 8003878:	4603      	mov	r3, r0
 800387a:	2b01      	cmp	r3, #1
 800387c:	d003      	beq.n	8003886 <button_reset_input+0x1a>
 800387e:	4b25      	ldr	r3, [pc, #148]	@ (8003914 <button_reset_input+0xa8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d13d      	bne.n	8003902 <button_reset_input+0x96>
		B_reset = 1;
 8003886:	4b24      	ldr	r3, [pc, #144]	@ (8003918 <button_reset_input+0xac>)
 8003888:	2201      	movs	r2, #1
 800388a:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 800388c:	e006      	b.n	800389c <button_reset_input+0x30>
			Vin = -3.5;
 800388e:	4b23      	ldr	r3, [pc, #140]	@ (800391c <button_reset_input+0xb0>)
 8003890:	4a23      	ldr	r2, [pc, #140]	@ (8003920 <button_reset_input+0xb4>)
 8003892:	601a      	str	r2, [r3, #0]
			//software limit
			SoftwareLimit();
 8003894:	f7ff fecc 	bl	8003630 <SoftwareLimit>
			//Drive Motor which PWM
			DriveMotor();
 8003898:	f7ff fe6e 	bl	8003578 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 800389c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038a0:	4820      	ldr	r0, [pc, #128]	@ (8003924 <button_reset_input+0xb8>)
 80038a2:	f003 fb07 	bl	8006eb4 <HAL_GPIO_ReadPin>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <button_reset_input+0x22>
		}

		Vin = 2.1;
 80038ac:	4b1b      	ldr	r3, [pc, #108]	@ (800391c <button_reset_input+0xb0>)
 80038ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003928 <button_reset_input+0xbc>)
 80038b0:	601a      	str	r2, [r3, #0]
		SoftwareLimit();
 80038b2:	f7ff febd 	bl	8003630 <SoftwareLimit>
		DriveMotor();
 80038b6:	f7ff fe5f 	bl	8003578 <DriveMotor>
		HAL_Delay(500);
 80038ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80038be:	f001 f9af 	bl	8004c20 <HAL_Delay>

		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 80038c2:	e006      	b.n	80038d2 <button_reset_input+0x66>
			Vin = -1.1;
 80038c4:	4b15      	ldr	r3, [pc, #84]	@ (800391c <button_reset_input+0xb0>)
 80038c6:	4a19      	ldr	r2, [pc, #100]	@ (800392c <button_reset_input+0xc0>)
 80038c8:	601a      	str	r2, [r3, #0]
			//software limit
			SoftwareLimit();
 80038ca:	f7ff feb1 	bl	8003630 <SoftwareLimit>
			//Drive Motor which PWM
			DriveMotor();
 80038ce:	f7ff fe53 	bl	8003578 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 80038d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038d6:	4813      	ldr	r0, [pc, #76]	@ (8003924 <button_reset_input+0xb8>)
 80038d8:	f003 faec 	bl	8006eb4 <HAL_GPIO_ReadPin>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <button_reset_input+0x58>
		}
		Vin = 0;
 80038e2:	4b0e      	ldr	r3, [pc, #56]	@ (800391c <button_reset_input+0xb0>)
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim2, 0); //set position to 0
 80038ea:	4b11      	ldr	r3, [pc, #68]	@ (8003930 <button_reset_input+0xc4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2200      	movs	r2, #0
 80038f0:	625a      	str	r2, [r3, #36]	@ 0x24

		if(set_Home_state == 1){
 80038f2:	4b08      	ldr	r3, [pc, #32]	@ (8003914 <button_reset_input+0xa8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d107      	bne.n	800390a <button_reset_input+0x9e>
			Home_state_triger = 1;
 80038fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003934 <button_reset_input+0xc8>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	601a      	str	r2, [r3, #0]
		if(set_Home_state == 1){
 8003900:	e003      	b.n	800390a <button_reset_input+0x9e>
		}
	}
	else{
		B_reset = 0;
 8003902:	4b05      	ldr	r3, [pc, #20]	@ (8003918 <button_reset_input+0xac>)
 8003904:	2200      	movs	r2, #0
 8003906:	701a      	strb	r2, [r3, #0]
	}
}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	48000c00 	.word	0x48000c00
 8003914:	20001174 	.word	0x20001174
 8003918:	20000a6a 	.word	0x20000a6a
 800391c:	20000a20 	.word	0x20000a20
 8003920:	c0600000 	.word	0xc0600000
 8003924:	48000400 	.word	0x48000400
 8003928:	40066666 	.word	0x40066666
 800392c:	bf8ccccd 	.word	0xbf8ccccd
 8003930:	20000374 	.word	0x20000374
 8003934:	20001178 	.word	0x20001178

08003938 <button_save_position>:

void button_save_position(){
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && B_save == 0){
 800393c:	2180      	movs	r1, #128	@ 0x80
 800393e:	4811      	ldr	r0, [pc, #68]	@ (8003984 <button_save_position+0x4c>)
 8003940:	f003 fab8 	bl	8006eb4 <HAL_GPIO_ReadPin>
 8003944:	4603      	mov	r3, r0
 8003946:	2b01      	cmp	r3, #1
 8003948:	d116      	bne.n	8003978 <button_save_position+0x40>
 800394a:	4b0f      	ldr	r3, [pc, #60]	@ (8003988 <button_save_position+0x50>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d112      	bne.n	8003978 <button_save_position+0x40>
		B_save = 1;
 8003952:	4b0d      	ldr	r3, [pc, #52]	@ (8003988 <button_save_position+0x50>)
 8003954:	2201      	movs	r2, #1
 8003956:	701a      	strb	r2, [r3, #0]
		count_save += 1;
 8003958:	4b0c      	ldr	r3, [pc, #48]	@ (800398c <button_save_position+0x54>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	3301      	adds	r3, #1
 800395e:	b2da      	uxtb	r2, r3
 8003960:	4b0a      	ldr	r3, [pc, #40]	@ (800398c <button_save_position+0x54>)
 8003962:	701a      	strb	r2, [r3, #0]
		shelves_pos[count_save] = QEIdata.linearPos;
 8003964:	4b09      	ldr	r3, [pc, #36]	@ (800398c <button_save_position+0x54>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	4b09      	ldr	r3, [pc, #36]	@ (8003990 <button_save_position+0x58>)
 800396c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800396e:	4909      	ldr	r1, [pc, #36]	@ (8003994 <button_save_position+0x5c>)
 8003970:	0083      	lsls	r3, r0, #2
 8003972:	440b      	add	r3, r1
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	e003      	b.n	8003980 <button_save_position+0x48>
	}
	else{
		B_save = 0;
 8003978:	4b03      	ldr	r3, [pc, #12]	@ (8003988 <button_save_position+0x50>)
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
	}
}
 800397e:	bf00      	nop
 8003980:	bf00      	nop
 8003982:	bd80      	pop	{r7, pc}
 8003984:	48000400 	.word	0x48000400
 8003988:	20000a6b 	.word	0x20000a6b
 800398c:	20000a6c 	.word	0x20000a6c
 8003990:	200009c8 	.word	0x200009c8
 8003994:	20000a70 	.word	0x20000a70

08003998 <Heartbeat>:

//-------------------------------------------------//

//-------------------------MODBUS FUNCTIONS--------------------------//
void Heartbeat(){
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16 = 22881;
 800399c:	4b04      	ldr	r3, [pc, #16]	@ (80039b0 <Heartbeat+0x18>)
 800399e:	f645 1261 	movw	r2, #22881	@ 0x5961
 80039a2:	801a      	strh	r2, [r3, #0]
}
 80039a4:	bf00      	nop
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	20000fbc 	.word	0x20000fbc

080039b4 <Routine>:

void Routine(){
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0){
 80039b8:	2110      	movs	r1, #16
 80039ba:	4833      	ldr	r0, [pc, #204]	@ (8003a88 <Routine+0xd4>)
 80039bc:	f003 fa7a 	bl	8006eb4 <HAL_GPIO_ReadPin>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d10a      	bne.n	80039dc <Routine+0x28>
 80039c6:	2120      	movs	r1, #32
 80039c8:	482f      	ldr	r0, [pc, #188]	@ (8003a88 <Routine+0xd4>)
 80039ca:	f003 fa73 	bl	8006eb4 <HAL_GPIO_ReadPin>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d103      	bne.n	80039dc <Routine+0x28>
			gripper_status = 0;
 80039d4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a8c <Routine+0xd8>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e010      	b.n	80039fe <Routine+0x4a>
		}
		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1){
 80039dc:	2110      	movs	r1, #16
 80039de:	482a      	ldr	r0, [pc, #168]	@ (8003a88 <Routine+0xd4>)
 80039e0:	f003 fa68 	bl	8006eb4 <HAL_GPIO_ReadPin>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <Routine+0x4a>
 80039ea:	2120      	movs	r1, #32
 80039ec:	4826      	ldr	r0, [pc, #152]	@ (8003a88 <Routine+0xd4>)
 80039ee:	f003 fa61 	bl	8006eb4 <HAL_GPIO_ReadPin>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d102      	bne.n	80039fe <Routine+0x4a>
			gripper_status = 1;
 80039f8:	4b24      	ldr	r3, [pc, #144]	@ (8003a8c <Routine+0xd8>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
		}
		if (gripper_status == 0 ) // not suck  in
 80039fe:	4b23      	ldr	r3, [pc, #140]	@ (8003a8c <Routine+0xd8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <Routine+0x60>
		{
			registerFrame[0x04].U16 = 0b0000;
 8003a06:	4b22      	ldr	r3, [pc, #136]	@ (8003a90 <Routine+0xdc>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	811a      	strh	r2, [r3, #8]
			registerFrame[0x04].U16 = 0b0001;
 8003a0c:	4b20      	ldr	r3, [pc, #128]	@ (8003a90 <Routine+0xdc>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	811a      	strh	r2, [r3, #8]
 8003a12:	e009      	b.n	8003a28 <Routine+0x74>
		}
		else if (gripper_status == 1) // suck in
 8003a14:	4b1d      	ldr	r3, [pc, #116]	@ (8003a8c <Routine+0xd8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d105      	bne.n	8003a28 <Routine+0x74>
		{
			registerFrame[0x04].U16 = 0b0000;
 8003a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8003a90 <Routine+0xdc>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	811a      	strh	r2, [r3, #8]
			registerFrame[0x04].U16 = 0b0010;
 8003a22:	4b1b      	ldr	r3, [pc, #108]	@ (8003a90 <Routine+0xdc>)
 8003a24:	2202      	movs	r2, #2
 8003a26:	811a      	strh	r2, [r3, #8]
		}
		registerFrame[0x10].U16 = Moving_status;
 8003a28:	4b1a      	ldr	r3, [pc, #104]	@ (8003a94 <Routine+0xe0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	4b18      	ldr	r3, [pc, #96]	@ (8003a90 <Routine+0xdc>)
 8003a30:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = QEIdata.linearPos;
 8003a32:	4b19      	ldr	r3, [pc, #100]	@ (8003a98 <Routine+0xe4>)
 8003a34:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a3c:	ee17 3a90 	vmov	r3, s15
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	4b13      	ldr	r3, [pc, #76]	@ (8003a90 <Routine+0xdc>)
 8003a44:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[0x12].U16 = QEIdata.linearVel;
 8003a46:	4b14      	ldr	r3, [pc, #80]	@ (8003a98 <Routine+0xe4>)
 8003a48:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a50:	ee17 3a90 	vmov	r3, s15
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	4b0e      	ldr	r3, [pc, #56]	@ (8003a90 <Routine+0xdc>)
 8003a58:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[0x13].U16 = QEIdata.linearAcc;
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a98 <Routine+0xe4>)
 8003a5c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a64:	ee17 3a90 	vmov	r3, s15
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	4b09      	ldr	r3, [pc, #36]	@ (8003a90 <Routine+0xdc>)
 8003a6c:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[0x40].U16 = x_position;
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a9c <Routine+0xe8>)
 8003a70:	edd3 7a00 	vldr	s15, [r3]
 8003a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a78:	ee17 3a90 	vmov	r3, s15
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	4b04      	ldr	r3, [pc, #16]	@ (8003a90 <Routine+0xdc>)
 8003a80:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
}
 8003a84:	bf00      	nop
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	48000400 	.word	0x48000400
 8003a8c:	20001158 	.word	0x20001158
 8003a90:	20000fbc 	.word	0x20000fbc
 8003a94:	200011b0 	.word	0x200011b0
 8003a98:	200009c8 	.word	0x200009c8
 8003a9c:	20000a14 	.word	0x20000a14

08003aa0 <check_vaccum_status>:

void check_vaccum_status()
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
	check_state = 1;
 8003aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae4 <check_vaccum_status+0x44>)
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]
	if(registerFrame[0x02].U16 == 0b0000){ // not suck  in
 8003aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae8 <check_vaccum_status+0x48>)
 8003aac:	889b      	ldrh	r3, [r3, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d108      	bne.n	8003ac4 <check_vaccum_status+0x24>
		vaccum_status = 0;
 8003ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8003aec <check_vaccum_status+0x4c>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003abe:	480c      	ldr	r0, [pc, #48]	@ (8003af0 <check_vaccum_status+0x50>)
 8003ac0:	f003 fa10 	bl	8006ee4 <HAL_GPIO_WritePin>
	}
	if(registerFrame[0x02].U16 == 0b0001){ //suck  in
 8003ac4:	4b08      	ldr	r3, [pc, #32]	@ (8003ae8 <check_vaccum_status+0x48>)
 8003ac6:	889b      	ldrh	r3, [r3, #4]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d108      	bne.n	8003ade <check_vaccum_status+0x3e>
		vaccum_status = 1;
 8003acc:	4b07      	ldr	r3, [pc, #28]	@ (8003aec <check_vaccum_status+0x4c>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ad8:	4805      	ldr	r0, [pc, #20]	@ (8003af0 <check_vaccum_status+0x50>)
 8003ada:	f003 fa03 	bl	8006ee4 <HAL_GPIO_WritePin>
	}
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	2000115c 	.word	0x2000115c
 8003ae8:	20000fbc 	.word	0x20000fbc
 8003aec:	20001154 	.word	0x20001154
 8003af0:	48000400 	.word	0x48000400

08003af4 <check_gripper_status>:

void check_gripper_status()
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
	check_state = 2;
 8003af8:	4b15      	ldr	r3, [pc, #84]	@ (8003b50 <check_gripper_status+0x5c>)
 8003afa:	2202      	movs	r2, #2
 8003afc:	601a      	str	r2, [r3, #0]
	if(registerFrame[0x03].U16 == 0b0000) //backward ,not on
 8003afe:	4b15      	ldr	r3, [pc, #84]	@ (8003b54 <check_gripper_status+0x60>)
 8003b00:	88db      	ldrh	r3, [r3, #6]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10e      	bne.n	8003b24 <check_gripper_status+0x30>
	{
		gripper_status = 0;
 8003b06:	4b14      	ldr	r3, [pc, #80]	@ (8003b58 <check_gripper_status+0x64>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b12:	4812      	ldr	r0, [pc, #72]	@ (8003b5c <check_gripper_status+0x68>)
 8003b14:	f003 f9e6 	bl	8006ee4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b1e:	4810      	ldr	r0, [pc, #64]	@ (8003b60 <check_gripper_status+0x6c>)
 8003b20:	f003 f9e0 	bl	8006ee4 <HAL_GPIO_WritePin>

	}
	if(registerFrame[0x03].U16 == 0b0001) //Forward
 8003b24:	4b0b      	ldr	r3, [pc, #44]	@ (8003b54 <check_gripper_status+0x60>)
 8003b26:	88db      	ldrh	r3, [r3, #6]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d10e      	bne.n	8003b4a <check_gripper_status+0x56>
	{
		gripper_status = 1;
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b58 <check_gripper_status+0x64>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8003b32:	2201      	movs	r2, #1
 8003b34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b38:	4808      	ldr	r0, [pc, #32]	@ (8003b5c <check_gripper_status+0x68>)
 8003b3a:	f003 f9d3 	bl	8006ee4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b44:	4806      	ldr	r0, [pc, #24]	@ (8003b60 <check_gripper_status+0x6c>)
 8003b46:	f003 f9cd 	bl	8006ee4 <HAL_GPIO_WritePin>
	}
}
 8003b4a:	bf00      	nop
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	2000115c 	.word	0x2000115c
 8003b54:	20000fbc 	.word	0x20000fbc
 8003b58:	20001158 	.word	0x20001158
 8003b5c:	48000400 	.word	0x48000400
 8003b60:	48000800 	.word	0x48000800

08003b64 <set_shelf>:

void set_shelf()
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
	check_state = 3;
 8003b68:	4b3f      	ldr	r3, [pc, #252]	@ (8003c68 <set_shelf+0x104>)
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	601a      	str	r2, [r3, #0]
	if(registerFrame[0x01].U16 ==  0b0001)
 8003b6e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c6c <set_shelf+0x108>)
 8003b70:	885b      	ldrh	r3, [r3, #2]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d104      	bne.n	8003b80 <set_shelf+0x1c>
	{
		set_shelf_state = 1;
 8003b76:	4b3e      	ldr	r3, [pc, #248]	@ (8003c70 <set_shelf+0x10c>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
		LED_Manual();
 8003b7c:	f000 fc6c 	bl	8004458 <LED_Manual>
	}
	if (set_shelf_state == 1 && Enter_click ==0)
 8003b80:	4b3b      	ldr	r3, [pc, #236]	@ (8003c70 <set_shelf+0x10c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d11b      	bne.n	8003bc0 <set_shelf+0x5c>
 8003b88:	4b3a      	ldr	r3, [pc, #232]	@ (8003c74 <set_shelf+0x110>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d117      	bne.n	8003bc0 <set_shelf+0x5c>
	{
			registerFrame[0x01].U16 = 0b0000;
 8003b90:	4b36      	ldr	r3, [pc, #216]	@ (8003c6c <set_shelf+0x108>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	805a      	strh	r2, [r3, #2]
			Moving_status = 1;
 8003b96:	4b38      	ldr	r3, [pc, #224]	@ (8003c78 <set_shelf+0x114>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
			registerFrame[0x10].U16 = Moving_status; // set shelve
 8003b9c:	4b36      	ldr	r3, [pc, #216]	@ (8003c78 <set_shelf+0x114>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	4b32      	ldr	r3, [pc, #200]	@ (8003c6c <set_shelf+0x108>)
 8003ba4:	841a      	strh	r2, [r3, #32]
			mode = 2; //manual
 8003ba6:	4b35      	ldr	r3, [pc, #212]	@ (8003c7c <set_shelf+0x118>)
 8003ba8:	2202      	movs	r2, #2
 8003baa:	701a      	strb	r2, [r3, #0]
			if(count_save == 5){
 8003bac:	4b34      	ldr	r3, [pc, #208]	@ (8003c80 <set_shelf+0x11c>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b05      	cmp	r3, #5
 8003bb2:	d105      	bne.n	8003bc0 <set_shelf+0x5c>
				Enter_click = 1;
 8003bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8003c74 <set_shelf+0x110>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
				count_save = 0;
 8003bba:	4b31      	ldr	r3, [pc, #196]	@ (8003c80 <set_shelf+0x11c>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	701a      	strb	r2, [r3, #0]
			}
	}
	if (set_shelf_state == 1 && Enter_click == 1)
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8003c70 <set_shelf+0x10c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d14d      	bne.n	8003c64 <set_shelf+0x100>
 8003bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003c74 <set_shelf+0x110>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d149      	bne.n	8003c64 <set_shelf+0x100>
	{
		registerFrame[0x01].U16 = 0b0000;
 8003bd0:	4b26      	ldr	r3, [pc, #152]	@ (8003c6c <set_shelf+0x108>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	805a      	strh	r2, [r3, #2]
		registerFrame[0x23].U16 = shelves_pos[1];
 8003bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8003c84 <set_shelf+0x120>)
 8003bd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003be0:	ee17 3a90 	vmov	r3, s15
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	4b21      	ldr	r3, [pc, #132]	@ (8003c6c <set_shelf+0x108>)
 8003be8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		registerFrame[0x24].U16 = shelves_pos[2];
 8003bec:	4b25      	ldr	r3, [pc, #148]	@ (8003c84 <set_shelf+0x120>)
 8003bee:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bf6:	ee17 3a90 	vmov	r3, s15
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c6c <set_shelf+0x108>)
 8003bfe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		registerFrame[0x25].U16 = shelves_pos[3];
 8003c02:	4b20      	ldr	r3, [pc, #128]	@ (8003c84 <set_shelf+0x120>)
 8003c04:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c0c:	ee17 3a90 	vmov	r3, s15
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	4b16      	ldr	r3, [pc, #88]	@ (8003c6c <set_shelf+0x108>)
 8003c14:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		registerFrame[0x26].U16 = shelves_pos[4];
 8003c18:	4b1a      	ldr	r3, [pc, #104]	@ (8003c84 <set_shelf+0x120>)
 8003c1a:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c22:	ee17 3a90 	vmov	r3, s15
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	4b10      	ldr	r3, [pc, #64]	@ (8003c6c <set_shelf+0x108>)
 8003c2a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		registerFrame[0x27].U16 = shelves_pos[5];
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <set_shelf+0x120>)
 8003c30:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c38:	ee17 3a90 	vmov	r3, s15
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c6c <set_shelf+0x108>)
 8003c40:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
		Moving_status = 0;
 8003c44:	4b0c      	ldr	r3, [pc, #48]	@ (8003c78 <set_shelf+0x114>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
		registerFrame[0x10].U16 = Moving_status;
 8003c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c78 <set_shelf+0x114>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	4b06      	ldr	r3, [pc, #24]	@ (8003c6c <set_shelf+0x108>)
 8003c52:	841a      	strh	r2, [r3, #32]
		set_shelf_state = 0;
 8003c54:	4b06      	ldr	r3, [pc, #24]	@ (8003c70 <set_shelf+0x10c>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
		Enter_click = 0;
 8003c5a:	4b06      	ldr	r3, [pc, #24]	@ (8003c74 <set_shelf+0x110>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
		LED_Ready();
 8003c60:	f000 fbae 	bl	80043c0 <LED_Ready>
	}

}
 8003c64:	bf00      	nop
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	2000115c 	.word	0x2000115c
 8003c6c:	20000fbc 	.word	0x20000fbc
 8003c70:	20001164 	.word	0x20001164
 8003c74:	20001160 	.word	0x20001160
 8003c78:	200011b0 	.word	0x200011b0
 8003c7c:	20000200 	.word	0x20000200
 8003c80:	20000a6c 	.word	0x20000a6c
 8003c84:	20000a70 	.word	0x20000a70

08003c88 <Pointmode>:

void Pointmode()
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 ==  0b1000) // Run Point Mode
 8003c8c:	4b36      	ldr	r3, [pc, #216]	@ (8003d68 <Pointmode+0xe0>)
 8003c8e:	885b      	ldrh	r3, [r3, #2]
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d116      	bne.n	8003cc2 <Pointmode+0x3a>
		{
			 set_point_state = 1;
 8003c94:	4b35      	ldr	r3, [pc, #212]	@ (8003d6c <Pointmode+0xe4>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
			 set_point_modbus = (registerFrame[0x30].U16) / 10;
 8003c9a:	4b33      	ldr	r3, [pc, #204]	@ (8003d68 <Pointmode+0xe0>)
 8003c9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003ca0:	4a33      	ldr	r2, [pc, #204]	@ (8003d70 <Pointmode+0xe8>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	08db      	lsrs	r3, r3, #3
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	ee07 3a90 	vmov	s15, r3
 8003cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cb2:	4b30      	ldr	r3, [pc, #192]	@ (8003d74 <Pointmode+0xec>)
 8003cb4:	edc3 7a00 	vstr	s15, [r3]
			 registerFrame[0x01].U16 = 0b0000;
 8003cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8003d68 <Pointmode+0xe0>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	805a      	strh	r2, [r3, #2]
			 LED_Auto();
 8003cbe:	f000 fba5 	bl	800440c <LED_Auto>
		}

	if (point_state_triger == 0 && set_point_state == 1)
 8003cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d78 <Pointmode+0xf0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d12e      	bne.n	8003d28 <Pointmode+0xa0>
 8003cca:	4b28      	ldr	r3, [pc, #160]	@ (8003d6c <Pointmode+0xe4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d12a      	bne.n	8003d28 <Pointmode+0xa0>
		{
				Moving_status = 16;
 8003cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8003d7c <Pointmode+0xf4>)
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	601a      	str	r2, [r3, #0]
				registerFrame[0x10].U16 = Moving_status;
 8003cd8:	4b28      	ldr	r3, [pc, #160]	@ (8003d7c <Pointmode+0xf4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	4b22      	ldr	r3, [pc, #136]	@ (8003d68 <Pointmode+0xe0>)
 8003ce0:	841a      	strh	r2, [r3, #32]
				mode = 1;
 8003ce2:	4b27      	ldr	r3, [pc, #156]	@ (8003d80 <Pointmode+0xf8>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	701a      	strb	r2, [r3, #0]
				setPosition = set_point_modbus;
 8003ce8:	4b22      	ldr	r3, [pc, #136]	@ (8003d74 <Pointmode+0xec>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a25      	ldr	r2, [pc, #148]	@ (8003d84 <Pointmode+0xfc>)
 8003cee:	6013      	str	r3, [r2, #0]
				if(fabs(setPosition-QEIdata.linearPos) < 0.05){
 8003cf0:	4b24      	ldr	r3, [pc, #144]	@ (8003d84 <Pointmode+0xfc>)
 8003cf2:	ed93 7a00 	vldr	s14, [r3]
 8003cf6:	4b24      	ldr	r3, [pc, #144]	@ (8003d88 <Pointmode+0x100>)
 8003cf8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d00:	eef0 7ae7 	vabs.f32	s15, s15
 8003d04:	ee17 0a90 	vmov	r0, s15
 8003d08:	f7fc fbea 	bl	80004e0 <__aeabi_f2d>
 8003d0c:	a314      	add	r3, pc, #80	@ (adr r3, 8003d60 <Pointmode+0xd8>)
 8003d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d12:	f7fc feaf 	bl	8000a74 <__aeabi_dcmplt>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <Pointmode+0xa0>
					mode = 3;
 8003d1c:	4b18      	ldr	r3, [pc, #96]	@ (8003d80 <Pointmode+0xf8>)
 8003d1e:	2203      	movs	r2, #3
 8003d20:	701a      	strb	r2, [r3, #0]
					point_state_triger = 1;
 8003d22:	4b15      	ldr	r3, [pc, #84]	@ (8003d78 <Pointmode+0xf0>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
				}
		}
	if (point_state_triger == 1 && set_point_state == 1)
 8003d28:	4b13      	ldr	r3, [pc, #76]	@ (8003d78 <Pointmode+0xf0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d113      	bne.n	8003d58 <Pointmode+0xd0>
 8003d30:	4b0e      	ldr	r3, [pc, #56]	@ (8003d6c <Pointmode+0xe4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d10f      	bne.n	8003d58 <Pointmode+0xd0>
		{
			Moving_status = 0;
 8003d38:	4b10      	ldr	r3, [pc, #64]	@ (8003d7c <Pointmode+0xf4>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
			registerFrame[0x10].U16 = Moving_status;
 8003d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d7c <Pointmode+0xf4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	4b08      	ldr	r3, [pc, #32]	@ (8003d68 <Pointmode+0xe0>)
 8003d46:	841a      	strh	r2, [r3, #32]
			set_point_state = 0;
 8003d48:	4b08      	ldr	r3, [pc, #32]	@ (8003d6c <Pointmode+0xe4>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
			point_state_triger = 0;
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d78 <Pointmode+0xf0>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
			LED_Ready();
 8003d54:	f000 fb34 	bl	80043c0 <LED_Ready>
		}
}
 8003d58:	bf00      	nop
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	f3af 8000 	nop.w
 8003d60:	9999999a 	.word	0x9999999a
 8003d64:	3fa99999 	.word	0x3fa99999
 8003d68:	20000fbc 	.word	0x20000fbc
 8003d6c:	20001170 	.word	0x20001170
 8003d70:	cccccccd 	.word	0xcccccccd
 8003d74:	20001168 	.word	0x20001168
 8003d78:	2000116c 	.word	0x2000116c
 8003d7c:	200011b0 	.word	0x200011b0
 8003d80:	20000200 	.word	0x20000200
 8003d84:	20000ad0 	.word	0x20000ad0
 8003d88:	200009c8 	.word	0x200009c8

08003d8c <Home>:
void Home()
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 ==  0b0010) // Run Home Mode
 8003d90:	4b1c      	ldr	r3, [pc, #112]	@ (8003e04 <Home+0x78>)
 8003d92:	885b      	ldrh	r3, [r3, #2]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d107      	bne.n	8003da8 <Home+0x1c>
	{
		set_Home_state = 1;
 8003d98:	4b1b      	ldr	r3, [pc, #108]	@ (8003e08 <Home+0x7c>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
		registerFrame[0x01].U16 = 0b0000;
 8003d9e:	4b19      	ldr	r3, [pc, #100]	@ (8003e04 <Home+0x78>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	805a      	strh	r2, [r3, #2]
		LED_Homing();
 8003da4:	f000 fae6 	bl	8004374 <LED_Homing>
	}
	if(Home_state_triger == 0 && set_Home_state == 1)
 8003da8:	4b18      	ldr	r3, [pc, #96]	@ (8003e0c <Home+0x80>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10e      	bne.n	8003dce <Home+0x42>
 8003db0:	4b15      	ldr	r3, [pc, #84]	@ (8003e08 <Home+0x7c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d10a      	bne.n	8003dce <Home+0x42>
	{
		Moving_status = 2;
 8003db8:	4b15      	ldr	r3, [pc, #84]	@ (8003e10 <Home+0x84>)
 8003dba:	2202      	movs	r2, #2
 8003dbc:	601a      	str	r2, [r3, #0]
		registerFrame[0x10].U16 = Moving_status;
 8003dbe:	4b14      	ldr	r3, [pc, #80]	@ (8003e10 <Home+0x84>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003e04 <Home+0x78>)
 8003dc6:	841a      	strh	r2, [r3, #32]
		//set home
		mode = 2;
 8003dc8:	4b12      	ldr	r3, [pc, #72]	@ (8003e14 <Home+0x88>)
 8003dca:	2202      	movs	r2, #2
 8003dcc:	701a      	strb	r2, [r3, #0]
	}
	if(Home_state_triger == 1 && set_Home_state == 1)
 8003dce:	4b0f      	ldr	r3, [pc, #60]	@ (8003e0c <Home+0x80>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d113      	bne.n	8003dfe <Home+0x72>
 8003dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003e08 <Home+0x7c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d10f      	bne.n	8003dfe <Home+0x72>
	{
		Moving_status = 0;
 8003dde:	4b0c      	ldr	r3, [pc, #48]	@ (8003e10 <Home+0x84>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
		registerFrame[0x10].U16 = Moving_status;
 8003de4:	4b0a      	ldr	r3, [pc, #40]	@ (8003e10 <Home+0x84>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <Home+0x78>)
 8003dec:	841a      	strh	r2, [r3, #32]
		set_Home_state = 0;
 8003dee:	4b06      	ldr	r3, [pc, #24]	@ (8003e08 <Home+0x7c>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
		Home_state_triger = 0;
 8003df4:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <Home+0x80>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
		LED_Ready();
 8003dfa:	f000 fae1 	bl	80043c0 <LED_Ready>
	}
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000fbc 	.word	0x20000fbc
 8003e08:	20001174 	.word	0x20001174
 8003e0c:	20001178 	.word	0x20001178
 8003e10:	200011b0 	.word	0x200011b0
 8003e14:	20000200 	.word	0x20000200

08003e18 <Run_jog>:
void Run_jog()
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 ==  0b0100) // Run Jog Mode
 8003e1c:	4bbe      	ldr	r3, [pc, #760]	@ (8004118 <Run_jog+0x300>)
 8003e1e:	885b      	ldrh	r3, [r3, #2]
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	f040 8136 	bne.w	8004092 <Run_jog+0x27a>
	{
		set_jog_state = 1;
 8003e26:	4bbd      	ldr	r3, [pc, #756]	@ (800411c <Run_jog+0x304>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
		Jog_oneloop_trigger = 0;
 8003e2c:	4bbc      	ldr	r3, [pc, #752]	@ (8004120 <Run_jog+0x308>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
		Jog_order = 0;
 8003e32:	4bbc      	ldr	r3, [pc, #752]	@ (8004124 <Run_jog+0x30c>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]

		PickOrder = registerFrame[0x21].U16;
 8003e38:	4bb7      	ldr	r3, [pc, #732]	@ (8004118 <Run_jog+0x300>)
 8003e3a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4bb9      	ldr	r3, [pc, #740]	@ (8004128 <Run_jog+0x310>)
 8003e42:	601a      	str	r2, [r3, #0]
		PlaceOrder = registerFrame[0x22].U16;
 8003e44:	4bb4      	ldr	r3, [pc, #720]	@ (8004118 <Run_jog+0x300>)
 8003e46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4bb7      	ldr	r3, [pc, #732]	@ (800412c <Run_jog+0x314>)
 8003e4e:	601a      	str	r2, [r3, #0]

		PickArray[0] = (PickOrder - (PickOrder % 10000)) / 10000;
 8003e50:	4bb5      	ldr	r3, [pc, #724]	@ (8004128 <Run_jog+0x310>)
 8003e52:	6819      	ldr	r1, [r3, #0]
 8003e54:	4bb4      	ldr	r3, [pc, #720]	@ (8004128 <Run_jog+0x310>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4bb5      	ldr	r3, [pc, #724]	@ (8004130 <Run_jog+0x318>)
 8003e5a:	fb83 0302 	smull	r0, r3, r3, r2
 8003e5e:	1318      	asrs	r0, r3, #12
 8003e60:	17d3      	asrs	r3, r2, #31
 8003e62:	1ac3      	subs	r3, r0, r3
 8003e64:	f242 7010 	movw	r0, #10000	@ 0x2710
 8003e68:	fb00 f303 	mul.w	r3, r0, r3
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	1acb      	subs	r3, r1, r3
 8003e70:	4aaf      	ldr	r2, [pc, #700]	@ (8004130 <Run_jog+0x318>)
 8003e72:	fb82 1203 	smull	r1, r2, r2, r3
 8003e76:	1312      	asrs	r2, r2, #12
 8003e78:	17db      	asrs	r3, r3, #31
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	4aad      	ldr	r2, [pc, #692]	@ (8004134 <Run_jog+0x31c>)
 8003e7e:	6013      	str	r3, [r2, #0]
		PickArray[1] = ((PickOrder % 10000) - (PickOrder % 1000)) / 1000;
 8003e80:	4ba9      	ldr	r3, [pc, #676]	@ (8004128 <Run_jog+0x310>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4aaa      	ldr	r2, [pc, #680]	@ (8004130 <Run_jog+0x318>)
 8003e86:	fb82 1203 	smull	r1, r2, r2, r3
 8003e8a:	1311      	asrs	r1, r2, #12
 8003e8c:	17da      	asrs	r2, r3, #31
 8003e8e:	1a8a      	subs	r2, r1, r2
 8003e90:	f242 7110 	movw	r1, #10000	@ 0x2710
 8003e94:	fb01 f202 	mul.w	r2, r1, r2
 8003e98:	1a9a      	subs	r2, r3, r2
 8003e9a:	4ba3      	ldr	r3, [pc, #652]	@ (8004128 <Run_jog+0x310>)
 8003e9c:	6819      	ldr	r1, [r3, #0]
 8003e9e:	4ba6      	ldr	r3, [pc, #664]	@ (8004138 <Run_jog+0x320>)
 8003ea0:	fb83 0301 	smull	r0, r3, r3, r1
 8003ea4:	1198      	asrs	r0, r3, #6
 8003ea6:	17cb      	asrs	r3, r1, #31
 8003ea8:	1ac3      	subs	r3, r0, r3
 8003eaa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003eae:	fb00 f303 	mul.w	r3, r0, r3
 8003eb2:	1acb      	subs	r3, r1, r3
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	4aa0      	ldr	r2, [pc, #640]	@ (8004138 <Run_jog+0x320>)
 8003eb8:	fb82 1203 	smull	r1, r2, r2, r3
 8003ebc:	1192      	asrs	r2, r2, #6
 8003ebe:	17db      	asrs	r3, r3, #31
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	4a9c      	ldr	r2, [pc, #624]	@ (8004134 <Run_jog+0x31c>)
 8003ec4:	6053      	str	r3, [r2, #4]
		PickArray[2] = ((PickOrder % 1000) - (PickOrder % 100)) / 100;
 8003ec6:	4b98      	ldr	r3, [pc, #608]	@ (8004128 <Run_jog+0x310>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a9b      	ldr	r2, [pc, #620]	@ (8004138 <Run_jog+0x320>)
 8003ecc:	fb82 1203 	smull	r1, r2, r2, r3
 8003ed0:	1191      	asrs	r1, r2, #6
 8003ed2:	17da      	asrs	r2, r3, #31
 8003ed4:	1a8a      	subs	r2, r1, r2
 8003ed6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003eda:	fb01 f202 	mul.w	r2, r1, r2
 8003ede:	1a9a      	subs	r2, r3, r2
 8003ee0:	4b91      	ldr	r3, [pc, #580]	@ (8004128 <Run_jog+0x310>)
 8003ee2:	6819      	ldr	r1, [r3, #0]
 8003ee4:	4b95      	ldr	r3, [pc, #596]	@ (800413c <Run_jog+0x324>)
 8003ee6:	fb83 0301 	smull	r0, r3, r3, r1
 8003eea:	1158      	asrs	r0, r3, #5
 8003eec:	17cb      	asrs	r3, r1, #31
 8003eee:	1ac3      	subs	r3, r0, r3
 8003ef0:	2064      	movs	r0, #100	@ 0x64
 8003ef2:	fb00 f303 	mul.w	r3, r0, r3
 8003ef6:	1acb      	subs	r3, r1, r3
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	4a90      	ldr	r2, [pc, #576]	@ (800413c <Run_jog+0x324>)
 8003efc:	fb82 1203 	smull	r1, r2, r2, r3
 8003f00:	1152      	asrs	r2, r2, #5
 8003f02:	17db      	asrs	r3, r3, #31
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	4a8b      	ldr	r2, [pc, #556]	@ (8004134 <Run_jog+0x31c>)
 8003f08:	6093      	str	r3, [r2, #8]
		PickArray[3] = ((PickOrder % 100) - (PickOrder % 10)) / 10;
 8003f0a:	4b87      	ldr	r3, [pc, #540]	@ (8004128 <Run_jog+0x310>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a8b      	ldr	r2, [pc, #556]	@ (800413c <Run_jog+0x324>)
 8003f10:	fb82 1203 	smull	r1, r2, r2, r3
 8003f14:	1151      	asrs	r1, r2, #5
 8003f16:	17da      	asrs	r2, r3, #31
 8003f18:	1a89      	subs	r1, r1, r2
 8003f1a:	2264      	movs	r2, #100	@ 0x64
 8003f1c:	fb01 f202 	mul.w	r2, r1, r2
 8003f20:	1a99      	subs	r1, r3, r2
 8003f22:	4b81      	ldr	r3, [pc, #516]	@ (8004128 <Run_jog+0x310>)
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	4b86      	ldr	r3, [pc, #536]	@ (8004140 <Run_jog+0x328>)
 8003f28:	fb83 2300 	smull	r2, r3, r3, r0
 8003f2c:	109a      	asrs	r2, r3, #2
 8003f2e:	17c3      	asrs	r3, r0, #31
 8003f30:	1ad2      	subs	r2, r2, r3
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	1ac2      	subs	r2, r0, r3
 8003f3c:	1a8b      	subs	r3, r1, r2
 8003f3e:	4a80      	ldr	r2, [pc, #512]	@ (8004140 <Run_jog+0x328>)
 8003f40:	fb82 1203 	smull	r1, r2, r2, r3
 8003f44:	1092      	asrs	r2, r2, #2
 8003f46:	17db      	asrs	r3, r3, #31
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	4a7a      	ldr	r2, [pc, #488]	@ (8004134 <Run_jog+0x31c>)
 8003f4c:	60d3      	str	r3, [r2, #12]
		PickArray[4] = PickOrder % 10;
 8003f4e:	4b76      	ldr	r3, [pc, #472]	@ (8004128 <Run_jog+0x310>)
 8003f50:	6819      	ldr	r1, [r3, #0]
 8003f52:	4b7b      	ldr	r3, [pc, #492]	@ (8004140 <Run_jog+0x328>)
 8003f54:	fb83 2301 	smull	r2, r3, r3, r1
 8003f58:	109a      	asrs	r2, r3, #2
 8003f5a:	17cb      	asrs	r3, r1, #31
 8003f5c:	1ad2      	subs	r2, r2, r3
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	1aca      	subs	r2, r1, r3
 8003f68:	4b72      	ldr	r3, [pc, #456]	@ (8004134 <Run_jog+0x31c>)
 8003f6a:	611a      	str	r2, [r3, #16]

		PlaceArray[0] = (PlaceOrder - (PlaceOrder % 10000)) / 10000;
 8003f6c:	4b6f      	ldr	r3, [pc, #444]	@ (800412c <Run_jog+0x314>)
 8003f6e:	6819      	ldr	r1, [r3, #0]
 8003f70:	4b6e      	ldr	r3, [pc, #440]	@ (800412c <Run_jog+0x314>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4b6e      	ldr	r3, [pc, #440]	@ (8004130 <Run_jog+0x318>)
 8003f76:	fb83 0302 	smull	r0, r3, r3, r2
 8003f7a:	1318      	asrs	r0, r3, #12
 8003f7c:	17d3      	asrs	r3, r2, #31
 8003f7e:	1ac3      	subs	r3, r0, r3
 8003f80:	f242 7010 	movw	r0, #10000	@ 0x2710
 8003f84:	fb00 f303 	mul.w	r3, r0, r3
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	1acb      	subs	r3, r1, r3
 8003f8c:	4a68      	ldr	r2, [pc, #416]	@ (8004130 <Run_jog+0x318>)
 8003f8e:	fb82 1203 	smull	r1, r2, r2, r3
 8003f92:	1312      	asrs	r2, r2, #12
 8003f94:	17db      	asrs	r3, r3, #31
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	4a6a      	ldr	r2, [pc, #424]	@ (8004144 <Run_jog+0x32c>)
 8003f9a:	6013      	str	r3, [r2, #0]
		PlaceArray[1] = ((PlaceOrder % 10000) - (PlaceOrder % 1000)) / 1000;
 8003f9c:	4b63      	ldr	r3, [pc, #396]	@ (800412c <Run_jog+0x314>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a63      	ldr	r2, [pc, #396]	@ (8004130 <Run_jog+0x318>)
 8003fa2:	fb82 1203 	smull	r1, r2, r2, r3
 8003fa6:	1311      	asrs	r1, r2, #12
 8003fa8:	17da      	asrs	r2, r3, #31
 8003faa:	1a8a      	subs	r2, r1, r2
 8003fac:	f242 7110 	movw	r1, #10000	@ 0x2710
 8003fb0:	fb01 f202 	mul.w	r2, r1, r2
 8003fb4:	1a9a      	subs	r2, r3, r2
 8003fb6:	4b5d      	ldr	r3, [pc, #372]	@ (800412c <Run_jog+0x314>)
 8003fb8:	6819      	ldr	r1, [r3, #0]
 8003fba:	4b5f      	ldr	r3, [pc, #380]	@ (8004138 <Run_jog+0x320>)
 8003fbc:	fb83 0301 	smull	r0, r3, r3, r1
 8003fc0:	1198      	asrs	r0, r3, #6
 8003fc2:	17cb      	asrs	r3, r1, #31
 8003fc4:	1ac3      	subs	r3, r0, r3
 8003fc6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003fca:	fb00 f303 	mul.w	r3, r0, r3
 8003fce:	1acb      	subs	r3, r1, r3
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	4a59      	ldr	r2, [pc, #356]	@ (8004138 <Run_jog+0x320>)
 8003fd4:	fb82 1203 	smull	r1, r2, r2, r3
 8003fd8:	1192      	asrs	r2, r2, #6
 8003fda:	17db      	asrs	r3, r3, #31
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	4a59      	ldr	r2, [pc, #356]	@ (8004144 <Run_jog+0x32c>)
 8003fe0:	6053      	str	r3, [r2, #4]
		PlaceArray[2] = ((PlaceOrder % 1000) - (PlaceOrder % 100)) / 100;
 8003fe2:	4b52      	ldr	r3, [pc, #328]	@ (800412c <Run_jog+0x314>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a54      	ldr	r2, [pc, #336]	@ (8004138 <Run_jog+0x320>)
 8003fe8:	fb82 1203 	smull	r1, r2, r2, r3
 8003fec:	1191      	asrs	r1, r2, #6
 8003fee:	17da      	asrs	r2, r3, #31
 8003ff0:	1a8a      	subs	r2, r1, r2
 8003ff2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003ff6:	fb01 f202 	mul.w	r2, r1, r2
 8003ffa:	1a9a      	subs	r2, r3, r2
 8003ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800412c <Run_jog+0x314>)
 8003ffe:	6819      	ldr	r1, [r3, #0]
 8004000:	4b4e      	ldr	r3, [pc, #312]	@ (800413c <Run_jog+0x324>)
 8004002:	fb83 0301 	smull	r0, r3, r3, r1
 8004006:	1158      	asrs	r0, r3, #5
 8004008:	17cb      	asrs	r3, r1, #31
 800400a:	1ac3      	subs	r3, r0, r3
 800400c:	2064      	movs	r0, #100	@ 0x64
 800400e:	fb00 f303 	mul.w	r3, r0, r3
 8004012:	1acb      	subs	r3, r1, r3
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	4a49      	ldr	r2, [pc, #292]	@ (800413c <Run_jog+0x324>)
 8004018:	fb82 1203 	smull	r1, r2, r2, r3
 800401c:	1152      	asrs	r2, r2, #5
 800401e:	17db      	asrs	r3, r3, #31
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	4a48      	ldr	r2, [pc, #288]	@ (8004144 <Run_jog+0x32c>)
 8004024:	6093      	str	r3, [r2, #8]
		PlaceArray[3] = ((PlaceOrder % 100) - (PlaceOrder % 10)) / 10;
 8004026:	4b41      	ldr	r3, [pc, #260]	@ (800412c <Run_jog+0x314>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a44      	ldr	r2, [pc, #272]	@ (800413c <Run_jog+0x324>)
 800402c:	fb82 1203 	smull	r1, r2, r2, r3
 8004030:	1151      	asrs	r1, r2, #5
 8004032:	17da      	asrs	r2, r3, #31
 8004034:	1a89      	subs	r1, r1, r2
 8004036:	2264      	movs	r2, #100	@ 0x64
 8004038:	fb01 f202 	mul.w	r2, r1, r2
 800403c:	1a99      	subs	r1, r3, r2
 800403e:	4b3b      	ldr	r3, [pc, #236]	@ (800412c <Run_jog+0x314>)
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	4b3f      	ldr	r3, [pc, #252]	@ (8004140 <Run_jog+0x328>)
 8004044:	fb83 2300 	smull	r2, r3, r3, r0
 8004048:	109a      	asrs	r2, r3, #2
 800404a:	17c3      	asrs	r3, r0, #31
 800404c:	1ad2      	subs	r2, r2, r3
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	1ac2      	subs	r2, r0, r3
 8004058:	1a8b      	subs	r3, r1, r2
 800405a:	4a39      	ldr	r2, [pc, #228]	@ (8004140 <Run_jog+0x328>)
 800405c:	fb82 1203 	smull	r1, r2, r2, r3
 8004060:	1092      	asrs	r2, r2, #2
 8004062:	17db      	asrs	r3, r3, #31
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	4a37      	ldr	r2, [pc, #220]	@ (8004144 <Run_jog+0x32c>)
 8004068:	60d3      	str	r3, [r2, #12]
		PlaceArray[4] = PlaceOrder % 10;
 800406a:	4b30      	ldr	r3, [pc, #192]	@ (800412c <Run_jog+0x314>)
 800406c:	6819      	ldr	r1, [r3, #0]
 800406e:	4b34      	ldr	r3, [pc, #208]	@ (8004140 <Run_jog+0x328>)
 8004070:	fb83 2301 	smull	r2, r3, r3, r1
 8004074:	109a      	asrs	r2, r3, #2
 8004076:	17cb      	asrs	r3, r1, #31
 8004078:	1ad2      	subs	r2, r2, r3
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	1aca      	subs	r2, r1, r3
 8004084:	4b2f      	ldr	r3, [pc, #188]	@ (8004144 <Run_jog+0x32c>)
 8004086:	611a      	str	r2, [r3, #16]

		registerFrame[0x01].U16 = 0b0000;
 8004088:	4b23      	ldr	r3, [pc, #140]	@ (8004118 <Run_jog+0x300>)
 800408a:	2200      	movs	r2, #0
 800408c:	805a      	strh	r2, [r3, #2]
		LED_Auto();
 800408e:	f000 f9bd 	bl	800440c <LED_Auto>

	}
	if (Jog_state_triger == 0 && set_jog_state == 1){
 8004092:	4b2d      	ldr	r3, [pc, #180]	@ (8004148 <Run_jog+0x330>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f040 810a 	bne.w	80042b0 <Run_jog+0x498>
 800409c:	4b1f      	ldr	r3, [pc, #124]	@ (800411c <Run_jog+0x304>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	f040 8105 	bne.w	80042b0 <Run_jog+0x498>

		// run 5 loop of pick and place

		if(Jog_oneloop_trigger == 0){ //Go pick
 80040a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004120 <Run_jog+0x308>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f040 808d 	bne.w	80041ca <Run_jog+0x3b2>
			Moving_status = 4; //Go pick
 80040b0:	4b26      	ldr	r3, [pc, #152]	@ (800414c <Run_jog+0x334>)
 80040b2:	2204      	movs	r2, #4
 80040b4:	601a      	str	r2, [r3, #0]
			registerFrame[0x10].U16 =  Moving_status;
 80040b6:	4b25      	ldr	r3, [pc, #148]	@ (800414c <Run_jog+0x334>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	4b16      	ldr	r3, [pc, #88]	@ (8004118 <Run_jog+0x300>)
 80040be:	841a      	strh	r2, [r3, #32]

			mode = 1;
 80040c0:	4b23      	ldr	r3, [pc, #140]	@ (8004150 <Run_jog+0x338>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]
			setPosition = shelves_pos[PickArray[Jog_order]]; //Update set point
 80040c6:	4b17      	ldr	r3, [pc, #92]	@ (8004124 <Run_jog+0x30c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004134 <Run_jog+0x31c>)
 80040cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d0:	4a20      	ldr	r2, [pc, #128]	@ (8004154 <Run_jog+0x33c>)
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004158 <Run_jog+0x340>)
 80040da:	6013      	str	r3, [r2, #0]

			if(fabs(setPosition-QEIdata.linearPos) < 0.05){
 80040dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004158 <Run_jog+0x340>)
 80040de:	ed93 7a00 	vldr	s14, [r3]
 80040e2:	4b1e      	ldr	r3, [pc, #120]	@ (800415c <Run_jog+0x344>)
 80040e4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80040e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040ec:	eef0 7ae7 	vabs.f32	s15, s15
 80040f0:	ee17 0a90 	vmov	r0, s15
 80040f4:	f7fc f9f4 	bl	80004e0 <__aeabi_f2d>
 80040f8:	a305      	add	r3, pc, #20	@ (adr r3, 8004110 <Run_jog+0x2f8>)
 80040fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fe:	f7fc fcb9 	bl	8000a74 <__aeabi_dcmplt>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 80c9 	beq.w	800429c <Run_jog+0x484>
 800410a:	e029      	b.n	8004160 <Run_jog+0x348>
 800410c:	f3af 8000 	nop.w
 8004110:	9999999a 	.word	0x9999999a
 8004114:	3fa99999 	.word	0x3fa99999
 8004118:	20000fbc 	.word	0x20000fbc
 800411c:	20001184 	.word	0x20001184
 8004120:	200011bc 	.word	0x200011bc
 8004124:	200011b8 	.word	0x200011b8
 8004128:	2000117c 	.word	0x2000117c
 800412c:	20001180 	.word	0x20001180
 8004130:	68db8bad 	.word	0x68db8bad
 8004134:	20001188 	.word	0x20001188
 8004138:	10624dd3 	.word	0x10624dd3
 800413c:	51eb851f 	.word	0x51eb851f
 8004140:	66666667 	.word	0x66666667
 8004144:	2000119c 	.word	0x2000119c
 8004148:	200011b4 	.word	0x200011b4
 800414c:	200011b0 	.word	0x200011b0
 8004150:	20000200 	.word	0x20000200
 8004154:	20000a70 	.word	0x20000a70
 8004158:	20000ad0 	.word	0x20000ad0
 800415c:	200009c8 	.word	0x200009c8
					mode = 3;
 8004160:	4b63      	ldr	r3, [pc, #396]	@ (80042f0 <Run_jog+0x4d8>)
 8004162:	2203      	movs	r2, #3
 8004164:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8004166:	4b63      	ldr	r3, [pc, #396]	@ (80042f4 <Run_jog+0x4dc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2200      	movs	r2, #0
 800416c:	625a      	str	r2, [r3, #36]	@ 0x24

					//pick
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 800416e:	2200      	movs	r2, #0
 8004170:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004174:	4860      	ldr	r0, [pc, #384]	@ (80042f8 <Run_jog+0x4e0>)
 8004176:	f002 feb5 	bl	8006ee4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 800417a:	2201      	movs	r2, #1
 800417c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004180:	485e      	ldr	r0, [pc, #376]	@ (80042fc <Run_jog+0x4e4>)
 8004182:	f002 feaf 	bl	8006ee4 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 8004186:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800418a:	f000 fd49 	bl	8004c20 <HAL_Delay>

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 800418e:	2201      	movs	r2, #1
 8004190:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004194:	4858      	ldr	r0, [pc, #352]	@ (80042f8 <Run_jog+0x4e0>)
 8004196:	f002 fea5 	bl	8006ee4 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 800419a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800419e:	f000 fd3f 	bl	8004c20 <HAL_Delay>

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 80041a2:	2201      	movs	r2, #1
 80041a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80041a8:	4853      	ldr	r0, [pc, #332]	@ (80042f8 <Run_jog+0x4e0>)
 80041aa:	f002 fe9b 	bl	8006ee4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 80041ae:	2200      	movs	r2, #0
 80041b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80041b4:	4851      	ldr	r0, [pc, #324]	@ (80042fc <Run_jog+0x4e4>)
 80041b6:	f002 fe95 	bl	8006ee4 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 80041ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80041be:	f000 fd2f 	bl	8004c20 <HAL_Delay>

					Jog_oneloop_trigger = 1;
 80041c2:	4b4f      	ldr	r3, [pc, #316]	@ (8004300 <Run_jog+0x4e8>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	e068      	b.n	800429c <Run_jog+0x484>
			}
		}
		else if(Jog_oneloop_trigger == 1){ //Go place
 80041ca:	4b4d      	ldr	r3, [pc, #308]	@ (8004300 <Run_jog+0x4e8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d164      	bne.n	800429c <Run_jog+0x484>
			Moving_status = 8; //Go place
 80041d2:	4b4c      	ldr	r3, [pc, #304]	@ (8004304 <Run_jog+0x4ec>)
 80041d4:	2208      	movs	r2, #8
 80041d6:	601a      	str	r2, [r3, #0]
			registerFrame[0x10].U16 =  Moving_status;
 80041d8:	4b4a      	ldr	r3, [pc, #296]	@ (8004304 <Run_jog+0x4ec>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	b29a      	uxth	r2, r3
 80041de:	4b4a      	ldr	r3, [pc, #296]	@ (8004308 <Run_jog+0x4f0>)
 80041e0:	841a      	strh	r2, [r3, #32]

			mode = 1;
 80041e2:	4b43      	ldr	r3, [pc, #268]	@ (80042f0 <Run_jog+0x4d8>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	701a      	strb	r2, [r3, #0]
			setPosition = shelves_pos[PlaceArray[Jog_order]]; //Update set point
 80041e8:	4b48      	ldr	r3, [pc, #288]	@ (800430c <Run_jog+0x4f4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a48      	ldr	r2, [pc, #288]	@ (8004310 <Run_jog+0x4f8>)
 80041ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f2:	4a48      	ldr	r2, [pc, #288]	@ (8004314 <Run_jog+0x4fc>)
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a47      	ldr	r2, [pc, #284]	@ (8004318 <Run_jog+0x500>)
 80041fc:	6013      	str	r3, [r2, #0]

			if(fabs(setPosition-QEIdata.linearPos) < 0.05){
 80041fe:	4b46      	ldr	r3, [pc, #280]	@ (8004318 <Run_jog+0x500>)
 8004200:	ed93 7a00 	vldr	s14, [r3]
 8004204:	4b45      	ldr	r3, [pc, #276]	@ (800431c <Run_jog+0x504>)
 8004206:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800420a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800420e:	eef0 7ae7 	vabs.f32	s15, s15
 8004212:	ee17 0a90 	vmov	r0, s15
 8004216:	f7fc f963 	bl	80004e0 <__aeabi_f2d>
 800421a:	a333      	add	r3, pc, #204	@ (adr r3, 80042e8 <Run_jog+0x4d0>)
 800421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004220:	f7fc fc28 	bl	8000a74 <__aeabi_dcmplt>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d038      	beq.n	800429c <Run_jog+0x484>
					mode = 3;
 800422a:	4b31      	ldr	r3, [pc, #196]	@ (80042f0 <Run_jog+0x4d8>)
 800422c:	2203      	movs	r2, #3
 800422e:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8004230:	4b30      	ldr	r3, [pc, #192]	@ (80042f4 <Run_jog+0x4dc>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2200      	movs	r2, #0
 8004236:	625a      	str	r2, [r3, #36]	@ 0x24

					//place
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8004238:	2200      	movs	r2, #0
 800423a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800423e:	482e      	ldr	r0, [pc, #184]	@ (80042f8 <Run_jog+0x4e0>)
 8004240:	f002 fe50 	bl	8006ee4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8004244:	2201      	movs	r2, #1
 8004246:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800424a:	482c      	ldr	r0, [pc, #176]	@ (80042fc <Run_jog+0x4e4>)
 800424c:	f002 fe4a 	bl	8006ee4 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 8004250:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004254:	f000 fce4 	bl	8004c20 <HAL_Delay>

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8004258:	2200      	movs	r2, #0
 800425a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800425e:	4826      	ldr	r0, [pc, #152]	@ (80042f8 <Run_jog+0x4e0>)
 8004260:	f002 fe40 	bl	8006ee4 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 8004264:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004268:	f000 fcda 	bl	8004c20 <HAL_Delay>

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 800426c:	2201      	movs	r2, #1
 800426e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004272:	4821      	ldr	r0, [pc, #132]	@ (80042f8 <Run_jog+0x4e0>)
 8004274:	f002 fe36 	bl	8006ee4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8004278:	2200      	movs	r2, #0
 800427a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800427e:	481f      	ldr	r0, [pc, #124]	@ (80042fc <Run_jog+0x4e4>)
 8004280:	f002 fe30 	bl	8006ee4 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 8004284:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004288:	f000 fcca 	bl	8004c20 <HAL_Delay>

					Jog_order += 1;
 800428c:	4b1f      	ldr	r3, [pc, #124]	@ (800430c <Run_jog+0x4f4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3301      	adds	r3, #1
 8004292:	4a1e      	ldr	r2, [pc, #120]	@ (800430c <Run_jog+0x4f4>)
 8004294:	6013      	str	r3, [r2, #0]
					Jog_oneloop_trigger = 0;
 8004296:	4b1a      	ldr	r3, [pc, #104]	@ (8004300 <Run_jog+0x4e8>)
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
			}
		}

		if(Jog_order == 5){
 800429c:	4b1b      	ldr	r3, [pc, #108]	@ (800430c <Run_jog+0x4f4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b05      	cmp	r3, #5
 80042a2:	d105      	bne.n	80042b0 <Run_jog+0x498>
			Jog_state_triger = 1;
 80042a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004320 <Run_jog+0x508>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
			Jog_order = 0;
 80042aa:	4b18      	ldr	r3, [pc, #96]	@ (800430c <Run_jog+0x4f4>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
		}
	}

	if (Jog_state_triger == 1 && set_jog_state == 1)
 80042b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004320 <Run_jog+0x508>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d113      	bne.n	80042e0 <Run_jog+0x4c8>
 80042b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004324 <Run_jog+0x50c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d10f      	bne.n	80042e0 <Run_jog+0x4c8>
	{
		Moving_status = 0;
 80042c0:	4b10      	ldr	r3, [pc, #64]	@ (8004304 <Run_jog+0x4ec>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
		registerFrame[0x10].U16 =  Moving_status;
 80042c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004304 <Run_jog+0x4ec>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004308 <Run_jog+0x4f0>)
 80042ce:	841a      	strh	r2, [r3, #32]
		Jog_state_triger = 0;
 80042d0:	4b13      	ldr	r3, [pc, #76]	@ (8004320 <Run_jog+0x508>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
		set_jog_state = 0;
 80042d6:	4b13      	ldr	r3, [pc, #76]	@ (8004324 <Run_jog+0x50c>)
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
		LED_Ready();
 80042dc:	f000 f870 	bl	80043c0 <LED_Ready>
	}
}
 80042e0:	bf00      	nop
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	f3af 8000 	nop.w
 80042e8:	9999999a 	.word	0x9999999a
 80042ec:	3fa99999 	.word	0x3fa99999
 80042f0:	20000200 	.word	0x20000200
 80042f4:	20000374 	.word	0x20000374
 80042f8:	48000400 	.word	0x48000400
 80042fc:	48000800 	.word	0x48000800
 8004300:	200011bc 	.word	0x200011bc
 8004304:	200011b0 	.word	0x200011b0
 8004308:	20000fbc 	.word	0x20000fbc
 800430c:	200011b8 	.word	0x200011b8
 8004310:	2000119c 	.word	0x2000119c
 8004314:	20000a70 	.word	0x20000a70
 8004318:	20000ad0 	.word	0x20000ad0
 800431c:	200009c8 	.word	0x200009c8
 8004320:	200011b4 	.word	0x200011b4
 8004324:	20001184 	.word	0x20001184

08004328 <LED_Emergency>:
//-----------------------------------------------------------//

//-----------------------LED STATUS--------------------------//

void LED_Emergency(){
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 800432c:	2201      	movs	r2, #1
 800432e:	2140      	movs	r1, #64	@ 0x40
 8004330:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004334:	f002 fdd6 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8004338:	2200      	movs	r2, #0
 800433a:	2180      	movs	r1, #128	@ 0x80
 800433c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004340:	f002 fdd0 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8004344:	2200      	movs	r2, #0
 8004346:	2140      	movs	r1, #64	@ 0x40
 8004348:	4808      	ldr	r0, [pc, #32]	@ (800436c <LED_Emergency+0x44>)
 800434a:	f002 fdcb 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 800434e:	2200      	movs	r2, #0
 8004350:	2180      	movs	r1, #128	@ 0x80
 8004352:	4807      	ldr	r0, [pc, #28]	@ (8004370 <LED_Emergency+0x48>)
 8004354:	f002 fdc6 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8004358:	2200      	movs	r2, #0
 800435a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800435e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004362:	f002 fdbf 	bl	8006ee4 <HAL_GPIO_WritePin>
}
 8004366:	bf00      	nop
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	48000400 	.word	0x48000400
 8004370:	48000800 	.word	0x48000800

08004374 <LED_Homing>:

void LED_Homing(){
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8004378:	2200      	movs	r2, #0
 800437a:	2140      	movs	r1, #64	@ 0x40
 800437c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004380:	f002 fdb0 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8004384:	2201      	movs	r2, #1
 8004386:	2180      	movs	r1, #128	@ 0x80
 8004388:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800438c:	f002 fdaa 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8004390:	2200      	movs	r2, #0
 8004392:	2140      	movs	r1, #64	@ 0x40
 8004394:	4808      	ldr	r0, [pc, #32]	@ (80043b8 <LED_Homing+0x44>)
 8004396:	f002 fda5 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 800439a:	2200      	movs	r2, #0
 800439c:	2180      	movs	r1, #128	@ 0x80
 800439e:	4807      	ldr	r0, [pc, #28]	@ (80043bc <LED_Homing+0x48>)
 80043a0:	f002 fda0 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80043a4:	2200      	movs	r2, #0
 80043a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043ae:	f002 fd99 	bl	8006ee4 <HAL_GPIO_WritePin>
}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	48000400 	.word	0x48000400
 80043bc:	48000800 	.word	0x48000800

080043c0 <LED_Ready>:

void LED_Ready(){
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80043c4:	2200      	movs	r2, #0
 80043c6:	2140      	movs	r1, #64	@ 0x40
 80043c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043cc:	f002 fd8a 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80043d0:	2200      	movs	r2, #0
 80043d2:	2180      	movs	r1, #128	@ 0x80
 80043d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043d8:	f002 fd84 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 80043dc:	2201      	movs	r2, #1
 80043de:	2140      	movs	r1, #64	@ 0x40
 80043e0:	4808      	ldr	r0, [pc, #32]	@ (8004404 <LED_Ready+0x44>)
 80043e2:	f002 fd7f 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80043e6:	2200      	movs	r2, #0
 80043e8:	2180      	movs	r1, #128	@ 0x80
 80043ea:	4807      	ldr	r0, [pc, #28]	@ (8004408 <LED_Ready+0x48>)
 80043ec:	f002 fd7a 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80043f0:	2200      	movs	r2, #0
 80043f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043fa:	f002 fd73 	bl	8006ee4 <HAL_GPIO_WritePin>
}
 80043fe:	bf00      	nop
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	48000400 	.word	0x48000400
 8004408:	48000800 	.word	0x48000800

0800440c <LED_Auto>:

void LED_Auto(){
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8004410:	2200      	movs	r2, #0
 8004412:	2140      	movs	r1, #64	@ 0x40
 8004414:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004418:	f002 fd64 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 800441c:	2200      	movs	r2, #0
 800441e:	2180      	movs	r1, #128	@ 0x80
 8004420:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004424:	f002 fd5e 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8004428:	2200      	movs	r2, #0
 800442a:	2140      	movs	r1, #64	@ 0x40
 800442c:	4808      	ldr	r0, [pc, #32]	@ (8004450 <LED_Auto+0x44>)
 800442e:	f002 fd59 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8004432:	2201      	movs	r2, #1
 8004434:	2180      	movs	r1, #128	@ 0x80
 8004436:	4807      	ldr	r0, [pc, #28]	@ (8004454 <LED_Auto+0x48>)
 8004438:	f002 fd54 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800443c:	2200      	movs	r2, #0
 800443e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004442:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004446:	f002 fd4d 	bl	8006ee4 <HAL_GPIO_WritePin>
}
 800444a:	bf00      	nop
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	48000400 	.word	0x48000400
 8004454:	48000800 	.word	0x48000800

08004458 <LED_Manual>:

void LED_Manual(){
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800445c:	2200      	movs	r2, #0
 800445e:	2140      	movs	r1, #64	@ 0x40
 8004460:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004464:	f002 fd3e 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8004468:	2200      	movs	r2, #0
 800446a:	2180      	movs	r1, #128	@ 0x80
 800446c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004470:	f002 fd38 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8004474:	2200      	movs	r2, #0
 8004476:	2140      	movs	r1, #64	@ 0x40
 8004478:	4808      	ldr	r0, [pc, #32]	@ (800449c <LED_Manual+0x44>)
 800447a:	f002 fd33 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 800447e:	2200      	movs	r2, #0
 8004480:	2180      	movs	r1, #128	@ 0x80
 8004482:	4807      	ldr	r0, [pc, #28]	@ (80044a0 <LED_Manual+0x48>)
 8004484:	f002 fd2e 	bl	8006ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8004488:	2201      	movs	r2, #1
 800448a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800448e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004492:	f002 fd27 	bl	8006ee4 <HAL_GPIO_WritePin>
}
 8004496:	bf00      	nop
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	48000400 	.word	0x48000400
 80044a0:	48000800 	.word	0x48000800

080044a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044a8:	b672      	cpsid	i
}
 80044aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044ac:	bf00      	nop
 80044ae:	e7fd      	b.n	80044ac <Error_Handler+0x8>

080044b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044b6:	4b0f      	ldr	r3, [pc, #60]	@ (80044f4 <HAL_MspInit+0x44>)
 80044b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ba:	4a0e      	ldr	r2, [pc, #56]	@ (80044f4 <HAL_MspInit+0x44>)
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80044c2:	4b0c      	ldr	r3, [pc, #48]	@ (80044f4 <HAL_MspInit+0x44>)
 80044c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	607b      	str	r3, [r7, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044ce:	4b09      	ldr	r3, [pc, #36]	@ (80044f4 <HAL_MspInit+0x44>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d2:	4a08      	ldr	r2, [pc, #32]	@ (80044f4 <HAL_MspInit+0x44>)
 80044d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80044da:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <HAL_MspInit+0x44>)
 80044dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80044e6:	f002 fdd1 	bl	800708c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40021000 	.word	0x40021000

080044f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b0a0      	sub	sp, #128	@ 0x80
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004500:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	60da      	str	r2, [r3, #12]
 800450e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004510:	f107 0318 	add.w	r3, r7, #24
 8004514:	2254      	movs	r2, #84	@ 0x54
 8004516:	2100      	movs	r1, #0
 8004518:	4618      	mov	r0, r3
 800451a:	f007 fccb 	bl	800beb4 <memset>
  if(hadc->Instance==ADC1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004526:	d178      	bne.n	800461a <HAL_ADC_MspInit+0x122>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004528:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800452c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800452e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004532:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004534:	f107 0318 	add.w	r3, r7, #24
 8004538:	4618      	mov	r0, r3
 800453a:	f003 fae5 	bl	8007b08 <HAL_RCCEx_PeriphCLKConfig>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004544:	f7ff ffae 	bl	80044a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004548:	4b36      	ldr	r3, [pc, #216]	@ (8004624 <HAL_ADC_MspInit+0x12c>)
 800454a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800454c:	4a35      	ldr	r2, [pc, #212]	@ (8004624 <HAL_ADC_MspInit+0x12c>)
 800454e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004552:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004554:	4b33      	ldr	r3, [pc, #204]	@ (8004624 <HAL_ADC_MspInit+0x12c>)
 8004556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004558:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004560:	4b30      	ldr	r3, [pc, #192]	@ (8004624 <HAL_ADC_MspInit+0x12c>)
 8004562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004564:	4a2f      	ldr	r2, [pc, #188]	@ (8004624 <HAL_ADC_MspInit+0x12c>)
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800456c:	4b2d      	ldr	r3, [pc, #180]	@ (8004624 <HAL_ADC_MspInit+0x12c>)
 800456e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004578:	4b2a      	ldr	r3, [pc, #168]	@ (8004624 <HAL_ADC_MspInit+0x12c>)
 800457a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800457c:	4a29      	ldr	r2, [pc, #164]	@ (8004624 <HAL_ADC_MspInit+0x12c>)
 800457e:	f043 0302 	orr.w	r3, r3, #2
 8004582:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004584:	4b27      	ldr	r3, [pc, #156]	@ (8004624 <HAL_ADC_MspInit+0x12c>)
 8004586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004590:	2301      	movs	r3, #1
 8004592:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004594:	2303      	movs	r3, #3
 8004596:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004598:	2300      	movs	r3, #0
 800459a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800459c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80045a0:	4619      	mov	r1, r3
 80045a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045a6:	f002 fb03 	bl	8006bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80045aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80045ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045b0:	2303      	movs	r3, #3
 80045b2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b4:	2300      	movs	r3, #0
 80045b6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80045bc:	4619      	mov	r1, r3
 80045be:	481a      	ldr	r0, [pc, #104]	@ (8004628 <HAL_ADC_MspInit+0x130>)
 80045c0:	f002 faf6 	bl	8006bb0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 80045c4:	4b19      	ldr	r3, [pc, #100]	@ (800462c <HAL_ADC_MspInit+0x134>)
 80045c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004630 <HAL_ADC_MspInit+0x138>)
 80045c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80045ca:	4b18      	ldr	r3, [pc, #96]	@ (800462c <HAL_ADC_MspInit+0x134>)
 80045cc:	2205      	movs	r2, #5
 80045ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045d0:	4b16      	ldr	r3, [pc, #88]	@ (800462c <HAL_ADC_MspInit+0x134>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80045d6:	4b15      	ldr	r3, [pc, #84]	@ (800462c <HAL_ADC_MspInit+0x134>)
 80045d8:	2200      	movs	r2, #0
 80045da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80045dc:	4b13      	ldr	r3, [pc, #76]	@ (800462c <HAL_ADC_MspInit+0x134>)
 80045de:	2280      	movs	r2, #128	@ 0x80
 80045e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80045e2:	4b12      	ldr	r3, [pc, #72]	@ (800462c <HAL_ADC_MspInit+0x134>)
 80045e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80045ea:	4b10      	ldr	r3, [pc, #64]	@ (800462c <HAL_ADC_MspInit+0x134>)
 80045ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80045f2:	4b0e      	ldr	r3, [pc, #56]	@ (800462c <HAL_ADC_MspInit+0x134>)
 80045f4:	2220      	movs	r2, #32
 80045f6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80045f8:	4b0c      	ldr	r3, [pc, #48]	@ (800462c <HAL_ADC_MspInit+0x134>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80045fe:	480b      	ldr	r0, [pc, #44]	@ (800462c <HAL_ADC_MspInit+0x134>)
 8004600:	f001 ffa4 	bl	800654c <HAL_DMA_Init>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 800460a:	f7ff ff4b 	bl	80044a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a06      	ldr	r2, [pc, #24]	@ (800462c <HAL_ADC_MspInit+0x134>)
 8004612:	655a      	str	r2, [r3, #84]	@ 0x54
 8004614:	4a05      	ldr	r2, [pc, #20]	@ (800462c <HAL_ADC_MspInit+0x134>)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800461a:	bf00      	nop
 800461c:	3780      	adds	r7, #128	@ 0x80
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40021000 	.word	0x40021000
 8004628:	48000400 	.word	0x48000400
 800462c:	20000314 	.word	0x20000314
 8004630:	40020408 	.word	0x40020408

08004634 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08a      	sub	sp, #40	@ 0x28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800463c:	f107 0314 	add.w	r3, r7, #20
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	609a      	str	r2, [r3, #8]
 8004648:	60da      	str	r2, [r3, #12]
 800464a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004654:	d129      	bne.n	80046aa <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004656:	4b17      	ldr	r3, [pc, #92]	@ (80046b4 <HAL_TIM_Encoder_MspInit+0x80>)
 8004658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465a:	4a16      	ldr	r2, [pc, #88]	@ (80046b4 <HAL_TIM_Encoder_MspInit+0x80>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	6593      	str	r3, [r2, #88]	@ 0x58
 8004662:	4b14      	ldr	r3, [pc, #80]	@ (80046b4 <HAL_TIM_Encoder_MspInit+0x80>)
 8004664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800466e:	4b11      	ldr	r3, [pc, #68]	@ (80046b4 <HAL_TIM_Encoder_MspInit+0x80>)
 8004670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004672:	4a10      	ldr	r2, [pc, #64]	@ (80046b4 <HAL_TIM_Encoder_MspInit+0x80>)
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800467a:	4b0e      	ldr	r3, [pc, #56]	@ (80046b4 <HAL_TIM_Encoder_MspInit+0x80>)
 800467c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8004686:	f248 0302 	movw	r3, #32770	@ 0x8002
 800468a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800468c:	2302      	movs	r3, #2
 800468e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004690:	2300      	movs	r3, #0
 8004692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004694:	2300      	movs	r3, #0
 8004696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004698:	2301      	movs	r3, #1
 800469a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800469c:	f107 0314 	add.w	r3, r7, #20
 80046a0:	4619      	mov	r1, r3
 80046a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80046a6:	f002 fa83 	bl	8006bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80046aa:	bf00      	nop
 80046ac:	3728      	adds	r7, #40	@ 0x28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40021000 	.word	0x40021000

080046b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a39      	ldr	r2, [pc, #228]	@ (80047ac <HAL_TIM_Base_MspInit+0xf4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d10c      	bne.n	80046e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046ca:	4b39      	ldr	r3, [pc, #228]	@ (80047b0 <HAL_TIM_Base_MspInit+0xf8>)
 80046cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ce:	4a38      	ldr	r2, [pc, #224]	@ (80047b0 <HAL_TIM_Base_MspInit+0xf8>)
 80046d0:	f043 0302 	orr.w	r3, r3, #2
 80046d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80046d6:	4b36      	ldr	r3, [pc, #216]	@ (80047b0 <HAL_TIM_Base_MspInit+0xf8>)
 80046d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	61fb      	str	r3, [r7, #28]
 80046e0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80046e2:	e05e      	b.n	80047a2 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM4)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a32      	ldr	r2, [pc, #200]	@ (80047b4 <HAL_TIM_Base_MspInit+0xfc>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d10c      	bne.n	8004708 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80046ee:	4b30      	ldr	r3, [pc, #192]	@ (80047b0 <HAL_TIM_Base_MspInit+0xf8>)
 80046f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f2:	4a2f      	ldr	r2, [pc, #188]	@ (80047b0 <HAL_TIM_Base_MspInit+0xf8>)
 80046f4:	f043 0304 	orr.w	r3, r3, #4
 80046f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80046fa:	4b2d      	ldr	r3, [pc, #180]	@ (80047b0 <HAL_TIM_Base_MspInit+0xf8>)
 80046fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	61bb      	str	r3, [r7, #24]
 8004704:	69bb      	ldr	r3, [r7, #24]
}
 8004706:	e04c      	b.n	80047a2 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM5)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2a      	ldr	r2, [pc, #168]	@ (80047b8 <HAL_TIM_Base_MspInit+0x100>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d114      	bne.n	800473c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004712:	4b27      	ldr	r3, [pc, #156]	@ (80047b0 <HAL_TIM_Base_MspInit+0xf8>)
 8004714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004716:	4a26      	ldr	r2, [pc, #152]	@ (80047b0 <HAL_TIM_Base_MspInit+0xf8>)
 8004718:	f043 0308 	orr.w	r3, r3, #8
 800471c:	6593      	str	r3, [r2, #88]	@ 0x58
 800471e:	4b24      	ldr	r3, [pc, #144]	@ (80047b0 <HAL_TIM_Base_MspInit+0xf8>)
 8004720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800472a:	2200      	movs	r2, #0
 800472c:	2100      	movs	r1, #0
 800472e:	2032      	movs	r0, #50	@ 0x32
 8004730:	f001 fed7 	bl	80064e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004734:	2032      	movs	r0, #50	@ 0x32
 8004736:	f001 feee 	bl	8006516 <HAL_NVIC_EnableIRQ>
}
 800473a:	e032      	b.n	80047a2 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM6)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1e      	ldr	r2, [pc, #120]	@ (80047bc <HAL_TIM_Base_MspInit+0x104>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d114      	bne.n	8004770 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004746:	4b1a      	ldr	r3, [pc, #104]	@ (80047b0 <HAL_TIM_Base_MspInit+0xf8>)
 8004748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474a:	4a19      	ldr	r2, [pc, #100]	@ (80047b0 <HAL_TIM_Base_MspInit+0xf8>)
 800474c:	f043 0310 	orr.w	r3, r3, #16
 8004750:	6593      	str	r3, [r2, #88]	@ 0x58
 8004752:	4b17      	ldr	r3, [pc, #92]	@ (80047b0 <HAL_TIM_Base_MspInit+0xf8>)
 8004754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800475e:	2200      	movs	r2, #0
 8004760:	2100      	movs	r1, #0
 8004762:	2036      	movs	r0, #54	@ 0x36
 8004764:	f001 febd 	bl	80064e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004768:	2036      	movs	r0, #54	@ 0x36
 800476a:	f001 fed4 	bl	8006516 <HAL_NVIC_EnableIRQ>
}
 800476e:	e018      	b.n	80047a2 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a12      	ldr	r2, [pc, #72]	@ (80047c0 <HAL_TIM_Base_MspInit+0x108>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d113      	bne.n	80047a2 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800477a:	4b0d      	ldr	r3, [pc, #52]	@ (80047b0 <HAL_TIM_Base_MspInit+0xf8>)
 800477c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800477e:	4a0c      	ldr	r2, [pc, #48]	@ (80047b0 <HAL_TIM_Base_MspInit+0xf8>)
 8004780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004784:	6613      	str	r3, [r2, #96]	@ 0x60
 8004786:	4b0a      	ldr	r3, [pc, #40]	@ (80047b0 <HAL_TIM_Base_MspInit+0xf8>)
 8004788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800478a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004792:	2200      	movs	r2, #0
 8004794:	2100      	movs	r1, #0
 8004796:	2019      	movs	r0, #25
 8004798:	f001 fea3 	bl	80064e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800479c:	2019      	movs	r0, #25
 800479e:	f001 feba 	bl	8006516 <HAL_NVIC_EnableIRQ>
}
 80047a2:	bf00      	nop
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40000400 	.word	0x40000400
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40000800 	.word	0x40000800
 80047b8:	40000c00 	.word	0x40000c00
 80047bc:	40001000 	.word	0x40001000
 80047c0:	40014400 	.word	0x40014400

080047c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047cc:	f107 030c 	add.w	r3, r7, #12
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	609a      	str	r2, [r3, #8]
 80047d8:	60da      	str	r2, [r3, #12]
 80047da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a11      	ldr	r2, [pc, #68]	@ (8004828 <HAL_TIM_MspPostInit+0x64>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d11b      	bne.n	800481e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047e6:	4b11      	ldr	r3, [pc, #68]	@ (800482c <HAL_TIM_MspPostInit+0x68>)
 80047e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ea:	4a10      	ldr	r2, [pc, #64]	@ (800482c <HAL_TIM_MspPostInit+0x68>)
 80047ec:	f043 0304 	orr.w	r3, r3, #4
 80047f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047f2:	4b0e      	ldr	r3, [pc, #56]	@ (800482c <HAL_TIM_MspPostInit+0x68>)
 80047f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	60bb      	str	r3, [r7, #8]
 80047fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80047fe:	2340      	movs	r3, #64	@ 0x40
 8004800:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004802:	2302      	movs	r3, #2
 8004804:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800480a:	2300      	movs	r3, #0
 800480c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800480e:	2302      	movs	r3, #2
 8004810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004812:	f107 030c 	add.w	r3, r7, #12
 8004816:	4619      	mov	r1, r3
 8004818:	4805      	ldr	r0, [pc, #20]	@ (8004830 <HAL_TIM_MspPostInit+0x6c>)
 800481a:	f002 f9c9 	bl	8006bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800481e:	bf00      	nop
 8004820:	3720      	adds	r7, #32
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40000400 	.word	0x40000400
 800482c:	40021000 	.word	0x40021000
 8004830:	48000800 	.word	0x48000800

08004834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b09e      	sub	sp, #120	@ 0x78
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800483c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	605a      	str	r2, [r3, #4]
 8004846:	609a      	str	r2, [r3, #8]
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800484c:	f107 0310 	add.w	r3, r7, #16
 8004850:	2254      	movs	r2, #84	@ 0x54
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f007 fb2d 	bl	800beb4 <memset>
  if(huart->Instance==USART2)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a4d      	ldr	r2, [pc, #308]	@ (8004994 <HAL_UART_MspInit+0x160>)
 8004860:	4293      	cmp	r3, r2
 8004862:	f040 8092 	bne.w	800498a <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004866:	2302      	movs	r3, #2
 8004868:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800486a:	2300      	movs	r3, #0
 800486c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800486e:	f107 0310 	add.w	r3, r7, #16
 8004872:	4618      	mov	r0, r3
 8004874:	f003 f948 	bl	8007b08 <HAL_RCCEx_PeriphCLKConfig>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800487e:	f7ff fe11 	bl	80044a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004882:	4b45      	ldr	r3, [pc, #276]	@ (8004998 <HAL_UART_MspInit+0x164>)
 8004884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004886:	4a44      	ldr	r2, [pc, #272]	@ (8004998 <HAL_UART_MspInit+0x164>)
 8004888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800488c:	6593      	str	r3, [r2, #88]	@ 0x58
 800488e:	4b42      	ldr	r3, [pc, #264]	@ (8004998 <HAL_UART_MspInit+0x164>)
 8004890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800489a:	4b3f      	ldr	r3, [pc, #252]	@ (8004998 <HAL_UART_MspInit+0x164>)
 800489c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800489e:	4a3e      	ldr	r2, [pc, #248]	@ (8004998 <HAL_UART_MspInit+0x164>)
 80048a0:	f043 0301 	orr.w	r3, r3, #1
 80048a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048a6:	4b3c      	ldr	r3, [pc, #240]	@ (8004998 <HAL_UART_MspInit+0x164>)
 80048a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	60bb      	str	r3, [r7, #8]
 80048b0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80048b2:	230c      	movs	r3, #12
 80048b4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b6:	2302      	movs	r3, #2
 80048b8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ba:	2300      	movs	r3, #0
 80048bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048be:	2300      	movs	r3, #0
 80048c0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048c2:	2307      	movs	r3, #7
 80048c4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048c6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80048ca:	4619      	mov	r1, r3
 80048cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048d0:	f002 f96e 	bl	8006bb0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80048d4:	4b31      	ldr	r3, [pc, #196]	@ (800499c <HAL_UART_MspInit+0x168>)
 80048d6:	4a32      	ldr	r2, [pc, #200]	@ (80049a0 <HAL_UART_MspInit+0x16c>)
 80048d8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80048da:	4b30      	ldr	r3, [pc, #192]	@ (800499c <HAL_UART_MspInit+0x168>)
 80048dc:	221b      	movs	r2, #27
 80048de:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048e0:	4b2e      	ldr	r3, [pc, #184]	@ (800499c <HAL_UART_MspInit+0x168>)
 80048e2:	2210      	movs	r2, #16
 80048e4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048e6:	4b2d      	ldr	r3, [pc, #180]	@ (800499c <HAL_UART_MspInit+0x168>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80048ec:	4b2b      	ldr	r3, [pc, #172]	@ (800499c <HAL_UART_MspInit+0x168>)
 80048ee:	2280      	movs	r2, #128	@ 0x80
 80048f0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048f2:	4b2a      	ldr	r3, [pc, #168]	@ (800499c <HAL_UART_MspInit+0x168>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048f8:	4b28      	ldr	r3, [pc, #160]	@ (800499c <HAL_UART_MspInit+0x168>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80048fe:	4b27      	ldr	r3, [pc, #156]	@ (800499c <HAL_UART_MspInit+0x168>)
 8004900:	2200      	movs	r2, #0
 8004902:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004904:	4b25      	ldr	r3, [pc, #148]	@ (800499c <HAL_UART_MspInit+0x168>)
 8004906:	2200      	movs	r2, #0
 8004908:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800490a:	4824      	ldr	r0, [pc, #144]	@ (800499c <HAL_UART_MspInit+0x168>)
 800490c:	f001 fe1e 	bl	800654c <HAL_DMA_Init>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004916:	f7ff fdc5 	bl	80044a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a1f      	ldr	r2, [pc, #124]	@ (800499c <HAL_UART_MspInit+0x168>)
 800491e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004920:	4a1e      	ldr	r2, [pc, #120]	@ (800499c <HAL_UART_MspInit+0x168>)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8004926:	4b1f      	ldr	r3, [pc, #124]	@ (80049a4 <HAL_UART_MspInit+0x170>)
 8004928:	4a1f      	ldr	r2, [pc, #124]	@ (80049a8 <HAL_UART_MspInit+0x174>)
 800492a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800492c:	4b1d      	ldr	r3, [pc, #116]	@ (80049a4 <HAL_UART_MspInit+0x170>)
 800492e:	221a      	movs	r2, #26
 8004930:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004932:	4b1c      	ldr	r3, [pc, #112]	@ (80049a4 <HAL_UART_MspInit+0x170>)
 8004934:	2200      	movs	r2, #0
 8004936:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004938:	4b1a      	ldr	r3, [pc, #104]	@ (80049a4 <HAL_UART_MspInit+0x170>)
 800493a:	2200      	movs	r2, #0
 800493c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800493e:	4b19      	ldr	r3, [pc, #100]	@ (80049a4 <HAL_UART_MspInit+0x170>)
 8004940:	2280      	movs	r2, #128	@ 0x80
 8004942:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004944:	4b17      	ldr	r3, [pc, #92]	@ (80049a4 <HAL_UART_MspInit+0x170>)
 8004946:	2200      	movs	r2, #0
 8004948:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800494a:	4b16      	ldr	r3, [pc, #88]	@ (80049a4 <HAL_UART_MspInit+0x170>)
 800494c:	2200      	movs	r2, #0
 800494e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004950:	4b14      	ldr	r3, [pc, #80]	@ (80049a4 <HAL_UART_MspInit+0x170>)
 8004952:	2200      	movs	r2, #0
 8004954:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004956:	4b13      	ldr	r3, [pc, #76]	@ (80049a4 <HAL_UART_MspInit+0x170>)
 8004958:	2200      	movs	r2, #0
 800495a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800495c:	4811      	ldr	r0, [pc, #68]	@ (80049a4 <HAL_UART_MspInit+0x170>)
 800495e:	f001 fdf5 	bl	800654c <HAL_DMA_Init>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8004968:	f7ff fd9c 	bl	80044a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a0d      	ldr	r2, [pc, #52]	@ (80049a4 <HAL_UART_MspInit+0x170>)
 8004970:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004974:	4a0b      	ldr	r2, [pc, #44]	@ (80049a4 <HAL_UART_MspInit+0x170>)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800497a:	2200      	movs	r2, #0
 800497c:	2100      	movs	r1, #0
 800497e:	2026      	movs	r0, #38	@ 0x26
 8004980:	f001 fdaf 	bl	80064e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004984:	2026      	movs	r0, #38	@ 0x26
 8004986:	f001 fdc6 	bl	8006516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800498a:	bf00      	nop
 800498c:	3778      	adds	r7, #120	@ 0x78
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40004400 	.word	0x40004400
 8004998:	40021000 	.word	0x40021000
 800499c:	20000908 	.word	0x20000908
 80049a0:	40020008 	.word	0x40020008
 80049a4:	20000968 	.word	0x20000968
 80049a8:	4002001c 	.word	0x4002001c

080049ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80049b0:	bf00      	nop
 80049b2:	e7fd      	b.n	80049b0 <NMI_Handler+0x4>

080049b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049b8:	bf00      	nop
 80049ba:	e7fd      	b.n	80049b8 <HardFault_Handler+0x4>

080049bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049c0:	bf00      	nop
 80049c2:	e7fd      	b.n	80049c0 <MemManage_Handler+0x4>

080049c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049c8:	bf00      	nop
 80049ca:	e7fd      	b.n	80049c8 <BusFault_Handler+0x4>

080049cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049d0:	bf00      	nop
 80049d2:	e7fd      	b.n	80049d0 <UsageFault_Handler+0x4>

080049d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049d8:	bf00      	nop
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049e2:	b480      	push	{r7}
 80049e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049e6:	bf00      	nop
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a02:	f000 f8ef 	bl	8004be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a06:	bf00      	nop
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004a10:	4802      	ldr	r0, [pc, #8]	@ (8004a1c <DMA1_Channel1_IRQHandler+0x10>)
 8004a12:	f001 ff7e 	bl	8006912 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004a16:	bf00      	nop
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000908 	.word	0x20000908

08004a20 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004a24:	4802      	ldr	r0, [pc, #8]	@ (8004a30 <DMA1_Channel2_IRQHandler+0x10>)
 8004a26:	f001 ff74 	bl	8006912 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004a2a:	bf00      	nop
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000968 	.word	0x20000968

08004a34 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004a38:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004a3c:	f002 fa6a 	bl	8006f14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004a40:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004a44:	f002 fa66 	bl	8006f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004a48:	bf00      	nop
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004a50:	4802      	ldr	r0, [pc, #8]	@ (8004a5c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004a52:	f003 ffab 	bl	80089ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004a56:	bf00      	nop
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000770 	.word	0x20000770

08004a60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a64:	4802      	ldr	r0, [pc, #8]	@ (8004a70 <USART2_IRQHandler+0x10>)
 8004a66:	f005 fce1 	bl	800a42c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	2000083c 	.word	0x2000083c

08004a74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004a78:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004a7c:	f002 fa4a 	bl	8006f14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004a80:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004a84:	f002 fa46 	bl	8006f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a88:	bf00      	nop
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004a90:	4802      	ldr	r0, [pc, #8]	@ (8004a9c <TIM5_IRQHandler+0x10>)
 8004a92:	f003 ff8b 	bl	80089ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004a96:	bf00      	nop
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	200005d8 	.word	0x200005d8

08004aa0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004aa4:	4802      	ldr	r0, [pc, #8]	@ (8004ab0 <TIM6_DAC_IRQHandler+0x10>)
 8004aa6:	f003 ff81 	bl	80089ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004aaa:	bf00      	nop
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	200006a4 	.word	0x200006a4

08004ab4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004ab8:	4802      	ldr	r0, [pc, #8]	@ (8004ac4 <DMA2_Channel1_IRQHandler+0x10>)
 8004aba:	f001 ff2a 	bl	8006912 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004abe:	bf00      	nop
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000314 	.word	0x20000314

08004ac8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004acc:	4b06      	ldr	r3, [pc, #24]	@ (8004ae8 <SystemInit+0x20>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad2:	4a05      	ldr	r2, [pc, #20]	@ (8004ae8 <SystemInit+0x20>)
 8004ad4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ad8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004adc:	bf00      	nop
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	e000ed00 	.word	0xe000ed00

08004aec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004aec:	480d      	ldr	r0, [pc, #52]	@ (8004b24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004aee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004af0:	f7ff ffea 	bl	8004ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004af4:	480c      	ldr	r0, [pc, #48]	@ (8004b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8004af6:	490d      	ldr	r1, [pc, #52]	@ (8004b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004af8:	4a0d      	ldr	r2, [pc, #52]	@ (8004b30 <LoopForever+0xe>)
  movs r3, #0
 8004afa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004afc:	e002      	b.n	8004b04 <LoopCopyDataInit>

08004afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b02:	3304      	adds	r3, #4

08004b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b08:	d3f9      	bcc.n	8004afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004b0c:	4c0a      	ldr	r4, [pc, #40]	@ (8004b38 <LoopForever+0x16>)
  movs r3, #0
 8004b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b10:	e001      	b.n	8004b16 <LoopFillZerobss>

08004b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b14:	3204      	adds	r2, #4

08004b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b18:	d3fb      	bcc.n	8004b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004b1a:	f007 f9d9 	bl	800bed0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004b1e:	f7fc fe13 	bl	8001748 <main>

08004b22 <LoopForever>:

LoopForever:
    b LoopForever
 8004b22:	e7fe      	b.n	8004b22 <LoopForever>
  ldr   r0, =_estack
 8004b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b2c:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8004b30:	0800c1a8 	.word	0x0800c1a8
  ldr r2, =_sbss
 8004b34:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8004b38:	2000130c 	.word	0x2000130c

08004b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004b3c:	e7fe      	b.n	8004b3c <ADC1_2_IRQHandler>

08004b3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b48:	2003      	movs	r0, #3
 8004b4a:	f001 fcbf 	bl	80064cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b4e:	2000      	movs	r0, #0
 8004b50:	f000 f80e 	bl	8004b70 <HAL_InitTick>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	71fb      	strb	r3, [r7, #7]
 8004b5e:	e001      	b.n	8004b64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004b60:	f7ff fca6 	bl	80044b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004b64:	79fb      	ldrb	r3, [r7, #7]

}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004b7c:	4b16      	ldr	r3, [pc, #88]	@ (8004bd8 <HAL_InitTick+0x68>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d022      	beq.n	8004bca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004b84:	4b15      	ldr	r3, [pc, #84]	@ (8004bdc <HAL_InitTick+0x6c>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	4b13      	ldr	r3, [pc, #76]	@ (8004bd8 <HAL_InitTick+0x68>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004b90:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f001 fcca 	bl	8006532 <HAL_SYSTICK_Config>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10f      	bne.n	8004bc4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b0f      	cmp	r3, #15
 8004ba8:	d809      	bhi.n	8004bbe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004baa:	2200      	movs	r2, #0
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bb2:	f001 fc96 	bl	80064e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004be0 <HAL_InitTick+0x70>)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	e007      	b.n	8004bce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	73fb      	strb	r3, [r7, #15]
 8004bc2:	e004      	b.n	8004bce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	73fb      	strb	r3, [r7, #15]
 8004bc8:	e001      	b.n	8004bce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	20000220 	.word	0x20000220
 8004bdc:	20000218 	.word	0x20000218
 8004be0:	2000021c 	.word	0x2000021c

08004be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004be8:	4b05      	ldr	r3, [pc, #20]	@ (8004c00 <HAL_IncTick+0x1c>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b05      	ldr	r3, [pc, #20]	@ (8004c04 <HAL_IncTick+0x20>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	4a03      	ldr	r2, [pc, #12]	@ (8004c00 <HAL_IncTick+0x1c>)
 8004bf4:	6013      	str	r3, [r2, #0]
}
 8004bf6:	bf00      	nop
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	200011d0 	.word	0x200011d0
 8004c04:	20000220 	.word	0x20000220

08004c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c0c:	4b03      	ldr	r3, [pc, #12]	@ (8004c1c <HAL_GetTick+0x14>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	200011d0 	.word	0x200011d0

08004c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c28:	f7ff ffee 	bl	8004c08 <HAL_GetTick>
 8004c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c38:	d004      	beq.n	8004c44 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c3a:	4b09      	ldr	r3, [pc, #36]	@ (8004c60 <HAL_Delay+0x40>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4413      	add	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c44:	bf00      	nop
 8004c46:	f7ff ffdf 	bl	8004c08 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d8f7      	bhi.n	8004c46 <HAL_Delay+0x26>
  {
  }
}
 8004c56:	bf00      	nop
 8004c58:	bf00      	nop
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20000220 	.word	0x20000220

08004c64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	609a      	str	r2, [r3, #8]
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	609a      	str	r2, [r3, #8]
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3360      	adds	r3, #96	@ 0x60
 8004cde:	461a      	mov	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4b08      	ldr	r3, [pc, #32]	@ (8004d10 <LL_ADC_SetOffset+0x44>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004d04:	bf00      	nop
 8004d06:	371c      	adds	r7, #28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	03fff000 	.word	0x03fff000

08004d14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	3360      	adds	r3, #96	@ 0x60
 8004d22:	461a      	mov	r2, r3
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3360      	adds	r3, #96	@ 0x60
 8004d50:	461a      	mov	r2, r3
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	431a      	orrs	r2, r3
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004d6a:	bf00      	nop
 8004d6c:	371c      	adds	r7, #28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b087      	sub	sp, #28
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	3360      	adds	r3, #96	@ 0x60
 8004d86:	461a      	mov	r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004da0:	bf00      	nop
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3360      	adds	r3, #96	@ 0x60
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004dd6:	bf00      	nop
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	615a      	str	r2, [r3, #20]
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b087      	sub	sp, #28
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3330      	adds	r3, #48	@ 0x30
 8004e3e:	461a      	mov	r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	0a1b      	lsrs	r3, r3, #8
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	f003 030c 	and.w	r3, r3, #12
 8004e4a:	4413      	add	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	211f      	movs	r1, #31
 8004e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5e:	43db      	mvns	r3, r3
 8004e60:	401a      	ands	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	0e9b      	lsrs	r3, r3, #26
 8004e66:	f003 011f 	and.w	r1, r3, #31
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	fa01 f303 	lsl.w	r3, r1, r3
 8004e74:	431a      	orrs	r2, r3
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004e7a:	bf00      	nop
 8004e7c:	371c      	adds	r7, #28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b087      	sub	sp, #28
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3314      	adds	r3, #20
 8004e96:	461a      	mov	r2, r3
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	0e5b      	lsrs	r3, r3, #25
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	4413      	add	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	0d1b      	lsrs	r3, r3, #20
 8004eae:	f003 031f 	and.w	r3, r3, #31
 8004eb2:	2107      	movs	r1, #7
 8004eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	401a      	ands	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	0d1b      	lsrs	r3, r3, #20
 8004ec0:	f003 031f 	and.w	r3, r3, #31
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004ed0:	bf00      	nop
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	401a      	ands	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f003 0318 	and.w	r3, r3, #24
 8004efe:	4908      	ldr	r1, [pc, #32]	@ (8004f20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004f00:	40d9      	lsrs	r1, r3
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	400b      	ands	r3, r1
 8004f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004f12:	bf00      	nop
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	0007ffff 	.word	0x0007ffff

08004f24 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 031f 	and.w	r3, r3, #31
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004f50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6093      	str	r3, [r2, #8]
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f78:	d101      	bne.n	8004f7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004f9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004fa0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fc8:	d101      	bne.n	8004fce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e000      	b.n	8004fd0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004fec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ff0:	f043 0201 	orr.w	r2, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <LL_ADC_IsEnabled+0x18>
 8005018:	2301      	movs	r3, #1
 800501a:	e000      	b.n	800501e <LL_ADC_IsEnabled+0x1a>
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800503a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800503e:	f043 0204 	orr.w	r2, r3, #4
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b04      	cmp	r3, #4
 8005064:	d101      	bne.n	800506a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b08      	cmp	r3, #8
 800508a:	d101      	bne.n	8005090 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
	...

080050a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80050a0:	b590      	push	{r4, r7, lr}
 80050a2:	b089      	sub	sp, #36	@ 0x24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e1a9      	b.n	800540e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d109      	bne.n	80050dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff fa15 	bl	80044f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7ff ff3f 	bl	8004f64 <LL_ADC_IsDeepPowerDownEnabled>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d004      	beq.n	80050f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff ff25 	bl	8004f40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff ff5a 	bl	8004fb4 <LL_ADC_IsInternalRegulatorEnabled>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d115      	bne.n	8005132 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff ff3e 	bl	8004f8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005110:	4b9c      	ldr	r3, [pc, #624]	@ (8005384 <HAL_ADC_Init+0x2e4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	099b      	lsrs	r3, r3, #6
 8005116:	4a9c      	ldr	r2, [pc, #624]	@ (8005388 <HAL_ADC_Init+0x2e8>)
 8005118:	fba2 2303 	umull	r2, r3, r2, r3
 800511c:	099b      	lsrs	r3, r3, #6
 800511e:	3301      	adds	r3, #1
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005124:	e002      	b.n	800512c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	3b01      	subs	r3, #1
 800512a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1f9      	bne.n	8005126 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff ff3c 	bl	8004fb4 <LL_ADC_IsInternalRegulatorEnabled>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10d      	bne.n	800515e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005146:	f043 0210 	orr.w	r2, r3, #16
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005152:	f043 0201 	orr.w	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff ff75 	bl	8005052 <LL_ADC_REG_IsConversionOngoing>
 8005168:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800516e:	f003 0310 	and.w	r3, r3, #16
 8005172:	2b00      	cmp	r3, #0
 8005174:	f040 8142 	bne.w	80053fc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	f040 813e 	bne.w	80053fc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005184:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005188:	f043 0202 	orr.w	r2, r3, #2
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff ff35 	bl	8005004 <LL_ADC_IsEnabled>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d141      	bne.n	8005224 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051a8:	d004      	beq.n	80051b4 <HAL_ADC_Init+0x114>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a77      	ldr	r2, [pc, #476]	@ (800538c <HAL_ADC_Init+0x2ec>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d10f      	bne.n	80051d4 <HAL_ADC_Init+0x134>
 80051b4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80051b8:	f7ff ff24 	bl	8005004 <LL_ADC_IsEnabled>
 80051bc:	4604      	mov	r4, r0
 80051be:	4873      	ldr	r0, [pc, #460]	@ (800538c <HAL_ADC_Init+0x2ec>)
 80051c0:	f7ff ff20 	bl	8005004 <LL_ADC_IsEnabled>
 80051c4:	4603      	mov	r3, r0
 80051c6:	4323      	orrs	r3, r4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bf0c      	ite	eq
 80051cc:	2301      	moveq	r3, #1
 80051ce:	2300      	movne	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	e012      	b.n	80051fa <HAL_ADC_Init+0x15a>
 80051d4:	486e      	ldr	r0, [pc, #440]	@ (8005390 <HAL_ADC_Init+0x2f0>)
 80051d6:	f7ff ff15 	bl	8005004 <LL_ADC_IsEnabled>
 80051da:	4604      	mov	r4, r0
 80051dc:	486d      	ldr	r0, [pc, #436]	@ (8005394 <HAL_ADC_Init+0x2f4>)
 80051de:	f7ff ff11 	bl	8005004 <LL_ADC_IsEnabled>
 80051e2:	4603      	mov	r3, r0
 80051e4:	431c      	orrs	r4, r3
 80051e6:	486c      	ldr	r0, [pc, #432]	@ (8005398 <HAL_ADC_Init+0x2f8>)
 80051e8:	f7ff ff0c 	bl	8005004 <LL_ADC_IsEnabled>
 80051ec:	4603      	mov	r3, r0
 80051ee:	4323      	orrs	r3, r4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d012      	beq.n	8005224 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005206:	d004      	beq.n	8005212 <HAL_ADC_Init+0x172>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a5f      	ldr	r2, [pc, #380]	@ (800538c <HAL_ADC_Init+0x2ec>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d101      	bne.n	8005216 <HAL_ADC_Init+0x176>
 8005212:	4a62      	ldr	r2, [pc, #392]	@ (800539c <HAL_ADC_Init+0x2fc>)
 8005214:	e000      	b.n	8005218 <HAL_ADC_Init+0x178>
 8005216:	4a62      	ldr	r2, [pc, #392]	@ (80053a0 <HAL_ADC_Init+0x300>)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f7ff fd20 	bl	8004c64 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	7f5b      	ldrb	r3, [r3, #29]
 8005228:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800522e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005234:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800523a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005242:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005244:	4313      	orrs	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800524e:	2b01      	cmp	r3, #1
 8005250:	d106      	bne.n	8005260 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005256:	3b01      	subs	r3, #1
 8005258:	045b      	lsls	r3, r3, #17
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	4313      	orrs	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005264:	2b00      	cmp	r3, #0
 8005266:	d009      	beq.n	800527c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005274:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	4313      	orrs	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	4b48      	ldr	r3, [pc, #288]	@ (80053a4 <HAL_ADC_Init+0x304>)
 8005284:	4013      	ands	r3, r2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	69b9      	ldr	r1, [r7, #24]
 800528c:	430b      	orrs	r3, r1
 800528e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff fee4 	bl	8005078 <LL_ADC_INJ_IsConversionOngoing>
 80052b0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d17f      	bne.n	80053b8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d17c      	bne.n	80053b8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80052c2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80052ca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80052cc:	4313      	orrs	r3, r2
 80052ce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052da:	f023 0302 	bic.w	r3, r3, #2
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6812      	ldr	r2, [r2, #0]
 80052e2:	69b9      	ldr	r1, [r7, #24]
 80052e4:	430b      	orrs	r3, r1
 80052e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d017      	beq.n	8005320 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691a      	ldr	r2, [r3, #16]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80052fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005308:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800530c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6911      	ldr	r1, [r2, #16]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6812      	ldr	r2, [r2, #0]
 8005318:	430b      	orrs	r3, r1
 800531a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800531e:	e013      	b.n	8005348 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691a      	ldr	r2, [r3, #16]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800532e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005340:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005344:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800534e:	2b01      	cmp	r3, #1
 8005350:	d12a      	bne.n	80053a8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800535c:	f023 0304 	bic.w	r3, r3, #4
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005368:	4311      	orrs	r1, r2
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800536e:	4311      	orrs	r1, r2
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005374:	430a      	orrs	r2, r1
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0201 	orr.w	r2, r2, #1
 8005380:	611a      	str	r2, [r3, #16]
 8005382:	e019      	b.n	80053b8 <HAL_ADC_Init+0x318>
 8005384:	20000218 	.word	0x20000218
 8005388:	053e2d63 	.word	0x053e2d63
 800538c:	50000100 	.word	0x50000100
 8005390:	50000400 	.word	0x50000400
 8005394:	50000500 	.word	0x50000500
 8005398:	50000600 	.word	0x50000600
 800539c:	50000300 	.word	0x50000300
 80053a0:	50000700 	.word	0x50000700
 80053a4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0201 	bic.w	r2, r2, #1
 80053b6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d10c      	bne.n	80053da <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c6:	f023 010f 	bic.w	r1, r3, #15
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	1e5a      	subs	r2, r3, #1
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80053d8:	e007      	b.n	80053ea <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 020f 	bic.w	r2, r2, #15
 80053e8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ee:	f023 0303 	bic.w	r3, r3, #3
 80053f2:	f043 0201 	orr.w	r2, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80053fa:	e007      	b.n	800540c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005400:	f043 0210 	orr.w	r2, r3, #16
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800540c:	7ffb      	ldrb	r3, [r7, #31]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3724      	adds	r7, #36	@ 0x24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd90      	pop	{r4, r7, pc}
 8005416:	bf00      	nop

08005418 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800542c:	d004      	beq.n	8005438 <HAL_ADC_Start_DMA+0x20>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a5a      	ldr	r2, [pc, #360]	@ (800559c <HAL_ADC_Start_DMA+0x184>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d101      	bne.n	800543c <HAL_ADC_Start_DMA+0x24>
 8005438:	4b59      	ldr	r3, [pc, #356]	@ (80055a0 <HAL_ADC_Start_DMA+0x188>)
 800543a:	e000      	b.n	800543e <HAL_ADC_Start_DMA+0x26>
 800543c:	4b59      	ldr	r3, [pc, #356]	@ (80055a4 <HAL_ADC_Start_DMA+0x18c>)
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff fd70 	bl	8004f24 <LL_ADC_GetMultimode>
 8005444:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff fe01 	bl	8005052 <LL_ADC_REG_IsConversionOngoing>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	f040 809b 	bne.w	800558e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800545e:	2b01      	cmp	r3, #1
 8005460:	d101      	bne.n	8005466 <HAL_ADC_Start_DMA+0x4e>
 8005462:	2302      	movs	r3, #2
 8005464:	e096      	b.n	8005594 <HAL_ADC_Start_DMA+0x17c>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a4d      	ldr	r2, [pc, #308]	@ (80055a8 <HAL_ADC_Start_DMA+0x190>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d008      	beq.n	800548a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d005      	beq.n	800548a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	2b05      	cmp	r3, #5
 8005482:	d002      	beq.n	800548a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	2b09      	cmp	r3, #9
 8005488:	d17a      	bne.n	8005580 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 fcf6 	bl	8005e7c <ADC_Enable>
 8005490:	4603      	mov	r3, r0
 8005492:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005494:	7dfb      	ldrb	r3, [r7, #23]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d16d      	bne.n	8005576 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800549e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80054a2:	f023 0301 	bic.w	r3, r3, #1
 80054a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a3a      	ldr	r2, [pc, #232]	@ (800559c <HAL_ADC_Start_DMA+0x184>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d009      	beq.n	80054cc <HAL_ADC_Start_DMA+0xb4>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a3b      	ldr	r2, [pc, #236]	@ (80055ac <HAL_ADC_Start_DMA+0x194>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d002      	beq.n	80054c8 <HAL_ADC_Start_DMA+0xb0>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	e003      	b.n	80054d0 <HAL_ADC_Start_DMA+0xb8>
 80054c8:	4b39      	ldr	r3, [pc, #228]	@ (80055b0 <HAL_ADC_Start_DMA+0x198>)
 80054ca:	e001      	b.n	80054d0 <HAL_ADC_Start_DMA+0xb8>
 80054cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	6812      	ldr	r2, [r2, #0]
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d002      	beq.n	80054de <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d105      	bne.n	80054ea <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d006      	beq.n	8005504 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054fa:	f023 0206 	bic.w	r2, r3, #6
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	661a      	str	r2, [r3, #96]	@ 0x60
 8005502:	e002      	b.n	800550a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800550e:	4a29      	ldr	r2, [pc, #164]	@ (80055b4 <HAL_ADC_Start_DMA+0x19c>)
 8005510:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005516:	4a28      	ldr	r2, [pc, #160]	@ (80055b8 <HAL_ADC_Start_DMA+0x1a0>)
 8005518:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800551e:	4a27      	ldr	r2, [pc, #156]	@ (80055bc <HAL_ADC_Start_DMA+0x1a4>)
 8005520:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	221c      	movs	r2, #28
 8005528:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0210 	orr.w	r2, r2, #16
 8005540:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68da      	ldr	r2, [r3, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f042 0201 	orr.w	r2, r2, #1
 8005550:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3340      	adds	r3, #64	@ 0x40
 800555c:	4619      	mov	r1, r3
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f001 f89b 	bl	800669c <HAL_DMA_Start_IT>
 8005566:	4603      	mov	r3, r0
 8005568:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff fd5b 	bl	800502a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005574:	e00d      	b.n	8005592 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800557e:	e008      	b.n	8005592 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800558c:	e001      	b.n	8005592 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800558e:	2302      	movs	r3, #2
 8005590:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005592:	7dfb      	ldrb	r3, [r7, #23]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	50000100 	.word	0x50000100
 80055a0:	50000300 	.word	0x50000300
 80055a4:	50000700 	.word	0x50000700
 80055a8:	50000600 	.word	0x50000600
 80055ac:	50000500 	.word	0x50000500
 80055b0:	50000400 	.word	0x50000400
 80055b4:	08005fa9 	.word	0x08005fa9
 80055b8:	08006081 	.word	0x08006081
 80055bc:	0800609d 	.word	0x0800609d

080055c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b0b6      	sub	sp, #216	@ 0xd8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005616:	2b01      	cmp	r3, #1
 8005618:	d102      	bne.n	8005620 <HAL_ADC_ConfigChannel+0x24>
 800561a:	2302      	movs	r3, #2
 800561c:	f000 bc13 	b.w	8005e46 <HAL_ADC_ConfigChannel+0x84a>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff fd10 	bl	8005052 <LL_ADC_REG_IsConversionOngoing>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	f040 83f3 	bne.w	8005e20 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	6859      	ldr	r1, [r3, #4]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	f7ff fbf1 	bl	8004e2e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff fcfe 	bl	8005052 <LL_ADC_REG_IsConversionOngoing>
 8005656:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff fd0a 	bl	8005078 <LL_ADC_INJ_IsConversionOngoing>
 8005664:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005668:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800566c:	2b00      	cmp	r3, #0
 800566e:	f040 81d9 	bne.w	8005a24 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005672:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005676:	2b00      	cmp	r3, #0
 8005678:	f040 81d4 	bne.w	8005a24 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005684:	d10f      	bne.n	80056a6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2200      	movs	r2, #0
 8005690:	4619      	mov	r1, r3
 8005692:	f7ff fbf8 	bl	8004e86 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fb9f 	bl	8004de2 <LL_ADC_SetSamplingTimeCommonConfig>
 80056a4:	e00e      	b.n	80056c4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6819      	ldr	r1, [r3, #0]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	461a      	mov	r2, r3
 80056b4:	f7ff fbe7 	bl	8004e86 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2100      	movs	r1, #0
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff fb8f 	bl	8004de2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	695a      	ldr	r2, [r3, #20]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	08db      	lsrs	r3, r3, #3
 80056d0:	f003 0303 	and.w	r3, r3, #3
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d022      	beq.n	800572c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6818      	ldr	r0, [r3, #0]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6919      	ldr	r1, [r3, #16]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80056f6:	f7ff fae9 	bl	8004ccc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	6919      	ldr	r1, [r3, #16]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	461a      	mov	r2, r3
 8005708:	f7ff fb35 	bl	8004d76 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6818      	ldr	r0, [r3, #0]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005718:	2b01      	cmp	r3, #1
 800571a:	d102      	bne.n	8005722 <HAL_ADC_ConfigChannel+0x126>
 800571c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005720:	e000      	b.n	8005724 <HAL_ADC_ConfigChannel+0x128>
 8005722:	2300      	movs	r3, #0
 8005724:	461a      	mov	r2, r3
 8005726:	f7ff fb41 	bl	8004dac <LL_ADC_SetOffsetSaturation>
 800572a:	e17b      	b.n	8005a24 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2100      	movs	r1, #0
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff faee 	bl	8004d14 <LL_ADC_GetOffsetChannel>
 8005738:	4603      	mov	r3, r0
 800573a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10a      	bne.n	8005758 <HAL_ADC_ConfigChannel+0x15c>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2100      	movs	r1, #0
 8005748:	4618      	mov	r0, r3
 800574a:	f7ff fae3 	bl	8004d14 <LL_ADC_GetOffsetChannel>
 800574e:	4603      	mov	r3, r0
 8005750:	0e9b      	lsrs	r3, r3, #26
 8005752:	f003 021f 	and.w	r2, r3, #31
 8005756:	e01e      	b.n	8005796 <HAL_ADC_ConfigChannel+0x19a>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2100      	movs	r1, #0
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff fad8 	bl	8004d14 <LL_ADC_GetOffsetChannel>
 8005764:	4603      	mov	r3, r0
 8005766:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800576e:	fa93 f3a3 	rbit	r3, r3
 8005772:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005776:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800577a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800577e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005786:	2320      	movs	r3, #32
 8005788:	e004      	b.n	8005794 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800578a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800578e:	fab3 f383 	clz	r3, r3
 8005792:	b2db      	uxtb	r3, r3
 8005794:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d105      	bne.n	80057ae <HAL_ADC_ConfigChannel+0x1b2>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	0e9b      	lsrs	r3, r3, #26
 80057a8:	f003 031f 	and.w	r3, r3, #31
 80057ac:	e018      	b.n	80057e0 <HAL_ADC_ConfigChannel+0x1e4>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80057ba:	fa93 f3a3 	rbit	r3, r3
 80057be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80057c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80057ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80057d2:	2320      	movs	r3, #32
 80057d4:	e004      	b.n	80057e0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80057d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057da:	fab3 f383 	clz	r3, r3
 80057de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d106      	bne.n	80057f2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2200      	movs	r2, #0
 80057ea:	2100      	movs	r1, #0
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff faa7 	bl	8004d40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2101      	movs	r1, #1
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff fa8b 	bl	8004d14 <LL_ADC_GetOffsetChannel>
 80057fe:	4603      	mov	r3, r0
 8005800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10a      	bne.n	800581e <HAL_ADC_ConfigChannel+0x222>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2101      	movs	r1, #1
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff fa80 	bl	8004d14 <LL_ADC_GetOffsetChannel>
 8005814:	4603      	mov	r3, r0
 8005816:	0e9b      	lsrs	r3, r3, #26
 8005818:	f003 021f 	and.w	r2, r3, #31
 800581c:	e01e      	b.n	800585c <HAL_ADC_ConfigChannel+0x260>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2101      	movs	r1, #1
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff fa75 	bl	8004d14 <LL_ADC_GetOffsetChannel>
 800582a:	4603      	mov	r3, r0
 800582c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005830:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005834:	fa93 f3a3 	rbit	r3, r3
 8005838:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800583c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005840:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005844:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800584c:	2320      	movs	r3, #32
 800584e:	e004      	b.n	800585a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005850:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005854:	fab3 f383 	clz	r3, r3
 8005858:	b2db      	uxtb	r3, r3
 800585a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005864:	2b00      	cmp	r3, #0
 8005866:	d105      	bne.n	8005874 <HAL_ADC_ConfigChannel+0x278>
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	0e9b      	lsrs	r3, r3, #26
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	e018      	b.n	80058a6 <HAL_ADC_ConfigChannel+0x2aa>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005880:	fa93 f3a3 	rbit	r3, r3
 8005884:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005888:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800588c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005890:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005898:	2320      	movs	r3, #32
 800589a:	e004      	b.n	80058a6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800589c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80058a0:	fab3 f383 	clz	r3, r3
 80058a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d106      	bne.n	80058b8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2200      	movs	r2, #0
 80058b0:	2101      	movs	r1, #1
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff fa44 	bl	8004d40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2102      	movs	r1, #2
 80058be:	4618      	mov	r0, r3
 80058c0:	f7ff fa28 	bl	8004d14 <LL_ADC_GetOffsetChannel>
 80058c4:	4603      	mov	r3, r0
 80058c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <HAL_ADC_ConfigChannel+0x2e8>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2102      	movs	r1, #2
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff fa1d 	bl	8004d14 <LL_ADC_GetOffsetChannel>
 80058da:	4603      	mov	r3, r0
 80058dc:	0e9b      	lsrs	r3, r3, #26
 80058de:	f003 021f 	and.w	r2, r3, #31
 80058e2:	e01e      	b.n	8005922 <HAL_ADC_ConfigChannel+0x326>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2102      	movs	r1, #2
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff fa12 	bl	8004d14 <LL_ADC_GetOffsetChannel>
 80058f0:	4603      	mov	r3, r0
 80058f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058fa:	fa93 f3a3 	rbit	r3, r3
 80058fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005902:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005906:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800590a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005912:	2320      	movs	r3, #32
 8005914:	e004      	b.n	8005920 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005916:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800591a:	fab3 f383 	clz	r3, r3
 800591e:	b2db      	uxtb	r3, r3
 8005920:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800592a:	2b00      	cmp	r3, #0
 800592c:	d105      	bne.n	800593a <HAL_ADC_ConfigChannel+0x33e>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	0e9b      	lsrs	r3, r3, #26
 8005934:	f003 031f 	and.w	r3, r3, #31
 8005938:	e016      	b.n	8005968 <HAL_ADC_ConfigChannel+0x36c>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005942:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005946:	fa93 f3a3 	rbit	r3, r3
 800594a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800594c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800594e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005952:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800595a:	2320      	movs	r3, #32
 800595c:	e004      	b.n	8005968 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800595e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005962:	fab3 f383 	clz	r3, r3
 8005966:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005968:	429a      	cmp	r2, r3
 800596a:	d106      	bne.n	800597a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2200      	movs	r2, #0
 8005972:	2102      	movs	r1, #2
 8005974:	4618      	mov	r0, r3
 8005976:	f7ff f9e3 	bl	8004d40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2103      	movs	r1, #3
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff f9c7 	bl	8004d14 <LL_ADC_GetOffsetChannel>
 8005986:	4603      	mov	r3, r0
 8005988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10a      	bne.n	80059a6 <HAL_ADC_ConfigChannel+0x3aa>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2103      	movs	r1, #3
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff f9bc 	bl	8004d14 <LL_ADC_GetOffsetChannel>
 800599c:	4603      	mov	r3, r0
 800599e:	0e9b      	lsrs	r3, r3, #26
 80059a0:	f003 021f 	and.w	r2, r3, #31
 80059a4:	e017      	b.n	80059d6 <HAL_ADC_ConfigChannel+0x3da>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2103      	movs	r1, #3
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff f9b1 	bl	8004d14 <LL_ADC_GetOffsetChannel>
 80059b2:	4603      	mov	r3, r0
 80059b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059b8:	fa93 f3a3 	rbit	r3, r3
 80059bc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80059be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059c0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80059c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80059c8:	2320      	movs	r3, #32
 80059ca:	e003      	b.n	80059d4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80059cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059ce:	fab3 f383 	clz	r3, r3
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d105      	bne.n	80059ee <HAL_ADC_ConfigChannel+0x3f2>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	0e9b      	lsrs	r3, r3, #26
 80059e8:	f003 031f 	and.w	r3, r3, #31
 80059ec:	e011      	b.n	8005a12 <HAL_ADC_ConfigChannel+0x416>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059f6:	fa93 f3a3 	rbit	r3, r3
 80059fa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80059fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005a00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005a06:	2320      	movs	r3, #32
 8005a08:	e003      	b.n	8005a12 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005a0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a0c:	fab3 f383 	clz	r3, r3
 8005a10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d106      	bne.n	8005a24 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2103      	movs	r1, #3
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff f98e 	bl	8004d40 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff faeb 	bl	8005004 <LL_ADC_IsEnabled>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f040 813d 	bne.w	8005cb0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6818      	ldr	r0, [r3, #0]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	6819      	ldr	r1, [r3, #0]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	461a      	mov	r2, r3
 8005a44:	f7ff fa4a 	bl	8004edc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	4aa2      	ldr	r2, [pc, #648]	@ (8005cd8 <HAL_ADC_ConfigChannel+0x6dc>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	f040 812e 	bne.w	8005cb0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10b      	bne.n	8005a7c <HAL_ADC_ConfigChannel+0x480>
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	0e9b      	lsrs	r3, r3, #26
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	f003 031f 	and.w	r3, r3, #31
 8005a70:	2b09      	cmp	r3, #9
 8005a72:	bf94      	ite	ls
 8005a74:	2301      	movls	r3, #1
 8005a76:	2300      	movhi	r3, #0
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	e019      	b.n	8005ab0 <HAL_ADC_ConfigChannel+0x4b4>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a84:	fa93 f3a3 	rbit	r3, r3
 8005a88:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005a8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a8c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005a8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005a94:	2320      	movs	r3, #32
 8005a96:	e003      	b.n	8005aa0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005a98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a9a:	fab3 f383 	clz	r3, r3
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	f003 031f 	and.w	r3, r3, #31
 8005aa6:	2b09      	cmp	r3, #9
 8005aa8:	bf94      	ite	ls
 8005aaa:	2301      	movls	r3, #1
 8005aac:	2300      	movhi	r3, #0
 8005aae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d079      	beq.n	8005ba8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d107      	bne.n	8005ad0 <HAL_ADC_ConfigChannel+0x4d4>
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	0e9b      	lsrs	r3, r3, #26
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	069b      	lsls	r3, r3, #26
 8005aca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ace:	e015      	b.n	8005afc <HAL_ADC_ConfigChannel+0x500>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ad8:	fa93 f3a3 	rbit	r3, r3
 8005adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005ade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ae0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005ae8:	2320      	movs	r3, #32
 8005aea:	e003      	b.n	8005af4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aee:	fab3 f383 	clz	r3, r3
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	3301      	adds	r3, #1
 8005af6:	069b      	lsls	r3, r3, #26
 8005af8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d109      	bne.n	8005b1c <HAL_ADC_ConfigChannel+0x520>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	0e9b      	lsrs	r3, r3, #26
 8005b0e:	3301      	adds	r3, #1
 8005b10:	f003 031f 	and.w	r3, r3, #31
 8005b14:	2101      	movs	r1, #1
 8005b16:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1a:	e017      	b.n	8005b4c <HAL_ADC_ConfigChannel+0x550>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b24:	fa93 f3a3 	rbit	r3, r3
 8005b28:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005b34:	2320      	movs	r3, #32
 8005b36:	e003      	b.n	8005b40 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005b38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b3a:	fab3 f383 	clz	r3, r3
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	3301      	adds	r3, #1
 8005b42:	f003 031f 	and.w	r3, r3, #31
 8005b46:	2101      	movs	r1, #1
 8005b48:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4c:	ea42 0103 	orr.w	r1, r2, r3
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <HAL_ADC_ConfigChannel+0x576>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	0e9b      	lsrs	r3, r3, #26
 8005b62:	3301      	adds	r3, #1
 8005b64:	f003 021f 	and.w	r2, r3, #31
 8005b68:	4613      	mov	r3, r2
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	4413      	add	r3, r2
 8005b6e:	051b      	lsls	r3, r3, #20
 8005b70:	e018      	b.n	8005ba4 <HAL_ADC_ConfigChannel+0x5a8>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7a:	fa93 f3a3 	rbit	r3, r3
 8005b7e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005b8a:	2320      	movs	r3, #32
 8005b8c:	e003      	b.n	8005b96 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b90:	fab3 f383 	clz	r3, r3
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	3301      	adds	r3, #1
 8005b98:	f003 021f 	and.w	r2, r3, #31
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	4413      	add	r3, r2
 8005ba2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	e07e      	b.n	8005ca6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d107      	bne.n	8005bc4 <HAL_ADC_ConfigChannel+0x5c8>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	0e9b      	lsrs	r3, r3, #26
 8005bba:	3301      	adds	r3, #1
 8005bbc:	069b      	lsls	r3, r3, #26
 8005bbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005bc2:	e015      	b.n	8005bf0 <HAL_ADC_ConfigChannel+0x5f4>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bcc:	fa93 f3a3 	rbit	r3, r3
 8005bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005bdc:	2320      	movs	r3, #32
 8005bde:	e003      	b.n	8005be8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be2:	fab3 f383 	clz	r3, r3
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	3301      	adds	r3, #1
 8005bea:	069b      	lsls	r3, r3, #26
 8005bec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d109      	bne.n	8005c10 <HAL_ADC_ConfigChannel+0x614>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	0e9b      	lsrs	r3, r3, #26
 8005c02:	3301      	adds	r3, #1
 8005c04:	f003 031f 	and.w	r3, r3, #31
 8005c08:	2101      	movs	r1, #1
 8005c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c0e:	e017      	b.n	8005c40 <HAL_ADC_ConfigChannel+0x644>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	fa93 f3a3 	rbit	r3, r3
 8005c1c:	61fb      	str	r3, [r7, #28]
  return result;
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005c28:	2320      	movs	r3, #32
 8005c2a:	e003      	b.n	8005c34 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2e:	fab3 f383 	clz	r3, r3
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	3301      	adds	r3, #1
 8005c36:	f003 031f 	and.w	r3, r3, #31
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c40:	ea42 0103 	orr.w	r1, r2, r3
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10d      	bne.n	8005c6c <HAL_ADC_ConfigChannel+0x670>
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	0e9b      	lsrs	r3, r3, #26
 8005c56:	3301      	adds	r3, #1
 8005c58:	f003 021f 	and.w	r2, r3, #31
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	4413      	add	r3, r2
 8005c62:	3b1e      	subs	r3, #30
 8005c64:	051b      	lsls	r3, r3, #20
 8005c66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005c6a:	e01b      	b.n	8005ca4 <HAL_ADC_ConfigChannel+0x6a8>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	fa93 f3a3 	rbit	r3, r3
 8005c78:	613b      	str	r3, [r7, #16]
  return result;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005c84:	2320      	movs	r3, #32
 8005c86:	e003      	b.n	8005c90 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	fab3 f383 	clz	r3, r3
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	3301      	adds	r3, #1
 8005c92:	f003 021f 	and.w	r2, r3, #31
 8005c96:	4613      	mov	r3, r2
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	4413      	add	r3, r2
 8005c9c:	3b1e      	subs	r3, #30
 8005c9e:	051b      	lsls	r3, r3, #20
 8005ca0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ca4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005caa:	4619      	mov	r1, r3
 8005cac:	f7ff f8eb 	bl	8004e86 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	4b09      	ldr	r3, [pc, #36]	@ (8005cdc <HAL_ADC_ConfigChannel+0x6e0>)
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 80be 	beq.w	8005e3a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cc6:	d004      	beq.n	8005cd2 <HAL_ADC_ConfigChannel+0x6d6>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a04      	ldr	r2, [pc, #16]	@ (8005ce0 <HAL_ADC_ConfigChannel+0x6e4>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d10a      	bne.n	8005ce8 <HAL_ADC_ConfigChannel+0x6ec>
 8005cd2:	4b04      	ldr	r3, [pc, #16]	@ (8005ce4 <HAL_ADC_ConfigChannel+0x6e8>)
 8005cd4:	e009      	b.n	8005cea <HAL_ADC_ConfigChannel+0x6ee>
 8005cd6:	bf00      	nop
 8005cd8:	407f0000 	.word	0x407f0000
 8005cdc:	80080000 	.word	0x80080000
 8005ce0:	50000100 	.word	0x50000100
 8005ce4:	50000300 	.word	0x50000300
 8005ce8:	4b59      	ldr	r3, [pc, #356]	@ (8005e50 <HAL_ADC_ConfigChannel+0x854>)
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fe ffe0 	bl	8004cb0 <LL_ADC_GetCommonPathInternalCh>
 8005cf0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a56      	ldr	r2, [pc, #344]	@ (8005e54 <HAL_ADC_ConfigChannel+0x858>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d004      	beq.n	8005d08 <HAL_ADC_ConfigChannel+0x70c>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a55      	ldr	r2, [pc, #340]	@ (8005e58 <HAL_ADC_ConfigChannel+0x85c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d13a      	bne.n	8005d7e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005d08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d134      	bne.n	8005d7e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d1c:	d005      	beq.n	8005d2a <HAL_ADC_ConfigChannel+0x72e>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a4e      	ldr	r2, [pc, #312]	@ (8005e5c <HAL_ADC_ConfigChannel+0x860>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	f040 8085 	bne.w	8005e34 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d32:	d004      	beq.n	8005d3e <HAL_ADC_ConfigChannel+0x742>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a49      	ldr	r2, [pc, #292]	@ (8005e60 <HAL_ADC_ConfigChannel+0x864>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d101      	bne.n	8005d42 <HAL_ADC_ConfigChannel+0x746>
 8005d3e:	4a49      	ldr	r2, [pc, #292]	@ (8005e64 <HAL_ADC_ConfigChannel+0x868>)
 8005d40:	e000      	b.n	8005d44 <HAL_ADC_ConfigChannel+0x748>
 8005d42:	4a43      	ldr	r2, [pc, #268]	@ (8005e50 <HAL_ADC_ConfigChannel+0x854>)
 8005d44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d48:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	f7fe ff9b 	bl	8004c8a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d54:	4b44      	ldr	r3, [pc, #272]	@ (8005e68 <HAL_ADC_ConfigChannel+0x86c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	099b      	lsrs	r3, r3, #6
 8005d5a:	4a44      	ldr	r2, [pc, #272]	@ (8005e6c <HAL_ADC_ConfigChannel+0x870>)
 8005d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d60:	099b      	lsrs	r3, r3, #6
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	4613      	mov	r3, r2
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	4413      	add	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005d6e:	e002      	b.n	8005d76 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3b01      	subs	r3, #1
 8005d74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1f9      	bne.n	8005d70 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d7c:	e05a      	b.n	8005e34 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a3b      	ldr	r2, [pc, #236]	@ (8005e70 <HAL_ADC_ConfigChannel+0x874>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d125      	bne.n	8005dd4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005d88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d11f      	bne.n	8005dd4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a31      	ldr	r2, [pc, #196]	@ (8005e60 <HAL_ADC_ConfigChannel+0x864>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d104      	bne.n	8005da8 <HAL_ADC_ConfigChannel+0x7ac>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a34      	ldr	r2, [pc, #208]	@ (8005e74 <HAL_ADC_ConfigChannel+0x878>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d047      	beq.n	8005e38 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005db0:	d004      	beq.n	8005dbc <HAL_ADC_ConfigChannel+0x7c0>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a2a      	ldr	r2, [pc, #168]	@ (8005e60 <HAL_ADC_ConfigChannel+0x864>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d101      	bne.n	8005dc0 <HAL_ADC_ConfigChannel+0x7c4>
 8005dbc:	4a29      	ldr	r2, [pc, #164]	@ (8005e64 <HAL_ADC_ConfigChannel+0x868>)
 8005dbe:	e000      	b.n	8005dc2 <HAL_ADC_ConfigChannel+0x7c6>
 8005dc0:	4a23      	ldr	r2, [pc, #140]	@ (8005e50 <HAL_ADC_ConfigChannel+0x854>)
 8005dc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005dc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4610      	mov	r0, r2
 8005dce:	f7fe ff5c 	bl	8004c8a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005dd2:	e031      	b.n	8005e38 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a27      	ldr	r2, [pc, #156]	@ (8005e78 <HAL_ADC_ConfigChannel+0x87c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d12d      	bne.n	8005e3a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005dde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d127      	bne.n	8005e3a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a1c      	ldr	r2, [pc, #112]	@ (8005e60 <HAL_ADC_ConfigChannel+0x864>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d022      	beq.n	8005e3a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005dfc:	d004      	beq.n	8005e08 <HAL_ADC_ConfigChannel+0x80c>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a17      	ldr	r2, [pc, #92]	@ (8005e60 <HAL_ADC_ConfigChannel+0x864>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d101      	bne.n	8005e0c <HAL_ADC_ConfigChannel+0x810>
 8005e08:	4a16      	ldr	r2, [pc, #88]	@ (8005e64 <HAL_ADC_ConfigChannel+0x868>)
 8005e0a:	e000      	b.n	8005e0e <HAL_ADC_ConfigChannel+0x812>
 8005e0c:	4a10      	ldr	r2, [pc, #64]	@ (8005e50 <HAL_ADC_ConfigChannel+0x854>)
 8005e0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005e16:	4619      	mov	r1, r3
 8005e18:	4610      	mov	r0, r2
 8005e1a:	f7fe ff36 	bl	8004c8a <LL_ADC_SetCommonPathInternalCh>
 8005e1e:	e00c      	b.n	8005e3a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e24:	f043 0220 	orr.w	r2, r3, #32
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005e32:	e002      	b.n	8005e3a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e34:	bf00      	nop
 8005e36:	e000      	b.n	8005e3a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005e42:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	37d8      	adds	r7, #216	@ 0xd8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	50000700 	.word	0x50000700
 8005e54:	c3210000 	.word	0xc3210000
 8005e58:	90c00010 	.word	0x90c00010
 8005e5c:	50000600 	.word	0x50000600
 8005e60:	50000100 	.word	0x50000100
 8005e64:	50000300 	.word	0x50000300
 8005e68:	20000218 	.word	0x20000218
 8005e6c:	053e2d63 	.word	0x053e2d63
 8005e70:	c7520000 	.word	0xc7520000
 8005e74:	50000500 	.word	0x50000500
 8005e78:	cb840000 	.word	0xcb840000

08005e7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff f8b9 	bl	8005004 <LL_ADC_IsEnabled>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d176      	bne.n	8005f86 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	4b3c      	ldr	r3, [pc, #240]	@ (8005f90 <ADC_Enable+0x114>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00d      	beq.n	8005ec2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eaa:	f043 0210 	orr.w	r2, r3, #16
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eb6:	f043 0201 	orr.w	r2, r3, #1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e062      	b.n	8005f88 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff f888 	bl	8004fdc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ed4:	d004      	beq.n	8005ee0 <ADC_Enable+0x64>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a2e      	ldr	r2, [pc, #184]	@ (8005f94 <ADC_Enable+0x118>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d101      	bne.n	8005ee4 <ADC_Enable+0x68>
 8005ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8005f98 <ADC_Enable+0x11c>)
 8005ee2:	e000      	b.n	8005ee6 <ADC_Enable+0x6a>
 8005ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8005f9c <ADC_Enable+0x120>)
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fe fee2 	bl	8004cb0 <LL_ADC_GetCommonPathInternalCh>
 8005eec:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005eee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d013      	beq.n	8005f1e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8005fa0 <ADC_Enable+0x124>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	099b      	lsrs	r3, r3, #6
 8005efc:	4a29      	ldr	r2, [pc, #164]	@ (8005fa4 <ADC_Enable+0x128>)
 8005efe:	fba2 2303 	umull	r2, r3, r2, r3
 8005f02:	099b      	lsrs	r3, r3, #6
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	4613      	mov	r3, r2
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005f10:	e002      	b.n	8005f18 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1f9      	bne.n	8005f12 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005f1e:	f7fe fe73 	bl	8004c08 <HAL_GetTick>
 8005f22:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005f24:	e028      	b.n	8005f78 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff f86a 	bl	8005004 <LL_ADC_IsEnabled>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d104      	bne.n	8005f40 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff f84e 	bl	8004fdc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005f40:	f7fe fe62 	bl	8004c08 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d914      	bls.n	8005f78 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d00d      	beq.n	8005f78 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f60:	f043 0210 	orr.w	r2, r3, #16
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f6c:	f043 0201 	orr.w	r2, r3, #1
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e007      	b.n	8005f88 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d1cf      	bne.n	8005f26 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	8000003f 	.word	0x8000003f
 8005f94:	50000100 	.word	0x50000100
 8005f98:	50000300 	.word	0x50000300
 8005f9c:	50000700 	.word	0x50000700
 8005fa0:	20000218 	.word	0x20000218
 8005fa4:	053e2d63 	.word	0x053e2d63

08005fa8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d14b      	bne.n	800605a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fc6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0308 	and.w	r3, r3, #8
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d021      	beq.n	8006020 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fe ff11 	bl	8004e08 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d032      	beq.n	8006052 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d12b      	bne.n	8006052 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ffe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800600a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d11f      	bne.n	8006052 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006016:	f043 0201 	orr.w	r2, r3, #1
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800601e:	e018      	b.n	8006052 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d111      	bne.n	8006052 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006032:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800603e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d105      	bne.n	8006052 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800604a:	f043 0201 	orr.w	r2, r3, #1
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f7ff fab4 	bl	80055c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006058:	e00e      	b.n	8006078 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800605e:	f003 0310 	and.w	r3, r3, #16
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f7ff fabe 	bl	80055e8 <HAL_ADC_ErrorCallback>
}
 800606c:	e004      	b.n	8006078 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	4798      	blx	r3
}
 8006078:	bf00      	nop
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7ff faa0 	bl	80055d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006094:	bf00      	nop
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ba:	f043 0204 	orr.w	r2, r3, #4
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f7ff fa90 	bl	80055e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80060c8:	bf00      	nop
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <LL_ADC_IsEnabled>:
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <LL_ADC_IsEnabled+0x18>
 80060e4:	2301      	movs	r3, #1
 80060e6:	e000      	b.n	80060ea <LL_ADC_IsEnabled+0x1a>
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 0304 	and.w	r3, r3, #4
 8006106:	2b04      	cmp	r3, #4
 8006108:	d101      	bne.n	800610e <LL_ADC_REG_IsConversionOngoing+0x18>
 800610a:	2301      	movs	r3, #1
 800610c:	e000      	b.n	8006110 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800611c:	b590      	push	{r4, r7, lr}
 800611e:	b0a1      	sub	sp, #132	@ 0x84
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006132:	2b01      	cmp	r3, #1
 8006134:	d101      	bne.n	800613a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006136:	2302      	movs	r3, #2
 8006138:	e0e7      	b.n	800630a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006142:	2300      	movs	r3, #0
 8006144:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006146:	2300      	movs	r3, #0
 8006148:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006152:	d102      	bne.n	800615a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006154:	4b6f      	ldr	r3, [pc, #444]	@ (8006314 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006156:	60bb      	str	r3, [r7, #8]
 8006158:	e009      	b.n	800616e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a6e      	ldr	r2, [pc, #440]	@ (8006318 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d102      	bne.n	800616a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006164:	4b6d      	ldr	r3, [pc, #436]	@ (800631c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006166:	60bb      	str	r3, [r7, #8]
 8006168:	e001      	b.n	800616e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800616a:	2300      	movs	r3, #0
 800616c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10b      	bne.n	800618c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006178:	f043 0220 	orr.w	r2, r3, #32
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e0be      	b.n	800630a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff ffb1 	bl	80060f6 <LL_ADC_REG_IsConversionOngoing>
 8006194:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4618      	mov	r0, r3
 800619c:	f7ff ffab 	bl	80060f6 <LL_ADC_REG_IsConversionOngoing>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f040 80a0 	bne.w	80062e8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80061a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f040 809c 	bne.w	80062e8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061b8:	d004      	beq.n	80061c4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a55      	ldr	r2, [pc, #340]	@ (8006314 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d101      	bne.n	80061c8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80061c4:	4b56      	ldr	r3, [pc, #344]	@ (8006320 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80061c6:	e000      	b.n	80061ca <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80061c8:	4b56      	ldr	r3, [pc, #344]	@ (8006324 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80061ca:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d04b      	beq.n	800626c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80061d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	6859      	ldr	r1, [r3, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80061e6:	035b      	lsls	r3, r3, #13
 80061e8:	430b      	orrs	r3, r1
 80061ea:	431a      	orrs	r2, r3
 80061ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061f8:	d004      	beq.n	8006204 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a45      	ldr	r2, [pc, #276]	@ (8006314 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d10f      	bne.n	8006224 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006204:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006208:	f7ff ff62 	bl	80060d0 <LL_ADC_IsEnabled>
 800620c:	4604      	mov	r4, r0
 800620e:	4841      	ldr	r0, [pc, #260]	@ (8006314 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006210:	f7ff ff5e 	bl	80060d0 <LL_ADC_IsEnabled>
 8006214:	4603      	mov	r3, r0
 8006216:	4323      	orrs	r3, r4
 8006218:	2b00      	cmp	r3, #0
 800621a:	bf0c      	ite	eq
 800621c:	2301      	moveq	r3, #1
 800621e:	2300      	movne	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	e012      	b.n	800624a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006224:	483c      	ldr	r0, [pc, #240]	@ (8006318 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006226:	f7ff ff53 	bl	80060d0 <LL_ADC_IsEnabled>
 800622a:	4604      	mov	r4, r0
 800622c:	483b      	ldr	r0, [pc, #236]	@ (800631c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800622e:	f7ff ff4f 	bl	80060d0 <LL_ADC_IsEnabled>
 8006232:	4603      	mov	r3, r0
 8006234:	431c      	orrs	r4, r3
 8006236:	483c      	ldr	r0, [pc, #240]	@ (8006328 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006238:	f7ff ff4a 	bl	80060d0 <LL_ADC_IsEnabled>
 800623c:	4603      	mov	r3, r0
 800623e:	4323      	orrs	r3, r4
 8006240:	2b00      	cmp	r3, #0
 8006242:	bf0c      	ite	eq
 8006244:	2301      	moveq	r3, #1
 8006246:	2300      	movne	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d056      	beq.n	80062fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800624e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006256:	f023 030f 	bic.w	r3, r3, #15
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	6811      	ldr	r1, [r2, #0]
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	6892      	ldr	r2, [r2, #8]
 8006262:	430a      	orrs	r2, r1
 8006264:	431a      	orrs	r2, r3
 8006266:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006268:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800626a:	e047      	b.n	80062fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800626c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006274:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006276:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006280:	d004      	beq.n	800628c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a23      	ldr	r2, [pc, #140]	@ (8006314 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d10f      	bne.n	80062ac <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800628c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006290:	f7ff ff1e 	bl	80060d0 <LL_ADC_IsEnabled>
 8006294:	4604      	mov	r4, r0
 8006296:	481f      	ldr	r0, [pc, #124]	@ (8006314 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006298:	f7ff ff1a 	bl	80060d0 <LL_ADC_IsEnabled>
 800629c:	4603      	mov	r3, r0
 800629e:	4323      	orrs	r3, r4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bf0c      	ite	eq
 80062a4:	2301      	moveq	r3, #1
 80062a6:	2300      	movne	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	e012      	b.n	80062d2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80062ac:	481a      	ldr	r0, [pc, #104]	@ (8006318 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80062ae:	f7ff ff0f 	bl	80060d0 <LL_ADC_IsEnabled>
 80062b2:	4604      	mov	r4, r0
 80062b4:	4819      	ldr	r0, [pc, #100]	@ (800631c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80062b6:	f7ff ff0b 	bl	80060d0 <LL_ADC_IsEnabled>
 80062ba:	4603      	mov	r3, r0
 80062bc:	431c      	orrs	r4, r3
 80062be:	481a      	ldr	r0, [pc, #104]	@ (8006328 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80062c0:	f7ff ff06 	bl	80060d0 <LL_ADC_IsEnabled>
 80062c4:	4603      	mov	r3, r0
 80062c6:	4323      	orrs	r3, r4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	bf0c      	ite	eq
 80062cc:	2301      	moveq	r3, #1
 80062ce:	2300      	movne	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d012      	beq.n	80062fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80062d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80062de:	f023 030f 	bic.w	r3, r3, #15
 80062e2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80062e4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80062e6:	e009      	b.n	80062fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ec:	f043 0220 	orr.w	r2, r3, #32
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80062fa:	e000      	b.n	80062fe <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80062fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006306:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800630a:	4618      	mov	r0, r3
 800630c:	3784      	adds	r7, #132	@ 0x84
 800630e:	46bd      	mov	sp, r7
 8006310:	bd90      	pop	{r4, r7, pc}
 8006312:	bf00      	nop
 8006314:	50000100 	.word	0x50000100
 8006318:	50000400 	.word	0x50000400
 800631c:	50000500 	.word	0x50000500
 8006320:	50000300 	.word	0x50000300
 8006324:	50000700 	.word	0x50000700
 8006328:	50000600 	.word	0x50000600

0800632c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800633c:	4b0c      	ldr	r3, [pc, #48]	@ (8006370 <__NVIC_SetPriorityGrouping+0x44>)
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006348:	4013      	ands	r3, r2
 800634a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006354:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800635c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800635e:	4a04      	ldr	r2, [pc, #16]	@ (8006370 <__NVIC_SetPriorityGrouping+0x44>)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	60d3      	str	r3, [r2, #12]
}
 8006364:	bf00      	nop
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	e000ed00 	.word	0xe000ed00

08006374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006374:	b480      	push	{r7}
 8006376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006378:	4b04      	ldr	r3, [pc, #16]	@ (800638c <__NVIC_GetPriorityGrouping+0x18>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	0a1b      	lsrs	r3, r3, #8
 800637e:	f003 0307 	and.w	r3, r3, #7
}
 8006382:	4618      	mov	r0, r3
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	e000ed00 	.word	0xe000ed00

08006390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	4603      	mov	r3, r0
 8006398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800639a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	db0b      	blt.n	80063ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063a2:	79fb      	ldrb	r3, [r7, #7]
 80063a4:	f003 021f 	and.w	r2, r3, #31
 80063a8:	4907      	ldr	r1, [pc, #28]	@ (80063c8 <__NVIC_EnableIRQ+0x38>)
 80063aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	2001      	movs	r0, #1
 80063b2:	fa00 f202 	lsl.w	r2, r0, r2
 80063b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	e000e100 	.word	0xe000e100

080063cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	4603      	mov	r3, r0
 80063d4:	6039      	str	r1, [r7, #0]
 80063d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	db0a      	blt.n	80063f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	490c      	ldr	r1, [pc, #48]	@ (8006418 <__NVIC_SetPriority+0x4c>)
 80063e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ea:	0112      	lsls	r2, r2, #4
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	440b      	add	r3, r1
 80063f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063f4:	e00a      	b.n	800640c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	4908      	ldr	r1, [pc, #32]	@ (800641c <__NVIC_SetPriority+0x50>)
 80063fc:	79fb      	ldrb	r3, [r7, #7]
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	3b04      	subs	r3, #4
 8006404:	0112      	lsls	r2, r2, #4
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	440b      	add	r3, r1
 800640a:	761a      	strb	r2, [r3, #24]
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	e000e100 	.word	0xe000e100
 800641c:	e000ed00 	.word	0xe000ed00

08006420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006420:	b480      	push	{r7}
 8006422:	b089      	sub	sp, #36	@ 0x24
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f003 0307 	and.w	r3, r3, #7
 8006432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	f1c3 0307 	rsb	r3, r3, #7
 800643a:	2b04      	cmp	r3, #4
 800643c:	bf28      	it	cs
 800643e:	2304      	movcs	r3, #4
 8006440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	3304      	adds	r3, #4
 8006446:	2b06      	cmp	r3, #6
 8006448:	d902      	bls.n	8006450 <NVIC_EncodePriority+0x30>
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	3b03      	subs	r3, #3
 800644e:	e000      	b.n	8006452 <NVIC_EncodePriority+0x32>
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006454:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	fa02 f303 	lsl.w	r3, r2, r3
 800645e:	43da      	mvns	r2, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	401a      	ands	r2, r3
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006468:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	fa01 f303 	lsl.w	r3, r1, r3
 8006472:	43d9      	mvns	r1, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006478:	4313      	orrs	r3, r2
         );
}
 800647a:	4618      	mov	r0, r3
 800647c:	3724      	adds	r7, #36	@ 0x24
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
	...

08006488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3b01      	subs	r3, #1
 8006494:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006498:	d301      	bcc.n	800649e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800649a:	2301      	movs	r3, #1
 800649c:	e00f      	b.n	80064be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800649e:	4a0a      	ldr	r2, [pc, #40]	@ (80064c8 <SysTick_Config+0x40>)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064a6:	210f      	movs	r1, #15
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064ac:	f7ff ff8e 	bl	80063cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064b0:	4b05      	ldr	r3, [pc, #20]	@ (80064c8 <SysTick_Config+0x40>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064b6:	4b04      	ldr	r3, [pc, #16]	@ (80064c8 <SysTick_Config+0x40>)
 80064b8:	2207      	movs	r2, #7
 80064ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	e000e010 	.word	0xe000e010

080064cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff ff29 	bl	800632c <__NVIC_SetPriorityGrouping>
}
 80064da:	bf00      	nop
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b086      	sub	sp, #24
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	4603      	mov	r3, r0
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	607a      	str	r2, [r7, #4]
 80064ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80064f0:	f7ff ff40 	bl	8006374 <__NVIC_GetPriorityGrouping>
 80064f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	6978      	ldr	r0, [r7, #20]
 80064fc:	f7ff ff90 	bl	8006420 <NVIC_EncodePriority>
 8006500:	4602      	mov	r2, r0
 8006502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006506:	4611      	mov	r1, r2
 8006508:	4618      	mov	r0, r3
 800650a:	f7ff ff5f 	bl	80063cc <__NVIC_SetPriority>
}
 800650e:	bf00      	nop
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	4603      	mov	r3, r0
 800651e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff ff33 	bl	8006390 <__NVIC_EnableIRQ>
}
 800652a:	bf00      	nop
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b082      	sub	sp, #8
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff ffa4 	bl	8006488 <SysTick_Config>
 8006540:	4603      	mov	r3, r0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e08d      	b.n	800667a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	461a      	mov	r2, r3
 8006564:	4b47      	ldr	r3, [pc, #284]	@ (8006684 <HAL_DMA_Init+0x138>)
 8006566:	429a      	cmp	r2, r3
 8006568:	d80f      	bhi.n	800658a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	461a      	mov	r2, r3
 8006570:	4b45      	ldr	r3, [pc, #276]	@ (8006688 <HAL_DMA_Init+0x13c>)
 8006572:	4413      	add	r3, r2
 8006574:	4a45      	ldr	r2, [pc, #276]	@ (800668c <HAL_DMA_Init+0x140>)
 8006576:	fba2 2303 	umull	r2, r3, r2, r3
 800657a:	091b      	lsrs	r3, r3, #4
 800657c:	009a      	lsls	r2, r3, #2
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a42      	ldr	r2, [pc, #264]	@ (8006690 <HAL_DMA_Init+0x144>)
 8006586:	641a      	str	r2, [r3, #64]	@ 0x40
 8006588:	e00e      	b.n	80065a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	4b40      	ldr	r3, [pc, #256]	@ (8006694 <HAL_DMA_Init+0x148>)
 8006592:	4413      	add	r3, r2
 8006594:	4a3d      	ldr	r2, [pc, #244]	@ (800668c <HAL_DMA_Init+0x140>)
 8006596:	fba2 2303 	umull	r2, r3, r2, r3
 800659a:	091b      	lsrs	r3, r3, #4
 800659c:	009a      	lsls	r2, r3, #2
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a3c      	ldr	r2, [pc, #240]	@ (8006698 <HAL_DMA_Init+0x14c>)
 80065a6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80065be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80065cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fa76 	bl	8006aec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006608:	d102      	bne.n	8006610 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006618:	b2d2      	uxtb	r2, r2
 800661a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006624:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d010      	beq.n	8006650 <HAL_DMA_Init+0x104>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2b04      	cmp	r3, #4
 8006634:	d80c      	bhi.n	8006650 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fa96 	bl	8006b68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800664c:	605a      	str	r2, [r3, #4]
 800664e:	e008      	b.n	8006662 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	40020407 	.word	0x40020407
 8006688:	bffdfff8 	.word	0xbffdfff8
 800668c:	cccccccd 	.word	0xcccccccd
 8006690:	40020000 	.word	0x40020000
 8006694:	bffdfbf8 	.word	0xbffdfbf8
 8006698:	40020400 	.word	0x40020400

0800669c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
 80066a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <HAL_DMA_Start_IT+0x20>
 80066b8:	2302      	movs	r3, #2
 80066ba:	e066      	b.n	800678a <HAL_DMA_Start_IT+0xee>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d155      	bne.n	800677c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0201 	bic.w	r2, r2, #1
 80066ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f9bb 	bl	8006a70 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d008      	beq.n	8006714 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f042 020e 	orr.w	r2, r2, #14
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	e00f      	b.n	8006734 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0204 	bic.w	r2, r2, #4
 8006722:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f042 020a 	orr.w	r2, r2, #10
 8006732:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d007      	beq.n	8006752 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800674c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006750:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006756:	2b00      	cmp	r3, #0
 8006758:	d007      	beq.n	800676a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006764:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006768:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f042 0201 	orr.w	r2, r2, #1
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	e005      	b.n	8006788 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006784:	2302      	movs	r3, #2
 8006786:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006788:	7dfb      	ldrb	r3, [r7, #23]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3718      	adds	r7, #24
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006792:	b480      	push	{r7}
 8006794:	b085      	sub	sp, #20
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d005      	beq.n	80067b6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2204      	movs	r2, #4
 80067ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	73fb      	strb	r3, [r7, #15]
 80067b4:	e037      	b.n	8006826 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 020e 	bic.w	r2, r2, #14
 80067c4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067d4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0201 	bic.w	r2, r2, #1
 80067e4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ea:	f003 021f 	and.w	r2, r3, #31
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f2:	2101      	movs	r1, #1
 80067f4:	fa01 f202 	lsl.w	r2, r1, r2
 80067f8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006802:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00c      	beq.n	8006826 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006816:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800681a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006824:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8006836:	7bfb      	ldrb	r3, [r7, #15]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800684c:	2300      	movs	r3, #0
 800684e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d00d      	beq.n	8006878 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2204      	movs	r2, #4
 8006860:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	73fb      	strb	r3, [r7, #15]
 8006876:	e047      	b.n	8006908 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 020e 	bic.w	r2, r2, #14
 8006886:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0201 	bic.w	r2, r2, #1
 8006896:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ac:	f003 021f 	and.w	r2, r3, #31
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b4:	2101      	movs	r1, #1
 80068b6:	fa01 f202 	lsl.w	r2, r1, r2
 80068ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80068c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00c      	beq.n	80068e8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80068e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	4798      	blx	r3
    }
  }
  return status;
 8006908:	7bfb      	ldrb	r3, [r7, #15]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800692e:	f003 031f 	and.w	r3, r3, #31
 8006932:	2204      	movs	r2, #4
 8006934:	409a      	lsls	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4013      	ands	r3, r2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d026      	beq.n	800698c <HAL_DMA_IRQHandler+0x7a>
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	2b00      	cmp	r3, #0
 8006946:	d021      	beq.n	800698c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0320 	and.w	r3, r3, #32
 8006952:	2b00      	cmp	r3, #0
 8006954:	d107      	bne.n	8006966 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0204 	bic.w	r2, r2, #4
 8006964:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800696a:	f003 021f 	and.w	r2, r3, #31
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006972:	2104      	movs	r1, #4
 8006974:	fa01 f202 	lsl.w	r2, r1, r2
 8006978:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800697e:	2b00      	cmp	r3, #0
 8006980:	d071      	beq.n	8006a66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800698a:	e06c      	b.n	8006a66 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006990:	f003 031f 	and.w	r3, r3, #31
 8006994:	2202      	movs	r2, #2
 8006996:	409a      	lsls	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4013      	ands	r3, r2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d02e      	beq.n	80069fe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d029      	beq.n	80069fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0320 	and.w	r3, r3, #32
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10b      	bne.n	80069d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 020a 	bic.w	r2, r2, #10
 80069c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d4:	f003 021f 	and.w	r2, r3, #31
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069dc:	2102      	movs	r1, #2
 80069de:	fa01 f202 	lsl.w	r2, r1, r2
 80069e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d038      	beq.n	8006a66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80069fc:	e033      	b.n	8006a66 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a02:	f003 031f 	and.w	r3, r3, #31
 8006a06:	2208      	movs	r2, #8
 8006a08:	409a      	lsls	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d02a      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f003 0308 	and.w	r3, r3, #8
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d025      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 020e 	bic.w	r2, r2, #14
 8006a2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a30:	f003 021f 	and.w	r2, r3, #31
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a38:	2101      	movs	r1, #1
 8006a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8006a3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d004      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006a66:	bf00      	nop
 8006a68:	bf00      	nop
}
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006a86:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d004      	beq.n	8006a9a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006a98:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a9e:	f003 021f 	and.w	r2, r3, #31
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8006aac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b10      	cmp	r3, #16
 8006abc:	d108      	bne.n	8006ad0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006ace:	e007      	b.n	8006ae0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	60da      	str	r2, [r3, #12]
}
 8006ae0:	bf00      	nop
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	461a      	mov	r2, r3
 8006afa:	4b16      	ldr	r3, [pc, #88]	@ (8006b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d802      	bhi.n	8006b06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006b00:	4b15      	ldr	r3, [pc, #84]	@ (8006b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	e001      	b.n	8006b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006b06:	4b15      	ldr	r3, [pc, #84]	@ (8006b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006b08:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	3b08      	subs	r3, #8
 8006b16:	4a12      	ldr	r2, [pc, #72]	@ (8006b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006b18:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1c:	091b      	lsrs	r3, r3, #4
 8006b1e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b24:	089b      	lsrs	r3, r3, #2
 8006b26:	009a      	lsls	r2, r3, #2
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a0b      	ldr	r2, [pc, #44]	@ (8006b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006b36:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f003 031f 	and.w	r3, r3, #31
 8006b3e:	2201      	movs	r2, #1
 8006b40:	409a      	lsls	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006b46:	bf00      	nop
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	40020407 	.word	0x40020407
 8006b58:	40020800 	.word	0x40020800
 8006b5c:	40020820 	.word	0x40020820
 8006b60:	cccccccd 	.word	0xcccccccd
 8006b64:	40020880 	.word	0x40020880

08006b68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006b7c:	4413      	add	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	461a      	mov	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a08      	ldr	r2, [pc, #32]	@ (8006bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006b8a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	f003 031f 	and.w	r3, r3, #31
 8006b94:	2201      	movs	r2, #1
 8006b96:	409a      	lsls	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006b9c:	bf00      	nop
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	1000823f 	.word	0x1000823f
 8006bac:	40020940 	.word	0x40020940

08006bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006bbe:	e15a      	b.n	8006e76 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bcc:	4013      	ands	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 814c 	beq.w	8006e70 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f003 0303 	and.w	r3, r3, #3
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d005      	beq.n	8006bf0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d130      	bne.n	8006c52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	2203      	movs	r2, #3
 8006bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006c00:	43db      	mvns	r3, r3
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	4013      	ands	r3, r2
 8006c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	fa02 f303 	lsl.w	r3, r2, r3
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c26:	2201      	movs	r2, #1
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2e:	43db      	mvns	r3, r3
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	4013      	ands	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	091b      	lsrs	r3, r3, #4
 8006c3c:	f003 0201 	and.w	r2, r3, #1
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	fa02 f303 	lsl.w	r3, r2, r3
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d017      	beq.n	8006c8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	2203      	movs	r2, #3
 8006c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6e:	43db      	mvns	r3, r3
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	4013      	ands	r3, r2
 8006c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d123      	bne.n	8006ce2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	08da      	lsrs	r2, r3, #3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	3208      	adds	r2, #8
 8006ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f003 0307 	and.w	r3, r3, #7
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	220f      	movs	r2, #15
 8006cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb6:	43db      	mvns	r3, r3
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4013      	ands	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	691a      	ldr	r2, [r3, #16]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	fa02 f303 	lsl.w	r3, r2, r3
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	08da      	lsrs	r2, r3, #3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	3208      	adds	r2, #8
 8006cdc:	6939      	ldr	r1, [r7, #16]
 8006cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	2203      	movs	r2, #3
 8006cee:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf2:	43db      	mvns	r3, r3
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f003 0203 	and.w	r2, r3, #3
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 80a6 	beq.w	8006e70 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d24:	4b5b      	ldr	r3, [pc, #364]	@ (8006e94 <HAL_GPIO_Init+0x2e4>)
 8006d26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d28:	4a5a      	ldr	r2, [pc, #360]	@ (8006e94 <HAL_GPIO_Init+0x2e4>)
 8006d2a:	f043 0301 	orr.w	r3, r3, #1
 8006d2e:	6613      	str	r3, [r2, #96]	@ 0x60
 8006d30:	4b58      	ldr	r3, [pc, #352]	@ (8006e94 <HAL_GPIO_Init+0x2e4>)
 8006d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	60bb      	str	r3, [r7, #8]
 8006d3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d3c:	4a56      	ldr	r2, [pc, #344]	@ (8006e98 <HAL_GPIO_Init+0x2e8>)
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	089b      	lsrs	r3, r3, #2
 8006d42:	3302      	adds	r3, #2
 8006d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f003 0303 	and.w	r3, r3, #3
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	220f      	movs	r2, #15
 8006d54:	fa02 f303 	lsl.w	r3, r2, r3
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006d66:	d01f      	beq.n	8006da8 <HAL_GPIO_Init+0x1f8>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a4c      	ldr	r2, [pc, #304]	@ (8006e9c <HAL_GPIO_Init+0x2ec>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d019      	beq.n	8006da4 <HAL_GPIO_Init+0x1f4>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a4b      	ldr	r2, [pc, #300]	@ (8006ea0 <HAL_GPIO_Init+0x2f0>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d013      	beq.n	8006da0 <HAL_GPIO_Init+0x1f0>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a4a      	ldr	r2, [pc, #296]	@ (8006ea4 <HAL_GPIO_Init+0x2f4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d00d      	beq.n	8006d9c <HAL_GPIO_Init+0x1ec>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a49      	ldr	r2, [pc, #292]	@ (8006ea8 <HAL_GPIO_Init+0x2f8>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d007      	beq.n	8006d98 <HAL_GPIO_Init+0x1e8>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a48      	ldr	r2, [pc, #288]	@ (8006eac <HAL_GPIO_Init+0x2fc>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d101      	bne.n	8006d94 <HAL_GPIO_Init+0x1e4>
 8006d90:	2305      	movs	r3, #5
 8006d92:	e00a      	b.n	8006daa <HAL_GPIO_Init+0x1fa>
 8006d94:	2306      	movs	r3, #6
 8006d96:	e008      	b.n	8006daa <HAL_GPIO_Init+0x1fa>
 8006d98:	2304      	movs	r3, #4
 8006d9a:	e006      	b.n	8006daa <HAL_GPIO_Init+0x1fa>
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e004      	b.n	8006daa <HAL_GPIO_Init+0x1fa>
 8006da0:	2302      	movs	r3, #2
 8006da2:	e002      	b.n	8006daa <HAL_GPIO_Init+0x1fa>
 8006da4:	2301      	movs	r3, #1
 8006da6:	e000      	b.n	8006daa <HAL_GPIO_Init+0x1fa>
 8006da8:	2300      	movs	r3, #0
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	f002 0203 	and.w	r2, r2, #3
 8006db0:	0092      	lsls	r2, r2, #2
 8006db2:	4093      	lsls	r3, r2
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006dba:	4937      	ldr	r1, [pc, #220]	@ (8006e98 <HAL_GPIO_Init+0x2e8>)
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	089b      	lsrs	r3, r3, #2
 8006dc0:	3302      	adds	r3, #2
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006dc8:	4b39      	ldr	r3, [pc, #228]	@ (8006eb0 <HAL_GPIO_Init+0x300>)
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	43db      	mvns	r3, r3
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006dec:	4a30      	ldr	r2, [pc, #192]	@ (8006eb0 <HAL_GPIO_Init+0x300>)
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006df2:	4b2f      	ldr	r3, [pc, #188]	@ (8006eb0 <HAL_GPIO_Init+0x300>)
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	43db      	mvns	r3, r3
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006e16:	4a26      	ldr	r2, [pc, #152]	@ (8006eb0 <HAL_GPIO_Init+0x300>)
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006e1c:	4b24      	ldr	r3, [pc, #144]	@ (8006eb0 <HAL_GPIO_Init+0x300>)
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	43db      	mvns	r3, r3
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	4013      	ands	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006e40:	4a1b      	ldr	r2, [pc, #108]	@ (8006eb0 <HAL_GPIO_Init+0x300>)
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006e46:	4b1a      	ldr	r3, [pc, #104]	@ (8006eb0 <HAL_GPIO_Init+0x300>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	43db      	mvns	r3, r3
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	4013      	ands	r3, r2
 8006e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006e6a:	4a11      	ldr	r2, [pc, #68]	@ (8006eb0 <HAL_GPIO_Init+0x300>)
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	3301      	adds	r3, #1
 8006e74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f47f ae9d 	bne.w	8006bc0 <HAL_GPIO_Init+0x10>
  }
}
 8006e86:	bf00      	nop
 8006e88:	bf00      	nop
 8006e8a:	371c      	adds	r7, #28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	40021000 	.word	0x40021000
 8006e98:	40010000 	.word	0x40010000
 8006e9c:	48000400 	.word	0x48000400
 8006ea0:	48000800 	.word	0x48000800
 8006ea4:	48000c00 	.word	0x48000c00
 8006ea8:	48001000 	.word	0x48001000
 8006eac:	48001400 	.word	0x48001400
 8006eb0:	40010400 	.word	0x40010400

08006eb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	691a      	ldr	r2, [r3, #16]
 8006ec4:	887b      	ldrh	r3, [r7, #2]
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	73fb      	strb	r3, [r7, #15]
 8006ed0:	e001      	b.n	8006ed6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	807b      	strh	r3, [r7, #2]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ef4:	787b      	ldrb	r3, [r7, #1]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006efa:	887a      	ldrh	r2, [r7, #2]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006f00:	e002      	b.n	8006f08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006f02:	887a      	ldrh	r2, [r7, #2]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006f1e:	4b08      	ldr	r3, [pc, #32]	@ (8006f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f20:	695a      	ldr	r2, [r3, #20]
 8006f22:	88fb      	ldrh	r3, [r7, #6]
 8006f24:	4013      	ands	r3, r2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d006      	beq.n	8006f38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f2a:	4a05      	ldr	r2, [pc, #20]	@ (8006f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f2c:	88fb      	ldrh	r3, [r7, #6]
 8006f2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f30:	88fb      	ldrh	r3, [r7, #6]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fb fcca 	bl	80028cc <HAL_GPIO_EXTI_Callback>
  }
}
 8006f38:	bf00      	nop
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	40010400 	.word	0x40010400

08006f44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d141      	bne.n	8006fd6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f52:	4b4b      	ldr	r3, [pc, #300]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f5e:	d131      	bne.n	8006fc4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f60:	4b47      	ldr	r3, [pc, #284]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f66:	4a46      	ldr	r2, [pc, #280]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f70:	4b43      	ldr	r3, [pc, #268]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f78:	4a41      	ldr	r2, [pc, #260]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006f7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006f80:	4b40      	ldr	r3, [pc, #256]	@ (8007084 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2232      	movs	r2, #50	@ 0x32
 8006f86:	fb02 f303 	mul.w	r3, r2, r3
 8006f8a:	4a3f      	ldr	r2, [pc, #252]	@ (8007088 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f90:	0c9b      	lsrs	r3, r3, #18
 8006f92:	3301      	adds	r3, #1
 8006f94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f96:	e002      	b.n	8006f9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f9e:	4b38      	ldr	r3, [pc, #224]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006faa:	d102      	bne.n	8006fb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1f2      	bne.n	8006f98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006fb2:	4b33      	ldr	r3, [pc, #204]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fbe:	d158      	bne.n	8007072 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e057      	b.n	8007074 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fca:	4a2d      	ldr	r2, [pc, #180]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006fd4:	e04d      	b.n	8007072 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fdc:	d141      	bne.n	8007062 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006fde:	4b28      	ldr	r3, [pc, #160]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fea:	d131      	bne.n	8007050 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006fec:	4b24      	ldr	r3, [pc, #144]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ff2:	4a23      	ldr	r2, [pc, #140]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ff8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ffc:	4b20      	ldr	r3, [pc, #128]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007004:	4a1e      	ldr	r2, [pc, #120]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007006:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800700a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800700c:	4b1d      	ldr	r3, [pc, #116]	@ (8007084 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2232      	movs	r2, #50	@ 0x32
 8007012:	fb02 f303 	mul.w	r3, r2, r3
 8007016:	4a1c      	ldr	r2, [pc, #112]	@ (8007088 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007018:	fba2 2303 	umull	r2, r3, r2, r3
 800701c:	0c9b      	lsrs	r3, r3, #18
 800701e:	3301      	adds	r3, #1
 8007020:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007022:	e002      	b.n	800702a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	3b01      	subs	r3, #1
 8007028:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800702a:	4b15      	ldr	r3, [pc, #84]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007036:	d102      	bne.n	800703e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1f2      	bne.n	8007024 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800703e:	4b10      	ldr	r3, [pc, #64]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800704a:	d112      	bne.n	8007072 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e011      	b.n	8007074 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007050:	4b0b      	ldr	r3, [pc, #44]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007056:	4a0a      	ldr	r2, [pc, #40]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800705c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007060:	e007      	b.n	8007072 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007062:	4b07      	ldr	r3, [pc, #28]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800706a:	4a05      	ldr	r2, [pc, #20]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800706c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007070:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	40007000 	.word	0x40007000
 8007084:	20000218 	.word	0x20000218
 8007088:	431bde83 	.word	0x431bde83

0800708c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007090:	4b05      	ldr	r3, [pc, #20]	@ (80070a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	4a04      	ldr	r2, [pc, #16]	@ (80070a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007096:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800709a:	6093      	str	r3, [r2, #8]
}
 800709c:	bf00      	nop
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	40007000 	.word	0x40007000

080070ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b088      	sub	sp, #32
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e2fe      	b.n	80076bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d075      	beq.n	80071b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070ca:	4b97      	ldr	r3, [pc, #604]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f003 030c 	and.w	r3, r3, #12
 80070d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070d4:	4b94      	ldr	r3, [pc, #592]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f003 0303 	and.w	r3, r3, #3
 80070dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	2b0c      	cmp	r3, #12
 80070e2:	d102      	bne.n	80070ea <HAL_RCC_OscConfig+0x3e>
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d002      	beq.n	80070f0 <HAL_RCC_OscConfig+0x44>
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	2b08      	cmp	r3, #8
 80070ee:	d10b      	bne.n	8007108 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070f0:	4b8d      	ldr	r3, [pc, #564]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d05b      	beq.n	80071b4 <HAL_RCC_OscConfig+0x108>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d157      	bne.n	80071b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e2d9      	b.n	80076bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007110:	d106      	bne.n	8007120 <HAL_RCC_OscConfig+0x74>
 8007112:	4b85      	ldr	r3, [pc, #532]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a84      	ldr	r2, [pc, #528]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 8007118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	e01d      	b.n	800715c <HAL_RCC_OscConfig+0xb0>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007128:	d10c      	bne.n	8007144 <HAL_RCC_OscConfig+0x98>
 800712a:	4b7f      	ldr	r3, [pc, #508]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a7e      	ldr	r2, [pc, #504]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 8007130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	4b7c      	ldr	r3, [pc, #496]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a7b      	ldr	r2, [pc, #492]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 800713c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	e00b      	b.n	800715c <HAL_RCC_OscConfig+0xb0>
 8007144:	4b78      	ldr	r3, [pc, #480]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a77      	ldr	r2, [pc, #476]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 800714a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	4b75      	ldr	r3, [pc, #468]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a74      	ldr	r2, [pc, #464]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 8007156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800715a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d013      	beq.n	800718c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007164:	f7fd fd50 	bl	8004c08 <HAL_GetTick>
 8007168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800716a:	e008      	b.n	800717e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800716c:	f7fd fd4c 	bl	8004c08 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	2b64      	cmp	r3, #100	@ 0x64
 8007178:	d901      	bls.n	800717e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e29e      	b.n	80076bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800717e:	4b6a      	ldr	r3, [pc, #424]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0f0      	beq.n	800716c <HAL_RCC_OscConfig+0xc0>
 800718a:	e014      	b.n	80071b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718c:	f7fd fd3c 	bl	8004c08 <HAL_GetTick>
 8007190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007192:	e008      	b.n	80071a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007194:	f7fd fd38 	bl	8004c08 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b64      	cmp	r3, #100	@ 0x64
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e28a      	b.n	80076bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071a6:	4b60      	ldr	r3, [pc, #384]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1f0      	bne.n	8007194 <HAL_RCC_OscConfig+0xe8>
 80071b2:	e000      	b.n	80071b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d075      	beq.n	80072ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071c2:	4b59      	ldr	r3, [pc, #356]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f003 030c 	and.w	r3, r3, #12
 80071ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071cc:	4b56      	ldr	r3, [pc, #344]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0303 	and.w	r3, r3, #3
 80071d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	2b0c      	cmp	r3, #12
 80071da:	d102      	bne.n	80071e2 <HAL_RCC_OscConfig+0x136>
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d002      	beq.n	80071e8 <HAL_RCC_OscConfig+0x13c>
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d11f      	bne.n	8007228 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071e8:	4b4f      	ldr	r3, [pc, #316]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d005      	beq.n	8007200 <HAL_RCC_OscConfig+0x154>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e25d      	b.n	80076bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007200:	4b49      	ldr	r3, [pc, #292]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	061b      	lsls	r3, r3, #24
 800720e:	4946      	ldr	r1, [pc, #280]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 8007210:	4313      	orrs	r3, r2
 8007212:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007214:	4b45      	ldr	r3, [pc, #276]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4618      	mov	r0, r3
 800721a:	f7fd fca9 	bl	8004b70 <HAL_InitTick>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d043      	beq.n	80072ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e249      	b.n	80076bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d023      	beq.n	8007278 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007230:	4b3d      	ldr	r3, [pc, #244]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a3c      	ldr	r2, [pc, #240]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 8007236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800723a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800723c:	f7fd fce4 	bl	8004c08 <HAL_GetTick>
 8007240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007242:	e008      	b.n	8007256 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007244:	f7fd fce0 	bl	8004c08 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	2b02      	cmp	r3, #2
 8007250:	d901      	bls.n	8007256 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e232      	b.n	80076bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007256:	4b34      	ldr	r3, [pc, #208]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0f0      	beq.n	8007244 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007262:	4b31      	ldr	r3, [pc, #196]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	061b      	lsls	r3, r3, #24
 8007270:	492d      	ldr	r1, [pc, #180]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 8007272:	4313      	orrs	r3, r2
 8007274:	604b      	str	r3, [r1, #4]
 8007276:	e01a      	b.n	80072ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007278:	4b2b      	ldr	r3, [pc, #172]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a2a      	ldr	r2, [pc, #168]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 800727e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007284:	f7fd fcc0 	bl	8004c08 <HAL_GetTick>
 8007288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800728a:	e008      	b.n	800729e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800728c:	f7fd fcbc 	bl	8004c08 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	2b02      	cmp	r3, #2
 8007298:	d901      	bls.n	800729e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e20e      	b.n	80076bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800729e:	4b22      	ldr	r3, [pc, #136]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1f0      	bne.n	800728c <HAL_RCC_OscConfig+0x1e0>
 80072aa:	e000      	b.n	80072ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0308 	and.w	r3, r3, #8
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d041      	beq.n	800733e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d01c      	beq.n	80072fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072c2:	4b19      	ldr	r3, [pc, #100]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 80072c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072c8:	4a17      	ldr	r2, [pc, #92]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 80072ca:	f043 0301 	orr.w	r3, r3, #1
 80072ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d2:	f7fd fc99 	bl	8004c08 <HAL_GetTick>
 80072d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072d8:	e008      	b.n	80072ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072da:	f7fd fc95 	bl	8004c08 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d901      	bls.n	80072ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e1e7      	b.n	80076bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 80072ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072f2:	f003 0302 	and.w	r3, r3, #2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0ef      	beq.n	80072da <HAL_RCC_OscConfig+0x22e>
 80072fa:	e020      	b.n	800733e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 80072fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007302:	4a09      	ldr	r2, [pc, #36]	@ (8007328 <HAL_RCC_OscConfig+0x27c>)
 8007304:	f023 0301 	bic.w	r3, r3, #1
 8007308:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800730c:	f7fd fc7c 	bl	8004c08 <HAL_GetTick>
 8007310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007312:	e00d      	b.n	8007330 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007314:	f7fd fc78 	bl	8004c08 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d906      	bls.n	8007330 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e1ca      	b.n	80076bc <HAL_RCC_OscConfig+0x610>
 8007326:	bf00      	nop
 8007328:	40021000 	.word	0x40021000
 800732c:	2000021c 	.word	0x2000021c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007330:	4b8c      	ldr	r3, [pc, #560]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 8007332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1ea      	bne.n	8007314 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0304 	and.w	r3, r3, #4
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 80a6 	beq.w	8007498 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800734c:	2300      	movs	r3, #0
 800734e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007350:	4b84      	ldr	r3, [pc, #528]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 8007352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <HAL_RCC_OscConfig+0x2b4>
 800735c:	2301      	movs	r3, #1
 800735e:	e000      	b.n	8007362 <HAL_RCC_OscConfig+0x2b6>
 8007360:	2300      	movs	r3, #0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00d      	beq.n	8007382 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007366:	4b7f      	ldr	r3, [pc, #508]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 8007368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800736a:	4a7e      	ldr	r2, [pc, #504]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 800736c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007370:	6593      	str	r3, [r2, #88]	@ 0x58
 8007372:	4b7c      	ldr	r3, [pc, #496]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 8007374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800737e:	2301      	movs	r3, #1
 8007380:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007382:	4b79      	ldr	r3, [pc, #484]	@ (8007568 <HAL_RCC_OscConfig+0x4bc>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800738a:	2b00      	cmp	r3, #0
 800738c:	d118      	bne.n	80073c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800738e:	4b76      	ldr	r3, [pc, #472]	@ (8007568 <HAL_RCC_OscConfig+0x4bc>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a75      	ldr	r2, [pc, #468]	@ (8007568 <HAL_RCC_OscConfig+0x4bc>)
 8007394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800739a:	f7fd fc35 	bl	8004c08 <HAL_GetTick>
 800739e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073a0:	e008      	b.n	80073b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073a2:	f7fd fc31 	bl	8004c08 <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d901      	bls.n	80073b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e183      	b.n	80076bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073b4:	4b6c      	ldr	r3, [pc, #432]	@ (8007568 <HAL_RCC_OscConfig+0x4bc>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d0f0      	beq.n	80073a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d108      	bne.n	80073da <HAL_RCC_OscConfig+0x32e>
 80073c8:	4b66      	ldr	r3, [pc, #408]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 80073ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ce:	4a65      	ldr	r2, [pc, #404]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 80073d0:	f043 0301 	orr.w	r3, r3, #1
 80073d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80073d8:	e024      	b.n	8007424 <HAL_RCC_OscConfig+0x378>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	2b05      	cmp	r3, #5
 80073e0:	d110      	bne.n	8007404 <HAL_RCC_OscConfig+0x358>
 80073e2:	4b60      	ldr	r3, [pc, #384]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 80073e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073e8:	4a5e      	ldr	r2, [pc, #376]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 80073ea:	f043 0304 	orr.w	r3, r3, #4
 80073ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80073f2:	4b5c      	ldr	r3, [pc, #368]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 80073f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073f8:	4a5a      	ldr	r2, [pc, #360]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 80073fa:	f043 0301 	orr.w	r3, r3, #1
 80073fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007402:	e00f      	b.n	8007424 <HAL_RCC_OscConfig+0x378>
 8007404:	4b57      	ldr	r3, [pc, #348]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 8007406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800740a:	4a56      	ldr	r2, [pc, #344]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 800740c:	f023 0301 	bic.w	r3, r3, #1
 8007410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007414:	4b53      	ldr	r3, [pc, #332]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 8007416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800741a:	4a52      	ldr	r2, [pc, #328]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 800741c:	f023 0304 	bic.w	r3, r3, #4
 8007420:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d016      	beq.n	800745a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800742c:	f7fd fbec 	bl	8004c08 <HAL_GetTick>
 8007430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007432:	e00a      	b.n	800744a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007434:	f7fd fbe8 	bl	8004c08 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007442:	4293      	cmp	r3, r2
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e138      	b.n	80076bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800744a:	4b46      	ldr	r3, [pc, #280]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 800744c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0ed      	beq.n	8007434 <HAL_RCC_OscConfig+0x388>
 8007458:	e015      	b.n	8007486 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800745a:	f7fd fbd5 	bl	8004c08 <HAL_GetTick>
 800745e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007460:	e00a      	b.n	8007478 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007462:	f7fd fbd1 	bl	8004c08 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007470:	4293      	cmp	r3, r2
 8007472:	d901      	bls.n	8007478 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e121      	b.n	80076bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007478:	4b3a      	ldr	r3, [pc, #232]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 800747a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1ed      	bne.n	8007462 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007486:	7ffb      	ldrb	r3, [r7, #31]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d105      	bne.n	8007498 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800748c:	4b35      	ldr	r3, [pc, #212]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 800748e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007490:	4a34      	ldr	r2, [pc, #208]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 8007492:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007496:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0320 	and.w	r3, r3, #32
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d03c      	beq.n	800751e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d01c      	beq.n	80074e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074ac:	4b2d      	ldr	r3, [pc, #180]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 80074ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074b2:	4a2c      	ldr	r2, [pc, #176]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 80074b4:	f043 0301 	orr.w	r3, r3, #1
 80074b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074bc:	f7fd fba4 	bl	8004c08 <HAL_GetTick>
 80074c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074c2:	e008      	b.n	80074d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074c4:	f7fd fba0 	bl	8004c08 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d901      	bls.n	80074d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e0f2      	b.n	80076bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074d6:	4b23      	ldr	r3, [pc, #140]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 80074d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0ef      	beq.n	80074c4 <HAL_RCC_OscConfig+0x418>
 80074e4:	e01b      	b.n	800751e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074e6:	4b1f      	ldr	r3, [pc, #124]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 80074e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 80074ee:	f023 0301 	bic.w	r3, r3, #1
 80074f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074f6:	f7fd fb87 	bl	8004c08 <HAL_GetTick>
 80074fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80074fc:	e008      	b.n	8007510 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074fe:	f7fd fb83 	bl	8004c08 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b02      	cmp	r3, #2
 800750a:	d901      	bls.n	8007510 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e0d5      	b.n	80076bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007510:	4b14      	ldr	r3, [pc, #80]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 8007512:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1ef      	bne.n	80074fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 80c9 	beq.w	80076ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007528:	4b0e      	ldr	r3, [pc, #56]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f003 030c 	and.w	r3, r3, #12
 8007530:	2b0c      	cmp	r3, #12
 8007532:	f000 8083 	beq.w	800763c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	2b02      	cmp	r3, #2
 800753c:	d15e      	bne.n	80075fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800753e:	4b09      	ldr	r3, [pc, #36]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a08      	ldr	r2, [pc, #32]	@ (8007564 <HAL_RCC_OscConfig+0x4b8>)
 8007544:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800754a:	f7fd fb5d 	bl	8004c08 <HAL_GetTick>
 800754e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007550:	e00c      	b.n	800756c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007552:	f7fd fb59 	bl	8004c08 <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	2b02      	cmp	r3, #2
 800755e:	d905      	bls.n	800756c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e0ab      	b.n	80076bc <HAL_RCC_OscConfig+0x610>
 8007564:	40021000 	.word	0x40021000
 8007568:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800756c:	4b55      	ldr	r3, [pc, #340]	@ (80076c4 <HAL_RCC_OscConfig+0x618>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1ec      	bne.n	8007552 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007578:	4b52      	ldr	r3, [pc, #328]	@ (80076c4 <HAL_RCC_OscConfig+0x618>)
 800757a:	68da      	ldr	r2, [r3, #12]
 800757c:	4b52      	ldr	r3, [pc, #328]	@ (80076c8 <HAL_RCC_OscConfig+0x61c>)
 800757e:	4013      	ands	r3, r2
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	6a11      	ldr	r1, [r2, #32]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007588:	3a01      	subs	r2, #1
 800758a:	0112      	lsls	r2, r2, #4
 800758c:	4311      	orrs	r1, r2
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007592:	0212      	lsls	r2, r2, #8
 8007594:	4311      	orrs	r1, r2
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800759a:	0852      	lsrs	r2, r2, #1
 800759c:	3a01      	subs	r2, #1
 800759e:	0552      	lsls	r2, r2, #21
 80075a0:	4311      	orrs	r1, r2
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80075a6:	0852      	lsrs	r2, r2, #1
 80075a8:	3a01      	subs	r2, #1
 80075aa:	0652      	lsls	r2, r2, #25
 80075ac:	4311      	orrs	r1, r2
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80075b2:	06d2      	lsls	r2, r2, #27
 80075b4:	430a      	orrs	r2, r1
 80075b6:	4943      	ldr	r1, [pc, #268]	@ (80076c4 <HAL_RCC_OscConfig+0x618>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075bc:	4b41      	ldr	r3, [pc, #260]	@ (80076c4 <HAL_RCC_OscConfig+0x618>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a40      	ldr	r2, [pc, #256]	@ (80076c4 <HAL_RCC_OscConfig+0x618>)
 80075c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075c8:	4b3e      	ldr	r3, [pc, #248]	@ (80076c4 <HAL_RCC_OscConfig+0x618>)
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	4a3d      	ldr	r2, [pc, #244]	@ (80076c4 <HAL_RCC_OscConfig+0x618>)
 80075ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d4:	f7fd fb18 	bl	8004c08 <HAL_GetTick>
 80075d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075da:	e008      	b.n	80075ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075dc:	f7fd fb14 	bl	8004c08 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d901      	bls.n	80075ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e066      	b.n	80076bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075ee:	4b35      	ldr	r3, [pc, #212]	@ (80076c4 <HAL_RCC_OscConfig+0x618>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d0f0      	beq.n	80075dc <HAL_RCC_OscConfig+0x530>
 80075fa:	e05e      	b.n	80076ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075fc:	4b31      	ldr	r3, [pc, #196]	@ (80076c4 <HAL_RCC_OscConfig+0x618>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a30      	ldr	r2, [pc, #192]	@ (80076c4 <HAL_RCC_OscConfig+0x618>)
 8007602:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007608:	f7fd fafe 	bl	8004c08 <HAL_GetTick>
 800760c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800760e:	e008      	b.n	8007622 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007610:	f7fd fafa 	bl	8004c08 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b02      	cmp	r3, #2
 800761c:	d901      	bls.n	8007622 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e04c      	b.n	80076bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007622:	4b28      	ldr	r3, [pc, #160]	@ (80076c4 <HAL_RCC_OscConfig+0x618>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1f0      	bne.n	8007610 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800762e:	4b25      	ldr	r3, [pc, #148]	@ (80076c4 <HAL_RCC_OscConfig+0x618>)
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	4924      	ldr	r1, [pc, #144]	@ (80076c4 <HAL_RCC_OscConfig+0x618>)
 8007634:	4b25      	ldr	r3, [pc, #148]	@ (80076cc <HAL_RCC_OscConfig+0x620>)
 8007636:	4013      	ands	r3, r2
 8007638:	60cb      	str	r3, [r1, #12]
 800763a:	e03e      	b.n	80076ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	69db      	ldr	r3, [r3, #28]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d101      	bne.n	8007648 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e039      	b.n	80076bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007648:	4b1e      	ldr	r3, [pc, #120]	@ (80076c4 <HAL_RCC_OscConfig+0x618>)
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f003 0203 	and.w	r2, r3, #3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	429a      	cmp	r2, r3
 800765a:	d12c      	bne.n	80076b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007666:	3b01      	subs	r3, #1
 8007668:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800766a:	429a      	cmp	r2, r3
 800766c:	d123      	bne.n	80076b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007678:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800767a:	429a      	cmp	r2, r3
 800767c:	d11b      	bne.n	80076b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007688:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800768a:	429a      	cmp	r2, r3
 800768c:	d113      	bne.n	80076b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007698:	085b      	lsrs	r3, r3, #1
 800769a:	3b01      	subs	r3, #1
 800769c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800769e:	429a      	cmp	r2, r3
 80076a0:	d109      	bne.n	80076b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ac:	085b      	lsrs	r3, r3, #1
 80076ae:	3b01      	subs	r3, #1
 80076b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d001      	beq.n	80076ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e000      	b.n	80076bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3720      	adds	r7, #32
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	40021000 	.word	0x40021000
 80076c8:	019f800c 	.word	0x019f800c
 80076cc:	feeefffc 	.word	0xfeeefffc

080076d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e11e      	b.n	8007926 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076e8:	4b91      	ldr	r3, [pc, #580]	@ (8007930 <HAL_RCC_ClockConfig+0x260>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 030f 	and.w	r3, r3, #15
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d910      	bls.n	8007718 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076f6:	4b8e      	ldr	r3, [pc, #568]	@ (8007930 <HAL_RCC_ClockConfig+0x260>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f023 020f 	bic.w	r2, r3, #15
 80076fe:	498c      	ldr	r1, [pc, #560]	@ (8007930 <HAL_RCC_ClockConfig+0x260>)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	4313      	orrs	r3, r2
 8007704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007706:	4b8a      	ldr	r3, [pc, #552]	@ (8007930 <HAL_RCC_ClockConfig+0x260>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 030f 	and.w	r3, r3, #15
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	429a      	cmp	r2, r3
 8007712:	d001      	beq.n	8007718 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e106      	b.n	8007926 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b00      	cmp	r3, #0
 8007722:	d073      	beq.n	800780c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	2b03      	cmp	r3, #3
 800772a:	d129      	bne.n	8007780 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800772c:	4b81      	ldr	r3, [pc, #516]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d101      	bne.n	800773c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	e0f4      	b.n	8007926 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800773c:	f000 f99e 	bl	8007a7c <RCC_GetSysClockFreqFromPLLSource>
 8007740:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	4a7c      	ldr	r2, [pc, #496]	@ (8007938 <HAL_RCC_ClockConfig+0x268>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d93f      	bls.n	80077ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800774a:	4b7a      	ldr	r3, [pc, #488]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d009      	beq.n	800776a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800775e:	2b00      	cmp	r3, #0
 8007760:	d033      	beq.n	80077ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007766:	2b00      	cmp	r3, #0
 8007768:	d12f      	bne.n	80077ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800776a:	4b72      	ldr	r3, [pc, #456]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007772:	4a70      	ldr	r2, [pc, #448]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 8007774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007778:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800777a:	2380      	movs	r3, #128	@ 0x80
 800777c:	617b      	str	r3, [r7, #20]
 800777e:	e024      	b.n	80077ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2b02      	cmp	r3, #2
 8007786:	d107      	bne.n	8007798 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007788:	4b6a      	ldr	r3, [pc, #424]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d109      	bne.n	80077a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e0c6      	b.n	8007926 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007798:	4b66      	ldr	r3, [pc, #408]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e0be      	b.n	8007926 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80077a8:	f000 f8ce 	bl	8007948 <HAL_RCC_GetSysClockFreq>
 80077ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	4a61      	ldr	r2, [pc, #388]	@ (8007938 <HAL_RCC_ClockConfig+0x268>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d909      	bls.n	80077ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80077b6:	4b5f      	ldr	r3, [pc, #380]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077be:	4a5d      	ldr	r2, [pc, #372]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 80077c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80077c6:	2380      	movs	r3, #128	@ 0x80
 80077c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80077ca:	4b5a      	ldr	r3, [pc, #360]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f023 0203 	bic.w	r2, r3, #3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	4957      	ldr	r1, [pc, #348]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077dc:	f7fd fa14 	bl	8004c08 <HAL_GetTick>
 80077e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077e2:	e00a      	b.n	80077fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077e4:	f7fd fa10 	bl	8004c08 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d901      	bls.n	80077fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e095      	b.n	8007926 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077fa:	4b4e      	ldr	r3, [pc, #312]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 020c 	and.w	r2, r3, #12
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	429a      	cmp	r2, r3
 800780a:	d1eb      	bne.n	80077e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d023      	beq.n	8007860 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0304 	and.w	r3, r3, #4
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007824:	4b43      	ldr	r3, [pc, #268]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	4a42      	ldr	r2, [pc, #264]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 800782a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800782e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0308 	and.w	r3, r3, #8
 8007838:	2b00      	cmp	r3, #0
 800783a:	d007      	beq.n	800784c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800783c:	4b3d      	ldr	r3, [pc, #244]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007844:	4a3b      	ldr	r2, [pc, #236]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 8007846:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800784a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800784c:	4b39      	ldr	r3, [pc, #228]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	4936      	ldr	r1, [pc, #216]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 800785a:	4313      	orrs	r3, r2
 800785c:	608b      	str	r3, [r1, #8]
 800785e:	e008      	b.n	8007872 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2b80      	cmp	r3, #128	@ 0x80
 8007864:	d105      	bne.n	8007872 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007866:	4b33      	ldr	r3, [pc, #204]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	4a32      	ldr	r2, [pc, #200]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 800786c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007870:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007872:	4b2f      	ldr	r3, [pc, #188]	@ (8007930 <HAL_RCC_ClockConfig+0x260>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 030f 	and.w	r3, r3, #15
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	429a      	cmp	r2, r3
 800787e:	d21d      	bcs.n	80078bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007880:	4b2b      	ldr	r3, [pc, #172]	@ (8007930 <HAL_RCC_ClockConfig+0x260>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f023 020f 	bic.w	r2, r3, #15
 8007888:	4929      	ldr	r1, [pc, #164]	@ (8007930 <HAL_RCC_ClockConfig+0x260>)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	4313      	orrs	r3, r2
 800788e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007890:	f7fd f9ba 	bl	8004c08 <HAL_GetTick>
 8007894:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007896:	e00a      	b.n	80078ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007898:	f7fd f9b6 	bl	8004c08 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d901      	bls.n	80078ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e03b      	b.n	8007926 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ae:	4b20      	ldr	r3, [pc, #128]	@ (8007930 <HAL_RCC_ClockConfig+0x260>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 030f 	and.w	r3, r3, #15
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d1ed      	bne.n	8007898 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d008      	beq.n	80078da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	4917      	ldr	r1, [pc, #92]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0308 	and.w	r3, r3, #8
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d009      	beq.n	80078fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078e6:	4b13      	ldr	r3, [pc, #76]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	00db      	lsls	r3, r3, #3
 80078f4:	490f      	ldr	r1, [pc, #60]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80078fa:	f000 f825 	bl	8007948 <HAL_RCC_GetSysClockFreq>
 80078fe:	4602      	mov	r2, r0
 8007900:	4b0c      	ldr	r3, [pc, #48]	@ (8007934 <HAL_RCC_ClockConfig+0x264>)
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	091b      	lsrs	r3, r3, #4
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	490c      	ldr	r1, [pc, #48]	@ (800793c <HAL_RCC_ClockConfig+0x26c>)
 800790c:	5ccb      	ldrb	r3, [r1, r3]
 800790e:	f003 031f 	and.w	r3, r3, #31
 8007912:	fa22 f303 	lsr.w	r3, r2, r3
 8007916:	4a0a      	ldr	r2, [pc, #40]	@ (8007940 <HAL_RCC_ClockConfig+0x270>)
 8007918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800791a:	4b0a      	ldr	r3, [pc, #40]	@ (8007944 <HAL_RCC_ClockConfig+0x274>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4618      	mov	r0, r3
 8007920:	f7fd f926 	bl	8004b70 <HAL_InitTick>
 8007924:	4603      	mov	r3, r0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	40022000 	.word	0x40022000
 8007934:	40021000 	.word	0x40021000
 8007938:	04c4b400 	.word	0x04c4b400
 800793c:	0800c158 	.word	0x0800c158
 8007940:	20000218 	.word	0x20000218
 8007944:	2000021c 	.word	0x2000021c

08007948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800794e:	4b2c      	ldr	r3, [pc, #176]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f003 030c 	and.w	r3, r3, #12
 8007956:	2b04      	cmp	r3, #4
 8007958:	d102      	bne.n	8007960 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800795a:	4b2a      	ldr	r3, [pc, #168]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0xbc>)
 800795c:	613b      	str	r3, [r7, #16]
 800795e:	e047      	b.n	80079f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007960:	4b27      	ldr	r3, [pc, #156]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f003 030c 	and.w	r3, r3, #12
 8007968:	2b08      	cmp	r3, #8
 800796a:	d102      	bne.n	8007972 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800796c:	4b26      	ldr	r3, [pc, #152]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0xc0>)
 800796e:	613b      	str	r3, [r7, #16]
 8007970:	e03e      	b.n	80079f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007972:	4b23      	ldr	r3, [pc, #140]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f003 030c 	and.w	r3, r3, #12
 800797a:	2b0c      	cmp	r3, #12
 800797c:	d136      	bne.n	80079ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800797e:	4b20      	ldr	r3, [pc, #128]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	f003 0303 	and.w	r3, r3, #3
 8007986:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007988:	4b1d      	ldr	r3, [pc, #116]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	091b      	lsrs	r3, r3, #4
 800798e:	f003 030f 	and.w	r3, r3, #15
 8007992:	3301      	adds	r3, #1
 8007994:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2b03      	cmp	r3, #3
 800799a:	d10c      	bne.n	80079b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800799c:	4a1a      	ldr	r2, [pc, #104]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0xc0>)
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a4:	4a16      	ldr	r2, [pc, #88]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079a6:	68d2      	ldr	r2, [r2, #12]
 80079a8:	0a12      	lsrs	r2, r2, #8
 80079aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079ae:	fb02 f303 	mul.w	r3, r2, r3
 80079b2:	617b      	str	r3, [r7, #20]
      break;
 80079b4:	e00c      	b.n	80079d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079b6:	4a13      	ldr	r2, [pc, #76]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0xbc>)
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80079be:	4a10      	ldr	r2, [pc, #64]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079c0:	68d2      	ldr	r2, [r2, #12]
 80079c2:	0a12      	lsrs	r2, r2, #8
 80079c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079c8:	fb02 f303 	mul.w	r3, r2, r3
 80079cc:	617b      	str	r3, [r7, #20]
      break;
 80079ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80079d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	0e5b      	lsrs	r3, r3, #25
 80079d6:	f003 0303 	and.w	r3, r3, #3
 80079da:	3301      	adds	r3, #1
 80079dc:	005b      	lsls	r3, r3, #1
 80079de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e8:	613b      	str	r3, [r7, #16]
 80079ea:	e001      	b.n	80079f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80079f0:	693b      	ldr	r3, [r7, #16]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	371c      	adds	r7, #28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	40021000 	.word	0x40021000
 8007a04:	00f42400 	.word	0x00f42400
 8007a08:	016e3600 	.word	0x016e3600

08007a0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a10:	4b03      	ldr	r3, [pc, #12]	@ (8007a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a12:	681b      	ldr	r3, [r3, #0]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	20000218 	.word	0x20000218

08007a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007a28:	f7ff fff0 	bl	8007a0c <HAL_RCC_GetHCLKFreq>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	4b06      	ldr	r3, [pc, #24]	@ (8007a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	0a1b      	lsrs	r3, r3, #8
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	4904      	ldr	r1, [pc, #16]	@ (8007a4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a3a:	5ccb      	ldrb	r3, [r1, r3]
 8007a3c:	f003 031f 	and.w	r3, r3, #31
 8007a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	40021000 	.word	0x40021000
 8007a4c:	0800c168 	.word	0x0800c168

08007a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007a54:	f7ff ffda 	bl	8007a0c <HAL_RCC_GetHCLKFreq>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	4b06      	ldr	r3, [pc, #24]	@ (8007a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	0adb      	lsrs	r3, r3, #11
 8007a60:	f003 0307 	and.w	r3, r3, #7
 8007a64:	4904      	ldr	r1, [pc, #16]	@ (8007a78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a66:	5ccb      	ldrb	r3, [r1, r3]
 8007a68:	f003 031f 	and.w	r3, r3, #31
 8007a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	40021000 	.word	0x40021000
 8007a78:	0800c168 	.word	0x0800c168

08007a7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b087      	sub	sp, #28
 8007a80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007a82:	4b1e      	ldr	r3, [pc, #120]	@ (8007afc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	f003 0303 	and.w	r3, r3, #3
 8007a8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8007afc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	091b      	lsrs	r3, r3, #4
 8007a92:	f003 030f 	and.w	r3, r3, #15
 8007a96:	3301      	adds	r3, #1
 8007a98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d10c      	bne.n	8007aba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007aa0:	4a17      	ldr	r2, [pc, #92]	@ (8007b00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa8:	4a14      	ldr	r2, [pc, #80]	@ (8007afc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007aaa:	68d2      	ldr	r2, [r2, #12]
 8007aac:	0a12      	lsrs	r2, r2, #8
 8007aae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007ab2:	fb02 f303 	mul.w	r3, r2, r3
 8007ab6:	617b      	str	r3, [r7, #20]
    break;
 8007ab8:	e00c      	b.n	8007ad4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007aba:	4a12      	ldr	r2, [pc, #72]	@ (8007b04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8007afc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ac4:	68d2      	ldr	r2, [r2, #12]
 8007ac6:	0a12      	lsrs	r2, r2, #8
 8007ac8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007acc:	fb02 f303 	mul.w	r3, r2, r3
 8007ad0:	617b      	str	r3, [r7, #20]
    break;
 8007ad2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ad4:	4b09      	ldr	r3, [pc, #36]	@ (8007afc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	0e5b      	lsrs	r3, r3, #25
 8007ada:	f003 0303 	and.w	r3, r3, #3
 8007ade:	3301      	adds	r3, #1
 8007ae0:	005b      	lsls	r3, r3, #1
 8007ae2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007aee:	687b      	ldr	r3, [r7, #4]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	371c      	adds	r7, #28
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	40021000 	.word	0x40021000
 8007b00:	016e3600 	.word	0x016e3600
 8007b04:	00f42400 	.word	0x00f42400

08007b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b10:	2300      	movs	r3, #0
 8007b12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b14:	2300      	movs	r3, #0
 8007b16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 8098 	beq.w	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b26:	2300      	movs	r3, #0
 8007b28:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b2a:	4b43      	ldr	r3, [pc, #268]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10d      	bne.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b36:	4b40      	ldr	r3, [pc, #256]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b3a:	4a3f      	ldr	r2, [pc, #252]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b40:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b42:	4b3d      	ldr	r3, [pc, #244]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b4a:	60bb      	str	r3, [r7, #8]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b52:	4b3a      	ldr	r3, [pc, #232]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a39      	ldr	r2, [pc, #228]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b5e:	f7fd f853 	bl	8004c08 <HAL_GetTick>
 8007b62:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b64:	e009      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b66:	f7fd f84f 	bl	8004c08 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d902      	bls.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	74fb      	strb	r3, [r7, #19]
        break;
 8007b78:	e005      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b7a:	4b30      	ldr	r3, [pc, #192]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0ef      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007b86:	7cfb      	ldrb	r3, [r7, #19]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d159      	bne.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b96:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d01e      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d019      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ba8:	4b23      	ldr	r3, [pc, #140]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007bb4:	4b20      	ldr	r3, [pc, #128]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bba:	4a1f      	ldr	r2, [pc, #124]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bca:	4a1b      	ldr	r2, [pc, #108]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007bd4:	4a18      	ldr	r2, [pc, #96]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d016      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be6:	f7fd f80f 	bl	8004c08 <HAL_GetTick>
 8007bea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bec:	e00b      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bee:	f7fd f80b 	bl	8004c08 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d902      	bls.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	74fb      	strb	r3, [r7, #19]
            break;
 8007c04:	e006      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c06:	4b0c      	ldr	r3, [pc, #48]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d0ec      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007c14:	7cfb      	ldrb	r3, [r7, #19]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10b      	bne.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c1a:	4b07      	ldr	r3, [pc, #28]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c28:	4903      	ldr	r1, [pc, #12]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007c30:	e008      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c32:	7cfb      	ldrb	r3, [r7, #19]
 8007c34:	74bb      	strb	r3, [r7, #18]
 8007c36:	e005      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007c38:	40021000 	.word	0x40021000
 8007c3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c40:	7cfb      	ldrb	r3, [r7, #19]
 8007c42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c44:	7c7b      	ldrb	r3, [r7, #17]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d105      	bne.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c4a:	4ba7      	ldr	r3, [pc, #668]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c4e:	4aa6      	ldr	r2, [pc, #664]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c54:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00a      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c62:	4ba1      	ldr	r3, [pc, #644]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c68:	f023 0203 	bic.w	r2, r3, #3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	499d      	ldr	r1, [pc, #628]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0302 	and.w	r3, r3, #2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00a      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c84:	4b98      	ldr	r3, [pc, #608]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c8a:	f023 020c 	bic.w	r2, r3, #12
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	4995      	ldr	r1, [pc, #596]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0304 	and.w	r3, r3, #4
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ca6:	4b90      	ldr	r3, [pc, #576]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	498c      	ldr	r1, [pc, #560]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0308 	and.w	r3, r3, #8
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00a      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007cc8:	4b87      	ldr	r3, [pc, #540]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	4984      	ldr	r1, [pc, #528]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0310 	and.w	r3, r3, #16
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00a      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007cea:	4b7f      	ldr	r3, [pc, #508]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cf0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	497b      	ldr	r1, [pc, #492]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0320 	and.w	r3, r3, #32
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00a      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d0c:	4b76      	ldr	r3, [pc, #472]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d12:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	4973      	ldr	r1, [pc, #460]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00a      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d2e:	4b6e      	ldr	r3, [pc, #440]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d34:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	69db      	ldr	r3, [r3, #28]
 8007d3c:	496a      	ldr	r1, [pc, #424]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00a      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d50:	4b65      	ldr	r3, [pc, #404]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d56:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	4962      	ldr	r1, [pc, #392]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d72:	4b5d      	ldr	r3, [pc, #372]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d80:	4959      	ldr	r1, [pc, #356]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00a      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d94:	4b54      	ldr	r3, [pc, #336]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d9a:	f023 0203 	bic.w	r2, r3, #3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da2:	4951      	ldr	r1, [pc, #324]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00a      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007db6:	4b4c      	ldr	r3, [pc, #304]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dbc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc4:	4948      	ldr	r1, [pc, #288]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d015      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007dd8:	4b43      	ldr	r3, [pc, #268]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de6:	4940      	ldr	r1, [pc, #256]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007df6:	d105      	bne.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007df8:	4b3b      	ldr	r3, [pc, #236]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	4a3a      	ldr	r2, [pc, #232]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d015      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e10:	4b35      	ldr	r3, [pc, #212]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e16:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e1e:	4932      	ldr	r1, [pc, #200]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e20:	4313      	orrs	r3, r2
 8007e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e2e:	d105      	bne.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e30:	4b2d      	ldr	r3, [pc, #180]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	4a2c      	ldr	r2, [pc, #176]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e3a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d015      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e48:	4b27      	ldr	r3, [pc, #156]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e4e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e56:	4924      	ldr	r1, [pc, #144]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e66:	d105      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e68:	4b1f      	ldr	r3, [pc, #124]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	4a1e      	ldr	r2, [pc, #120]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e72:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d015      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e80:	4b19      	ldr	r3, [pc, #100]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e8e:	4916      	ldr	r1, [pc, #88]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e9e:	d105      	bne.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ea0:	4b11      	ldr	r3, [pc, #68]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	4a10      	ldr	r2, [pc, #64]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ea6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007eaa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d019      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ebe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec6:	4908      	ldr	r1, [pc, #32]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ed6:	d109      	bne.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ed8:	4b03      	ldr	r3, [pc, #12]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	4a02      	ldr	r2, [pc, #8]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ede:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ee2:	60d3      	str	r3, [r2, #12]
 8007ee4:	e002      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007ee6:	bf00      	nop
 8007ee8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d015      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007ef8:	4b29      	ldr	r3, [pc, #164]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007efe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f06:	4926      	ldr	r1, [pc, #152]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f16:	d105      	bne.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f18:	4b21      	ldr	r3, [pc, #132]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	4a20      	ldr	r2, [pc, #128]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f22:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d015      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007f30:	4b1b      	ldr	r3, [pc, #108]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f36:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f3e:	4918      	ldr	r1, [pc, #96]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f4e:	d105      	bne.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f50:	4b13      	ldr	r3, [pc, #76]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	4a12      	ldr	r2, [pc, #72]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f5a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d015      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007f68:	4b0d      	ldr	r3, [pc, #52]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f76:	490a      	ldr	r1, [pc, #40]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f86:	d105      	bne.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f88:	4b05      	ldr	r3, [pc, #20]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	4a04      	ldr	r2, [pc, #16]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007f94:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3718      	adds	r7, #24
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	40021000 	.word	0x40021000

08007fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e054      	b.n	8008060 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d111      	bne.n	8007fe6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f001 feec 	bl	8009da8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d102      	bne.n	8007fde <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a23      	ldr	r2, [pc, #140]	@ (8008068 <HAL_TIM_Base_Init+0xc4>)
 8007fdc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2202      	movs	r2, #2
 8007fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	3304      	adds	r3, #4
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	f001 fa35 	bl	8009468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	080046b9 	.word	0x080046b9

0800806c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b01      	cmp	r3, #1
 800807e:	d001      	beq.n	8008084 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e04c      	b.n	800811e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2202      	movs	r2, #2
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a26      	ldr	r2, [pc, #152]	@ (800812c <HAL_TIM_Base_Start+0xc0>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d022      	beq.n	80080dc <HAL_TIM_Base_Start+0x70>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800809e:	d01d      	beq.n	80080dc <HAL_TIM_Base_Start+0x70>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a22      	ldr	r2, [pc, #136]	@ (8008130 <HAL_TIM_Base_Start+0xc4>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d018      	beq.n	80080dc <HAL_TIM_Base_Start+0x70>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a21      	ldr	r2, [pc, #132]	@ (8008134 <HAL_TIM_Base_Start+0xc8>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d013      	beq.n	80080dc <HAL_TIM_Base_Start+0x70>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a1f      	ldr	r2, [pc, #124]	@ (8008138 <HAL_TIM_Base_Start+0xcc>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d00e      	beq.n	80080dc <HAL_TIM_Base_Start+0x70>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a1e      	ldr	r2, [pc, #120]	@ (800813c <HAL_TIM_Base_Start+0xd0>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d009      	beq.n	80080dc <HAL_TIM_Base_Start+0x70>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008140 <HAL_TIM_Base_Start+0xd4>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d004      	beq.n	80080dc <HAL_TIM_Base_Start+0x70>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a1b      	ldr	r2, [pc, #108]	@ (8008144 <HAL_TIM_Base_Start+0xd8>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d115      	bne.n	8008108 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689a      	ldr	r2, [r3, #8]
 80080e2:	4b19      	ldr	r3, [pc, #100]	@ (8008148 <HAL_TIM_Base_Start+0xdc>)
 80080e4:	4013      	ands	r3, r2
 80080e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2b06      	cmp	r3, #6
 80080ec:	d015      	beq.n	800811a <HAL_TIM_Base_Start+0xae>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080f4:	d011      	beq.n	800811a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f042 0201 	orr.w	r2, r2, #1
 8008104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008106:	e008      	b.n	800811a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f042 0201 	orr.w	r2, r2, #1
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	e000      	b.n	800811c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800811a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	40012c00 	.word	0x40012c00
 8008130:	40000400 	.word	0x40000400
 8008134:	40000800 	.word	0x40000800
 8008138:	40000c00 	.word	0x40000c00
 800813c:	40013400 	.word	0x40013400
 8008140:	40014000 	.word	0x40014000
 8008144:	40015000 	.word	0x40015000
 8008148:	00010007 	.word	0x00010007

0800814c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b01      	cmp	r3, #1
 800815e:	d001      	beq.n	8008164 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e054      	b.n	800820e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2202      	movs	r2, #2
 8008168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f042 0201 	orr.w	r2, r2, #1
 800817a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a26      	ldr	r2, [pc, #152]	@ (800821c <HAL_TIM_Base_Start_IT+0xd0>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d022      	beq.n	80081cc <HAL_TIM_Base_Start_IT+0x80>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800818e:	d01d      	beq.n	80081cc <HAL_TIM_Base_Start_IT+0x80>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a22      	ldr	r2, [pc, #136]	@ (8008220 <HAL_TIM_Base_Start_IT+0xd4>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d018      	beq.n	80081cc <HAL_TIM_Base_Start_IT+0x80>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a21      	ldr	r2, [pc, #132]	@ (8008224 <HAL_TIM_Base_Start_IT+0xd8>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d013      	beq.n	80081cc <HAL_TIM_Base_Start_IT+0x80>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a1f      	ldr	r2, [pc, #124]	@ (8008228 <HAL_TIM_Base_Start_IT+0xdc>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d00e      	beq.n	80081cc <HAL_TIM_Base_Start_IT+0x80>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a1e      	ldr	r2, [pc, #120]	@ (800822c <HAL_TIM_Base_Start_IT+0xe0>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d009      	beq.n	80081cc <HAL_TIM_Base_Start_IT+0x80>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a1c      	ldr	r2, [pc, #112]	@ (8008230 <HAL_TIM_Base_Start_IT+0xe4>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d004      	beq.n	80081cc <HAL_TIM_Base_Start_IT+0x80>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a1b      	ldr	r2, [pc, #108]	@ (8008234 <HAL_TIM_Base_Start_IT+0xe8>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d115      	bne.n	80081f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689a      	ldr	r2, [r3, #8]
 80081d2:	4b19      	ldr	r3, [pc, #100]	@ (8008238 <HAL_TIM_Base_Start_IT+0xec>)
 80081d4:	4013      	ands	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2b06      	cmp	r3, #6
 80081dc:	d015      	beq.n	800820a <HAL_TIM_Base_Start_IT+0xbe>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081e4:	d011      	beq.n	800820a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f042 0201 	orr.w	r2, r2, #1
 80081f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f6:	e008      	b.n	800820a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	e000      	b.n	800820c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800820a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	40012c00 	.word	0x40012c00
 8008220:	40000400 	.word	0x40000400
 8008224:	40000800 	.word	0x40000800
 8008228:	40000c00 	.word	0x40000c00
 800822c:	40013400 	.word	0x40013400
 8008230:	40014000 	.word	0x40014000
 8008234:	40015000 	.word	0x40015000
 8008238:	00010007 	.word	0x00010007

0800823c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e054      	b.n	80082f8 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b00      	cmp	r3, #0
 8008258:	d111      	bne.n	800827e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f001 fda0 	bl	8009da8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800826c:	2b00      	cmp	r3, #0
 800826e:	d102      	bne.n	8008276 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a23      	ldr	r2, [pc, #140]	@ (8008300 <HAL_TIM_PWM_Init+0xc4>)
 8008274:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2202      	movs	r2, #2
 8008282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	3304      	adds	r3, #4
 800828e:	4619      	mov	r1, r3
 8008290:	4610      	mov	r0, r2
 8008292:	f001 f8e9 	bl	8009468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	08008305 	.word	0x08008305

08008304 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d109      	bne.n	800833c <HAL_TIM_PWM_Start+0x24>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b01      	cmp	r3, #1
 8008332:	bf14      	ite	ne
 8008334:	2301      	movne	r3, #1
 8008336:	2300      	moveq	r3, #0
 8008338:	b2db      	uxtb	r3, r3
 800833a:	e03c      	b.n	80083b6 <HAL_TIM_PWM_Start+0x9e>
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2b04      	cmp	r3, #4
 8008340:	d109      	bne.n	8008356 <HAL_TIM_PWM_Start+0x3e>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b01      	cmp	r3, #1
 800834c:	bf14      	ite	ne
 800834e:	2301      	movne	r3, #1
 8008350:	2300      	moveq	r3, #0
 8008352:	b2db      	uxtb	r3, r3
 8008354:	e02f      	b.n	80083b6 <HAL_TIM_PWM_Start+0x9e>
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2b08      	cmp	r3, #8
 800835a:	d109      	bne.n	8008370 <HAL_TIM_PWM_Start+0x58>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b01      	cmp	r3, #1
 8008366:	bf14      	ite	ne
 8008368:	2301      	movne	r3, #1
 800836a:	2300      	moveq	r3, #0
 800836c:	b2db      	uxtb	r3, r3
 800836e:	e022      	b.n	80083b6 <HAL_TIM_PWM_Start+0x9e>
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	2b0c      	cmp	r3, #12
 8008374:	d109      	bne.n	800838a <HAL_TIM_PWM_Start+0x72>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b01      	cmp	r3, #1
 8008380:	bf14      	ite	ne
 8008382:	2301      	movne	r3, #1
 8008384:	2300      	moveq	r3, #0
 8008386:	b2db      	uxtb	r3, r3
 8008388:	e015      	b.n	80083b6 <HAL_TIM_PWM_Start+0x9e>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b10      	cmp	r3, #16
 800838e:	d109      	bne.n	80083a4 <HAL_TIM_PWM_Start+0x8c>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b01      	cmp	r3, #1
 800839a:	bf14      	ite	ne
 800839c:	2301      	movne	r3, #1
 800839e:	2300      	moveq	r3, #0
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	e008      	b.n	80083b6 <HAL_TIM_PWM_Start+0x9e>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	bf14      	ite	ne
 80083b0:	2301      	movne	r3, #1
 80083b2:	2300      	moveq	r3, #0
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e0a6      	b.n	800850c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d104      	bne.n	80083ce <HAL_TIM_PWM_Start+0xb6>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2202      	movs	r2, #2
 80083c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083cc:	e023      	b.n	8008416 <HAL_TIM_PWM_Start+0xfe>
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2b04      	cmp	r3, #4
 80083d2:	d104      	bne.n	80083de <HAL_TIM_PWM_Start+0xc6>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2202      	movs	r2, #2
 80083d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083dc:	e01b      	b.n	8008416 <HAL_TIM_PWM_Start+0xfe>
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b08      	cmp	r3, #8
 80083e2:	d104      	bne.n	80083ee <HAL_TIM_PWM_Start+0xd6>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2202      	movs	r2, #2
 80083e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083ec:	e013      	b.n	8008416 <HAL_TIM_PWM_Start+0xfe>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b0c      	cmp	r3, #12
 80083f2:	d104      	bne.n	80083fe <HAL_TIM_PWM_Start+0xe6>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2202      	movs	r2, #2
 80083f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80083fc:	e00b      	b.n	8008416 <HAL_TIM_PWM_Start+0xfe>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b10      	cmp	r3, #16
 8008402:	d104      	bne.n	800840e <HAL_TIM_PWM_Start+0xf6>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2202      	movs	r2, #2
 8008408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800840c:	e003      	b.n	8008416 <HAL_TIM_PWM_Start+0xfe>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2202      	movs	r2, #2
 8008412:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2201      	movs	r2, #1
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	4618      	mov	r0, r3
 8008420:	f001 fc9c 	bl	8009d5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a3a      	ldr	r2, [pc, #232]	@ (8008514 <HAL_TIM_PWM_Start+0x1fc>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d018      	beq.n	8008460 <HAL_TIM_PWM_Start+0x148>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a39      	ldr	r2, [pc, #228]	@ (8008518 <HAL_TIM_PWM_Start+0x200>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d013      	beq.n	8008460 <HAL_TIM_PWM_Start+0x148>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a37      	ldr	r2, [pc, #220]	@ (800851c <HAL_TIM_PWM_Start+0x204>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d00e      	beq.n	8008460 <HAL_TIM_PWM_Start+0x148>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a36      	ldr	r2, [pc, #216]	@ (8008520 <HAL_TIM_PWM_Start+0x208>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d009      	beq.n	8008460 <HAL_TIM_PWM_Start+0x148>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a34      	ldr	r2, [pc, #208]	@ (8008524 <HAL_TIM_PWM_Start+0x20c>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d004      	beq.n	8008460 <HAL_TIM_PWM_Start+0x148>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a33      	ldr	r2, [pc, #204]	@ (8008528 <HAL_TIM_PWM_Start+0x210>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d101      	bne.n	8008464 <HAL_TIM_PWM_Start+0x14c>
 8008460:	2301      	movs	r3, #1
 8008462:	e000      	b.n	8008466 <HAL_TIM_PWM_Start+0x14e>
 8008464:	2300      	movs	r3, #0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d007      	beq.n	800847a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008478:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a25      	ldr	r2, [pc, #148]	@ (8008514 <HAL_TIM_PWM_Start+0x1fc>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d022      	beq.n	80084ca <HAL_TIM_PWM_Start+0x1b2>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800848c:	d01d      	beq.n	80084ca <HAL_TIM_PWM_Start+0x1b2>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a26      	ldr	r2, [pc, #152]	@ (800852c <HAL_TIM_PWM_Start+0x214>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d018      	beq.n	80084ca <HAL_TIM_PWM_Start+0x1b2>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a24      	ldr	r2, [pc, #144]	@ (8008530 <HAL_TIM_PWM_Start+0x218>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d013      	beq.n	80084ca <HAL_TIM_PWM_Start+0x1b2>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a23      	ldr	r2, [pc, #140]	@ (8008534 <HAL_TIM_PWM_Start+0x21c>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d00e      	beq.n	80084ca <HAL_TIM_PWM_Start+0x1b2>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a19      	ldr	r2, [pc, #100]	@ (8008518 <HAL_TIM_PWM_Start+0x200>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d009      	beq.n	80084ca <HAL_TIM_PWM_Start+0x1b2>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a18      	ldr	r2, [pc, #96]	@ (800851c <HAL_TIM_PWM_Start+0x204>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d004      	beq.n	80084ca <HAL_TIM_PWM_Start+0x1b2>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a18      	ldr	r2, [pc, #96]	@ (8008528 <HAL_TIM_PWM_Start+0x210>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d115      	bne.n	80084f6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	689a      	ldr	r2, [r3, #8]
 80084d0:	4b19      	ldr	r3, [pc, #100]	@ (8008538 <HAL_TIM_PWM_Start+0x220>)
 80084d2:	4013      	ands	r3, r2
 80084d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2b06      	cmp	r3, #6
 80084da:	d015      	beq.n	8008508 <HAL_TIM_PWM_Start+0x1f0>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084e2:	d011      	beq.n	8008508 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f042 0201 	orr.w	r2, r2, #1
 80084f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084f4:	e008      	b.n	8008508 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f042 0201 	orr.w	r2, r2, #1
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	e000      	b.n	800850a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008508:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	40012c00 	.word	0x40012c00
 8008518:	40013400 	.word	0x40013400
 800851c:	40014000 	.word	0x40014000
 8008520:	40014400 	.word	0x40014400
 8008524:	40014800 	.word	0x40014800
 8008528:	40015000 	.word	0x40015000
 800852c:	40000400 	.word	0x40000400
 8008530:	40000800 	.word	0x40000800
 8008534:	40000c00 	.word	0x40000c00
 8008538:	00010007 	.word	0x00010007

0800853c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d101      	bne.n	8008550 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e04c      	b.n	80085ea <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b00      	cmp	r3, #0
 800855a:	d111      	bne.n	8008580 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f001 fc1f 	bl	8009da8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800856e:	2b00      	cmp	r3, #0
 8008570:	d102      	bne.n	8008578 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a1f      	ldr	r2, [pc, #124]	@ (80085f4 <HAL_TIM_OnePulse_Init+0xb8>)
 8008576:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2202      	movs	r2, #2
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	3304      	adds	r3, #4
 8008590:	4619      	mov	r1, r3
 8008592:	4610      	mov	r0, r2
 8008594:	f000 ff68 	bl	8009468 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f022 0208 	bic.w	r2, r2, #8
 80085a6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6819      	ldr	r1, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	430a      	orrs	r2, r1
 80085b6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	080085f9 	.word	0x080085f9

080085f8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800861c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008624:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800862c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008634:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008636:	7bfb      	ldrb	r3, [r7, #15]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d108      	bne.n	800864e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d105      	bne.n	800864e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008642:	7b7b      	ldrb	r3, [r7, #13]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d102      	bne.n	800864e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008648:	7b3b      	ldrb	r3, [r7, #12]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d001      	beq.n	8008652 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e059      	b.n	8008706 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2202      	movs	r2, #2
 8008656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2202      	movs	r2, #2
 800865e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2202      	movs	r2, #2
 8008666:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2202      	movs	r2, #2
 800866e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68da      	ldr	r2, [r3, #12]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f042 0202 	orr.w	r2, r2, #2
 8008680:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68da      	ldr	r2, [r3, #12]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f042 0204 	orr.w	r2, r2, #4
 8008690:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2201      	movs	r2, #1
 8008698:	2100      	movs	r1, #0
 800869a:	4618      	mov	r0, r3
 800869c:	f001 fb5e 	bl	8009d5c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2201      	movs	r2, #1
 80086a6:	2104      	movs	r1, #4
 80086a8:	4618      	mov	r0, r3
 80086aa:	f001 fb57 	bl	8009d5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a17      	ldr	r2, [pc, #92]	@ (8008710 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d018      	beq.n	80086ea <HAL_TIM_OnePulse_Start_IT+0xde>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a15      	ldr	r2, [pc, #84]	@ (8008714 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d013      	beq.n	80086ea <HAL_TIM_OnePulse_Start_IT+0xde>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a14      	ldr	r2, [pc, #80]	@ (8008718 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d00e      	beq.n	80086ea <HAL_TIM_OnePulse_Start_IT+0xde>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a12      	ldr	r2, [pc, #72]	@ (800871c <HAL_TIM_OnePulse_Start_IT+0x110>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d009      	beq.n	80086ea <HAL_TIM_OnePulse_Start_IT+0xde>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a11      	ldr	r2, [pc, #68]	@ (8008720 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d004      	beq.n	80086ea <HAL_TIM_OnePulse_Start_IT+0xde>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a0f      	ldr	r2, [pc, #60]	@ (8008724 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d101      	bne.n	80086ee <HAL_TIM_OnePulse_Start_IT+0xe2>
 80086ea:	2301      	movs	r3, #1
 80086ec:	e000      	b.n	80086f0 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80086ee:	2300      	movs	r3, #0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d007      	beq.n	8008704 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008702:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	40012c00 	.word	0x40012c00
 8008714:	40013400 	.word	0x40013400
 8008718:	40014000 	.word	0x40014000
 800871c:	40014400 	.word	0x40014400
 8008720:	40014800 	.word	0x40014800
 8008724:	40015000 	.word	0x40015000

08008728 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d101      	bne.n	800873c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e0a2      	b.n	8008882 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b00      	cmp	r3, #0
 8008746:	d111      	bne.n	800876c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f001 fb29 	bl	8009da8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800875a:	2b00      	cmp	r3, #0
 800875c:	d102      	bne.n	8008764 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a4a      	ldr	r2, [pc, #296]	@ (800888c <HAL_TIM_Encoder_Init+0x164>)
 8008762:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	6812      	ldr	r2, [r2, #0]
 800877e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8008782:	f023 0307 	bic.w	r3, r3, #7
 8008786:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3304      	adds	r3, #4
 8008790:	4619      	mov	r1, r3
 8008792:	4610      	mov	r0, r2
 8008794:	f000 fe68 	bl	8009468 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087c0:	f023 0303 	bic.w	r3, r3, #3
 80087c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	689a      	ldr	r2, [r3, #8]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	021b      	lsls	r3, r3, #8
 80087d0:	4313      	orrs	r3, r2
 80087d2:	693a      	ldr	r2, [r7, #16]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80087de:	f023 030c 	bic.w	r3, r3, #12
 80087e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80087ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80087ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	68da      	ldr	r2, [r3, #12]
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	021b      	lsls	r3, r3, #8
 80087fa:	4313      	orrs	r3, r2
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	4313      	orrs	r3, r2
 8008800:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	011a      	lsls	r2, r3, #4
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	6a1b      	ldr	r3, [r3, #32]
 800880c:	031b      	lsls	r3, r3, #12
 800880e:	4313      	orrs	r3, r2
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	4313      	orrs	r3, r2
 8008814:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800881c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008824:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	011b      	lsls	r3, r3, #4
 8008830:	4313      	orrs	r3, r2
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	4313      	orrs	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	08004635 	.word	0x08004635

08008890 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80088a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80088a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d110      	bne.n	80088e2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80088c0:	7bfb      	ldrb	r3, [r7, #15]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d102      	bne.n	80088cc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80088c6:	7b7b      	ldrb	r3, [r7, #13]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d001      	beq.n	80088d0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e069      	b.n	80089a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2202      	movs	r2, #2
 80088d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2202      	movs	r2, #2
 80088dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088e0:	e031      	b.n	8008946 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2b04      	cmp	r3, #4
 80088e6:	d110      	bne.n	800890a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d102      	bne.n	80088f4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80088ee:	7b3b      	ldrb	r3, [r7, #12]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d001      	beq.n	80088f8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e055      	b.n	80089a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2202      	movs	r2, #2
 80088fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2202      	movs	r2, #2
 8008904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008908:	e01d      	b.n	8008946 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d108      	bne.n	8008922 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d105      	bne.n	8008922 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008916:	7b7b      	ldrb	r3, [r7, #13]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d102      	bne.n	8008922 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800891c:	7b3b      	ldrb	r3, [r7, #12]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d001      	beq.n	8008926 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e03e      	b.n	80089a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2202      	movs	r2, #2
 800892a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2202      	movs	r2, #2
 8008932:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2202      	movs	r2, #2
 800893a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2202      	movs	r2, #2
 8008942:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d003      	beq.n	8008954 <HAL_TIM_Encoder_Start+0xc4>
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	2b04      	cmp	r3, #4
 8008950:	d008      	beq.n	8008964 <HAL_TIM_Encoder_Start+0xd4>
 8008952:	e00f      	b.n	8008974 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2201      	movs	r2, #1
 800895a:	2100      	movs	r1, #0
 800895c:	4618      	mov	r0, r3
 800895e:	f001 f9fd 	bl	8009d5c <TIM_CCxChannelCmd>
      break;
 8008962:	e016      	b.n	8008992 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2201      	movs	r2, #1
 800896a:	2104      	movs	r1, #4
 800896c:	4618      	mov	r0, r3
 800896e:	f001 f9f5 	bl	8009d5c <TIM_CCxChannelCmd>
      break;
 8008972:	e00e      	b.n	8008992 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2201      	movs	r2, #1
 800897a:	2100      	movs	r1, #0
 800897c:	4618      	mov	r0, r3
 800897e:	f001 f9ed 	bl	8009d5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2201      	movs	r2, #1
 8008988:	2104      	movs	r1, #4
 800898a:	4618      	mov	r0, r3
 800898c:	f001 f9e6 	bl	8009d5c <TIM_CCxChannelCmd>
      break;
 8008990:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f042 0201 	orr.w	r2, r2, #1
 80089a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	f003 0302 	and.w	r3, r3, #2
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d026      	beq.n	8008a1c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d021      	beq.n	8008a1c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f06f 0202 	mvn.w	r2, #2
 80089e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	f003 0303 	and.w	r3, r3, #3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d005      	beq.n	8008a02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	4798      	blx	r3
 8008a00:	e009      	b.n	8008a16 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	f003 0304 	and.w	r3, r3, #4
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d026      	beq.n	8008a74 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d021      	beq.n	8008a74 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f06f 0204 	mvn.w	r2, #4
 8008a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d005      	beq.n	8008a5a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	4798      	blx	r3
 8008a58:	e009      	b.n	8008a6e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	f003 0308 	and.w	r3, r3, #8
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d026      	beq.n	8008acc <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f003 0308 	and.w	r3, r3, #8
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d021      	beq.n	8008acc <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f06f 0208 	mvn.w	r2, #8
 8008a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2204      	movs	r2, #4
 8008a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	f003 0303 	and.w	r3, r3, #3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d005      	beq.n	8008ab2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	4798      	blx	r3
 8008ab0:	e009      	b.n	8008ac6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	f003 0310 	and.w	r3, r3, #16
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d026      	beq.n	8008b24 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f003 0310 	and.w	r3, r3, #16
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d021      	beq.n	8008b24 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f06f 0210 	mvn.w	r2, #16
 8008ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2208      	movs	r2, #8
 8008aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d005      	beq.n	8008b0a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	4798      	blx	r3
 8008b08:	e009      	b.n	8008b1e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00e      	beq.n	8008b4c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d009      	beq.n	8008b4c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f06f 0201 	mvn.w	r2, #1
 8008b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d104      	bne.n	8008b60 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00e      	beq.n	8008b7e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d009      	beq.n	8008b7e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00e      	beq.n	8008ba6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d009      	beq.n	8008ba6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00e      	beq.n	8008bce <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d009      	beq.n	8008bce <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	f003 0320 	and.w	r3, r3, #32
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00e      	beq.n	8008bf6 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f003 0320 	and.w	r3, r3, #32
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d009      	beq.n	8008bf6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f06f 0220 	mvn.w	r2, #32
 8008bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00e      	beq.n	8008c1e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d009      	beq.n	8008c1e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00e      	beq.n	8008c46 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d009      	beq.n	8008c46 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00e      	beq.n	8008c6e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d009      	beq.n	8008c6e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00e      	beq.n	8008c96 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d009      	beq.n	8008c96 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c96:	bf00      	nop
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
	...

08008ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cac:	2300      	movs	r3, #0
 8008cae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d101      	bne.n	8008cbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008cba:	2302      	movs	r3, #2
 8008cbc:	e0ff      	b.n	8008ebe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b14      	cmp	r3, #20
 8008cca:	f200 80f0 	bhi.w	8008eae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008cce:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd4:	08008d29 	.word	0x08008d29
 8008cd8:	08008eaf 	.word	0x08008eaf
 8008cdc:	08008eaf 	.word	0x08008eaf
 8008ce0:	08008eaf 	.word	0x08008eaf
 8008ce4:	08008d69 	.word	0x08008d69
 8008ce8:	08008eaf 	.word	0x08008eaf
 8008cec:	08008eaf 	.word	0x08008eaf
 8008cf0:	08008eaf 	.word	0x08008eaf
 8008cf4:	08008dab 	.word	0x08008dab
 8008cf8:	08008eaf 	.word	0x08008eaf
 8008cfc:	08008eaf 	.word	0x08008eaf
 8008d00:	08008eaf 	.word	0x08008eaf
 8008d04:	08008deb 	.word	0x08008deb
 8008d08:	08008eaf 	.word	0x08008eaf
 8008d0c:	08008eaf 	.word	0x08008eaf
 8008d10:	08008eaf 	.word	0x08008eaf
 8008d14:	08008e2d 	.word	0x08008e2d
 8008d18:	08008eaf 	.word	0x08008eaf
 8008d1c:	08008eaf 	.word	0x08008eaf
 8008d20:	08008eaf 	.word	0x08008eaf
 8008d24:	08008e6d 	.word	0x08008e6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68b9      	ldr	r1, [r7, #8]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 fc4e 	bl	80095d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	699a      	ldr	r2, [r3, #24]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f042 0208 	orr.w	r2, r2, #8
 8008d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	699a      	ldr	r2, [r3, #24]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f022 0204 	bic.w	r2, r2, #4
 8008d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6999      	ldr	r1, [r3, #24]
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	691a      	ldr	r2, [r3, #16]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	619a      	str	r2, [r3, #24]
      break;
 8008d66:	e0a5      	b.n	8008eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68b9      	ldr	r1, [r7, #8]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 fcc8 	bl	8009704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	699a      	ldr	r2, [r3, #24]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	699a      	ldr	r2, [r3, #24]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6999      	ldr	r1, [r3, #24]
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	021a      	lsls	r2, r3, #8
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	430a      	orrs	r2, r1
 8008da6:	619a      	str	r2, [r3, #24]
      break;
 8008da8:	e084      	b.n	8008eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68b9      	ldr	r1, [r7, #8]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 fd3b 	bl	800982c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	69da      	ldr	r2, [r3, #28]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f042 0208 	orr.w	r2, r2, #8
 8008dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	69da      	ldr	r2, [r3, #28]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f022 0204 	bic.w	r2, r2, #4
 8008dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	69d9      	ldr	r1, [r3, #28]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	691a      	ldr	r2, [r3, #16]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	430a      	orrs	r2, r1
 8008de6:	61da      	str	r2, [r3, #28]
      break;
 8008de8:	e064      	b.n	8008eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68b9      	ldr	r1, [r7, #8]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f000 fdad 	bl	8009950 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	69da      	ldr	r2, [r3, #28]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	69da      	ldr	r2, [r3, #28]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	69d9      	ldr	r1, [r3, #28]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	021a      	lsls	r2, r3, #8
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	430a      	orrs	r2, r1
 8008e28:	61da      	str	r2, [r3, #28]
      break;
 8008e2a:	e043      	b.n	8008eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68b9      	ldr	r1, [r7, #8]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 fe20 	bl	8009a78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f042 0208 	orr.w	r2, r2, #8
 8008e46:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f022 0204 	bic.w	r2, r2, #4
 8008e56:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	691a      	ldr	r2, [r3, #16]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008e6a:	e023      	b.n	8008eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68b9      	ldr	r1, [r7, #8]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 fe6a 	bl	8009b4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e96:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	021a      	lsls	r2, r3, #8
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	430a      	orrs	r2, r1
 8008eaa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008eac:	e002      	b.n	8008eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8008eb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop

08008ec8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d101      	bne.n	8008ee4 <HAL_TIM_ConfigClockSource+0x1c>
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	e0f6      	b.n	80090d2 <HAL_TIM_ConfigClockSource+0x20a>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008f02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68ba      	ldr	r2, [r7, #8]
 8008f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a6f      	ldr	r2, [pc, #444]	@ (80090dc <HAL_TIM_ConfigClockSource+0x214>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	f000 80c1 	beq.w	80090a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008f24:	4a6d      	ldr	r2, [pc, #436]	@ (80090dc <HAL_TIM_ConfigClockSource+0x214>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	f200 80c6 	bhi.w	80090b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f2c:	4a6c      	ldr	r2, [pc, #432]	@ (80090e0 <HAL_TIM_ConfigClockSource+0x218>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	f000 80b9 	beq.w	80090a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008f34:	4a6a      	ldr	r2, [pc, #424]	@ (80090e0 <HAL_TIM_ConfigClockSource+0x218>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	f200 80be 	bhi.w	80090b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f3c:	4a69      	ldr	r2, [pc, #420]	@ (80090e4 <HAL_TIM_ConfigClockSource+0x21c>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	f000 80b1 	beq.w	80090a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008f44:	4a67      	ldr	r2, [pc, #412]	@ (80090e4 <HAL_TIM_ConfigClockSource+0x21c>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	f200 80b6 	bhi.w	80090b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f4c:	4a66      	ldr	r2, [pc, #408]	@ (80090e8 <HAL_TIM_ConfigClockSource+0x220>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	f000 80a9 	beq.w	80090a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008f54:	4a64      	ldr	r2, [pc, #400]	@ (80090e8 <HAL_TIM_ConfigClockSource+0x220>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	f200 80ae 	bhi.w	80090b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f5c:	4a63      	ldr	r2, [pc, #396]	@ (80090ec <HAL_TIM_ConfigClockSource+0x224>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	f000 80a1 	beq.w	80090a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008f64:	4a61      	ldr	r2, [pc, #388]	@ (80090ec <HAL_TIM_ConfigClockSource+0x224>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	f200 80a6 	bhi.w	80090b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f6c:	4a60      	ldr	r2, [pc, #384]	@ (80090f0 <HAL_TIM_ConfigClockSource+0x228>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	f000 8099 	beq.w	80090a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008f74:	4a5e      	ldr	r2, [pc, #376]	@ (80090f0 <HAL_TIM_ConfigClockSource+0x228>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	f200 809e 	bhi.w	80090b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008f80:	f000 8091 	beq.w	80090a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008f84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008f88:	f200 8096 	bhi.w	80090b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f90:	f000 8089 	beq.w	80090a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008f94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f98:	f200 808e 	bhi.w	80090b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fa0:	d03e      	beq.n	8009020 <HAL_TIM_ConfigClockSource+0x158>
 8008fa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fa6:	f200 8087 	bhi.w	80090b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fae:	f000 8086 	beq.w	80090be <HAL_TIM_ConfigClockSource+0x1f6>
 8008fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fb6:	d87f      	bhi.n	80090b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fb8:	2b70      	cmp	r3, #112	@ 0x70
 8008fba:	d01a      	beq.n	8008ff2 <HAL_TIM_ConfigClockSource+0x12a>
 8008fbc:	2b70      	cmp	r3, #112	@ 0x70
 8008fbe:	d87b      	bhi.n	80090b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fc0:	2b60      	cmp	r3, #96	@ 0x60
 8008fc2:	d050      	beq.n	8009066 <HAL_TIM_ConfigClockSource+0x19e>
 8008fc4:	2b60      	cmp	r3, #96	@ 0x60
 8008fc6:	d877      	bhi.n	80090b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fc8:	2b50      	cmp	r3, #80	@ 0x50
 8008fca:	d03c      	beq.n	8009046 <HAL_TIM_ConfigClockSource+0x17e>
 8008fcc:	2b50      	cmp	r3, #80	@ 0x50
 8008fce:	d873      	bhi.n	80090b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fd0:	2b40      	cmp	r3, #64	@ 0x40
 8008fd2:	d058      	beq.n	8009086 <HAL_TIM_ConfigClockSource+0x1be>
 8008fd4:	2b40      	cmp	r3, #64	@ 0x40
 8008fd6:	d86f      	bhi.n	80090b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fd8:	2b30      	cmp	r3, #48	@ 0x30
 8008fda:	d064      	beq.n	80090a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008fdc:	2b30      	cmp	r3, #48	@ 0x30
 8008fde:	d86b      	bhi.n	80090b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fe0:	2b20      	cmp	r3, #32
 8008fe2:	d060      	beq.n	80090a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008fe4:	2b20      	cmp	r3, #32
 8008fe6:	d867      	bhi.n	80090b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d05c      	beq.n	80090a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008fec:	2b10      	cmp	r3, #16
 8008fee:	d05a      	beq.n	80090a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008ff0:	e062      	b.n	80090b8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009002:	f000 fe8b 	bl	8009d1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009014:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	609a      	str	r2, [r3, #8]
      break;
 800901e:	e04f      	b.n	80090c0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009030:	f000 fe74 	bl	8009d1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689a      	ldr	r2, [r3, #8]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009042:	609a      	str	r2, [r3, #8]
      break;
 8009044:	e03c      	b.n	80090c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009052:	461a      	mov	r2, r3
 8009054:	f000 fde6 	bl	8009c24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2150      	movs	r1, #80	@ 0x50
 800905e:	4618      	mov	r0, r3
 8009060:	f000 fe3f 	bl	8009ce2 <TIM_ITRx_SetConfig>
      break;
 8009064:	e02c      	b.n	80090c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009072:	461a      	mov	r2, r3
 8009074:	f000 fe05 	bl	8009c82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2160      	movs	r1, #96	@ 0x60
 800907e:	4618      	mov	r0, r3
 8009080:	f000 fe2f 	bl	8009ce2 <TIM_ITRx_SetConfig>
      break;
 8009084:	e01c      	b.n	80090c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009092:	461a      	mov	r2, r3
 8009094:	f000 fdc6 	bl	8009c24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2140      	movs	r1, #64	@ 0x40
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 fe1f 	bl	8009ce2 <TIM_ITRx_SetConfig>
      break;
 80090a4:	e00c      	b.n	80090c0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4619      	mov	r1, r3
 80090b0:	4610      	mov	r0, r2
 80090b2:	f000 fe16 	bl	8009ce2 <TIM_ITRx_SetConfig>
      break;
 80090b6:	e003      	b.n	80090c0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	73fb      	strb	r3, [r7, #15]
      break;
 80090bc:	e000      	b.n	80090c0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80090be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	00100070 	.word	0x00100070
 80090e0:	00100060 	.word	0x00100060
 80090e4:	00100050 	.word	0x00100050
 80090e8:	00100040 	.word	0x00100040
 80090ec:	00100030 	.word	0x00100030
 80090f0:	00100020 	.word	0x00100020

080090f4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800914c:	bf00      	nop
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800919c:	bf00      	nop
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b087      	sub	sp, #28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	460b      	mov	r3, r1
 80091b2:	607a      	str	r2, [r7, #4]
 80091b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d101      	bne.n	80091c4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e14a      	b.n	800945a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	f040 80dd 	bne.w	800938c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80091d2:	7afb      	ldrb	r3, [r7, #11]
 80091d4:	2b1f      	cmp	r3, #31
 80091d6:	f200 80d6 	bhi.w	8009386 <HAL_TIM_RegisterCallback+0x1de>
 80091da:	a201      	add	r2, pc, #4	@ (adr r2, 80091e0 <HAL_TIM_RegisterCallback+0x38>)
 80091dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e0:	08009261 	.word	0x08009261
 80091e4:	08009269 	.word	0x08009269
 80091e8:	08009271 	.word	0x08009271
 80091ec:	08009279 	.word	0x08009279
 80091f0:	08009281 	.word	0x08009281
 80091f4:	08009289 	.word	0x08009289
 80091f8:	08009291 	.word	0x08009291
 80091fc:	08009299 	.word	0x08009299
 8009200:	080092a1 	.word	0x080092a1
 8009204:	080092a9 	.word	0x080092a9
 8009208:	080092b1 	.word	0x080092b1
 800920c:	080092b9 	.word	0x080092b9
 8009210:	080092c1 	.word	0x080092c1
 8009214:	080092c9 	.word	0x080092c9
 8009218:	080092d3 	.word	0x080092d3
 800921c:	080092dd 	.word	0x080092dd
 8009220:	080092e7 	.word	0x080092e7
 8009224:	080092f1 	.word	0x080092f1
 8009228:	080092fb 	.word	0x080092fb
 800922c:	08009305 	.word	0x08009305
 8009230:	0800930f 	.word	0x0800930f
 8009234:	08009319 	.word	0x08009319
 8009238:	08009323 	.word	0x08009323
 800923c:	0800932d 	.word	0x0800932d
 8009240:	08009337 	.word	0x08009337
 8009244:	08009341 	.word	0x08009341
 8009248:	0800934b 	.word	0x0800934b
 800924c:	08009355 	.word	0x08009355
 8009250:	0800935f 	.word	0x0800935f
 8009254:	08009369 	.word	0x08009369
 8009258:	08009373 	.word	0x08009373
 800925c:	0800937d 	.word	0x0800937d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009266:	e0f7      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800926e:	e0f3      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009276:	e0ef      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800927e:	e0eb      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009286:	e0e7      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800928e:	e0e3      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009296:	e0df      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800929e:	e0db      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80092a6:	e0d7      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80092ae:	e0d3      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80092b6:	e0cf      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80092be:	e0cb      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80092c6:	e0c7      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80092d0:	e0c2      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80092da:	e0bd      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80092e4:	e0b8      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80092ee:	e0b3      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80092f8:	e0ae      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009302:	e0a9      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800930c:	e0a4      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009316:	e09f      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009320:	e09a      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800932a:	e095      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009334:	e090      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800933e:	e08b      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009348:	e086      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009352:	e081      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800935c:	e07c      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009366:	e077      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009370:	e072      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800937a:	e06d      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009384:	e068      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	75fb      	strb	r3, [r7, #23]
        break;
 800938a:	e065      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009392:	b2db      	uxtb	r3, r3
 8009394:	2b00      	cmp	r3, #0
 8009396:	d15d      	bne.n	8009454 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8009398:	7afb      	ldrb	r3, [r7, #11]
 800939a:	2b0d      	cmp	r3, #13
 800939c:	d857      	bhi.n	800944e <HAL_TIM_RegisterCallback+0x2a6>
 800939e:	a201      	add	r2, pc, #4	@ (adr r2, 80093a4 <HAL_TIM_RegisterCallback+0x1fc>)
 80093a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a4:	080093dd 	.word	0x080093dd
 80093a8:	080093e5 	.word	0x080093e5
 80093ac:	080093ed 	.word	0x080093ed
 80093b0:	080093f5 	.word	0x080093f5
 80093b4:	080093fd 	.word	0x080093fd
 80093b8:	08009405 	.word	0x08009405
 80093bc:	0800940d 	.word	0x0800940d
 80093c0:	08009415 	.word	0x08009415
 80093c4:	0800941d 	.word	0x0800941d
 80093c8:	08009425 	.word	0x08009425
 80093cc:	0800942d 	.word	0x0800942d
 80093d0:	08009435 	.word	0x08009435
 80093d4:	0800943d 	.word	0x0800943d
 80093d8:	08009445 	.word	0x08009445
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80093e2:	e039      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80093ea:	e035      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80093f2:	e031      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80093fa:	e02d      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009402:	e029      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800940a:	e025      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009412:	e021      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800941a:	e01d      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009422:	e019      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800942a:	e015      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009432:	e011      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800943a:	e00d      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009442:	e009      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800944c:	e004      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	75fb      	strb	r3, [r7, #23]
        break;
 8009452:	e001      	b.n	8009458 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009458:	7dfb      	ldrb	r3, [r7, #23]
}
 800945a:	4618      	mov	r0, r3
 800945c:	371c      	adds	r7, #28
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop

08009468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a4c      	ldr	r2, [pc, #304]	@ (80095ac <TIM_Base_SetConfig+0x144>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d017      	beq.n	80094b0 <TIM_Base_SetConfig+0x48>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009486:	d013      	beq.n	80094b0 <TIM_Base_SetConfig+0x48>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a49      	ldr	r2, [pc, #292]	@ (80095b0 <TIM_Base_SetConfig+0x148>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d00f      	beq.n	80094b0 <TIM_Base_SetConfig+0x48>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a48      	ldr	r2, [pc, #288]	@ (80095b4 <TIM_Base_SetConfig+0x14c>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d00b      	beq.n	80094b0 <TIM_Base_SetConfig+0x48>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a47      	ldr	r2, [pc, #284]	@ (80095b8 <TIM_Base_SetConfig+0x150>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d007      	beq.n	80094b0 <TIM_Base_SetConfig+0x48>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a46      	ldr	r2, [pc, #280]	@ (80095bc <TIM_Base_SetConfig+0x154>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d003      	beq.n	80094b0 <TIM_Base_SetConfig+0x48>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a45      	ldr	r2, [pc, #276]	@ (80095c0 <TIM_Base_SetConfig+0x158>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d108      	bne.n	80094c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	4313      	orrs	r3, r2
 80094c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a39      	ldr	r2, [pc, #228]	@ (80095ac <TIM_Base_SetConfig+0x144>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d023      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094d0:	d01f      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a36      	ldr	r2, [pc, #216]	@ (80095b0 <TIM_Base_SetConfig+0x148>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d01b      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a35      	ldr	r2, [pc, #212]	@ (80095b4 <TIM_Base_SetConfig+0x14c>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d017      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a34      	ldr	r2, [pc, #208]	@ (80095b8 <TIM_Base_SetConfig+0x150>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d013      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a33      	ldr	r2, [pc, #204]	@ (80095bc <TIM_Base_SetConfig+0x154>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d00f      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a33      	ldr	r2, [pc, #204]	@ (80095c4 <TIM_Base_SetConfig+0x15c>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d00b      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a32      	ldr	r2, [pc, #200]	@ (80095c8 <TIM_Base_SetConfig+0x160>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d007      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a31      	ldr	r2, [pc, #196]	@ (80095cc <TIM_Base_SetConfig+0x164>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d003      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a2c      	ldr	r2, [pc, #176]	@ (80095c0 <TIM_Base_SetConfig+0x158>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d108      	bne.n	8009524 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	4313      	orrs	r3, r2
 8009522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	4313      	orrs	r3, r2
 8009530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	689a      	ldr	r2, [r3, #8]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a18      	ldr	r2, [pc, #96]	@ (80095ac <TIM_Base_SetConfig+0x144>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d013      	beq.n	8009578 <TIM_Base_SetConfig+0x110>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a1a      	ldr	r2, [pc, #104]	@ (80095bc <TIM_Base_SetConfig+0x154>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d00f      	beq.n	8009578 <TIM_Base_SetConfig+0x110>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a1a      	ldr	r2, [pc, #104]	@ (80095c4 <TIM_Base_SetConfig+0x15c>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d00b      	beq.n	8009578 <TIM_Base_SetConfig+0x110>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a19      	ldr	r2, [pc, #100]	@ (80095c8 <TIM_Base_SetConfig+0x160>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d007      	beq.n	8009578 <TIM_Base_SetConfig+0x110>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a18      	ldr	r2, [pc, #96]	@ (80095cc <TIM_Base_SetConfig+0x164>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d003      	beq.n	8009578 <TIM_Base_SetConfig+0x110>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a13      	ldr	r2, [pc, #76]	@ (80095c0 <TIM_Base_SetConfig+0x158>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d103      	bne.n	8009580 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	691a      	ldr	r2, [r3, #16]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	2b01      	cmp	r3, #1
 8009590:	d105      	bne.n	800959e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	f023 0201 	bic.w	r2, r3, #1
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	611a      	str	r2, [r3, #16]
  }
}
 800959e:	bf00      	nop
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	40012c00 	.word	0x40012c00
 80095b0:	40000400 	.word	0x40000400
 80095b4:	40000800 	.word	0x40000800
 80095b8:	40000c00 	.word	0x40000c00
 80095bc:	40013400 	.word	0x40013400
 80095c0:	40015000 	.word	0x40015000
 80095c4:	40014000 	.word	0x40014000
 80095c8:	40014400 	.word	0x40014400
 80095cc:	40014800 	.word	0x40014800

080095d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b087      	sub	sp, #28
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a1b      	ldr	r3, [r3, #32]
 80095e4:	f023 0201 	bic.w	r2, r3, #1
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f023 0303 	bic.w	r3, r3, #3
 800960a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	4313      	orrs	r3, r2
 8009614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f023 0302 	bic.w	r3, r3, #2
 800961c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	4313      	orrs	r3, r2
 8009626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a30      	ldr	r2, [pc, #192]	@ (80096ec <TIM_OC1_SetConfig+0x11c>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d013      	beq.n	8009658 <TIM_OC1_SetConfig+0x88>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a2f      	ldr	r2, [pc, #188]	@ (80096f0 <TIM_OC1_SetConfig+0x120>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d00f      	beq.n	8009658 <TIM_OC1_SetConfig+0x88>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a2e      	ldr	r2, [pc, #184]	@ (80096f4 <TIM_OC1_SetConfig+0x124>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d00b      	beq.n	8009658 <TIM_OC1_SetConfig+0x88>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a2d      	ldr	r2, [pc, #180]	@ (80096f8 <TIM_OC1_SetConfig+0x128>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d007      	beq.n	8009658 <TIM_OC1_SetConfig+0x88>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a2c      	ldr	r2, [pc, #176]	@ (80096fc <TIM_OC1_SetConfig+0x12c>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d003      	beq.n	8009658 <TIM_OC1_SetConfig+0x88>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a2b      	ldr	r2, [pc, #172]	@ (8009700 <TIM_OC1_SetConfig+0x130>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d10c      	bne.n	8009672 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	f023 0308 	bic.w	r3, r3, #8
 800965e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	697a      	ldr	r2, [r7, #20]
 8009666:	4313      	orrs	r3, r2
 8009668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f023 0304 	bic.w	r3, r3, #4
 8009670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a1d      	ldr	r2, [pc, #116]	@ (80096ec <TIM_OC1_SetConfig+0x11c>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d013      	beq.n	80096a2 <TIM_OC1_SetConfig+0xd2>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a1c      	ldr	r2, [pc, #112]	@ (80096f0 <TIM_OC1_SetConfig+0x120>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d00f      	beq.n	80096a2 <TIM_OC1_SetConfig+0xd2>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a1b      	ldr	r2, [pc, #108]	@ (80096f4 <TIM_OC1_SetConfig+0x124>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d00b      	beq.n	80096a2 <TIM_OC1_SetConfig+0xd2>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a1a      	ldr	r2, [pc, #104]	@ (80096f8 <TIM_OC1_SetConfig+0x128>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d007      	beq.n	80096a2 <TIM_OC1_SetConfig+0xd2>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a19      	ldr	r2, [pc, #100]	@ (80096fc <TIM_OC1_SetConfig+0x12c>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d003      	beq.n	80096a2 <TIM_OC1_SetConfig+0xd2>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a18      	ldr	r2, [pc, #96]	@ (8009700 <TIM_OC1_SetConfig+0x130>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d111      	bne.n	80096c6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80096b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	695b      	ldr	r3, [r3, #20]
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	699b      	ldr	r3, [r3, #24]
 80096c0:	693a      	ldr	r2, [r7, #16]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	685a      	ldr	r2, [r3, #4]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	697a      	ldr	r2, [r7, #20]
 80096de:	621a      	str	r2, [r3, #32]
}
 80096e0:	bf00      	nop
 80096e2:	371c      	adds	r7, #28
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr
 80096ec:	40012c00 	.word	0x40012c00
 80096f0:	40013400 	.word	0x40013400
 80096f4:	40014000 	.word	0x40014000
 80096f8:	40014400 	.word	0x40014400
 80096fc:	40014800 	.word	0x40014800
 8009700:	40015000 	.word	0x40015000

08009704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009704:	b480      	push	{r7}
 8009706:	b087      	sub	sp, #28
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a1b      	ldr	r3, [r3, #32]
 8009718:	f023 0210 	bic.w	r2, r3, #16
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009732:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800973e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	021b      	lsls	r3, r3, #8
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	4313      	orrs	r3, r2
 800974a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f023 0320 	bic.w	r3, r3, #32
 8009752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	011b      	lsls	r3, r3, #4
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	4313      	orrs	r3, r2
 800975e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a2c      	ldr	r2, [pc, #176]	@ (8009814 <TIM_OC2_SetConfig+0x110>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d007      	beq.n	8009778 <TIM_OC2_SetConfig+0x74>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a2b      	ldr	r2, [pc, #172]	@ (8009818 <TIM_OC2_SetConfig+0x114>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d003      	beq.n	8009778 <TIM_OC2_SetConfig+0x74>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a2a      	ldr	r2, [pc, #168]	@ (800981c <TIM_OC2_SetConfig+0x118>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d10d      	bne.n	8009794 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800977e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	011b      	lsls	r3, r3, #4
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	4313      	orrs	r3, r2
 800978a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009792:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a1f      	ldr	r2, [pc, #124]	@ (8009814 <TIM_OC2_SetConfig+0x110>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d013      	beq.n	80097c4 <TIM_OC2_SetConfig+0xc0>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a1e      	ldr	r2, [pc, #120]	@ (8009818 <TIM_OC2_SetConfig+0x114>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d00f      	beq.n	80097c4 <TIM_OC2_SetConfig+0xc0>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a1e      	ldr	r2, [pc, #120]	@ (8009820 <TIM_OC2_SetConfig+0x11c>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d00b      	beq.n	80097c4 <TIM_OC2_SetConfig+0xc0>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a1d      	ldr	r2, [pc, #116]	@ (8009824 <TIM_OC2_SetConfig+0x120>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d007      	beq.n	80097c4 <TIM_OC2_SetConfig+0xc0>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4a1c      	ldr	r2, [pc, #112]	@ (8009828 <TIM_OC2_SetConfig+0x124>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d003      	beq.n	80097c4 <TIM_OC2_SetConfig+0xc0>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a17      	ldr	r2, [pc, #92]	@ (800981c <TIM_OC2_SetConfig+0x118>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d113      	bne.n	80097ec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80097ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80097d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	695b      	ldr	r3, [r3, #20]
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	4313      	orrs	r3, r2
 80097de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	621a      	str	r2, [r3, #32]
}
 8009806:	bf00      	nop
 8009808:	371c      	adds	r7, #28
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	40012c00 	.word	0x40012c00
 8009818:	40013400 	.word	0x40013400
 800981c:	40015000 	.word	0x40015000
 8009820:	40014000 	.word	0x40014000
 8009824:	40014400 	.word	0x40014400
 8009828:	40014800 	.word	0x40014800

0800982c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800982c:	b480      	push	{r7}
 800982e:	b087      	sub	sp, #28
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a1b      	ldr	r3, [r3, #32]
 800983a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a1b      	ldr	r3, [r3, #32]
 8009840:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800985a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800985e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f023 0303 	bic.w	r3, r3, #3
 8009866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	4313      	orrs	r3, r2
 8009870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	021b      	lsls	r3, r3, #8
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	4313      	orrs	r3, r2
 8009884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a2b      	ldr	r2, [pc, #172]	@ (8009938 <TIM_OC3_SetConfig+0x10c>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d007      	beq.n	800989e <TIM_OC3_SetConfig+0x72>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a2a      	ldr	r2, [pc, #168]	@ (800993c <TIM_OC3_SetConfig+0x110>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d003      	beq.n	800989e <TIM_OC3_SetConfig+0x72>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a29      	ldr	r2, [pc, #164]	@ (8009940 <TIM_OC3_SetConfig+0x114>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d10d      	bne.n	80098ba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80098a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	021b      	lsls	r3, r3, #8
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80098b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a1e      	ldr	r2, [pc, #120]	@ (8009938 <TIM_OC3_SetConfig+0x10c>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d013      	beq.n	80098ea <TIM_OC3_SetConfig+0xbe>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a1d      	ldr	r2, [pc, #116]	@ (800993c <TIM_OC3_SetConfig+0x110>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d00f      	beq.n	80098ea <TIM_OC3_SetConfig+0xbe>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a1d      	ldr	r2, [pc, #116]	@ (8009944 <TIM_OC3_SetConfig+0x118>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d00b      	beq.n	80098ea <TIM_OC3_SetConfig+0xbe>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a1c      	ldr	r2, [pc, #112]	@ (8009948 <TIM_OC3_SetConfig+0x11c>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d007      	beq.n	80098ea <TIM_OC3_SetConfig+0xbe>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a1b      	ldr	r2, [pc, #108]	@ (800994c <TIM_OC3_SetConfig+0x120>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d003      	beq.n	80098ea <TIM_OC3_SetConfig+0xbe>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a16      	ldr	r2, [pc, #88]	@ (8009940 <TIM_OC3_SetConfig+0x114>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d113      	bne.n	8009912 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80098f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80098f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	011b      	lsls	r3, r3, #4
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	4313      	orrs	r3, r2
 8009904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	011b      	lsls	r3, r3, #4
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	4313      	orrs	r3, r2
 8009910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	693a      	ldr	r2, [r7, #16]
 8009916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	685a      	ldr	r2, [r3, #4]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	621a      	str	r2, [r3, #32]
}
 800992c:	bf00      	nop
 800992e:	371c      	adds	r7, #28
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	40012c00 	.word	0x40012c00
 800993c:	40013400 	.word	0x40013400
 8009940:	40015000 	.word	0x40015000
 8009944:	40014000 	.word	0x40014000
 8009948:	40014400 	.word	0x40014400
 800994c:	40014800 	.word	0x40014800

08009950 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009950:	b480      	push	{r7}
 8009952:	b087      	sub	sp, #28
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a1b      	ldr	r3, [r3, #32]
 800995e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a1b      	ldr	r3, [r3, #32]
 8009964:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	69db      	ldr	r3, [r3, #28]
 8009976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800997e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800998a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	021b      	lsls	r3, r3, #8
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	4313      	orrs	r3, r2
 8009996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800999e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	031b      	lsls	r3, r3, #12
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a2c      	ldr	r2, [pc, #176]	@ (8009a60 <TIM_OC4_SetConfig+0x110>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d007      	beq.n	80099c4 <TIM_OC4_SetConfig+0x74>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a2b      	ldr	r2, [pc, #172]	@ (8009a64 <TIM_OC4_SetConfig+0x114>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d003      	beq.n	80099c4 <TIM_OC4_SetConfig+0x74>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a2a      	ldr	r2, [pc, #168]	@ (8009a68 <TIM_OC4_SetConfig+0x118>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d10d      	bne.n	80099e0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80099ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	031b      	lsls	r3, r3, #12
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80099de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a1f      	ldr	r2, [pc, #124]	@ (8009a60 <TIM_OC4_SetConfig+0x110>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d013      	beq.n	8009a10 <TIM_OC4_SetConfig+0xc0>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a1e      	ldr	r2, [pc, #120]	@ (8009a64 <TIM_OC4_SetConfig+0x114>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d00f      	beq.n	8009a10 <TIM_OC4_SetConfig+0xc0>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a1e      	ldr	r2, [pc, #120]	@ (8009a6c <TIM_OC4_SetConfig+0x11c>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d00b      	beq.n	8009a10 <TIM_OC4_SetConfig+0xc0>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a1d      	ldr	r2, [pc, #116]	@ (8009a70 <TIM_OC4_SetConfig+0x120>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d007      	beq.n	8009a10 <TIM_OC4_SetConfig+0xc0>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a1c      	ldr	r2, [pc, #112]	@ (8009a74 <TIM_OC4_SetConfig+0x124>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d003      	beq.n	8009a10 <TIM_OC4_SetConfig+0xc0>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a17      	ldr	r2, [pc, #92]	@ (8009a68 <TIM_OC4_SetConfig+0x118>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d113      	bne.n	8009a38 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a16:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a1e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	019b      	lsls	r3, r3, #6
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	019b      	lsls	r3, r3, #6
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	685a      	ldr	r2, [r3, #4]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	621a      	str	r2, [r3, #32]
}
 8009a52:	bf00      	nop
 8009a54:	371c      	adds	r7, #28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	40012c00 	.word	0x40012c00
 8009a64:	40013400 	.word	0x40013400
 8009a68:	40015000 	.word	0x40015000
 8009a6c:	40014000 	.word	0x40014000
 8009a70:	40014400 	.word	0x40014400
 8009a74:	40014800 	.word	0x40014800

08009a78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b087      	sub	sp, #28
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a1b      	ldr	r3, [r3, #32]
 8009a8c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009abc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	041b      	lsls	r3, r3, #16
 8009ac4:	693a      	ldr	r2, [r7, #16]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a19      	ldr	r2, [pc, #100]	@ (8009b34 <TIM_OC5_SetConfig+0xbc>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d013      	beq.n	8009afa <TIM_OC5_SetConfig+0x82>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a18      	ldr	r2, [pc, #96]	@ (8009b38 <TIM_OC5_SetConfig+0xc0>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d00f      	beq.n	8009afa <TIM_OC5_SetConfig+0x82>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a17      	ldr	r2, [pc, #92]	@ (8009b3c <TIM_OC5_SetConfig+0xc4>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d00b      	beq.n	8009afa <TIM_OC5_SetConfig+0x82>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a16      	ldr	r2, [pc, #88]	@ (8009b40 <TIM_OC5_SetConfig+0xc8>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d007      	beq.n	8009afa <TIM_OC5_SetConfig+0x82>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a15      	ldr	r2, [pc, #84]	@ (8009b44 <TIM_OC5_SetConfig+0xcc>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d003      	beq.n	8009afa <TIM_OC5_SetConfig+0x82>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a14      	ldr	r2, [pc, #80]	@ (8009b48 <TIM_OC5_SetConfig+0xd0>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d109      	bne.n	8009b0e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	021b      	lsls	r3, r3, #8
 8009b08:	697a      	ldr	r2, [r7, #20]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	697a      	ldr	r2, [r7, #20]
 8009b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	693a      	ldr	r2, [r7, #16]
 8009b26:	621a      	str	r2, [r3, #32]
}
 8009b28:	bf00      	nop
 8009b2a:	371c      	adds	r7, #28
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	40012c00 	.word	0x40012c00
 8009b38:	40013400 	.word	0x40013400
 8009b3c:	40014000 	.word	0x40014000
 8009b40:	40014400 	.word	0x40014400
 8009b44:	40014800 	.word	0x40014800
 8009b48:	40015000 	.word	0x40015000

08009b4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b087      	sub	sp, #28
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6a1b      	ldr	r3, [r3, #32]
 8009b60:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009b7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	021b      	lsls	r3, r3, #8
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009b92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	051b      	lsls	r3, r3, #20
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8009c0c <TIM_OC6_SetConfig+0xc0>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d013      	beq.n	8009bd0 <TIM_OC6_SetConfig+0x84>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a19      	ldr	r2, [pc, #100]	@ (8009c10 <TIM_OC6_SetConfig+0xc4>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d00f      	beq.n	8009bd0 <TIM_OC6_SetConfig+0x84>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a18      	ldr	r2, [pc, #96]	@ (8009c14 <TIM_OC6_SetConfig+0xc8>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d00b      	beq.n	8009bd0 <TIM_OC6_SetConfig+0x84>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4a17      	ldr	r2, [pc, #92]	@ (8009c18 <TIM_OC6_SetConfig+0xcc>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d007      	beq.n	8009bd0 <TIM_OC6_SetConfig+0x84>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a16      	ldr	r2, [pc, #88]	@ (8009c1c <TIM_OC6_SetConfig+0xd0>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d003      	beq.n	8009bd0 <TIM_OC6_SetConfig+0x84>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a15      	ldr	r2, [pc, #84]	@ (8009c20 <TIM_OC6_SetConfig+0xd4>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d109      	bne.n	8009be4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	695b      	ldr	r3, [r3, #20]
 8009bdc:	029b      	lsls	r3, r3, #10
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	697a      	ldr	r2, [r7, #20]
 8009be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	685a      	ldr	r2, [r3, #4]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	621a      	str	r2, [r3, #32]
}
 8009bfe:	bf00      	nop
 8009c00:	371c      	adds	r7, #28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	40012c00 	.word	0x40012c00
 8009c10:	40013400 	.word	0x40013400
 8009c14:	40014000 	.word	0x40014000
 8009c18:	40014400 	.word	0x40014400
 8009c1c:	40014800 	.word	0x40014800
 8009c20:	40015000 	.word	0x40015000

08009c24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b087      	sub	sp, #28
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6a1b      	ldr	r3, [r3, #32]
 8009c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	f023 0201 	bic.w	r2, r3, #1
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	011b      	lsls	r3, r3, #4
 8009c54:	693a      	ldr	r2, [r7, #16]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	f023 030a 	bic.w	r3, r3, #10
 8009c60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c62:	697a      	ldr	r2, [r7, #20]
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	693a      	ldr	r2, [r7, #16]
 8009c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	697a      	ldr	r2, [r7, #20]
 8009c74:	621a      	str	r2, [r3, #32]
}
 8009c76:	bf00      	nop
 8009c78:	371c      	adds	r7, #28
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr

08009c82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c82:	b480      	push	{r7}
 8009c84:	b087      	sub	sp, #28
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	60f8      	str	r0, [r7, #12]
 8009c8a:	60b9      	str	r1, [r7, #8]
 8009c8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	f023 0210 	bic.w	r2, r3, #16
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009cac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	031b      	lsls	r3, r3, #12
 8009cb2:	693a      	ldr	r2, [r7, #16]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009cbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	011b      	lsls	r3, r3, #4
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	693a      	ldr	r2, [r7, #16]
 8009cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	697a      	ldr	r2, [r7, #20]
 8009cd4:	621a      	str	r2, [r3, #32]
}
 8009cd6:	bf00      	nop
 8009cd8:	371c      	adds	r7, #28
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr

08009ce2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ce2:	b480      	push	{r7}
 8009ce4:	b085      	sub	sp, #20
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	f043 0307 	orr.w	r3, r3, #7
 8009d08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	609a      	str	r2, [r3, #8]
}
 8009d10:	bf00      	nop
 8009d12:	3714      	adds	r7, #20
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b087      	sub	sp, #28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
 8009d28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	021a      	lsls	r2, r3, #8
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	431a      	orrs	r2, r3
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	697a      	ldr	r2, [r7, #20]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	609a      	str	r2, [r3, #8]
}
 8009d50:	bf00      	nop
 8009d52:	371c      	adds	r7, #28
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b087      	sub	sp, #28
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	f003 031f 	and.w	r3, r3, #31
 8009d6e:	2201      	movs	r2, #1
 8009d70:	fa02 f303 	lsl.w	r3, r2, r3
 8009d74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6a1a      	ldr	r2, [r3, #32]
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	43db      	mvns	r3, r3
 8009d7e:	401a      	ands	r2, r3
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6a1a      	ldr	r2, [r3, #32]
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	f003 031f 	and.w	r3, r3, #31
 8009d8e:	6879      	ldr	r1, [r7, #4]
 8009d90:	fa01 f303 	lsl.w	r3, r1, r3
 8009d94:	431a      	orrs	r2, r3
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	621a      	str	r2, [r3, #32]
}
 8009d9a:	bf00      	nop
 8009d9c:	371c      	adds	r7, #28
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
	...

08009da8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a26      	ldr	r2, [pc, #152]	@ (8009e4c <TIM_ResetCallback+0xa4>)
 8009db4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a25      	ldr	r2, [pc, #148]	@ (8009e50 <TIM_ResetCallback+0xa8>)
 8009dbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a24      	ldr	r2, [pc, #144]	@ (8009e54 <TIM_ResetCallback+0xac>)
 8009dc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a23      	ldr	r2, [pc, #140]	@ (8009e58 <TIM_ResetCallback+0xb0>)
 8009dcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a22      	ldr	r2, [pc, #136]	@ (8009e5c <TIM_ResetCallback+0xb4>)
 8009dd4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a21      	ldr	r2, [pc, #132]	@ (8009e60 <TIM_ResetCallback+0xb8>)
 8009ddc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a20      	ldr	r2, [pc, #128]	@ (8009e64 <TIM_ResetCallback+0xbc>)
 8009de4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a1f      	ldr	r2, [pc, #124]	@ (8009e68 <TIM_ResetCallback+0xc0>)
 8009dec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a1e      	ldr	r2, [pc, #120]	@ (8009e6c <TIM_ResetCallback+0xc4>)
 8009df4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8009e70 <TIM_ResetCallback+0xc8>)
 8009dfc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a1c      	ldr	r2, [pc, #112]	@ (8009e74 <TIM_ResetCallback+0xcc>)
 8009e04:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8009e78 <TIM_ResetCallback+0xd0>)
 8009e0c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a1a      	ldr	r2, [pc, #104]	@ (8009e7c <TIM_ResetCallback+0xd4>)
 8009e14:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a19      	ldr	r2, [pc, #100]	@ (8009e80 <TIM_ResetCallback+0xd8>)
 8009e1c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a18      	ldr	r2, [pc, #96]	@ (8009e84 <TIM_ResetCallback+0xdc>)
 8009e24:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a17      	ldr	r2, [pc, #92]	@ (8009e88 <TIM_ResetCallback+0xe0>)
 8009e2c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a16      	ldr	r2, [pc, #88]	@ (8009e8c <TIM_ResetCallback+0xe4>)
 8009e34:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a15      	ldr	r2, [pc, #84]	@ (8009e90 <TIM_ResetCallback+0xe8>)
 8009e3c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	08002659 	.word	0x08002659
 8009e50:	080090f5 	.word	0x080090f5
 8009e54:	0800916d 	.word	0x0800916d
 8009e58:	08009181 	.word	0x08009181
 8009e5c:	0800911d 	.word	0x0800911d
 8009e60:	08009131 	.word	0x08009131
 8009e64:	08009109 	.word	0x08009109
 8009e68:	08009145 	.word	0x08009145
 8009e6c:	08009159 	.word	0x08009159
 8009e70:	08009195 	.word	0x08009195
 8009e74:	08009fc1 	.word	0x08009fc1
 8009e78:	08009fd5 	.word	0x08009fd5
 8009e7c:	08009fe9 	.word	0x08009fe9
 8009e80:	08009ffd 	.word	0x08009ffd
 8009e84:	0800a011 	.word	0x0800a011
 8009e88:	0800a025 	.word	0x0800a025
 8009e8c:	0800a039 	.word	0x0800a039
 8009e90:	0800a04d 	.word	0x0800a04d

08009e94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d101      	bne.n	8009eac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	e074      	b.n	8009f96 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a34      	ldr	r2, [pc, #208]	@ (8009fa4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d009      	beq.n	8009eea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a33      	ldr	r2, [pc, #204]	@ (8009fa8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d004      	beq.n	8009eea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a31      	ldr	r2, [pc, #196]	@ (8009fac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d108      	bne.n	8009efc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009ef0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	68fa      	ldr	r2, [r7, #12]
 8009f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a21      	ldr	r2, [pc, #132]	@ (8009fa4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d022      	beq.n	8009f6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f2c:	d01d      	beq.n	8009f6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a1f      	ldr	r2, [pc, #124]	@ (8009fb0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d018      	beq.n	8009f6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8009fb4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d013      	beq.n	8009f6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a1c      	ldr	r2, [pc, #112]	@ (8009fb8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d00e      	beq.n	8009f6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a15      	ldr	r2, [pc, #84]	@ (8009fa8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d009      	beq.n	8009f6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a18      	ldr	r2, [pc, #96]	@ (8009fbc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d004      	beq.n	8009f6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a11      	ldr	r2, [pc, #68]	@ (8009fac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d10c      	bne.n	8009f84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3714      	adds	r7, #20
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	40012c00 	.word	0x40012c00
 8009fa8:	40013400 	.word	0x40013400
 8009fac:	40015000 	.word	0x40015000
 8009fb0:	40000400 	.word	0x40000400
 8009fb4:	40000800 	.word	0x40000800
 8009fb8:	40000c00 	.word	0x40000c00
 8009fbc:	40014000 	.word	0x40014000

08009fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fc8:	bf00      	nop
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a004:	bf00      	nop
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a018:	bf00      	nop
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a02c:	bf00      	nop
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a040:	bf00      	nop
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a054:	bf00      	nop
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d101      	bne.n	800a072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e050      	b.n	800a114 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d114      	bne.n	800a0a6 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fdc5 	bl	800ac14 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a090:	2b00      	cmp	r3, #0
 800a092:	d103      	bne.n	800a09c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a21      	ldr	r2, [pc, #132]	@ (800a11c <HAL_UART_Init+0xbc>)
 800a098:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2224      	movs	r2, #36	@ 0x24
 800a0aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f022 0201 	bic.w	r2, r2, #1
 800a0bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d002      	beq.n	800a0cc <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f001 f8f2 	bl	800b2b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 fdf3 	bl	800acb8 <UART_SetConfig>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d101      	bne.n	800a0dc <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e01b      	b.n	800a114 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	685a      	ldr	r2, [r3, #4]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a0ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	689a      	ldr	r2, [r3, #8]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a0fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f042 0201 	orr.w	r2, r2, #1
 800a10a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f001 f971 	bl	800b3f4 <UART_CheckIdleState>
 800a112:	4603      	mov	r3, r0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	08004835 	.word	0x08004835

0800a120 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a120:	b480      	push	{r7}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	460b      	mov	r3, r1
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a12e:	2300      	movs	r3, #0
 800a130:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d109      	bne.n	800a14c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a13e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	e09c      	b.n	800a286 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a152:	2b20      	cmp	r3, #32
 800a154:	d16c      	bne.n	800a230 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800a156:	7afb      	ldrb	r3, [r7, #11]
 800a158:	2b0c      	cmp	r3, #12
 800a15a:	d85e      	bhi.n	800a21a <HAL_UART_RegisterCallback+0xfa>
 800a15c:	a201      	add	r2, pc, #4	@ (adr r2, 800a164 <HAL_UART_RegisterCallback+0x44>)
 800a15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a162:	bf00      	nop
 800a164:	0800a199 	.word	0x0800a199
 800a168:	0800a1a3 	.word	0x0800a1a3
 800a16c:	0800a1ad 	.word	0x0800a1ad
 800a170:	0800a1b7 	.word	0x0800a1b7
 800a174:	0800a1c1 	.word	0x0800a1c1
 800a178:	0800a1cb 	.word	0x0800a1cb
 800a17c:	0800a1d5 	.word	0x0800a1d5
 800a180:	0800a1df 	.word	0x0800a1df
 800a184:	0800a1e9 	.word	0x0800a1e9
 800a188:	0800a1f3 	.word	0x0800a1f3
 800a18c:	0800a1fd 	.word	0x0800a1fd
 800a190:	0800a207 	.word	0x0800a207
 800a194:	0800a211 	.word	0x0800a211
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a1a0:	e070      	b.n	800a284 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a1aa:	e06b      	b.n	800a284 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a1b4:	e066      	b.n	800a284 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a1be:	e061      	b.n	800a284 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a1c8:	e05c      	b.n	800a284 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a1d2:	e057      	b.n	800a284 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a1dc:	e052      	b.n	800a284 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a1e6:	e04d      	b.n	800a284 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a1f0:	e048      	b.n	800a284 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a1fa:	e043      	b.n	800a284 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a204:	e03e      	b.n	800a284 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a20e:	e039      	b.n	800a284 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a218:	e034      	b.n	800a284 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a220:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	75fb      	strb	r3, [r7, #23]
        break;
 800a22e:	e029      	b.n	800a284 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a236:	2b00      	cmp	r3, #0
 800a238:	d11a      	bne.n	800a270 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a23a:	7afb      	ldrb	r3, [r7, #11]
 800a23c:	2b0b      	cmp	r3, #11
 800a23e:	d002      	beq.n	800a246 <HAL_UART_RegisterCallback+0x126>
 800a240:	2b0c      	cmp	r3, #12
 800a242:	d005      	beq.n	800a250 <HAL_UART_RegisterCallback+0x130>
 800a244:	e009      	b.n	800a25a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a24e:	e019      	b.n	800a284 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a258:	e014      	b.n	800a284 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a260:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	75fb      	strb	r3, [r7, #23]
        break;
 800a26e:	e009      	b.n	800a284 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a276:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a280:	2301      	movs	r3, #1
 800a282:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a284:	7dfb      	ldrb	r3, [r7, #23]
}
 800a286:	4618      	mov	r0, r3
 800a288:	371c      	adds	r7, #28
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop

0800a294 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b08a      	sub	sp, #40	@ 0x28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2a8:	2b20      	cmp	r3, #32
 800a2aa:	d167      	bne.n	800a37c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d002      	beq.n	800a2b8 <HAL_UART_Transmit_DMA+0x24>
 800a2b2:	88fb      	ldrh	r3, [r7, #6]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d101      	bne.n	800a2bc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e060      	b.n	800a37e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	68ba      	ldr	r2, [r7, #8]
 800a2c0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	88fa      	ldrh	r2, [r7, #6]
 800a2c6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	88fa      	ldrh	r2, [r7, #6]
 800a2ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2221      	movs	r2, #33	@ 0x21
 800a2de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d028      	beq.n	800a33c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2ee:	4a26      	ldr	r2, [pc, #152]	@ (800a388 <HAL_UART_Transmit_DMA+0xf4>)
 800a2f0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2f6:	4a25      	ldr	r2, [pc, #148]	@ (800a38c <HAL_UART_Transmit_DMA+0xf8>)
 800a2f8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2fe:	4a24      	ldr	r2, [pc, #144]	@ (800a390 <HAL_UART_Transmit_DMA+0xfc>)
 800a300:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a306:	2200      	movs	r2, #0
 800a308:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a312:	4619      	mov	r1, r3
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	3328      	adds	r3, #40	@ 0x28
 800a31a:	461a      	mov	r2, r3
 800a31c:	88fb      	ldrh	r3, [r7, #6]
 800a31e:	f7fc f9bd 	bl	800669c <HAL_DMA_Start_IT>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d009      	beq.n	800a33c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2210      	movs	r2, #16
 800a32c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2220      	movs	r2, #32
 800a334:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	e020      	b.n	800a37e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2240      	movs	r2, #64	@ 0x40
 800a342:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	3308      	adds	r3, #8
 800a34a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	e853 3f00 	ldrex	r3, [r3]
 800a352:	613b      	str	r3, [r7, #16]
   return(result);
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a35a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3308      	adds	r3, #8
 800a362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a364:	623a      	str	r2, [r7, #32]
 800a366:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a368:	69f9      	ldr	r1, [r7, #28]
 800a36a:	6a3a      	ldr	r2, [r7, #32]
 800a36c:	e841 2300 	strex	r3, r2, [r1]
 800a370:	61bb      	str	r3, [r7, #24]
   return(result);
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d1e5      	bne.n	800a344 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a378:	2300      	movs	r3, #0
 800a37a:	e000      	b.n	800a37e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a37c:	2302      	movs	r3, #2
  }
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3728      	adds	r7, #40	@ 0x28
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	0800b8bf 	.word	0x0800b8bf
 800a38c:	0800b95d 	.word	0x0800b95d
 800a390:	0800baf7 	.word	0x0800baf7

0800a394 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b08a      	sub	sp, #40	@ 0x28
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	4613      	mov	r3, r2
 800a3a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3a8:	2b20      	cmp	r3, #32
 800a3aa:	d137      	bne.n	800a41c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d002      	beq.n	800a3b8 <HAL_UART_Receive_DMA+0x24>
 800a3b2:	88fb      	ldrh	r3, [r7, #6]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d101      	bne.n	800a3bc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e030      	b.n	800a41e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a18      	ldr	r2, [pc, #96]	@ (800a428 <HAL_UART_Receive_DMA+0x94>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d01f      	beq.n	800a40c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d018      	beq.n	800a40c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	e853 3f00 	ldrex	r3, [r3]
 800a3e6:	613b      	str	r3, [r7, #16]
   return(result);
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a3ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f8:	623b      	str	r3, [r7, #32]
 800a3fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fc:	69f9      	ldr	r1, [r7, #28]
 800a3fe:	6a3a      	ldr	r2, [r7, #32]
 800a400:	e841 2300 	strex	r3, r2, [r1]
 800a404:	61bb      	str	r3, [r7, #24]
   return(result);
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1e6      	bne.n	800a3da <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a40c:	88fb      	ldrh	r3, [r7, #6]
 800a40e:	461a      	mov	r2, r3
 800a410:	68b9      	ldr	r1, [r7, #8]
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	f001 f906 	bl	800b624 <UART_Start_Receive_DMA>
 800a418:	4603      	mov	r3, r0
 800a41a:	e000      	b.n	800a41e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a41c:	2302      	movs	r3, #2
  }
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3728      	adds	r7, #40	@ 0x28
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	40008000 	.word	0x40008000

0800a42c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b0ba      	sub	sp, #232	@ 0xe8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	69db      	ldr	r3, [r3, #28]
 800a43a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a452:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a456:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a45a:	4013      	ands	r3, r2
 800a45c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a464:	2b00      	cmp	r3, #0
 800a466:	d11b      	bne.n	800a4a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a46c:	f003 0320 	and.w	r3, r3, #32
 800a470:	2b00      	cmp	r3, #0
 800a472:	d015      	beq.n	800a4a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a478:	f003 0320 	and.w	r3, r3, #32
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d105      	bne.n	800a48c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d009      	beq.n	800a4a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a490:	2b00      	cmp	r3, #0
 800a492:	f000 82f3 	beq.w	800aa7c <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	4798      	blx	r3
      }
      return;
 800a49e:	e2ed      	b.n	800aa7c <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a4a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f000 8129 	beq.w	800a6fc <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a4aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a4ae:	4b90      	ldr	r3, [pc, #576]	@ (800a6f0 <HAL_UART_IRQHandler+0x2c4>)
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d106      	bne.n	800a4c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a4b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a4ba:	4b8e      	ldr	r3, [pc, #568]	@ (800a6f4 <HAL_UART_IRQHandler+0x2c8>)
 800a4bc:	4013      	ands	r3, r2
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f000 811c 	beq.w	800a6fc <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a4c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4c8:	f003 0301 	and.w	r3, r3, #1
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d011      	beq.n	800a4f4 <HAL_UART_IRQHandler+0xc8>
 800a4d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00b      	beq.n	800a4f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4ea:	f043 0201 	orr.w	r2, r3, #1
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4f8:	f003 0302 	and.w	r3, r3, #2
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d011      	beq.n	800a524 <HAL_UART_IRQHandler+0xf8>
 800a500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a504:	f003 0301 	and.w	r3, r3, #1
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00b      	beq.n	800a524 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2202      	movs	r2, #2
 800a512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a51a:	f043 0204 	orr.w	r2, r3, #4
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a528:	f003 0304 	and.w	r3, r3, #4
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d011      	beq.n	800a554 <HAL_UART_IRQHandler+0x128>
 800a530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a534:	f003 0301 	and.w	r3, r3, #1
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00b      	beq.n	800a554 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2204      	movs	r2, #4
 800a542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a54a:	f043 0202 	orr.w	r2, r3, #2
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a558:	f003 0308 	and.w	r3, r3, #8
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d017      	beq.n	800a590 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a564:	f003 0320 	and.w	r3, r3, #32
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d105      	bne.n	800a578 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a56c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a570:	4b5f      	ldr	r3, [pc, #380]	@ (800a6f0 <HAL_UART_IRQHandler+0x2c4>)
 800a572:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00b      	beq.n	800a590 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2208      	movs	r2, #8
 800a57e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a586:	f043 0208 	orr.w	r2, r3, #8
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a594:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d012      	beq.n	800a5c2 <HAL_UART_IRQHandler+0x196>
 800a59c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00c      	beq.n	800a5c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a5b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5b8:	f043 0220 	orr.w	r2, r3, #32
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 8259 	beq.w	800aa80 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a5ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5d2:	f003 0320 	and.w	r3, r3, #32
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d013      	beq.n	800a602 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a5da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5de:	f003 0320 	and.w	r3, r3, #32
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d105      	bne.n	800a5f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a5e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d007      	beq.n	800a602 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d003      	beq.n	800a602 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a608:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a616:	2b40      	cmp	r3, #64	@ 0x40
 800a618:	d005      	beq.n	800a626 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a61a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a61e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a622:	2b00      	cmp	r3, #0
 800a624:	d058      	beq.n	800a6d8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f001 f8e3 	bl	800b7f2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a636:	2b40      	cmp	r3, #64	@ 0x40
 800a638:	d148      	bne.n	800a6cc <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	3308      	adds	r3, #8
 800a640:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a644:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a648:	e853 3f00 	ldrex	r3, [r3]
 800a64c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a650:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a654:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a658:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	3308      	adds	r3, #8
 800a662:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a666:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a66a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a672:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a676:	e841 2300 	strex	r3, r2, [r1]
 800a67a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a67e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1d9      	bne.n	800a63a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d017      	beq.n	800a6c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a696:	4a18      	ldr	r2, [pc, #96]	@ (800a6f8 <HAL_UART_IRQHandler+0x2cc>)
 800a698:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7fc f8cf 	bl	8006844 <HAL_DMA_Abort_IT>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d01f      	beq.n	800a6ec <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a6ba:	4610      	mov	r0, r2
 800a6bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6be:	e015      	b.n	800a6ec <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6ca:	e00f      	b.n	800a6ec <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6d6:	e009      	b.n	800a6ec <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a6ea:	e1c9      	b.n	800aa80 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6ec:	bf00      	nop
    return;
 800a6ee:	e1c7      	b.n	800aa80 <HAL_UART_IRQHandler+0x654>
 800a6f0:	10000001 	.word	0x10000001
 800a6f4:	04000120 	.word	0x04000120
 800a6f8:	0800bb7b 	.word	0x0800bb7b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a700:	2b01      	cmp	r3, #1
 800a702:	f040 8157 	bne.w	800a9b4 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a70a:	f003 0310 	and.w	r3, r3, #16
 800a70e:	2b00      	cmp	r3, #0
 800a710:	f000 8150 	beq.w	800a9b4 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a718:	f003 0310 	and.w	r3, r3, #16
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 8149 	beq.w	800a9b4 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2210      	movs	r2, #16
 800a728:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a734:	2b40      	cmp	r3, #64	@ 0x40
 800a736:	f040 80bd 	bne.w	800a8b4 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a748:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f000 8199 	beq.w	800aa84 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a758:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a75c:	429a      	cmp	r2, r3
 800a75e:	f080 8191 	bcs.w	800aa84 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a768:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f003 0320 	and.w	r3, r3, #32
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f040 8087 	bne.w	800a88e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a788:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a78c:	e853 3f00 	ldrex	r3, [r3]
 800a790:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a794:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a79c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a7aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a7ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a7b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a7ba:	e841 2300 	strex	r3, r2, [r1]
 800a7be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a7c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1da      	bne.n	800a780 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	3308      	adds	r3, #8
 800a7d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a7d4:	e853 3f00 	ldrex	r3, [r3]
 800a7d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a7da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a7dc:	f023 0301 	bic.w	r3, r3, #1
 800a7e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	3308      	adds	r3, #8
 800a7ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a7ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a7f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a7f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a7fa:	e841 2300 	strex	r3, r2, [r1]
 800a7fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a800:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1e1      	bne.n	800a7ca <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	3308      	adds	r3, #8
 800a80c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a810:	e853 3f00 	ldrex	r3, [r3]
 800a814:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a818:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a81c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	3308      	adds	r3, #8
 800a826:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a82a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a82c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a830:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a832:	e841 2300 	strex	r3, r2, [r1]
 800a836:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a838:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1e3      	bne.n	800a806 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2220      	movs	r2, #32
 800a842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a854:	e853 3f00 	ldrex	r3, [r3]
 800a858:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a85a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a85c:	f023 0310 	bic.w	r3, r3, #16
 800a860:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	461a      	mov	r2, r3
 800a86a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a86e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a870:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a872:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a874:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a876:	e841 2300 	strex	r3, r2, [r1]
 800a87a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a87c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1e4      	bne.n	800a84c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a888:	4618      	mov	r0, r3
 800a88a:	f7fb ff82 	bl	8006792 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2202      	movs	r2, #2
 800a892:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a8a6:	b292      	uxth	r2, r2
 800a8a8:	1a8a      	subs	r2, r1, r2
 800a8aa:	b292      	uxth	r2, r2
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a8b2:	e0e7      	b.n	800aa84 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	1ad3      	subs	r3, r2, r3
 800a8c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f000 80d9 	beq.w	800aa88 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800a8d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f000 80d4 	beq.w	800aa88 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e8:	e853 3f00 	ldrex	r3, [r3]
 800a8ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a8ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a902:	647b      	str	r3, [r7, #68]	@ 0x44
 800a904:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a906:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a908:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a90a:	e841 2300 	strex	r3, r2, [r1]
 800a90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1e4      	bne.n	800a8e0 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3308      	adds	r3, #8
 800a91c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a920:	e853 3f00 	ldrex	r3, [r3]
 800a924:	623b      	str	r3, [r7, #32]
   return(result);
 800a926:	6a3b      	ldr	r3, [r7, #32]
 800a928:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a92c:	f023 0301 	bic.w	r3, r3, #1
 800a930:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	3308      	adds	r3, #8
 800a93a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a93e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a940:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a942:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a946:	e841 2300 	strex	r3, r2, [r1]
 800a94a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1e1      	bne.n	800a916 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2220      	movs	r2, #32
 800a956:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	e853 3f00 	ldrex	r3, [r3]
 800a972:	60fb      	str	r3, [r7, #12]
   return(result);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f023 0310 	bic.w	r3, r3, #16
 800a97a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	461a      	mov	r2, r3
 800a984:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a988:	61fb      	str	r3, [r7, #28]
 800a98a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98c:	69b9      	ldr	r1, [r7, #24]
 800a98e:	69fa      	ldr	r2, [r7, #28]
 800a990:	e841 2300 	strex	r3, r2, [r1]
 800a994:	617b      	str	r3, [r7, #20]
   return(result);
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d1e4      	bne.n	800a966 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2202      	movs	r2, #2
 800a9a0:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a9a8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a9ac:	4611      	mov	r1, r2
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a9b2:	e069      	b.n	800aa88 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a9b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d010      	beq.n	800a9e2 <HAL_UART_IRQHandler+0x5b6>
 800a9c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00a      	beq.n	800a9e2 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a9d4:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a9e0:	e055      	b.n	800aa8e <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a9e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d014      	beq.n	800aa18 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a9ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d105      	bne.n	800aa06 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a9fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d008      	beq.n	800aa18 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d03e      	beq.n	800aa8c <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	4798      	blx	r3
    }
    return;
 800aa16:	e039      	b.n	800aa8c <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aa18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d009      	beq.n	800aa38 <HAL_UART_IRQHandler+0x60c>
 800aa24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d003      	beq.n	800aa38 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f001 f8ba 	bl	800bbaa <UART_EndTransmit_IT>
    return;
 800aa36:	e02a      	b.n	800aa8e <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800aa38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00b      	beq.n	800aa5c <HAL_UART_IRQHandler+0x630>
 800aa44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa48:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d005      	beq.n	800aa5c <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa5a:	e018      	b.n	800aa8e <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800aa5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d012      	beq.n	800aa8e <HAL_UART_IRQHandler+0x662>
 800aa68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	da0e      	bge.n	800aa8e <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa7a:	e008      	b.n	800aa8e <HAL_UART_IRQHandler+0x662>
      return;
 800aa7c:	bf00      	nop
 800aa7e:	e006      	b.n	800aa8e <HAL_UART_IRQHandler+0x662>
    return;
 800aa80:	bf00      	nop
 800aa82:	e004      	b.n	800aa8e <HAL_UART_IRQHandler+0x662>
      return;
 800aa84:	bf00      	nop
 800aa86:	e002      	b.n	800aa8e <HAL_UART_IRQHandler+0x662>
      return;
 800aa88:	bf00      	nop
 800aa8a:	e000      	b.n	800aa8e <HAL_UART_IRQHandler+0x662>
    return;
 800aa8c:	bf00      	nop
  }
}
 800aa8e:	37e8      	adds	r7, #232	@ 0xe8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800aab0:	bf00      	nop
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800aac4:	bf00      	nop
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab40:	bf00      	nop
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a09      	ldr	r2, [pc, #36]	@ (800ab80 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d009      	beq.n	800ab74 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	430a      	orrs	r2, r1
 800ab72:	615a      	str	r2, [r3, #20]
  }
}
 800ab74:	bf00      	nop
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr
 800ab80:	40008000 	.word	0x40008000

0800ab84 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a18      	ldr	r2, [pc, #96]	@ (800abf4 <HAL_UART_EnableReceiverTimeout+0x70>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d027      	beq.n	800abe6 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab9c:	2b20      	cmp	r3, #32
 800ab9e:	d120      	bne.n	800abe2 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d101      	bne.n	800abae <HAL_UART_EnableReceiverTimeout+0x2a>
 800abaa:	2302      	movs	r3, #2
 800abac:	e01c      	b.n	800abe8 <HAL_UART_EnableReceiverTimeout+0x64>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2201      	movs	r2, #1
 800abb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2224      	movs	r2, #36	@ 0x24
 800abba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	685a      	ldr	r2, [r3, #4]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800abcc:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2220      	movs	r2, #32
 800abd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	e002      	b.n	800abe8 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800abe2:	2302      	movs	r3, #2
 800abe4:	e000      	b.n	800abe8 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
  }
}
 800abe8:	4618      	mov	r0, r3
 800abea:	370c      	adds	r7, #12
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr
 800abf4:	40008000 	.word	0x40008000

0800abf8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	370c      	adds	r7, #12
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
	...

0800ac14 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4a1a      	ldr	r2, [pc, #104]	@ (800ac88 <UART_InitCallbacksToDefault+0x74>)
 800ac20:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a19      	ldr	r2, [pc, #100]	@ (800ac8c <UART_InitCallbacksToDefault+0x78>)
 800ac28:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4a18      	ldr	r2, [pc, #96]	@ (800ac90 <UART_InitCallbacksToDefault+0x7c>)
 800ac30:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4a17      	ldr	r2, [pc, #92]	@ (800ac94 <UART_InitCallbacksToDefault+0x80>)
 800ac38:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4a16      	ldr	r2, [pc, #88]	@ (800ac98 <UART_InitCallbacksToDefault+0x84>)
 800ac40:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4a15      	ldr	r2, [pc, #84]	@ (800ac9c <UART_InitCallbacksToDefault+0x88>)
 800ac48:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4a14      	ldr	r2, [pc, #80]	@ (800aca0 <UART_InitCallbacksToDefault+0x8c>)
 800ac50:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a13      	ldr	r2, [pc, #76]	@ (800aca4 <UART_InitCallbacksToDefault+0x90>)
 800ac58:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a12      	ldr	r2, [pc, #72]	@ (800aca8 <UART_InitCallbacksToDefault+0x94>)
 800ac60:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a11      	ldr	r2, [pc, #68]	@ (800acac <UART_InitCallbacksToDefault+0x98>)
 800ac68:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a10      	ldr	r2, [pc, #64]	@ (800acb0 <UART_InitCallbacksToDefault+0x9c>)
 800ac70:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a0f      	ldr	r2, [pc, #60]	@ (800acb4 <UART_InitCallbacksToDefault+0xa0>)
 800ac78:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	0800aaa9 	.word	0x0800aaa9
 800ac8c:	0800aa95 	.word	0x0800aa95
 800ac90:	0800aad1 	.word	0x0800aad1
 800ac94:	0800aabd 	.word	0x0800aabd
 800ac98:	0800aae5 	.word	0x0800aae5
 800ac9c:	0800aaf9 	.word	0x0800aaf9
 800aca0:	0800ab0d 	.word	0x0800ab0d
 800aca4:	0800ab21 	.word	0x0800ab21
 800aca8:	0800bc05 	.word	0x0800bc05
 800acac:	0800bc19 	.word	0x0800bc19
 800acb0:	0800bc2d 	.word	0x0800bc2d
 800acb4:	0800ab35 	.word	0x0800ab35

0800acb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800acb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800acbc:	b08c      	sub	sp, #48	@ 0x30
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800acc2:	2300      	movs	r3, #0
 800acc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	689a      	ldr	r2, [r3, #8]
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	691b      	ldr	r3, [r3, #16]
 800acd0:	431a      	orrs	r2, r3
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	695b      	ldr	r3, [r3, #20]
 800acd6:	431a      	orrs	r2, r3
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	69db      	ldr	r3, [r3, #28]
 800acdc:	4313      	orrs	r3, r2
 800acde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	4baa      	ldr	r3, [pc, #680]	@ (800af90 <UART_SetConfig+0x2d8>)
 800ace8:	4013      	ands	r3, r2
 800acea:	697a      	ldr	r2, [r7, #20]
 800acec:	6812      	ldr	r2, [r2, #0]
 800acee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acf0:	430b      	orrs	r3, r1
 800acf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	68da      	ldr	r2, [r3, #12]
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	430a      	orrs	r2, r1
 800ad08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	699b      	ldr	r3, [r3, #24]
 800ad0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a9f      	ldr	r2, [pc, #636]	@ (800af94 <UART_SetConfig+0x2dc>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d004      	beq.n	800ad24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	6a1b      	ldr	r3, [r3, #32]
 800ad1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad20:	4313      	orrs	r3, r2
 800ad22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ad2e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	6812      	ldr	r2, [r2, #0]
 800ad36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad38:	430b      	orrs	r3, r1
 800ad3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad42:	f023 010f 	bic.w	r1, r3, #15
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	430a      	orrs	r2, r1
 800ad50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a90      	ldr	r2, [pc, #576]	@ (800af98 <UART_SetConfig+0x2e0>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d125      	bne.n	800ada8 <UART_SetConfig+0xf0>
 800ad5c:	4b8f      	ldr	r3, [pc, #572]	@ (800af9c <UART_SetConfig+0x2e4>)
 800ad5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad62:	f003 0303 	and.w	r3, r3, #3
 800ad66:	2b03      	cmp	r3, #3
 800ad68:	d81a      	bhi.n	800ada0 <UART_SetConfig+0xe8>
 800ad6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad70 <UART_SetConfig+0xb8>)
 800ad6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad70:	0800ad81 	.word	0x0800ad81
 800ad74:	0800ad91 	.word	0x0800ad91
 800ad78:	0800ad89 	.word	0x0800ad89
 800ad7c:	0800ad99 	.word	0x0800ad99
 800ad80:	2301      	movs	r3, #1
 800ad82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad86:	e116      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800ad88:	2302      	movs	r3, #2
 800ad8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad8e:	e112      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800ad90:	2304      	movs	r3, #4
 800ad92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad96:	e10e      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800ad98:	2308      	movs	r3, #8
 800ad9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad9e:	e10a      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800ada0:	2310      	movs	r3, #16
 800ada2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ada6:	e106      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a7c      	ldr	r2, [pc, #496]	@ (800afa0 <UART_SetConfig+0x2e8>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d138      	bne.n	800ae24 <UART_SetConfig+0x16c>
 800adb2:	4b7a      	ldr	r3, [pc, #488]	@ (800af9c <UART_SetConfig+0x2e4>)
 800adb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adb8:	f003 030c 	and.w	r3, r3, #12
 800adbc:	2b0c      	cmp	r3, #12
 800adbe:	d82d      	bhi.n	800ae1c <UART_SetConfig+0x164>
 800adc0:	a201      	add	r2, pc, #4	@ (adr r2, 800adc8 <UART_SetConfig+0x110>)
 800adc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc6:	bf00      	nop
 800adc8:	0800adfd 	.word	0x0800adfd
 800adcc:	0800ae1d 	.word	0x0800ae1d
 800add0:	0800ae1d 	.word	0x0800ae1d
 800add4:	0800ae1d 	.word	0x0800ae1d
 800add8:	0800ae0d 	.word	0x0800ae0d
 800addc:	0800ae1d 	.word	0x0800ae1d
 800ade0:	0800ae1d 	.word	0x0800ae1d
 800ade4:	0800ae1d 	.word	0x0800ae1d
 800ade8:	0800ae05 	.word	0x0800ae05
 800adec:	0800ae1d 	.word	0x0800ae1d
 800adf0:	0800ae1d 	.word	0x0800ae1d
 800adf4:	0800ae1d 	.word	0x0800ae1d
 800adf8:	0800ae15 	.word	0x0800ae15
 800adfc:	2300      	movs	r3, #0
 800adfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae02:	e0d8      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800ae04:	2302      	movs	r3, #2
 800ae06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae0a:	e0d4      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800ae0c:	2304      	movs	r3, #4
 800ae0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae12:	e0d0      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800ae14:	2308      	movs	r3, #8
 800ae16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae1a:	e0cc      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800ae1c:	2310      	movs	r3, #16
 800ae1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae22:	e0c8      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a5e      	ldr	r2, [pc, #376]	@ (800afa4 <UART_SetConfig+0x2ec>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d125      	bne.n	800ae7a <UART_SetConfig+0x1c2>
 800ae2e:	4b5b      	ldr	r3, [pc, #364]	@ (800af9c <UART_SetConfig+0x2e4>)
 800ae30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae34:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ae38:	2b30      	cmp	r3, #48	@ 0x30
 800ae3a:	d016      	beq.n	800ae6a <UART_SetConfig+0x1b2>
 800ae3c:	2b30      	cmp	r3, #48	@ 0x30
 800ae3e:	d818      	bhi.n	800ae72 <UART_SetConfig+0x1ba>
 800ae40:	2b20      	cmp	r3, #32
 800ae42:	d00a      	beq.n	800ae5a <UART_SetConfig+0x1a2>
 800ae44:	2b20      	cmp	r3, #32
 800ae46:	d814      	bhi.n	800ae72 <UART_SetConfig+0x1ba>
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d002      	beq.n	800ae52 <UART_SetConfig+0x19a>
 800ae4c:	2b10      	cmp	r3, #16
 800ae4e:	d008      	beq.n	800ae62 <UART_SetConfig+0x1aa>
 800ae50:	e00f      	b.n	800ae72 <UART_SetConfig+0x1ba>
 800ae52:	2300      	movs	r3, #0
 800ae54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae58:	e0ad      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae60:	e0a9      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800ae62:	2304      	movs	r3, #4
 800ae64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae68:	e0a5      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800ae6a:	2308      	movs	r3, #8
 800ae6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae70:	e0a1      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800ae72:	2310      	movs	r3, #16
 800ae74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae78:	e09d      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a4a      	ldr	r2, [pc, #296]	@ (800afa8 <UART_SetConfig+0x2f0>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d125      	bne.n	800aed0 <UART_SetConfig+0x218>
 800ae84:	4b45      	ldr	r3, [pc, #276]	@ (800af9c <UART_SetConfig+0x2e4>)
 800ae86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae8a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ae8e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ae90:	d016      	beq.n	800aec0 <UART_SetConfig+0x208>
 800ae92:	2bc0      	cmp	r3, #192	@ 0xc0
 800ae94:	d818      	bhi.n	800aec8 <UART_SetConfig+0x210>
 800ae96:	2b80      	cmp	r3, #128	@ 0x80
 800ae98:	d00a      	beq.n	800aeb0 <UART_SetConfig+0x1f8>
 800ae9a:	2b80      	cmp	r3, #128	@ 0x80
 800ae9c:	d814      	bhi.n	800aec8 <UART_SetConfig+0x210>
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d002      	beq.n	800aea8 <UART_SetConfig+0x1f0>
 800aea2:	2b40      	cmp	r3, #64	@ 0x40
 800aea4:	d008      	beq.n	800aeb8 <UART_SetConfig+0x200>
 800aea6:	e00f      	b.n	800aec8 <UART_SetConfig+0x210>
 800aea8:	2300      	movs	r3, #0
 800aeaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeae:	e082      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeb6:	e07e      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800aeb8:	2304      	movs	r3, #4
 800aeba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aebe:	e07a      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800aec0:	2308      	movs	r3, #8
 800aec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aec6:	e076      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800aec8:	2310      	movs	r3, #16
 800aeca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aece:	e072      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a35      	ldr	r2, [pc, #212]	@ (800afac <UART_SetConfig+0x2f4>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d12a      	bne.n	800af30 <UART_SetConfig+0x278>
 800aeda:	4b30      	ldr	r3, [pc, #192]	@ (800af9c <UART_SetConfig+0x2e4>)
 800aedc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aee0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aee4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aee8:	d01a      	beq.n	800af20 <UART_SetConfig+0x268>
 800aeea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aeee:	d81b      	bhi.n	800af28 <UART_SetConfig+0x270>
 800aef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aef4:	d00c      	beq.n	800af10 <UART_SetConfig+0x258>
 800aef6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aefa:	d815      	bhi.n	800af28 <UART_SetConfig+0x270>
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d003      	beq.n	800af08 <UART_SetConfig+0x250>
 800af00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af04:	d008      	beq.n	800af18 <UART_SetConfig+0x260>
 800af06:	e00f      	b.n	800af28 <UART_SetConfig+0x270>
 800af08:	2300      	movs	r3, #0
 800af0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af0e:	e052      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800af10:	2302      	movs	r3, #2
 800af12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af16:	e04e      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800af18:	2304      	movs	r3, #4
 800af1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af1e:	e04a      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800af20:	2308      	movs	r3, #8
 800af22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af26:	e046      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800af28:	2310      	movs	r3, #16
 800af2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af2e:	e042      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a17      	ldr	r2, [pc, #92]	@ (800af94 <UART_SetConfig+0x2dc>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d13a      	bne.n	800afb0 <UART_SetConfig+0x2f8>
 800af3a:	4b18      	ldr	r3, [pc, #96]	@ (800af9c <UART_SetConfig+0x2e4>)
 800af3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800af44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af48:	d01a      	beq.n	800af80 <UART_SetConfig+0x2c8>
 800af4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af4e:	d81b      	bhi.n	800af88 <UART_SetConfig+0x2d0>
 800af50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af54:	d00c      	beq.n	800af70 <UART_SetConfig+0x2b8>
 800af56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af5a:	d815      	bhi.n	800af88 <UART_SetConfig+0x2d0>
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d003      	beq.n	800af68 <UART_SetConfig+0x2b0>
 800af60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af64:	d008      	beq.n	800af78 <UART_SetConfig+0x2c0>
 800af66:	e00f      	b.n	800af88 <UART_SetConfig+0x2d0>
 800af68:	2300      	movs	r3, #0
 800af6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af6e:	e022      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800af70:	2302      	movs	r3, #2
 800af72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af76:	e01e      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800af78:	2304      	movs	r3, #4
 800af7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af7e:	e01a      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800af80:	2308      	movs	r3, #8
 800af82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af86:	e016      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800af88:	2310      	movs	r3, #16
 800af8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af8e:	e012      	b.n	800afb6 <UART_SetConfig+0x2fe>
 800af90:	cfff69f3 	.word	0xcfff69f3
 800af94:	40008000 	.word	0x40008000
 800af98:	40013800 	.word	0x40013800
 800af9c:	40021000 	.word	0x40021000
 800afa0:	40004400 	.word	0x40004400
 800afa4:	40004800 	.word	0x40004800
 800afa8:	40004c00 	.word	0x40004c00
 800afac:	40005000 	.word	0x40005000
 800afb0:	2310      	movs	r3, #16
 800afb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4aae      	ldr	r2, [pc, #696]	@ (800b274 <UART_SetConfig+0x5bc>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	f040 8097 	bne.w	800b0f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800afc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800afc6:	2b08      	cmp	r3, #8
 800afc8:	d823      	bhi.n	800b012 <UART_SetConfig+0x35a>
 800afca:	a201      	add	r2, pc, #4	@ (adr r2, 800afd0 <UART_SetConfig+0x318>)
 800afcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd0:	0800aff5 	.word	0x0800aff5
 800afd4:	0800b013 	.word	0x0800b013
 800afd8:	0800affd 	.word	0x0800affd
 800afdc:	0800b013 	.word	0x0800b013
 800afe0:	0800b003 	.word	0x0800b003
 800afe4:	0800b013 	.word	0x0800b013
 800afe8:	0800b013 	.word	0x0800b013
 800afec:	0800b013 	.word	0x0800b013
 800aff0:	0800b00b 	.word	0x0800b00b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aff4:	f7fc fd16 	bl	8007a24 <HAL_RCC_GetPCLK1Freq>
 800aff8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800affa:	e010      	b.n	800b01e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800affc:	4b9e      	ldr	r3, [pc, #632]	@ (800b278 <UART_SetConfig+0x5c0>)
 800affe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b000:	e00d      	b.n	800b01e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b002:	f7fc fca1 	bl	8007948 <HAL_RCC_GetSysClockFreq>
 800b006:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b008:	e009      	b.n	800b01e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b00a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b00e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b010:	e005      	b.n	800b01e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b012:	2300      	movs	r3, #0
 800b014:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b016:	2301      	movs	r3, #1
 800b018:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b01c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b020:	2b00      	cmp	r3, #0
 800b022:	f000 8130 	beq.w	800b286 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b02a:	4a94      	ldr	r2, [pc, #592]	@ (800b27c <UART_SetConfig+0x5c4>)
 800b02c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b030:	461a      	mov	r2, r3
 800b032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b034:	fbb3 f3f2 	udiv	r3, r3, r2
 800b038:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	685a      	ldr	r2, [r3, #4]
 800b03e:	4613      	mov	r3, r2
 800b040:	005b      	lsls	r3, r3, #1
 800b042:	4413      	add	r3, r2
 800b044:	69ba      	ldr	r2, [r7, #24]
 800b046:	429a      	cmp	r2, r3
 800b048:	d305      	bcc.n	800b056 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b050:	69ba      	ldr	r2, [r7, #24]
 800b052:	429a      	cmp	r2, r3
 800b054:	d903      	bls.n	800b05e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b056:	2301      	movs	r3, #1
 800b058:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b05c:	e113      	b.n	800b286 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b060:	2200      	movs	r2, #0
 800b062:	60bb      	str	r3, [r7, #8]
 800b064:	60fa      	str	r2, [r7, #12]
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b06a:	4a84      	ldr	r2, [pc, #528]	@ (800b27c <UART_SetConfig+0x5c4>)
 800b06c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b070:	b29b      	uxth	r3, r3
 800b072:	2200      	movs	r2, #0
 800b074:	603b      	str	r3, [r7, #0]
 800b076:	607a      	str	r2, [r7, #4]
 800b078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b07c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b080:	f7f5 feb4 	bl	8000dec <__aeabi_uldivmod>
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	4610      	mov	r0, r2
 800b08a:	4619      	mov	r1, r3
 800b08c:	f04f 0200 	mov.w	r2, #0
 800b090:	f04f 0300 	mov.w	r3, #0
 800b094:	020b      	lsls	r3, r1, #8
 800b096:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b09a:	0202      	lsls	r2, r0, #8
 800b09c:	6979      	ldr	r1, [r7, #20]
 800b09e:	6849      	ldr	r1, [r1, #4]
 800b0a0:	0849      	lsrs	r1, r1, #1
 800b0a2:	2000      	movs	r0, #0
 800b0a4:	460c      	mov	r4, r1
 800b0a6:	4605      	mov	r5, r0
 800b0a8:	eb12 0804 	adds.w	r8, r2, r4
 800b0ac:	eb43 0905 	adc.w	r9, r3, r5
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	469a      	mov	sl, r3
 800b0b8:	4693      	mov	fp, r2
 800b0ba:	4652      	mov	r2, sl
 800b0bc:	465b      	mov	r3, fp
 800b0be:	4640      	mov	r0, r8
 800b0c0:	4649      	mov	r1, r9
 800b0c2:	f7f5 fe93 	bl	8000dec <__aeabi_uldivmod>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b0ce:	6a3b      	ldr	r3, [r7, #32]
 800b0d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0d4:	d308      	bcc.n	800b0e8 <UART_SetConfig+0x430>
 800b0d6:	6a3b      	ldr	r3, [r7, #32]
 800b0d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0dc:	d204      	bcs.n	800b0e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	6a3a      	ldr	r2, [r7, #32]
 800b0e4:	60da      	str	r2, [r3, #12]
 800b0e6:	e0ce      	b.n	800b286 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b0ee:	e0ca      	b.n	800b286 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	69db      	ldr	r3, [r3, #28]
 800b0f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b0f8:	d166      	bne.n	800b1c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b0fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b0fe:	2b08      	cmp	r3, #8
 800b100:	d827      	bhi.n	800b152 <UART_SetConfig+0x49a>
 800b102:	a201      	add	r2, pc, #4	@ (adr r2, 800b108 <UART_SetConfig+0x450>)
 800b104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b108:	0800b12d 	.word	0x0800b12d
 800b10c:	0800b135 	.word	0x0800b135
 800b110:	0800b13d 	.word	0x0800b13d
 800b114:	0800b153 	.word	0x0800b153
 800b118:	0800b143 	.word	0x0800b143
 800b11c:	0800b153 	.word	0x0800b153
 800b120:	0800b153 	.word	0x0800b153
 800b124:	0800b153 	.word	0x0800b153
 800b128:	0800b14b 	.word	0x0800b14b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b12c:	f7fc fc7a 	bl	8007a24 <HAL_RCC_GetPCLK1Freq>
 800b130:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b132:	e014      	b.n	800b15e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b134:	f7fc fc8c 	bl	8007a50 <HAL_RCC_GetPCLK2Freq>
 800b138:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b13a:	e010      	b.n	800b15e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b13c:	4b4e      	ldr	r3, [pc, #312]	@ (800b278 <UART_SetConfig+0x5c0>)
 800b13e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b140:	e00d      	b.n	800b15e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b142:	f7fc fc01 	bl	8007948 <HAL_RCC_GetSysClockFreq>
 800b146:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b148:	e009      	b.n	800b15e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b14a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b14e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b150:	e005      	b.n	800b15e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b152:	2300      	movs	r3, #0
 800b154:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b156:	2301      	movs	r3, #1
 800b158:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b15c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b160:	2b00      	cmp	r3, #0
 800b162:	f000 8090 	beq.w	800b286 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b16a:	4a44      	ldr	r2, [pc, #272]	@ (800b27c <UART_SetConfig+0x5c4>)
 800b16c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b170:	461a      	mov	r2, r3
 800b172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b174:	fbb3 f3f2 	udiv	r3, r3, r2
 800b178:	005a      	lsls	r2, r3, #1
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	085b      	lsrs	r3, r3, #1
 800b180:	441a      	add	r2, r3
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	fbb2 f3f3 	udiv	r3, r2, r3
 800b18a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b18c:	6a3b      	ldr	r3, [r7, #32]
 800b18e:	2b0f      	cmp	r3, #15
 800b190:	d916      	bls.n	800b1c0 <UART_SetConfig+0x508>
 800b192:	6a3b      	ldr	r3, [r7, #32]
 800b194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b198:	d212      	bcs.n	800b1c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b19a:	6a3b      	ldr	r3, [r7, #32]
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	f023 030f 	bic.w	r3, r3, #15
 800b1a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1a4:	6a3b      	ldr	r3, [r7, #32]
 800b1a6:	085b      	lsrs	r3, r3, #1
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	f003 0307 	and.w	r3, r3, #7
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	8bfb      	ldrh	r3, [r7, #30]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	8bfa      	ldrh	r2, [r7, #30]
 800b1bc:	60da      	str	r2, [r3, #12]
 800b1be:	e062      	b.n	800b286 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b1c6:	e05e      	b.n	800b286 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b1c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b1cc:	2b08      	cmp	r3, #8
 800b1ce:	d828      	bhi.n	800b222 <UART_SetConfig+0x56a>
 800b1d0:	a201      	add	r2, pc, #4	@ (adr r2, 800b1d8 <UART_SetConfig+0x520>)
 800b1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d6:	bf00      	nop
 800b1d8:	0800b1fd 	.word	0x0800b1fd
 800b1dc:	0800b205 	.word	0x0800b205
 800b1e0:	0800b20d 	.word	0x0800b20d
 800b1e4:	0800b223 	.word	0x0800b223
 800b1e8:	0800b213 	.word	0x0800b213
 800b1ec:	0800b223 	.word	0x0800b223
 800b1f0:	0800b223 	.word	0x0800b223
 800b1f4:	0800b223 	.word	0x0800b223
 800b1f8:	0800b21b 	.word	0x0800b21b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1fc:	f7fc fc12 	bl	8007a24 <HAL_RCC_GetPCLK1Freq>
 800b200:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b202:	e014      	b.n	800b22e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b204:	f7fc fc24 	bl	8007a50 <HAL_RCC_GetPCLK2Freq>
 800b208:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b20a:	e010      	b.n	800b22e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b20c:	4b1a      	ldr	r3, [pc, #104]	@ (800b278 <UART_SetConfig+0x5c0>)
 800b20e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b210:	e00d      	b.n	800b22e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b212:	f7fc fb99 	bl	8007948 <HAL_RCC_GetSysClockFreq>
 800b216:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b218:	e009      	b.n	800b22e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b21a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b21e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b220:	e005      	b.n	800b22e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b222:	2300      	movs	r3, #0
 800b224:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b22c:	bf00      	nop
    }

    if (pclk != 0U)
 800b22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b230:	2b00      	cmp	r3, #0
 800b232:	d028      	beq.n	800b286 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b238:	4a10      	ldr	r2, [pc, #64]	@ (800b27c <UART_SetConfig+0x5c4>)
 800b23a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b23e:	461a      	mov	r2, r3
 800b240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b242:	fbb3 f2f2 	udiv	r2, r3, r2
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	085b      	lsrs	r3, r3, #1
 800b24c:	441a      	add	r2, r3
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	fbb2 f3f3 	udiv	r3, r2, r3
 800b256:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b258:	6a3b      	ldr	r3, [r7, #32]
 800b25a:	2b0f      	cmp	r3, #15
 800b25c:	d910      	bls.n	800b280 <UART_SetConfig+0x5c8>
 800b25e:	6a3b      	ldr	r3, [r7, #32]
 800b260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b264:	d20c      	bcs.n	800b280 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b266:	6a3b      	ldr	r3, [r7, #32]
 800b268:	b29a      	uxth	r2, r3
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	60da      	str	r2, [r3, #12]
 800b270:	e009      	b.n	800b286 <UART_SetConfig+0x5ce>
 800b272:	bf00      	nop
 800b274:	40008000 	.word	0x40008000
 800b278:	00f42400 	.word	0x00f42400
 800b27c:	0800c170 	.word	0x0800c170
      }
      else
      {
        ret = HAL_ERROR;
 800b280:	2301      	movs	r3, #1
 800b282:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	2201      	movs	r2, #1
 800b28a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	2201      	movs	r2, #1
 800b292:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	2200      	movs	r2, #0
 800b29a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b2a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3730      	adds	r7, #48	@ 0x30
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b2b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2bc:	f003 0308 	and.w	r3, r3, #8
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00a      	beq.n	800b2da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	430a      	orrs	r2, r1
 800b2d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2de:	f003 0301 	and.w	r3, r3, #1
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00a      	beq.n	800b2fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	430a      	orrs	r2, r1
 800b2fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b300:	f003 0302 	and.w	r3, r3, #2
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00a      	beq.n	800b31e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	430a      	orrs	r2, r1
 800b31c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b322:	f003 0304 	and.w	r3, r3, #4
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00a      	beq.n	800b340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	430a      	orrs	r2, r1
 800b33e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b344:	f003 0310 	and.w	r3, r3, #16
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00a      	beq.n	800b362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	430a      	orrs	r2, r1
 800b360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b366:	f003 0320 	and.w	r3, r3, #32
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00a      	beq.n	800b384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	430a      	orrs	r2, r1
 800b382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d01a      	beq.n	800b3c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	430a      	orrs	r2, r1
 800b3a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3ae:	d10a      	bne.n	800b3c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	430a      	orrs	r2, r1
 800b3c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00a      	beq.n	800b3e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	430a      	orrs	r2, r1
 800b3e6:	605a      	str	r2, [r3, #4]
  }
}
 800b3e8:	bf00      	nop
 800b3ea:	370c      	adds	r7, #12
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b098      	sub	sp, #96	@ 0x60
 800b3f8:	af02      	add	r7, sp, #8
 800b3fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b404:	f7f9 fc00 	bl	8004c08 <HAL_GetTick>
 800b408:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f003 0308 	and.w	r3, r3, #8
 800b414:	2b08      	cmp	r3, #8
 800b416:	d12f      	bne.n	800b478 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b418:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b420:	2200      	movs	r2, #0
 800b422:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 f88e 	bl	800b548 <UART_WaitOnFlagUntilTimeout>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d022      	beq.n	800b478 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43a:	e853 3f00 	ldrex	r3, [r3]
 800b43e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b442:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b446:	653b      	str	r3, [r7, #80]	@ 0x50
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	461a      	mov	r2, r3
 800b44e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b450:	647b      	str	r3, [r7, #68]	@ 0x44
 800b452:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b454:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b458:	e841 2300 	strex	r3, r2, [r1]
 800b45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b45e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1e6      	bne.n	800b432 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2220      	movs	r2, #32
 800b468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b474:	2303      	movs	r3, #3
 800b476:	e063      	b.n	800b540 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f003 0304 	and.w	r3, r3, #4
 800b482:	2b04      	cmp	r3, #4
 800b484:	d149      	bne.n	800b51a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b486:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b48a:	9300      	str	r3, [sp, #0]
 800b48c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b48e:	2200      	movs	r2, #0
 800b490:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 f857 	bl	800b548 <UART_WaitOnFlagUntilTimeout>
 800b49a:	4603      	mov	r3, r0
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d03c      	beq.n	800b51a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a8:	e853 3f00 	ldrex	r3, [r3]
 800b4ac:	623b      	str	r3, [r7, #32]
   return(result);
 800b4ae:	6a3b      	ldr	r3, [r7, #32]
 800b4b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4be:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4c6:	e841 2300 	strex	r3, r2, [r1]
 800b4ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1e6      	bne.n	800b4a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3308      	adds	r3, #8
 800b4d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	e853 3f00 	ldrex	r3, [r3]
 800b4e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f023 0301 	bic.w	r3, r3, #1
 800b4e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	3308      	adds	r3, #8
 800b4f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4f2:	61fa      	str	r2, [r7, #28]
 800b4f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f6:	69b9      	ldr	r1, [r7, #24]
 800b4f8:	69fa      	ldr	r2, [r7, #28]
 800b4fa:	e841 2300 	strex	r3, r2, [r1]
 800b4fe:	617b      	str	r3, [r7, #20]
   return(result);
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d1e5      	bne.n	800b4d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2220      	movs	r2, #32
 800b50a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b516:	2303      	movs	r3, #3
 800b518:	e012      	b.n	800b540 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2220      	movs	r2, #32
 800b51e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2220      	movs	r2, #32
 800b526:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3758      	adds	r7, #88	@ 0x58
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	603b      	str	r3, [r7, #0]
 800b554:	4613      	mov	r3, r2
 800b556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b558:	e04f      	b.n	800b5fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b55a:	69bb      	ldr	r3, [r7, #24]
 800b55c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b560:	d04b      	beq.n	800b5fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b562:	f7f9 fb51 	bl	8004c08 <HAL_GetTick>
 800b566:	4602      	mov	r2, r0
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	1ad3      	subs	r3, r2, r3
 800b56c:	69ba      	ldr	r2, [r7, #24]
 800b56e:	429a      	cmp	r2, r3
 800b570:	d302      	bcc.n	800b578 <UART_WaitOnFlagUntilTimeout+0x30>
 800b572:	69bb      	ldr	r3, [r7, #24]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d101      	bne.n	800b57c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b578:	2303      	movs	r3, #3
 800b57a:	e04e      	b.n	800b61a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f003 0304 	and.w	r3, r3, #4
 800b586:	2b00      	cmp	r3, #0
 800b588:	d037      	beq.n	800b5fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	2b80      	cmp	r3, #128	@ 0x80
 800b58e:	d034      	beq.n	800b5fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	2b40      	cmp	r3, #64	@ 0x40
 800b594:	d031      	beq.n	800b5fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	69db      	ldr	r3, [r3, #28]
 800b59c:	f003 0308 	and.w	r3, r3, #8
 800b5a0:	2b08      	cmp	r3, #8
 800b5a2:	d110      	bne.n	800b5c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	2208      	movs	r2, #8
 800b5aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f000 f920 	bl	800b7f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2208      	movs	r2, #8
 800b5b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e029      	b.n	800b61a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	69db      	ldr	r3, [r3, #28]
 800b5cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b5d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5d4:	d111      	bne.n	800b5fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b5de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f000 f906 	bl	800b7f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2220      	movs	r2, #32
 800b5ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b5f6:	2303      	movs	r3, #3
 800b5f8:	e00f      	b.n	800b61a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	69da      	ldr	r2, [r3, #28]
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	4013      	ands	r3, r2
 800b604:	68ba      	ldr	r2, [r7, #8]
 800b606:	429a      	cmp	r2, r3
 800b608:	bf0c      	ite	eq
 800b60a:	2301      	moveq	r3, #1
 800b60c:	2300      	movne	r3, #0
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	461a      	mov	r2, r3
 800b612:	79fb      	ldrb	r3, [r7, #7]
 800b614:	429a      	cmp	r2, r3
 800b616:	d0a0      	beq.n	800b55a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
	...

0800b624 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b096      	sub	sp, #88	@ 0x58
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	4613      	mov	r3, r2
 800b630:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	68ba      	ldr	r2, [r7, #8]
 800b636:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	88fa      	ldrh	r2, [r7, #6]
 800b63c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2200      	movs	r2, #0
 800b644:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2222      	movs	r2, #34	@ 0x22
 800b64c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b656:	2b00      	cmp	r3, #0
 800b658:	d02d      	beq.n	800b6b6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b660:	4a40      	ldr	r2, [pc, #256]	@ (800b764 <UART_Start_Receive_DMA+0x140>)
 800b662:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b66a:	4a3f      	ldr	r2, [pc, #252]	@ (800b768 <UART_Start_Receive_DMA+0x144>)
 800b66c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b674:	4a3d      	ldr	r2, [pc, #244]	@ (800b76c <UART_Start_Receive_DMA+0x148>)
 800b676:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b67e:	2200      	movs	r2, #0
 800b680:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	3324      	adds	r3, #36	@ 0x24
 800b68e:	4619      	mov	r1, r3
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b694:	461a      	mov	r2, r3
 800b696:	88fb      	ldrh	r3, [r7, #6]
 800b698:	f7fb f800 	bl	800669c <HAL_DMA_Start_IT>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d009      	beq.n	800b6b6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2210      	movs	r2, #16
 800b6a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2220      	movs	r2, #32
 800b6ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e051      	b.n	800b75a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	691b      	ldr	r3, [r3, #16]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d018      	beq.n	800b6f0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6c6:	e853 3f00 	ldrex	r3, [r3]
 800b6ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b6d2:	657b      	str	r3, [r7, #84]	@ 0x54
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b6de:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b6e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b6e4:	e841 2300 	strex	r3, r2, [r1]
 800b6e8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b6ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1e6      	bne.n	800b6be <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	3308      	adds	r3, #8
 800b6f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6fa:	e853 3f00 	ldrex	r3, [r3]
 800b6fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b702:	f043 0301 	orr.w	r3, r3, #1
 800b706:	653b      	str	r3, [r7, #80]	@ 0x50
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	3308      	adds	r3, #8
 800b70e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b710:	637a      	str	r2, [r7, #52]	@ 0x34
 800b712:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b714:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b716:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b718:	e841 2300 	strex	r3, r2, [r1]
 800b71c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1e5      	bne.n	800b6f0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	3308      	adds	r3, #8
 800b72a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	e853 3f00 	ldrex	r3, [r3]
 800b732:	613b      	str	r3, [r7, #16]
   return(result);
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b73a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3308      	adds	r3, #8
 800b742:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b744:	623a      	str	r2, [r7, #32]
 800b746:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b748:	69f9      	ldr	r1, [r7, #28]
 800b74a:	6a3a      	ldr	r2, [r7, #32]
 800b74c:	e841 2300 	strex	r3, r2, [r1]
 800b750:	61bb      	str	r3, [r7, #24]
   return(result);
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d1e5      	bne.n	800b724 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b758:	2300      	movs	r3, #0
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3758      	adds	r7, #88	@ 0x58
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	0800b97d 	.word	0x0800b97d
 800b768:	0800bab1 	.word	0x0800bab1
 800b76c:	0800baf7 	.word	0x0800baf7

0800b770 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b770:	b480      	push	{r7}
 800b772:	b08f      	sub	sp, #60	@ 0x3c
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b77e:	6a3b      	ldr	r3, [r7, #32]
 800b780:	e853 3f00 	ldrex	r3, [r3]
 800b784:	61fb      	str	r3, [r7, #28]
   return(result);
 800b786:	69fb      	ldr	r3, [r7, #28]
 800b788:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b78c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	461a      	mov	r2, r3
 800b794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b798:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b79a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b79c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b79e:	e841 2300 	strex	r3, r2, [r1]
 800b7a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d1e6      	bne.n	800b778 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	3308      	adds	r3, #8
 800b7b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	e853 3f00 	ldrex	r3, [r3]
 800b7b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b7c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	3308      	adds	r3, #8
 800b7c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7ca:	61ba      	str	r2, [r7, #24]
 800b7cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ce:	6979      	ldr	r1, [r7, #20]
 800b7d0:	69ba      	ldr	r2, [r7, #24]
 800b7d2:	e841 2300 	strex	r3, r2, [r1]
 800b7d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d1e5      	bne.n	800b7aa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2220      	movs	r2, #32
 800b7e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b7e6:	bf00      	nop
 800b7e8:	373c      	adds	r7, #60	@ 0x3c
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b7f2:	b480      	push	{r7}
 800b7f4:	b095      	sub	sp, #84	@ 0x54
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b802:	e853 3f00 	ldrex	r3, [r3]
 800b806:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b80a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b80e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	461a      	mov	r2, r3
 800b816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b818:	643b      	str	r3, [r7, #64]	@ 0x40
 800b81a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b81e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b820:	e841 2300 	strex	r3, r2, [r1]
 800b824:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1e6      	bne.n	800b7fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	3308      	adds	r3, #8
 800b832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b834:	6a3b      	ldr	r3, [r7, #32]
 800b836:	e853 3f00 	ldrex	r3, [r3]
 800b83a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b842:	f023 0301 	bic.w	r3, r3, #1
 800b846:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	3308      	adds	r3, #8
 800b84e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b850:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b852:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b854:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b856:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b858:	e841 2300 	strex	r3, r2, [r1]
 800b85c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1e3      	bne.n	800b82c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d118      	bne.n	800b89e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	e853 3f00 	ldrex	r3, [r3]
 800b878:	60bb      	str	r3, [r7, #8]
   return(result);
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	f023 0310 	bic.w	r3, r3, #16
 800b880:	647b      	str	r3, [r7, #68]	@ 0x44
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	461a      	mov	r2, r3
 800b888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b88a:	61bb      	str	r3, [r7, #24]
 800b88c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88e:	6979      	ldr	r1, [r7, #20]
 800b890:	69ba      	ldr	r2, [r7, #24]
 800b892:	e841 2300 	strex	r3, r2, [r1]
 800b896:	613b      	str	r3, [r7, #16]
   return(result);
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1e6      	bne.n	800b86c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2220      	movs	r2, #32
 800b8a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b8b2:	bf00      	nop
 800b8b4:	3754      	adds	r7, #84	@ 0x54
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr

0800b8be <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b090      	sub	sp, #64	@ 0x40
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f003 0320 	and.w	r3, r3, #32
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d137      	bne.n	800b94a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b8da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b8e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	3308      	adds	r3, #8
 800b8e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ec:	e853 3f00 	ldrex	r3, [r3]
 800b8f0:	623b      	str	r3, [r7, #32]
   return(result);
 800b8f2:	6a3b      	ldr	r3, [r7, #32]
 800b8f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b8fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	3308      	adds	r3, #8
 800b900:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b902:	633a      	str	r2, [r7, #48]	@ 0x30
 800b904:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b906:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b908:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b90a:	e841 2300 	strex	r3, r2, [r1]
 800b90e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1e5      	bne.n	800b8e2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	e853 3f00 	ldrex	r3, [r3]
 800b922:	60fb      	str	r3, [r7, #12]
   return(result);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b92a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b92c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	461a      	mov	r2, r3
 800b932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b934:	61fb      	str	r3, [r7, #28]
 800b936:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b938:	69b9      	ldr	r1, [r7, #24]
 800b93a:	69fa      	ldr	r2, [r7, #28]
 800b93c:	e841 2300 	strex	r3, r2, [r1]
 800b940:	617b      	str	r3, [r7, #20]
   return(result);
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d1e6      	bne.n	800b916 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b948:	e004      	b.n	800b954 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b94a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b94c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b950:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b952:	4798      	blx	r3
}
 800b954:	bf00      	nop
 800b956:	3740      	adds	r7, #64	@ 0x40
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b968:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b974:	bf00      	nop
 800b976:	3710      	adds	r7, #16
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b09c      	sub	sp, #112	@ 0x70
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b988:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f003 0320 	and.w	r3, r3, #32
 800b994:	2b00      	cmp	r3, #0
 800b996:	d171      	bne.n	800ba7c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b998:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b99a:	2200      	movs	r2, #0
 800b99c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9a8:	e853 3f00 	ldrex	r3, [r3]
 800b9ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b9ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b9b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b9b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b9be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b9c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b9c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b9c6:	e841 2300 	strex	r3, r2, [r1]
 800b9ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b9cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1e6      	bne.n	800b9a0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	3308      	adds	r3, #8
 800b9d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9dc:	e853 3f00 	ldrex	r3, [r3]
 800b9e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b9e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9e4:	f023 0301 	bic.w	r3, r3, #1
 800b9e8:	667b      	str	r3, [r7, #100]	@ 0x64
 800b9ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	3308      	adds	r3, #8
 800b9f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b9f2:	647a      	str	r2, [r7, #68]	@ 0x44
 800b9f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b9f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9fa:	e841 2300 	strex	r3, r2, [r1]
 800b9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1e5      	bne.n	800b9d2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	3308      	adds	r3, #8
 800ba0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba10:	e853 3f00 	ldrex	r3, [r3]
 800ba14:	623b      	str	r3, [r7, #32]
   return(result);
 800ba16:	6a3b      	ldr	r3, [r7, #32]
 800ba18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba1c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	3308      	adds	r3, #8
 800ba24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ba26:	633a      	str	r2, [r7, #48]	@ 0x30
 800ba28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba2e:	e841 2300 	strex	r3, r2, [r1]
 800ba32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d1e5      	bne.n	800ba06 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba3c:	2220      	movs	r2, #32
 800ba3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d118      	bne.n	800ba7c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	e853 3f00 	ldrex	r3, [r3]
 800ba56:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f023 0310 	bic.w	r3, r3, #16
 800ba5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	461a      	mov	r2, r3
 800ba66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba68:	61fb      	str	r3, [r7, #28]
 800ba6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba6c:	69b9      	ldr	r1, [r7, #24]
 800ba6e:	69fa      	ldr	r2, [r7, #28]
 800ba70:	e841 2300 	strex	r3, r2, [r1]
 800ba74:	617b      	str	r3, [r7, #20]
   return(result);
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d1e6      	bne.n	800ba4a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba7e:	2200      	movs	r2, #0
 800ba80:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d109      	bne.n	800ba9e <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800ba8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ba90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ba92:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ba96:	4611      	mov	r1, r2
 800ba98:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ba9a:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba9c:	e004      	b.n	800baa8 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800ba9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800baa4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800baa6:	4798      	blx	r3
}
 800baa8:	bf00      	nop
 800baaa:	3770      	adds	r7, #112	@ 0x70
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800babc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2201      	movs	r2, #1
 800bac2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d10b      	bne.n	800bae4 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800bad8:	0852      	lsrs	r2, r2, #1
 800bada:	b292      	uxth	r2, r2
 800badc:	4611      	mov	r1, r2
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bae2:	e004      	b.n	800baee <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	4798      	blx	r3
}
 800baee:	bf00      	nop
 800baf0:	3710      	adds	r7, #16
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b086      	sub	sp, #24
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb02:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb0a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb12:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb1e:	2b80      	cmp	r3, #128	@ 0x80
 800bb20:	d109      	bne.n	800bb36 <UART_DMAError+0x40>
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	2b21      	cmp	r3, #33	@ 0x21
 800bb26:	d106      	bne.n	800bb36 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bb30:	6978      	ldr	r0, [r7, #20]
 800bb32:	f7ff fe1d 	bl	800b770 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb40:	2b40      	cmp	r3, #64	@ 0x40
 800bb42:	d109      	bne.n	800bb58 <UART_DMAError+0x62>
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2b22      	cmp	r3, #34	@ 0x22
 800bb48:	d106      	bne.n	800bb58 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bb52:	6978      	ldr	r0, [r7, #20]
 800bb54:	f7ff fe4d 	bl	800b7f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb5e:	f043 0210 	orr.w	r2, r3, #16
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bb6e:	6978      	ldr	r0, [r7, #20]
 800bb70:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb72:	bf00      	nop
 800bb74:	3718      	adds	r7, #24
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b084      	sub	sp, #16
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2200      	movs	r2, #0
 800bb94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bb9e:	68f8      	ldr	r0, [r7, #12]
 800bba0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bba2:	bf00      	nop
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b088      	sub	sp, #32
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	e853 3f00 	ldrex	r3, [r3]
 800bbbe:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbc6:	61fb      	str	r3, [r7, #28]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	461a      	mov	r2, r3
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	61bb      	str	r3, [r7, #24]
 800bbd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd4:	6979      	ldr	r1, [r7, #20]
 800bbd6:	69ba      	ldr	r2, [r7, #24]
 800bbd8:	e841 2300 	strex	r3, r2, [r1]
 800bbdc:	613b      	str	r3, [r7, #16]
   return(result);
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d1e6      	bne.n	800bbb2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2220      	movs	r2, #32
 800bbe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbfc:	bf00      	nop
 800bbfe:	3720      	adds	r7, #32
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bc0c:	bf00      	nop
 800bc0e:	370c      	adds	r7, #12
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr

0800bc18 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bc20:	bf00      	nop
 800bc22:	370c      	adds	r7, #12
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bc34:	bf00      	nop
 800bc36:	370c      	adds	r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b085      	sub	sp, #20
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d101      	bne.n	800bc56 <HAL_UARTEx_DisableFifoMode+0x16>
 800bc52:	2302      	movs	r3, #2
 800bc54:	e027      	b.n	800bca6 <HAL_UARTEx_DisableFifoMode+0x66>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2224      	movs	r2, #36	@ 0x24
 800bc62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f022 0201 	bic.w	r2, r2, #1
 800bc7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bc84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2220      	movs	r2, #32
 800bc98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bca4:	2300      	movs	r3, #0
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3714      	adds	r7, #20
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr

0800bcb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b084      	sub	sp, #16
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
 800bcba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d101      	bne.n	800bcca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bcc6:	2302      	movs	r3, #2
 800bcc8:	e02d      	b.n	800bd26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2201      	movs	r2, #1
 800bcce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2224      	movs	r2, #36	@ 0x24
 800bcd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f022 0201 	bic.w	r2, r2, #1
 800bcf0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	683a      	ldr	r2, [r7, #0]
 800bd02:	430a      	orrs	r2, r1
 800bd04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 f850 	bl	800bdac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	68fa      	ldr	r2, [r7, #12]
 800bd12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2220      	movs	r2, #32
 800bd18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd24:	2300      	movs	r3, #0
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b084      	sub	sp, #16
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
 800bd36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	d101      	bne.n	800bd46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd42:	2302      	movs	r3, #2
 800bd44:	e02d      	b.n	800bda2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2201      	movs	r2, #1
 800bd4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2224      	movs	r2, #36	@ 0x24
 800bd52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f022 0201 	bic.w	r2, r2, #1
 800bd6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	683a      	ldr	r2, [r7, #0]
 800bd7e:	430a      	orrs	r2, r1
 800bd80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 f812 	bl	800bdac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2220      	movs	r2, #32
 800bd94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
	...

0800bdac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b085      	sub	sp, #20
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d108      	bne.n	800bdce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bdcc:	e031      	b.n	800be32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bdce:	2308      	movs	r3, #8
 800bdd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bdd2:	2308      	movs	r3, #8
 800bdd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	0e5b      	lsrs	r3, r3, #25
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	f003 0307 	and.w	r3, r3, #7
 800bde4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	689b      	ldr	r3, [r3, #8]
 800bdec:	0f5b      	lsrs	r3, r3, #29
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	f003 0307 	and.w	r3, r3, #7
 800bdf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bdf6:	7bbb      	ldrb	r3, [r7, #14]
 800bdf8:	7b3a      	ldrb	r2, [r7, #12]
 800bdfa:	4911      	ldr	r1, [pc, #68]	@ (800be40 <UARTEx_SetNbDataToProcess+0x94>)
 800bdfc:	5c8a      	ldrb	r2, [r1, r2]
 800bdfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800be02:	7b3a      	ldrb	r2, [r7, #12]
 800be04:	490f      	ldr	r1, [pc, #60]	@ (800be44 <UARTEx_SetNbDataToProcess+0x98>)
 800be06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be08:	fb93 f3f2 	sdiv	r3, r3, r2
 800be0c:	b29a      	uxth	r2, r3
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be14:	7bfb      	ldrb	r3, [r7, #15]
 800be16:	7b7a      	ldrb	r2, [r7, #13]
 800be18:	4909      	ldr	r1, [pc, #36]	@ (800be40 <UARTEx_SetNbDataToProcess+0x94>)
 800be1a:	5c8a      	ldrb	r2, [r1, r2]
 800be1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800be20:	7b7a      	ldrb	r2, [r7, #13]
 800be22:	4908      	ldr	r1, [pc, #32]	@ (800be44 <UARTEx_SetNbDataToProcess+0x98>)
 800be24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be26:	fb93 f3f2 	sdiv	r3, r3, r2
 800be2a:	b29a      	uxth	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800be32:	bf00      	nop
 800be34:	3714      	adds	r7, #20
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr
 800be3e:	bf00      	nop
 800be40:	0800c188 	.word	0x0800c188
 800be44:	0800c190 	.word	0x0800c190

0800be48 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	ed93 7a06 	vldr	s14, [r3, #24]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	edd3 7a07 	vldr	s15, [r3, #28]
 800be5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	edd3 7a08 	vldr	s15, [r3, #32]
 800be68:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	edd3 7a06 	vldr	s15, [r3, #24]
 800be78:	eeb1 7a67 	vneg.f32	s14, s15
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	edd3 7a08 	vldr	s15, [r3, #32]
 800be82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800be86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6a1a      	ldr	r2, [r3, #32]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d006      	beq.n	800beac <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	330c      	adds	r3, #12
 800bea2:	220c      	movs	r2, #12
 800bea4:	2100      	movs	r1, #0
 800bea6:	4618      	mov	r0, r3
 800bea8:	f000 f804 	bl	800beb4 <memset>
  }

}
 800beac:	bf00      	nop
 800beae:	3708      	adds	r7, #8
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <memset>:
 800beb4:	4402      	add	r2, r0
 800beb6:	4603      	mov	r3, r0
 800beb8:	4293      	cmp	r3, r2
 800beba:	d100      	bne.n	800bebe <memset+0xa>
 800bebc:	4770      	bx	lr
 800bebe:	f803 1b01 	strb.w	r1, [r3], #1
 800bec2:	e7f9      	b.n	800beb8 <memset+0x4>

0800bec4 <__errno>:
 800bec4:	4b01      	ldr	r3, [pc, #4]	@ (800becc <__errno+0x8>)
 800bec6:	6818      	ldr	r0, [r3, #0]
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop
 800becc:	20000224 	.word	0x20000224

0800bed0 <__libc_init_array>:
 800bed0:	b570      	push	{r4, r5, r6, lr}
 800bed2:	4d0d      	ldr	r5, [pc, #52]	@ (800bf08 <__libc_init_array+0x38>)
 800bed4:	4c0d      	ldr	r4, [pc, #52]	@ (800bf0c <__libc_init_array+0x3c>)
 800bed6:	1b64      	subs	r4, r4, r5
 800bed8:	10a4      	asrs	r4, r4, #2
 800beda:	2600      	movs	r6, #0
 800bedc:	42a6      	cmp	r6, r4
 800bede:	d109      	bne.n	800bef4 <__libc_init_array+0x24>
 800bee0:	4d0b      	ldr	r5, [pc, #44]	@ (800bf10 <__libc_init_array+0x40>)
 800bee2:	4c0c      	ldr	r4, [pc, #48]	@ (800bf14 <__libc_init_array+0x44>)
 800bee4:	f000 f92c 	bl	800c140 <_init>
 800bee8:	1b64      	subs	r4, r4, r5
 800beea:	10a4      	asrs	r4, r4, #2
 800beec:	2600      	movs	r6, #0
 800beee:	42a6      	cmp	r6, r4
 800bef0:	d105      	bne.n	800befe <__libc_init_array+0x2e>
 800bef2:	bd70      	pop	{r4, r5, r6, pc}
 800bef4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bef8:	4798      	blx	r3
 800befa:	3601      	adds	r6, #1
 800befc:	e7ee      	b.n	800bedc <__libc_init_array+0xc>
 800befe:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf02:	4798      	blx	r3
 800bf04:	3601      	adds	r6, #1
 800bf06:	e7f2      	b.n	800beee <__libc_init_array+0x1e>
 800bf08:	0800c1a0 	.word	0x0800c1a0
 800bf0c:	0800c1a0 	.word	0x0800c1a0
 800bf10:	0800c1a0 	.word	0x0800c1a0
 800bf14:	0800c1a4 	.word	0x0800c1a4

0800bf18 <memcpy>:
 800bf18:	440a      	add	r2, r1
 800bf1a:	4291      	cmp	r1, r2
 800bf1c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bf20:	d100      	bne.n	800bf24 <memcpy+0xc>
 800bf22:	4770      	bx	lr
 800bf24:	b510      	push	{r4, lr}
 800bf26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf2e:	4291      	cmp	r1, r2
 800bf30:	d1f9      	bne.n	800bf26 <memcpy+0xe>
 800bf32:	bd10      	pop	{r4, pc}

0800bf34 <sqrt>:
 800bf34:	b538      	push	{r3, r4, r5, lr}
 800bf36:	ed2d 8b02 	vpush	{d8}
 800bf3a:	ec55 4b10 	vmov	r4, r5, d0
 800bf3e:	f000 f825 	bl	800bf8c <__ieee754_sqrt>
 800bf42:	4622      	mov	r2, r4
 800bf44:	462b      	mov	r3, r5
 800bf46:	4620      	mov	r0, r4
 800bf48:	4629      	mov	r1, r5
 800bf4a:	eeb0 8a40 	vmov.f32	s16, s0
 800bf4e:	eef0 8a60 	vmov.f32	s17, s1
 800bf52:	f7f4 fdb7 	bl	8000ac4 <__aeabi_dcmpun>
 800bf56:	b990      	cbnz	r0, 800bf7e <sqrt+0x4a>
 800bf58:	2200      	movs	r2, #0
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	4629      	mov	r1, r5
 800bf60:	f7f4 fd88 	bl	8000a74 <__aeabi_dcmplt>
 800bf64:	b158      	cbz	r0, 800bf7e <sqrt+0x4a>
 800bf66:	f7ff ffad 	bl	800bec4 <__errno>
 800bf6a:	2321      	movs	r3, #33	@ 0x21
 800bf6c:	6003      	str	r3, [r0, #0]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	2300      	movs	r3, #0
 800bf72:	4610      	mov	r0, r2
 800bf74:	4619      	mov	r1, r3
 800bf76:	f7f4 fc35 	bl	80007e4 <__aeabi_ddiv>
 800bf7a:	ec41 0b18 	vmov	d8, r0, r1
 800bf7e:	eeb0 0a48 	vmov.f32	s0, s16
 800bf82:	eef0 0a68 	vmov.f32	s1, s17
 800bf86:	ecbd 8b02 	vpop	{d8}
 800bf8a:	bd38      	pop	{r3, r4, r5, pc}

0800bf8c <__ieee754_sqrt>:
 800bf8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf90:	4a68      	ldr	r2, [pc, #416]	@ (800c134 <__ieee754_sqrt+0x1a8>)
 800bf92:	ec55 4b10 	vmov	r4, r5, d0
 800bf96:	43aa      	bics	r2, r5
 800bf98:	462b      	mov	r3, r5
 800bf9a:	4621      	mov	r1, r4
 800bf9c:	d110      	bne.n	800bfc0 <__ieee754_sqrt+0x34>
 800bf9e:	4622      	mov	r2, r4
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	4629      	mov	r1, r5
 800bfa4:	f7f4 faf4 	bl	8000590 <__aeabi_dmul>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	460b      	mov	r3, r1
 800bfac:	4620      	mov	r0, r4
 800bfae:	4629      	mov	r1, r5
 800bfb0:	f7f4 f938 	bl	8000224 <__adddf3>
 800bfb4:	4604      	mov	r4, r0
 800bfb6:	460d      	mov	r5, r1
 800bfb8:	ec45 4b10 	vmov	d0, r4, r5
 800bfbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfc0:	2d00      	cmp	r5, #0
 800bfc2:	dc0e      	bgt.n	800bfe2 <__ieee754_sqrt+0x56>
 800bfc4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bfc8:	4322      	orrs	r2, r4
 800bfca:	d0f5      	beq.n	800bfb8 <__ieee754_sqrt+0x2c>
 800bfcc:	b19d      	cbz	r5, 800bff6 <__ieee754_sqrt+0x6a>
 800bfce:	4622      	mov	r2, r4
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	f7f4 f924 	bl	8000220 <__aeabi_dsub>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	460b      	mov	r3, r1
 800bfdc:	f7f4 fc02 	bl	80007e4 <__aeabi_ddiv>
 800bfe0:	e7e8      	b.n	800bfb4 <__ieee754_sqrt+0x28>
 800bfe2:	152a      	asrs	r2, r5, #20
 800bfe4:	d115      	bne.n	800c012 <__ieee754_sqrt+0x86>
 800bfe6:	2000      	movs	r0, #0
 800bfe8:	e009      	b.n	800bffe <__ieee754_sqrt+0x72>
 800bfea:	0acb      	lsrs	r3, r1, #11
 800bfec:	3a15      	subs	r2, #21
 800bfee:	0549      	lsls	r1, r1, #21
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d0fa      	beq.n	800bfea <__ieee754_sqrt+0x5e>
 800bff4:	e7f7      	b.n	800bfe6 <__ieee754_sqrt+0x5a>
 800bff6:	462a      	mov	r2, r5
 800bff8:	e7fa      	b.n	800bff0 <__ieee754_sqrt+0x64>
 800bffa:	005b      	lsls	r3, r3, #1
 800bffc:	3001      	adds	r0, #1
 800bffe:	02dc      	lsls	r4, r3, #11
 800c000:	d5fb      	bpl.n	800bffa <__ieee754_sqrt+0x6e>
 800c002:	1e44      	subs	r4, r0, #1
 800c004:	1b12      	subs	r2, r2, r4
 800c006:	f1c0 0420 	rsb	r4, r0, #32
 800c00a:	fa21 f404 	lsr.w	r4, r1, r4
 800c00e:	4323      	orrs	r3, r4
 800c010:	4081      	lsls	r1, r0
 800c012:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c016:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c01a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c01e:	07d2      	lsls	r2, r2, #31
 800c020:	bf5c      	itt	pl
 800c022:	005b      	lslpl	r3, r3, #1
 800c024:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c028:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c02c:	bf58      	it	pl
 800c02e:	0049      	lslpl	r1, r1, #1
 800c030:	2600      	movs	r6, #0
 800c032:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c036:	106d      	asrs	r5, r5, #1
 800c038:	0049      	lsls	r1, r1, #1
 800c03a:	2016      	movs	r0, #22
 800c03c:	4632      	mov	r2, r6
 800c03e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c042:	1917      	adds	r7, r2, r4
 800c044:	429f      	cmp	r7, r3
 800c046:	bfde      	ittt	le
 800c048:	193a      	addle	r2, r7, r4
 800c04a:	1bdb      	suble	r3, r3, r7
 800c04c:	1936      	addle	r6, r6, r4
 800c04e:	0fcf      	lsrs	r7, r1, #31
 800c050:	3801      	subs	r0, #1
 800c052:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c056:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c05a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c05e:	d1f0      	bne.n	800c042 <__ieee754_sqrt+0xb6>
 800c060:	4604      	mov	r4, r0
 800c062:	2720      	movs	r7, #32
 800c064:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c068:	429a      	cmp	r2, r3
 800c06a:	eb00 0e0c 	add.w	lr, r0, ip
 800c06e:	db02      	blt.n	800c076 <__ieee754_sqrt+0xea>
 800c070:	d113      	bne.n	800c09a <__ieee754_sqrt+0x10e>
 800c072:	458e      	cmp	lr, r1
 800c074:	d811      	bhi.n	800c09a <__ieee754_sqrt+0x10e>
 800c076:	f1be 0f00 	cmp.w	lr, #0
 800c07a:	eb0e 000c 	add.w	r0, lr, ip
 800c07e:	da42      	bge.n	800c106 <__ieee754_sqrt+0x17a>
 800c080:	2800      	cmp	r0, #0
 800c082:	db40      	blt.n	800c106 <__ieee754_sqrt+0x17a>
 800c084:	f102 0801 	add.w	r8, r2, #1
 800c088:	1a9b      	subs	r3, r3, r2
 800c08a:	458e      	cmp	lr, r1
 800c08c:	bf88      	it	hi
 800c08e:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800c092:	eba1 010e 	sub.w	r1, r1, lr
 800c096:	4464      	add	r4, ip
 800c098:	4642      	mov	r2, r8
 800c09a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c09e:	3f01      	subs	r7, #1
 800c0a0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c0a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c0a8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c0ac:	d1dc      	bne.n	800c068 <__ieee754_sqrt+0xdc>
 800c0ae:	4319      	orrs	r1, r3
 800c0b0:	d01b      	beq.n	800c0ea <__ieee754_sqrt+0x15e>
 800c0b2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c138 <__ieee754_sqrt+0x1ac>
 800c0b6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c13c <__ieee754_sqrt+0x1b0>
 800c0ba:	e9da 0100 	ldrd	r0, r1, [sl]
 800c0be:	e9db 2300 	ldrd	r2, r3, [fp]
 800c0c2:	f7f4 f8ad 	bl	8000220 <__aeabi_dsub>
 800c0c6:	e9da 8900 	ldrd	r8, r9, [sl]
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	4640      	mov	r0, r8
 800c0d0:	4649      	mov	r1, r9
 800c0d2:	f7f4 fcd9 	bl	8000a88 <__aeabi_dcmple>
 800c0d6:	b140      	cbz	r0, 800c0ea <__ieee754_sqrt+0x15e>
 800c0d8:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800c0dc:	e9da 0100 	ldrd	r0, r1, [sl]
 800c0e0:	e9db 2300 	ldrd	r2, r3, [fp]
 800c0e4:	d111      	bne.n	800c10a <__ieee754_sqrt+0x17e>
 800c0e6:	3601      	adds	r6, #1
 800c0e8:	463c      	mov	r4, r7
 800c0ea:	1072      	asrs	r2, r6, #1
 800c0ec:	0863      	lsrs	r3, r4, #1
 800c0ee:	07f1      	lsls	r1, r6, #31
 800c0f0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c0f4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c0f8:	bf48      	it	mi
 800c0fa:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c0fe:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c102:	4618      	mov	r0, r3
 800c104:	e756      	b.n	800bfb4 <__ieee754_sqrt+0x28>
 800c106:	4690      	mov	r8, r2
 800c108:	e7be      	b.n	800c088 <__ieee754_sqrt+0xfc>
 800c10a:	f7f4 f88b 	bl	8000224 <__adddf3>
 800c10e:	e9da 8900 	ldrd	r8, r9, [sl]
 800c112:	4602      	mov	r2, r0
 800c114:	460b      	mov	r3, r1
 800c116:	4640      	mov	r0, r8
 800c118:	4649      	mov	r1, r9
 800c11a:	f7f4 fcab 	bl	8000a74 <__aeabi_dcmplt>
 800c11e:	b120      	cbz	r0, 800c12a <__ieee754_sqrt+0x19e>
 800c120:	1ca0      	adds	r0, r4, #2
 800c122:	bf08      	it	eq
 800c124:	3601      	addeq	r6, #1
 800c126:	3402      	adds	r4, #2
 800c128:	e7df      	b.n	800c0ea <__ieee754_sqrt+0x15e>
 800c12a:	1c63      	adds	r3, r4, #1
 800c12c:	f023 0401 	bic.w	r4, r3, #1
 800c130:	e7db      	b.n	800c0ea <__ieee754_sqrt+0x15e>
 800c132:	bf00      	nop
 800c134:	7ff00000 	.word	0x7ff00000
 800c138:	20000280 	.word	0x20000280
 800c13c:	20000278 	.word	0x20000278

0800c140 <_init>:
 800c140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c142:	bf00      	nop
 800c144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c146:	bc08      	pop	{r3}
 800c148:	469e      	mov	lr, r3
 800c14a:	4770      	bx	lr

0800c14c <_fini>:
 800c14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c14e:	bf00      	nop
 800c150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c152:	bc08      	pop	{r3}
 800c154:	469e      	mov	lr, r3
 800c156:	4770      	bx	lr
