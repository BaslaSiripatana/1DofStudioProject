
Studio_readRPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e68  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009040  08009040  00019040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009080  08009080  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009080  08009080  00019080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009088  08009088  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009088  08009088  00019088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800908c  0800908c  0001908c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009090  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  20000088  08009118  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  08009118  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001823b  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cdb  00000000  00000000  00038336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  0003b018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a0  00000000  00000000  0003c558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028da3  00000000  00000000  0003d5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000186b0  00000000  00000000  0006639b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114226  00000000  00000000  0007ea4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006094  00000000  00000000  00192c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00198d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000088 	.word	0x20000088
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009028 	.word	0x08009028

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000008c 	.word	0x2000008c
 8000214:	08009028 	.word	0x08009028

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	; 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000e00:	f000 b970 	b.w	80010e4 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9e08      	ldr	r6, [sp, #32]
 8000e22:	460d      	mov	r5, r1
 8000e24:	4604      	mov	r4, r0
 8000e26:	460f      	mov	r7, r1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d14a      	bne.n	8000ec2 <__udivmoddi4+0xa6>
 8000e2c:	428a      	cmp	r2, r1
 8000e2e:	4694      	mov	ip, r2
 8000e30:	d965      	bls.n	8000efe <__udivmoddi4+0xe2>
 8000e32:	fab2 f382 	clz	r3, r2
 8000e36:	b143      	cbz	r3, 8000e4a <__udivmoddi4+0x2e>
 8000e38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e3c:	f1c3 0220 	rsb	r2, r3, #32
 8000e40:	409f      	lsls	r7, r3
 8000e42:	fa20 f202 	lsr.w	r2, r0, r2
 8000e46:	4317      	orrs	r7, r2
 8000e48:	409c      	lsls	r4, r3
 8000e4a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e4e:	fa1f f58c 	uxth.w	r5, ip
 8000e52:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e56:	0c22      	lsrs	r2, r4, #16
 8000e58:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e5c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e60:	fb01 f005 	mul.w	r0, r1, r5
 8000e64:	4290      	cmp	r0, r2
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x62>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000e70:	f080 811c 	bcs.w	80010ac <__udivmoddi4+0x290>
 8000e74:	4290      	cmp	r0, r2
 8000e76:	f240 8119 	bls.w	80010ac <__udivmoddi4+0x290>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4462      	add	r2, ip
 8000e7e:	1a12      	subs	r2, r2, r0
 8000e80:	b2a4      	uxth	r4, r4
 8000e82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e8e:	fb00 f505 	mul.w	r5, r0, r5
 8000e92:	42a5      	cmp	r5, r4
 8000e94:	d90a      	bls.n	8000eac <__udivmoddi4+0x90>
 8000e96:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e9e:	f080 8107 	bcs.w	80010b0 <__udivmoddi4+0x294>
 8000ea2:	42a5      	cmp	r5, r4
 8000ea4:	f240 8104 	bls.w	80010b0 <__udivmoddi4+0x294>
 8000ea8:	4464      	add	r4, ip
 8000eaa:	3802      	subs	r0, #2
 8000eac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000eb0:	1b64      	subs	r4, r4, r5
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	b11e      	cbz	r6, 8000ebe <__udivmoddi4+0xa2>
 8000eb6:	40dc      	lsrs	r4, r3
 8000eb8:	2300      	movs	r3, #0
 8000eba:	e9c6 4300 	strd	r4, r3, [r6]
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0xbc>
 8000ec6:	2e00      	cmp	r6, #0
 8000ec8:	f000 80ed 	beq.w	80010a6 <__udivmoddi4+0x28a>
 8000ecc:	2100      	movs	r1, #0
 8000ece:	e9c6 0500 	strd	r0, r5, [r6]
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	fab3 f183 	clz	r1, r3
 8000edc:	2900      	cmp	r1, #0
 8000ede:	d149      	bne.n	8000f74 <__udivmoddi4+0x158>
 8000ee0:	42ab      	cmp	r3, r5
 8000ee2:	d302      	bcc.n	8000eea <__udivmoddi4+0xce>
 8000ee4:	4282      	cmp	r2, r0
 8000ee6:	f200 80f8 	bhi.w	80010da <__udivmoddi4+0x2be>
 8000eea:	1a84      	subs	r4, r0, r2
 8000eec:	eb65 0203 	sbc.w	r2, r5, r3
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	4617      	mov	r7, r2
 8000ef4:	2e00      	cmp	r6, #0
 8000ef6:	d0e2      	beq.n	8000ebe <__udivmoddi4+0xa2>
 8000ef8:	e9c6 4700 	strd	r4, r7, [r6]
 8000efc:	e7df      	b.n	8000ebe <__udivmoddi4+0xa2>
 8000efe:	b902      	cbnz	r2, 8000f02 <__udivmoddi4+0xe6>
 8000f00:	deff      	udf	#255	; 0xff
 8000f02:	fab2 f382 	clz	r3, r2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f040 8090 	bne.w	800102c <__udivmoddi4+0x210>
 8000f0c:	1a8a      	subs	r2, r1, r2
 8000f0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	2101      	movs	r1, #1
 8000f18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000f20:	0c22      	lsrs	r2, r4, #16
 8000f22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f26:	fb0e f005 	mul.w	r0, lr, r5
 8000f2a:	4290      	cmp	r0, r2
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x124>
 8000f2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000f32:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f36:	d202      	bcs.n	8000f3e <__udivmoddi4+0x122>
 8000f38:	4290      	cmp	r0, r2
 8000f3a:	f200 80cb 	bhi.w	80010d4 <__udivmoddi4+0x2b8>
 8000f3e:	4645      	mov	r5, r8
 8000f40:	1a12      	subs	r2, r2, r0
 8000f42:	b2a4      	uxth	r4, r4
 8000f44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f48:	fb07 2210 	mls	r2, r7, r0, r2
 8000f4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f50:	fb0e fe00 	mul.w	lr, lr, r0
 8000f54:	45a6      	cmp	lr, r4
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x14e>
 8000f58:	eb1c 0404 	adds.w	r4, ip, r4
 8000f5c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000f60:	d202      	bcs.n	8000f68 <__udivmoddi4+0x14c>
 8000f62:	45a6      	cmp	lr, r4
 8000f64:	f200 80bb 	bhi.w	80010de <__udivmoddi4+0x2c2>
 8000f68:	4610      	mov	r0, r2
 8000f6a:	eba4 040e 	sub.w	r4, r4, lr
 8000f6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f72:	e79f      	b.n	8000eb4 <__udivmoddi4+0x98>
 8000f74:	f1c1 0720 	rsb	r7, r1, #32
 8000f78:	408b      	lsls	r3, r1
 8000f7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f82:	fa05 f401 	lsl.w	r4, r5, r1
 8000f86:	fa20 f307 	lsr.w	r3, r0, r7
 8000f8a:	40fd      	lsrs	r5, r7
 8000f8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f90:	4323      	orrs	r3, r4
 8000f92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f96:	fa1f fe8c 	uxth.w	lr, ip
 8000f9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000f9e:	0c1c      	lsrs	r4, r3, #16
 8000fa0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000fa4:	fb08 f50e 	mul.w	r5, r8, lr
 8000fa8:	42a5      	cmp	r5, r4
 8000faa:	fa02 f201 	lsl.w	r2, r2, r1
 8000fae:	fa00 f001 	lsl.w	r0, r0, r1
 8000fb2:	d90b      	bls.n	8000fcc <__udivmoddi4+0x1b0>
 8000fb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000fb8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000fbc:	f080 8088 	bcs.w	80010d0 <__udivmoddi4+0x2b4>
 8000fc0:	42a5      	cmp	r5, r4
 8000fc2:	f240 8085 	bls.w	80010d0 <__udivmoddi4+0x2b4>
 8000fc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fca:	4464      	add	r4, ip
 8000fcc:	1b64      	subs	r4, r4, r5
 8000fce:	b29d      	uxth	r5, r3
 8000fd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000fd8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fdc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fe0:	45a6      	cmp	lr, r4
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x1da>
 8000fe4:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000fec:	d26c      	bcs.n	80010c8 <__udivmoddi4+0x2ac>
 8000fee:	45a6      	cmp	lr, r4
 8000ff0:	d96a      	bls.n	80010c8 <__udivmoddi4+0x2ac>
 8000ff2:	3b02      	subs	r3, #2
 8000ff4:	4464      	add	r4, ip
 8000ff6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ffa:	fba3 9502 	umull	r9, r5, r3, r2
 8000ffe:	eba4 040e 	sub.w	r4, r4, lr
 8001002:	42ac      	cmp	r4, r5
 8001004:	46c8      	mov	r8, r9
 8001006:	46ae      	mov	lr, r5
 8001008:	d356      	bcc.n	80010b8 <__udivmoddi4+0x29c>
 800100a:	d053      	beq.n	80010b4 <__udivmoddi4+0x298>
 800100c:	b156      	cbz	r6, 8001024 <__udivmoddi4+0x208>
 800100e:	ebb0 0208 	subs.w	r2, r0, r8
 8001012:	eb64 040e 	sbc.w	r4, r4, lr
 8001016:	fa04 f707 	lsl.w	r7, r4, r7
 800101a:	40ca      	lsrs	r2, r1
 800101c:	40cc      	lsrs	r4, r1
 800101e:	4317      	orrs	r7, r2
 8001020:	e9c6 7400 	strd	r7, r4, [r6]
 8001024:	4618      	mov	r0, r3
 8001026:	2100      	movs	r1, #0
 8001028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800102c:	f1c3 0120 	rsb	r1, r3, #32
 8001030:	fa02 fc03 	lsl.w	ip, r2, r3
 8001034:	fa20 f201 	lsr.w	r2, r0, r1
 8001038:	fa25 f101 	lsr.w	r1, r5, r1
 800103c:	409d      	lsls	r5, r3
 800103e:	432a      	orrs	r2, r5
 8001040:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001044:	fa1f fe8c 	uxth.w	lr, ip
 8001048:	fbb1 f0f7 	udiv	r0, r1, r7
 800104c:	fb07 1510 	mls	r5, r7, r0, r1
 8001050:	0c11      	lsrs	r1, r2, #16
 8001052:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001056:	fb00 f50e 	mul.w	r5, r0, lr
 800105a:	428d      	cmp	r5, r1
 800105c:	fa04 f403 	lsl.w	r4, r4, r3
 8001060:	d908      	bls.n	8001074 <__udivmoddi4+0x258>
 8001062:	eb1c 0101 	adds.w	r1, ip, r1
 8001066:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800106a:	d22f      	bcs.n	80010cc <__udivmoddi4+0x2b0>
 800106c:	428d      	cmp	r5, r1
 800106e:	d92d      	bls.n	80010cc <__udivmoddi4+0x2b0>
 8001070:	3802      	subs	r0, #2
 8001072:	4461      	add	r1, ip
 8001074:	1b49      	subs	r1, r1, r5
 8001076:	b292      	uxth	r2, r2
 8001078:	fbb1 f5f7 	udiv	r5, r1, r7
 800107c:	fb07 1115 	mls	r1, r7, r5, r1
 8001080:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001084:	fb05 f10e 	mul.w	r1, r5, lr
 8001088:	4291      	cmp	r1, r2
 800108a:	d908      	bls.n	800109e <__udivmoddi4+0x282>
 800108c:	eb1c 0202 	adds.w	r2, ip, r2
 8001090:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001094:	d216      	bcs.n	80010c4 <__udivmoddi4+0x2a8>
 8001096:	4291      	cmp	r1, r2
 8001098:	d914      	bls.n	80010c4 <__udivmoddi4+0x2a8>
 800109a:	3d02      	subs	r5, #2
 800109c:	4462      	add	r2, ip
 800109e:	1a52      	subs	r2, r2, r1
 80010a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80010a4:	e738      	b.n	8000f18 <__udivmoddi4+0xfc>
 80010a6:	4631      	mov	r1, r6
 80010a8:	4630      	mov	r0, r6
 80010aa:	e708      	b.n	8000ebe <__udivmoddi4+0xa2>
 80010ac:	4639      	mov	r1, r7
 80010ae:	e6e6      	b.n	8000e7e <__udivmoddi4+0x62>
 80010b0:	4610      	mov	r0, r2
 80010b2:	e6fb      	b.n	8000eac <__udivmoddi4+0x90>
 80010b4:	4548      	cmp	r0, r9
 80010b6:	d2a9      	bcs.n	800100c <__udivmoddi4+0x1f0>
 80010b8:	ebb9 0802 	subs.w	r8, r9, r2
 80010bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010c0:	3b01      	subs	r3, #1
 80010c2:	e7a3      	b.n	800100c <__udivmoddi4+0x1f0>
 80010c4:	4645      	mov	r5, r8
 80010c6:	e7ea      	b.n	800109e <__udivmoddi4+0x282>
 80010c8:	462b      	mov	r3, r5
 80010ca:	e794      	b.n	8000ff6 <__udivmoddi4+0x1da>
 80010cc:	4640      	mov	r0, r8
 80010ce:	e7d1      	b.n	8001074 <__udivmoddi4+0x258>
 80010d0:	46d0      	mov	r8, sl
 80010d2:	e77b      	b.n	8000fcc <__udivmoddi4+0x1b0>
 80010d4:	3d02      	subs	r5, #2
 80010d6:	4462      	add	r2, ip
 80010d8:	e732      	b.n	8000f40 <__udivmoddi4+0x124>
 80010da:	4608      	mov	r0, r1
 80010dc:	e70a      	b.n	8000ef4 <__udivmoddi4+0xd8>
 80010de:	4464      	add	r4, ip
 80010e0:	3802      	subs	r0, #2
 80010e2:	e742      	b.n	8000f6a <__udivmoddi4+0x14e>

080010e4 <__aeabi_idiv0>:
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ec:	b08c      	sub	sp, #48	; 0x30
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f0:	f002 f945 	bl	800337e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f4:	f000 f9fe 	bl	80014f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f8:	f000 fcae 	bl	8001a58 <MX_GPIO_Init>
  MX_DMA_Init();
 80010fc:	f000 fc82 	bl	8001a04 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001100:	f000 face 	bl	80016a0 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8001104:	f000 fb6a 	bl	80017dc <MX_TIM3_Init>
  MX_TIM2_Init();
 8001108:	f000 fb14 	bl	8001734 <MX_TIM2_Init>
  MX_TIM5_Init();
 800110c:	f000 fc2c 	bl	8001968 <MX_TIM5_Init>
  MX_ADC1_Init();
 8001110:	f000 fa3c 	bl	800158c <MX_ADC1_Init>
  MX_TIM4_Init();
 8001114:	f000 fbda 	bl	80018cc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //PWM Motor
  HAL_TIM_Base_Start(&htim3);
 8001118:	486b      	ldr	r0, [pc, #428]	; (80012c8 <main+0x1e0>)
 800111a:	f005 fafb 	bl	8006714 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800111e:	2100      	movs	r1, #0
 8001120:	4869      	ldr	r0, [pc, #420]	; (80012c8 <main+0x1e0>)
 8001122:	f005 fc41 	bl	80069a8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 8001126:	4b68      	ldr	r3, [pc, #416]	; (80012c8 <main+0x1e0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800112e:	635a      	str	r2, [r3, #52]	; 0x34

  //Read Encoder
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001130:	213c      	movs	r1, #60	; 0x3c
 8001132:	4866      	ldr	r0, [pc, #408]	; (80012cc <main+0x1e4>)
 8001134:	f005 fdf0 	bl	8006d18 <HAL_TIM_Encoder_Start>

  //time microsec
  HAL_TIM_Base_Start_IT(&htim5);
 8001138:	4865      	ldr	r0, [pc, #404]	; (80012d0 <main+0x1e8>)
 800113a:	f005 fb5b 	bl	80067f4 <HAL_TIM_Base_Start_IT>

  //Read joystick
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 2);
 800113e:	2202      	movs	r2, #2
 8001140:	4964      	ldr	r1, [pc, #400]	; (80012d4 <main+0x1ec>)
 8001142:	4865      	ldr	r0, [pc, #404]	; (80012d8 <main+0x1f0>)
 8001144:	f002 fd88 	bl	8003c58 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim4);
 8001148:	4864      	ldr	r0, [pc, #400]	; (80012dc <main+0x1f4>)
 800114a:	f005 fae3 	bl	8006714 <HAL_TIM_Base_Start>

  //PID Control Position
  PID1.Kp = 2; //No more than 0.92
 800114e:	4b64      	ldr	r3, [pc, #400]	; (80012e0 <main+0x1f8>)
 8001150:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001154:	619a      	str	r2, [r3, #24]
  PID1.Ki = 0.000017;
 8001156:	4b62      	ldr	r3, [pc, #392]	; (80012e0 <main+0x1f8>)
 8001158:	4a62      	ldr	r2, [pc, #392]	; (80012e4 <main+0x1fc>)
 800115a:	61da      	str	r2, [r3, #28]
  PID1.Kd = 50;
 800115c:	4b60      	ldr	r3, [pc, #384]	; (80012e0 <main+0x1f8>)
 800115e:	4a62      	ldr	r2, [pc, #392]	; (80012e8 <main+0x200>)
 8001160:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID1, 0);
 8001162:	2100      	movs	r1, #0
 8001164:	485e      	ldr	r0, [pc, #376]	; (80012e0 <main+0x1f8>)
 8001166:	f007 fdf1 	bl	8008d4c <arm_pid_init_f32>

  //PID Control Velocity
  PID2.Kp = 0.15;  //No more than 0.044
 800116a:	4b60      	ldr	r3, [pc, #384]	; (80012ec <main+0x204>)
 800116c:	4a60      	ldr	r2, [pc, #384]	; (80012f0 <main+0x208>)
 800116e:	619a      	str	r2, [r3, #24]
  PID2.Ki = 0.006;
 8001170:	4b5e      	ldr	r3, [pc, #376]	; (80012ec <main+0x204>)
 8001172:	4a60      	ldr	r2, [pc, #384]	; (80012f4 <main+0x20c>)
 8001174:	61da      	str	r2, [r3, #28]
  PID2.Kd = 0.05;
 8001176:	4b5d      	ldr	r3, [pc, #372]	; (80012ec <main+0x204>)
 8001178:	4a5f      	ldr	r2, [pc, #380]	; (80012f8 <main+0x210>)
 800117a:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID2, 0);
 800117c:	2100      	movs	r1, #0
 800117e:	485b      	ldr	r0, [pc, #364]	; (80012ec <main+0x204>)
 8001180:	f007 fde4 	bl	8008d4c <arm_pid_init_f32>
    /* USER CODE BEGIN 3 */

	  static uint64_t timestamp = 0;
	  static uint64_t timestamp2 = 0;

	  int64_t currentTime = micros();
 8001184:	f000 fd8e 	bl	8001ca4 <micros>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  if (max_velo < QEIdata.linearVel)
 8001190:	4b5a      	ldr	r3, [pc, #360]	; (80012fc <main+0x214>)
 8001192:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001196:	4b5a      	ldr	r3, [pc, #360]	; (8001300 <main+0x218>)
 8001198:	edd3 7a00 	vldr	s15, [r3]
 800119c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	dd03      	ble.n	80011ae <main+0xc6>
	  {
		  max_velo = QEIdata.linearVel;
 80011a6:	4b55      	ldr	r3, [pc, #340]	; (80012fc <main+0x214>)
 80011a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011aa:	4a55      	ldr	r2, [pc, #340]	; (8001300 <main+0x218>)
 80011ac:	6013      	str	r3, [r2, #0]
	  }
	  if(currentTime > timestamp2){
 80011ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80011b2:	4954      	ldr	r1, [pc, #336]	; (8001304 <main+0x21c>)
 80011b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011b8:	4290      	cmp	r0, r2
 80011ba:	eb71 0303 	sbcs.w	r3, r1, r3
 80011be:	f080 80bf 	bcs.w	8001340 <main+0x258>

		  //timestamp2 = currentTime + 125; //8,000 Hz
		  timestamp2 = currentTime + 167; //6,000 Hz
 80011c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80011c6:	f112 04a7 	adds.w	r4, r2, #167	; 0xa7
 80011ca:	f143 0500 	adc.w	r5, r3, #0
 80011ce:	4622      	mov	r2, r4
 80011d0:	462b      	mov	r3, r5
 80011d2:	494c      	ldr	r1, [pc, #304]	; (8001304 <main+0x21c>)
 80011d4:	e9c1 2300 	strd	r2, r3, [r1]

		  //Read encoder
		  QEIEncoderPosVel_Update();
 80011d8:	f000 fd7e 	bl	8001cd8 <QEIEncoderPosVel_Update>

		  //Create Trajectory
		  q_f = setPosition;
 80011dc:	4b4a      	ldr	r3, [pc, #296]	; (8001308 <main+0x220>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a4a      	ldr	r2, [pc, #296]	; (800130c <main+0x224>)
 80011e2:	6013      	str	r3, [r2, #0]
		  checkStartMoving();
 80011e4:	f000 fe9e 	bl	8001f24 <checkStartMoving>
		  createTrajectory();
 80011e8:	f001 f8cc 	bl	8002384 <createTrajectory>

		  if(mode == 1){
 80011ec:	4b48      	ldr	r3, [pc, #288]	; (8001310 <main+0x228>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d15e      	bne.n	80012b2 <main+0x1ca>
			  Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 - QEIdata.linearVel);
 80011f4:	4b47      	ldr	r3, [pc, #284]	; (8001314 <main+0x22c>)
 80011f6:	ed93 7a00 	vldr	s14, [r3]
 80011fa:	4b47      	ldr	r3, [pc, #284]	; (8001318 <main+0x230>)
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001204:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001208:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800120c:	4b3b      	ldr	r3, [pc, #236]	; (80012fc <main+0x214>)
 800120e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001216:	4b35      	ldr	r3, [pc, #212]	; (80012ec <main+0x204>)
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
 800121a:	edc7 7a08 	vstr	s15, [r7, #32]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	ed93 7a00 	vldr	s14, [r3]
 8001224:	edd7 7a08 	vldr	s15, [r7, #32]
 8001228:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	edd3 7a03 	vldr	s15, [r3, #12]
 8001238:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800123c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	edd3 6a02 	vldr	s13, [r3, #8]
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	edd3 7a04 	vldr	s15, [r3, #16]
 800124c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001250:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800125a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125e:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Update state */
    S->state[1] = S->state[0];
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	6a3a      	ldr	r2, [r7, #32]
 800126e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	4a28      	ldr	r2, [pc, #160]	; (800131c <main+0x234>)
 800127a:	6013      	str	r3, [r2, #0]
			  //Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
			  if(Vin > 24){
 800127c:	4b27      	ldr	r3, [pc, #156]	; (800131c <main+0x234>)
 800127e:	edd3 7a00 	vldr	s15, [r3]
 8001282:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	dd02      	ble.n	8001296 <main+0x1ae>
	  			  Vin = 24;
 8001290:	4b22      	ldr	r3, [pc, #136]	; (800131c <main+0x234>)
 8001292:	4a23      	ldr	r2, [pc, #140]	; (8001320 <main+0x238>)
 8001294:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 8001296:	4b21      	ldr	r3, [pc, #132]	; (800131c <main+0x234>)
 8001298:	edd3 7a00 	vldr	s15, [r3]
 800129c:	eebb 7a08 	vmov.f32	s14, #184	; 0xc1c00000 -24.0
 80012a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a8:	d546      	bpl.n	8001338 <main+0x250>
				  Vin = -24;
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <main+0x234>)
 80012ac:	4a1d      	ldr	r2, [pc, #116]	; (8001324 <main+0x23c>)
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e042      	b.n	8001338 <main+0x250>
			  }
		  }
	      else if(mode == 2){ //manual (control with joy stick)
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <main+0x228>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d136      	bne.n	8001328 <main+0x240>
			  JoystickInput();
 80012ba:	f001 fcf3 	bl	8002ca4 <JoystickInput>
			  button_up_down_input();
 80012be:	f001 fd11 	bl	8002ce4 <button_up_down_input>
			  button_reset_input(); //set 0;
 80012c2:	f001 fd8d 	bl	8002de0 <button_reset_input>
 80012c6:	e037      	b.n	8001338 <main+0x250>
 80012c8:	20000250 	.word	0x20000250
 80012cc:	20000204 	.word	0x20000204
 80012d0:	200002e8 	.word	0x200002e8
 80012d4:	20000370 	.word	0x20000370
 80012d8:	200000a4 	.word	0x200000a4
 80012dc:	2000029c 	.word	0x2000029c
 80012e0:	200003cc 	.word	0x200003cc
 80012e4:	378e9b39 	.word	0x378e9b39
 80012e8:	42480000 	.word	0x42480000
 80012ec:	200003f0 	.word	0x200003f0
 80012f0:	3e19999a 	.word	0x3e19999a
 80012f4:	3bc49ba6 	.word	0x3bc49ba6
 80012f8:	3d4ccccd 	.word	0x3d4ccccd
 80012fc:	20000338 	.word	0x20000338
 8001300:	2000041c 	.word	0x2000041c
 8001304:	20000428 	.word	0x20000428
 8001308:	20000414 	.word	0x20000414
 800130c:	20000384 	.word	0x20000384
 8001310:	20000000 	.word	0x20000000
 8001314:	20000418 	.word	0x20000418
 8001318:	20000394 	.word	0x20000394
 800131c:	2000037c 	.word	0x2000037c
 8001320:	41c00000 	.word	0x41c00000
 8001324:	c1c00000 	.word	0xc1c00000
		  }
		  else if(mode == 3){ //stop mode
 8001328:	4b66      	ldr	r3, [pc, #408]	; (80014c4 <main+0x3dc>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b03      	cmp	r3, #3
 800132e:	d103      	bne.n	8001338 <main+0x250>
			  Vin = 0;
 8001330:	4b65      	ldr	r3, [pc, #404]	; (80014c8 <main+0x3e0>)
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
		  }

		  //software limit
		  SoftwareLimit();
 8001338:	f001 fc5e 	bl	8002bf8 <SoftwareLimit>

		  //Drive Motor which PWM
		  DriveMotor();
 800133c:	f001 fc00 	bl	8002b40 <DriveMotor>

	  }

	  if(currentTime > timestamp){
 8001340:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001344:	4961      	ldr	r1, [pc, #388]	; (80014cc <main+0x3e4>)
 8001346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800134a:	4290      	cmp	r0, r2
 800134c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001350:	f4bf af18 	bcs.w	8001184 <main+0x9c>
		  //timestamp = currentTime + 1000; //1000 Hz
		  timestamp = currentTime + 4000; //250 Hz
 8001354:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001358:	f512 687a 	adds.w	r8, r2, #4000	; 0xfa0
 800135c:	f143 0900 	adc.w	r9, r3, #0
 8001360:	4642      	mov	r2, r8
 8001362:	464b      	mov	r3, r9
 8001364:	4959      	ldr	r1, [pc, #356]	; (80014cc <main+0x3e4>)
 8001366:	e9c1 2300 	strd	r2, r3, [r1]

		  //control mode
		  if(mode == 1){ //auto
 800136a:	4b56      	ldr	r3, [pc, #344]	; (80014c4 <main+0x3dc>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b01      	cmp	r3, #1
 8001370:	f47f af08 	bne.w	8001184 <main+0x9c>
			  setVelocity = arm_pid_f32(&PID1, (setPosition + ref_p)/2 - QEIdata.linearPos);
 8001374:	4b56      	ldr	r3, [pc, #344]	; (80014d0 <main+0x3e8>)
 8001376:	ed93 7a00 	vldr	s14, [r3]
 800137a:	4b56      	ldr	r3, [pc, #344]	; (80014d4 <main+0x3ec>)
 800137c:	edd3 7a00 	vldr	s15, [r3]
 8001380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001384:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001388:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800138c:	4b52      	ldr	r3, [pc, #328]	; (80014d8 <main+0x3f0>)
 800138e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001396:	4b51      	ldr	r3, [pc, #324]	; (80014dc <main+0x3f4>)
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	edc7 7a02 	vstr	s15, [r7, #8]
    out = (S->A0 * in) +
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	ed93 7a00 	vldr	s14, [r3]
 80013a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80013a8:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	edd3 6a01 	vldr	s13, [r3, #4]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80013b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80013bc:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	edd3 6a02 	vldr	s13, [r3, #8]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80013cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80013da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013de:	edc7 7a01 	vstr	s15, [r7, #4]
    S->state[1] = S->state[0];
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	68ba      	ldr	r2, [r7, #8]
 80013ee:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	615a      	str	r2, [r3, #20]
    return (out);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a39      	ldr	r2, [pc, #228]	; (80014e0 <main+0x3f8>)
 80013fa:	6013      	str	r3, [r2, #0]
			  Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 + QEIdata.linearVel);
 80013fc:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <main+0x3f8>)
 80013fe:	ed93 7a00 	vldr	s14, [r3]
 8001402:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <main+0x3fc>)
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001410:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001414:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <main+0x3f0>)
 8001416:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800141a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <main+0x400>)
 8001420:	61bb      	str	r3, [r7, #24]
 8001422:	edc7 7a05 	vstr	s15, [r7, #20]
    out = (S->A0 * in) +
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	ed93 7a00 	vldr	s14, [r3]
 800142c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001430:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	edd3 6a01 	vldr	s13, [r3, #4]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001444:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	edd3 6a02 	vldr	s13, [r3, #8]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	edd3 7a04 	vldr	s15, [r3, #16]
 8001454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001458:	ee37 7a27 	vadd.f32	s14, s14, s15
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001466:	edc7 7a04 	vstr	s15, [r7, #16]
    S->state[1] = S->state[0];
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	615a      	str	r2, [r3, #20]
    return (out);
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4a11      	ldr	r2, [pc, #68]	; (80014c8 <main+0x3e0>)
 8001482:	6013      	str	r3, [r2, #0]
			  //Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
			  if(Vin > 24){
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <main+0x3e0>)
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 800148e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001496:	dd02      	ble.n	800149e <main+0x3b6>
				  Vin = 24;
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <main+0x3e0>)
 800149a:	4a14      	ldr	r2, [pc, #80]	; (80014ec <main+0x404>)
 800149c:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <main+0x3e0>)
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	eebb 7a08 	vmov.f32	s14, #184	; 0xc1c00000 -24.0
 80014a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b0:	d502      	bpl.n	80014b8 <main+0x3d0>
				  Vin = -24;
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <main+0x3e0>)
 80014b4:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <main+0x408>)
 80014b6:	601a      	str	r2, [r3, #0]
			  }

			  //software limit
			  SoftwareLimit();
 80014b8:	f001 fb9e 	bl	8002bf8 <SoftwareLimit>

			  //Drive Motor which PWM
			  DriveMotor();
 80014bc:	f001 fb40 	bl	8002b40 <DriveMotor>
  {
 80014c0:	e660      	b.n	8001184 <main+0x9c>
 80014c2:	bf00      	nop
 80014c4:	20000000 	.word	0x20000000
 80014c8:	2000037c 	.word	0x2000037c
 80014cc:	20000430 	.word	0x20000430
 80014d0:	20000414 	.word	0x20000414
 80014d4:	20000390 	.word	0x20000390
 80014d8:	20000338 	.word	0x20000338
 80014dc:	200003cc 	.word	0x200003cc
 80014e0:	20000418 	.word	0x20000418
 80014e4:	20000394 	.word	0x20000394
 80014e8:	200003f0 	.word	0x200003f0
 80014ec:	41c00000 	.word	0x41c00000
 80014f0:	c1c00000 	.word	0xc1c00000

080014f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b094      	sub	sp, #80	; 0x50
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 0318 	add.w	r3, r7, #24
 80014fe:	2238      	movs	r2, #56	; 0x38
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f007 fc58 	bl	8008db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001516:	2000      	movs	r0, #0
 8001518:	f004 f874 	bl	8005604 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800151c:	2302      	movs	r3, #2
 800151e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001526:	2340      	movs	r3, #64	; 0x40
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152a:	2302      	movs	r3, #2
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800152e:	2302      	movs	r3, #2
 8001530:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001532:	2304      	movs	r3, #4
 8001534:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001536:	2355      	movs	r3, #85	; 0x55
 8001538:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800153a:	2302      	movs	r3, #2
 800153c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800153e:	2302      	movs	r3, #2
 8001540:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001542:	2302      	movs	r3, #2
 8001544:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001546:	f107 0318 	add.w	r3, r7, #24
 800154a:	4618      	mov	r0, r3
 800154c:	f004 f90e 	bl	800576c <HAL_RCC_OscConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001556:	f001 fc99 	bl	8002e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155a:	230f      	movs	r3, #15
 800155c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155e:	2303      	movs	r3, #3
 8001560:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2104      	movs	r1, #4
 8001572:	4618      	mov	r0, r3
 8001574:	f004 fc0c 	bl	8005d90 <HAL_RCC_ClockConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800157e:	f001 fc85 	bl	8002e8c <Error_Handler>
  }
}
 8001582:	bf00      	nop
 8001584:	3750      	adds	r7, #80	; 0x50
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	; 0x30
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2220      	movs	r2, #32
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f007 fc07 	bl	8008db8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015aa:	4b3a      	ldr	r3, [pc, #232]	; (8001694 <MX_ADC1_Init+0x108>)
 80015ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015b2:	4b38      	ldr	r3, [pc, #224]	; (8001694 <MX_ADC1_Init+0x108>)
 80015b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80015b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015ba:	4b36      	ldr	r3, [pc, #216]	; (8001694 <MX_ADC1_Init+0x108>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c0:	4b34      	ldr	r3, [pc, #208]	; (8001694 <MX_ADC1_Init+0x108>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80015c6:	4b33      	ldr	r3, [pc, #204]	; (8001694 <MX_ADC1_Init+0x108>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015cc:	4b31      	ldr	r3, [pc, #196]	; (8001694 <MX_ADC1_Init+0x108>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d2:	4b30      	ldr	r3, [pc, #192]	; (8001694 <MX_ADC1_Init+0x108>)
 80015d4:	2204      	movs	r2, #4
 80015d6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015d8:	4b2e      	ldr	r3, [pc, #184]	; (8001694 <MX_ADC1_Init+0x108>)
 80015da:	2200      	movs	r2, #0
 80015dc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015de:	4b2d      	ldr	r3, [pc, #180]	; (8001694 <MX_ADC1_Init+0x108>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80015e4:	4b2b      	ldr	r3, [pc, #172]	; (8001694 <MX_ADC1_Init+0x108>)
 80015e6:	2202      	movs	r2, #2
 80015e8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ea:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <MX_ADC1_Init+0x108>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80015f2:	4b28      	ldr	r3, [pc, #160]	; (8001694 <MX_ADC1_Init+0x108>)
 80015f4:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 80015f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80015fa:	4b26      	ldr	r3, [pc, #152]	; (8001694 <MX_ADC1_Init+0x108>)
 80015fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001600:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001602:	4b24      	ldr	r3, [pc, #144]	; (8001694 <MX_ADC1_Init+0x108>)
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <MX_ADC1_Init+0x108>)
 800160c:	2200      	movs	r2, #0
 800160e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001610:	4b20      	ldr	r3, [pc, #128]	; (8001694 <MX_ADC1_Init+0x108>)
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001618:	481e      	ldr	r0, [pc, #120]	; (8001694 <MX_ADC1_Init+0x108>)
 800161a:	f002 f961 	bl	80038e0 <HAL_ADC_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001624:	f001 fc32 	bl	8002e8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	4818      	ldr	r0, [pc, #96]	; (8001694 <MX_ADC1_Init+0x108>)
 8001634:	f003 f992 	bl	800495c <HAL_ADCEx_MultiModeConfigChannel>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800163e:	f001 fc25 	bl	8002e8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <MX_ADC1_Init+0x10c>)
 8001644:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001646:	2306      	movs	r3, #6
 8001648:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800164e:	237f      	movs	r3, #127	; 0x7f
 8001650:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001652:	2304      	movs	r3, #4
 8001654:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	4619      	mov	r1, r3
 800165e:	480d      	ldr	r0, [pc, #52]	; (8001694 <MX_ADC1_Init+0x108>)
 8001660:	f002 fbec 	bl	8003e3c <HAL_ADC_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800166a:	f001 fc0f 	bl	8002e8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_ADC1_Init+0x110>)
 8001670:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001672:	230c      	movs	r3, #12
 8001674:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	4619      	mov	r1, r3
 800167a:	4806      	ldr	r0, [pc, #24]	; (8001694 <MX_ADC1_Init+0x108>)
 800167c:	f002 fbde 	bl	8003e3c <HAL_ADC_ConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001686:	f001 fc01 	bl	8002e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	3730      	adds	r7, #48	; 0x30
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200000a4 	.word	0x200000a4
 8001698:	04300002 	.word	0x04300002
 800169c:	14f00020 	.word	0x14f00020

080016a0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80016a4:	4b21      	ldr	r3, [pc, #132]	; (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016a6:	4a22      	ldr	r2, [pc, #136]	; (8001730 <MX_LPUART1_UART_Init+0x90>)
 80016a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	4b1e      	ldr	r3, [pc, #120]	; (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80016b8:	4b1c      	ldr	r3, [pc, #112]	; (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80016be:	4b1b      	ldr	r3, [pc, #108]	; (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016e2:	4812      	ldr	r0, [pc, #72]	; (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016e4:	f006 fcc4 	bl	8008070 <HAL_UART_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80016ee:	f001 fbcd 	bl	8002e8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f2:	2100      	movs	r1, #0
 80016f4:	480d      	ldr	r0, [pc, #52]	; (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016f6:	f007 fa5f 	bl	8008bb8 <HAL_UARTEx_SetTxFifoThreshold>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001700:	f001 fbc4 	bl	8002e8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001704:	2100      	movs	r1, #0
 8001706:	4809      	ldr	r0, [pc, #36]	; (800172c <MX_LPUART1_UART_Init+0x8c>)
 8001708:	f007 fa94 	bl	8008c34 <HAL_UARTEx_SetRxFifoThreshold>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001712:	f001 fbbb 	bl	8002e8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_LPUART1_UART_Init+0x8c>)
 8001718:	f007 fa15 	bl	8008b46 <HAL_UARTEx_DisableFifoMode>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001722:	f001 fbb3 	bl	8002e8c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000170 	.word	0x20000170
 8001730:	40008000 	.word	0x40008000

08001734 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	; 0x30
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	2224      	movs	r2, #36	; 0x24
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f007 fb38 	bl	8008db8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001748:	463b      	mov	r3, r7
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <MX_TIM2_Init+0xa4>)
 8001754:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001758:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <MX_TIM2_Init+0xa4>)
 800175c:	2200      	movs	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_TIM2_Init+0xa4>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_TIM2_Init+0xa4>)
 8001768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800176c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_TIM2_Init+0xa4>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001774:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <MX_TIM2_Init+0xa4>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800177a:	2303      	movs	r3, #3
 800177c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001782:	2301      	movs	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001792:	2301      	movs	r3, #1
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	4619      	mov	r1, r3
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <MX_TIM2_Init+0xa4>)
 80017a6:	f005 fa11 	bl	8006bcc <HAL_TIM_Encoder_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80017b0:	f001 fb6c 	bl	8002e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b4:	2300      	movs	r3, #0
 80017b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017bc:	463b      	mov	r3, r7
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_TIM2_Init+0xa4>)
 80017c2:	f006 fb79 	bl	8007eb8 <HAL_TIMEx_MasterConfigSynchronization>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80017cc:	f001 fb5e 	bl	8002e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	3730      	adds	r7, #48	; 0x30
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000204 	.word	0x20000204

080017dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08e      	sub	sp, #56	; 0x38
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fc:	463b      	mov	r3, r7
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]
 800180a:	615a      	str	r2, [r3, #20]
 800180c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800180e:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <MX_TIM3_Init+0xe8>)
 8001810:	4a2d      	ldr	r2, [pc, #180]	; (80018c8 <MX_TIM3_Init+0xec>)
 8001812:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001814:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <MX_TIM3_Init+0xe8>)
 8001816:	22a9      	movs	r2, #169	; 0xa9
 8001818:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <MX_TIM3_Init+0xe8>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001820:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <MX_TIM3_Init+0xe8>)
 8001822:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001826:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001828:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <MX_TIM3_Init+0xe8>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182e:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <MX_TIM3_Init+0xe8>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001834:	4823      	ldr	r0, [pc, #140]	; (80018c4 <MX_TIM3_Init+0xe8>)
 8001836:	f004 ff15 	bl	8006664 <HAL_TIM_Base_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001840:	f001 fb24 	bl	8002e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800184a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800184e:	4619      	mov	r1, r3
 8001850:	481c      	ldr	r0, [pc, #112]	; (80018c4 <MX_TIM3_Init+0xe8>)
 8001852:	f005 fd53 	bl	80072fc <HAL_TIM_ConfigClockSource>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800185c:	f001 fb16 	bl	8002e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001860:	4818      	ldr	r0, [pc, #96]	; (80018c4 <MX_TIM3_Init+0xe8>)
 8001862:	f005 f83f 	bl	80068e4 <HAL_TIM_PWM_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800186c:	f001 fb0e 	bl	8002e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	4619      	mov	r1, r3
 800187e:	4811      	ldr	r0, [pc, #68]	; (80018c4 <MX_TIM3_Init+0xe8>)
 8001880:	f006 fb1a 	bl	8007eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800188a:	f001 faff 	bl	8002e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800188e:	2360      	movs	r3, #96	; 0x60
 8001890:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001892:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001896:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a0:	463b      	mov	r3, r7
 80018a2:	2200      	movs	r2, #0
 80018a4:	4619      	mov	r1, r3
 80018a6:	4807      	ldr	r0, [pc, #28]	; (80018c4 <MX_TIM3_Init+0xe8>)
 80018a8:	f005 fc14 	bl	80070d4 <HAL_TIM_PWM_ConfigChannel>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80018b2:	f001 faeb 	bl	8002e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018b6:	4803      	ldr	r0, [pc, #12]	; (80018c4 <MX_TIM3_Init+0xe8>)
 80018b8:	f001 fc98 	bl	80031ec <HAL_TIM_MspPostInit>

}
 80018bc:	bf00      	nop
 80018be:	3738      	adds	r7, #56	; 0x38
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000250 	.word	0x20000250
 80018c8:	40000400 	.word	0x40000400

080018cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018ea:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <MX_TIM4_Init+0x94>)
 80018ec:	4a1d      	ldr	r2, [pc, #116]	; (8001964 <MX_TIM4_Init+0x98>)
 80018ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <MX_TIM4_Init+0x94>)
 80018f2:	22a9      	movs	r2, #169	; 0xa9
 80018f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <MX_TIM4_Init+0x94>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80018fc:	4b18      	ldr	r3, [pc, #96]	; (8001960 <MX_TIM4_Init+0x94>)
 80018fe:	f242 720f 	movw	r2, #9999	; 0x270f
 8001902:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <MX_TIM4_Init+0x94>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <MX_TIM4_Init+0x94>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001910:	4813      	ldr	r0, [pc, #76]	; (8001960 <MX_TIM4_Init+0x94>)
 8001912:	f004 fea7 	bl	8006664 <HAL_TIM_Base_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800191c:	f001 fab6 	bl	8002e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001924:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	4619      	mov	r1, r3
 800192c:	480c      	ldr	r0, [pc, #48]	; (8001960 <MX_TIM4_Init+0x94>)
 800192e:	f005 fce5 	bl	80072fc <HAL_TIM_ConfigClockSource>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001938:	f001 faa8 	bl	8002e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800193c:	2320      	movs	r3, #32
 800193e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_TIM4_Init+0x94>)
 800194a:	f006 fab5 	bl	8007eb8 <HAL_TIMEx_MasterConfigSynchronization>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001954:	f001 fa9a 	bl	8002e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	3720      	adds	r7, #32
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2000029c 	.word	0x2000029c
 8001964:	40000800 	.word	0x40000800

08001968 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <MX_TIM5_Init+0x94>)
 8001988:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <MX_TIM5_Init+0x98>)
 800198a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <MX_TIM5_Init+0x94>)
 800198e:	22a9      	movs	r2, #169	; 0xa9
 8001990:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <MX_TIM5_Init+0x94>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <MX_TIM5_Init+0x94>)
 800199a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800199e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a0:	4b16      	ldr	r3, [pc, #88]	; (80019fc <MX_TIM5_Init+0x94>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <MX_TIM5_Init+0x94>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80019ac:	4813      	ldr	r0, [pc, #76]	; (80019fc <MX_TIM5_Init+0x94>)
 80019ae:	f004 fe59 	bl	8006664 <HAL_TIM_Base_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80019b8:	f001 fa68 	bl	8002e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80019c2:	f107 0310 	add.w	r3, r7, #16
 80019c6:	4619      	mov	r1, r3
 80019c8:	480c      	ldr	r0, [pc, #48]	; (80019fc <MX_TIM5_Init+0x94>)
 80019ca:	f005 fc97 	bl	80072fc <HAL_TIM_ConfigClockSource>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80019d4:	f001 fa5a 	bl	8002e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	4619      	mov	r1, r3
 80019e4:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_TIM5_Init+0x94>)
 80019e6:	f006 fa67 	bl	8007eb8 <HAL_TIMEx_MasterConfigSynchronization>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80019f0:	f001 fa4c 	bl	8002e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200002e8 	.word	0x200002e8
 8001a00:	40000c00 	.word	0x40000c00

08001a04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <MX_DMA_Init+0x50>)
 8001a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0e:	4a11      	ldr	r2, [pc, #68]	; (8001a54 <MX_DMA_Init+0x50>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	6493      	str	r3, [r2, #72]	; 0x48
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <MX_DMA_Init+0x50>)
 8001a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_DMA_Init+0x50>)
 8001a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a26:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <MX_DMA_Init+0x50>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6493      	str	r3, [r2, #72]	; 0x48
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_DMA_Init+0x50>)
 8001a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	200b      	movs	r0, #11
 8001a40:	f003 f96f 	bl	8004d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a44:	200b      	movs	r0, #11
 8001a46:	f003 f986 	bl	8004d56 <HAL_NVIC_EnableIRQ>

}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000

08001a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6e:	4b7c      	ldr	r3, [pc, #496]	; (8001c60 <MX_GPIO_Init+0x208>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	4a7b      	ldr	r2, [pc, #492]	; (8001c60 <MX_GPIO_Init+0x208>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7a:	4b79      	ldr	r3, [pc, #484]	; (8001c60 <MX_GPIO_Init+0x208>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a86:	4b76      	ldr	r3, [pc, #472]	; (8001c60 <MX_GPIO_Init+0x208>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	4a75      	ldr	r2, [pc, #468]	; (8001c60 <MX_GPIO_Init+0x208>)
 8001a8c:	f043 0320 	orr.w	r3, r3, #32
 8001a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a92:	4b73      	ldr	r3, [pc, #460]	; (8001c60 <MX_GPIO_Init+0x208>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	f003 0320 	and.w	r3, r3, #32
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	4b70      	ldr	r3, [pc, #448]	; (8001c60 <MX_GPIO_Init+0x208>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	4a6f      	ldr	r2, [pc, #444]	; (8001c60 <MX_GPIO_Init+0x208>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aaa:	4b6d      	ldr	r3, [pc, #436]	; (8001c60 <MX_GPIO_Init+0x208>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	4b6a      	ldr	r3, [pc, #424]	; (8001c60 <MX_GPIO_Init+0x208>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	4a69      	ldr	r2, [pc, #420]	; (8001c60 <MX_GPIO_Init+0x208>)
 8001abc:	f043 0302 	orr.w	r3, r3, #2
 8001ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac2:	4b67      	ldr	r3, [pc, #412]	; (8001c60 <MX_GPIO_Init+0x208>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ace:	4b64      	ldr	r3, [pc, #400]	; (8001c60 <MX_GPIO_Init+0x208>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	4a63      	ldr	r2, [pc, #396]	; (8001c60 <MX_GPIO_Init+0x208>)
 8001ad4:	f043 0308 	orr.w	r3, r3, #8
 8001ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ada:	4b61      	ldr	r3, [pc, #388]	; (8001c60 <MX_GPIO_Init+0x208>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8001aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af0:	f003 fd58 	bl	80055a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	21b0      	movs	r1, #176	; 0xb0
 8001af8:	485a      	ldr	r0, [pc, #360]	; (8001c64 <MX_GPIO_Init+0x20c>)
 8001afa:	f003 fd53 	bl	80055a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_6, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001b04:	4858      	ldr	r0, [pc, #352]	; (8001c68 <MX_GPIO_Init+0x210>)
 8001b06:	f003 fd4d 	bl	80055a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b10:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4850      	ldr	r0, [pc, #320]	; (8001c64 <MX_GPIO_Init+0x20c>)
 8001b22:	f003 fba5 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8
                           PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001b26:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001b2a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b42:	f003 fb95 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001b46:	23b0      	movs	r3, #176	; 0xb0
 8001b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4841      	ldr	r0, [pc, #260]	; (8001c64 <MX_GPIO_Init+0x20c>)
 8001b5e:	f003 fb87 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_6;
 8001b62:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	483b      	ldr	r0, [pc, #236]	; (8001c68 <MX_GPIO_Init+0x210>)
 8001b7c:	f003 fb78 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b98:	f003 fb6a 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ba2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	482c      	ldr	r0, [pc, #176]	; (8001c64 <MX_GPIO_Init+0x20c>)
 8001bb4:	f003 fb5c 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001bb8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4825      	ldr	r0, [pc, #148]	; (8001c64 <MX_GPIO_Init+0x20c>)
 8001bce:	f003 fb4f 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	4821      	ldr	r0, [pc, #132]	; (8001c6c <MX_GPIO_Init+0x214>)
 8001be6:	f003 fb43 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001bea:	2330      	movs	r3, #48	; 0x30
 8001bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	481a      	ldr	r0, [pc, #104]	; (8001c68 <MX_GPIO_Init+0x210>)
 8001bfe:	f003 fb37 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0e:	f107 0314 	add.w	r3, r7, #20
 8001c12:	4619      	mov	r1, r3
 8001c14:	4814      	ldr	r0, [pc, #80]	; (8001c68 <MX_GPIO_Init+0x210>)
 8001c16:	f003 fb2b 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	480d      	ldr	r0, [pc, #52]	; (8001c68 <MX_GPIO_Init+0x210>)
 8001c32:	f003 fb1d 	bl	8005270 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	2017      	movs	r0, #23
 8001c3c:	f003 f871 	bl	8004d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c40:	2017      	movs	r0, #23
 8001c42:	f003 f888 	bl	8004d56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2100      	movs	r1, #0
 8001c4a:	2028      	movs	r0, #40	; 0x28
 8001c4c:	f003 f869 	bl	8004d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c50:	2028      	movs	r0, #40	; 0x28
 8001c52:	f003 f880 	bl	8004d56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c56:	bf00      	nop
 8001c58:	3728      	adds	r7, #40	; 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
 8001c64:	48000800 	.word	0x48000800
 8001c68:	48000400 	.word	0x48000400
 8001c6c:	48000c00 	.word	0x48000c00

08001c70 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c70:	b4b0      	push	{r4, r5, r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d108      	bne.n	8001c92 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 8001c80:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	1e54      	subs	r4, r2, #1
 8001c88:	f143 0500 	adc.w	r5, r3, #0
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001c8e:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bcb0      	pop	{r4, r5, r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	200002e8 	.word	0x200002e8
 8001ca0:	20000368 	.word	0x20000368

08001ca4 <micros>:

uint64_t micros()
{
 8001ca4:	b4b0      	push	{r4, r5, r7}
 8001ca6:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <micros+0x2c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	2200      	movs	r2, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <micros+0x30>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	1884      	adds	r4, r0, r2
 8001cbc:	eb41 0503 	adc.w	r5, r1, r3
 8001cc0:	4622      	mov	r2, r4
 8001cc2:	462b      	mov	r3, r5
}
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bcb0      	pop	{r4, r5, r7}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	200002e8 	.word	0x200002e8
 8001cd4:	20000368 	.word	0x20000368

08001cd8 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 8001cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = micros();
 8001ce0:	f7ff ffe0 	bl	8001ca4 <micros>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4965      	ldr	r1, [pc, #404]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001cea:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim2);
 8001cee:	4b65      	ldr	r3, [pc, #404]	; (8001e84 <QEIEncoderPosVel_Update+0x1ac>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	4a62      	ldr	r2, [pc, #392]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001cf6:	6013      	str	r3, [r2, #0]
	//Postion 1 turn calculation
	QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 8001cf8:	4b61      	ldr	r3, [pc, #388]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d00:	ee07 3a90 	vmov	s15, r3
 8001d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d08:	4b5d      	ldr	r3, [pc, #372]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001d0a:	edc3 7a06 	vstr	s15, [r3, #24]
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8001d0e:	4b5c      	ldr	r3, [pc, #368]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4b5b      	ldr	r3, [pc, #364]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	607b      	str	r3, [r7, #4]
	//Handle Warp around
	if(diffPosition > UINT32_MAX/2)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	da02      	bge.n	8001d26 <QEIEncoderPosVel_Update+0x4e>
		diffPosition -=UINT32_MAX;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3301      	adds	r3, #1
 8001d24:	607b      	str	r3, [r7, #4]
	if(diffPosition < -UINT32_MAX/2)
		diffPosition +=UINT32_MAX;
	//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001; //sec
 8001d26:	4b56      	ldr	r3, [pc, #344]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001d28:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d2c:	4b54      	ldr	r3, [pc, #336]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001d2e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d32:	ebb0 0a02 	subs.w	sl, r0, r2
 8001d36:	eb61 0b03 	sbc.w	fp, r1, r3
 8001d3a:	4650      	mov	r0, sl
 8001d3c:	4659      	mov	r1, fp
 8001d3e:	f7fe fbf1 	bl	8000524 <__aeabi_ul2d>
 8001d42:	a34b      	add	r3, pc, #300	; (adr r3, 8001e70 <QEIEncoderPosVel_Update+0x198>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	f7fe fc22 	bl	8000590 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	f7fe feec 	bl	8000b30 <__aeabi_d2f>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	603b      	str	r3, [r7, #0]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;  //pulse/sec
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d66:	ed97 7a00 	vldr	s14, [r7]
 8001d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d6e:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001d70:	edc3 7a07 	vstr	s15, [r3, #28]

	QEIdata.rad_s = (QEIdata.QEIAngularVelocity*2*3.14)/8192;
 8001d74:	4b42      	ldr	r3, [pc, #264]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001d76:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d7e:	ee17 0a90 	vmov	r0, s15
 8001d82:	f7fe fbad 	bl	80004e0 <__aeabi_f2d>
 8001d86:	a33c      	add	r3, pc, #240	; (adr r3, 8001e78 <QEIEncoderPosVel_Update+0x1a0>)
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	f7fe fc00 	bl	8000590 <__aeabi_dmul>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	4b3a      	ldr	r3, [pc, #232]	; (8001e88 <QEIEncoderPosVel_Update+0x1b0>)
 8001d9e:	f7fe fd21 	bl	80007e4 <__aeabi_ddiv>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4610      	mov	r0, r2
 8001da8:	4619      	mov	r1, r3
 8001daa:	f7fe fec1 	bl	8000b30 <__aeabi_d2f>
 8001dae:	4603      	mov	r3, r0
 8001db0:	4a33      	ldr	r2, [pc, #204]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001db2:	6213      	str	r3, [r2, #32]
	QEIdata.rpm = (QEIdata.QEIAngularVelocity*60)/8192;
 8001db4:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001db6:	edd3 7a07 	vldr	s15, [r3, #28]
 8001dba:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001e8c <QEIEncoderPosVel_Update+0x1b4>
 8001dbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dc2:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001e90 <QEIEncoderPosVel_Update+0x1b8>
 8001dc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dca:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001dcc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	QEIdata.linearVel = (QEIdata.QEIAngularVelocity*10)/8192; //velocity (mm/s)
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001dd2:	edd3 7a07 	vldr	s15, [r3, #28]
 8001dd6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dde:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001e90 <QEIEncoderPosVel_Update+0x1b8>
 8001de2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001de8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	if(QEIdata.Position[NEW] < 2147483648){
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db11      	blt.n	8001e18 <QEIEncoderPosVel_Update+0x140>
		QEIdata.linearPos = ((float)QEIdata.Position[NEW]*10)/8192; //position (mm)
 8001df4:	4b22      	ldr	r3, [pc, #136]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	ee07 3a90 	vmov	s15, r3
 8001dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e00:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e08:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001e90 <QEIEncoderPosVel_Update+0x1b8>
 8001e0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001e12:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8001e16:	e01c      	b.n	8001e52 <QEIEncoderPosVel_Update+0x17a>
	}
	else{
		QEIdata.linearPos = -((float)(4294967295 - QEIdata.Position[NEW])*10)/8192;
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	461c      	mov	r4, r3
 8001e20:	4615      	mov	r5, r2
 8001e22:	2300      	movs	r3, #0
 8001e24:	f1d4 38ff 	rsbs	r8, r4, #4294967295	; 0xffffffff
 8001e28:	eb63 0905 	sbc.w	r9, r3, r5
 8001e2c:	4640      	mov	r0, r8
 8001e2e:	4649      	mov	r1, r9
 8001e30:	f7fe ff9e 	bl	8000d70 <__aeabi_l2f>
 8001e34:	ee07 0a10 	vmov	s14, r0
 8001e38:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e40:	eeb1 7a67 	vneg.f32	s14, s15
 8001e44:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001e90 <QEIEncoderPosVel_Update+0x1b8>
 8001e48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001e4e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	}

	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001e58:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001e5c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e60:	4907      	ldr	r1, [pc, #28]	; (8001e80 <QEIEncoderPosVel_Update+0x1a8>)
 8001e62:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e70:	a0b5ed8d 	.word	0xa0b5ed8d
 8001e74:	3eb0c6f7 	.word	0x3eb0c6f7
 8001e78:	51eb851f 	.word	0x51eb851f
 8001e7c:	40091eb8 	.word	0x40091eb8
 8001e80:	20000338 	.word	0x20000338
 8001e84:	20000204 	.word	0x20000204
 8001e88:	40c00000 	.word	0x40c00000
 8001e8c:	42700000 	.word	0x42700000
 8001e90:	46000000 	.word	0x46000000

08001e94 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_10)  //change mode IT
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea4:	d121      	bne.n	8001eea <HAL_GPIO_EXTI_Callback+0x56>
	{
//		setPosition = 100;
		mode += 1;
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <HAL_GPIO_EXTI_Callback+0x84>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <HAL_GPIO_EXTI_Callback+0x84>)
 8001eb0:	701a      	strb	r2, [r3, #0]
		if(mode==4){
 8001eb2:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <HAL_GPIO_EXTI_Callback+0x84>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d102      	bne.n	8001ec0 <HAL_GPIO_EXTI_Callback+0x2c>
			mode = 1;
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <HAL_GPIO_EXTI_Callback+0x84>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
		}

		if(mode == 1){
 8001ec0:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <HAL_GPIO_EXTI_Callback+0x84>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d106      	bne.n	8001ed6 <HAL_GPIO_EXTI_Callback+0x42>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	2140      	movs	r1, #64	; 0x40
 8001ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed0:	f003 fb68 	bl	80055a4 <HAL_GPIO_WritePin>
 8001ed4:	e009      	b.n	8001eea <HAL_GPIO_EXTI_Callback+0x56>
		}
		else if(mode == 2){
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <HAL_GPIO_EXTI_Callback+0x84>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d105      	bne.n	8001eea <HAL_GPIO_EXTI_Callback+0x56>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2140      	movs	r1, #64	; 0x40
 8001ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee6:	f003 fb5d 	bl	80055a4 <HAL_GPIO_WritePin>
		}
	}
	if(GPIO_Pin == GPIO_PIN_8){ //check top sensor
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ef0:	d104      	bne.n	8001efc <HAL_GPIO_EXTI_Callback+0x68>
		S_top = 1;
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <HAL_GPIO_EXTI_Callback+0x88>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
		//Vin = -2;
		DriveMotor();
 8001ef8:	f000 fe22 	bl	8002b40 <DriveMotor>
	}
	if(GPIO_Pin == GPIO_PIN_9){ //check down sensor
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f02:	d104      	bne.n	8001f0e <HAL_GPIO_EXTI_Callback+0x7a>
		S_down = 1;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
		//Vin = 2;
		DriveMotor();
 8001f0a:	f000 fe19 	bl	8002b40 <DriveMotor>
	}
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	20000420 	.word	0x20000420
 8001f20:	20000424 	.word	0x20000424

08001f24 <checkStartMoving>:

//-----------------------------------Trajectory------------------------------------------//
void checkStartMoving(){
 8001f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
	if(q_f != q_f_old){
 8001f2c:	4b9d      	ldr	r3, [pc, #628]	; (80021a4 <checkStartMoving+0x280>)
 8001f2e:	ed93 7a00 	vldr	s14, [r3]
 8001f32:	4b9d      	ldr	r3, [pc, #628]	; (80021a8 <checkStartMoving+0x284>)
 8001f34:	edd3 7a00 	vldr	s15, [r3]
 8001f38:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f40:	f000 8201 	beq.w	8002346 <checkStartMoving+0x422>
		q_i = q_f_old;   //Define q_i
 8001f44:	4b98      	ldr	r3, [pc, #608]	; (80021a8 <checkStartMoving+0x284>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a98      	ldr	r2, [pc, #608]	; (80021ac <checkStartMoving+0x288>)
 8001f4a:	6013      	str	r3, [r2, #0]
		delta_q = q_f - q_i;
 8001f4c:	4b95      	ldr	r3, [pc, #596]	; (80021a4 <checkStartMoving+0x280>)
 8001f4e:	ed93 7a00 	vldr	s14, [r3]
 8001f52:	4b96      	ldr	r3, [pc, #600]	; (80021ac <checkStartMoving+0x288>)
 8001f54:	edd3 7a00 	vldr	s15, [r3]
 8001f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f5c:	4b94      	ldr	r3, [pc, #592]	; (80021b0 <checkStartMoving+0x28c>)
 8001f5e:	edc3 7a00 	vstr	s15, [r3]
		if(delta_q < 0){
 8001f62:	4b93      	ldr	r3, [pc, #588]	; (80021b0 <checkStartMoving+0x28c>)
 8001f64:	edd3 7a00 	vldr	s15, [r3]
 8001f68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f70:	d504      	bpl.n	8001f7c <checkStartMoving+0x58>
			dir = -1;
 8001f72:	4b90      	ldr	r3, [pc, #576]	; (80021b4 <checkStartMoving+0x290>)
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e002      	b.n	8001f82 <checkStartMoving+0x5e>
		}
		else{
			dir = 1;
 8001f7c:	4b8d      	ldr	r3, [pc, #564]	; (80021b4 <checkStartMoving+0x290>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]
		}

		float q_check = fabs(q_d_i + q_2d_max*sqrt(fabs(delta_q)/q_2d_max)*dir);
 8001f82:	4b8d      	ldr	r3, [pc, #564]	; (80021b8 <checkStartMoving+0x294>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe faaa 	bl	80004e0 <__aeabi_f2d>
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	460d      	mov	r5, r1
 8001f90:	4b8a      	ldr	r3, [pc, #552]	; (80021bc <checkStartMoving+0x298>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe faa3 	bl	80004e0 <__aeabi_f2d>
 8001f9a:	4680      	mov	r8, r0
 8001f9c:	4689      	mov	r9, r1
 8001f9e:	4b84      	ldr	r3, [pc, #528]	; (80021b0 <checkStartMoving+0x28c>)
 8001fa0:	edd3 7a00 	vldr	s15, [r3]
 8001fa4:	eef0 7ae7 	vabs.f32	s15, s15
 8001fa8:	ee17 0a90 	vmov	r0, s15
 8001fac:	f7fe fa98 	bl	80004e0 <__aeabi_f2d>
 8001fb0:	4682      	mov	sl, r0
 8001fb2:	468b      	mov	fp, r1
 8001fb4:	4b81      	ldr	r3, [pc, #516]	; (80021bc <checkStartMoving+0x298>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fa91 	bl	80004e0 <__aeabi_f2d>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4650      	mov	r0, sl
 8001fc4:	4659      	mov	r1, fp
 8001fc6:	f7fe fc0d 	bl	80007e4 <__aeabi_ddiv>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	ec43 2b17 	vmov	d7, r2, r3
 8001fd2:	eeb0 0a47 	vmov.f32	s0, s14
 8001fd6:	eef0 0a67 	vmov.f32	s1, s15
 8001fda:	f006 ff1f 	bl	8008e1c <sqrt>
 8001fde:	ec53 2b10 	vmov	r2, r3, d0
 8001fe2:	4640      	mov	r0, r8
 8001fe4:	4649      	mov	r1, r9
 8001fe6:	f7fe fad3 	bl	8000590 <__aeabi_dmul>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4690      	mov	r8, r2
 8001ff0:	4699      	mov	r9, r3
 8001ff2:	4b70      	ldr	r3, [pc, #448]	; (80021b4 <checkStartMoving+0x290>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fa60 	bl	80004bc <__aeabi_i2d>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4640      	mov	r0, r8
 8002002:	4649      	mov	r1, r9
 8002004:	f7fe fac4 	bl	8000590 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4620      	mov	r0, r4
 800200e:	4629      	mov	r1, r5
 8002010:	f7fe f908 	bl	8000224 <__adddf3>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f7fe fd88 	bl	8000b30 <__aeabi_d2f>
 8002020:	ee07 0a90 	vmov	s15, r0
 8002024:	eef0 7ae7 	vabs.f32	s15, s15
 8002028:	edc7 7a01 	vstr	s15, [r7, #4]

		if(q_check >= q_d_max){ //Accelerate to maximum speed
 800202c:	4b64      	ldr	r3, [pc, #400]	; (80021c0 <checkStartMoving+0x29c>)
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	ed97 7a01 	vldr	s14, [r7, #4]
 8002036:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203e:	f2c0 80cf 	blt.w	80021e0 <checkStartMoving+0x2bc>
			calmode = 1;
 8002042:	4b60      	ldr	r3, [pc, #384]	; (80021c4 <checkStartMoving+0x2a0>)
 8002044:	2201      	movs	r2, #1
 8002046:	701a      	strb	r2, [r3, #0]
			t_acc = fabs((q_d_max-q_d_i)/q_2d_max);
 8002048:	4b5d      	ldr	r3, [pc, #372]	; (80021c0 <checkStartMoving+0x29c>)
 800204a:	ed93 7a00 	vldr	s14, [r3]
 800204e:	4b5a      	ldr	r3, [pc, #360]	; (80021b8 <checkStartMoving+0x294>)
 8002050:	edd3 7a00 	vldr	s15, [r3]
 8002054:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002058:	4b58      	ldr	r3, [pc, #352]	; (80021bc <checkStartMoving+0x298>)
 800205a:	ed93 7a00 	vldr	s14, [r3]
 800205e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002062:	eef0 7ae7 	vabs.f32	s15, s15
 8002066:	4b58      	ldr	r3, [pc, #352]	; (80021c8 <checkStartMoving+0x2a4>)
 8002068:	edc3 7a00 	vstr	s15, [r3]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 800206c:	4b52      	ldr	r3, [pc, #328]	; (80021b8 <checkStartMoving+0x294>)
 800206e:	ed93 7a00 	vldr	s14, [r3]
 8002072:	4b55      	ldr	r3, [pc, #340]	; (80021c8 <checkStartMoving+0x2a4>)
 8002074:	edd3 7a00 	vldr	s15, [r3]
 8002078:	ee27 7a27 	vmul.f32	s14, s14, s15
 800207c:	4b4d      	ldr	r3, [pc, #308]	; (80021b4 <checkStartMoving+0x290>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	ee07 3a90 	vmov	s15, r3
 8002084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208c:	ee17 0a90 	vmov	r0, s15
 8002090:	f7fe fa26 	bl	80004e0 <__aeabi_f2d>
 8002094:	4604      	mov	r4, r0
 8002096:	460d      	mov	r5, r1
 8002098:	4b48      	ldr	r3, [pc, #288]	; (80021bc <checkStartMoving+0x298>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fa1f 	bl	80004e0 <__aeabi_f2d>
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	4b49      	ldr	r3, [pc, #292]	; (80021cc <checkStartMoving+0x2a8>)
 80020a8:	f7fe fa72 	bl	8000590 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4690      	mov	r8, r2
 80020b2:	4699      	mov	r9, r3
 80020b4:	4b44      	ldr	r3, [pc, #272]	; (80021c8 <checkStartMoving+0x2a4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fa11 	bl	80004e0 <__aeabi_f2d>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4640      	mov	r0, r8
 80020c4:	4649      	mov	r1, r9
 80020c6:	f7fe fa63 	bl	8000590 <__aeabi_dmul>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4690      	mov	r8, r2
 80020d0:	4699      	mov	r9, r3
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <checkStartMoving+0x2a4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fa02 	bl	80004e0 <__aeabi_f2d>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4640      	mov	r0, r8
 80020e2:	4649      	mov	r1, r9
 80020e4:	f7fe fa54 	bl	8000590 <__aeabi_dmul>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4690      	mov	r8, r2
 80020ee:	4699      	mov	r9, r3
 80020f0:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <checkStartMoving+0x290>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe f9e1 	bl	80004bc <__aeabi_i2d>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4640      	mov	r0, r8
 8002100:	4649      	mov	r1, r9
 8002102:	f7fe fa45 	bl	8000590 <__aeabi_dmul>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4620      	mov	r0, r4
 800210c:	4629      	mov	r1, r5
 800210e:	f7fe f889 	bl	8000224 <__adddf3>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	f7fe fd09 	bl	8000b30 <__aeabi_d2f>
 800211e:	4603      	mov	r3, r0
 8002120:	4a2b      	ldr	r2, [pc, #172]	; (80021d0 <checkStartMoving+0x2ac>)
 8002122:	6013      	str	r3, [r2, #0]
			t_const = fabs((q_f-q_i-2*q_acc)/q_d_max);
 8002124:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <checkStartMoving+0x280>)
 8002126:	ed93 7a00 	vldr	s14, [r3]
 800212a:	4b20      	ldr	r3, [pc, #128]	; (80021ac <checkStartMoving+0x288>)
 800212c:	edd3 7a00 	vldr	s15, [r3]
 8002130:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002134:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <checkStartMoving+0x2ac>)
 8002136:	edd3 7a00 	vldr	s15, [r3]
 800213a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800213e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002142:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <checkStartMoving+0x29c>)
 8002144:	ed93 7a00 	vldr	s14, [r3]
 8002148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800214c:	eef0 7ae7 	vabs.f32	s15, s15
 8002150:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <checkStartMoving+0x2b0>)
 8002152:	edc3 7a00 	vstr	s15, [r3]
			q_const = q_acc + q_d_max*t_const*dir;
 8002156:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <checkStartMoving+0x29c>)
 8002158:	ed93 7a00 	vldr	s14, [r3]
 800215c:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <checkStartMoving+0x2b0>)
 800215e:	edd3 7a00 	vldr	s15, [r3]
 8002162:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002166:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <checkStartMoving+0x290>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002176:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <checkStartMoving+0x2ac>)
 8002178:	edd3 7a00 	vldr	s15, [r3]
 800217c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002180:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <checkStartMoving+0x2b4>)
 8002182:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc + t_const;
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <checkStartMoving+0x2a4>)
 8002188:	edd3 7a00 	vldr	s15, [r3]
 800218c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002190:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <checkStartMoving+0x2b0>)
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <checkStartMoving+0x2b8>)
 800219c:	edc3 7a00 	vstr	s15, [r3]
 80021a0:	e0c6      	b.n	8002330 <checkStartMoving+0x40c>
 80021a2:	bf00      	nop
 80021a4:	20000384 	.word	0x20000384
 80021a8:	2000039c 	.word	0x2000039c
 80021ac:	20000388 	.word	0x20000388
 80021b0:	2000038c 	.word	0x2000038c
 80021b4:	20000014 	.word	0x20000014
 80021b8:	20000380 	.word	0x20000380
 80021bc:	2000000c 	.word	0x2000000c
 80021c0:	20000008 	.word	0x20000008
 80021c4:	20000010 	.word	0x20000010
 80021c8:	200003a0 	.word	0x200003a0
 80021cc:	3fe00000 	.word	0x3fe00000
 80021d0:	200003a4 	.word	0x200003a4
 80021d4:	200003a8 	.word	0x200003a8
 80021d8:	200003ac 	.word	0x200003ac
 80021dc:	200003c4 	.word	0x200003c4
		}
		else{ //Accelerating does not reach maximum speed
			calmode = 2;
 80021e0:	4b5b      	ldr	r3, [pc, #364]	; (8002350 <checkStartMoving+0x42c>)
 80021e2:	2202      	movs	r2, #2
 80021e4:	701a      	strb	r2, [r3, #0]
			t_acc = sqrt(fabs(delta_q)/q_2d_max);
 80021e6:	4b5b      	ldr	r3, [pc, #364]	; (8002354 <checkStartMoving+0x430>)
 80021e8:	edd3 7a00 	vldr	s15, [r3]
 80021ec:	eef0 7ae7 	vabs.f32	s15, s15
 80021f0:	ee17 0a90 	vmov	r0, s15
 80021f4:	f7fe f974 	bl	80004e0 <__aeabi_f2d>
 80021f8:	4604      	mov	r4, r0
 80021fa:	460d      	mov	r5, r1
 80021fc:	4b56      	ldr	r3, [pc, #344]	; (8002358 <checkStartMoving+0x434>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe f96d 	bl	80004e0 <__aeabi_f2d>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4620      	mov	r0, r4
 800220c:	4629      	mov	r1, r5
 800220e:	f7fe fae9 	bl	80007e4 <__aeabi_ddiv>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	ec43 2b17 	vmov	d7, r2, r3
 800221a:	eeb0 0a47 	vmov.f32	s0, s14
 800221e:	eef0 0a67 	vmov.f32	s1, s15
 8002222:	f006 fdfb 	bl	8008e1c <sqrt>
 8002226:	ec53 2b10 	vmov	r2, r3, d0
 800222a:	4610      	mov	r0, r2
 800222c:	4619      	mov	r1, r3
 800222e:	f7fe fc7f 	bl	8000b30 <__aeabi_d2f>
 8002232:	4603      	mov	r3, r0
 8002234:	4a49      	ldr	r2, [pc, #292]	; (800235c <checkStartMoving+0x438>)
 8002236:	6013      	str	r3, [r2, #0]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 8002238:	4b49      	ldr	r3, [pc, #292]	; (8002360 <checkStartMoving+0x43c>)
 800223a:	ed93 7a00 	vldr	s14, [r3]
 800223e:	4b47      	ldr	r3, [pc, #284]	; (800235c <checkStartMoving+0x438>)
 8002240:	edd3 7a00 	vldr	s15, [r3]
 8002244:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002248:	4b46      	ldr	r3, [pc, #280]	; (8002364 <checkStartMoving+0x440>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	ee07 3a90 	vmov	s15, r3
 8002250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002258:	ee17 0a90 	vmov	r0, s15
 800225c:	f7fe f940 	bl	80004e0 <__aeabi_f2d>
 8002260:	4604      	mov	r4, r0
 8002262:	460d      	mov	r5, r1
 8002264:	4b3c      	ldr	r3, [pc, #240]	; (8002358 <checkStartMoving+0x434>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe f939 	bl	80004e0 <__aeabi_f2d>
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	4b3d      	ldr	r3, [pc, #244]	; (8002368 <checkStartMoving+0x444>)
 8002274:	f7fe f98c 	bl	8000590 <__aeabi_dmul>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4690      	mov	r8, r2
 800227e:	4699      	mov	r9, r3
 8002280:	4b36      	ldr	r3, [pc, #216]	; (800235c <checkStartMoving+0x438>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f92b 	bl	80004e0 <__aeabi_f2d>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4640      	mov	r0, r8
 8002290:	4649      	mov	r1, r9
 8002292:	f7fe f97d 	bl	8000590 <__aeabi_dmul>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4690      	mov	r8, r2
 800229c:	4699      	mov	r9, r3
 800229e:	4b2f      	ldr	r3, [pc, #188]	; (800235c <checkStartMoving+0x438>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe f91c 	bl	80004e0 <__aeabi_f2d>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4640      	mov	r0, r8
 80022ae:	4649      	mov	r1, r9
 80022b0:	f7fe f96e 	bl	8000590 <__aeabi_dmul>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4690      	mov	r8, r2
 80022ba:	4699      	mov	r9, r3
 80022bc:	4b29      	ldr	r3, [pc, #164]	; (8002364 <checkStartMoving+0x440>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe f8fb 	bl	80004bc <__aeabi_i2d>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4640      	mov	r0, r8
 80022cc:	4649      	mov	r1, r9
 80022ce:	f7fe f95f 	bl	8000590 <__aeabi_dmul>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4620      	mov	r0, r4
 80022d8:	4629      	mov	r1, r5
 80022da:	f7fd ffa3 	bl	8000224 <__adddf3>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4610      	mov	r0, r2
 80022e4:	4619      	mov	r1, r3
 80022e6:	f7fe fc23 	bl	8000b30 <__aeabi_d2f>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4a1f      	ldr	r2, [pc, #124]	; (800236c <checkStartMoving+0x448>)
 80022ee:	6013      	str	r3, [r2, #0]
			q_d_acc = q_d_i + q_2d_max*t_acc*dir;
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <checkStartMoving+0x434>)
 80022f2:	ed93 7a00 	vldr	s14, [r3]
 80022f6:	4b19      	ldr	r3, [pc, #100]	; (800235c <checkStartMoving+0x438>)
 80022f8:	edd3 7a00 	vldr	s15, [r3]
 80022fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002300:	4b18      	ldr	r3, [pc, #96]	; (8002364 <checkStartMoving+0x440>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	ee07 3a90 	vmov	s15, r3
 8002308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800230c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <checkStartMoving+0x43c>)
 8002312:	edd3 7a00 	vldr	s15, [r3]
 8002316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <checkStartMoving+0x44c>)
 800231c:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc;
 8002320:	4b0e      	ldr	r3, [pc, #56]	; (800235c <checkStartMoving+0x438>)
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <checkStartMoving+0x450>)
 800232c:	edc3 7a00 	vstr	s15, [r3]
		}
		T_start = micros();
 8002330:	f7ff fcb8 	bl	8001ca4 <micros>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	490f      	ldr	r1, [pc, #60]	; (8002378 <checkStartMoving+0x454>)
 800233a:	e9c1 2300 	strd	r2, r3, [r1]
		q_f_old = q_f;
 800233e:	4b0f      	ldr	r3, [pc, #60]	; (800237c <checkStartMoving+0x458>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a0f      	ldr	r2, [pc, #60]	; (8002380 <checkStartMoving+0x45c>)
 8002344:	6013      	str	r3, [r2, #0]
	}
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002350:	20000010 	.word	0x20000010
 8002354:	2000038c 	.word	0x2000038c
 8002358:	2000000c 	.word	0x2000000c
 800235c:	200003a0 	.word	0x200003a0
 8002360:	20000380 	.word	0x20000380
 8002364:	20000014 	.word	0x20000014
 8002368:	3fe00000 	.word	0x3fe00000
 800236c:	200003a4 	.word	0x200003a4
 8002370:	200003b0 	.word	0x200003b0
 8002374:	200003c4 	.word	0x200003c4
 8002378:	200003b8 	.word	0x200003b8
 800237c:	20000384 	.word	0x20000384
 8002380:	2000039c 	.word	0x2000039c

08002384 <createTrajectory>:

void createTrajectory(){
 8002384:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002388:	af00      	add	r7, sp, #0
	if(calmode == 1){
 800238a:	4b84      	ldr	r3, [pc, #528]	; (800259c <createTrajectory+0x218>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b01      	cmp	r3, #1
 8002390:	f040 822c 	bne.w	80027ec <createTrajectory+0x468>
		t = (float)(micros()-T_start)/1000000; //sec
 8002394:	f7ff fc86 	bl	8001ca4 <micros>
 8002398:	4b81      	ldr	r3, [pc, #516]	; (80025a0 <createTrajectory+0x21c>)
 800239a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239e:	ebb0 0802 	subs.w	r8, r0, r2
 80023a2:	eb61 0903 	sbc.w	r9, r1, r3
 80023a6:	4640      	mov	r0, r8
 80023a8:	4649      	mov	r1, r9
 80023aa:	f7fe fcd9 	bl	8000d60 <__aeabi_ul2f>
 80023ae:	ee06 0a90 	vmov	s13, r0
 80023b2:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80025a4 <createTrajectory+0x220>
 80023b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ba:	4b7b      	ldr	r3, [pc, #492]	; (80025a8 <createTrajectory+0x224>)
 80023bc:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 80023c0:	4b79      	ldr	r3, [pc, #484]	; (80025a8 <createTrajectory+0x224>)
 80023c2:	edd3 7a00 	vldr	s15, [r3]
 80023c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ce:	f2c0 8094 	blt.w	80024fa <createTrajectory+0x176>
 80023d2:	4b75      	ldr	r3, [pc, #468]	; (80025a8 <createTrajectory+0x224>)
 80023d4:	ed93 7a00 	vldr	s14, [r3]
 80023d8:	4b74      	ldr	r3, [pc, #464]	; (80025ac <createTrajectory+0x228>)
 80023da:	edd3 7a00 	vldr	s15, [r3]
 80023de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e6:	f140 8088 	bpl.w	80024fa <createTrajectory+0x176>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 80023ea:	4b71      	ldr	r3, [pc, #452]	; (80025b0 <createTrajectory+0x22c>)
 80023ec:	ed93 7a00 	vldr	s14, [r3]
 80023f0:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <createTrajectory+0x224>)
 80023f2:	edd3 7a00 	vldr	s15, [r3]
 80023f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023fa:	4b6e      	ldr	r3, [pc, #440]	; (80025b4 <createTrajectory+0x230>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	ee07 3a90 	vmov	s15, r3
 8002402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002406:	ee27 7a27 	vmul.f32	s14, s14, s15
 800240a:	4b6b      	ldr	r3, [pc, #428]	; (80025b8 <createTrajectory+0x234>)
 800240c:	edd3 7a00 	vldr	s15, [r3]
 8002410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002414:	ee17 0a90 	vmov	r0, s15
 8002418:	f7fe f862 	bl	80004e0 <__aeabi_f2d>
 800241c:	4604      	mov	r4, r0
 800241e:	460d      	mov	r5, r1
 8002420:	4b66      	ldr	r3, [pc, #408]	; (80025bc <createTrajectory+0x238>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe f85b 	bl	80004e0 <__aeabi_f2d>
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	4b64      	ldr	r3, [pc, #400]	; (80025c0 <createTrajectory+0x23c>)
 8002430:	f7fe f8ae 	bl	8000590 <__aeabi_dmul>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4690      	mov	r8, r2
 800243a:	4699      	mov	r9, r3
 800243c:	4b5a      	ldr	r3, [pc, #360]	; (80025a8 <createTrajectory+0x224>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe f84d 	bl	80004e0 <__aeabi_f2d>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4640      	mov	r0, r8
 800244c:	4649      	mov	r1, r9
 800244e:	f7fe f89f 	bl	8000590 <__aeabi_dmul>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4690      	mov	r8, r2
 8002458:	4699      	mov	r9, r3
 800245a:	4b53      	ldr	r3, [pc, #332]	; (80025a8 <createTrajectory+0x224>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe f83e 	bl	80004e0 <__aeabi_f2d>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4640      	mov	r0, r8
 800246a:	4649      	mov	r1, r9
 800246c:	f7fe f890 	bl	8000590 <__aeabi_dmul>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4690      	mov	r8, r2
 8002476:	4699      	mov	r9, r3
 8002478:	4b4e      	ldr	r3, [pc, #312]	; (80025b4 <createTrajectory+0x230>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe f81d 	bl	80004bc <__aeabi_i2d>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4640      	mov	r0, r8
 8002488:	4649      	mov	r1, r9
 800248a:	f7fe f881 	bl	8000590 <__aeabi_dmul>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4620      	mov	r0, r4
 8002494:	4629      	mov	r1, r5
 8002496:	f7fd fec5 	bl	8000224 <__adddf3>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	f7fe fb45 	bl	8000b30 <__aeabi_d2f>
 80024a6:	4603      	mov	r3, r0
 80024a8:	4a46      	ldr	r2, [pc, #280]	; (80025c4 <createTrajectory+0x240>)
 80024aa:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 80024ac:	4b43      	ldr	r3, [pc, #268]	; (80025bc <createTrajectory+0x238>)
 80024ae:	ed93 7a00 	vldr	s14, [r3]
 80024b2:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <createTrajectory+0x224>)
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024bc:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <createTrajectory+0x230>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	ee07 3a90 	vmov	s15, r3
 80024c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024cc:	4b38      	ldr	r3, [pc, #224]	; (80025b0 <createTrajectory+0x22c>)
 80024ce:	edd3 7a00 	vldr	s15, [r3]
 80024d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d6:	4b3c      	ldr	r3, [pc, #240]	; (80025c8 <createTrajectory+0x244>)
 80024d8:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 80024dc:	4b35      	ldr	r3, [pc, #212]	; (80025b4 <createTrajectory+0x230>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	ee07 3a90 	vmov	s15, r3
 80024e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e8:	4b34      	ldr	r3, [pc, #208]	; (80025bc <createTrajectory+0x238>)
 80024ea:	edd3 7a00 	vldr	s15, [r3]
 80024ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f2:	4b36      	ldr	r3, [pc, #216]	; (80025cc <createTrajectory+0x248>)
 80024f4:	edc3 7a00 	vstr	s15, [r3]
 80024f8:	e2fd      	b.n	8002af6 <createTrajectory+0x772>
		}
		else if((t_acc <= t) && (t < t_acc+t_const)){ //Constant Velocity Segment
 80024fa:	4b2c      	ldr	r3, [pc, #176]	; (80025ac <createTrajectory+0x228>)
 80024fc:	ed93 7a00 	vldr	s14, [r3]
 8002500:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <createTrajectory+0x224>)
 8002502:	edd3 7a00 	vldr	s15, [r3]
 8002506:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800250a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250e:	d865      	bhi.n	80025dc <createTrajectory+0x258>
 8002510:	4b26      	ldr	r3, [pc, #152]	; (80025ac <createTrajectory+0x228>)
 8002512:	ed93 7a00 	vldr	s14, [r3]
 8002516:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <createTrajectory+0x24c>)
 8002518:	edd3 7a00 	vldr	s15, [r3]
 800251c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002520:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <createTrajectory+0x224>)
 8002522:	edd3 7a00 	vldr	s15, [r3]
 8002526:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800252a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252e:	dd55      	ble.n	80025dc <createTrajectory+0x258>
			ref_p = q_i + q_acc + q_d_max*(t-t_acc)*dir;
 8002530:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <createTrajectory+0x234>)
 8002532:	ed93 7a00 	vldr	s14, [r3]
 8002536:	4b27      	ldr	r3, [pc, #156]	; (80025d4 <createTrajectory+0x250>)
 8002538:	edd3 7a00 	vldr	s15, [r3]
 800253c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <createTrajectory+0x224>)
 8002542:	edd3 6a00 	vldr	s13, [r3]
 8002546:	4b19      	ldr	r3, [pc, #100]	; (80025ac <createTrajectory+0x228>)
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002550:	4b21      	ldr	r3, [pc, #132]	; (80025d8 <createTrajectory+0x254>)
 8002552:	edd3 7a00 	vldr	s15, [r3]
 8002556:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800255a:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <createTrajectory+0x230>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	ee07 3a90 	vmov	s15, r3
 8002562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002566:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800256a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <createTrajectory+0x240>)
 8002570:	edc3 7a00 	vstr	s15, [r3]
			ref_v = q_d_max*dir;
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <createTrajectory+0x230>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	ee07 3a90 	vmov	s15, r3
 800257c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <createTrajectory+0x254>)
 8002582:	edd3 7a00 	vldr	s15, [r3]
 8002586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <createTrajectory+0x244>)
 800258c:	edc3 7a00 	vstr	s15, [r3]
			ref_a = 0;
 8002590:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <createTrajectory+0x248>)
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	e2ad      	b.n	8002af6 <createTrajectory+0x772>
 800259a:	bf00      	nop
 800259c:	20000010 	.word	0x20000010
 80025a0:	200003b8 	.word	0x200003b8
 80025a4:	49742400 	.word	0x49742400
 80025a8:	200003c0 	.word	0x200003c0
 80025ac:	200003a0 	.word	0x200003a0
 80025b0:	20000380 	.word	0x20000380
 80025b4:	20000014 	.word	0x20000014
 80025b8:	20000388 	.word	0x20000388
 80025bc:	2000000c 	.word	0x2000000c
 80025c0:	3fe00000 	.word	0x3fe00000
 80025c4:	20000390 	.word	0x20000390
 80025c8:	20000394 	.word	0x20000394
 80025cc:	20000398 	.word	0x20000398
 80025d0:	200003a8 	.word	0x200003a8
 80025d4:	200003a4 	.word	0x200003a4
 80025d8:	20000008 	.word	0x20000008
		}
		else if((t_acc+t_const <= t) && (t < 2*t_acc+t_const)){ //Deceleration Segment
 80025dc:	4b76      	ldr	r3, [pc, #472]	; (80027b8 <createTrajectory+0x434>)
 80025de:	ed93 7a00 	vldr	s14, [r3]
 80025e2:	4b76      	ldr	r3, [pc, #472]	; (80027bc <createTrajectory+0x438>)
 80025e4:	edd3 7a00 	vldr	s15, [r3]
 80025e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ec:	4b74      	ldr	r3, [pc, #464]	; (80027c0 <createTrajectory+0x43c>)
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fa:	f200 80d8 	bhi.w	80027ae <createTrajectory+0x42a>
 80025fe:	4b6e      	ldr	r3, [pc, #440]	; (80027b8 <createTrajectory+0x434>)
 8002600:	edd3 7a00 	vldr	s15, [r3]
 8002604:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002608:	4b6c      	ldr	r3, [pc, #432]	; (80027bc <createTrajectory+0x438>)
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002612:	4b6b      	ldr	r3, [pc, #428]	; (80027c0 <createTrajectory+0x43c>)
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800261c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002620:	f340 80c5 	ble.w	80027ae <createTrajectory+0x42a>
			ref_p = q_i + q_const + q_d_max*(t-t_acc-t_const)*dir-0.5*q_2d_max*(t-t_acc-t_const)*(t-t_acc-t_const)*dir;
 8002624:	4b67      	ldr	r3, [pc, #412]	; (80027c4 <createTrajectory+0x440>)
 8002626:	ed93 7a00 	vldr	s14, [r3]
 800262a:	4b67      	ldr	r3, [pc, #412]	; (80027c8 <createTrajectory+0x444>)
 800262c:	edd3 7a00 	vldr	s15, [r3]
 8002630:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002634:	4b62      	ldr	r3, [pc, #392]	; (80027c0 <createTrajectory+0x43c>)
 8002636:	edd3 6a00 	vldr	s13, [r3]
 800263a:	4b5f      	ldr	r3, [pc, #380]	; (80027b8 <createTrajectory+0x434>)
 800263c:	edd3 7a00 	vldr	s15, [r3]
 8002640:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002644:	4b5d      	ldr	r3, [pc, #372]	; (80027bc <createTrajectory+0x438>)
 8002646:	edd3 7a00 	vldr	s15, [r3]
 800264a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800264e:	4b5f      	ldr	r3, [pc, #380]	; (80027cc <createTrajectory+0x448>)
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002658:	4b5d      	ldr	r3, [pc, #372]	; (80027d0 <createTrajectory+0x44c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	ee07 3a90 	vmov	s15, r3
 8002660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266c:	ee17 0a90 	vmov	r0, s15
 8002670:	f7fd ff36 	bl	80004e0 <__aeabi_f2d>
 8002674:	4604      	mov	r4, r0
 8002676:	460d      	mov	r5, r1
 8002678:	4b56      	ldr	r3, [pc, #344]	; (80027d4 <createTrajectory+0x450>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd ff2f 	bl	80004e0 <__aeabi_f2d>
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	4b54      	ldr	r3, [pc, #336]	; (80027d8 <createTrajectory+0x454>)
 8002688:	f7fd ff82 	bl	8000590 <__aeabi_dmul>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4690      	mov	r8, r2
 8002692:	4699      	mov	r9, r3
 8002694:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <createTrajectory+0x43c>)
 8002696:	ed93 7a00 	vldr	s14, [r3]
 800269a:	4b47      	ldr	r3, [pc, #284]	; (80027b8 <createTrajectory+0x434>)
 800269c:	edd3 7a00 	vldr	s15, [r3]
 80026a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026a4:	4b45      	ldr	r3, [pc, #276]	; (80027bc <createTrajectory+0x438>)
 80026a6:	edd3 7a00 	vldr	s15, [r3]
 80026aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ae:	ee17 0a90 	vmov	r0, s15
 80026b2:	f7fd ff15 	bl	80004e0 <__aeabi_f2d>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4640      	mov	r0, r8
 80026bc:	4649      	mov	r1, r9
 80026be:	f7fd ff67 	bl	8000590 <__aeabi_dmul>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4690      	mov	r8, r2
 80026c8:	4699      	mov	r9, r3
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <createTrajectory+0x43c>)
 80026cc:	ed93 7a00 	vldr	s14, [r3]
 80026d0:	4b39      	ldr	r3, [pc, #228]	; (80027b8 <createTrajectory+0x434>)
 80026d2:	edd3 7a00 	vldr	s15, [r3]
 80026d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026da:	4b38      	ldr	r3, [pc, #224]	; (80027bc <createTrajectory+0x438>)
 80026dc:	edd3 7a00 	vldr	s15, [r3]
 80026e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e4:	ee17 0a90 	vmov	r0, s15
 80026e8:	f7fd fefa 	bl	80004e0 <__aeabi_f2d>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4640      	mov	r0, r8
 80026f2:	4649      	mov	r1, r9
 80026f4:	f7fd ff4c 	bl	8000590 <__aeabi_dmul>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4690      	mov	r8, r2
 80026fe:	4699      	mov	r9, r3
 8002700:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <createTrajectory+0x44c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd fed9 	bl	80004bc <__aeabi_i2d>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4640      	mov	r0, r8
 8002710:	4649      	mov	r1, r9
 8002712:	f7fd ff3d 	bl	8000590 <__aeabi_dmul>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4620      	mov	r0, r4
 800271c:	4629      	mov	r1, r5
 800271e:	f7fd fd7f 	bl	8000220 <__aeabi_dsub>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	f7fe fa01 	bl	8000b30 <__aeabi_d2f>
 800272e:	4603      	mov	r3, r0
 8002730:	4a2a      	ldr	r2, [pc, #168]	; (80027dc <createTrajectory+0x458>)
 8002732:	6013      	str	r3, [r2, #0]
			ref_v = -q_2d_max*(t-t_acc-t_const)*dir + q_d_max*dir;
 8002734:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <createTrajectory+0x450>)
 8002736:	edd3 7a00 	vldr	s15, [r3]
 800273a:	eeb1 7a67 	vneg.f32	s14, s15
 800273e:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <createTrajectory+0x43c>)
 8002740:	edd3 6a00 	vldr	s13, [r3]
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <createTrajectory+0x434>)
 8002746:	edd3 7a00 	vldr	s15, [r3]
 800274a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800274e:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <createTrajectory+0x438>)
 8002750:	edd3 7a00 	vldr	s15, [r3]
 8002754:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800275c:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <createTrajectory+0x44c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	ee07 3a90 	vmov	s15, r3
 8002764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002768:	ee27 7a27 	vmul.f32	s14, s14, s15
 800276c:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <createTrajectory+0x44c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	ee07 3a90 	vmov	s15, r3
 8002774:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002778:	4b14      	ldr	r3, [pc, #80]	; (80027cc <createTrajectory+0x448>)
 800277a:	edd3 7a00 	vldr	s15, [r3]
 800277e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002786:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <createTrajectory+0x45c>)
 8002788:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <createTrajectory+0x450>)
 800278e:	edd3 7a00 	vldr	s15, [r3]
 8002792:	eeb1 7a67 	vneg.f32	s14, s15
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <createTrajectory+0x44c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	ee07 3a90 	vmov	s15, r3
 800279e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a6:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <createTrajectory+0x460>)
 80027a8:	edc3 7a00 	vstr	s15, [r3]
 80027ac:	e1a3      	b.n	8002af6 <createTrajectory+0x772>
		}
		else{
			calmode = 3;
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <createTrajectory+0x464>)
 80027b0:	2203      	movs	r2, #3
 80027b2:	701a      	strb	r2, [r3, #0]
	else if(calmode == 3){ //stop
		ref_p = q_f;
		ref_v = 0;
		ref_a = 0;
	}
}
 80027b4:	e19f      	b.n	8002af6 <createTrajectory+0x772>
 80027b6:	bf00      	nop
 80027b8:	200003a0 	.word	0x200003a0
 80027bc:	200003a8 	.word	0x200003a8
 80027c0:	200003c0 	.word	0x200003c0
 80027c4:	20000388 	.word	0x20000388
 80027c8:	200003ac 	.word	0x200003ac
 80027cc:	20000008 	.word	0x20000008
 80027d0:	20000014 	.word	0x20000014
 80027d4:	2000000c 	.word	0x2000000c
 80027d8:	3fe00000 	.word	0x3fe00000
 80027dc:	20000390 	.word	0x20000390
 80027e0:	20000394 	.word	0x20000394
 80027e4:	20000398 	.word	0x20000398
 80027e8:	20000010 	.word	0x20000010
	else if(calmode == 2){
 80027ec:	4bc3      	ldr	r3, [pc, #780]	; (8002afc <createTrajectory+0x778>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	f040 816f 	bne.w	8002ad4 <createTrajectory+0x750>
		t = (float)(micros()-T_start)/1000000; //sec
 80027f6:	f7ff fa55 	bl	8001ca4 <micros>
 80027fa:	4bc1      	ldr	r3, [pc, #772]	; (8002b00 <createTrajectory+0x77c>)
 80027fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002800:	1a84      	subs	r4, r0, r2
 8002802:	eb61 0503 	sbc.w	r5, r1, r3
 8002806:	4620      	mov	r0, r4
 8002808:	4629      	mov	r1, r5
 800280a:	f7fe faa9 	bl	8000d60 <__aeabi_ul2f>
 800280e:	ee06 0a90 	vmov	s13, r0
 8002812:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8002b04 <createTrajectory+0x780>
 8002816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800281a:	4bbb      	ldr	r3, [pc, #748]	; (8002b08 <createTrajectory+0x784>)
 800281c:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 8002820:	4bb9      	ldr	r3, [pc, #740]	; (8002b08 <createTrajectory+0x784>)
 8002822:	edd3 7a00 	vldr	s15, [r3]
 8002826:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800282a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282e:	f2c0 8094 	blt.w	800295a <createTrajectory+0x5d6>
 8002832:	4bb5      	ldr	r3, [pc, #724]	; (8002b08 <createTrajectory+0x784>)
 8002834:	ed93 7a00 	vldr	s14, [r3]
 8002838:	4bb4      	ldr	r3, [pc, #720]	; (8002b0c <createTrajectory+0x788>)
 800283a:	edd3 7a00 	vldr	s15, [r3]
 800283e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002846:	f140 8088 	bpl.w	800295a <createTrajectory+0x5d6>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 800284a:	4bb1      	ldr	r3, [pc, #708]	; (8002b10 <createTrajectory+0x78c>)
 800284c:	ed93 7a00 	vldr	s14, [r3]
 8002850:	4bad      	ldr	r3, [pc, #692]	; (8002b08 <createTrajectory+0x784>)
 8002852:	edd3 7a00 	vldr	s15, [r3]
 8002856:	ee27 7a27 	vmul.f32	s14, s14, s15
 800285a:	4bae      	ldr	r3, [pc, #696]	; (8002b14 <createTrajectory+0x790>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002866:	ee27 7a27 	vmul.f32	s14, s14, s15
 800286a:	4bab      	ldr	r3, [pc, #684]	; (8002b18 <createTrajectory+0x794>)
 800286c:	edd3 7a00 	vldr	s15, [r3]
 8002870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002874:	ee17 0a90 	vmov	r0, s15
 8002878:	f7fd fe32 	bl	80004e0 <__aeabi_f2d>
 800287c:	4604      	mov	r4, r0
 800287e:	460d      	mov	r5, r1
 8002880:	4ba6      	ldr	r3, [pc, #664]	; (8002b1c <createTrajectory+0x798>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7fd fe2b 	bl	80004e0 <__aeabi_f2d>
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	4ba4      	ldr	r3, [pc, #656]	; (8002b20 <createTrajectory+0x79c>)
 8002890:	f7fd fe7e 	bl	8000590 <__aeabi_dmul>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4690      	mov	r8, r2
 800289a:	4699      	mov	r9, r3
 800289c:	4b9a      	ldr	r3, [pc, #616]	; (8002b08 <createTrajectory+0x784>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fd fe1d 	bl	80004e0 <__aeabi_f2d>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4640      	mov	r0, r8
 80028ac:	4649      	mov	r1, r9
 80028ae:	f7fd fe6f 	bl	8000590 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4690      	mov	r8, r2
 80028b8:	4699      	mov	r9, r3
 80028ba:	4b93      	ldr	r3, [pc, #588]	; (8002b08 <createTrajectory+0x784>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fd fe0e 	bl	80004e0 <__aeabi_f2d>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4640      	mov	r0, r8
 80028ca:	4649      	mov	r1, r9
 80028cc:	f7fd fe60 	bl	8000590 <__aeabi_dmul>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4690      	mov	r8, r2
 80028d6:	4699      	mov	r9, r3
 80028d8:	4b8e      	ldr	r3, [pc, #568]	; (8002b14 <createTrajectory+0x790>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fd fded 	bl	80004bc <__aeabi_i2d>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4640      	mov	r0, r8
 80028e8:	4649      	mov	r1, r9
 80028ea:	f7fd fe51 	bl	8000590 <__aeabi_dmul>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4620      	mov	r0, r4
 80028f4:	4629      	mov	r1, r5
 80028f6:	f7fd fc95 	bl	8000224 <__adddf3>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	4610      	mov	r0, r2
 8002900:	4619      	mov	r1, r3
 8002902:	f7fe f915 	bl	8000b30 <__aeabi_d2f>
 8002906:	4603      	mov	r3, r0
 8002908:	4a86      	ldr	r2, [pc, #536]	; (8002b24 <createTrajectory+0x7a0>)
 800290a:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 800290c:	4b83      	ldr	r3, [pc, #524]	; (8002b1c <createTrajectory+0x798>)
 800290e:	ed93 7a00 	vldr	s14, [r3]
 8002912:	4b7d      	ldr	r3, [pc, #500]	; (8002b08 <createTrajectory+0x784>)
 8002914:	edd3 7a00 	vldr	s15, [r3]
 8002918:	ee27 7a27 	vmul.f32	s14, s14, s15
 800291c:	4b7d      	ldr	r3, [pc, #500]	; (8002b14 <createTrajectory+0x790>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	ee07 3a90 	vmov	s15, r3
 8002924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002928:	ee27 7a27 	vmul.f32	s14, s14, s15
 800292c:	4b78      	ldr	r3, [pc, #480]	; (8002b10 <createTrajectory+0x78c>)
 800292e:	edd3 7a00 	vldr	s15, [r3]
 8002932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002936:	4b7c      	ldr	r3, [pc, #496]	; (8002b28 <createTrajectory+0x7a4>)
 8002938:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 800293c:	4b75      	ldr	r3, [pc, #468]	; (8002b14 <createTrajectory+0x790>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	ee07 3a90 	vmov	s15, r3
 8002944:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002948:	4b74      	ldr	r3, [pc, #464]	; (8002b1c <createTrajectory+0x798>)
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002952:	4b76      	ldr	r3, [pc, #472]	; (8002b2c <createTrajectory+0x7a8>)
 8002954:	edc3 7a00 	vstr	s15, [r3]
 8002958:	e0cd      	b.n	8002af6 <createTrajectory+0x772>
		else if((t_acc <= t) && (t < t_acc*2)){
 800295a:	4b6c      	ldr	r3, [pc, #432]	; (8002b0c <createTrajectory+0x788>)
 800295c:	ed93 7a00 	vldr	s14, [r3]
 8002960:	4b69      	ldr	r3, [pc, #420]	; (8002b08 <createTrajectory+0x784>)
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296e:	f200 80ad 	bhi.w	8002acc <createTrajectory+0x748>
 8002972:	4b66      	ldr	r3, [pc, #408]	; (8002b0c <createTrajectory+0x788>)
 8002974:	edd3 7a00 	vldr	s15, [r3]
 8002978:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800297c:	4b62      	ldr	r3, [pc, #392]	; (8002b08 <createTrajectory+0x784>)
 800297e:	edd3 7a00 	vldr	s15, [r3]
 8002982:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298a:	f340 809f 	ble.w	8002acc <createTrajectory+0x748>
			ref_p = q_i + q_acc + q_d_acc*(t-t_acc) - 0.5*q_2d_max*(t-t_acc)*(t-t_acc)*dir;
 800298e:	4b62      	ldr	r3, [pc, #392]	; (8002b18 <createTrajectory+0x794>)
 8002990:	ed93 7a00 	vldr	s14, [r3]
 8002994:	4b66      	ldr	r3, [pc, #408]	; (8002b30 <createTrajectory+0x7ac>)
 8002996:	edd3 7a00 	vldr	s15, [r3]
 800299a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800299e:	4b5a      	ldr	r3, [pc, #360]	; (8002b08 <createTrajectory+0x784>)
 80029a0:	edd3 6a00 	vldr	s13, [r3]
 80029a4:	4b59      	ldr	r3, [pc, #356]	; (8002b0c <createTrajectory+0x788>)
 80029a6:	edd3 7a00 	vldr	s15, [r3]
 80029aa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029ae:	4b61      	ldr	r3, [pc, #388]	; (8002b34 <createTrajectory+0x7b0>)
 80029b0:	edd3 7a00 	vldr	s15, [r3]
 80029b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029bc:	ee17 0a90 	vmov	r0, s15
 80029c0:	f7fd fd8e 	bl	80004e0 <__aeabi_f2d>
 80029c4:	4604      	mov	r4, r0
 80029c6:	460d      	mov	r5, r1
 80029c8:	4b54      	ldr	r3, [pc, #336]	; (8002b1c <createTrajectory+0x798>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fd87 	bl	80004e0 <__aeabi_f2d>
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	4b52      	ldr	r3, [pc, #328]	; (8002b20 <createTrajectory+0x79c>)
 80029d8:	f7fd fdda 	bl	8000590 <__aeabi_dmul>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4690      	mov	r8, r2
 80029e2:	4699      	mov	r9, r3
 80029e4:	4b48      	ldr	r3, [pc, #288]	; (8002b08 <createTrajectory+0x784>)
 80029e6:	ed93 7a00 	vldr	s14, [r3]
 80029ea:	4b48      	ldr	r3, [pc, #288]	; (8002b0c <createTrajectory+0x788>)
 80029ec:	edd3 7a00 	vldr	s15, [r3]
 80029f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f4:	ee17 0a90 	vmov	r0, s15
 80029f8:	f7fd fd72 	bl	80004e0 <__aeabi_f2d>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4640      	mov	r0, r8
 8002a02:	4649      	mov	r1, r9
 8002a04:	f7fd fdc4 	bl	8000590 <__aeabi_dmul>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4690      	mov	r8, r2
 8002a0e:	4699      	mov	r9, r3
 8002a10:	4b3d      	ldr	r3, [pc, #244]	; (8002b08 <createTrajectory+0x784>)
 8002a12:	ed93 7a00 	vldr	s14, [r3]
 8002a16:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <createTrajectory+0x788>)
 8002a18:	edd3 7a00 	vldr	s15, [r3]
 8002a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a20:	ee17 0a90 	vmov	r0, s15
 8002a24:	f7fd fd5c 	bl	80004e0 <__aeabi_f2d>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4640      	mov	r0, r8
 8002a2e:	4649      	mov	r1, r9
 8002a30:	f7fd fdae 	bl	8000590 <__aeabi_dmul>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4690      	mov	r8, r2
 8002a3a:	4699      	mov	r9, r3
 8002a3c:	4b35      	ldr	r3, [pc, #212]	; (8002b14 <createTrajectory+0x790>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fd fd3b 	bl	80004bc <__aeabi_i2d>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4640      	mov	r0, r8
 8002a4c:	4649      	mov	r1, r9
 8002a4e:	f7fd fd9f 	bl	8000590 <__aeabi_dmul>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4620      	mov	r0, r4
 8002a58:	4629      	mov	r1, r5
 8002a5a:	f7fd fbe1 	bl	8000220 <__aeabi_dsub>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	f7fe f863 	bl	8000b30 <__aeabi_d2f>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4a2d      	ldr	r2, [pc, #180]	; (8002b24 <createTrajectory+0x7a0>)
 8002a6e:	6013      	str	r3, [r2, #0]
			ref_v = q_d_acc - q_2d_max*(t-t_acc)*dir;
 8002a70:	4b30      	ldr	r3, [pc, #192]	; (8002b34 <createTrajectory+0x7b0>)
 8002a72:	ed93 7a00 	vldr	s14, [r3]
 8002a76:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <createTrajectory+0x784>)
 8002a78:	edd3 6a00 	vldr	s13, [r3]
 8002a7c:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <createTrajectory+0x788>)
 8002a7e:	edd3 7a00 	vldr	s15, [r3]
 8002a82:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a86:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <createTrajectory+0x798>)
 8002a88:	edd3 7a00 	vldr	s15, [r3]
 8002a8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a90:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <createTrajectory+0x790>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	ee07 3a90 	vmov	s15, r3
 8002a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa4:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <createTrajectory+0x7a4>)
 8002aa6:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 8002aaa:	4b1c      	ldr	r3, [pc, #112]	; (8002b1c <createTrajectory+0x798>)
 8002aac:	edd3 7a00 	vldr	s15, [r3]
 8002ab0:	eeb1 7a67 	vneg.f32	s14, s15
 8002ab4:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <createTrajectory+0x790>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	ee07 3a90 	vmov	s15, r3
 8002abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac4:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <createTrajectory+0x7a8>)
 8002ac6:	edc3 7a00 	vstr	s15, [r3]
 8002aca:	e014      	b.n	8002af6 <createTrajectory+0x772>
			calmode = 3;
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <createTrajectory+0x778>)
 8002ace:	2203      	movs	r2, #3
 8002ad0:	701a      	strb	r2, [r3, #0]
}
 8002ad2:	e010      	b.n	8002af6 <createTrajectory+0x772>
	else if(calmode == 3){ //stop
 8002ad4:	4b09      	ldr	r3, [pc, #36]	; (8002afc <createTrajectory+0x778>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d10c      	bne.n	8002af6 <createTrajectory+0x772>
		ref_p = q_f;
 8002adc:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <createTrajectory+0x7b4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <createTrajectory+0x7a0>)
 8002ae2:	6013      	str	r3, [r2, #0]
		ref_v = 0;
 8002ae4:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <createTrajectory+0x7a4>)
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
		ref_a = 0;
 8002aec:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <createTrajectory+0x7a8>)
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
}
 8002af4:	e7ff      	b.n	8002af6 <createTrajectory+0x772>
 8002af6:	bf00      	nop
 8002af8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002afc:	20000010 	.word	0x20000010
 8002b00:	200003b8 	.word	0x200003b8
 8002b04:	49742400 	.word	0x49742400
 8002b08:	200003c0 	.word	0x200003c0
 8002b0c:	200003a0 	.word	0x200003a0
 8002b10:	20000380 	.word	0x20000380
 8002b14:	20000014 	.word	0x20000014
 8002b18:	20000388 	.word	0x20000388
 8002b1c:	2000000c 	.word	0x2000000c
 8002b20:	3fe00000 	.word	0x3fe00000
 8002b24:	20000390 	.word	0x20000390
 8002b28:	20000394 	.word	0x20000394
 8002b2c:	20000398 	.word	0x20000398
 8002b30:	200003a4 	.word	0x200003a4
 8002b34:	200003b0 	.word	0x200003b0
 8002b38:	20000384 	.word	0x20000384
 8002b3c:	00000000 	.word	0x00000000

08002b40 <DriveMotor>:

//--------------------------Drive Motor----------------//

void DriveMotor(){
 8002b40:	b598      	push	{r3, r4, r7, lr}
 8002b42:	af00      	add	r7, sp, #0
	//PWM Motor
	duty_cycle = (fabs(Vin)*100)/24;
 8002b44:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <DriveMotor+0xa0>)
 8002b46:	edd3 7a00 	vldr	s15, [r3]
 8002b4a:	eef0 7ae7 	vabs.f32	s15, s15
 8002b4e:	ee17 0a90 	vmov	r0, s15
 8002b52:	f7fd fcc5 	bl	80004e0 <__aeabi_f2d>
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <DriveMotor+0xa4>)
 8002b5c:	f7fd fd18 	bl	8000590 <__aeabi_dmul>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <DriveMotor+0xa8>)
 8002b6e:	f7fd fe39 	bl	80007e4 <__aeabi_ddiv>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f7fd ffd9 	bl	8000b30 <__aeabi_d2f>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4a1a      	ldr	r2, [pc, #104]	; (8002bec <DriveMotor+0xac>)
 8002b82:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycle*9.99);
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <DriveMotor+0xac>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fca9 	bl	80004e0 <__aeabi_f2d>
 8002b8e:	a312      	add	r3, pc, #72	; (adr r3, 8002bd8 <DriveMotor+0x98>)
 8002b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b94:	f7fd fcfc 	bl	8000590 <__aeabi_dmul>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4914      	ldr	r1, [pc, #80]	; (8002bf0 <DriveMotor+0xb0>)
 8002b9e:	680c      	ldr	r4, [r1, #0]
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	f7fd ffa4 	bl	8000af0 <__aeabi_d2uiz>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	6363      	str	r3, [r4, #52]	; 0x34

	//Control Motor Direction
	if(Vin < 0){
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <DriveMotor+0xa0>)
 8002bae:	edd3 7a00 	vldr	s15, [r3]
 8002bb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bba:	d505      	bpl.n	8002bc8 <DriveMotor+0x88>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	2120      	movs	r1, #32
 8002bc0:	480c      	ldr	r0, [pc, #48]	; (8002bf4 <DriveMotor+0xb4>)
 8002bc2:	f002 fcef 	bl	80055a4 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
	}
}
 8002bc6:	e004      	b.n	8002bd2 <DriveMotor+0x92>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2120      	movs	r1, #32
 8002bcc:	4809      	ldr	r0, [pc, #36]	; (8002bf4 <DriveMotor+0xb4>)
 8002bce:	f002 fce9 	bl	80055a4 <HAL_GPIO_WritePin>
}
 8002bd2:	bf00      	nop
 8002bd4:	bd98      	pop	{r3, r4, r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	47ae147b 	.word	0x47ae147b
 8002bdc:	4023fae1 	.word	0x4023fae1
 8002be0:	2000037c 	.word	0x2000037c
 8002be4:	40590000 	.word	0x40590000
 8002be8:	40380000 	.word	0x40380000
 8002bec:	20000004 	.word	0x20000004
 8002bf0:	20000250 	.word	0x20000250
 8002bf4:	48000800 	.word	0x48000800

08002bf8 <SoftwareLimit>:

void SoftwareLimit(){
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
	if(S_top == 1 && Vin >= -2){
 8002bfc:	4b26      	ldr	r3, [pc, #152]	; (8002c98 <SoftwareLimit+0xa0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d10e      	bne.n	8002c22 <SoftwareLimit+0x2a>
 8002c04:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <SoftwareLimit+0xa4>)
 8002c06:	edd3 7a00 	vldr	s15, [r3]
 8002c0a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002c0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c16:	db04      	blt.n	8002c22 <SoftwareLimit+0x2a>
		Vin = 0;
 8002c18:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <SoftwareLimit+0xa4>)
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	e010      	b.n	8002c44 <SoftwareLimit+0x4c>
	}
	else if(S_top == 1 && Vin < -2){
 8002c22:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <SoftwareLimit+0xa0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d10c      	bne.n	8002c44 <SoftwareLimit+0x4c>
 8002c2a:	4b1c      	ldr	r3, [pc, #112]	; (8002c9c <SoftwareLimit+0xa4>)
 8002c2c:	edd3 7a00 	vldr	s15, [r3]
 8002c30:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3c:	d502      	bpl.n	8002c44 <SoftwareLimit+0x4c>
		S_top = 0;
 8002c3e:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <SoftwareLimit+0xa0>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
	}

	if(S_down == 1 && Vin <= 2){
 8002c44:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <SoftwareLimit+0xa8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d10e      	bne.n	8002c6a <SoftwareLimit+0x72>
 8002c4c:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <SoftwareLimit+0xa4>)
 8002c4e:	edd3 7a00 	vldr	s15, [r3]
 8002c52:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5e:	d804      	bhi.n	8002c6a <SoftwareLimit+0x72>
		Vin = 0;
 8002c60:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <SoftwareLimit+0xa4>)
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
	}
	else if(S_down == 1 && Vin > 2){
		S_down = 0;
	}

}
 8002c68:	e011      	b.n	8002c8e <SoftwareLimit+0x96>
	else if(S_down == 1 && Vin > 2){
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <SoftwareLimit+0xa8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d10d      	bne.n	8002c8e <SoftwareLimit+0x96>
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <SoftwareLimit+0xa4>)
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c84:	dc00      	bgt.n	8002c88 <SoftwareLimit+0x90>
}
 8002c86:	e002      	b.n	8002c8e <SoftwareLimit+0x96>
		S_down = 0;
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <SoftwareLimit+0xa8>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	20000420 	.word	0x20000420
 8002c9c:	2000037c 	.word	0x2000037c
 8002ca0:	20000424 	.word	0x20000424

08002ca4 <JoystickInput>:


//-----------------------Joy--------------------------//

void JoystickInput(){
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
	//Control by joy
	Vin = (float)(ADCBuffer[1]-1850)*24/2048; //0->24V
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <JoystickInput+0x34>)
 8002caa:	885b      	ldrh	r3, [r3, #2]
 8002cac:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 8002cb0:	ee07 3a90 	vmov	s15, r3
 8002cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cb8:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8002cbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cc0:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002cdc <JoystickInput+0x38>
 8002cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <JoystickInput+0x3c>)
 8002cca:	edc3 7a00 	vstr	s15, [r3]
}
 8002cce:	bf00      	nop
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	20000370 	.word	0x20000370
 8002cdc:	45000000 	.word	0x45000000
 8002ce0:	2000037c 	.word	0x2000037c

08002ce4 <button_up_down_input>:

void button_up_down_input(){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
	//check button up
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 1){
 8002ce8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cec:	4832      	ldr	r0, [pc, #200]	; (8002db8 <button_up_down_input+0xd4>)
 8002cee:	f002 fc41 	bl	8005574 <HAL_GPIO_ReadPin>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d110      	bne.n	8002d1a <button_up_down_input+0x36>
		set_manual_point = QEIdata.linearPos + 10; //stem 10 mm
 8002cf8:	4b30      	ldr	r3, [pc, #192]	; (8002dbc <button_up_down_input+0xd8>)
 8002cfa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002cfe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d06:	4b2e      	ldr	r3, [pc, #184]	; (8002dc0 <button_up_down_input+0xdc>)
 8002d08:	edc3 7a00 	vstr	s15, [r3]
		check_up = 1;
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <button_up_down_input+0xe0>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]
		B_up = 1;
 8002d12:	4b2d      	ldr	r3, [pc, #180]	; (8002dc8 <button_up_down_input+0xe4>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
 8002d18:	e002      	b.n	8002d20 <button_up_down_input+0x3c>
	}
	else{
		B_up = 0;
 8002d1a:	4b2b      	ldr	r3, [pc, #172]	; (8002dc8 <button_up_down_input+0xe4>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
	}
	if(QEIdata.linearPos < set_manual_point && check_up == 1){
 8002d20:	4b26      	ldr	r3, [pc, #152]	; (8002dbc <button_up_down_input+0xd8>)
 8002d22:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002d26:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <button_up_down_input+0xdc>)
 8002d28:	edd3 7a00 	vldr	s15, [r3]
 8002d2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d34:	d507      	bpl.n	8002d46 <button_up_down_input+0x62>
 8002d36:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <button_up_down_input+0xe0>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d103      	bne.n	8002d46 <button_up_down_input+0x62>
		Vin = 4.5;
 8002d3e:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <button_up_down_input+0xe8>)
 8002d40:	4a23      	ldr	r2, [pc, #140]	; (8002dd0 <button_up_down_input+0xec>)
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	e002      	b.n	8002d4c <button_up_down_input+0x68>
	}
	else{
		check_up = 0;
 8002d46:	4b1f      	ldr	r3, [pc, #124]	; (8002dc4 <button_up_down_input+0xe0>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
	}

	//check button down
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == 1){
 8002d4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d50:	4819      	ldr	r0, [pc, #100]	; (8002db8 <button_up_down_input+0xd4>)
 8002d52:	f002 fc0f 	bl	8005574 <HAL_GPIO_ReadPin>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d110      	bne.n	8002d7e <button_up_down_input+0x9a>
		set_manual_point = QEIdata.linearPos - 10;
 8002d5c:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <button_up_down_input+0xd8>)
 8002d5e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002d62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d6a:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <button_up_down_input+0xdc>)
 8002d6c:	edc3 7a00 	vstr	s15, [r3]
		check_down = 1;
 8002d70:	4b18      	ldr	r3, [pc, #96]	; (8002dd4 <button_up_down_input+0xf0>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	701a      	strb	r2, [r3, #0]
		B_down = 1;
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <button_up_down_input+0xf4>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
 8002d7c:	e002      	b.n	8002d84 <button_up_down_input+0xa0>
	}
	else{
		B_down = 0;
 8002d7e:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <button_up_down_input+0xf4>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	701a      	strb	r2, [r3, #0]
	}
	if(QEIdata.linearPos > set_manual_point && check_down == 1){
 8002d84:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <button_up_down_input+0xd8>)
 8002d86:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <button_up_down_input+0xdc>)
 8002d8c:	edd3 7a00 	vldr	s15, [r3]
 8002d90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d98:	dd07      	ble.n	8002daa <button_up_down_input+0xc6>
 8002d9a:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <button_up_down_input+0xf0>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d103      	bne.n	8002daa <button_up_down_input+0xc6>
		Vin = -3.5;
 8002da2:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <button_up_down_input+0xe8>)
 8002da4:	4a0d      	ldr	r2, [pc, #52]	; (8002ddc <button_up_down_input+0xf8>)
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	e003      	b.n	8002db2 <button_up_down_input+0xce>
	}
	else{
		check_down = 0;
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <button_up_down_input+0xf0>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
	}
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	48000800 	.word	0x48000800
 8002dbc:	20000338 	.word	0x20000338
 8002dc0:	20000374 	.word	0x20000374
 8002dc4:	20000378 	.word	0x20000378
 8002dc8:	200003c8 	.word	0x200003c8
 8002dcc:	2000037c 	.word	0x2000037c
 8002dd0:	40900000 	.word	0x40900000
 8002dd4:	20000379 	.word	0x20000379
 8002dd8:	200003c9 	.word	0x200003c9
 8002ddc:	c0600000 	.word	0xc0600000

08002de0 <button_reset_input>:

void button_reset_input(){
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
	//check button reset
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1){
 8002de4:	2104      	movs	r1, #4
 8002de6:	4821      	ldr	r0, [pc, #132]	; (8002e6c <button_reset_input+0x8c>)
 8002de8:	f002 fbc4 	bl	8005574 <HAL_GPIO_ReadPin>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d136      	bne.n	8002e60 <button_reset_input+0x80>
		B_reset = 1;
 8002df2:	4b1f      	ldr	r3, [pc, #124]	; (8002e70 <button_reset_input+0x90>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 8002df8:	e006      	b.n	8002e08 <button_reset_input+0x28>
			Vin = -3.5;
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <button_reset_input+0x94>)
 8002dfc:	4a1e      	ldr	r2, [pc, #120]	; (8002e78 <button_reset_input+0x98>)
 8002dfe:	601a      	str	r2, [r3, #0]
			//software limit
			SoftwareLimit();
 8002e00:	f7ff fefa 	bl	8002bf8 <SoftwareLimit>
			//Drive Motor which PWM
			DriveMotor();
 8002e04:	f7ff fe9c 	bl	8002b40 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 8002e08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e0c:	481b      	ldr	r0, [pc, #108]	; (8002e7c <button_reset_input+0x9c>)
 8002e0e:	f002 fbb1 	bl	8005574 <HAL_GPIO_ReadPin>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <button_reset_input+0x1a>
		}

		Vin = 2.1;
 8002e18:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <button_reset_input+0x94>)
 8002e1a:	4a19      	ldr	r2, [pc, #100]	; (8002e80 <button_reset_input+0xa0>)
 8002e1c:	601a      	str	r2, [r3, #0]
		SoftwareLimit();
 8002e1e:	f7ff feeb 	bl	8002bf8 <SoftwareLimit>
		DriveMotor();
 8002e22:	f7ff fe8d 	bl	8002b40 <DriveMotor>
		HAL_Delay(500);
 8002e26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e2a:	f000 fb19 	bl	8003460 <HAL_Delay>

		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 8002e2e:	e006      	b.n	8002e3e <button_reset_input+0x5e>
			Vin = -1.1;
 8002e30:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <button_reset_input+0x94>)
 8002e32:	4a14      	ldr	r2, [pc, #80]	; (8002e84 <button_reset_input+0xa4>)
 8002e34:	601a      	str	r2, [r3, #0]
			//software limit
			SoftwareLimit();
 8002e36:	f7ff fedf 	bl	8002bf8 <SoftwareLimit>
			//Drive Motor which PWM
			DriveMotor();
 8002e3a:	f7ff fe81 	bl	8002b40 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 8002e3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e42:	480e      	ldr	r0, [pc, #56]	; (8002e7c <button_reset_input+0x9c>)
 8002e44:	f002 fb96 	bl	8005574 <HAL_GPIO_ReadPin>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <button_reset_input+0x50>
		}
		Vin = 0;
 8002e4e:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <button_reset_input+0x94>)
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim2, 0); //set position to 0
 8002e56:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <button_reset_input+0xa8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	else{
		B_reset = 0;
	}
}
 8002e5e:	e002      	b.n	8002e66 <button_reset_input+0x86>
		B_reset = 0;
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <button_reset_input+0x90>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	48000c00 	.word	0x48000c00
 8002e70:	200003ca 	.word	0x200003ca
 8002e74:	2000037c 	.word	0x2000037c
 8002e78:	c0600000 	.word	0xc0600000
 8002e7c:	48000400 	.word	0x48000400
 8002e80:	40066666 	.word	0x40066666
 8002e84:	bf8ccccd 	.word	0xbf8ccccd
 8002e88:	20000204 	.word	0x20000204

08002e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e90:	b672      	cpsid	i
}
 8002e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e94:	e7fe      	b.n	8002e94 <Error_Handler+0x8>
	...

08002e98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9e:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <HAL_MspInit+0x44>)
 8002ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea2:	4a0e      	ldr	r2, [pc, #56]	; (8002edc <HAL_MspInit+0x44>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	6613      	str	r3, [r2, #96]	; 0x60
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <HAL_MspInit+0x44>)
 8002eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_MspInit+0x44>)
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eba:	4a08      	ldr	r2, [pc, #32]	; (8002edc <HAL_MspInit+0x44>)
 8002ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_MspInit+0x44>)
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002ece:	f002 fc3d 	bl	800574c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000

08002ee0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b0a0      	sub	sp, #128	; 0x80
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ef8:	f107 0318 	add.w	r3, r7, #24
 8002efc:	2254      	movs	r2, #84	; 0x54
 8002efe:	2100      	movs	r1, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f005 ff59 	bl	8008db8 <memset>
  if(hadc->Instance==ADC1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f0e:	d178      	bne.n	8003002 <HAL_ADC_MspInit+0x122>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002f10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f14:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002f16:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f1c:	f107 0318 	add.w	r3, r7, #24
 8002f20:	4618      	mov	r0, r3
 8002f22:	f003 f951 	bl	80061c8 <HAL_RCCEx_PeriphCLKConfig>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002f2c:	f7ff ffae 	bl	8002e8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002f30:	4b36      	ldr	r3, [pc, #216]	; (800300c <HAL_ADC_MspInit+0x12c>)
 8002f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f34:	4a35      	ldr	r2, [pc, #212]	; (800300c <HAL_ADC_MspInit+0x12c>)
 8002f36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f3c:	4b33      	ldr	r3, [pc, #204]	; (800300c <HAL_ADC_MspInit+0x12c>)
 8002f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f48:	4b30      	ldr	r3, [pc, #192]	; (800300c <HAL_ADC_MspInit+0x12c>)
 8002f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4c:	4a2f      	ldr	r2, [pc, #188]	; (800300c <HAL_ADC_MspInit+0x12c>)
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f54:	4b2d      	ldr	r3, [pc, #180]	; (800300c <HAL_ADC_MspInit+0x12c>)
 8002f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f60:	4b2a      	ldr	r3, [pc, #168]	; (800300c <HAL_ADC_MspInit+0x12c>)
 8002f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f64:	4a29      	ldr	r2, [pc, #164]	; (800300c <HAL_ADC_MspInit+0x12c>)
 8002f66:	f043 0302 	orr.w	r3, r3, #2
 8002f6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f6c:	4b27      	ldr	r3, [pc, #156]	; (800300c <HAL_ADC_MspInit+0x12c>)
 8002f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f84:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f8e:	f002 f96f 	bl	8005270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002f92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	481a      	ldr	r0, [pc, #104]	; (8003010 <HAL_ADC_MspInit+0x130>)
 8002fa8:	f002 f962 	bl	8005270 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002fac:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_ADC_MspInit+0x134>)
 8002fae:	4a1a      	ldr	r2, [pc, #104]	; (8003018 <HAL_ADC_MspInit+0x138>)
 8002fb0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002fb2:	4b18      	ldr	r3, [pc, #96]	; (8003014 <HAL_ADC_MspInit+0x134>)
 8002fb4:	2205      	movs	r2, #5
 8002fb6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fb8:	4b16      	ldr	r3, [pc, #88]	; (8003014 <HAL_ADC_MspInit+0x134>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <HAL_ADC_MspInit+0x134>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <HAL_ADC_MspInit+0x134>)
 8002fc6:	2280      	movs	r2, #128	; 0x80
 8002fc8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_ADC_MspInit+0x134>)
 8002fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fd0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <HAL_ADC_MspInit+0x134>)
 8002fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fd8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002fda:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <HAL_ADC_MspInit+0x134>)
 8002fdc:	2220      	movs	r2, #32
 8002fde:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <HAL_ADC_MspInit+0x134>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002fe6:	480b      	ldr	r0, [pc, #44]	; (8003014 <HAL_ADC_MspInit+0x134>)
 8002fe8:	f001 fed0 	bl	8004d8c <HAL_DMA_Init>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 8002ff2:	f7ff ff4b 	bl	8002e8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a06      	ldr	r2, [pc, #24]	; (8003014 <HAL_ADC_MspInit+0x134>)
 8002ffa:	655a      	str	r2, [r3, #84]	; 0x54
 8002ffc:	4a05      	ldr	r2, [pc, #20]	; (8003014 <HAL_ADC_MspInit+0x134>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003002:	bf00      	nop
 8003004:	3780      	adds	r7, #128	; 0x80
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000
 8003010:	48000400 	.word	0x48000400
 8003014:	20000110 	.word	0x20000110
 8003018:	40020008 	.word	0x40020008

0800301c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b09e      	sub	sp, #120	; 0x78
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003024:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003034:	f107 0310 	add.w	r3, r7, #16
 8003038:	2254      	movs	r2, #84	; 0x54
 800303a:	2100      	movs	r1, #0
 800303c:	4618      	mov	r0, r3
 800303e:	f005 febb 	bl	8008db8 <memset>
  if(huart->Instance==LPUART1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <HAL_UART_MspInit+0xa8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d136      	bne.n	80030ba <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800304c:	2320      	movs	r3, #32
 800304e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003050:	2300      	movs	r3, #0
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003054:	f107 0310 	add.w	r3, r7, #16
 8003058:	4618      	mov	r0, r3
 800305a:	f003 f8b5 	bl	80061c8 <HAL_RCCEx_PeriphCLKConfig>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003064:	f7ff ff12 	bl	8002e8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003068:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <HAL_UART_MspInit+0xac>)
 800306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306c:	4a16      	ldr	r2, [pc, #88]	; (80030c8 <HAL_UART_MspInit+0xac>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003074:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <HAL_UART_MspInit+0xac>)
 8003076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003080:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <HAL_UART_MspInit+0xac>)
 8003082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003084:	4a10      	ldr	r2, [pc, #64]	; (80030c8 <HAL_UART_MspInit+0xac>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800308c:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <HAL_UART_MspInit+0xac>)
 800308e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003098:	230c      	movs	r3, #12
 800309a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309c:	2302      	movs	r3, #2
 800309e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a4:	2300      	movs	r3, #0
 80030a6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80030a8:	230c      	movs	r3, #12
 80030aa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80030b0:	4619      	mov	r1, r3
 80030b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030b6:	f002 f8db 	bl	8005270 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80030ba:	bf00      	nop
 80030bc:	3778      	adds	r7, #120	; 0x78
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40008000 	.word	0x40008000
 80030c8:	40021000 	.word	0x40021000

080030cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	; 0x28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d4:	f107 0314 	add.w	r3, r7, #20
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	60da      	str	r2, [r3, #12]
 80030e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ec:	d129      	bne.n	8003142 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030ee:	4b17      	ldr	r3, [pc, #92]	; (800314c <HAL_TIM_Encoder_MspInit+0x80>)
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f2:	4a16      	ldr	r2, [pc, #88]	; (800314c <HAL_TIM_Encoder_MspInit+0x80>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6593      	str	r3, [r2, #88]	; 0x58
 80030fa:	4b14      	ldr	r3, [pc, #80]	; (800314c <HAL_TIM_Encoder_MspInit+0x80>)
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_TIM_Encoder_MspInit+0x80>)
 8003108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310a:	4a10      	ldr	r2, [pc, #64]	; (800314c <HAL_TIM_Encoder_MspInit+0x80>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <HAL_TIM_Encoder_MspInit+0x80>)
 8003114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 800311e:	f248 0302 	movw	r3, #32770	; 0x8002
 8003122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003124:	2302      	movs	r3, #2
 8003126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312c:	2300      	movs	r3, #0
 800312e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003130:	2301      	movs	r3, #1
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003134:	f107 0314 	add.w	r3, r7, #20
 8003138:	4619      	mov	r1, r3
 800313a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800313e:	f002 f897 	bl	8005270 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003142:	bf00      	nop
 8003144:	3728      	adds	r7, #40	; 0x28
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000

08003150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1f      	ldr	r2, [pc, #124]	; (80031dc <HAL_TIM_Base_MspInit+0x8c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d10c      	bne.n	800317c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003162:	4b1f      	ldr	r3, [pc, #124]	; (80031e0 <HAL_TIM_Base_MspInit+0x90>)
 8003164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003166:	4a1e      	ldr	r2, [pc, #120]	; (80031e0 <HAL_TIM_Base_MspInit+0x90>)
 8003168:	f043 0302 	orr.w	r3, r3, #2
 800316c:	6593      	str	r3, [r2, #88]	; 0x58
 800316e:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <HAL_TIM_Base_MspInit+0x90>)
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800317a:	e02a      	b.n	80031d2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a18      	ldr	r2, [pc, #96]	; (80031e4 <HAL_TIM_Base_MspInit+0x94>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d10c      	bne.n	80031a0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003186:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <HAL_TIM_Base_MspInit+0x90>)
 8003188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318a:	4a15      	ldr	r2, [pc, #84]	; (80031e0 <HAL_TIM_Base_MspInit+0x90>)
 800318c:	f043 0304 	orr.w	r3, r3, #4
 8003190:	6593      	str	r3, [r2, #88]	; 0x58
 8003192:	4b13      	ldr	r3, [pc, #76]	; (80031e0 <HAL_TIM_Base_MspInit+0x90>)
 8003194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	693b      	ldr	r3, [r7, #16]
}
 800319e:	e018      	b.n	80031d2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM5)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a10      	ldr	r2, [pc, #64]	; (80031e8 <HAL_TIM_Base_MspInit+0x98>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d113      	bne.n	80031d2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031aa:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <HAL_TIM_Base_MspInit+0x90>)
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	4a0c      	ldr	r2, [pc, #48]	; (80031e0 <HAL_TIM_Base_MspInit+0x90>)
 80031b0:	f043 0308 	orr.w	r3, r3, #8
 80031b4:	6593      	str	r3, [r2, #88]	; 0x58
 80031b6:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <HAL_TIM_Base_MspInit+0x90>)
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80031c2:	2200      	movs	r2, #0
 80031c4:	2100      	movs	r1, #0
 80031c6:	2032      	movs	r0, #50	; 0x32
 80031c8:	f001 fdab 	bl	8004d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80031cc:	2032      	movs	r0, #50	; 0x32
 80031ce:	f001 fdc2 	bl	8004d56 <HAL_NVIC_EnableIRQ>
}
 80031d2:	bf00      	nop
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40000400 	.word	0x40000400
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40000800 	.word	0x40000800
 80031e8:	40000c00 	.word	0x40000c00

080031ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f4:	f107 030c 	add.w	r3, r7, #12
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a11      	ldr	r2, [pc, #68]	; (8003250 <HAL_TIM_MspPostInit+0x64>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d11b      	bne.n	8003246 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800320e:	4b11      	ldr	r3, [pc, #68]	; (8003254 <HAL_TIM_MspPostInit+0x68>)
 8003210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003212:	4a10      	ldr	r2, [pc, #64]	; (8003254 <HAL_TIM_MspPostInit+0x68>)
 8003214:	f043 0304 	orr.w	r3, r3, #4
 8003218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800321a:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <HAL_TIM_MspPostInit+0x68>)
 800321c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	60bb      	str	r3, [r7, #8]
 8003224:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003226:	2340      	movs	r3, #64	; 0x40
 8003228:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322a:	2302      	movs	r3, #2
 800322c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003232:	2300      	movs	r3, #0
 8003234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003236:	2302      	movs	r3, #2
 8003238:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800323a:	f107 030c 	add.w	r3, r7, #12
 800323e:	4619      	mov	r1, r3
 8003240:	4805      	ldr	r0, [pc, #20]	; (8003258 <HAL_TIM_MspPostInit+0x6c>)
 8003242:	f002 f815 	bl	8005270 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003246:	bf00      	nop
 8003248:	3720      	adds	r7, #32
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40000400 	.word	0x40000400
 8003254:	40021000 	.word	0x40021000
 8003258:	48000800 	.word	0x48000800

0800325c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003260:	e7fe      	b.n	8003260 <NMI_Handler+0x4>

08003262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003266:	e7fe      	b.n	8003266 <HardFault_Handler+0x4>

08003268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800326c:	e7fe      	b.n	800326c <MemManage_Handler+0x4>

0800326e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003272:	e7fe      	b.n	8003272 <BusFault_Handler+0x4>

08003274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003278:	e7fe      	b.n	8003278 <UsageFault_Handler+0x4>

0800327a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800327a:	b480      	push	{r7}
 800327c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800328c:	bf00      	nop
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800329a:	bf00      	nop
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032a8:	f000 f8bc 	bl	8003424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032ac:	bf00      	nop
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032b4:	4802      	ldr	r0, [pc, #8]	; (80032c0 <DMA1_Channel1_IRQHandler+0x10>)
 80032b6:	f001 fe8c 	bl	8004fd2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000110 	.word	0x20000110

080032c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80032c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80032cc:	f002 f982 	bl	80055d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80032d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80032d4:	f002 f97e 	bl	80055d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80032d8:	bf00      	nop
 80032da:	bd80      	pop	{r7, pc}

080032dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80032e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80032e4:	f002 f976 	bl	80055d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80032e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80032ec:	f002 f972 	bl	80055d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80032f0:	bf00      	nop
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <TIM5_IRQHandler+0x10>)
 80032fa:	f003 fd9b 	bl	8006e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	200002e8 	.word	0x200002e8

08003308 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <SystemInit+0x20>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003312:	4a05      	ldr	r2, [pc, #20]	; (8003328 <SystemInit+0x20>)
 8003314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800332c:	480d      	ldr	r0, [pc, #52]	; (8003364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800332e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003330:	f7ff ffea 	bl	8003308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003334:	480c      	ldr	r0, [pc, #48]	; (8003368 <LoopForever+0x6>)
  ldr r1, =_edata
 8003336:	490d      	ldr	r1, [pc, #52]	; (800336c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003338:	4a0d      	ldr	r2, [pc, #52]	; (8003370 <LoopForever+0xe>)
  movs r3, #0
 800333a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800333c:	e002      	b.n	8003344 <LoopCopyDataInit>

0800333e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800333e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003342:	3304      	adds	r3, #4

08003344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003348:	d3f9      	bcc.n	800333e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800334a:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800334c:	4c0a      	ldr	r4, [pc, #40]	; (8003378 <LoopForever+0x16>)
  movs r3, #0
 800334e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003350:	e001      	b.n	8003356 <LoopFillZerobss>

08003352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003354:	3204      	adds	r2, #4

08003356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003358:	d3fb      	bcc.n	8003352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800335a:	f005 fd3b 	bl	8008dd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800335e:	f7fd fec3 	bl	80010e8 <main>

08003362 <LoopForever>:

LoopForever:
    b LoopForever
 8003362:	e7fe      	b.n	8003362 <LoopForever>
  ldr   r0, =_estack
 8003364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800336c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003370:	08009090 	.word	0x08009090
  ldr r2, =_sbss
 8003374:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003378:	20000574 	.word	0x20000574

0800337c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800337c:	e7fe      	b.n	800337c <ADC1_2_IRQHandler>

0800337e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003388:	2003      	movs	r0, #3
 800338a:	f001 fcbf 	bl	8004d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800338e:	2000      	movs	r0, #0
 8003390:	f000 f80e 	bl	80033b0 <HAL_InitTick>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	71fb      	strb	r3, [r7, #7]
 800339e:	e001      	b.n	80033a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033a0:	f7ff fd7a 	bl	8002e98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033a4:	79fb      	ldrb	r3, [r7, #7]

}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80033bc:	4b16      	ldr	r3, [pc, #88]	; (8003418 <HAL_InitTick+0x68>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d022      	beq.n	800340a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80033c4:	4b15      	ldr	r3, [pc, #84]	; (800341c <HAL_InitTick+0x6c>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4b13      	ldr	r3, [pc, #76]	; (8003418 <HAL_InitTick+0x68>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d8:	4618      	mov	r0, r3
 80033da:	f001 fcca 	bl	8004d72 <HAL_SYSTICK_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10f      	bne.n	8003404 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b0f      	cmp	r3, #15
 80033e8:	d809      	bhi.n	80033fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033ea:	2200      	movs	r2, #0
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033f2:	f001 fc96 	bl	8004d22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033f6:	4a0a      	ldr	r2, [pc, #40]	; (8003420 <HAL_InitTick+0x70>)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	e007      	b.n	800340e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	73fb      	strb	r3, [r7, #15]
 8003402:	e004      	b.n	800340e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	e001      	b.n	800340e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800340e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000020 	.word	0x20000020
 800341c:	20000018 	.word	0x20000018
 8003420:	2000001c 	.word	0x2000001c

08003424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_IncTick+0x1c>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_IncTick+0x20>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4413      	add	r3, r2
 8003432:	4a03      	ldr	r2, [pc, #12]	; (8003440 <HAL_IncTick+0x1c>)
 8003434:	6013      	str	r3, [r2, #0]
}
 8003436:	bf00      	nop
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	20000438 	.word	0x20000438
 8003444:	20000020 	.word	0x20000020

08003448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return uwTick;
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <HAL_GetTick+0x14>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000438 	.word	0x20000438

08003460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003468:	f7ff ffee 	bl	8003448 <HAL_GetTick>
 800346c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003478:	d004      	beq.n	8003484 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800347a:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <HAL_Delay+0x40>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4413      	add	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003484:	bf00      	nop
 8003486:	f7ff ffdf 	bl	8003448 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	429a      	cmp	r2, r3
 8003494:	d8f7      	bhi.n	8003486 <HAL_Delay+0x26>
  {
  }
}
 8003496:	bf00      	nop
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000020 	.word	0x20000020

080034a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	609a      	str	r2, [r3, #8]
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	609a      	str	r2, [r3, #8]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	3360      	adds	r3, #96	; 0x60
 800351e:	461a      	mov	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4b08      	ldr	r3, [pc, #32]	; (8003550 <LL_ADC_SetOffset+0x44>)
 800352e:	4013      	ands	r3, r2
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	4313      	orrs	r3, r2
 800353c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003544:	bf00      	nop
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	03fff000 	.word	0x03fff000

08003554 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3360      	adds	r3, #96	; 0x60
 8003562:	461a      	mov	r2, r3
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3360      	adds	r3, #96	; 0x60
 8003590:	461a      	mov	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	431a      	orrs	r2, r3
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b087      	sub	sp, #28
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	3360      	adds	r3, #96	; 0x60
 80035c6:	461a      	mov	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	431a      	orrs	r2, r3
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80035e0:	bf00      	nop
 80035e2:	371c      	adds	r7, #28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3360      	adds	r3, #96	; 0x60
 80035fc:	461a      	mov	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	431a      	orrs	r2, r3
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	615a      	str	r2, [r3, #20]
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800366e:	b480      	push	{r7}
 8003670:	b087      	sub	sp, #28
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	3330      	adds	r3, #48	; 0x30
 800367e:	461a      	mov	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	0a1b      	lsrs	r3, r3, #8
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	4413      	add	r3, r2
 800368c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	211f      	movs	r1, #31
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	401a      	ands	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	0e9b      	lsrs	r3, r3, #26
 80036a6:	f003 011f 	and.w	r1, r3, #31
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	fa01 f303 	lsl.w	r3, r1, r3
 80036b4:	431a      	orrs	r2, r3
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80036ba:	bf00      	nop
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b087      	sub	sp, #28
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3314      	adds	r3, #20
 80036d6:	461a      	mov	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	0e5b      	lsrs	r3, r3, #25
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	4413      	add	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	0d1b      	lsrs	r3, r3, #20
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	2107      	movs	r1, #7
 80036f4:	fa01 f303 	lsl.w	r3, r1, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	401a      	ands	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	0d1b      	lsrs	r3, r3, #20
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	431a      	orrs	r2, r3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003710:	bf00      	nop
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003734:	43db      	mvns	r3, r3
 8003736:	401a      	ands	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f003 0318 	and.w	r3, r3, #24
 800373e:	4908      	ldr	r1, [pc, #32]	; (8003760 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003740:	40d9      	lsrs	r1, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	400b      	ands	r3, r1
 8003746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800374a:	431a      	orrs	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003752:	bf00      	nop
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	0007ffff 	.word	0x0007ffff

08003764 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 031f 	and.w	r3, r3, #31
}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003790:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6093      	str	r3, [r2, #8]
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037b8:	d101      	bne.n	80037be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80037dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003804:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003808:	d101      	bne.n	800380e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800382c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003830:	f043 0201 	orr.w	r2, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <LL_ADC_IsEnabled+0x18>
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <LL_ADC_IsEnabled+0x1a>
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800387a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800387e:	f043 0204 	orr.w	r2, r3, #4
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d101      	bne.n	80038aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d101      	bne.n	80038d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038e0:	b590      	push	{r4, r7, lr}
 80038e2:	b089      	sub	sp, #36	; 0x24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e1a9      	b.n	8003c4e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003904:	2b00      	cmp	r3, #0
 8003906:	d109      	bne.n	800391c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff fae9 	bl	8002ee0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff ff3f 	bl	80037a4 <LL_ADC_IsDeepPowerDownEnabled>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d004      	beq.n	8003936 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff ff25 	bl	8003780 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff ff5a 	bl	80037f4 <LL_ADC_IsInternalRegulatorEnabled>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d115      	bne.n	8003972 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff ff3e 	bl	80037cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003950:	4b9c      	ldr	r3, [pc, #624]	; (8003bc4 <HAL_ADC_Init+0x2e4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	099b      	lsrs	r3, r3, #6
 8003956:	4a9c      	ldr	r2, [pc, #624]	; (8003bc8 <HAL_ADC_Init+0x2e8>)
 8003958:	fba2 2303 	umull	r2, r3, r2, r3
 800395c:	099b      	lsrs	r3, r3, #6
 800395e:	3301      	adds	r3, #1
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003964:	e002      	b.n	800396c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	3b01      	subs	r3, #1
 800396a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f9      	bne.n	8003966 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff ff3c 	bl	80037f4 <LL_ADC_IsInternalRegulatorEnabled>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10d      	bne.n	800399e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003986:	f043 0210 	orr.w	r2, r3, #16
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003992:	f043 0201 	orr.w	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff ff75 	bl	8003892 <LL_ADC_REG_IsConversionOngoing>
 80039a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f040 8142 	bne.w	8003c3c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f040 813e 	bne.w	8003c3c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80039c8:	f043 0202 	orr.w	r2, r3, #2
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff ff35 	bl	8003844 <LL_ADC_IsEnabled>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d141      	bne.n	8003a64 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039e8:	d004      	beq.n	80039f4 <HAL_ADC_Init+0x114>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a77      	ldr	r2, [pc, #476]	; (8003bcc <HAL_ADC_Init+0x2ec>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d10f      	bne.n	8003a14 <HAL_ADC_Init+0x134>
 80039f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80039f8:	f7ff ff24 	bl	8003844 <LL_ADC_IsEnabled>
 80039fc:	4604      	mov	r4, r0
 80039fe:	4873      	ldr	r0, [pc, #460]	; (8003bcc <HAL_ADC_Init+0x2ec>)
 8003a00:	f7ff ff20 	bl	8003844 <LL_ADC_IsEnabled>
 8003a04:	4603      	mov	r3, r0
 8003a06:	4323      	orrs	r3, r4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bf0c      	ite	eq
 8003a0c:	2301      	moveq	r3, #1
 8003a0e:	2300      	movne	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	e012      	b.n	8003a3a <HAL_ADC_Init+0x15a>
 8003a14:	486e      	ldr	r0, [pc, #440]	; (8003bd0 <HAL_ADC_Init+0x2f0>)
 8003a16:	f7ff ff15 	bl	8003844 <LL_ADC_IsEnabled>
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	486d      	ldr	r0, [pc, #436]	; (8003bd4 <HAL_ADC_Init+0x2f4>)
 8003a1e:	f7ff ff11 	bl	8003844 <LL_ADC_IsEnabled>
 8003a22:	4603      	mov	r3, r0
 8003a24:	431c      	orrs	r4, r3
 8003a26:	486c      	ldr	r0, [pc, #432]	; (8003bd8 <HAL_ADC_Init+0x2f8>)
 8003a28:	f7ff ff0c 	bl	8003844 <LL_ADC_IsEnabled>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	4323      	orrs	r3, r4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf0c      	ite	eq
 8003a34:	2301      	moveq	r3, #1
 8003a36:	2300      	movne	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d012      	beq.n	8003a64 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a46:	d004      	beq.n	8003a52 <HAL_ADC_Init+0x172>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a5f      	ldr	r2, [pc, #380]	; (8003bcc <HAL_ADC_Init+0x2ec>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d101      	bne.n	8003a56 <HAL_ADC_Init+0x176>
 8003a52:	4a62      	ldr	r2, [pc, #392]	; (8003bdc <HAL_ADC_Init+0x2fc>)
 8003a54:	e000      	b.n	8003a58 <HAL_ADC_Init+0x178>
 8003a56:	4a62      	ldr	r2, [pc, #392]	; (8003be0 <HAL_ADC_Init+0x300>)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4610      	mov	r0, r2
 8003a60:	f7ff fd20 	bl	80034a4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	7f5b      	ldrb	r3, [r3, #29]
 8003a68:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a6e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003a74:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003a7a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a82:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d106      	bne.n	8003aa0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	3b01      	subs	r3, #1
 8003a98:	045b      	lsls	r3, r3, #17
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d009      	beq.n	8003abc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	4b48      	ldr	r3, [pc, #288]	; (8003be4 <HAL_ADC_Init+0x304>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6812      	ldr	r2, [r2, #0]
 8003aca:	69b9      	ldr	r1, [r7, #24]
 8003acc:	430b      	orrs	r3, r1
 8003ace:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fee4 	bl	80038b8 <LL_ADC_INJ_IsConversionOngoing>
 8003af0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d17f      	bne.n	8003bf8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d17c      	bne.n	8003bf8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b02:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b0a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b1a:	f023 0302 	bic.w	r3, r3, #2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6812      	ldr	r2, [r2, #0]
 8003b22:	69b9      	ldr	r1, [r7, #24]
 8003b24:	430b      	orrs	r3, r1
 8003b26:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d017      	beq.n	8003b60 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b3e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b48:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6911      	ldr	r1, [r2, #16]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003b5e:	e013      	b.n	8003b88 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b6e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b84:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d12a      	bne.n	8003be8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b9c:	f023 0304 	bic.w	r3, r3, #4
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ba8:	4311      	orrs	r1, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003bae:	4311      	orrs	r1, r2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0201 	orr.w	r2, r2, #1
 8003bc0:	611a      	str	r2, [r3, #16]
 8003bc2:	e019      	b.n	8003bf8 <HAL_ADC_Init+0x318>
 8003bc4:	20000018 	.word	0x20000018
 8003bc8:	053e2d63 	.word	0x053e2d63
 8003bcc:	50000100 	.word	0x50000100
 8003bd0:	50000400 	.word	0x50000400
 8003bd4:	50000500 	.word	0x50000500
 8003bd8:	50000600 	.word	0x50000600
 8003bdc:	50000300 	.word	0x50000300
 8003be0:	50000700 	.word	0x50000700
 8003be4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691a      	ldr	r2, [r3, #16]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d10c      	bne.n	8003c1a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	f023 010f 	bic.w	r1, r3, #15
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	1e5a      	subs	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
 8003c18:	e007      	b.n	8003c2a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 020f 	bic.w	r2, r2, #15
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2e:	f023 0303 	bic.w	r3, r3, #3
 8003c32:	f043 0201 	orr.w	r2, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c3a:	e007      	b.n	8003c4c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c40:	f043 0210 	orr.w	r2, r3, #16
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3724      	adds	r7, #36	; 0x24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd90      	pop	{r4, r7, pc}
 8003c56:	bf00      	nop

08003c58 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c6c:	d004      	beq.n	8003c78 <HAL_ADC_Start_DMA+0x20>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a5a      	ldr	r2, [pc, #360]	; (8003ddc <HAL_ADC_Start_DMA+0x184>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d101      	bne.n	8003c7c <HAL_ADC_Start_DMA+0x24>
 8003c78:	4b59      	ldr	r3, [pc, #356]	; (8003de0 <HAL_ADC_Start_DMA+0x188>)
 8003c7a:	e000      	b.n	8003c7e <HAL_ADC_Start_DMA+0x26>
 8003c7c:	4b59      	ldr	r3, [pc, #356]	; (8003de4 <HAL_ADC_Start_DMA+0x18c>)
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff fd70 	bl	8003764 <LL_ADC_GetMultimode>
 8003c84:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff fe01 	bl	8003892 <LL_ADC_REG_IsConversionOngoing>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f040 809b 	bne.w	8003dce <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_ADC_Start_DMA+0x4e>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e096      	b.n	8003dd4 <HAL_ADC_Start_DMA+0x17c>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a4d      	ldr	r2, [pc, #308]	; (8003de8 <HAL_ADC_Start_DMA+0x190>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d008      	beq.n	8003cca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b05      	cmp	r3, #5
 8003cc2:	d002      	beq.n	8003cca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	2b09      	cmp	r3, #9
 8003cc8:	d17a      	bne.n	8003dc0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 fcf6 	bl	80046bc <ADC_Enable>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d16d      	bne.n	8003db6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cde:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a3a      	ldr	r2, [pc, #232]	; (8003ddc <HAL_ADC_Start_DMA+0x184>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d009      	beq.n	8003d0c <HAL_ADC_Start_DMA+0xb4>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a3b      	ldr	r2, [pc, #236]	; (8003dec <HAL_ADC_Start_DMA+0x194>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d002      	beq.n	8003d08 <HAL_ADC_Start_DMA+0xb0>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	e003      	b.n	8003d10 <HAL_ADC_Start_DMA+0xb8>
 8003d08:	4b39      	ldr	r3, [pc, #228]	; (8003df0 <HAL_ADC_Start_DMA+0x198>)
 8003d0a:	e001      	b.n	8003d10 <HAL_ADC_Start_DMA+0xb8>
 8003d0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d002      	beq.n	8003d1e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d105      	bne.n	8003d2a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d006      	beq.n	8003d44 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3a:	f023 0206 	bic.w	r2, r3, #6
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	661a      	str	r2, [r3, #96]	; 0x60
 8003d42:	e002      	b.n	8003d4a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4e:	4a29      	ldr	r2, [pc, #164]	; (8003df4 <HAL_ADC_Start_DMA+0x19c>)
 8003d50:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d56:	4a28      	ldr	r2, [pc, #160]	; (8003df8 <HAL_ADC_Start_DMA+0x1a0>)
 8003d58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5e:	4a27      	ldr	r2, [pc, #156]	; (8003dfc <HAL_ADC_Start_DMA+0x1a4>)
 8003d60:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	221c      	movs	r2, #28
 8003d68:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f042 0210 	orr.w	r2, r2, #16
 8003d80:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0201 	orr.w	r2, r2, #1
 8003d90:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3340      	adds	r3, #64	; 0x40
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f001 f89b 	bl	8004edc <HAL_DMA_Start_IT>
 8003da6:	4603      	mov	r3, r0
 8003da8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fd5b 	bl	800386a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003db4:	e00d      	b.n	8003dd2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003dbe:	e008      	b.n	8003dd2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003dcc:	e001      	b.n	8003dd2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003dce:	2302      	movs	r3, #2
 8003dd0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	50000100 	.word	0x50000100
 8003de0:	50000300 	.word	0x50000300
 8003de4:	50000700 	.word	0x50000700
 8003de8:	50000600 	.word	0x50000600
 8003dec:	50000500 	.word	0x50000500
 8003df0:	50000400 	.word	0x50000400
 8003df4:	080047e9 	.word	0x080047e9
 8003df8:	080048c1 	.word	0x080048c1
 8003dfc:	080048dd 	.word	0x080048dd

08003e00 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b0b6      	sub	sp, #216	; 0xd8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d102      	bne.n	8003e60 <HAL_ADC_ConfigChannel+0x24>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	f000 bc13 	b.w	8004686 <HAL_ADC_ConfigChannel+0x84a>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff fd10 	bl	8003892 <LL_ADC_REG_IsConversionOngoing>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f040 83f3 	bne.w	8004660 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	6859      	ldr	r1, [r3, #4]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	f7ff fbf1 	bl	800366e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff fcfe 	bl	8003892 <LL_ADC_REG_IsConversionOngoing>
 8003e96:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fd0a 	bl	80038b8 <LL_ADC_INJ_IsConversionOngoing>
 8003ea4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ea8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f040 81d9 	bne.w	8004264 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003eb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f040 81d4 	bne.w	8004264 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ec4:	d10f      	bne.n	8003ee6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f7ff fbf8 	bl	80036c6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff fb9f 	bl	8003622 <LL_ADC_SetSamplingTimeCommonConfig>
 8003ee4:	e00e      	b.n	8003f04 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6819      	ldr	r1, [r3, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f7ff fbe7 	bl	80036c6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2100      	movs	r1, #0
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff fb8f 	bl	8003622 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	695a      	ldr	r2, [r3, #20]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	08db      	lsrs	r3, r3, #3
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d022      	beq.n	8003f6c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6919      	ldr	r1, [r3, #16]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f36:	f7ff fae9 	bl	800350c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6919      	ldr	r1, [r3, #16]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f7ff fb35 	bl	80035b6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d102      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x126>
 8003f5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f60:	e000      	b.n	8003f64 <HAL_ADC_ConfigChannel+0x128>
 8003f62:	2300      	movs	r3, #0
 8003f64:	461a      	mov	r2, r3
 8003f66:	f7ff fb41 	bl	80035ec <LL_ADC_SetOffsetSaturation>
 8003f6a:	e17b      	b.n	8004264 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2100      	movs	r1, #0
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff faee 	bl	8003554 <LL_ADC_GetOffsetChannel>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10a      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x15c>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2100      	movs	r1, #0
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff fae3 	bl	8003554 <LL_ADC_GetOffsetChannel>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	0e9b      	lsrs	r3, r3, #26
 8003f92:	f003 021f 	and.w	r2, r3, #31
 8003f96:	e01e      	b.n	8003fd6 <HAL_ADC_ConfigChannel+0x19a>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff fad8 	bl	8003554 <LL_ADC_GetOffsetChannel>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003faa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fae:	fa93 f3a3 	rbit	r3, r3
 8003fb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003fba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003fbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003fc6:	2320      	movs	r3, #32
 8003fc8:	e004      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003fca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fce:	fab3 f383 	clz	r3, r3
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d105      	bne.n	8003fee <HAL_ADC_ConfigChannel+0x1b2>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	0e9b      	lsrs	r3, r3, #26
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	e018      	b.n	8004020 <HAL_ADC_ConfigChannel+0x1e4>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ffa:	fa93 f3a3 	rbit	r3, r3
 8003ffe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004006:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800400a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004012:	2320      	movs	r3, #32
 8004014:	e004      	b.n	8004020 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004016:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800401a:	fab3 f383 	clz	r3, r3
 800401e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004020:	429a      	cmp	r2, r3
 8004022:	d106      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2200      	movs	r2, #0
 800402a:	2100      	movs	r1, #0
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff faa7 	bl	8003580 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2101      	movs	r1, #1
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fa8b 	bl	8003554 <LL_ADC_GetOffsetChannel>
 800403e:	4603      	mov	r3, r0
 8004040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10a      	bne.n	800405e <HAL_ADC_ConfigChannel+0x222>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2101      	movs	r1, #1
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff fa80 	bl	8003554 <LL_ADC_GetOffsetChannel>
 8004054:	4603      	mov	r3, r0
 8004056:	0e9b      	lsrs	r3, r3, #26
 8004058:	f003 021f 	and.w	r2, r3, #31
 800405c:	e01e      	b.n	800409c <HAL_ADC_ConfigChannel+0x260>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2101      	movs	r1, #1
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fa75 	bl	8003554 <LL_ADC_GetOffsetChannel>
 800406a:	4603      	mov	r3, r0
 800406c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004070:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004074:	fa93 f3a3 	rbit	r3, r3
 8004078:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800407c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004080:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004084:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800408c:	2320      	movs	r3, #32
 800408e:	e004      	b.n	800409a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004090:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004094:	fab3 f383 	clz	r3, r3
 8004098:	b2db      	uxtb	r3, r3
 800409a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d105      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x278>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	0e9b      	lsrs	r3, r3, #26
 80040ae:	f003 031f 	and.w	r3, r3, #31
 80040b2:	e018      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x2aa>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80040c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80040cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80040d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80040d8:	2320      	movs	r3, #32
 80040da:	e004      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80040dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040e0:	fab3 f383 	clz	r3, r3
 80040e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d106      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2200      	movs	r2, #0
 80040f0:	2101      	movs	r1, #1
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fa44 	bl	8003580 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2102      	movs	r1, #2
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff fa28 	bl	8003554 <LL_ADC_GetOffsetChannel>
 8004104:	4603      	mov	r3, r0
 8004106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10a      	bne.n	8004124 <HAL_ADC_ConfigChannel+0x2e8>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2102      	movs	r1, #2
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff fa1d 	bl	8003554 <LL_ADC_GetOffsetChannel>
 800411a:	4603      	mov	r3, r0
 800411c:	0e9b      	lsrs	r3, r3, #26
 800411e:	f003 021f 	and.w	r2, r3, #31
 8004122:	e01e      	b.n	8004162 <HAL_ADC_ConfigChannel+0x326>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2102      	movs	r1, #2
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff fa12 	bl	8003554 <LL_ADC_GetOffsetChannel>
 8004130:	4603      	mov	r3, r0
 8004132:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800413a:	fa93 f3a3 	rbit	r3, r3
 800413e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004142:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800414a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004152:	2320      	movs	r3, #32
 8004154:	e004      	b.n	8004160 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004156:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800415a:	fab3 f383 	clz	r3, r3
 800415e:	b2db      	uxtb	r3, r3
 8004160:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800416a:	2b00      	cmp	r3, #0
 800416c:	d105      	bne.n	800417a <HAL_ADC_ConfigChannel+0x33e>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	0e9b      	lsrs	r3, r3, #26
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	e016      	b.n	80041a8 <HAL_ADC_ConfigChannel+0x36c>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004182:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004186:	fa93 f3a3 	rbit	r3, r3
 800418a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800418c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800418e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004192:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800419a:	2320      	movs	r3, #32
 800419c:	e004      	b.n	80041a8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800419e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041a2:	fab3 f383 	clz	r3, r3
 80041a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d106      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2200      	movs	r2, #0
 80041b2:	2102      	movs	r1, #2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff f9e3 	bl	8003580 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2103      	movs	r1, #3
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff f9c7 	bl	8003554 <LL_ADC_GetOffsetChannel>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x3aa>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2103      	movs	r1, #3
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff f9bc 	bl	8003554 <LL_ADC_GetOffsetChannel>
 80041dc:	4603      	mov	r3, r0
 80041de:	0e9b      	lsrs	r3, r3, #26
 80041e0:	f003 021f 	and.w	r2, r3, #31
 80041e4:	e017      	b.n	8004216 <HAL_ADC_ConfigChannel+0x3da>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2103      	movs	r1, #3
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff f9b1 	bl	8003554 <LL_ADC_GetOffsetChannel>
 80041f2:	4603      	mov	r3, r0
 80041f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80041fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004200:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004208:	2320      	movs	r3, #32
 800420a:	e003      	b.n	8004214 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800420c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800421e:	2b00      	cmp	r3, #0
 8004220:	d105      	bne.n	800422e <HAL_ADC_ConfigChannel+0x3f2>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	0e9b      	lsrs	r3, r3, #26
 8004228:	f003 031f 	and.w	r3, r3, #31
 800422c:	e011      	b.n	8004252 <HAL_ADC_ConfigChannel+0x416>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004234:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004236:	fa93 f3a3 	rbit	r3, r3
 800423a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800423c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800423e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004246:	2320      	movs	r3, #32
 8004248:	e003      	b.n	8004252 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800424a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424c:	fab3 f383 	clz	r3, r3
 8004250:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004252:	429a      	cmp	r2, r3
 8004254:	d106      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2200      	movs	r2, #0
 800425c:	2103      	movs	r1, #3
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff f98e 	bl	8003580 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff faeb 	bl	8003844 <LL_ADC_IsEnabled>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	f040 813d 	bne.w	80044f0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6819      	ldr	r1, [r3, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	461a      	mov	r2, r3
 8004284:	f7ff fa4a 	bl	800371c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	4aa2      	ldr	r2, [pc, #648]	; (8004518 <HAL_ADC_ConfigChannel+0x6dc>)
 800428e:	4293      	cmp	r3, r2
 8004290:	f040 812e 	bne.w	80044f0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10b      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x480>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	0e9b      	lsrs	r3, r3, #26
 80042aa:	3301      	adds	r3, #1
 80042ac:	f003 031f 	and.w	r3, r3, #31
 80042b0:	2b09      	cmp	r3, #9
 80042b2:	bf94      	ite	ls
 80042b4:	2301      	movls	r3, #1
 80042b6:	2300      	movhi	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	e019      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x4b4>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c4:	fa93 f3a3 	rbit	r3, r3
 80042c8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80042ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042cc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80042ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80042d4:	2320      	movs	r3, #32
 80042d6:	e003      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80042d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042da:	fab3 f383 	clz	r3, r3
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	3301      	adds	r3, #1
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	2b09      	cmp	r3, #9
 80042e8:	bf94      	ite	ls
 80042ea:	2301      	movls	r3, #1
 80042ec:	2300      	movhi	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d079      	beq.n	80043e8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d107      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x4d4>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	0e9b      	lsrs	r3, r3, #26
 8004306:	3301      	adds	r3, #1
 8004308:	069b      	lsls	r3, r3, #26
 800430a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800430e:	e015      	b.n	800433c <HAL_ADC_ConfigChannel+0x500>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004318:	fa93 f3a3 	rbit	r3, r3
 800431c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800431e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004320:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004328:	2320      	movs	r3, #32
 800432a:	e003      	b.n	8004334 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800432c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800432e:	fab3 f383 	clz	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	3301      	adds	r3, #1
 8004336:	069b      	lsls	r3, r3, #26
 8004338:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004344:	2b00      	cmp	r3, #0
 8004346:	d109      	bne.n	800435c <HAL_ADC_ConfigChannel+0x520>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	0e9b      	lsrs	r3, r3, #26
 800434e:	3301      	adds	r3, #1
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	2101      	movs	r1, #1
 8004356:	fa01 f303 	lsl.w	r3, r1, r3
 800435a:	e017      	b.n	800438c <HAL_ADC_ConfigChannel+0x550>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004364:	fa93 f3a3 	rbit	r3, r3
 8004368:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800436a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800436c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800436e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004374:	2320      	movs	r3, #32
 8004376:	e003      	b.n	8004380 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800437a:	fab3 f383 	clz	r3, r3
 800437e:	b2db      	uxtb	r3, r3
 8004380:	3301      	adds	r3, #1
 8004382:	f003 031f 	and.w	r3, r3, #31
 8004386:	2101      	movs	r1, #1
 8004388:	fa01 f303 	lsl.w	r3, r1, r3
 800438c:	ea42 0103 	orr.w	r1, r2, r3
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10a      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0x576>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	0e9b      	lsrs	r3, r3, #26
 80043a2:	3301      	adds	r3, #1
 80043a4:	f003 021f 	and.w	r2, r3, #31
 80043a8:	4613      	mov	r3, r2
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	4413      	add	r3, r2
 80043ae:	051b      	lsls	r3, r3, #20
 80043b0:	e018      	b.n	80043e4 <HAL_ADC_ConfigChannel+0x5a8>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	fa93 f3a3 	rbit	r3, r3
 80043be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80043c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80043c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80043ca:	2320      	movs	r3, #32
 80043cc:	e003      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80043ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d0:	fab3 f383 	clz	r3, r3
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	3301      	adds	r3, #1
 80043d8:	f003 021f 	and.w	r2, r3, #31
 80043dc:	4613      	mov	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4413      	add	r3, r2
 80043e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043e4:	430b      	orrs	r3, r1
 80043e6:	e07e      	b.n	80044e6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d107      	bne.n	8004404 <HAL_ADC_ConfigChannel+0x5c8>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	0e9b      	lsrs	r3, r3, #26
 80043fa:	3301      	adds	r3, #1
 80043fc:	069b      	lsls	r3, r3, #26
 80043fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004402:	e015      	b.n	8004430 <HAL_ADC_ConfigChannel+0x5f4>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440c:	fa93 f3a3 	rbit	r3, r3
 8004410:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004414:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800441c:	2320      	movs	r3, #32
 800441e:	e003      	b.n	8004428 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004422:	fab3 f383 	clz	r3, r3
 8004426:	b2db      	uxtb	r3, r3
 8004428:	3301      	adds	r3, #1
 800442a:	069b      	lsls	r3, r3, #26
 800442c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004438:	2b00      	cmp	r3, #0
 800443a:	d109      	bne.n	8004450 <HAL_ADC_ConfigChannel+0x614>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	0e9b      	lsrs	r3, r3, #26
 8004442:	3301      	adds	r3, #1
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	2101      	movs	r1, #1
 800444a:	fa01 f303 	lsl.w	r3, r1, r3
 800444e:	e017      	b.n	8004480 <HAL_ADC_ConfigChannel+0x644>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	fa93 f3a3 	rbit	r3, r3
 800445c:	61fb      	str	r3, [r7, #28]
  return result;
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004468:	2320      	movs	r3, #32
 800446a:	e003      	b.n	8004474 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	fab3 f383 	clz	r3, r3
 8004472:	b2db      	uxtb	r3, r3
 8004474:	3301      	adds	r3, #1
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	2101      	movs	r1, #1
 800447c:	fa01 f303 	lsl.w	r3, r1, r3
 8004480:	ea42 0103 	orr.w	r1, r2, r3
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10d      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x670>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	0e9b      	lsrs	r3, r3, #26
 8004496:	3301      	adds	r3, #1
 8004498:	f003 021f 	and.w	r2, r3, #31
 800449c:	4613      	mov	r3, r2
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	4413      	add	r3, r2
 80044a2:	3b1e      	subs	r3, #30
 80044a4:	051b      	lsls	r3, r3, #20
 80044a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044aa:	e01b      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x6a8>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	fa93 f3a3 	rbit	r3, r3
 80044b8:	613b      	str	r3, [r7, #16]
  return result;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80044c4:	2320      	movs	r3, #32
 80044c6:	e003      	b.n	80044d0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	fab3 f383 	clz	r3, r3
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	3301      	adds	r3, #1
 80044d2:	f003 021f 	and.w	r2, r3, #31
 80044d6:	4613      	mov	r3, r2
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	4413      	add	r3, r2
 80044dc:	3b1e      	subs	r3, #30
 80044de:	051b      	lsls	r3, r3, #20
 80044e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044ea:	4619      	mov	r1, r3
 80044ec:	f7ff f8eb 	bl	80036c6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4b09      	ldr	r3, [pc, #36]	; (800451c <HAL_ADC_ConfigChannel+0x6e0>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 80be 	beq.w	800467a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004506:	d004      	beq.n	8004512 <HAL_ADC_ConfigChannel+0x6d6>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a04      	ldr	r2, [pc, #16]	; (8004520 <HAL_ADC_ConfigChannel+0x6e4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d10a      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x6ec>
 8004512:	4b04      	ldr	r3, [pc, #16]	; (8004524 <HAL_ADC_ConfigChannel+0x6e8>)
 8004514:	e009      	b.n	800452a <HAL_ADC_ConfigChannel+0x6ee>
 8004516:	bf00      	nop
 8004518:	407f0000 	.word	0x407f0000
 800451c:	80080000 	.word	0x80080000
 8004520:	50000100 	.word	0x50000100
 8004524:	50000300 	.word	0x50000300
 8004528:	4b59      	ldr	r3, [pc, #356]	; (8004690 <HAL_ADC_ConfigChannel+0x854>)
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe ffe0 	bl	80034f0 <LL_ADC_GetCommonPathInternalCh>
 8004530:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a56      	ldr	r2, [pc, #344]	; (8004694 <HAL_ADC_ConfigChannel+0x858>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d004      	beq.n	8004548 <HAL_ADC_ConfigChannel+0x70c>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a55      	ldr	r2, [pc, #340]	; (8004698 <HAL_ADC_ConfigChannel+0x85c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d13a      	bne.n	80045be <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004548:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800454c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d134      	bne.n	80045be <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800455c:	d005      	beq.n	800456a <HAL_ADC_ConfigChannel+0x72e>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a4e      	ldr	r2, [pc, #312]	; (800469c <HAL_ADC_ConfigChannel+0x860>)
 8004564:	4293      	cmp	r3, r2
 8004566:	f040 8085 	bne.w	8004674 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004572:	d004      	beq.n	800457e <HAL_ADC_ConfigChannel+0x742>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a49      	ldr	r2, [pc, #292]	; (80046a0 <HAL_ADC_ConfigChannel+0x864>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d101      	bne.n	8004582 <HAL_ADC_ConfigChannel+0x746>
 800457e:	4a49      	ldr	r2, [pc, #292]	; (80046a4 <HAL_ADC_ConfigChannel+0x868>)
 8004580:	e000      	b.n	8004584 <HAL_ADC_ConfigChannel+0x748>
 8004582:	4a43      	ldr	r2, [pc, #268]	; (8004690 <HAL_ADC_ConfigChannel+0x854>)
 8004584:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004588:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800458c:	4619      	mov	r1, r3
 800458e:	4610      	mov	r0, r2
 8004590:	f7fe ff9b 	bl	80034ca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004594:	4b44      	ldr	r3, [pc, #272]	; (80046a8 <HAL_ADC_ConfigChannel+0x86c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	099b      	lsrs	r3, r3, #6
 800459a:	4a44      	ldr	r2, [pc, #272]	; (80046ac <HAL_ADC_ConfigChannel+0x870>)
 800459c:	fba2 2303 	umull	r2, r3, r2, r3
 80045a0:	099b      	lsrs	r3, r3, #6
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	4613      	mov	r3, r2
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045ae:	e002      	b.n	80045b6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f9      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045bc:	e05a      	b.n	8004674 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a3b      	ldr	r2, [pc, #236]	; (80046b0 <HAL_ADC_ConfigChannel+0x874>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d125      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d11f      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a31      	ldr	r2, [pc, #196]	; (80046a0 <HAL_ADC_ConfigChannel+0x864>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d104      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x7ac>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a34      	ldr	r2, [pc, #208]	; (80046b4 <HAL_ADC_ConfigChannel+0x878>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d047      	beq.n	8004678 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045f0:	d004      	beq.n	80045fc <HAL_ADC_ConfigChannel+0x7c0>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a2a      	ldr	r2, [pc, #168]	; (80046a0 <HAL_ADC_ConfigChannel+0x864>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d101      	bne.n	8004600 <HAL_ADC_ConfigChannel+0x7c4>
 80045fc:	4a29      	ldr	r2, [pc, #164]	; (80046a4 <HAL_ADC_ConfigChannel+0x868>)
 80045fe:	e000      	b.n	8004602 <HAL_ADC_ConfigChannel+0x7c6>
 8004600:	4a23      	ldr	r2, [pc, #140]	; (8004690 <HAL_ADC_ConfigChannel+0x854>)
 8004602:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800460a:	4619      	mov	r1, r3
 800460c:	4610      	mov	r0, r2
 800460e:	f7fe ff5c 	bl	80034ca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004612:	e031      	b.n	8004678 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a27      	ldr	r2, [pc, #156]	; (80046b8 <HAL_ADC_ConfigChannel+0x87c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d12d      	bne.n	800467a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800461e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d127      	bne.n	800467a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a1c      	ldr	r2, [pc, #112]	; (80046a0 <HAL_ADC_ConfigChannel+0x864>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d022      	beq.n	800467a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800463c:	d004      	beq.n	8004648 <HAL_ADC_ConfigChannel+0x80c>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a17      	ldr	r2, [pc, #92]	; (80046a0 <HAL_ADC_ConfigChannel+0x864>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d101      	bne.n	800464c <HAL_ADC_ConfigChannel+0x810>
 8004648:	4a16      	ldr	r2, [pc, #88]	; (80046a4 <HAL_ADC_ConfigChannel+0x868>)
 800464a:	e000      	b.n	800464e <HAL_ADC_ConfigChannel+0x812>
 800464c:	4a10      	ldr	r2, [pc, #64]	; (8004690 <HAL_ADC_ConfigChannel+0x854>)
 800464e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004652:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004656:	4619      	mov	r1, r3
 8004658:	4610      	mov	r0, r2
 800465a:	f7fe ff36 	bl	80034ca <LL_ADC_SetCommonPathInternalCh>
 800465e:	e00c      	b.n	800467a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004664:	f043 0220 	orr.w	r2, r3, #32
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004672:	e002      	b.n	800467a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004674:	bf00      	nop
 8004676:	e000      	b.n	800467a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004678:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004682:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004686:	4618      	mov	r0, r3
 8004688:	37d8      	adds	r7, #216	; 0xd8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	50000700 	.word	0x50000700
 8004694:	c3210000 	.word	0xc3210000
 8004698:	90c00010 	.word	0x90c00010
 800469c:	50000600 	.word	0x50000600
 80046a0:	50000100 	.word	0x50000100
 80046a4:	50000300 	.word	0x50000300
 80046a8:	20000018 	.word	0x20000018
 80046ac:	053e2d63 	.word	0x053e2d63
 80046b0:	c7520000 	.word	0xc7520000
 80046b4:	50000500 	.word	0x50000500
 80046b8:	cb840000 	.word	0xcb840000

080046bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff f8b9 	bl	8003844 <LL_ADC_IsEnabled>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d176      	bne.n	80047c6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	4b3c      	ldr	r3, [pc, #240]	; (80047d0 <ADC_Enable+0x114>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00d      	beq.n	8004702 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ea:	f043 0210 	orr.w	r2, r3, #16
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f6:	f043 0201 	orr.w	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e062      	b.n	80047c8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff f888 	bl	800381c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004714:	d004      	beq.n	8004720 <ADC_Enable+0x64>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a2e      	ldr	r2, [pc, #184]	; (80047d4 <ADC_Enable+0x118>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d101      	bne.n	8004724 <ADC_Enable+0x68>
 8004720:	4b2d      	ldr	r3, [pc, #180]	; (80047d8 <ADC_Enable+0x11c>)
 8004722:	e000      	b.n	8004726 <ADC_Enable+0x6a>
 8004724:	4b2d      	ldr	r3, [pc, #180]	; (80047dc <ADC_Enable+0x120>)
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe fee2 	bl	80034f0 <LL_ADC_GetCommonPathInternalCh>
 800472c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800472e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004732:	2b00      	cmp	r3, #0
 8004734:	d013      	beq.n	800475e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004736:	4b2a      	ldr	r3, [pc, #168]	; (80047e0 <ADC_Enable+0x124>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	099b      	lsrs	r3, r3, #6
 800473c:	4a29      	ldr	r2, [pc, #164]	; (80047e4 <ADC_Enable+0x128>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	099b      	lsrs	r3, r3, #6
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	4613      	mov	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004750:	e002      	b.n	8004758 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	3b01      	subs	r3, #1
 8004756:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f9      	bne.n	8004752 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800475e:	f7fe fe73 	bl	8003448 <HAL_GetTick>
 8004762:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004764:	e028      	b.n	80047b8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff f86a 	bl	8003844 <LL_ADC_IsEnabled>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d104      	bne.n	8004780 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff f84e 	bl	800381c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004780:	f7fe fe62 	bl	8003448 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d914      	bls.n	80047b8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b01      	cmp	r3, #1
 800479a:	d00d      	beq.n	80047b8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a0:	f043 0210 	orr.w	r2, r3, #16
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ac:	f043 0201 	orr.w	r2, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e007      	b.n	80047c8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d1cf      	bne.n	8004766 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	8000003f 	.word	0x8000003f
 80047d4:	50000100 	.word	0x50000100
 80047d8:	50000300 	.word	0x50000300
 80047dc:	50000700 	.word	0x50000700
 80047e0:	20000018 	.word	0x20000018
 80047e4:	053e2d63 	.word	0x053e2d63

080047e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d14b      	bne.n	800489a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004806:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d021      	beq.n	8004860 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f7fe ff11 	bl	8003648 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d032      	beq.n	8004892 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d12b      	bne.n	8004892 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d11f      	bne.n	8004892 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004856:	f043 0201 	orr.w	r2, r3, #1
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	65da      	str	r2, [r3, #92]	; 0x5c
 800485e:	e018      	b.n	8004892 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d111      	bne.n	8004892 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004872:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d105      	bne.n	8004892 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488a:	f043 0201 	orr.w	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f7ff fab4 	bl	8003e00 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004898:	e00e      	b.n	80048b8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489e:	f003 0310 	and.w	r3, r3, #16
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f7ff fabe 	bl	8003e28 <HAL_ADC_ErrorCallback>
}
 80048ac:	e004      	b.n	80048b8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	4798      	blx	r3
}
 80048b8:	bf00      	nop
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048cc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f7ff faa0 	bl	8003e14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048d4:	bf00      	nop
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fa:	f043 0204 	orr.w	r2, r3, #4
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f7ff fa90 	bl	8003e28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004908:	bf00      	nop
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <LL_ADC_IsEnabled>:
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <LL_ADC_IsEnabled+0x18>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <LL_ADC_IsEnabled+0x1a>
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <LL_ADC_REG_IsConversionOngoing>:
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b04      	cmp	r3, #4
 8004948:	d101      	bne.n	800494e <LL_ADC_REG_IsConversionOngoing+0x18>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800495c:	b590      	push	{r4, r7, lr}
 800495e:	b0a1      	sub	sp, #132	; 0x84
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004976:	2302      	movs	r3, #2
 8004978:	e0e7      	b.n	8004b4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004982:	2300      	movs	r3, #0
 8004984:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004986:	2300      	movs	r3, #0
 8004988:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004992:	d102      	bne.n	800499a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004994:	4b6f      	ldr	r3, [pc, #444]	; (8004b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004996:	60bb      	str	r3, [r7, #8]
 8004998:	e009      	b.n	80049ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a6e      	ldr	r2, [pc, #440]	; (8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d102      	bne.n	80049aa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80049a4:	4b6d      	ldr	r3, [pc, #436]	; (8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	e001      	b.n	80049ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80049aa:	2300      	movs	r3, #0
 80049ac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10b      	bne.n	80049cc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b8:	f043 0220 	orr.w	r2, r3, #32
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0be      	b.n	8004b4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff ffb1 	bl	8004936 <LL_ADC_REG_IsConversionOngoing>
 80049d4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff ffab 	bl	8004936 <LL_ADC_REG_IsConversionOngoing>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f040 80a0 	bne.w	8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80049e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f040 809c 	bne.w	8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049f8:	d004      	beq.n	8004a04 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a55      	ldr	r2, [pc, #340]	; (8004b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d101      	bne.n	8004a08 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004a04:	4b56      	ldr	r3, [pc, #344]	; (8004b60 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004a06:	e000      	b.n	8004a0a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004a08:	4b56      	ldr	r3, [pc, #344]	; (8004b64 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004a0a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d04b      	beq.n	8004aac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	6859      	ldr	r1, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a26:	035b      	lsls	r3, r3, #13
 8004a28:	430b      	orrs	r3, r1
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a2e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a38:	d004      	beq.n	8004a44 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a45      	ldr	r2, [pc, #276]	; (8004b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d10f      	bne.n	8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004a44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004a48:	f7ff ff62 	bl	8004910 <LL_ADC_IsEnabled>
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	4841      	ldr	r0, [pc, #260]	; (8004b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a50:	f7ff ff5e 	bl	8004910 <LL_ADC_IsEnabled>
 8004a54:	4603      	mov	r3, r0
 8004a56:	4323      	orrs	r3, r4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	bf0c      	ite	eq
 8004a5c:	2301      	moveq	r3, #1
 8004a5e:	2300      	movne	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	e012      	b.n	8004a8a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004a64:	483c      	ldr	r0, [pc, #240]	; (8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004a66:	f7ff ff53 	bl	8004910 <LL_ADC_IsEnabled>
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	483b      	ldr	r0, [pc, #236]	; (8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004a6e:	f7ff ff4f 	bl	8004910 <LL_ADC_IsEnabled>
 8004a72:	4603      	mov	r3, r0
 8004a74:	431c      	orrs	r4, r3
 8004a76:	483c      	ldr	r0, [pc, #240]	; (8004b68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004a78:	f7ff ff4a 	bl	8004910 <LL_ADC_IsEnabled>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	4323      	orrs	r3, r4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d056      	beq.n	8004b3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004a96:	f023 030f 	bic.w	r3, r3, #15
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	6811      	ldr	r1, [r2, #0]
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	6892      	ldr	r2, [r2, #8]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aa8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004aaa:	e047      	b.n	8004b3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ab6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ac0:	d004      	beq.n	8004acc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a23      	ldr	r2, [pc, #140]	; (8004b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d10f      	bne.n	8004aec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004acc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004ad0:	f7ff ff1e 	bl	8004910 <LL_ADC_IsEnabled>
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	481f      	ldr	r0, [pc, #124]	; (8004b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ad8:	f7ff ff1a 	bl	8004910 <LL_ADC_IsEnabled>
 8004adc:	4603      	mov	r3, r0
 8004ade:	4323      	orrs	r3, r4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bf0c      	ite	eq
 8004ae4:	2301      	moveq	r3, #1
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	e012      	b.n	8004b12 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004aec:	481a      	ldr	r0, [pc, #104]	; (8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004aee:	f7ff ff0f 	bl	8004910 <LL_ADC_IsEnabled>
 8004af2:	4604      	mov	r4, r0
 8004af4:	4819      	ldr	r0, [pc, #100]	; (8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004af6:	f7ff ff0b 	bl	8004910 <LL_ADC_IsEnabled>
 8004afa:	4603      	mov	r3, r0
 8004afc:	431c      	orrs	r4, r3
 8004afe:	481a      	ldr	r0, [pc, #104]	; (8004b68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004b00:	f7ff ff06 	bl	8004910 <LL_ADC_IsEnabled>
 8004b04:	4603      	mov	r3, r0
 8004b06:	4323      	orrs	r3, r4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	bf0c      	ite	eq
 8004b0c:	2301      	moveq	r3, #1
 8004b0e:	2300      	movne	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d012      	beq.n	8004b3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004b1e:	f023 030f 	bic.w	r3, r3, #15
 8004b22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004b24:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b26:	e009      	b.n	8004b3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2c:	f043 0220 	orr.w	r2, r3, #32
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004b3a:	e000      	b.n	8004b3e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3784      	adds	r7, #132	; 0x84
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd90      	pop	{r4, r7, pc}
 8004b52:	bf00      	nop
 8004b54:	50000100 	.word	0x50000100
 8004b58:	50000400 	.word	0x50000400
 8004b5c:	50000500 	.word	0x50000500
 8004b60:	50000300 	.word	0x50000300
 8004b64:	50000700 	.word	0x50000700
 8004b68:	50000600 	.word	0x50000600

08004b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b9e:	4a04      	ldr	r2, [pc, #16]	; (8004bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	60d3      	str	r3, [r2, #12]
}
 8004ba4:	bf00      	nop
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	e000ed00 	.word	0xe000ed00

08004bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bb8:	4b04      	ldr	r3, [pc, #16]	; (8004bcc <__NVIC_GetPriorityGrouping+0x18>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	0a1b      	lsrs	r3, r3, #8
 8004bbe:	f003 0307 	and.w	r3, r3, #7
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	e000ed00 	.word	0xe000ed00

08004bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	db0b      	blt.n	8004bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	f003 021f 	and.w	r2, r3, #31
 8004be8:	4907      	ldr	r1, [pc, #28]	; (8004c08 <__NVIC_EnableIRQ+0x38>)
 8004bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	e000e100 	.word	0xe000e100

08004c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	4603      	mov	r3, r0
 8004c14:	6039      	str	r1, [r7, #0]
 8004c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	db0a      	blt.n	8004c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	490c      	ldr	r1, [pc, #48]	; (8004c58 <__NVIC_SetPriority+0x4c>)
 8004c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2a:	0112      	lsls	r2, r2, #4
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	440b      	add	r3, r1
 8004c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c34:	e00a      	b.n	8004c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	4908      	ldr	r1, [pc, #32]	; (8004c5c <__NVIC_SetPriority+0x50>)
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	3b04      	subs	r3, #4
 8004c44:	0112      	lsls	r2, r2, #4
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	440b      	add	r3, r1
 8004c4a:	761a      	strb	r2, [r3, #24]
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	e000e100 	.word	0xe000e100
 8004c5c:	e000ed00 	.word	0xe000ed00

08004c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b089      	sub	sp, #36	; 0x24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f1c3 0307 	rsb	r3, r3, #7
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	bf28      	it	cs
 8004c7e:	2304      	movcs	r3, #4
 8004c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	3304      	adds	r3, #4
 8004c86:	2b06      	cmp	r3, #6
 8004c88:	d902      	bls.n	8004c90 <NVIC_EncodePriority+0x30>
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	3b03      	subs	r3, #3
 8004c8e:	e000      	b.n	8004c92 <NVIC_EncodePriority+0x32>
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	43da      	mvns	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	401a      	ands	r2, r3
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ca8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb2:	43d9      	mvns	r1, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb8:	4313      	orrs	r3, r2
         );
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3724      	adds	r7, #36	; 0x24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
	...

08004cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cd8:	d301      	bcc.n	8004cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e00f      	b.n	8004cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cde:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <SysTick_Config+0x40>)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ce6:	210f      	movs	r1, #15
 8004ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cec:	f7ff ff8e 	bl	8004c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cf0:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <SysTick_Config+0x40>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cf6:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <SysTick_Config+0x40>)
 8004cf8:	2207      	movs	r2, #7
 8004cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	e000e010 	.word	0xe000e010

08004d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff ff29 	bl	8004b6c <__NVIC_SetPriorityGrouping>
}
 8004d1a:	bf00      	nop
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b086      	sub	sp, #24
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	4603      	mov	r3, r0
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d30:	f7ff ff40 	bl	8004bb4 <__NVIC_GetPriorityGrouping>
 8004d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	6978      	ldr	r0, [r7, #20]
 8004d3c:	f7ff ff90 	bl	8004c60 <NVIC_EncodePriority>
 8004d40:	4602      	mov	r2, r0
 8004d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d46:	4611      	mov	r1, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff ff5f 	bl	8004c0c <__NVIC_SetPriority>
}
 8004d4e:	bf00      	nop
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff ff33 	bl	8004bd0 <__NVIC_EnableIRQ>
}
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff ffa4 	bl	8004cc8 <SysTick_Config>
 8004d80:	4603      	mov	r3, r0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e08d      	b.n	8004eba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	4b47      	ldr	r3, [pc, #284]	; (8004ec4 <HAL_DMA_Init+0x138>)
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d80f      	bhi.n	8004dca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	4b45      	ldr	r3, [pc, #276]	; (8004ec8 <HAL_DMA_Init+0x13c>)
 8004db2:	4413      	add	r3, r2
 8004db4:	4a45      	ldr	r2, [pc, #276]	; (8004ecc <HAL_DMA_Init+0x140>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	091b      	lsrs	r3, r3, #4
 8004dbc:	009a      	lsls	r2, r3, #2
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a42      	ldr	r2, [pc, #264]	; (8004ed0 <HAL_DMA_Init+0x144>)
 8004dc6:	641a      	str	r2, [r3, #64]	; 0x40
 8004dc8:	e00e      	b.n	8004de8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	4b40      	ldr	r3, [pc, #256]	; (8004ed4 <HAL_DMA_Init+0x148>)
 8004dd2:	4413      	add	r3, r2
 8004dd4:	4a3d      	ldr	r2, [pc, #244]	; (8004ecc <HAL_DMA_Init+0x140>)
 8004dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dda:	091b      	lsrs	r3, r3, #4
 8004ddc:	009a      	lsls	r2, r3, #2
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a3c      	ldr	r2, [pc, #240]	; (8004ed8 <HAL_DMA_Init+0x14c>)
 8004de6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f9b6 	bl	80051ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e48:	d102      	bne.n	8004e50 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e64:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d010      	beq.n	8004e90 <HAL_DMA_Init+0x104>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d80c      	bhi.n	8004e90 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f9d6 	bl	8005228 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	e008      	b.n	8004ea2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40020407 	.word	0x40020407
 8004ec8:	bffdfff8 	.word	0xbffdfff8
 8004ecc:	cccccccd 	.word	0xcccccccd
 8004ed0:	40020000 	.word	0x40020000
 8004ed4:	bffdfbf8 	.word	0xbffdfbf8
 8004ed8:	40020400 	.word	0x40020400

08004edc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d101      	bne.n	8004efc <HAL_DMA_Start_IT+0x20>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e066      	b.n	8004fca <HAL_DMA_Start_IT+0xee>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d155      	bne.n	8004fbc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0201 	bic.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	68b9      	ldr	r1, [r7, #8]
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f8fb 	bl	8005130 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d008      	beq.n	8004f54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 020e 	orr.w	r2, r2, #14
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e00f      	b.n	8004f74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0204 	bic.w	r2, r2, #4
 8004f62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 020a 	orr.w	r2, r2, #10
 8004f72:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d007      	beq.n	8004f92 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f90:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d007      	beq.n	8004faa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fa8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f042 0201 	orr.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	e005      	b.n	8004fc8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b084      	sub	sp, #16
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	409a      	lsls	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d026      	beq.n	800504c <HAL_DMA_IRQHandler+0x7a>
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d021      	beq.n	800504c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d107      	bne.n	8005026 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0204 	bic.w	r2, r2, #4
 8005024:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502a:	f003 021f 	and.w	r2, r3, #31
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	2104      	movs	r1, #4
 8005034:	fa01 f202 	lsl.w	r2, r1, r2
 8005038:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503e:	2b00      	cmp	r3, #0
 8005040:	d071      	beq.n	8005126 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800504a:	e06c      	b.n	8005126 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005050:	f003 031f 	and.w	r3, r3, #31
 8005054:	2202      	movs	r2, #2
 8005056:	409a      	lsls	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4013      	ands	r3, r2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d02e      	beq.n	80050be <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d029      	beq.n	80050be <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0320 	and.w	r3, r3, #32
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10b      	bne.n	8005090 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 020a 	bic.w	r2, r2, #10
 8005086:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005094:	f003 021f 	and.w	r2, r3, #31
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	2102      	movs	r1, #2
 800509e:	fa01 f202 	lsl.w	r2, r1, r2
 80050a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d038      	beq.n	8005126 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80050bc:	e033      	b.n	8005126 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c2:	f003 031f 	and.w	r3, r3, #31
 80050c6:	2208      	movs	r2, #8
 80050c8:	409a      	lsls	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	4013      	ands	r3, r2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d02a      	beq.n	8005128 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f003 0308 	and.w	r3, r3, #8
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d025      	beq.n	8005128 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 020e 	bic.w	r2, r2, #14
 80050ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f0:	f003 021f 	and.w	r2, r3, #31
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	2101      	movs	r1, #1
 80050fa:	fa01 f202 	lsl.w	r2, r1, r2
 80050fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511a:	2b00      	cmp	r3, #0
 800511c:	d004      	beq.n	8005128 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005126:	bf00      	nop
 8005128:	bf00      	nop
}
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005146:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514c:	2b00      	cmp	r3, #0
 800514e:	d004      	beq.n	800515a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005158:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515e:	f003 021f 	and.w	r2, r3, #31
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	2101      	movs	r1, #1
 8005168:	fa01 f202 	lsl.w	r2, r1, r2
 800516c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2b10      	cmp	r3, #16
 800517c:	d108      	bne.n	8005190 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800518e:	e007      	b.n	80051a0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	60da      	str	r2, [r3, #12]
}
 80051a0:	bf00      	nop
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	4b16      	ldr	r3, [pc, #88]	; (8005214 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80051bc:	429a      	cmp	r2, r3
 80051be:	d802      	bhi.n	80051c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80051c0:	4b15      	ldr	r3, [pc, #84]	; (8005218 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	e001      	b.n	80051ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80051c6:	4b15      	ldr	r3, [pc, #84]	; (800521c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80051c8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	3b08      	subs	r3, #8
 80051d6:	4a12      	ldr	r2, [pc, #72]	; (8005220 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	091b      	lsrs	r3, r3, #4
 80051de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e4:	089b      	lsrs	r3, r3, #2
 80051e6:	009a      	lsls	r2, r3, #2
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	4413      	add	r3, r2
 80051ec:	461a      	mov	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a0b      	ldr	r2, [pc, #44]	; (8005224 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80051f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	2201      	movs	r2, #1
 8005200:	409a      	lsls	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40020407 	.word	0x40020407
 8005218:	40020800 	.word	0x40020800
 800521c:	40020820 	.word	0x40020820
 8005220:	cccccccd 	.word	0xcccccccd
 8005224:	40020880 	.word	0x40020880

08005228 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	461a      	mov	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a08      	ldr	r2, [pc, #32]	; (800526c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800524a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	3b01      	subs	r3, #1
 8005250:	f003 031f 	and.w	r3, r3, #31
 8005254:	2201      	movs	r2, #1
 8005256:	409a      	lsls	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800525c:	bf00      	nop
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	1000823f 	.word	0x1000823f
 800526c:	40020940 	.word	0x40020940

08005270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800527e:	e15a      	b.n	8005536 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	2101      	movs	r1, #1
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	fa01 f303 	lsl.w	r3, r1, r3
 800528c:	4013      	ands	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 814c 	beq.w	8005530 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f003 0303 	and.w	r3, r3, #3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d005      	beq.n	80052b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d130      	bne.n	8005312 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	2203      	movs	r2, #3
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	43db      	mvns	r3, r3
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4013      	ands	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052e6:	2201      	movs	r2, #1
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
 80052ee:	43db      	mvns	r3, r3
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4013      	ands	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	091b      	lsrs	r3, r3, #4
 80052fc:	f003 0201 	and.w	r2, r3, #1
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4313      	orrs	r3, r2
 800530a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b03      	cmp	r3, #3
 800531c:	d017      	beq.n	800534e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	2203      	movs	r2, #3
 800532a:	fa02 f303 	lsl.w	r3, r2, r3
 800532e:	43db      	mvns	r3, r3
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4013      	ands	r3, r2
 8005334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d123      	bne.n	80053a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	08da      	lsrs	r2, r3, #3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3208      	adds	r2, #8
 8005362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005366:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	220f      	movs	r2, #15
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	43db      	mvns	r3, r3
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4013      	ands	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	691a      	ldr	r2, [r3, #16]
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	08da      	lsrs	r2, r3, #3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3208      	adds	r2, #8
 800539c:	6939      	ldr	r1, [r7, #16]
 800539e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	2203      	movs	r2, #3
 80053ae:	fa02 f303 	lsl.w	r3, r2, r3
 80053b2:	43db      	mvns	r3, r3
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	4013      	ands	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f003 0203 	and.w	r2, r3, #3
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 80a6 	beq.w	8005530 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053e4:	4b5b      	ldr	r3, [pc, #364]	; (8005554 <HAL_GPIO_Init+0x2e4>)
 80053e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e8:	4a5a      	ldr	r2, [pc, #360]	; (8005554 <HAL_GPIO_Init+0x2e4>)
 80053ea:	f043 0301 	orr.w	r3, r3, #1
 80053ee:	6613      	str	r3, [r2, #96]	; 0x60
 80053f0:	4b58      	ldr	r3, [pc, #352]	; (8005554 <HAL_GPIO_Init+0x2e4>)
 80053f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	60bb      	str	r3, [r7, #8]
 80053fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053fc:	4a56      	ldr	r2, [pc, #344]	; (8005558 <HAL_GPIO_Init+0x2e8>)
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	089b      	lsrs	r3, r3, #2
 8005402:	3302      	adds	r3, #2
 8005404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005408:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	220f      	movs	r2, #15
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	43db      	mvns	r3, r3
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4013      	ands	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005426:	d01f      	beq.n	8005468 <HAL_GPIO_Init+0x1f8>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a4c      	ldr	r2, [pc, #304]	; (800555c <HAL_GPIO_Init+0x2ec>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d019      	beq.n	8005464 <HAL_GPIO_Init+0x1f4>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a4b      	ldr	r2, [pc, #300]	; (8005560 <HAL_GPIO_Init+0x2f0>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d013      	beq.n	8005460 <HAL_GPIO_Init+0x1f0>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a4a      	ldr	r2, [pc, #296]	; (8005564 <HAL_GPIO_Init+0x2f4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00d      	beq.n	800545c <HAL_GPIO_Init+0x1ec>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a49      	ldr	r2, [pc, #292]	; (8005568 <HAL_GPIO_Init+0x2f8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d007      	beq.n	8005458 <HAL_GPIO_Init+0x1e8>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a48      	ldr	r2, [pc, #288]	; (800556c <HAL_GPIO_Init+0x2fc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d101      	bne.n	8005454 <HAL_GPIO_Init+0x1e4>
 8005450:	2305      	movs	r3, #5
 8005452:	e00a      	b.n	800546a <HAL_GPIO_Init+0x1fa>
 8005454:	2306      	movs	r3, #6
 8005456:	e008      	b.n	800546a <HAL_GPIO_Init+0x1fa>
 8005458:	2304      	movs	r3, #4
 800545a:	e006      	b.n	800546a <HAL_GPIO_Init+0x1fa>
 800545c:	2303      	movs	r3, #3
 800545e:	e004      	b.n	800546a <HAL_GPIO_Init+0x1fa>
 8005460:	2302      	movs	r3, #2
 8005462:	e002      	b.n	800546a <HAL_GPIO_Init+0x1fa>
 8005464:	2301      	movs	r3, #1
 8005466:	e000      	b.n	800546a <HAL_GPIO_Init+0x1fa>
 8005468:	2300      	movs	r3, #0
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	f002 0203 	and.w	r2, r2, #3
 8005470:	0092      	lsls	r2, r2, #2
 8005472:	4093      	lsls	r3, r2
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4313      	orrs	r3, r2
 8005478:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800547a:	4937      	ldr	r1, [pc, #220]	; (8005558 <HAL_GPIO_Init+0x2e8>)
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	089b      	lsrs	r3, r3, #2
 8005480:	3302      	adds	r3, #2
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005488:	4b39      	ldr	r3, [pc, #228]	; (8005570 <HAL_GPIO_Init+0x300>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	43db      	mvns	r3, r3
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4013      	ands	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80054ac:	4a30      	ldr	r2, [pc, #192]	; (8005570 <HAL_GPIO_Init+0x300>)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80054b2:	4b2f      	ldr	r3, [pc, #188]	; (8005570 <HAL_GPIO_Init+0x300>)
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	43db      	mvns	r3, r3
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4013      	ands	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80054d6:	4a26      	ldr	r2, [pc, #152]	; (8005570 <HAL_GPIO_Init+0x300>)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80054dc:	4b24      	ldr	r3, [pc, #144]	; (8005570 <HAL_GPIO_Init+0x300>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	43db      	mvns	r3, r3
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4013      	ands	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005500:	4a1b      	ldr	r2, [pc, #108]	; (8005570 <HAL_GPIO_Init+0x300>)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005506:	4b1a      	ldr	r3, [pc, #104]	; (8005570 <HAL_GPIO_Init+0x300>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	43db      	mvns	r3, r3
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4013      	ands	r3, r2
 8005514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4313      	orrs	r3, r2
 8005528:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800552a:	4a11      	ldr	r2, [pc, #68]	; (8005570 <HAL_GPIO_Init+0x300>)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	3301      	adds	r3, #1
 8005534:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	f47f ae9d 	bne.w	8005280 <HAL_GPIO_Init+0x10>
  }
}
 8005546:	bf00      	nop
 8005548:	bf00      	nop
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	40021000 	.word	0x40021000
 8005558:	40010000 	.word	0x40010000
 800555c:	48000400 	.word	0x48000400
 8005560:	48000800 	.word	0x48000800
 8005564:	48000c00 	.word	0x48000c00
 8005568:	48001000 	.word	0x48001000
 800556c:	48001400 	.word	0x48001400
 8005570:	40010400 	.word	0x40010400

08005574 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	887b      	ldrh	r3, [r7, #2]
 8005586:	4013      	ands	r3, r2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800558c:	2301      	movs	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]
 8005590:	e001      	b.n	8005596 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005592:	2300      	movs	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	460b      	mov	r3, r1
 80055ae:	807b      	strh	r3, [r7, #2]
 80055b0:	4613      	mov	r3, r2
 80055b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055b4:	787b      	ldrb	r3, [r7, #1]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055ba:	887a      	ldrh	r2, [r7, #2]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055c0:	e002      	b.n	80055c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055c2:	887a      	ldrh	r2, [r7, #2]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	4603      	mov	r3, r0
 80055dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80055de:	4b08      	ldr	r3, [pc, #32]	; (8005600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055e0:	695a      	ldr	r2, [r3, #20]
 80055e2:	88fb      	ldrh	r3, [r7, #6]
 80055e4:	4013      	ands	r3, r2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d006      	beq.n	80055f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055ea:	4a05      	ldr	r2, [pc, #20]	; (8005600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055ec:	88fb      	ldrh	r3, [r7, #6]
 80055ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055f0:	88fb      	ldrh	r3, [r7, #6]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fc fc4e 	bl	8001e94 <HAL_GPIO_EXTI_Callback>
  }
}
 80055f8:	bf00      	nop
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40010400 	.word	0x40010400

08005604 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d141      	bne.n	8005696 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005612:	4b4b      	ldr	r3, [pc, #300]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800561a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800561e:	d131      	bne.n	8005684 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005620:	4b47      	ldr	r3, [pc, #284]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005626:	4a46      	ldr	r2, [pc, #280]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800562c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005630:	4b43      	ldr	r3, [pc, #268]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005638:	4a41      	ldr	r2, [pc, #260]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800563a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800563e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005640:	4b40      	ldr	r3, [pc, #256]	; (8005744 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2232      	movs	r2, #50	; 0x32
 8005646:	fb02 f303 	mul.w	r3, r2, r3
 800564a:	4a3f      	ldr	r2, [pc, #252]	; (8005748 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800564c:	fba2 2303 	umull	r2, r3, r2, r3
 8005650:	0c9b      	lsrs	r3, r3, #18
 8005652:	3301      	adds	r3, #1
 8005654:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005656:	e002      	b.n	800565e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3b01      	subs	r3, #1
 800565c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800565e:	4b38      	ldr	r3, [pc, #224]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800566a:	d102      	bne.n	8005672 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1f2      	bne.n	8005658 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005672:	4b33      	ldr	r3, [pc, #204]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800567a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567e:	d158      	bne.n	8005732 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e057      	b.n	8005734 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005684:	4b2e      	ldr	r3, [pc, #184]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800568a:	4a2d      	ldr	r2, [pc, #180]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800568c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005690:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005694:	e04d      	b.n	8005732 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800569c:	d141      	bne.n	8005722 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800569e:	4b28      	ldr	r3, [pc, #160]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056aa:	d131      	bne.n	8005710 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056ac:	4b24      	ldr	r3, [pc, #144]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056b2:	4a23      	ldr	r2, [pc, #140]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056bc:	4b20      	ldr	r3, [pc, #128]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056c4:	4a1e      	ldr	r2, [pc, #120]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056cc:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2232      	movs	r2, #50	; 0x32
 80056d2:	fb02 f303 	mul.w	r3, r2, r3
 80056d6:	4a1c      	ldr	r2, [pc, #112]	; (8005748 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056d8:	fba2 2303 	umull	r2, r3, r2, r3
 80056dc:	0c9b      	lsrs	r3, r3, #18
 80056de:	3301      	adds	r3, #1
 80056e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056e2:	e002      	b.n	80056ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056ea:	4b15      	ldr	r3, [pc, #84]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f6:	d102      	bne.n	80056fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f2      	bne.n	80056e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056fe:	4b10      	ldr	r3, [pc, #64]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570a:	d112      	bne.n	8005732 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e011      	b.n	8005734 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005710:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005716:	4a0a      	ldr	r2, [pc, #40]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800571c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005720:	e007      	b.n	8005732 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005722:	4b07      	ldr	r3, [pc, #28]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800572a:	4a05      	ldr	r2, [pc, #20]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800572c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005730:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	40007000 	.word	0x40007000
 8005744:	20000018 	.word	0x20000018
 8005748:	431bde83 	.word	0x431bde83

0800574c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005750:	4b05      	ldr	r3, [pc, #20]	; (8005768 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	4a04      	ldr	r2, [pc, #16]	; (8005768 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800575a:	6093      	str	r3, [r2, #8]
}
 800575c:	bf00      	nop
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40007000 	.word	0x40007000

0800576c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e2fe      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d075      	beq.n	8005876 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800578a:	4b97      	ldr	r3, [pc, #604]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 030c 	and.w	r3, r3, #12
 8005792:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005794:	4b94      	ldr	r3, [pc, #592]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0303 	and.w	r3, r3, #3
 800579c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b0c      	cmp	r3, #12
 80057a2:	d102      	bne.n	80057aa <HAL_RCC_OscConfig+0x3e>
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	d002      	beq.n	80057b0 <HAL_RCC_OscConfig+0x44>
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d10b      	bne.n	80057c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b0:	4b8d      	ldr	r3, [pc, #564]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d05b      	beq.n	8005874 <HAL_RCC_OscConfig+0x108>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d157      	bne.n	8005874 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e2d9      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d0:	d106      	bne.n	80057e0 <HAL_RCC_OscConfig+0x74>
 80057d2:	4b85      	ldr	r3, [pc, #532]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a84      	ldr	r2, [pc, #528]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 80057d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	e01d      	b.n	800581c <HAL_RCC_OscConfig+0xb0>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057e8:	d10c      	bne.n	8005804 <HAL_RCC_OscConfig+0x98>
 80057ea:	4b7f      	ldr	r3, [pc, #508]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a7e      	ldr	r2, [pc, #504]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 80057f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	4b7c      	ldr	r3, [pc, #496]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a7b      	ldr	r2, [pc, #492]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 80057fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	e00b      	b.n	800581c <HAL_RCC_OscConfig+0xb0>
 8005804:	4b78      	ldr	r3, [pc, #480]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a77      	ldr	r2, [pc, #476]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 800580a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	4b75      	ldr	r3, [pc, #468]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a74      	ldr	r2, [pc, #464]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 8005816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800581a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d013      	beq.n	800584c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005824:	f7fd fe10 	bl	8003448 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800582c:	f7fd fe0c 	bl	8003448 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b64      	cmp	r3, #100	; 0x64
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e29e      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800583e:	4b6a      	ldr	r3, [pc, #424]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f0      	beq.n	800582c <HAL_RCC_OscConfig+0xc0>
 800584a:	e014      	b.n	8005876 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584c:	f7fd fdfc 	bl	8003448 <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005854:	f7fd fdf8 	bl	8003448 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b64      	cmp	r3, #100	; 0x64
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e28a      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005866:	4b60      	ldr	r3, [pc, #384]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f0      	bne.n	8005854 <HAL_RCC_OscConfig+0xe8>
 8005872:	e000      	b.n	8005876 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d075      	beq.n	800596e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005882:	4b59      	ldr	r3, [pc, #356]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 030c 	and.w	r3, r3, #12
 800588a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800588c:	4b56      	ldr	r3, [pc, #344]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f003 0303 	and.w	r3, r3, #3
 8005894:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b0c      	cmp	r3, #12
 800589a:	d102      	bne.n	80058a2 <HAL_RCC_OscConfig+0x136>
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d002      	beq.n	80058a8 <HAL_RCC_OscConfig+0x13c>
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d11f      	bne.n	80058e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058a8:	4b4f      	ldr	r3, [pc, #316]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCC_OscConfig+0x154>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e25d      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c0:	4b49      	ldr	r3, [pc, #292]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	061b      	lsls	r3, r3, #24
 80058ce:	4946      	ldr	r1, [pc, #280]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80058d4:	4b45      	ldr	r3, [pc, #276]	; (80059ec <HAL_RCC_OscConfig+0x280>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fd fd69 	bl	80033b0 <HAL_InitTick>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d043      	beq.n	800596c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e249      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d023      	beq.n	8005938 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058f0:	4b3d      	ldr	r3, [pc, #244]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a3c      	ldr	r2, [pc, #240]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 80058f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fc:	f7fd fda4 	bl	8003448 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005904:	f7fd fda0 	bl	8003448 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e232      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005916:	4b34      	ldr	r3, [pc, #208]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0f0      	beq.n	8005904 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005922:	4b31      	ldr	r3, [pc, #196]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	061b      	lsls	r3, r3, #24
 8005930:	492d      	ldr	r1, [pc, #180]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 8005932:	4313      	orrs	r3, r2
 8005934:	604b      	str	r3, [r1, #4]
 8005936:	e01a      	b.n	800596e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005938:	4b2b      	ldr	r3, [pc, #172]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a2a      	ldr	r2, [pc, #168]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 800593e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005944:	f7fd fd80 	bl	8003448 <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800594c:	f7fd fd7c 	bl	8003448 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e20e      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800595e:	4b22      	ldr	r3, [pc, #136]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f0      	bne.n	800594c <HAL_RCC_OscConfig+0x1e0>
 800596a:	e000      	b.n	800596e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800596c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0308 	and.w	r3, r3, #8
 8005976:	2b00      	cmp	r3, #0
 8005978:	d041      	beq.n	80059fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d01c      	beq.n	80059bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005982:	4b19      	ldr	r3, [pc, #100]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 8005984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005988:	4a17      	ldr	r2, [pc, #92]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 800598a:	f043 0301 	orr.w	r3, r3, #1
 800598e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005992:	f7fd fd59 	bl	8003448 <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005998:	e008      	b.n	80059ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800599a:	f7fd fd55 	bl	8003448 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e1e7      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059ac:	4b0e      	ldr	r3, [pc, #56]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 80059ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0ef      	beq.n	800599a <HAL_RCC_OscConfig+0x22e>
 80059ba:	e020      	b.n	80059fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059bc:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 80059be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059c2:	4a09      	ldr	r2, [pc, #36]	; (80059e8 <HAL_RCC_OscConfig+0x27c>)
 80059c4:	f023 0301 	bic.w	r3, r3, #1
 80059c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059cc:	f7fd fd3c 	bl	8003448 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059d2:	e00d      	b.n	80059f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059d4:	f7fd fd38 	bl	8003448 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d906      	bls.n	80059f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e1ca      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>
 80059e6:	bf00      	nop
 80059e8:	40021000 	.word	0x40021000
 80059ec:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059f0:	4b8c      	ldr	r3, [pc, #560]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 80059f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1ea      	bne.n	80059d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0304 	and.w	r3, r3, #4
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 80a6 	beq.w	8005b58 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a10:	4b84      	ldr	r3, [pc, #528]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <HAL_RCC_OscConfig+0x2b4>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e000      	b.n	8005a22 <HAL_RCC_OscConfig+0x2b6>
 8005a20:	2300      	movs	r3, #0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00d      	beq.n	8005a42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a26:	4b7f      	ldr	r3, [pc, #508]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2a:	4a7e      	ldr	r2, [pc, #504]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a30:	6593      	str	r3, [r2, #88]	; 0x58
 8005a32:	4b7c      	ldr	r3, [pc, #496]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a42:	4b79      	ldr	r3, [pc, #484]	; (8005c28 <HAL_RCC_OscConfig+0x4bc>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d118      	bne.n	8005a80 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a4e:	4b76      	ldr	r3, [pc, #472]	; (8005c28 <HAL_RCC_OscConfig+0x4bc>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a75      	ldr	r2, [pc, #468]	; (8005c28 <HAL_RCC_OscConfig+0x4bc>)
 8005a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a5a:	f7fd fcf5 	bl	8003448 <HAL_GetTick>
 8005a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a60:	e008      	b.n	8005a74 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a62:	f7fd fcf1 	bl	8003448 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d901      	bls.n	8005a74 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e183      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a74:	4b6c      	ldr	r3, [pc, #432]	; (8005c28 <HAL_RCC_OscConfig+0x4bc>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d0f0      	beq.n	8005a62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d108      	bne.n	8005a9a <HAL_RCC_OscConfig+0x32e>
 8005a88:	4b66      	ldr	r3, [pc, #408]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8e:	4a65      	ldr	r2, [pc, #404]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005a90:	f043 0301 	orr.w	r3, r3, #1
 8005a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a98:	e024      	b.n	8005ae4 <HAL_RCC_OscConfig+0x378>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b05      	cmp	r3, #5
 8005aa0:	d110      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x358>
 8005aa2:	4b60      	ldr	r3, [pc, #384]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa8:	4a5e      	ldr	r2, [pc, #376]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005aaa:	f043 0304 	orr.w	r3, r3, #4
 8005aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ab2:	4b5c      	ldr	r3, [pc, #368]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab8:	4a5a      	ldr	r2, [pc, #360]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005aba:	f043 0301 	orr.w	r3, r3, #1
 8005abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ac2:	e00f      	b.n	8005ae4 <HAL_RCC_OscConfig+0x378>
 8005ac4:	4b57      	ldr	r3, [pc, #348]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aca:	4a56      	ldr	r2, [pc, #344]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005acc:	f023 0301 	bic.w	r3, r3, #1
 8005ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ad4:	4b53      	ldr	r3, [pc, #332]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ada:	4a52      	ldr	r2, [pc, #328]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005adc:	f023 0304 	bic.w	r3, r3, #4
 8005ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d016      	beq.n	8005b1a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aec:	f7fd fcac 	bl	8003448 <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005af2:	e00a      	b.n	8005b0a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005af4:	f7fd fca8 	bl	8003448 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e138      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b0a:	4b46      	ldr	r3, [pc, #280]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0ed      	beq.n	8005af4 <HAL_RCC_OscConfig+0x388>
 8005b18:	e015      	b.n	8005b46 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b1a:	f7fd fc95 	bl	8003448 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b20:	e00a      	b.n	8005b38 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b22:	f7fd fc91 	bl	8003448 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e121      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b38:	4b3a      	ldr	r3, [pc, #232]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1ed      	bne.n	8005b22 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b46:	7ffb      	ldrb	r3, [r7, #31]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d105      	bne.n	8005b58 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b4c:	4b35      	ldr	r3, [pc, #212]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b50:	4a34      	ldr	r2, [pc, #208]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b56:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d03c      	beq.n	8005bde <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d01c      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b6c:	4b2d      	ldr	r3, [pc, #180]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b72:	4a2c      	ldr	r2, [pc, #176]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005b74:	f043 0301 	orr.w	r3, r3, #1
 8005b78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7c:	f7fd fc64 	bl	8003448 <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b82:	e008      	b.n	8005b96 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b84:	f7fd fc60 	bl	8003448 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e0f2      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b96:	4b23      	ldr	r3, [pc, #140]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0ef      	beq.n	8005b84 <HAL_RCC_OscConfig+0x418>
 8005ba4:	e01b      	b.n	8005bde <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ba6:	4b1f      	ldr	r3, [pc, #124]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005ba8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bac:	4a1d      	ldr	r2, [pc, #116]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005bae:	f023 0301 	bic.w	r3, r3, #1
 8005bb2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb6:	f7fd fc47 	bl	8003448 <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005bbc:	e008      	b.n	8005bd0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bbe:	f7fd fc43 	bl	8003448 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e0d5      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005bd0:	4b14      	ldr	r3, [pc, #80]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005bd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1ef      	bne.n	8005bbe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 80c9 	beq.w	8005d7a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005be8:	4b0e      	ldr	r3, [pc, #56]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f003 030c 	and.w	r3, r3, #12
 8005bf0:	2b0c      	cmp	r3, #12
 8005bf2:	f000 8083 	beq.w	8005cfc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d15e      	bne.n	8005cbc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfe:	4b09      	ldr	r3, [pc, #36]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a08      	ldr	r2, [pc, #32]	; (8005c24 <HAL_RCC_OscConfig+0x4b8>)
 8005c04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0a:	f7fd fc1d 	bl	8003448 <HAL_GetTick>
 8005c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c10:	e00c      	b.n	8005c2c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c12:	f7fd fc19 	bl	8003448 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d905      	bls.n	8005c2c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e0ab      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>
 8005c24:	40021000 	.word	0x40021000
 8005c28:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c2c:	4b55      	ldr	r3, [pc, #340]	; (8005d84 <HAL_RCC_OscConfig+0x618>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1ec      	bne.n	8005c12 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c38:	4b52      	ldr	r3, [pc, #328]	; (8005d84 <HAL_RCC_OscConfig+0x618>)
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	4b52      	ldr	r3, [pc, #328]	; (8005d88 <HAL_RCC_OscConfig+0x61c>)
 8005c3e:	4013      	ands	r3, r2
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6a11      	ldr	r1, [r2, #32]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c48:	3a01      	subs	r2, #1
 8005c4a:	0112      	lsls	r2, r2, #4
 8005c4c:	4311      	orrs	r1, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005c52:	0212      	lsls	r2, r2, #8
 8005c54:	4311      	orrs	r1, r2
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c5a:	0852      	lsrs	r2, r2, #1
 8005c5c:	3a01      	subs	r2, #1
 8005c5e:	0552      	lsls	r2, r2, #21
 8005c60:	4311      	orrs	r1, r2
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c66:	0852      	lsrs	r2, r2, #1
 8005c68:	3a01      	subs	r2, #1
 8005c6a:	0652      	lsls	r2, r2, #25
 8005c6c:	4311      	orrs	r1, r2
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c72:	06d2      	lsls	r2, r2, #27
 8005c74:	430a      	orrs	r2, r1
 8005c76:	4943      	ldr	r1, [pc, #268]	; (8005d84 <HAL_RCC_OscConfig+0x618>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c7c:	4b41      	ldr	r3, [pc, #260]	; (8005d84 <HAL_RCC_OscConfig+0x618>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a40      	ldr	r2, [pc, #256]	; (8005d84 <HAL_RCC_OscConfig+0x618>)
 8005c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c86:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c88:	4b3e      	ldr	r3, [pc, #248]	; (8005d84 <HAL_RCC_OscConfig+0x618>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	4a3d      	ldr	r2, [pc, #244]	; (8005d84 <HAL_RCC_OscConfig+0x618>)
 8005c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c94:	f7fd fbd8 	bl	8003448 <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c9a:	e008      	b.n	8005cae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c9c:	f7fd fbd4 	bl	8003448 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e066      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cae:	4b35      	ldr	r3, [pc, #212]	; (8005d84 <HAL_RCC_OscConfig+0x618>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0f0      	beq.n	8005c9c <HAL_RCC_OscConfig+0x530>
 8005cba:	e05e      	b.n	8005d7a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cbc:	4b31      	ldr	r3, [pc, #196]	; (8005d84 <HAL_RCC_OscConfig+0x618>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a30      	ldr	r2, [pc, #192]	; (8005d84 <HAL_RCC_OscConfig+0x618>)
 8005cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc8:	f7fd fbbe 	bl	8003448 <HAL_GetTick>
 8005ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd0:	f7fd fbba 	bl	8003448 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e04c      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ce2:	4b28      	ldr	r3, [pc, #160]	; (8005d84 <HAL_RCC_OscConfig+0x618>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1f0      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005cee:	4b25      	ldr	r3, [pc, #148]	; (8005d84 <HAL_RCC_OscConfig+0x618>)
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	4924      	ldr	r1, [pc, #144]	; (8005d84 <HAL_RCC_OscConfig+0x618>)
 8005cf4:	4b25      	ldr	r3, [pc, #148]	; (8005d8c <HAL_RCC_OscConfig+0x620>)
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	60cb      	str	r3, [r1, #12]
 8005cfa:	e03e      	b.n	8005d7a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e039      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005d08:	4b1e      	ldr	r3, [pc, #120]	; (8005d84 <HAL_RCC_OscConfig+0x618>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f003 0203 	and.w	r2, r3, #3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d12c      	bne.n	8005d76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	3b01      	subs	r3, #1
 8005d28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d123      	bne.n	8005d76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d38:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d11b      	bne.n	8005d76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d113      	bne.n	8005d76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d58:	085b      	lsrs	r3, r3, #1
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d109      	bne.n	8005d76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6c:	085b      	lsrs	r3, r3, #1
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d001      	beq.n	8005d7a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e000      	b.n	8005d7c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3720      	adds	r7, #32
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40021000 	.word	0x40021000
 8005d88:	019f800c 	.word	0x019f800c
 8005d8c:	feeefffc 	.word	0xfeeefffc

08005d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e11e      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005da8:	4b91      	ldr	r3, [pc, #580]	; (8005ff0 <HAL_RCC_ClockConfig+0x260>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 030f 	and.w	r3, r3, #15
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d910      	bls.n	8005dd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005db6:	4b8e      	ldr	r3, [pc, #568]	; (8005ff0 <HAL_RCC_ClockConfig+0x260>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f023 020f 	bic.w	r2, r3, #15
 8005dbe:	498c      	ldr	r1, [pc, #560]	; (8005ff0 <HAL_RCC_ClockConfig+0x260>)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc6:	4b8a      	ldr	r3, [pc, #552]	; (8005ff0 <HAL_RCC_ClockConfig+0x260>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d001      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e106      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d073      	beq.n	8005ecc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	d129      	bne.n	8005e40 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dec:	4b81      	ldr	r3, [pc, #516]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0f4      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005dfc:	f000 f99e 	bl	800613c <RCC_GetSysClockFreqFromPLLSource>
 8005e00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	4a7c      	ldr	r2, [pc, #496]	; (8005ff8 <HAL_RCC_ClockConfig+0x268>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d93f      	bls.n	8005e8a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e0a:	4b7a      	ldr	r3, [pc, #488]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d009      	beq.n	8005e2a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d033      	beq.n	8005e8a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d12f      	bne.n	8005e8a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e2a:	4b72      	ldr	r3, [pc, #456]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e32:	4a70      	ldr	r2, [pc, #448]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005e3a:	2380      	movs	r3, #128	; 0x80
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	e024      	b.n	8005e8a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d107      	bne.n	8005e58 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e48:	4b6a      	ldr	r3, [pc, #424]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d109      	bne.n	8005e68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e0c6      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e58:	4b66      	ldr	r3, [pc, #408]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e0be      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005e68:	f000 f8ce 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 8005e6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	4a61      	ldr	r2, [pc, #388]	; (8005ff8 <HAL_RCC_ClockConfig+0x268>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d909      	bls.n	8005e8a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e76:	4b5f      	ldr	r3, [pc, #380]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e7e:	4a5d      	ldr	r2, [pc, #372]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005e86:	2380      	movs	r3, #128	; 0x80
 8005e88:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e8a:	4b5a      	ldr	r3, [pc, #360]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f023 0203 	bic.w	r2, r3, #3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	4957      	ldr	r1, [pc, #348]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e9c:	f7fd fad4 	bl	8003448 <HAL_GetTick>
 8005ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ea2:	e00a      	b.n	8005eba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ea4:	f7fd fad0 	bl	8003448 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e095      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eba:	4b4e      	ldr	r3, [pc, #312]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 020c 	and.w	r2, r3, #12
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d1eb      	bne.n	8005ea4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d023      	beq.n	8005f20 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d005      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ee4:	4b43      	ldr	r3, [pc, #268]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	4a42      	ldr	r2, [pc, #264]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005eea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005eee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d007      	beq.n	8005f0c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005efc:	4b3d      	ldr	r3, [pc, #244]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005f04:	4a3b      	ldr	r2, [pc, #236]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005f06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f0c:	4b39      	ldr	r3, [pc, #228]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	4936      	ldr	r1, [pc, #216]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	608b      	str	r3, [r1, #8]
 8005f1e:	e008      	b.n	8005f32 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b80      	cmp	r3, #128	; 0x80
 8005f24:	d105      	bne.n	8005f32 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005f26:	4b33      	ldr	r3, [pc, #204]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	4a32      	ldr	r2, [pc, #200]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005f2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f32:	4b2f      	ldr	r3, [pc, #188]	; (8005ff0 <HAL_RCC_ClockConfig+0x260>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 030f 	and.w	r3, r3, #15
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d21d      	bcs.n	8005f7c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f40:	4b2b      	ldr	r3, [pc, #172]	; (8005ff0 <HAL_RCC_ClockConfig+0x260>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f023 020f 	bic.w	r2, r3, #15
 8005f48:	4929      	ldr	r1, [pc, #164]	; (8005ff0 <HAL_RCC_ClockConfig+0x260>)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005f50:	f7fd fa7a 	bl	8003448 <HAL_GetTick>
 8005f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f56:	e00a      	b.n	8005f6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f58:	f7fd fa76 	bl	8003448 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e03b      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f6e:	4b20      	ldr	r3, [pc, #128]	; (8005ff0 <HAL_RCC_ClockConfig+0x260>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d1ed      	bne.n	8005f58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d008      	beq.n	8005f9a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f88:	4b1a      	ldr	r3, [pc, #104]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	4917      	ldr	r1, [pc, #92]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0308 	and.w	r3, r3, #8
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d009      	beq.n	8005fba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fa6:	4b13      	ldr	r3, [pc, #76]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	490f      	ldr	r1, [pc, #60]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005fba:	f000 f825 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <HAL_RCC_ClockConfig+0x264>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	091b      	lsrs	r3, r3, #4
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	490c      	ldr	r1, [pc, #48]	; (8005ffc <HAL_RCC_ClockConfig+0x26c>)
 8005fcc:	5ccb      	ldrb	r3, [r1, r3]
 8005fce:	f003 031f 	and.w	r3, r3, #31
 8005fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd6:	4a0a      	ldr	r2, [pc, #40]	; (8006000 <HAL_RCC_ClockConfig+0x270>)
 8005fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005fda:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <HAL_RCC_ClockConfig+0x274>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fd f9e6 	bl	80033b0 <HAL_InitTick>
 8005fe4:	4603      	mov	r3, r0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	40022000 	.word	0x40022000
 8005ff4:	40021000 	.word	0x40021000
 8005ff8:	04c4b400 	.word	0x04c4b400
 8005ffc:	08009040 	.word	0x08009040
 8006000:	20000018 	.word	0x20000018
 8006004:	2000001c 	.word	0x2000001c

08006008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800600e:	4b2c      	ldr	r3, [pc, #176]	; (80060c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 030c 	and.w	r3, r3, #12
 8006016:	2b04      	cmp	r3, #4
 8006018:	d102      	bne.n	8006020 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800601a:	4b2a      	ldr	r3, [pc, #168]	; (80060c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800601c:	613b      	str	r3, [r7, #16]
 800601e:	e047      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006020:	4b27      	ldr	r3, [pc, #156]	; (80060c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f003 030c 	and.w	r3, r3, #12
 8006028:	2b08      	cmp	r3, #8
 800602a:	d102      	bne.n	8006032 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800602c:	4b26      	ldr	r3, [pc, #152]	; (80060c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800602e:	613b      	str	r3, [r7, #16]
 8006030:	e03e      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006032:	4b23      	ldr	r3, [pc, #140]	; (80060c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 030c 	and.w	r3, r3, #12
 800603a:	2b0c      	cmp	r3, #12
 800603c:	d136      	bne.n	80060ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800603e:	4b20      	ldr	r3, [pc, #128]	; (80060c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f003 0303 	and.w	r3, r3, #3
 8006046:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006048:	4b1d      	ldr	r3, [pc, #116]	; (80060c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	091b      	lsrs	r3, r3, #4
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	3301      	adds	r3, #1
 8006054:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b03      	cmp	r3, #3
 800605a:	d10c      	bne.n	8006076 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800605c:	4a1a      	ldr	r2, [pc, #104]	; (80060c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	fbb2 f3f3 	udiv	r3, r2, r3
 8006064:	4a16      	ldr	r2, [pc, #88]	; (80060c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006066:	68d2      	ldr	r2, [r2, #12]
 8006068:	0a12      	lsrs	r2, r2, #8
 800606a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800606e:	fb02 f303 	mul.w	r3, r2, r3
 8006072:	617b      	str	r3, [r7, #20]
      break;
 8006074:	e00c      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006076:	4a13      	ldr	r2, [pc, #76]	; (80060c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	fbb2 f3f3 	udiv	r3, r2, r3
 800607e:	4a10      	ldr	r2, [pc, #64]	; (80060c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006080:	68d2      	ldr	r2, [r2, #12]
 8006082:	0a12      	lsrs	r2, r2, #8
 8006084:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006088:	fb02 f303 	mul.w	r3, r2, r3
 800608c:	617b      	str	r3, [r7, #20]
      break;
 800608e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006090:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	0e5b      	lsrs	r3, r3, #25
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	3301      	adds	r3, #1
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a8:	613b      	str	r3, [r7, #16]
 80060aa:	e001      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80060b0:	693b      	ldr	r3, [r7, #16]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	371c      	adds	r7, #28
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	40021000 	.word	0x40021000
 80060c4:	00f42400 	.word	0x00f42400
 80060c8:	016e3600 	.word	0x016e3600

080060cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060d0:	4b03      	ldr	r3, [pc, #12]	; (80060e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80060d2:	681b      	ldr	r3, [r3, #0]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	20000018 	.word	0x20000018

080060e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80060e8:	f7ff fff0 	bl	80060cc <HAL_RCC_GetHCLKFreq>
 80060ec:	4602      	mov	r2, r0
 80060ee:	4b06      	ldr	r3, [pc, #24]	; (8006108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	0a1b      	lsrs	r3, r3, #8
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	4904      	ldr	r1, [pc, #16]	; (800610c <HAL_RCC_GetPCLK1Freq+0x28>)
 80060fa:	5ccb      	ldrb	r3, [r1, r3]
 80060fc:	f003 031f 	and.w	r3, r3, #31
 8006100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006104:	4618      	mov	r0, r3
 8006106:	bd80      	pop	{r7, pc}
 8006108:	40021000 	.word	0x40021000
 800610c:	08009050 	.word	0x08009050

08006110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006114:	f7ff ffda 	bl	80060cc <HAL_RCC_GetHCLKFreq>
 8006118:	4602      	mov	r2, r0
 800611a:	4b06      	ldr	r3, [pc, #24]	; (8006134 <HAL_RCC_GetPCLK2Freq+0x24>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	0adb      	lsrs	r3, r3, #11
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	4904      	ldr	r1, [pc, #16]	; (8006138 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006126:	5ccb      	ldrb	r3, [r1, r3]
 8006128:	f003 031f 	and.w	r3, r3, #31
 800612c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006130:	4618      	mov	r0, r3
 8006132:	bd80      	pop	{r7, pc}
 8006134:	40021000 	.word	0x40021000
 8006138:	08009050 	.word	0x08009050

0800613c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006142:	4b1e      	ldr	r3, [pc, #120]	; (80061bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800614c:	4b1b      	ldr	r3, [pc, #108]	; (80061bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	091b      	lsrs	r3, r3, #4
 8006152:	f003 030f 	and.w	r3, r3, #15
 8006156:	3301      	adds	r3, #1
 8006158:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	2b03      	cmp	r3, #3
 800615e:	d10c      	bne.n	800617a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006160:	4a17      	ldr	r2, [pc, #92]	; (80061c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	fbb2 f3f3 	udiv	r3, r2, r3
 8006168:	4a14      	ldr	r2, [pc, #80]	; (80061bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800616a:	68d2      	ldr	r2, [r2, #12]
 800616c:	0a12      	lsrs	r2, r2, #8
 800616e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006172:	fb02 f303 	mul.w	r3, r2, r3
 8006176:	617b      	str	r3, [r7, #20]
    break;
 8006178:	e00c      	b.n	8006194 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800617a:	4a12      	ldr	r2, [pc, #72]	; (80061c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006182:	4a0e      	ldr	r2, [pc, #56]	; (80061bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006184:	68d2      	ldr	r2, [r2, #12]
 8006186:	0a12      	lsrs	r2, r2, #8
 8006188:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800618c:	fb02 f303 	mul.w	r3, r2, r3
 8006190:	617b      	str	r3, [r7, #20]
    break;
 8006192:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006194:	4b09      	ldr	r3, [pc, #36]	; (80061bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	0e5b      	lsrs	r3, r3, #25
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	3301      	adds	r3, #1
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80061ae:	687b      	ldr	r3, [r7, #4]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	40021000 	.word	0x40021000
 80061c0:	016e3600 	.word	0x016e3600
 80061c4:	00f42400 	.word	0x00f42400

080061c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061d0:	2300      	movs	r3, #0
 80061d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061d4:	2300      	movs	r3, #0
 80061d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 8098 	beq.w	8006316 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061e6:	2300      	movs	r3, #0
 80061e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ea:	4b43      	ldr	r3, [pc, #268]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10d      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061f6:	4b40      	ldr	r3, [pc, #256]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061fa:	4a3f      	ldr	r2, [pc, #252]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006200:	6593      	str	r3, [r2, #88]	; 0x58
 8006202:	4b3d      	ldr	r3, [pc, #244]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800620a:	60bb      	str	r3, [r7, #8]
 800620c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800620e:	2301      	movs	r3, #1
 8006210:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006212:	4b3a      	ldr	r3, [pc, #232]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a39      	ldr	r2, [pc, #228]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800621c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800621e:	f7fd f913 	bl	8003448 <HAL_GetTick>
 8006222:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006224:	e009      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006226:	f7fd f90f 	bl	8003448 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d902      	bls.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	74fb      	strb	r3, [r7, #19]
        break;
 8006238:	e005      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800623a:	4b30      	ldr	r3, [pc, #192]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0ef      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006246:	7cfb      	ldrb	r3, [r7, #19]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d159      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800624c:	4b2a      	ldr	r3, [pc, #168]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800624e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006256:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01e      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	429a      	cmp	r2, r3
 8006266:	d019      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006268:	4b23      	ldr	r3, [pc, #140]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800626a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006272:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006274:	4b20      	ldr	r3, [pc, #128]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627a:	4a1f      	ldr	r2, [pc, #124]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800627c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006284:	4b1c      	ldr	r3, [pc, #112]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628a:	4a1b      	ldr	r2, [pc, #108]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800628c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006294:	4a18      	ldr	r2, [pc, #96]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d016      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a6:	f7fd f8cf 	bl	8003448 <HAL_GetTick>
 80062aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062ac:	e00b      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ae:	f7fd f8cb 	bl	8003448 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062bc:	4293      	cmp	r3, r2
 80062be:	d902      	bls.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	74fb      	strb	r3, [r7, #19]
            break;
 80062c4:	e006      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062c6:	4b0c      	ldr	r3, [pc, #48]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d0ec      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80062d4:	7cfb      	ldrb	r3, [r7, #19]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10b      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062da:	4b07      	ldr	r3, [pc, #28]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e8:	4903      	ldr	r1, [pc, #12]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80062f0:	e008      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062f2:	7cfb      	ldrb	r3, [r7, #19]
 80062f4:	74bb      	strb	r3, [r7, #18]
 80062f6:	e005      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80062f8:	40021000 	.word	0x40021000
 80062fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006300:	7cfb      	ldrb	r3, [r7, #19]
 8006302:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006304:	7c7b      	ldrb	r3, [r7, #17]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d105      	bne.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800630a:	4ba7      	ldr	r3, [pc, #668]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800630c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800630e:	4aa6      	ldr	r2, [pc, #664]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006314:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006322:	4ba1      	ldr	r3, [pc, #644]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006328:	f023 0203 	bic.w	r2, r3, #3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	499d      	ldr	r1, [pc, #628]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006344:	4b98      	ldr	r3, [pc, #608]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634a:	f023 020c 	bic.w	r2, r3, #12
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	4995      	ldr	r1, [pc, #596]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006354:	4313      	orrs	r3, r2
 8006356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00a      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006366:	4b90      	ldr	r3, [pc, #576]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	498c      	ldr	r1, [pc, #560]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006376:	4313      	orrs	r3, r2
 8006378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0308 	and.w	r3, r3, #8
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00a      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006388:	4b87      	ldr	r3, [pc, #540]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800638a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	4984      	ldr	r1, [pc, #528]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006398:	4313      	orrs	r3, r2
 800639a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063aa:	4b7f      	ldr	r3, [pc, #508]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	497b      	ldr	r1, [pc, #492]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0320 	and.w	r3, r3, #32
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063cc:	4b76      	ldr	r3, [pc, #472]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	4973      	ldr	r1, [pc, #460]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063ee:	4b6e      	ldr	r3, [pc, #440]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	496a      	ldr	r1, [pc, #424]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00a      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006410:	4b65      	ldr	r3, [pc, #404]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006416:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	4962      	ldr	r1, [pc, #392]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006420:	4313      	orrs	r3, r2
 8006422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006432:	4b5d      	ldr	r3, [pc, #372]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	4959      	ldr	r1, [pc, #356]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006442:	4313      	orrs	r3, r2
 8006444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00a      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006454:	4b54      	ldr	r3, [pc, #336]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006456:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800645a:	f023 0203 	bic.w	r2, r3, #3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006462:	4951      	ldr	r1, [pc, #324]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006464:	4313      	orrs	r3, r2
 8006466:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006476:	4b4c      	ldr	r3, [pc, #304]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800647c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	4948      	ldr	r1, [pc, #288]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006486:	4313      	orrs	r3, r2
 8006488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006494:	2b00      	cmp	r3, #0
 8006496:	d015      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006498:	4b43      	ldr	r3, [pc, #268]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800649a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a6:	4940      	ldr	r1, [pc, #256]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064b6:	d105      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064b8:	4b3b      	ldr	r3, [pc, #236]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	4a3a      	ldr	r2, [pc, #232]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d015      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80064d0:	4b35      	ldr	r3, [pc, #212]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064de:	4932      	ldr	r1, [pc, #200]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064ee:	d105      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064f0:	4b2d      	ldr	r3, [pc, #180]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	4a2c      	ldr	r2, [pc, #176]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064fa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d015      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006508:	4b27      	ldr	r3, [pc, #156]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006516:	4924      	ldr	r1, [pc, #144]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006518:	4313      	orrs	r3, r2
 800651a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006522:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006526:	d105      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006528:	4b1f      	ldr	r3, [pc, #124]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	4a1e      	ldr	r2, [pc, #120]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800652e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006532:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d015      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006540:	4b19      	ldr	r3, [pc, #100]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006546:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654e:	4916      	ldr	r1, [pc, #88]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006550:	4313      	orrs	r3, r2
 8006552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800655e:	d105      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006560:	4b11      	ldr	r3, [pc, #68]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	4a10      	ldr	r2, [pc, #64]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800656a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d019      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006578:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	4908      	ldr	r1, [pc, #32]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006588:	4313      	orrs	r3, r2
 800658a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006596:	d109      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006598:	4b03      	ldr	r3, [pc, #12]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	4a02      	ldr	r2, [pc, #8]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800659e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065a2:	60d3      	str	r3, [r2, #12]
 80065a4:	e002      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80065a6:	bf00      	nop
 80065a8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d015      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80065b8:	4b29      	ldr	r3, [pc, #164]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c6:	4926      	ldr	r1, [pc, #152]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065d6:	d105      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80065d8:	4b21      	ldr	r3, [pc, #132]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	4a20      	ldr	r2, [pc, #128]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065e2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d015      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80065f0:	4b1b      	ldr	r3, [pc, #108]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065fe:	4918      	ldr	r1, [pc, #96]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006600:	4313      	orrs	r3, r2
 8006602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800660a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660e:	d105      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006610:	4b13      	ldr	r3, [pc, #76]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	4a12      	ldr	r2, [pc, #72]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800661a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d015      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006628:	4b0d      	ldr	r3, [pc, #52]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800662a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800662e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006636:	490a      	ldr	r1, [pc, #40]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006638:	4313      	orrs	r3, r2
 800663a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006642:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006646:	d105      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006648:	4b05      	ldr	r3, [pc, #20]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	4a04      	ldr	r2, [pc, #16]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800664e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006652:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006654:	7cbb      	ldrb	r3, [r7, #18]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	40021000 	.word	0x40021000

08006664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e049      	b.n	800670a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d106      	bne.n	8006690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7fc fd60 	bl	8003150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3304      	adds	r3, #4
 80066a0:	4619      	mov	r1, r3
 80066a2:	4610      	mov	r0, r2
 80066a4:	f000 ff68 	bl	8007578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
	...

08006714 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b01      	cmp	r3, #1
 8006726:	d001      	beq.n	800672c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e04c      	b.n	80067c6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a26      	ldr	r2, [pc, #152]	; (80067d4 <HAL_TIM_Base_Start+0xc0>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d022      	beq.n	8006784 <HAL_TIM_Base_Start+0x70>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006746:	d01d      	beq.n	8006784 <HAL_TIM_Base_Start+0x70>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a22      	ldr	r2, [pc, #136]	; (80067d8 <HAL_TIM_Base_Start+0xc4>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d018      	beq.n	8006784 <HAL_TIM_Base_Start+0x70>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a21      	ldr	r2, [pc, #132]	; (80067dc <HAL_TIM_Base_Start+0xc8>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d013      	beq.n	8006784 <HAL_TIM_Base_Start+0x70>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a1f      	ldr	r2, [pc, #124]	; (80067e0 <HAL_TIM_Base_Start+0xcc>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00e      	beq.n	8006784 <HAL_TIM_Base_Start+0x70>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a1e      	ldr	r2, [pc, #120]	; (80067e4 <HAL_TIM_Base_Start+0xd0>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d009      	beq.n	8006784 <HAL_TIM_Base_Start+0x70>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a1c      	ldr	r2, [pc, #112]	; (80067e8 <HAL_TIM_Base_Start+0xd4>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d004      	beq.n	8006784 <HAL_TIM_Base_Start+0x70>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a1b      	ldr	r2, [pc, #108]	; (80067ec <HAL_TIM_Base_Start+0xd8>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d115      	bne.n	80067b0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689a      	ldr	r2, [r3, #8]
 800678a:	4b19      	ldr	r3, [pc, #100]	; (80067f0 <HAL_TIM_Base_Start+0xdc>)
 800678c:	4013      	ands	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b06      	cmp	r3, #6
 8006794:	d015      	beq.n	80067c2 <HAL_TIM_Base_Start+0xae>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800679c:	d011      	beq.n	80067c2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f042 0201 	orr.w	r2, r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ae:	e008      	b.n	80067c2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f042 0201 	orr.w	r2, r2, #1
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	e000      	b.n	80067c4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	40012c00 	.word	0x40012c00
 80067d8:	40000400 	.word	0x40000400
 80067dc:	40000800 	.word	0x40000800
 80067e0:	40000c00 	.word	0x40000c00
 80067e4:	40013400 	.word	0x40013400
 80067e8:	40014000 	.word	0x40014000
 80067ec:	40015000 	.word	0x40015000
 80067f0:	00010007 	.word	0x00010007

080067f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b01      	cmp	r3, #1
 8006806:	d001      	beq.n	800680c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e054      	b.n	80068b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0201 	orr.w	r2, r2, #1
 8006822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a26      	ldr	r2, [pc, #152]	; (80068c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d022      	beq.n	8006874 <HAL_TIM_Base_Start_IT+0x80>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006836:	d01d      	beq.n	8006874 <HAL_TIM_Base_Start_IT+0x80>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a22      	ldr	r2, [pc, #136]	; (80068c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d018      	beq.n	8006874 <HAL_TIM_Base_Start_IT+0x80>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a21      	ldr	r2, [pc, #132]	; (80068cc <HAL_TIM_Base_Start_IT+0xd8>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d013      	beq.n	8006874 <HAL_TIM_Base_Start_IT+0x80>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a1f      	ldr	r2, [pc, #124]	; (80068d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d00e      	beq.n	8006874 <HAL_TIM_Base_Start_IT+0x80>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1e      	ldr	r2, [pc, #120]	; (80068d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d009      	beq.n	8006874 <HAL_TIM_Base_Start_IT+0x80>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a1c      	ldr	r2, [pc, #112]	; (80068d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d004      	beq.n	8006874 <HAL_TIM_Base_Start_IT+0x80>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a1b      	ldr	r2, [pc, #108]	; (80068dc <HAL_TIM_Base_Start_IT+0xe8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d115      	bne.n	80068a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	4b19      	ldr	r3, [pc, #100]	; (80068e0 <HAL_TIM_Base_Start_IT+0xec>)
 800687c:	4013      	ands	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b06      	cmp	r3, #6
 8006884:	d015      	beq.n	80068b2 <HAL_TIM_Base_Start_IT+0xbe>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800688c:	d011      	beq.n	80068b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f042 0201 	orr.w	r2, r2, #1
 800689c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800689e:	e008      	b.n	80068b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0201 	orr.w	r2, r2, #1
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	e000      	b.n	80068b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40012c00 	.word	0x40012c00
 80068c8:	40000400 	.word	0x40000400
 80068cc:	40000800 	.word	0x40000800
 80068d0:	40000c00 	.word	0x40000c00
 80068d4:	40013400 	.word	0x40013400
 80068d8:	40014000 	.word	0x40014000
 80068dc:	40015000 	.word	0x40015000
 80068e0:	00010007 	.word	0x00010007

080068e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e049      	b.n	800698a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d106      	bne.n	8006910 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f841 	bl	8006992 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3304      	adds	r3, #4
 8006920:	4619      	mov	r1, r3
 8006922:	4610      	mov	r0, r2
 8006924:	f000 fe28 	bl	8007578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
	...

080069a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d109      	bne.n	80069cc <HAL_TIM_PWM_Start+0x24>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	bf14      	ite	ne
 80069c4:	2301      	movne	r3, #1
 80069c6:	2300      	moveq	r3, #0
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	e03c      	b.n	8006a46 <HAL_TIM_PWM_Start+0x9e>
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	d109      	bne.n	80069e6 <HAL_TIM_PWM_Start+0x3e>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b01      	cmp	r3, #1
 80069dc:	bf14      	ite	ne
 80069de:	2301      	movne	r3, #1
 80069e0:	2300      	moveq	r3, #0
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	e02f      	b.n	8006a46 <HAL_TIM_PWM_Start+0x9e>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d109      	bne.n	8006a00 <HAL_TIM_PWM_Start+0x58>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	bf14      	ite	ne
 80069f8:	2301      	movne	r3, #1
 80069fa:	2300      	moveq	r3, #0
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	e022      	b.n	8006a46 <HAL_TIM_PWM_Start+0x9e>
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2b0c      	cmp	r3, #12
 8006a04:	d109      	bne.n	8006a1a <HAL_TIM_PWM_Start+0x72>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	bf14      	ite	ne
 8006a12:	2301      	movne	r3, #1
 8006a14:	2300      	moveq	r3, #0
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	e015      	b.n	8006a46 <HAL_TIM_PWM_Start+0x9e>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b10      	cmp	r3, #16
 8006a1e:	d109      	bne.n	8006a34 <HAL_TIM_PWM_Start+0x8c>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	bf14      	ite	ne
 8006a2c:	2301      	movne	r3, #1
 8006a2e:	2300      	moveq	r3, #0
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	e008      	b.n	8006a46 <HAL_TIM_PWM_Start+0x9e>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	bf14      	ite	ne
 8006a40:	2301      	movne	r3, #1
 8006a42:	2300      	moveq	r3, #0
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e0a6      	b.n	8006b9c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d104      	bne.n	8006a5e <HAL_TIM_PWM_Start+0xb6>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a5c:	e023      	b.n	8006aa6 <HAL_TIM_PWM_Start+0xfe>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d104      	bne.n	8006a6e <HAL_TIM_PWM_Start+0xc6>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a6c:	e01b      	b.n	8006aa6 <HAL_TIM_PWM_Start+0xfe>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d104      	bne.n	8006a7e <HAL_TIM_PWM_Start+0xd6>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a7c:	e013      	b.n	8006aa6 <HAL_TIM_PWM_Start+0xfe>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b0c      	cmp	r3, #12
 8006a82:	d104      	bne.n	8006a8e <HAL_TIM_PWM_Start+0xe6>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a8c:	e00b      	b.n	8006aa6 <HAL_TIM_PWM_Start+0xfe>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2b10      	cmp	r3, #16
 8006a92:	d104      	bne.n	8006a9e <HAL_TIM_PWM_Start+0xf6>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a9c:	e003      	b.n	8006aa6 <HAL_TIM_PWM_Start+0xfe>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f001 f9dc 	bl	8007e6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a3a      	ldr	r2, [pc, #232]	; (8006ba4 <HAL_TIM_PWM_Start+0x1fc>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d018      	beq.n	8006af0 <HAL_TIM_PWM_Start+0x148>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a39      	ldr	r2, [pc, #228]	; (8006ba8 <HAL_TIM_PWM_Start+0x200>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d013      	beq.n	8006af0 <HAL_TIM_PWM_Start+0x148>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a37      	ldr	r2, [pc, #220]	; (8006bac <HAL_TIM_PWM_Start+0x204>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d00e      	beq.n	8006af0 <HAL_TIM_PWM_Start+0x148>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a36      	ldr	r2, [pc, #216]	; (8006bb0 <HAL_TIM_PWM_Start+0x208>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d009      	beq.n	8006af0 <HAL_TIM_PWM_Start+0x148>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a34      	ldr	r2, [pc, #208]	; (8006bb4 <HAL_TIM_PWM_Start+0x20c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d004      	beq.n	8006af0 <HAL_TIM_PWM_Start+0x148>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a33      	ldr	r2, [pc, #204]	; (8006bb8 <HAL_TIM_PWM_Start+0x210>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d101      	bne.n	8006af4 <HAL_TIM_PWM_Start+0x14c>
 8006af0:	2301      	movs	r3, #1
 8006af2:	e000      	b.n	8006af6 <HAL_TIM_PWM_Start+0x14e>
 8006af4:	2300      	movs	r3, #0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a25      	ldr	r2, [pc, #148]	; (8006ba4 <HAL_TIM_PWM_Start+0x1fc>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d022      	beq.n	8006b5a <HAL_TIM_PWM_Start+0x1b2>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1c:	d01d      	beq.n	8006b5a <HAL_TIM_PWM_Start+0x1b2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a26      	ldr	r2, [pc, #152]	; (8006bbc <HAL_TIM_PWM_Start+0x214>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d018      	beq.n	8006b5a <HAL_TIM_PWM_Start+0x1b2>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a24      	ldr	r2, [pc, #144]	; (8006bc0 <HAL_TIM_PWM_Start+0x218>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d013      	beq.n	8006b5a <HAL_TIM_PWM_Start+0x1b2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a23      	ldr	r2, [pc, #140]	; (8006bc4 <HAL_TIM_PWM_Start+0x21c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00e      	beq.n	8006b5a <HAL_TIM_PWM_Start+0x1b2>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a19      	ldr	r2, [pc, #100]	; (8006ba8 <HAL_TIM_PWM_Start+0x200>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d009      	beq.n	8006b5a <HAL_TIM_PWM_Start+0x1b2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a18      	ldr	r2, [pc, #96]	; (8006bac <HAL_TIM_PWM_Start+0x204>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d004      	beq.n	8006b5a <HAL_TIM_PWM_Start+0x1b2>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a18      	ldr	r2, [pc, #96]	; (8006bb8 <HAL_TIM_PWM_Start+0x210>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d115      	bne.n	8006b86 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	4b19      	ldr	r3, [pc, #100]	; (8006bc8 <HAL_TIM_PWM_Start+0x220>)
 8006b62:	4013      	ands	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b06      	cmp	r3, #6
 8006b6a:	d015      	beq.n	8006b98 <HAL_TIM_PWM_Start+0x1f0>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b72:	d011      	beq.n	8006b98 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0201 	orr.w	r2, r2, #1
 8006b82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b84:	e008      	b.n	8006b98 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f042 0201 	orr.w	r2, r2, #1
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	e000      	b.n	8006b9a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	40012c00 	.word	0x40012c00
 8006ba8:	40013400 	.word	0x40013400
 8006bac:	40014000 	.word	0x40014000
 8006bb0:	40014400 	.word	0x40014400
 8006bb4:	40014800 	.word	0x40014800
 8006bb8:	40015000 	.word	0x40015000
 8006bbc:	40000400 	.word	0x40000400
 8006bc0:	40000800 	.word	0x40000800
 8006bc4:	40000c00 	.word	0x40000c00
 8006bc8:	00010007 	.word	0x00010007

08006bcc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e097      	b.n	8006d10 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d106      	bne.n	8006bfa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7fc fa69 	bl	80030cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	6812      	ldr	r2, [r2, #0]
 8006c0c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006c10:	f023 0307 	bic.w	r3, r3, #7
 8006c14:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4610      	mov	r0, r2
 8006c22:	f000 fca9 	bl	8007578 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c4e:	f023 0303 	bic.w	r3, r3, #3
 8006c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	021b      	lsls	r3, r3, #8
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006c6c:	f023 030c 	bic.w	r3, r3, #12
 8006c70:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	021b      	lsls	r3, r3, #8
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	011a      	lsls	r2, r3, #4
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	031b      	lsls	r3, r3, #12
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006caa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006cb2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	011b      	lsls	r3, r3, #4
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d28:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d30:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d38:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d40:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d110      	bne.n	8006d6a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d102      	bne.n	8006d54 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d4e:	7b7b      	ldrb	r3, [r7, #13]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d001      	beq.n	8006d58 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e069      	b.n	8006e2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2202      	movs	r2, #2
 8006d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d68:	e031      	b.n	8006dce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b04      	cmp	r3, #4
 8006d6e:	d110      	bne.n	8006d92 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d70:	7bbb      	ldrb	r3, [r7, #14]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d102      	bne.n	8006d7c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d76:	7b3b      	ldrb	r3, [r7, #12]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d001      	beq.n	8006d80 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e055      	b.n	8006e2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d90:	e01d      	b.n	8006dce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d108      	bne.n	8006daa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d98:	7bbb      	ldrb	r3, [r7, #14]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d105      	bne.n	8006daa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d9e:	7b7b      	ldrb	r3, [r7, #13]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d102      	bne.n	8006daa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006da4:	7b3b      	ldrb	r3, [r7, #12]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d001      	beq.n	8006dae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e03e      	b.n	8006e2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2202      	movs	r2, #2
 8006db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2202      	movs	r2, #2
 8006dba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2202      	movs	r2, #2
 8006dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <HAL_TIM_Encoder_Start+0xc4>
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2b04      	cmp	r3, #4
 8006dd8:	d008      	beq.n	8006dec <HAL_TIM_Encoder_Start+0xd4>
 8006dda:	e00f      	b.n	8006dfc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2201      	movs	r2, #1
 8006de2:	2100      	movs	r1, #0
 8006de4:	4618      	mov	r0, r3
 8006de6:	f001 f841 	bl	8007e6c <TIM_CCxChannelCmd>
      break;
 8006dea:	e016      	b.n	8006e1a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2201      	movs	r2, #1
 8006df2:	2104      	movs	r1, #4
 8006df4:	4618      	mov	r0, r3
 8006df6:	f001 f839 	bl	8007e6c <TIM_CCxChannelCmd>
      break;
 8006dfa:	e00e      	b.n	8006e1a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2201      	movs	r2, #1
 8006e02:	2100      	movs	r1, #0
 8006e04:	4618      	mov	r0, r3
 8006e06:	f001 f831 	bl	8007e6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	2104      	movs	r1, #4
 8006e12:	4618      	mov	r0, r3
 8006e14:	f001 f82a 	bl	8007e6c <TIM_CCxChannelCmd>
      break;
 8006e18:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f042 0201 	orr.w	r2, r2, #1
 8006e28:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d020      	beq.n	8006e98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f003 0302 	and.w	r3, r3, #2
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d01b      	beq.n	8006e98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f06f 0202 	mvn.w	r2, #2
 8006e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fb5c 	bl	800753c <HAL_TIM_IC_CaptureCallback>
 8006e84:	e005      	b.n	8006e92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fb4e 	bl	8007528 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fb5f 	bl	8007550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f003 0304 	and.w	r3, r3, #4
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d020      	beq.n	8006ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d01b      	beq.n	8006ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f06f 0204 	mvn.w	r2, #4
 8006eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2202      	movs	r2, #2
 8006eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fb36 	bl	800753c <HAL_TIM_IC_CaptureCallback>
 8006ed0:	e005      	b.n	8006ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fb28 	bl	8007528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fb39 	bl	8007550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f003 0308 	and.w	r3, r3, #8
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d020      	beq.n	8006f30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f003 0308 	and.w	r3, r3, #8
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d01b      	beq.n	8006f30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f06f 0208 	mvn.w	r2, #8
 8006f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2204      	movs	r2, #4
 8006f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	f003 0303 	and.w	r3, r3, #3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fb10 	bl	800753c <HAL_TIM_IC_CaptureCallback>
 8006f1c:	e005      	b.n	8006f2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fb02 	bl	8007528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fb13 	bl	8007550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f003 0310 	and.w	r3, r3, #16
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d020      	beq.n	8006f7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f003 0310 	and.w	r3, r3, #16
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d01b      	beq.n	8006f7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f06f 0210 	mvn.w	r2, #16
 8006f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2208      	movs	r2, #8
 8006f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 faea 	bl	800753c <HAL_TIM_IC_CaptureCallback>
 8006f68:	e005      	b.n	8006f76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fadc 	bl	8007528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 faed 	bl	8007550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00c      	beq.n	8006fa0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d007      	beq.n	8006fa0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f06f 0201 	mvn.w	r2, #1
 8006f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7fa fe68 	bl	8001c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d104      	bne.n	8006fb4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00c      	beq.n	8006fce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d007      	beq.n	8006fce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 f815 	bl	8007ff8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00c      	beq.n	8006ff2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d007      	beq.n	8006ff2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f001 f80d 	bl	800800c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00c      	beq.n	8007016 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007002:	2b00      	cmp	r3, #0
 8007004:	d007      	beq.n	8007016 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800700e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 faa7 	bl	8007564 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	f003 0320 	and.w	r3, r3, #32
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00c      	beq.n	800703a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f003 0320 	and.w	r3, r3, #32
 8007026:	2b00      	cmp	r3, #0
 8007028:	d007      	beq.n	800703a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f06f 0220 	mvn.w	r2, #32
 8007032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 ffd5 	bl	8007fe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00c      	beq.n	800705e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d007      	beq.n	800705e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 ffe1 	bl	8008020 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00c      	beq.n	8007082 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d007      	beq.n	8007082 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800707a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 ffd9 	bl	8008034 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00c      	beq.n	80070a6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d007      	beq.n	80070a6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800709e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 ffd1 	bl	8008048 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00c      	beq.n	80070ca <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d007      	beq.n	80070ca <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80070c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 ffc9 	bl	800805c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070ca:	bf00      	nop
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
	...

080070d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070e0:	2300      	movs	r3, #0
 80070e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d101      	bne.n	80070f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070ee:	2302      	movs	r3, #2
 80070f0:	e0ff      	b.n	80072f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b14      	cmp	r3, #20
 80070fe:	f200 80f0 	bhi.w	80072e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007102:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007108:	0800715d 	.word	0x0800715d
 800710c:	080072e3 	.word	0x080072e3
 8007110:	080072e3 	.word	0x080072e3
 8007114:	080072e3 	.word	0x080072e3
 8007118:	0800719d 	.word	0x0800719d
 800711c:	080072e3 	.word	0x080072e3
 8007120:	080072e3 	.word	0x080072e3
 8007124:	080072e3 	.word	0x080072e3
 8007128:	080071df 	.word	0x080071df
 800712c:	080072e3 	.word	0x080072e3
 8007130:	080072e3 	.word	0x080072e3
 8007134:	080072e3 	.word	0x080072e3
 8007138:	0800721f 	.word	0x0800721f
 800713c:	080072e3 	.word	0x080072e3
 8007140:	080072e3 	.word	0x080072e3
 8007144:	080072e3 	.word	0x080072e3
 8007148:	08007261 	.word	0x08007261
 800714c:	080072e3 	.word	0x080072e3
 8007150:	080072e3 	.word	0x080072e3
 8007154:	080072e3 	.word	0x080072e3
 8007158:	080072a1 	.word	0x080072a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fabc 	bl	80076e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699a      	ldr	r2, [r3, #24]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0208 	orr.w	r2, r2, #8
 8007176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 0204 	bic.w	r2, r2, #4
 8007186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6999      	ldr	r1, [r3, #24]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	691a      	ldr	r2, [r3, #16]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	430a      	orrs	r2, r1
 8007198:	619a      	str	r2, [r3, #24]
      break;
 800719a:	e0a5      	b.n	80072e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68b9      	ldr	r1, [r7, #8]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 fb36 	bl	8007814 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	699a      	ldr	r2, [r3, #24]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	699a      	ldr	r2, [r3, #24]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6999      	ldr	r1, [r3, #24]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	021a      	lsls	r2, r3, #8
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	619a      	str	r2, [r3, #24]
      break;
 80071dc:	e084      	b.n	80072e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68b9      	ldr	r1, [r7, #8]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fba9 	bl	800793c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69da      	ldr	r2, [r3, #28]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f042 0208 	orr.w	r2, r2, #8
 80071f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69da      	ldr	r2, [r3, #28]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f022 0204 	bic.w	r2, r2, #4
 8007208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69d9      	ldr	r1, [r3, #28]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	691a      	ldr	r2, [r3, #16]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	61da      	str	r2, [r3, #28]
      break;
 800721c:	e064      	b.n	80072e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	4618      	mov	r0, r3
 8007226:	f000 fc1b 	bl	8007a60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69da      	ldr	r2, [r3, #28]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	69da      	ldr	r2, [r3, #28]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69d9      	ldr	r1, [r3, #28]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	021a      	lsls	r2, r3, #8
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	61da      	str	r2, [r3, #28]
      break;
 800725e:	e043      	b.n	80072e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68b9      	ldr	r1, [r7, #8]
 8007266:	4618      	mov	r0, r3
 8007268:	f000 fc8e 	bl	8007b88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f042 0208 	orr.w	r2, r2, #8
 800727a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 0204 	bic.w	r2, r2, #4
 800728a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	691a      	ldr	r2, [r3, #16]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800729e:	e023      	b.n	80072e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68b9      	ldr	r1, [r7, #8]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 fcd8 	bl	8007c5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	021a      	lsls	r2, r3, #8
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80072e0:	e002      	b.n	80072e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	75fb      	strb	r3, [r7, #23]
      break;
 80072e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop

080072fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007310:	2b01      	cmp	r3, #1
 8007312:	d101      	bne.n	8007318 <HAL_TIM_ConfigClockSource+0x1c>
 8007314:	2302      	movs	r3, #2
 8007316:	e0f6      	b.n	8007506 <HAL_TIM_ConfigClockSource+0x20a>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2202      	movs	r2, #2
 8007324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007336:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800733a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007342:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a6f      	ldr	r2, [pc, #444]	; (8007510 <HAL_TIM_ConfigClockSource+0x214>)
 8007352:	4293      	cmp	r3, r2
 8007354:	f000 80c1 	beq.w	80074da <HAL_TIM_ConfigClockSource+0x1de>
 8007358:	4a6d      	ldr	r2, [pc, #436]	; (8007510 <HAL_TIM_ConfigClockSource+0x214>)
 800735a:	4293      	cmp	r3, r2
 800735c:	f200 80c6 	bhi.w	80074ec <HAL_TIM_ConfigClockSource+0x1f0>
 8007360:	4a6c      	ldr	r2, [pc, #432]	; (8007514 <HAL_TIM_ConfigClockSource+0x218>)
 8007362:	4293      	cmp	r3, r2
 8007364:	f000 80b9 	beq.w	80074da <HAL_TIM_ConfigClockSource+0x1de>
 8007368:	4a6a      	ldr	r2, [pc, #424]	; (8007514 <HAL_TIM_ConfigClockSource+0x218>)
 800736a:	4293      	cmp	r3, r2
 800736c:	f200 80be 	bhi.w	80074ec <HAL_TIM_ConfigClockSource+0x1f0>
 8007370:	4a69      	ldr	r2, [pc, #420]	; (8007518 <HAL_TIM_ConfigClockSource+0x21c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	f000 80b1 	beq.w	80074da <HAL_TIM_ConfigClockSource+0x1de>
 8007378:	4a67      	ldr	r2, [pc, #412]	; (8007518 <HAL_TIM_ConfigClockSource+0x21c>)
 800737a:	4293      	cmp	r3, r2
 800737c:	f200 80b6 	bhi.w	80074ec <HAL_TIM_ConfigClockSource+0x1f0>
 8007380:	4a66      	ldr	r2, [pc, #408]	; (800751c <HAL_TIM_ConfigClockSource+0x220>)
 8007382:	4293      	cmp	r3, r2
 8007384:	f000 80a9 	beq.w	80074da <HAL_TIM_ConfigClockSource+0x1de>
 8007388:	4a64      	ldr	r2, [pc, #400]	; (800751c <HAL_TIM_ConfigClockSource+0x220>)
 800738a:	4293      	cmp	r3, r2
 800738c:	f200 80ae 	bhi.w	80074ec <HAL_TIM_ConfigClockSource+0x1f0>
 8007390:	4a63      	ldr	r2, [pc, #396]	; (8007520 <HAL_TIM_ConfigClockSource+0x224>)
 8007392:	4293      	cmp	r3, r2
 8007394:	f000 80a1 	beq.w	80074da <HAL_TIM_ConfigClockSource+0x1de>
 8007398:	4a61      	ldr	r2, [pc, #388]	; (8007520 <HAL_TIM_ConfigClockSource+0x224>)
 800739a:	4293      	cmp	r3, r2
 800739c:	f200 80a6 	bhi.w	80074ec <HAL_TIM_ConfigClockSource+0x1f0>
 80073a0:	4a60      	ldr	r2, [pc, #384]	; (8007524 <HAL_TIM_ConfigClockSource+0x228>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	f000 8099 	beq.w	80074da <HAL_TIM_ConfigClockSource+0x1de>
 80073a8:	4a5e      	ldr	r2, [pc, #376]	; (8007524 <HAL_TIM_ConfigClockSource+0x228>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	f200 809e 	bhi.w	80074ec <HAL_TIM_ConfigClockSource+0x1f0>
 80073b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80073b4:	f000 8091 	beq.w	80074da <HAL_TIM_ConfigClockSource+0x1de>
 80073b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80073bc:	f200 8096 	bhi.w	80074ec <HAL_TIM_ConfigClockSource+0x1f0>
 80073c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073c4:	f000 8089 	beq.w	80074da <HAL_TIM_ConfigClockSource+0x1de>
 80073c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073cc:	f200 808e 	bhi.w	80074ec <HAL_TIM_ConfigClockSource+0x1f0>
 80073d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073d4:	d03e      	beq.n	8007454 <HAL_TIM_ConfigClockSource+0x158>
 80073d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073da:	f200 8087 	bhi.w	80074ec <HAL_TIM_ConfigClockSource+0x1f0>
 80073de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e2:	f000 8086 	beq.w	80074f2 <HAL_TIM_ConfigClockSource+0x1f6>
 80073e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ea:	d87f      	bhi.n	80074ec <HAL_TIM_ConfigClockSource+0x1f0>
 80073ec:	2b70      	cmp	r3, #112	; 0x70
 80073ee:	d01a      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0x12a>
 80073f0:	2b70      	cmp	r3, #112	; 0x70
 80073f2:	d87b      	bhi.n	80074ec <HAL_TIM_ConfigClockSource+0x1f0>
 80073f4:	2b60      	cmp	r3, #96	; 0x60
 80073f6:	d050      	beq.n	800749a <HAL_TIM_ConfigClockSource+0x19e>
 80073f8:	2b60      	cmp	r3, #96	; 0x60
 80073fa:	d877      	bhi.n	80074ec <HAL_TIM_ConfigClockSource+0x1f0>
 80073fc:	2b50      	cmp	r3, #80	; 0x50
 80073fe:	d03c      	beq.n	800747a <HAL_TIM_ConfigClockSource+0x17e>
 8007400:	2b50      	cmp	r3, #80	; 0x50
 8007402:	d873      	bhi.n	80074ec <HAL_TIM_ConfigClockSource+0x1f0>
 8007404:	2b40      	cmp	r3, #64	; 0x40
 8007406:	d058      	beq.n	80074ba <HAL_TIM_ConfigClockSource+0x1be>
 8007408:	2b40      	cmp	r3, #64	; 0x40
 800740a:	d86f      	bhi.n	80074ec <HAL_TIM_ConfigClockSource+0x1f0>
 800740c:	2b30      	cmp	r3, #48	; 0x30
 800740e:	d064      	beq.n	80074da <HAL_TIM_ConfigClockSource+0x1de>
 8007410:	2b30      	cmp	r3, #48	; 0x30
 8007412:	d86b      	bhi.n	80074ec <HAL_TIM_ConfigClockSource+0x1f0>
 8007414:	2b20      	cmp	r3, #32
 8007416:	d060      	beq.n	80074da <HAL_TIM_ConfigClockSource+0x1de>
 8007418:	2b20      	cmp	r3, #32
 800741a:	d867      	bhi.n	80074ec <HAL_TIM_ConfigClockSource+0x1f0>
 800741c:	2b00      	cmp	r3, #0
 800741e:	d05c      	beq.n	80074da <HAL_TIM_ConfigClockSource+0x1de>
 8007420:	2b10      	cmp	r3, #16
 8007422:	d05a      	beq.n	80074da <HAL_TIM_ConfigClockSource+0x1de>
 8007424:	e062      	b.n	80074ec <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007436:	f000 fcf9 	bl	8007e2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007448:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	609a      	str	r2, [r3, #8]
      break;
 8007452:	e04f      	b.n	80074f4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007464:	f000 fce2 	bl	8007e2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689a      	ldr	r2, [r3, #8]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007476:	609a      	str	r2, [r3, #8]
      break;
 8007478:	e03c      	b.n	80074f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007486:	461a      	mov	r2, r3
 8007488:	f000 fc54 	bl	8007d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2150      	movs	r1, #80	; 0x50
 8007492:	4618      	mov	r0, r3
 8007494:	f000 fcad 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 8007498:	e02c      	b.n	80074f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074a6:	461a      	mov	r2, r3
 80074a8:	f000 fc73 	bl	8007d92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2160      	movs	r1, #96	; 0x60
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 fc9d 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 80074b8:	e01c      	b.n	80074f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074c6:	461a      	mov	r2, r3
 80074c8:	f000 fc34 	bl	8007d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2140      	movs	r1, #64	; 0x40
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 fc8d 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 80074d8:	e00c      	b.n	80074f4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4619      	mov	r1, r3
 80074e4:	4610      	mov	r0, r2
 80074e6:	f000 fc84 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 80074ea:	e003      	b.n	80074f4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	73fb      	strb	r3, [r7, #15]
      break;
 80074f0:	e000      	b.n	80074f4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80074f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007504:	7bfb      	ldrb	r3, [r7, #15]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	00100070 	.word	0x00100070
 8007514:	00100060 	.word	0x00100060
 8007518:	00100050 	.word	0x00100050
 800751c:	00100040 	.word	0x00100040
 8007520:	00100030 	.word	0x00100030
 8007524:	00100020 	.word	0x00100020

08007528 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a4c      	ldr	r2, [pc, #304]	; (80076bc <TIM_Base_SetConfig+0x144>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d017      	beq.n	80075c0 <TIM_Base_SetConfig+0x48>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007596:	d013      	beq.n	80075c0 <TIM_Base_SetConfig+0x48>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a49      	ldr	r2, [pc, #292]	; (80076c0 <TIM_Base_SetConfig+0x148>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d00f      	beq.n	80075c0 <TIM_Base_SetConfig+0x48>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a48      	ldr	r2, [pc, #288]	; (80076c4 <TIM_Base_SetConfig+0x14c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00b      	beq.n	80075c0 <TIM_Base_SetConfig+0x48>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a47      	ldr	r2, [pc, #284]	; (80076c8 <TIM_Base_SetConfig+0x150>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d007      	beq.n	80075c0 <TIM_Base_SetConfig+0x48>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a46      	ldr	r2, [pc, #280]	; (80076cc <TIM_Base_SetConfig+0x154>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d003      	beq.n	80075c0 <TIM_Base_SetConfig+0x48>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a45      	ldr	r2, [pc, #276]	; (80076d0 <TIM_Base_SetConfig+0x158>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d108      	bne.n	80075d2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a39      	ldr	r2, [pc, #228]	; (80076bc <TIM_Base_SetConfig+0x144>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d023      	beq.n	8007622 <TIM_Base_SetConfig+0xaa>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e0:	d01f      	beq.n	8007622 <TIM_Base_SetConfig+0xaa>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a36      	ldr	r2, [pc, #216]	; (80076c0 <TIM_Base_SetConfig+0x148>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d01b      	beq.n	8007622 <TIM_Base_SetConfig+0xaa>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a35      	ldr	r2, [pc, #212]	; (80076c4 <TIM_Base_SetConfig+0x14c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d017      	beq.n	8007622 <TIM_Base_SetConfig+0xaa>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a34      	ldr	r2, [pc, #208]	; (80076c8 <TIM_Base_SetConfig+0x150>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d013      	beq.n	8007622 <TIM_Base_SetConfig+0xaa>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a33      	ldr	r2, [pc, #204]	; (80076cc <TIM_Base_SetConfig+0x154>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d00f      	beq.n	8007622 <TIM_Base_SetConfig+0xaa>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a33      	ldr	r2, [pc, #204]	; (80076d4 <TIM_Base_SetConfig+0x15c>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d00b      	beq.n	8007622 <TIM_Base_SetConfig+0xaa>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a32      	ldr	r2, [pc, #200]	; (80076d8 <TIM_Base_SetConfig+0x160>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d007      	beq.n	8007622 <TIM_Base_SetConfig+0xaa>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a31      	ldr	r2, [pc, #196]	; (80076dc <TIM_Base_SetConfig+0x164>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d003      	beq.n	8007622 <TIM_Base_SetConfig+0xaa>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a2c      	ldr	r2, [pc, #176]	; (80076d0 <TIM_Base_SetConfig+0x158>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d108      	bne.n	8007634 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	4313      	orrs	r3, r2
 8007632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a18      	ldr	r2, [pc, #96]	; (80076bc <TIM_Base_SetConfig+0x144>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d013      	beq.n	8007688 <TIM_Base_SetConfig+0x110>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a1a      	ldr	r2, [pc, #104]	; (80076cc <TIM_Base_SetConfig+0x154>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d00f      	beq.n	8007688 <TIM_Base_SetConfig+0x110>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a1a      	ldr	r2, [pc, #104]	; (80076d4 <TIM_Base_SetConfig+0x15c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d00b      	beq.n	8007688 <TIM_Base_SetConfig+0x110>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a19      	ldr	r2, [pc, #100]	; (80076d8 <TIM_Base_SetConfig+0x160>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d007      	beq.n	8007688 <TIM_Base_SetConfig+0x110>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a18      	ldr	r2, [pc, #96]	; (80076dc <TIM_Base_SetConfig+0x164>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d003      	beq.n	8007688 <TIM_Base_SetConfig+0x110>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a13      	ldr	r2, [pc, #76]	; (80076d0 <TIM_Base_SetConfig+0x158>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d103      	bne.n	8007690 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	691a      	ldr	r2, [r3, #16]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d105      	bne.n	80076ae <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	f023 0201 	bic.w	r2, r3, #1
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	611a      	str	r2, [r3, #16]
  }
}
 80076ae:	bf00      	nop
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	40012c00 	.word	0x40012c00
 80076c0:	40000400 	.word	0x40000400
 80076c4:	40000800 	.word	0x40000800
 80076c8:	40000c00 	.word	0x40000c00
 80076cc:	40013400 	.word	0x40013400
 80076d0:	40015000 	.word	0x40015000
 80076d4:	40014000 	.word	0x40014000
 80076d8:	40014400 	.word	0x40014400
 80076dc:	40014800 	.word	0x40014800

080076e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a1b      	ldr	r3, [r3, #32]
 80076f4:	f023 0201 	bic.w	r2, r3, #1
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800770e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f023 0303 	bic.w	r3, r3, #3
 800771a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f023 0302 	bic.w	r3, r3, #2
 800772c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	4313      	orrs	r3, r2
 8007736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a30      	ldr	r2, [pc, #192]	; (80077fc <TIM_OC1_SetConfig+0x11c>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d013      	beq.n	8007768 <TIM_OC1_SetConfig+0x88>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a2f      	ldr	r2, [pc, #188]	; (8007800 <TIM_OC1_SetConfig+0x120>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d00f      	beq.n	8007768 <TIM_OC1_SetConfig+0x88>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a2e      	ldr	r2, [pc, #184]	; (8007804 <TIM_OC1_SetConfig+0x124>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d00b      	beq.n	8007768 <TIM_OC1_SetConfig+0x88>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a2d      	ldr	r2, [pc, #180]	; (8007808 <TIM_OC1_SetConfig+0x128>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d007      	beq.n	8007768 <TIM_OC1_SetConfig+0x88>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a2c      	ldr	r2, [pc, #176]	; (800780c <TIM_OC1_SetConfig+0x12c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d003      	beq.n	8007768 <TIM_OC1_SetConfig+0x88>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a2b      	ldr	r2, [pc, #172]	; (8007810 <TIM_OC1_SetConfig+0x130>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d10c      	bne.n	8007782 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f023 0308 	bic.w	r3, r3, #8
 800776e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	4313      	orrs	r3, r2
 8007778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f023 0304 	bic.w	r3, r3, #4
 8007780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a1d      	ldr	r2, [pc, #116]	; (80077fc <TIM_OC1_SetConfig+0x11c>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d013      	beq.n	80077b2 <TIM_OC1_SetConfig+0xd2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a1c      	ldr	r2, [pc, #112]	; (8007800 <TIM_OC1_SetConfig+0x120>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d00f      	beq.n	80077b2 <TIM_OC1_SetConfig+0xd2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a1b      	ldr	r2, [pc, #108]	; (8007804 <TIM_OC1_SetConfig+0x124>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d00b      	beq.n	80077b2 <TIM_OC1_SetConfig+0xd2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a1a      	ldr	r2, [pc, #104]	; (8007808 <TIM_OC1_SetConfig+0x128>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d007      	beq.n	80077b2 <TIM_OC1_SetConfig+0xd2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a19      	ldr	r2, [pc, #100]	; (800780c <TIM_OC1_SetConfig+0x12c>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d003      	beq.n	80077b2 <TIM_OC1_SetConfig+0xd2>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a18      	ldr	r2, [pc, #96]	; (8007810 <TIM_OC1_SetConfig+0x130>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d111      	bne.n	80077d6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	621a      	str	r2, [r3, #32]
}
 80077f0:	bf00      	nop
 80077f2:	371c      	adds	r7, #28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	40012c00 	.word	0x40012c00
 8007800:	40013400 	.word	0x40013400
 8007804:	40014000 	.word	0x40014000
 8007808:	40014400 	.word	0x40014400
 800780c:	40014800 	.word	0x40014800
 8007810:	40015000 	.word	0x40015000

08007814 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a1b      	ldr	r3, [r3, #32]
 8007828:	f023 0210 	bic.w	r2, r3, #16
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800784e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	021b      	lsls	r3, r3, #8
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	4313      	orrs	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f023 0320 	bic.w	r3, r3, #32
 8007862:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	011b      	lsls	r3, r3, #4
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	4313      	orrs	r3, r2
 800786e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a2c      	ldr	r2, [pc, #176]	; (8007924 <TIM_OC2_SetConfig+0x110>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d007      	beq.n	8007888 <TIM_OC2_SetConfig+0x74>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a2b      	ldr	r2, [pc, #172]	; (8007928 <TIM_OC2_SetConfig+0x114>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d003      	beq.n	8007888 <TIM_OC2_SetConfig+0x74>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a2a      	ldr	r2, [pc, #168]	; (800792c <TIM_OC2_SetConfig+0x118>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d10d      	bne.n	80078a4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800788e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	011b      	lsls	r3, r3, #4
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	4313      	orrs	r3, r2
 800789a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a1f      	ldr	r2, [pc, #124]	; (8007924 <TIM_OC2_SetConfig+0x110>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d013      	beq.n	80078d4 <TIM_OC2_SetConfig+0xc0>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a1e      	ldr	r2, [pc, #120]	; (8007928 <TIM_OC2_SetConfig+0x114>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d00f      	beq.n	80078d4 <TIM_OC2_SetConfig+0xc0>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a1e      	ldr	r2, [pc, #120]	; (8007930 <TIM_OC2_SetConfig+0x11c>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d00b      	beq.n	80078d4 <TIM_OC2_SetConfig+0xc0>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a1d      	ldr	r2, [pc, #116]	; (8007934 <TIM_OC2_SetConfig+0x120>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d007      	beq.n	80078d4 <TIM_OC2_SetConfig+0xc0>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a1c      	ldr	r2, [pc, #112]	; (8007938 <TIM_OC2_SetConfig+0x124>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d003      	beq.n	80078d4 <TIM_OC2_SetConfig+0xc0>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a17      	ldr	r2, [pc, #92]	; (800792c <TIM_OC2_SetConfig+0x118>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d113      	bne.n	80078fc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	621a      	str	r2, [r3, #32]
}
 8007916:	bf00      	nop
 8007918:	371c      	adds	r7, #28
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	40012c00 	.word	0x40012c00
 8007928:	40013400 	.word	0x40013400
 800792c:	40015000 	.word	0x40015000
 8007930:	40014000 	.word	0x40014000
 8007934:	40014400 	.word	0x40014400
 8007938:	40014800 	.word	0x40014800

0800793c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800793c:	b480      	push	{r7}
 800793e:	b087      	sub	sp, #28
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a1b      	ldr	r3, [r3, #32]
 8007950:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800796a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f023 0303 	bic.w	r3, r3, #3
 8007976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	4313      	orrs	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	021b      	lsls	r3, r3, #8
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	4313      	orrs	r3, r2
 8007994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a2b      	ldr	r2, [pc, #172]	; (8007a48 <TIM_OC3_SetConfig+0x10c>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d007      	beq.n	80079ae <TIM_OC3_SetConfig+0x72>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a2a      	ldr	r2, [pc, #168]	; (8007a4c <TIM_OC3_SetConfig+0x110>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d003      	beq.n	80079ae <TIM_OC3_SetConfig+0x72>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a29      	ldr	r2, [pc, #164]	; (8007a50 <TIM_OC3_SetConfig+0x114>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d10d      	bne.n	80079ca <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	021b      	lsls	r3, r3, #8
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	4313      	orrs	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a1e      	ldr	r2, [pc, #120]	; (8007a48 <TIM_OC3_SetConfig+0x10c>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d013      	beq.n	80079fa <TIM_OC3_SetConfig+0xbe>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a1d      	ldr	r2, [pc, #116]	; (8007a4c <TIM_OC3_SetConfig+0x110>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d00f      	beq.n	80079fa <TIM_OC3_SetConfig+0xbe>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a1d      	ldr	r2, [pc, #116]	; (8007a54 <TIM_OC3_SetConfig+0x118>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d00b      	beq.n	80079fa <TIM_OC3_SetConfig+0xbe>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a1c      	ldr	r2, [pc, #112]	; (8007a58 <TIM_OC3_SetConfig+0x11c>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d007      	beq.n	80079fa <TIM_OC3_SetConfig+0xbe>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a1b      	ldr	r2, [pc, #108]	; (8007a5c <TIM_OC3_SetConfig+0x120>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d003      	beq.n	80079fa <TIM_OC3_SetConfig+0xbe>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a16      	ldr	r2, [pc, #88]	; (8007a50 <TIM_OC3_SetConfig+0x114>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d113      	bne.n	8007a22 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	011b      	lsls	r3, r3, #4
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	621a      	str	r2, [r3, #32]
}
 8007a3c:	bf00      	nop
 8007a3e:	371c      	adds	r7, #28
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	40012c00 	.word	0x40012c00
 8007a4c:	40013400 	.word	0x40013400
 8007a50:	40015000 	.word	0x40015000
 8007a54:	40014000 	.word	0x40014000
 8007a58:	40014400 	.word	0x40014400
 8007a5c:	40014800 	.word	0x40014800

08007a60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	021b      	lsls	r3, r3, #8
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007aae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	031b      	lsls	r3, r3, #12
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a2c      	ldr	r2, [pc, #176]	; (8007b70 <TIM_OC4_SetConfig+0x110>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d007      	beq.n	8007ad4 <TIM_OC4_SetConfig+0x74>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a2b      	ldr	r2, [pc, #172]	; (8007b74 <TIM_OC4_SetConfig+0x114>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d003      	beq.n	8007ad4 <TIM_OC4_SetConfig+0x74>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a2a      	ldr	r2, [pc, #168]	; (8007b78 <TIM_OC4_SetConfig+0x118>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d10d      	bne.n	8007af0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	031b      	lsls	r3, r3, #12
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a1f      	ldr	r2, [pc, #124]	; (8007b70 <TIM_OC4_SetConfig+0x110>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d013      	beq.n	8007b20 <TIM_OC4_SetConfig+0xc0>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a1e      	ldr	r2, [pc, #120]	; (8007b74 <TIM_OC4_SetConfig+0x114>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d00f      	beq.n	8007b20 <TIM_OC4_SetConfig+0xc0>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a1e      	ldr	r2, [pc, #120]	; (8007b7c <TIM_OC4_SetConfig+0x11c>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d00b      	beq.n	8007b20 <TIM_OC4_SetConfig+0xc0>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a1d      	ldr	r2, [pc, #116]	; (8007b80 <TIM_OC4_SetConfig+0x120>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d007      	beq.n	8007b20 <TIM_OC4_SetConfig+0xc0>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a1c      	ldr	r2, [pc, #112]	; (8007b84 <TIM_OC4_SetConfig+0x124>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d003      	beq.n	8007b20 <TIM_OC4_SetConfig+0xc0>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a17      	ldr	r2, [pc, #92]	; (8007b78 <TIM_OC4_SetConfig+0x118>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d113      	bne.n	8007b48 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b26:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b2e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	019b      	lsls	r3, r3, #6
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	019b      	lsls	r3, r3, #6
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	621a      	str	r2, [r3, #32]
}
 8007b62:	bf00      	nop
 8007b64:	371c      	adds	r7, #28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	40012c00 	.word	0x40012c00
 8007b74:	40013400 	.word	0x40013400
 8007b78:	40015000 	.word	0x40015000
 8007b7c:	40014000 	.word	0x40014000
 8007b80:	40014400 	.word	0x40014400
 8007b84:	40014800 	.word	0x40014800

08007b88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b087      	sub	sp, #28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007bcc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	041b      	lsls	r3, r3, #16
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a19      	ldr	r2, [pc, #100]	; (8007c44 <TIM_OC5_SetConfig+0xbc>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d013      	beq.n	8007c0a <TIM_OC5_SetConfig+0x82>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a18      	ldr	r2, [pc, #96]	; (8007c48 <TIM_OC5_SetConfig+0xc0>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d00f      	beq.n	8007c0a <TIM_OC5_SetConfig+0x82>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a17      	ldr	r2, [pc, #92]	; (8007c4c <TIM_OC5_SetConfig+0xc4>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d00b      	beq.n	8007c0a <TIM_OC5_SetConfig+0x82>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a16      	ldr	r2, [pc, #88]	; (8007c50 <TIM_OC5_SetConfig+0xc8>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d007      	beq.n	8007c0a <TIM_OC5_SetConfig+0x82>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a15      	ldr	r2, [pc, #84]	; (8007c54 <TIM_OC5_SetConfig+0xcc>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d003      	beq.n	8007c0a <TIM_OC5_SetConfig+0x82>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a14      	ldr	r2, [pc, #80]	; (8007c58 <TIM_OC5_SetConfig+0xd0>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d109      	bne.n	8007c1e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	021b      	lsls	r3, r3, #8
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	621a      	str	r2, [r3, #32]
}
 8007c38:	bf00      	nop
 8007c3a:	371c      	adds	r7, #28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	40012c00 	.word	0x40012c00
 8007c48:	40013400 	.word	0x40013400
 8007c4c:	40014000 	.word	0x40014000
 8007c50:	40014400 	.word	0x40014400
 8007c54:	40014800 	.word	0x40014800
 8007c58:	40015000 	.word	0x40015000

08007c5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	021b      	lsls	r3, r3, #8
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	051b      	lsls	r3, r3, #20
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a1a      	ldr	r2, [pc, #104]	; (8007d1c <TIM_OC6_SetConfig+0xc0>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d013      	beq.n	8007ce0 <TIM_OC6_SetConfig+0x84>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a19      	ldr	r2, [pc, #100]	; (8007d20 <TIM_OC6_SetConfig+0xc4>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d00f      	beq.n	8007ce0 <TIM_OC6_SetConfig+0x84>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a18      	ldr	r2, [pc, #96]	; (8007d24 <TIM_OC6_SetConfig+0xc8>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d00b      	beq.n	8007ce0 <TIM_OC6_SetConfig+0x84>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a17      	ldr	r2, [pc, #92]	; (8007d28 <TIM_OC6_SetConfig+0xcc>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d007      	beq.n	8007ce0 <TIM_OC6_SetConfig+0x84>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a16      	ldr	r2, [pc, #88]	; (8007d2c <TIM_OC6_SetConfig+0xd0>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d003      	beq.n	8007ce0 <TIM_OC6_SetConfig+0x84>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a15      	ldr	r2, [pc, #84]	; (8007d30 <TIM_OC6_SetConfig+0xd4>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d109      	bne.n	8007cf4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	695b      	ldr	r3, [r3, #20]
 8007cec:	029b      	lsls	r3, r3, #10
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	621a      	str	r2, [r3, #32]
}
 8007d0e:	bf00      	nop
 8007d10:	371c      	adds	r7, #28
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	40012c00 	.word	0x40012c00
 8007d20:	40013400 	.word	0x40013400
 8007d24:	40014000 	.word	0x40014000
 8007d28:	40014400 	.word	0x40014400
 8007d2c:	40014800 	.word	0x40014800
 8007d30:	40015000 	.word	0x40015000

08007d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	f023 0201 	bic.w	r2, r3, #1
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	011b      	lsls	r3, r3, #4
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f023 030a 	bic.w	r3, r3, #10
 8007d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	621a      	str	r2, [r3, #32]
}
 8007d86:	bf00      	nop
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b087      	sub	sp, #28
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6a1b      	ldr	r3, [r3, #32]
 8007da8:	f023 0210 	bic.w	r2, r3, #16
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	031b      	lsls	r3, r3, #12
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	011b      	lsls	r3, r3, #4
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	621a      	str	r2, [r3, #32]
}
 8007de6:	bf00      	nop
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b085      	sub	sp, #20
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	f043 0307 	orr.w	r3, r3, #7
 8007e18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	609a      	str	r2, [r3, #8]
}
 8007e20:	bf00      	nop
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
 8007e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	021a      	lsls	r2, r3, #8
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	431a      	orrs	r2, r3
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	609a      	str	r2, [r3, #8]
}
 8007e60:	bf00      	nop
 8007e62:	371c      	adds	r7, #28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b087      	sub	sp, #28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	f003 031f 	and.w	r3, r3, #31
 8007e7e:	2201      	movs	r2, #1
 8007e80:	fa02 f303 	lsl.w	r3, r2, r3
 8007e84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6a1a      	ldr	r2, [r3, #32]
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	43db      	mvns	r3, r3
 8007e8e:	401a      	ands	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6a1a      	ldr	r2, [r3, #32]
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	f003 031f 	and.w	r3, r3, #31
 8007e9e:	6879      	ldr	r1, [r7, #4]
 8007ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ea4:	431a      	orrs	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	621a      	str	r2, [r3, #32]
}
 8007eaa:	bf00      	nop
 8007eac:	371c      	adds	r7, #28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
	...

08007eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d101      	bne.n	8007ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ecc:	2302      	movs	r3, #2
 8007ece:	e074      	b.n	8007fba <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a34      	ldr	r2, [pc, #208]	; (8007fc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d009      	beq.n	8007f0e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a33      	ldr	r2, [pc, #204]	; (8007fcc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d004      	beq.n	8007f0e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a31      	ldr	r2, [pc, #196]	; (8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d108      	bne.n	8007f20 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a21      	ldr	r2, [pc, #132]	; (8007fc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d022      	beq.n	8007f8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f50:	d01d      	beq.n	8007f8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a1f      	ldr	r2, [pc, #124]	; (8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d018      	beq.n	8007f8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a1d      	ldr	r2, [pc, #116]	; (8007fd8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d013      	beq.n	8007f8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a1c      	ldr	r2, [pc, #112]	; (8007fdc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d00e      	beq.n	8007f8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a15      	ldr	r2, [pc, #84]	; (8007fcc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d009      	beq.n	8007f8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a18      	ldr	r2, [pc, #96]	; (8007fe0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d004      	beq.n	8007f8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a11      	ldr	r2, [pc, #68]	; (8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d10c      	bne.n	8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	40012c00 	.word	0x40012c00
 8007fcc:	40013400 	.word	0x40013400
 8007fd0:	40015000 	.word	0x40015000
 8007fd4:	40000400 	.word	0x40000400
 8007fd8:	40000800 	.word	0x40000800
 8007fdc:	40000c00 	.word	0x40000c00
 8007fe0:	40014000 	.word	0x40014000

08007fe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e042      	b.n	8008108 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008088:	2b00      	cmp	r3, #0
 800808a:	d106      	bne.n	800809a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7fa ffc1 	bl	800301c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2224      	movs	r2, #36	; 0x24
 800809e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f022 0201 	bic.w	r2, r2, #1
 80080b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fb24 	bl	8008708 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f825 	bl	8008110 <UART_SetConfig>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d101      	bne.n	80080d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e01b      	b.n	8008108 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	685a      	ldr	r2, [r3, #4]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689a      	ldr	r2, [r3, #8]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f042 0201 	orr.w	r2, r2, #1
 80080fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 fba3 	bl	800884c <UART_CheckIdleState>
 8008106:	4603      	mov	r3, r0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008114:	b08c      	sub	sp, #48	; 0x30
 8008116:	af00      	add	r7, sp, #0
 8008118:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	431a      	orrs	r2, r3
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	431a      	orrs	r2, r3
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	4313      	orrs	r3, r2
 8008136:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	4baa      	ldr	r3, [pc, #680]	; (80083e8 <UART_SetConfig+0x2d8>)
 8008140:	4013      	ands	r3, r2
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	6812      	ldr	r2, [r2, #0]
 8008146:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008148:	430b      	orrs	r3, r1
 800814a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	68da      	ldr	r2, [r3, #12]
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	430a      	orrs	r2, r1
 8008160:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a9f      	ldr	r2, [pc, #636]	; (80083ec <UART_SetConfig+0x2dc>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d004      	beq.n	800817c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008178:	4313      	orrs	r3, r2
 800817a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008186:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	6812      	ldr	r2, [r2, #0]
 800818e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008190:	430b      	orrs	r3, r1
 8008192:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819a:	f023 010f 	bic.w	r1, r3, #15
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a90      	ldr	r2, [pc, #576]	; (80083f0 <UART_SetConfig+0x2e0>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d125      	bne.n	8008200 <UART_SetConfig+0xf0>
 80081b4:	4b8f      	ldr	r3, [pc, #572]	; (80083f4 <UART_SetConfig+0x2e4>)
 80081b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ba:	f003 0303 	and.w	r3, r3, #3
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d81a      	bhi.n	80081f8 <UART_SetConfig+0xe8>
 80081c2:	a201      	add	r2, pc, #4	; (adr r2, 80081c8 <UART_SetConfig+0xb8>)
 80081c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c8:	080081d9 	.word	0x080081d9
 80081cc:	080081e9 	.word	0x080081e9
 80081d0:	080081e1 	.word	0x080081e1
 80081d4:	080081f1 	.word	0x080081f1
 80081d8:	2301      	movs	r3, #1
 80081da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081de:	e116      	b.n	800840e <UART_SetConfig+0x2fe>
 80081e0:	2302      	movs	r3, #2
 80081e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081e6:	e112      	b.n	800840e <UART_SetConfig+0x2fe>
 80081e8:	2304      	movs	r3, #4
 80081ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ee:	e10e      	b.n	800840e <UART_SetConfig+0x2fe>
 80081f0:	2308      	movs	r3, #8
 80081f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081f6:	e10a      	b.n	800840e <UART_SetConfig+0x2fe>
 80081f8:	2310      	movs	r3, #16
 80081fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081fe:	e106      	b.n	800840e <UART_SetConfig+0x2fe>
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a7c      	ldr	r2, [pc, #496]	; (80083f8 <UART_SetConfig+0x2e8>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d138      	bne.n	800827c <UART_SetConfig+0x16c>
 800820a:	4b7a      	ldr	r3, [pc, #488]	; (80083f4 <UART_SetConfig+0x2e4>)
 800820c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008210:	f003 030c 	and.w	r3, r3, #12
 8008214:	2b0c      	cmp	r3, #12
 8008216:	d82d      	bhi.n	8008274 <UART_SetConfig+0x164>
 8008218:	a201      	add	r2, pc, #4	; (adr r2, 8008220 <UART_SetConfig+0x110>)
 800821a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821e:	bf00      	nop
 8008220:	08008255 	.word	0x08008255
 8008224:	08008275 	.word	0x08008275
 8008228:	08008275 	.word	0x08008275
 800822c:	08008275 	.word	0x08008275
 8008230:	08008265 	.word	0x08008265
 8008234:	08008275 	.word	0x08008275
 8008238:	08008275 	.word	0x08008275
 800823c:	08008275 	.word	0x08008275
 8008240:	0800825d 	.word	0x0800825d
 8008244:	08008275 	.word	0x08008275
 8008248:	08008275 	.word	0x08008275
 800824c:	08008275 	.word	0x08008275
 8008250:	0800826d 	.word	0x0800826d
 8008254:	2300      	movs	r3, #0
 8008256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800825a:	e0d8      	b.n	800840e <UART_SetConfig+0x2fe>
 800825c:	2302      	movs	r3, #2
 800825e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008262:	e0d4      	b.n	800840e <UART_SetConfig+0x2fe>
 8008264:	2304      	movs	r3, #4
 8008266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800826a:	e0d0      	b.n	800840e <UART_SetConfig+0x2fe>
 800826c:	2308      	movs	r3, #8
 800826e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008272:	e0cc      	b.n	800840e <UART_SetConfig+0x2fe>
 8008274:	2310      	movs	r3, #16
 8008276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800827a:	e0c8      	b.n	800840e <UART_SetConfig+0x2fe>
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a5e      	ldr	r2, [pc, #376]	; (80083fc <UART_SetConfig+0x2ec>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d125      	bne.n	80082d2 <UART_SetConfig+0x1c2>
 8008286:	4b5b      	ldr	r3, [pc, #364]	; (80083f4 <UART_SetConfig+0x2e4>)
 8008288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800828c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008290:	2b30      	cmp	r3, #48	; 0x30
 8008292:	d016      	beq.n	80082c2 <UART_SetConfig+0x1b2>
 8008294:	2b30      	cmp	r3, #48	; 0x30
 8008296:	d818      	bhi.n	80082ca <UART_SetConfig+0x1ba>
 8008298:	2b20      	cmp	r3, #32
 800829a:	d00a      	beq.n	80082b2 <UART_SetConfig+0x1a2>
 800829c:	2b20      	cmp	r3, #32
 800829e:	d814      	bhi.n	80082ca <UART_SetConfig+0x1ba>
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <UART_SetConfig+0x19a>
 80082a4:	2b10      	cmp	r3, #16
 80082a6:	d008      	beq.n	80082ba <UART_SetConfig+0x1aa>
 80082a8:	e00f      	b.n	80082ca <UART_SetConfig+0x1ba>
 80082aa:	2300      	movs	r3, #0
 80082ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082b0:	e0ad      	b.n	800840e <UART_SetConfig+0x2fe>
 80082b2:	2302      	movs	r3, #2
 80082b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082b8:	e0a9      	b.n	800840e <UART_SetConfig+0x2fe>
 80082ba:	2304      	movs	r3, #4
 80082bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082c0:	e0a5      	b.n	800840e <UART_SetConfig+0x2fe>
 80082c2:	2308      	movs	r3, #8
 80082c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082c8:	e0a1      	b.n	800840e <UART_SetConfig+0x2fe>
 80082ca:	2310      	movs	r3, #16
 80082cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082d0:	e09d      	b.n	800840e <UART_SetConfig+0x2fe>
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a4a      	ldr	r2, [pc, #296]	; (8008400 <UART_SetConfig+0x2f0>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d125      	bne.n	8008328 <UART_SetConfig+0x218>
 80082dc:	4b45      	ldr	r3, [pc, #276]	; (80083f4 <UART_SetConfig+0x2e4>)
 80082de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80082e6:	2bc0      	cmp	r3, #192	; 0xc0
 80082e8:	d016      	beq.n	8008318 <UART_SetConfig+0x208>
 80082ea:	2bc0      	cmp	r3, #192	; 0xc0
 80082ec:	d818      	bhi.n	8008320 <UART_SetConfig+0x210>
 80082ee:	2b80      	cmp	r3, #128	; 0x80
 80082f0:	d00a      	beq.n	8008308 <UART_SetConfig+0x1f8>
 80082f2:	2b80      	cmp	r3, #128	; 0x80
 80082f4:	d814      	bhi.n	8008320 <UART_SetConfig+0x210>
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d002      	beq.n	8008300 <UART_SetConfig+0x1f0>
 80082fa:	2b40      	cmp	r3, #64	; 0x40
 80082fc:	d008      	beq.n	8008310 <UART_SetConfig+0x200>
 80082fe:	e00f      	b.n	8008320 <UART_SetConfig+0x210>
 8008300:	2300      	movs	r3, #0
 8008302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008306:	e082      	b.n	800840e <UART_SetConfig+0x2fe>
 8008308:	2302      	movs	r3, #2
 800830a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800830e:	e07e      	b.n	800840e <UART_SetConfig+0x2fe>
 8008310:	2304      	movs	r3, #4
 8008312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008316:	e07a      	b.n	800840e <UART_SetConfig+0x2fe>
 8008318:	2308      	movs	r3, #8
 800831a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800831e:	e076      	b.n	800840e <UART_SetConfig+0x2fe>
 8008320:	2310      	movs	r3, #16
 8008322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008326:	e072      	b.n	800840e <UART_SetConfig+0x2fe>
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a35      	ldr	r2, [pc, #212]	; (8008404 <UART_SetConfig+0x2f4>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d12a      	bne.n	8008388 <UART_SetConfig+0x278>
 8008332:	4b30      	ldr	r3, [pc, #192]	; (80083f4 <UART_SetConfig+0x2e4>)
 8008334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800833c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008340:	d01a      	beq.n	8008378 <UART_SetConfig+0x268>
 8008342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008346:	d81b      	bhi.n	8008380 <UART_SetConfig+0x270>
 8008348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800834c:	d00c      	beq.n	8008368 <UART_SetConfig+0x258>
 800834e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008352:	d815      	bhi.n	8008380 <UART_SetConfig+0x270>
 8008354:	2b00      	cmp	r3, #0
 8008356:	d003      	beq.n	8008360 <UART_SetConfig+0x250>
 8008358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800835c:	d008      	beq.n	8008370 <UART_SetConfig+0x260>
 800835e:	e00f      	b.n	8008380 <UART_SetConfig+0x270>
 8008360:	2300      	movs	r3, #0
 8008362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008366:	e052      	b.n	800840e <UART_SetConfig+0x2fe>
 8008368:	2302      	movs	r3, #2
 800836a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800836e:	e04e      	b.n	800840e <UART_SetConfig+0x2fe>
 8008370:	2304      	movs	r3, #4
 8008372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008376:	e04a      	b.n	800840e <UART_SetConfig+0x2fe>
 8008378:	2308      	movs	r3, #8
 800837a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800837e:	e046      	b.n	800840e <UART_SetConfig+0x2fe>
 8008380:	2310      	movs	r3, #16
 8008382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008386:	e042      	b.n	800840e <UART_SetConfig+0x2fe>
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a17      	ldr	r2, [pc, #92]	; (80083ec <UART_SetConfig+0x2dc>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d13a      	bne.n	8008408 <UART_SetConfig+0x2f8>
 8008392:	4b18      	ldr	r3, [pc, #96]	; (80083f4 <UART_SetConfig+0x2e4>)
 8008394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008398:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800839c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083a0:	d01a      	beq.n	80083d8 <UART_SetConfig+0x2c8>
 80083a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083a6:	d81b      	bhi.n	80083e0 <UART_SetConfig+0x2d0>
 80083a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ac:	d00c      	beq.n	80083c8 <UART_SetConfig+0x2b8>
 80083ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083b2:	d815      	bhi.n	80083e0 <UART_SetConfig+0x2d0>
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <UART_SetConfig+0x2b0>
 80083b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083bc:	d008      	beq.n	80083d0 <UART_SetConfig+0x2c0>
 80083be:	e00f      	b.n	80083e0 <UART_SetConfig+0x2d0>
 80083c0:	2300      	movs	r3, #0
 80083c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083c6:	e022      	b.n	800840e <UART_SetConfig+0x2fe>
 80083c8:	2302      	movs	r3, #2
 80083ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ce:	e01e      	b.n	800840e <UART_SetConfig+0x2fe>
 80083d0:	2304      	movs	r3, #4
 80083d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083d6:	e01a      	b.n	800840e <UART_SetConfig+0x2fe>
 80083d8:	2308      	movs	r3, #8
 80083da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083de:	e016      	b.n	800840e <UART_SetConfig+0x2fe>
 80083e0:	2310      	movs	r3, #16
 80083e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083e6:	e012      	b.n	800840e <UART_SetConfig+0x2fe>
 80083e8:	cfff69f3 	.word	0xcfff69f3
 80083ec:	40008000 	.word	0x40008000
 80083f0:	40013800 	.word	0x40013800
 80083f4:	40021000 	.word	0x40021000
 80083f8:	40004400 	.word	0x40004400
 80083fc:	40004800 	.word	0x40004800
 8008400:	40004c00 	.word	0x40004c00
 8008404:	40005000 	.word	0x40005000
 8008408:	2310      	movs	r3, #16
 800840a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4aae      	ldr	r2, [pc, #696]	; (80086cc <UART_SetConfig+0x5bc>)
 8008414:	4293      	cmp	r3, r2
 8008416:	f040 8097 	bne.w	8008548 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800841a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800841e:	2b08      	cmp	r3, #8
 8008420:	d823      	bhi.n	800846a <UART_SetConfig+0x35a>
 8008422:	a201      	add	r2, pc, #4	; (adr r2, 8008428 <UART_SetConfig+0x318>)
 8008424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008428:	0800844d 	.word	0x0800844d
 800842c:	0800846b 	.word	0x0800846b
 8008430:	08008455 	.word	0x08008455
 8008434:	0800846b 	.word	0x0800846b
 8008438:	0800845b 	.word	0x0800845b
 800843c:	0800846b 	.word	0x0800846b
 8008440:	0800846b 	.word	0x0800846b
 8008444:	0800846b 	.word	0x0800846b
 8008448:	08008463 	.word	0x08008463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800844c:	f7fd fe4a 	bl	80060e4 <HAL_RCC_GetPCLK1Freq>
 8008450:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008452:	e010      	b.n	8008476 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008454:	4b9e      	ldr	r3, [pc, #632]	; (80086d0 <UART_SetConfig+0x5c0>)
 8008456:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008458:	e00d      	b.n	8008476 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800845a:	f7fd fdd5 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 800845e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008460:	e009      	b.n	8008476 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008466:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008468:	e005      	b.n	8008476 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008474:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 8130 	beq.w	80086de <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008482:	4a94      	ldr	r2, [pc, #592]	; (80086d4 <UART_SetConfig+0x5c4>)
 8008484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008488:	461a      	mov	r2, r3
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008490:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	4613      	mov	r3, r2
 8008498:	005b      	lsls	r3, r3, #1
 800849a:	4413      	add	r3, r2
 800849c:	69ba      	ldr	r2, [r7, #24]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d305      	bcc.n	80084ae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084a8:	69ba      	ldr	r2, [r7, #24]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d903      	bls.n	80084b6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80084b4:	e113      	b.n	80086de <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	2200      	movs	r2, #0
 80084ba:	60bb      	str	r3, [r7, #8]
 80084bc:	60fa      	str	r2, [r7, #12]
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	4a84      	ldr	r2, [pc, #528]	; (80086d4 <UART_SetConfig+0x5c4>)
 80084c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	2200      	movs	r2, #0
 80084cc:	603b      	str	r3, [r7, #0]
 80084ce:	607a      	str	r2, [r7, #4]
 80084d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084d8:	f7f8 fc88 	bl	8000dec <__aeabi_uldivmod>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4610      	mov	r0, r2
 80084e2:	4619      	mov	r1, r3
 80084e4:	f04f 0200 	mov.w	r2, #0
 80084e8:	f04f 0300 	mov.w	r3, #0
 80084ec:	020b      	lsls	r3, r1, #8
 80084ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084f2:	0202      	lsls	r2, r0, #8
 80084f4:	6979      	ldr	r1, [r7, #20]
 80084f6:	6849      	ldr	r1, [r1, #4]
 80084f8:	0849      	lsrs	r1, r1, #1
 80084fa:	2000      	movs	r0, #0
 80084fc:	460c      	mov	r4, r1
 80084fe:	4605      	mov	r5, r0
 8008500:	eb12 0804 	adds.w	r8, r2, r4
 8008504:	eb43 0905 	adc.w	r9, r3, r5
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	469a      	mov	sl, r3
 8008510:	4693      	mov	fp, r2
 8008512:	4652      	mov	r2, sl
 8008514:	465b      	mov	r3, fp
 8008516:	4640      	mov	r0, r8
 8008518:	4649      	mov	r1, r9
 800851a:	f7f8 fc67 	bl	8000dec <__aeabi_uldivmod>
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	4613      	mov	r3, r2
 8008524:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800852c:	d308      	bcc.n	8008540 <UART_SetConfig+0x430>
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008534:	d204      	bcs.n	8008540 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6a3a      	ldr	r2, [r7, #32]
 800853c:	60da      	str	r2, [r3, #12]
 800853e:	e0ce      	b.n	80086de <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008546:	e0ca      	b.n	80086de <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008550:	d166      	bne.n	8008620 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008552:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008556:	2b08      	cmp	r3, #8
 8008558:	d827      	bhi.n	80085aa <UART_SetConfig+0x49a>
 800855a:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <UART_SetConfig+0x450>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	08008585 	.word	0x08008585
 8008564:	0800858d 	.word	0x0800858d
 8008568:	08008595 	.word	0x08008595
 800856c:	080085ab 	.word	0x080085ab
 8008570:	0800859b 	.word	0x0800859b
 8008574:	080085ab 	.word	0x080085ab
 8008578:	080085ab 	.word	0x080085ab
 800857c:	080085ab 	.word	0x080085ab
 8008580:	080085a3 	.word	0x080085a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008584:	f7fd fdae 	bl	80060e4 <HAL_RCC_GetPCLK1Freq>
 8008588:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800858a:	e014      	b.n	80085b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800858c:	f7fd fdc0 	bl	8006110 <HAL_RCC_GetPCLK2Freq>
 8008590:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008592:	e010      	b.n	80085b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008594:	4b4e      	ldr	r3, [pc, #312]	; (80086d0 <UART_SetConfig+0x5c0>)
 8008596:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008598:	e00d      	b.n	80085b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800859a:	f7fd fd35 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 800859e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085a0:	e009      	b.n	80085b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085a8:	e005      	b.n	80085b6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80085b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 8090 	beq.w	80086de <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c2:	4a44      	ldr	r2, [pc, #272]	; (80086d4 <UART_SetConfig+0x5c4>)
 80085c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085c8:	461a      	mov	r2, r3
 80085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80085d0:	005a      	lsls	r2, r3, #1
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	085b      	lsrs	r3, r3, #1
 80085d8:	441a      	add	r2, r3
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	2b0f      	cmp	r3, #15
 80085e8:	d916      	bls.n	8008618 <UART_SetConfig+0x508>
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085f0:	d212      	bcs.n	8008618 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	f023 030f 	bic.w	r3, r3, #15
 80085fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	085b      	lsrs	r3, r3, #1
 8008600:	b29b      	uxth	r3, r3
 8008602:	f003 0307 	and.w	r3, r3, #7
 8008606:	b29a      	uxth	r2, r3
 8008608:	8bfb      	ldrh	r3, [r7, #30]
 800860a:	4313      	orrs	r3, r2
 800860c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	8bfa      	ldrh	r2, [r7, #30]
 8008614:	60da      	str	r2, [r3, #12]
 8008616:	e062      	b.n	80086de <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800861e:	e05e      	b.n	80086de <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008620:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008624:	2b08      	cmp	r3, #8
 8008626:	d828      	bhi.n	800867a <UART_SetConfig+0x56a>
 8008628:	a201      	add	r2, pc, #4	; (adr r2, 8008630 <UART_SetConfig+0x520>)
 800862a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862e:	bf00      	nop
 8008630:	08008655 	.word	0x08008655
 8008634:	0800865d 	.word	0x0800865d
 8008638:	08008665 	.word	0x08008665
 800863c:	0800867b 	.word	0x0800867b
 8008640:	0800866b 	.word	0x0800866b
 8008644:	0800867b 	.word	0x0800867b
 8008648:	0800867b 	.word	0x0800867b
 800864c:	0800867b 	.word	0x0800867b
 8008650:	08008673 	.word	0x08008673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008654:	f7fd fd46 	bl	80060e4 <HAL_RCC_GetPCLK1Freq>
 8008658:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800865a:	e014      	b.n	8008686 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800865c:	f7fd fd58 	bl	8006110 <HAL_RCC_GetPCLK2Freq>
 8008660:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008662:	e010      	b.n	8008686 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008664:	4b1a      	ldr	r3, [pc, #104]	; (80086d0 <UART_SetConfig+0x5c0>)
 8008666:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008668:	e00d      	b.n	8008686 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800866a:	f7fd fccd 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 800866e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008670:	e009      	b.n	8008686 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008676:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008678:	e005      	b.n	8008686 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800867a:	2300      	movs	r3, #0
 800867c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008684:	bf00      	nop
    }

    if (pclk != 0U)
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	2b00      	cmp	r3, #0
 800868a:	d028      	beq.n	80086de <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	4a10      	ldr	r2, [pc, #64]	; (80086d4 <UART_SetConfig+0x5c4>)
 8008692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008696:	461a      	mov	r2, r3
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869a:	fbb3 f2f2 	udiv	r2, r3, r2
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	085b      	lsrs	r3, r3, #1
 80086a4:	441a      	add	r2, r3
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086b0:	6a3b      	ldr	r3, [r7, #32]
 80086b2:	2b0f      	cmp	r3, #15
 80086b4:	d910      	bls.n	80086d8 <UART_SetConfig+0x5c8>
 80086b6:	6a3b      	ldr	r3, [r7, #32]
 80086b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086bc:	d20c      	bcs.n	80086d8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	60da      	str	r2, [r3, #12]
 80086c8:	e009      	b.n	80086de <UART_SetConfig+0x5ce>
 80086ca:	bf00      	nop
 80086cc:	40008000 	.word	0x40008000
 80086d0:	00f42400 	.word	0x00f42400
 80086d4:	08009058 	.word	0x08009058
      }
      else
      {
        ret = HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	2200      	movs	r2, #0
 80086f2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2200      	movs	r2, #0
 80086f8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80086fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3730      	adds	r7, #48	; 0x30
 8008702:	46bd      	mov	sp, r7
 8008704:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008708 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008714:	f003 0308 	and.w	r3, r3, #8
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00a      	beq.n	8008732 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00a      	beq.n	8008754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	430a      	orrs	r2, r1
 8008752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008758:	f003 0302 	and.w	r3, r3, #2
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00a      	beq.n	8008776 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877a:	f003 0304 	and.w	r3, r3, #4
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00a      	beq.n	8008798 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	430a      	orrs	r2, r1
 8008796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879c:	f003 0310 	and.w	r3, r3, #16
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00a      	beq.n	80087ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	430a      	orrs	r2, r1
 80087b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087be:	f003 0320 	and.w	r3, r3, #32
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00a      	beq.n	80087dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	430a      	orrs	r2, r1
 80087da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d01a      	beq.n	800881e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	430a      	orrs	r2, r1
 80087fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008806:	d10a      	bne.n	800881e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00a      	beq.n	8008840 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	430a      	orrs	r2, r1
 800883e:	605a      	str	r2, [r3, #4]
  }
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b098      	sub	sp, #96	; 0x60
 8008850:	af02      	add	r7, sp, #8
 8008852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800885c:	f7fa fdf4 	bl	8003448 <HAL_GetTick>
 8008860:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 0308 	and.w	r3, r3, #8
 800886c:	2b08      	cmp	r3, #8
 800886e:	d12f      	bne.n	80088d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008870:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008878:	2200      	movs	r2, #0
 800887a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f88e 	bl	80089a0 <UART_WaitOnFlagUntilTimeout>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d022      	beq.n	80088d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008892:	e853 3f00 	ldrex	r3, [r3]
 8008896:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800889e:	653b      	str	r3, [r7, #80]	; 0x50
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	461a      	mov	r2, r3
 80088a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088a8:	647b      	str	r3, [r7, #68]	; 0x44
 80088aa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088b0:	e841 2300 	strex	r3, r2, [r1]
 80088b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1e6      	bne.n	800888a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2220      	movs	r2, #32
 80088c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e063      	b.n	8008998 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0304 	and.w	r3, r3, #4
 80088da:	2b04      	cmp	r3, #4
 80088dc:	d149      	bne.n	8008972 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088e6:	2200      	movs	r2, #0
 80088e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f857 	bl	80089a0 <UART_WaitOnFlagUntilTimeout>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d03c      	beq.n	8008972 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008900:	e853 3f00 	ldrex	r3, [r3]
 8008904:	623b      	str	r3, [r7, #32]
   return(result);
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800890c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008916:	633b      	str	r3, [r7, #48]	; 0x30
 8008918:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800891c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800891e:	e841 2300 	strex	r3, r2, [r1]
 8008922:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e6      	bne.n	80088f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	3308      	adds	r3, #8
 8008930:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	e853 3f00 	ldrex	r3, [r3]
 8008938:	60fb      	str	r3, [r7, #12]
   return(result);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f023 0301 	bic.w	r3, r3, #1
 8008940:	64bb      	str	r3, [r7, #72]	; 0x48
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	3308      	adds	r3, #8
 8008948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800894a:	61fa      	str	r2, [r7, #28]
 800894c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894e:	69b9      	ldr	r1, [r7, #24]
 8008950:	69fa      	ldr	r2, [r7, #28]
 8008952:	e841 2300 	strex	r3, r2, [r1]
 8008956:	617b      	str	r3, [r7, #20]
   return(result);
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1e5      	bne.n	800892a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2220      	movs	r2, #32
 8008962:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e012      	b.n	8008998 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2220      	movs	r2, #32
 8008976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2220      	movs	r2, #32
 800897e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3758      	adds	r7, #88	; 0x58
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	603b      	str	r3, [r7, #0]
 80089ac:	4613      	mov	r3, r2
 80089ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089b0:	e04f      	b.n	8008a52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089b8:	d04b      	beq.n	8008a52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ba:	f7fa fd45 	bl	8003448 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d302      	bcc.n	80089d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e04e      	b.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 0304 	and.w	r3, r3, #4
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d037      	beq.n	8008a52 <UART_WaitOnFlagUntilTimeout+0xb2>
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2b80      	cmp	r3, #128	; 0x80
 80089e6:	d034      	beq.n	8008a52 <UART_WaitOnFlagUntilTimeout+0xb2>
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2b40      	cmp	r3, #64	; 0x40
 80089ec:	d031      	beq.n	8008a52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	69db      	ldr	r3, [r3, #28]
 80089f4:	f003 0308 	and.w	r3, r3, #8
 80089f8:	2b08      	cmp	r3, #8
 80089fa:	d110      	bne.n	8008a1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2208      	movs	r2, #8
 8008a02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 f838 	bl	8008a7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2208      	movs	r2, #8
 8008a0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e029      	b.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	69db      	ldr	r3, [r3, #28]
 8008a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a2c:	d111      	bne.n	8008a52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 f81e 	bl	8008a7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2220      	movs	r2, #32
 8008a42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e00f      	b.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	69da      	ldr	r2, [r3, #28]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	bf0c      	ite	eq
 8008a62:	2301      	moveq	r3, #1
 8008a64:	2300      	movne	r3, #0
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	461a      	mov	r2, r3
 8008a6a:	79fb      	ldrb	r3, [r7, #7]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d0a0      	beq.n	80089b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b095      	sub	sp, #84	; 0x54
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a8a:	e853 3f00 	ldrex	r3, [r3]
 8008a8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aa0:	643b      	str	r3, [r7, #64]	; 0x40
 8008aa2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008aa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008aa8:	e841 2300 	strex	r3, r2, [r1]
 8008aac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1e6      	bne.n	8008a82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3308      	adds	r3, #8
 8008aba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abc:	6a3b      	ldr	r3, [r7, #32]
 8008abe:	e853 3f00 	ldrex	r3, [r3]
 8008ac2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008aca:	f023 0301 	bic.w	r3, r3, #1
 8008ace:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3308      	adds	r3, #8
 8008ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ad8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008adc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ae0:	e841 2300 	strex	r3, r2, [r1]
 8008ae4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1e3      	bne.n	8008ab4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d118      	bne.n	8008b26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	e853 3f00 	ldrex	r3, [r3]
 8008b00:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	f023 0310 	bic.w	r3, r3, #16
 8008b08:	647b      	str	r3, [r7, #68]	; 0x44
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b12:	61bb      	str	r3, [r7, #24]
 8008b14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	6979      	ldr	r1, [r7, #20]
 8008b18:	69ba      	ldr	r2, [r7, #24]
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e6      	bne.n	8008af4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008b3a:	bf00      	nop
 8008b3c:	3754      	adds	r7, #84	; 0x54
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b46:	b480      	push	{r7}
 8008b48:	b085      	sub	sp, #20
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d101      	bne.n	8008b5c <HAL_UARTEx_DisableFifoMode+0x16>
 8008b58:	2302      	movs	r3, #2
 8008b5a:	e027      	b.n	8008bac <HAL_UARTEx_DisableFifoMode+0x66>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2224      	movs	r2, #36	; 0x24
 8008b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f022 0201 	bic.w	r2, r2, #1
 8008b82:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b8a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2220      	movs	r2, #32
 8008b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d101      	bne.n	8008bd0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008bcc:	2302      	movs	r3, #2
 8008bce:	e02d      	b.n	8008c2c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2224      	movs	r2, #36	; 0x24
 8008bdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f022 0201 	bic.w	r2, r2, #1
 8008bf6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f84f 	bl	8008cb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d101      	bne.n	8008c4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c48:	2302      	movs	r3, #2
 8008c4a:	e02d      	b.n	8008ca8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2224      	movs	r2, #36	; 0x24
 8008c58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f022 0201 	bic.w	r2, r2, #1
 8008c72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	430a      	orrs	r2, r1
 8008c86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f811 	bl	8008cb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2220      	movs	r2, #32
 8008c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d108      	bne.n	8008cd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008cd0:	e031      	b.n	8008d36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008cd2:	2308      	movs	r3, #8
 8008cd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008cd6:	2308      	movs	r3, #8
 8008cd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	0e5b      	lsrs	r3, r3, #25
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	f003 0307 	and.w	r3, r3, #7
 8008ce8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	0f5b      	lsrs	r3, r3, #29
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	f003 0307 	and.w	r3, r3, #7
 8008cf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	7b3a      	ldrb	r2, [r7, #12]
 8008cfe:	4911      	ldr	r1, [pc, #68]	; (8008d44 <UARTEx_SetNbDataToProcess+0x94>)
 8008d00:	5c8a      	ldrb	r2, [r1, r2]
 8008d02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d06:	7b3a      	ldrb	r2, [r7, #12]
 8008d08:	490f      	ldr	r1, [pc, #60]	; (8008d48 <UARTEx_SetNbDataToProcess+0x98>)
 8008d0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
 8008d1a:	7b7a      	ldrb	r2, [r7, #13]
 8008d1c:	4909      	ldr	r1, [pc, #36]	; (8008d44 <UARTEx_SetNbDataToProcess+0x94>)
 8008d1e:	5c8a      	ldrb	r2, [r1, r2]
 8008d20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d24:	7b7a      	ldrb	r2, [r7, #13]
 8008d26:	4908      	ldr	r1, [pc, #32]	; (8008d48 <UARTEx_SetNbDataToProcess+0x98>)
 8008d28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d36:	bf00      	nop
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	08009070 	.word	0x08009070
 8008d48:	08009078 	.word	0x08009078

08008d4c <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	ed93 7a06 	vldr	s14, [r3, #24]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	edd3 7a07 	vldr	s15, [r3, #28]
 8008d62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	edd3 7a08 	vldr	s15, [r3, #32]
 8008d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	edd3 7a06 	vldr	s15, [r3, #24]
 8008d7c:	eeb1 7a67 	vneg.f32	s14, s15
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	edd3 7a08 	vldr	s15, [r3, #32]
 8008d86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a1a      	ldr	r2, [r3, #32]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d006      	beq.n	8008db0 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	330c      	adds	r3, #12
 8008da6:	220c      	movs	r2, #12
 8008da8:	2100      	movs	r1, #0
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 f804 	bl	8008db8 <memset>
  }

}
 8008db0:	bf00      	nop
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <memset>:
 8008db8:	4402      	add	r2, r0
 8008dba:	4603      	mov	r3, r0
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d100      	bne.n	8008dc2 <memset+0xa>
 8008dc0:	4770      	bx	lr
 8008dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8008dc6:	e7f9      	b.n	8008dbc <memset+0x4>

08008dc8 <__errno>:
 8008dc8:	4b01      	ldr	r3, [pc, #4]	; (8008dd0 <__errno+0x8>)
 8008dca:	6818      	ldr	r0, [r3, #0]
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	20000070 	.word	0x20000070

08008dd4 <__libc_init_array>:
 8008dd4:	b570      	push	{r4, r5, r6, lr}
 8008dd6:	4d0d      	ldr	r5, [pc, #52]	; (8008e0c <__libc_init_array+0x38>)
 8008dd8:	4c0d      	ldr	r4, [pc, #52]	; (8008e10 <__libc_init_array+0x3c>)
 8008dda:	1b64      	subs	r4, r4, r5
 8008ddc:	10a4      	asrs	r4, r4, #2
 8008dde:	2600      	movs	r6, #0
 8008de0:	42a6      	cmp	r6, r4
 8008de2:	d109      	bne.n	8008df8 <__libc_init_array+0x24>
 8008de4:	4d0b      	ldr	r5, [pc, #44]	; (8008e14 <__libc_init_array+0x40>)
 8008de6:	4c0c      	ldr	r4, [pc, #48]	; (8008e18 <__libc_init_array+0x44>)
 8008de8:	f000 f91e 	bl	8009028 <_init>
 8008dec:	1b64      	subs	r4, r4, r5
 8008dee:	10a4      	asrs	r4, r4, #2
 8008df0:	2600      	movs	r6, #0
 8008df2:	42a6      	cmp	r6, r4
 8008df4:	d105      	bne.n	8008e02 <__libc_init_array+0x2e>
 8008df6:	bd70      	pop	{r4, r5, r6, pc}
 8008df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dfc:	4798      	blx	r3
 8008dfe:	3601      	adds	r6, #1
 8008e00:	e7ee      	b.n	8008de0 <__libc_init_array+0xc>
 8008e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e06:	4798      	blx	r3
 8008e08:	3601      	adds	r6, #1
 8008e0a:	e7f2      	b.n	8008df2 <__libc_init_array+0x1e>
 8008e0c:	08009088 	.word	0x08009088
 8008e10:	08009088 	.word	0x08009088
 8008e14:	08009088 	.word	0x08009088
 8008e18:	0800908c 	.word	0x0800908c

08008e1c <sqrt>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	ed2d 8b02 	vpush	{d8}
 8008e22:	ec55 4b10 	vmov	r4, r5, d0
 8008e26:	f000 f825 	bl	8008e74 <__ieee754_sqrt>
 8008e2a:	4622      	mov	r2, r4
 8008e2c:	462b      	mov	r3, r5
 8008e2e:	4620      	mov	r0, r4
 8008e30:	4629      	mov	r1, r5
 8008e32:	eeb0 8a40 	vmov.f32	s16, s0
 8008e36:	eef0 8a60 	vmov.f32	s17, s1
 8008e3a:	f7f7 fe43 	bl	8000ac4 <__aeabi_dcmpun>
 8008e3e:	b990      	cbnz	r0, 8008e66 <sqrt+0x4a>
 8008e40:	2200      	movs	r2, #0
 8008e42:	2300      	movs	r3, #0
 8008e44:	4620      	mov	r0, r4
 8008e46:	4629      	mov	r1, r5
 8008e48:	f7f7 fe14 	bl	8000a74 <__aeabi_dcmplt>
 8008e4c:	b158      	cbz	r0, 8008e66 <sqrt+0x4a>
 8008e4e:	f7ff ffbb 	bl	8008dc8 <__errno>
 8008e52:	2321      	movs	r3, #33	; 0x21
 8008e54:	6003      	str	r3, [r0, #0]
 8008e56:	2200      	movs	r2, #0
 8008e58:	2300      	movs	r3, #0
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	f7f7 fcc1 	bl	80007e4 <__aeabi_ddiv>
 8008e62:	ec41 0b18 	vmov	d8, r0, r1
 8008e66:	eeb0 0a48 	vmov.f32	s0, s16
 8008e6a:	eef0 0a68 	vmov.f32	s1, s17
 8008e6e:	ecbd 8b02 	vpop	{d8}
 8008e72:	bd38      	pop	{r3, r4, r5, pc}

08008e74 <__ieee754_sqrt>:
 8008e74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e78:	ec55 4b10 	vmov	r4, r5, d0
 8008e7c:	4e67      	ldr	r6, [pc, #412]	; (800901c <__ieee754_sqrt+0x1a8>)
 8008e7e:	43ae      	bics	r6, r5
 8008e80:	ee10 0a10 	vmov	r0, s0
 8008e84:	ee10 2a10 	vmov	r2, s0
 8008e88:	4629      	mov	r1, r5
 8008e8a:	462b      	mov	r3, r5
 8008e8c:	d10d      	bne.n	8008eaa <__ieee754_sqrt+0x36>
 8008e8e:	f7f7 fb7f 	bl	8000590 <__aeabi_dmul>
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	4620      	mov	r0, r4
 8008e98:	4629      	mov	r1, r5
 8008e9a:	f7f7 f9c3 	bl	8000224 <__adddf3>
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	460d      	mov	r5, r1
 8008ea2:	ec45 4b10 	vmov	d0, r4, r5
 8008ea6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eaa:	2d00      	cmp	r5, #0
 8008eac:	dc0b      	bgt.n	8008ec6 <__ieee754_sqrt+0x52>
 8008eae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008eb2:	4326      	orrs	r6, r4
 8008eb4:	d0f5      	beq.n	8008ea2 <__ieee754_sqrt+0x2e>
 8008eb6:	b135      	cbz	r5, 8008ec6 <__ieee754_sqrt+0x52>
 8008eb8:	f7f7 f9b2 	bl	8000220 <__aeabi_dsub>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	f7f7 fc90 	bl	80007e4 <__aeabi_ddiv>
 8008ec4:	e7eb      	b.n	8008e9e <__ieee754_sqrt+0x2a>
 8008ec6:	1509      	asrs	r1, r1, #20
 8008ec8:	f000 808d 	beq.w	8008fe6 <__ieee754_sqrt+0x172>
 8008ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ed0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008ed4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ed8:	07c9      	lsls	r1, r1, #31
 8008eda:	bf5c      	itt	pl
 8008edc:	005b      	lslpl	r3, r3, #1
 8008ede:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008ee2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ee6:	bf58      	it	pl
 8008ee8:	0052      	lslpl	r2, r2, #1
 8008eea:	2500      	movs	r5, #0
 8008eec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008ef0:	1076      	asrs	r6, r6, #1
 8008ef2:	0052      	lsls	r2, r2, #1
 8008ef4:	f04f 0e16 	mov.w	lr, #22
 8008ef8:	46ac      	mov	ip, r5
 8008efa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008efe:	eb0c 0001 	add.w	r0, ip, r1
 8008f02:	4298      	cmp	r0, r3
 8008f04:	bfde      	ittt	le
 8008f06:	1a1b      	suble	r3, r3, r0
 8008f08:	eb00 0c01 	addle.w	ip, r0, r1
 8008f0c:	186d      	addle	r5, r5, r1
 8008f0e:	005b      	lsls	r3, r3, #1
 8008f10:	f1be 0e01 	subs.w	lr, lr, #1
 8008f14:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008f18:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008f1c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008f20:	d1ed      	bne.n	8008efe <__ieee754_sqrt+0x8a>
 8008f22:	4674      	mov	r4, lr
 8008f24:	2720      	movs	r7, #32
 8008f26:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008f2a:	4563      	cmp	r3, ip
 8008f2c:	eb01 000e 	add.w	r0, r1, lr
 8008f30:	dc02      	bgt.n	8008f38 <__ieee754_sqrt+0xc4>
 8008f32:	d113      	bne.n	8008f5c <__ieee754_sqrt+0xe8>
 8008f34:	4290      	cmp	r0, r2
 8008f36:	d811      	bhi.n	8008f5c <__ieee754_sqrt+0xe8>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	eb00 0e01 	add.w	lr, r0, r1
 8008f3e:	da57      	bge.n	8008ff0 <__ieee754_sqrt+0x17c>
 8008f40:	f1be 0f00 	cmp.w	lr, #0
 8008f44:	db54      	blt.n	8008ff0 <__ieee754_sqrt+0x17c>
 8008f46:	f10c 0801 	add.w	r8, ip, #1
 8008f4a:	eba3 030c 	sub.w	r3, r3, ip
 8008f4e:	4290      	cmp	r0, r2
 8008f50:	bf88      	it	hi
 8008f52:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8008f56:	1a12      	subs	r2, r2, r0
 8008f58:	440c      	add	r4, r1
 8008f5a:	46c4      	mov	ip, r8
 8008f5c:	005b      	lsls	r3, r3, #1
 8008f5e:	3f01      	subs	r7, #1
 8008f60:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008f64:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008f68:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008f6c:	d1dd      	bne.n	8008f2a <__ieee754_sqrt+0xb6>
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	d01b      	beq.n	8008faa <__ieee754_sqrt+0x136>
 8008f72:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009020 <__ieee754_sqrt+0x1ac>
 8008f76:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009024 <__ieee754_sqrt+0x1b0>
 8008f7a:	e9da 0100 	ldrd	r0, r1, [sl]
 8008f7e:	e9db 2300 	ldrd	r2, r3, [fp]
 8008f82:	f7f7 f94d 	bl	8000220 <__aeabi_dsub>
 8008f86:	e9da 8900 	ldrd	r8, r9, [sl]
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	4640      	mov	r0, r8
 8008f90:	4649      	mov	r1, r9
 8008f92:	f7f7 fd79 	bl	8000a88 <__aeabi_dcmple>
 8008f96:	b140      	cbz	r0, 8008faa <__ieee754_sqrt+0x136>
 8008f98:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8008f9c:	e9da 0100 	ldrd	r0, r1, [sl]
 8008fa0:	e9db 2300 	ldrd	r2, r3, [fp]
 8008fa4:	d126      	bne.n	8008ff4 <__ieee754_sqrt+0x180>
 8008fa6:	3501      	adds	r5, #1
 8008fa8:	463c      	mov	r4, r7
 8008faa:	106a      	asrs	r2, r5, #1
 8008fac:	0863      	lsrs	r3, r4, #1
 8008fae:	07e9      	lsls	r1, r5, #31
 8008fb0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008fb4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008fb8:	bf48      	it	mi
 8008fba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008fbe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8008fc2:	461c      	mov	r4, r3
 8008fc4:	e76d      	b.n	8008ea2 <__ieee754_sqrt+0x2e>
 8008fc6:	0ad3      	lsrs	r3, r2, #11
 8008fc8:	3815      	subs	r0, #21
 8008fca:	0552      	lsls	r2, r2, #21
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d0fa      	beq.n	8008fc6 <__ieee754_sqrt+0x152>
 8008fd0:	02dc      	lsls	r4, r3, #11
 8008fd2:	d50a      	bpl.n	8008fea <__ieee754_sqrt+0x176>
 8008fd4:	f1c1 0420 	rsb	r4, r1, #32
 8008fd8:	fa22 f404 	lsr.w	r4, r2, r4
 8008fdc:	1e4d      	subs	r5, r1, #1
 8008fde:	408a      	lsls	r2, r1
 8008fe0:	4323      	orrs	r3, r4
 8008fe2:	1b41      	subs	r1, r0, r5
 8008fe4:	e772      	b.n	8008ecc <__ieee754_sqrt+0x58>
 8008fe6:	4608      	mov	r0, r1
 8008fe8:	e7f0      	b.n	8008fcc <__ieee754_sqrt+0x158>
 8008fea:	005b      	lsls	r3, r3, #1
 8008fec:	3101      	adds	r1, #1
 8008fee:	e7ef      	b.n	8008fd0 <__ieee754_sqrt+0x15c>
 8008ff0:	46e0      	mov	r8, ip
 8008ff2:	e7aa      	b.n	8008f4a <__ieee754_sqrt+0xd6>
 8008ff4:	f7f7 f916 	bl	8000224 <__adddf3>
 8008ff8:	e9da 8900 	ldrd	r8, r9, [sl]
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	460b      	mov	r3, r1
 8009000:	4640      	mov	r0, r8
 8009002:	4649      	mov	r1, r9
 8009004:	f7f7 fd36 	bl	8000a74 <__aeabi_dcmplt>
 8009008:	b120      	cbz	r0, 8009014 <__ieee754_sqrt+0x1a0>
 800900a:	1ca0      	adds	r0, r4, #2
 800900c:	bf08      	it	eq
 800900e:	3501      	addeq	r5, #1
 8009010:	3402      	adds	r4, #2
 8009012:	e7ca      	b.n	8008faa <__ieee754_sqrt+0x136>
 8009014:	3401      	adds	r4, #1
 8009016:	f024 0401 	bic.w	r4, r4, #1
 800901a:	e7c6      	b.n	8008faa <__ieee754_sqrt+0x136>
 800901c:	7ff00000 	.word	0x7ff00000
 8009020:	20000078 	.word	0x20000078
 8009024:	20000080 	.word	0x20000080

08009028 <_init>:
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902a:	bf00      	nop
 800902c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902e:	bc08      	pop	{r3}
 8009030:	469e      	mov	lr, r3
 8009032:	4770      	bx	lr

08009034 <_fini>:
 8009034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009036:	bf00      	nop
 8009038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903a:	bc08      	pop	{r3}
 800903c:	469e      	mov	lr, r3
 800903e:	4770      	bx	lr
