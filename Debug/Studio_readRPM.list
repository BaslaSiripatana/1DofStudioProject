
Studio_readRPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d258  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800d430  0800d430  0000e430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d494  0800d494  0000f2f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d494  0800d494  0000e494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d49c  0800d49c  0000f2f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d49c  0800d49c  0000e49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4a0  0800d4a0  0000e4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f0  20000000  0800d4a4  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012fc  200002f0  0800d794  0000f2f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200015ec  0800d794  0000f5ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021ae0  00000000  00000000  0000f320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003660  00000000  00000000  00030e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  00034460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000134d  00000000  00000000  00035ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029664  00000000  00000000  00037035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002046f  00000000  00000000  00060699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116e9a  00000000  00000000  00080b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001979a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fa4  00000000  00000000  001979e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0019e98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002f0 	.word	0x200002f0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d418 	.word	0x0800d418

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002f4 	.word	0x200002f4
 8000214:	0800d418 	.word	0x0800d418

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000e00:	f000 b96a 	b.w	80010d8 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	460c      	mov	r4, r1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d14e      	bne.n	8000ec6 <__udivmoddi4+0xaa>
 8000e28:	4694      	mov	ip, r2
 8000e2a:	458c      	cmp	ip, r1
 8000e2c:	4686      	mov	lr, r0
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	d962      	bls.n	8000efa <__udivmoddi4+0xde>
 8000e34:	b14a      	cbz	r2, 8000e4a <__udivmoddi4+0x2e>
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	4091      	lsls	r1, r2
 8000e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e44:	4319      	orrs	r1, r3
 8000e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f f68c 	uxth.w	r6, ip
 8000e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d90a      	bls.n	8000e80 <__udivmoddi4+0x64>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e72:	f080 8112 	bcs.w	800109a <__udivmoddi4+0x27e>
 8000e76:	4299      	cmp	r1, r3
 8000e78:	f240 810f 	bls.w	800109a <__udivmoddi4+0x27e>
 8000e7c:	3c02      	subs	r4, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	1a59      	subs	r1, r3, r1
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e92:	fb00 f606 	mul.w	r6, r0, r6
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d90a      	bls.n	8000eb0 <__udivmoddi4+0x94>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea2:	f080 80fc 	bcs.w	800109e <__udivmoddi4+0x282>
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	f240 80f9 	bls.w	800109e <__udivmoddi4+0x282>
 8000eac:	4463      	add	r3, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	b11d      	cbz	r5, 8000ec2 <__udivmoddi4+0xa6>
 8000eba:	40d3      	lsrs	r3, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d905      	bls.n	8000ed6 <__udivmoddi4+0xba>
 8000eca:	b10d      	cbz	r5, 8000ed0 <__udivmoddi4+0xb4>
 8000ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e7f5      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000ed6:	fab3 f183 	clz	r1, r3
 8000eda:	2900      	cmp	r1, #0
 8000edc:	d146      	bne.n	8000f6c <__udivmoddi4+0x150>
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xcc>
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	f0c0 80f0 	bcc.w	80010c8 <__udivmoddi4+0x2ac>
 8000ee8:	1a86      	subs	r6, r0, r2
 8000eea:	eb64 0303 	sbc.w	r3, r4, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d0e6      	beq.n	8000ec2 <__udivmoddi4+0xa6>
 8000ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ef8:	e7e3      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	f040 8090 	bne.w	8001020 <__udivmoddi4+0x204>
 8000f00:	eba1 040c 	sub.w	r4, r1, ip
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f16:	fb08 4416 	mls	r4, r8, r6, r4
 8000f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f1e:	fb07 f006 	mul.w	r0, r7, r6
 8000f22:	4298      	cmp	r0, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x11c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x11a>
 8000f30:	4298      	cmp	r0, r3
 8000f32:	f200 80cd 	bhi.w	80010d0 <__udivmoddi4+0x2b4>
 8000f36:	4626      	mov	r6, r4
 8000f38:	1a1c      	subs	r4, r3, r0
 8000f3a:	fa1f f38e 	uxth.w	r3, lr
 8000f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f42:	fb08 4410 	mls	r4, r8, r0, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb00 f707 	mul.w	r7, r0, r7
 8000f4e:	429f      	cmp	r7, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x148>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x146>
 8000f5c:	429f      	cmp	r7, r3
 8000f5e:	f200 80b0 	bhi.w	80010c2 <__udivmoddi4+0x2a6>
 8000f62:	4620      	mov	r0, r4
 8000f64:	1bdb      	subs	r3, r3, r7
 8000f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f6a:	e7a5      	b.n	8000eb8 <__udivmoddi4+0x9c>
 8000f6c:	f1c1 0620 	rsb	r6, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 f706 	lsr.w	r7, r2, r6
 8000f76:	431f      	orrs	r7, r3
 8000f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000f80:	ea43 030c 	orr.w	r3, r3, ip
 8000f84:	40f4      	lsrs	r4, r6
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	0c38      	lsrs	r0, r7, #16
 8000f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f90:	fbb4 fef0 	udiv	lr, r4, r0
 8000f94:	fa1f fc87 	uxth.w	ip, r7
 8000f98:	fb00 441e 	mls	r4, r0, lr, r4
 8000f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fa4:	45a1      	cmp	r9, r4
 8000fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x1a6>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fb2:	f080 8084 	bcs.w	80010be <__udivmoddi4+0x2a2>
 8000fb6:	45a1      	cmp	r9, r4
 8000fb8:	f240 8081 	bls.w	80010be <__udivmoddi4+0x2a2>
 8000fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	eba4 0409 	sub.w	r4, r4, r9
 8000fc6:	fa1f f983 	uxth.w	r9, r3
 8000fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fce:	fb00 4413 	mls	r4, r0, r3, r4
 8000fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fda:	45a4      	cmp	ip, r4
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x1d2>
 8000fde:	193c      	adds	r4, r7, r4
 8000fe0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fe4:	d267      	bcs.n	80010b6 <__udivmoddi4+0x29a>
 8000fe6:	45a4      	cmp	ip, r4
 8000fe8:	d965      	bls.n	80010b6 <__udivmoddi4+0x29a>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ff6:	eba4 040c 	sub.w	r4, r4, ip
 8000ffa:	429c      	cmp	r4, r3
 8000ffc:	46ce      	mov	lr, r9
 8000ffe:	469c      	mov	ip, r3
 8001000:	d351      	bcc.n	80010a6 <__udivmoddi4+0x28a>
 8001002:	d04e      	beq.n	80010a2 <__udivmoddi4+0x286>
 8001004:	b155      	cbz	r5, 800101c <__udivmoddi4+0x200>
 8001006:	ebb8 030e 	subs.w	r3, r8, lr
 800100a:	eb64 040c 	sbc.w	r4, r4, ip
 800100e:	fa04 f606 	lsl.w	r6, r4, r6
 8001012:	40cb      	lsrs	r3, r1
 8001014:	431e      	orrs	r6, r3
 8001016:	40cc      	lsrs	r4, r1
 8001018:	e9c5 6400 	strd	r6, r4, [r5]
 800101c:	2100      	movs	r1, #0
 800101e:	e750      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8001020:	f1c2 0320 	rsb	r3, r2, #32
 8001024:	fa20 f103 	lsr.w	r1, r0, r3
 8001028:	fa0c fc02 	lsl.w	ip, ip, r2
 800102c:	fa24 f303 	lsr.w	r3, r4, r3
 8001030:	4094      	lsls	r4, r2
 8001032:	430c      	orrs	r4, r1
 8001034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001038:	fa00 fe02 	lsl.w	lr, r0, r2
 800103c:	fa1f f78c 	uxth.w	r7, ip
 8001040:	fbb3 f0f8 	udiv	r0, r3, r8
 8001044:	fb08 3110 	mls	r1, r8, r0, r3
 8001048:	0c23      	lsrs	r3, r4, #16
 800104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104e:	fb00 f107 	mul.w	r1, r0, r7
 8001052:	4299      	cmp	r1, r3
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x24c>
 8001056:	eb1c 0303 	adds.w	r3, ip, r3
 800105a:	f100 36ff 	add.w	r6, r0, #4294967295
 800105e:	d22c      	bcs.n	80010ba <__udivmoddi4+0x29e>
 8001060:	4299      	cmp	r1, r3
 8001062:	d92a      	bls.n	80010ba <__udivmoddi4+0x29e>
 8001064:	3802      	subs	r0, #2
 8001066:	4463      	add	r3, ip
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001070:	fb08 3311 	mls	r3, r8, r1, r3
 8001074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001078:	fb01 f307 	mul.w	r3, r1, r7
 800107c:	42a3      	cmp	r3, r4
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x276>
 8001080:	eb1c 0404 	adds.w	r4, ip, r4
 8001084:	f101 36ff 	add.w	r6, r1, #4294967295
 8001088:	d213      	bcs.n	80010b2 <__udivmoddi4+0x296>
 800108a:	42a3      	cmp	r3, r4
 800108c:	d911      	bls.n	80010b2 <__udivmoddi4+0x296>
 800108e:	3902      	subs	r1, #2
 8001090:	4464      	add	r4, ip
 8001092:	1ae4      	subs	r4, r4, r3
 8001094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001098:	e739      	b.n	8000f0e <__udivmoddi4+0xf2>
 800109a:	4604      	mov	r4, r0
 800109c:	e6f0      	b.n	8000e80 <__udivmoddi4+0x64>
 800109e:	4608      	mov	r0, r1
 80010a0:	e706      	b.n	8000eb0 <__udivmoddi4+0x94>
 80010a2:	45c8      	cmp	r8, r9
 80010a4:	d2ae      	bcs.n	8001004 <__udivmoddi4+0x1e8>
 80010a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ae:	3801      	subs	r0, #1
 80010b0:	e7a8      	b.n	8001004 <__udivmoddi4+0x1e8>
 80010b2:	4631      	mov	r1, r6
 80010b4:	e7ed      	b.n	8001092 <__udivmoddi4+0x276>
 80010b6:	4603      	mov	r3, r0
 80010b8:	e799      	b.n	8000fee <__udivmoddi4+0x1d2>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e7d4      	b.n	8001068 <__udivmoddi4+0x24c>
 80010be:	46d6      	mov	lr, sl
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1a6>
 80010c2:	4463      	add	r3, ip
 80010c4:	3802      	subs	r0, #2
 80010c6:	e74d      	b.n	8000f64 <__udivmoddi4+0x148>
 80010c8:	4606      	mov	r6, r0
 80010ca:	4623      	mov	r3, r4
 80010cc:	4608      	mov	r0, r1
 80010ce:	e70f      	b.n	8000ef0 <__udivmoddi4+0xd4>
 80010d0:	3e02      	subs	r6, #2
 80010d2:	4463      	add	r3, ip
 80010d4:	e730      	b.n	8000f38 <__udivmoddi4+0x11c>
 80010d6:	bf00      	nop

080010d8 <__aeabi_idiv0>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <modbus_1t5_Timeout>:
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);
void Hearthbeat();

// function for interrupt
void modbus_1t5_Timeout()
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2201      	movs	r2, #1
 80010e6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0201 	orr.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	2000030c 	.word	0x2000030c

0800111c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <modbus_3t5_Timeout+0x1c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2201      	movs	r2, #1
 800112a:	755a      	strb	r2, [r3, #21]

}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	2000030c 	.word	0x2000030c

0800113c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f00a fa03 	bl	800b550 <HAL_UART_GetError>
 800114a:	4603      	mov	r3, r0
 800114c:	2b20      	cmp	r3, #32
 800114e:	d101      	bne.n	8001154 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001150:	f7ff ffc4 	bl	80010dc <modbus_1t5_Timeout>

	}
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001166:	4a25      	ldr	r2, [pc, #148]	@ (80011fc <Modbus_init+0xa0>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800116c:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <Modbus_init+0xa0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	4a21      	ldr	r2, [pc, #132]	@ (8001200 <Modbus_init+0xa4>)
 800117a:	210e      	movs	r1, #14
 800117c:	4618      	mov	r0, r3
 800117e:	f008 fcbf 	bl	8009b00 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2110      	movs	r1, #16
 8001188:	4618      	mov	r0, r3
 800118a:	f00a f98b 	bl	800b4a4 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	4618      	mov	r0, r3
 8001194:	f00a f9a2 	bl	800b4dc <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	4a19      	ldr	r2, [pc, #100]	@ (8001204 <Modbus_init+0xa8>)
 800119e:	2104      	movs	r1, #4
 80011a0:	4618      	mov	r0, r3
 80011a2:	f009 fc69 	bl	800aa78 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <Modbus_init+0xa0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <Modbus_init+0xa0>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <Modbus_init+0xa0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80011b8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011bc:	4413      	add	r3, r2
 80011be:	3302      	adds	r3, #2
 80011c0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011c4:	4619      	mov	r1, r3
 80011c6:	f009 fd91 	bl	800acec <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <Modbus_init+0xa0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d10c      	bne.n	80011f4 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f007 fc5f 	bl	8008aa4 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011e6:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <Modbus_init+0xa0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f007 feb8 	bl	8008f64 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	2000030c 	.word	0x2000030c
 8001200:	0800111d 	.word	0x0800111d
 8001204:	0800113d 	.word	0x0800113d

08001208 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001214:	23ff      	movs	r3, #255	@ 0xff
 8001216:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001218:	23ff      	movs	r3, #255	@ 0xff
 800121a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800121c:	e013      	b.n	8001246 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	781a      	ldrb	r2, [r3, #0]
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	4053      	eors	r3, r2
 800122a:	b2db      	uxtb	r3, r3
 800122c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800122e:	4a0f      	ldr	r2, [pc, #60]	@ (800126c <CRC16+0x64>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4413      	add	r3, r2
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	4053      	eors	r3, r2
 800123a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800123c:	4a0c      	ldr	r2, [pc, #48]	@ (8001270 <CRC16+0x68>)
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	4413      	add	r3, r2
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001246:	883b      	ldrh	r3, [r7, #0]
 8001248:	1e5a      	subs	r2, r3, #1
 800124a:	803a      	strh	r2, [r7, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1e6      	bne.n	800121e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	7bbb      	ldrb	r3, [r7, #14]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21b      	sxth	r3, r3
 800125e:	b29b      	uxth	r3, r3
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	20000100 	.word	0x20000100
 8001270:	20000000 	.word	0x20000000

08001274 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800127a:	4b7e      	ldr	r3, [pc, #504]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	7ddb      	ldrb	r3, [r3, #23]
 8001280:	3b01      	subs	r3, #1
 8001282:	2b03      	cmp	r3, #3
 8001284:	d80a      	bhi.n	800129c <Modbus_Protocal_Worker+0x28>
 8001286:	a201      	add	r2, pc, #4	@ (adr r2, 800128c <Modbus_Protocal_Worker+0x18>)
 8001288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128c:	080012a7 	.word	0x080012a7
 8001290:	0800143b 	.word	0x0800143b
 8001294:	08001333 	.word	0x08001333
 8001298:	08001377 	.word	0x08001377
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 800129c:	4b75      	ldr	r3, [pc, #468]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2201      	movs	r2, #1
 80012a2:	75da      	strb	r2, [r3, #23]
		break;
 80012a4:	e0e1      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80012a6:	4b73      	ldr	r3, [pc, #460]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80012b2:	4b70      	ldr	r3, [pc, #448]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2202      	movs	r2, #2
 80012b8:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80012ba:	f000 f9cd 	bl	8001658 <Modbus_Emission>
 80012be:	e018      	b.n	80012f2 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80012c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80012ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d00b      	beq.n	80012f2 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80012da:	4b66      	ldr	r3, [pc, #408]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2200      	movs	r2, #0
 80012e0:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80012e2:	4b64      	ldr	r3, [pc, #400]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2200      	movs	r2, #0
 80012e8:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80012ea:	4b62      	ldr	r3, [pc, #392]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2203      	movs	r2, #3
 80012f0:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80012f2:	4b60      	ldr	r3, [pc, #384]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012fc:	2b20      	cmp	r3, #32
 80012fe:	f040 80ad 	bne.w	800145c <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001302:	4b5c      	ldr	r3, [pc, #368]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2200      	movs	r2, #0
 8001308:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800130c:	4b59      	ldr	r3, [pc, #356]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001312:	4b58      	ldr	r3, [pc, #352]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b57      	ldr	r3, [pc, #348]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800131e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001322:	4413      	add	r3, r2
 8001324:	3302      	adds	r3, #2
 8001326:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800132a:	4619      	mov	r1, r3
 800132c:	f009 fcde 	bl	800acec <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001330:	e094      	b.n	800145c <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001332:	4b50      	ldr	r3, [pc, #320]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	7d1b      	ldrb	r3, [r3, #20]
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 8091 	beq.w	8001460 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800133e:	4b4d      	ldr	r3, [pc, #308]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	22fe      	movs	r2, #254	@ 0xfe
 8001344:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001346:	4b4b      	ldr	r3, [pc, #300]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001350:	4b48      	ldr	r3, [pc, #288]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001360:	4b44      	ldr	r3, [pc, #272]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001362:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001364:	1a8a      	subs	r2, r1, r2
 8001366:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001368:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800136c:	4b41      	ldr	r3, [pc, #260]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2204      	movs	r2, #4
 8001372:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001374:	e074      	b.n	8001460 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001376:	4b3f      	ldr	r3, [pc, #252]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800137e:	f113 0f02 	cmn.w	r3, #2
 8001382:	d150      	bne.n	8001426 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001384:	4b3b      	ldr	r3, [pc, #236]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2200      	movs	r2, #0
 800138a:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 800138c:	4b39      	ldr	r3, [pc, #228]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001394:	4b37      	ldr	r3, [pc, #220]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800139c:	3b02      	subs	r3, #2
 800139e:	4619      	mov	r1, r3
 80013a0:	4610      	mov	r0, r2
 80013a2:	f7ff ff31 	bl	8001208 <CRC16>
 80013a6:	4603      	mov	r3, r0
 80013a8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013aa:	793a      	ldrb	r2, [r7, #4]
 80013ac:	4b31      	ldr	r3, [pc, #196]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013ae:	6819      	ldr	r1, [r3, #0]
 80013b0:	4b30      	ldr	r3, [pc, #192]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013b8:	3b02      	subs	r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d10c      	bne.n	80013de <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80013c4:	797a      	ldrb	r2, [r7, #5]
 80013c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013c8:	6819      	ldr	r1, [r3, #0]
 80013ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013d2:	3b01      	subs	r3, #1
 80013d4:	440b      	add	r3, r1
 80013d6:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d004      	beq.n	80013e8 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80013de:	4b25      	ldr	r3, [pc, #148]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	22ff      	movs	r2, #255	@ 0xff
 80013e4:	759a      	strb	r2, [r3, #22]
				break;
 80013e6:	e040      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80013e8:	4b22      	ldr	r3, [pc, #136]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80013f0:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d113      	bne.n	8001422 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80013fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001402:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800140a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800140c:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001414:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001416:	461a      	mov	r2, r3
 8001418:	f00b feea 	bl	800d1f0 <memcpy>

			//execute command
			Modbus_frame_response();
 800141c:	f000 f904 	bl	8001628 <Modbus_frame_response>
 8001420:	e001      	b.n	8001426 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001422:	bf00      	nop
					}
		break;


	}
}
 8001424:	e021      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8001426:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	7d5b      	ldrb	r3, [r3, #21]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d019      	beq.n	8001464 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001430:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2201      	movs	r2, #1
 8001436:	75da      	strb	r2, [r3, #23]
		break;
 8001438:	e014      	b.n	8001464 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800143a:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001444:	2b20      	cmp	r3, #32
 8001446:	d10f      	bne.n	8001468 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001448:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001452:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2201      	movs	r2, #1
 8001458:	75da      	strb	r2, [r3, #23]
		break;
 800145a:	e005      	b.n	8001468 <Modbus_Protocal_Worker+0x1f4>
		break;
 800145c:	bf00      	nop
 800145e:	e004      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		break;
 8001460:	bf00      	nop
 8001462:	e002      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		break;
 8001464:	bf00      	nop
 8001466:	e000      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		break;
 8001468:	bf00      	nop
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000030c 	.word	0x2000030c

08001478 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800147e:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <modbusWrite1Register+0x7c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	7e5b      	ldrb	r3, [r3, #25]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	b29b      	uxth	r3, r3
 8001488:	4a1a      	ldr	r2, [pc, #104]	@ (80014f4 <modbusWrite1Register+0x7c>)
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	7e92      	ldrb	r2, [r2, #26]
 800148e:	4413      	add	r3, r2
 8001490:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001492:	88fa      	ldrh	r2, [r7, #6]
 8001494:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <modbusWrite1Register+0x7c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	429a      	cmp	r2, r3
 800149c:	d903      	bls.n	80014a6 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800149e:	2002      	movs	r0, #2
 80014a0:	f000 f8a0 	bl	80015e4 <ModbusErrorReply>
			 return;
 80014a4:	e023      	b.n	80014ee <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80014a6:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	440b      	add	r3, r1
 80014b6:	7ed2      	ldrb	r2, [r2, #27]
 80014b8:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6859      	ldr	r1, [r3, #4]
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	440b      	add	r3, r1
 80014ca:	7f12      	ldrb	r2, [r2, #28]
 80014cc:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80014d6:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80014dc:	2208      	movs	r2, #8
 80014de:	4619      	mov	r1, r3
 80014e0:	f00b fe86 	bl	800d1f0 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2205      	movs	r2, #5
 80014ea:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	2000030c 	.word	0x2000030c

080014f8 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80014fe:	4b38      	ldr	r3, [pc, #224]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	7edb      	ldrb	r3, [r3, #27]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b29b      	uxth	r3, r3
 8001508:	4a35      	ldr	r2, [pc, #212]	@ (80015e0 <modbusRead1Register+0xe8>)
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	7f12      	ldrb	r2, [r2, #28]
 800150e:	4413      	add	r3, r2
 8001510:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001512:	4b33      	ldr	r3, [pc, #204]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	7e5b      	ldrb	r3, [r3, #25]
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	b29b      	uxth	r3, r3
 800151c:	4a30      	ldr	r2, [pc, #192]	@ (80015e0 <modbusRead1Register+0xe8>)
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	7e92      	ldrb	r2, [r2, #26]
 8001522:	4413      	add	r3, r2
 8001524:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <modbusRead1Register+0x3a>
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	2b7d      	cmp	r3, #125	@ 0x7d
 8001530:	d903      	bls.n	800153a <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001532:	2003      	movs	r0, #3
 8001534:	f000 f856 	bl	80015e4 <ModbusErrorReply>
		 return;
 8001538:	e04e      	b.n	80015d8 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800153a:	88ba      	ldrh	r2, [r7, #4]
 800153c:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <modbusRead1Register+0xe8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	429a      	cmp	r2, r3
 8001544:	d808      	bhi.n	8001558 <modbusRead1Register+0x60>
 8001546:	88ba      	ldrh	r2, [r7, #4]
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	4413      	add	r3, r2
 800154c:	461a      	mov	r2, r3
 800154e:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	429a      	cmp	r2, r3
 8001556:	d903      	bls.n	8001560 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001558:	2002      	movs	r0, #2
 800155a:	f000 f843 	bl	80015e4 <ModbusErrorReply>
		 return;
 800155e:	e03b      	b.n	80015d8 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001560:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2203      	movs	r2, #3
 8001566:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0052      	lsls	r2, r2, #1
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800157a:	2400      	movs	r4, #0
 800157c:	e020      	b.n	80015c0 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800157e:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	88bb      	ldrh	r3, [r7, #4]
 8001586:	4423      	add	r3, r4
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	18d1      	adds	r1, r2, r3
 800158c:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <modbusRead1Register+0xe8>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	1c63      	adds	r3, r4, #1
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	7849      	ldrb	r1, [r1, #1]
 8001596:	4413      	add	r3, r2
 8001598:	460a      	mov	r2, r1
 800159a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <modbusRead1Register+0xe8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	88bb      	ldrh	r3, [r7, #4]
 80015a6:	4423      	add	r3, r4
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	18d1      	adds	r1, r2, r3
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <modbusRead1Register+0xe8>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	0063      	lsls	r3, r4, #1
 80015b2:	3303      	adds	r3, #3
 80015b4:	7809      	ldrb	r1, [r1, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	460a      	mov	r2, r1
 80015ba:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80015be:	3401      	adds	r4, #1
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	429c      	cmp	r4, r3
 80015c4:	dbdb      	blt.n	800157e <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	3301      	adds	r3, #1
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b04      	ldr	r3, [pc, #16]	@ (80015e0 <modbusRead1Register+0xe8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	0052      	lsls	r2, r2, #1
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000030c 	.word	0x2000030c

080015e4 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80015ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001624 <ModbusErrorReply+0x40>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	7e1a      	ldrb	r2, [r3, #24]
 80015f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <ModbusErrorReply+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001602:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <ModbusErrorReply+0x40>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	79fa      	ldrb	r2, [r7, #7]
 8001608:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 800160c:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <ModbusErrorReply+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2202      	movs	r2, #2
 8001612:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	2000030c 	.word	0x2000030c

08001628 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 800162c:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <Modbus_frame_response+0x2c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	7e1b      	ldrb	r3, [r3, #24]
 8001632:	2b03      	cmp	r3, #3
 8001634:	d004      	beq.n	8001640 <Modbus_frame_response+0x18>
 8001636:	2b06      	cmp	r3, #6
 8001638:	d105      	bne.n	8001646 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800163a:	f7ff ff1d 	bl	8001478 <modbusWrite1Register>
		break;
 800163e:	e006      	b.n	800164e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001640:	f7ff ff5a 	bl	80014f8 <modbusRead1Register>
		break;
 8001644:	e003      	b.n	800164e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001646:	2001      	movs	r0, #1
 8001648:	f7ff ffcc 	bl	80015e4 <ModbusErrorReply>
		break;
 800164c:	bf00      	nop

	}
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000030c 	.word	0x2000030c

08001658 <Modbus_Emission>:

void Modbus_Emission()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800165e:	4b38      	ldr	r3, [pc, #224]	@ (8001740 <Modbus_Emission+0xe8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001668:	2b20      	cmp	r3, #32
 800166a:	d15d      	bne.n	8001728 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800166c:	4b34      	ldr	r3, [pc, #208]	@ (8001740 <Modbus_Emission+0xe8>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b33      	ldr	r3, [pc, #204]	@ (8001740 <Modbus_Emission+0xe8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800167a:	4b31      	ldr	r3, [pc, #196]	@ (8001740 <Modbus_Emission+0xe8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001682:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001684:	4b2e      	ldr	r3, [pc, #184]	@ (8001740 <Modbus_Emission+0xe8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 800168c:	4b2c      	ldr	r3, [pc, #176]	@ (8001740 <Modbus_Emission+0xe8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001694:	461a      	mov	r2, r3
 8001696:	f00b fdab 	bl	800d1f0 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800169a:	4b29      	ldr	r3, [pc, #164]	@ (8001740 <Modbus_Emission+0xe8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b26      	ldr	r3, [pc, #152]	@ (8001740 <Modbus_Emission+0xe8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3203      	adds	r2, #3
 80016aa:	b292      	uxth	r2, r2
 80016ac:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016b0:	4b23      	ldr	r3, [pc, #140]	@ (8001740 <Modbus_Emission+0xe8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80016b8:	4b21      	ldr	r3, [pc, #132]	@ (8001740 <Modbus_Emission+0xe8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016c0:	3b02      	subs	r3, #2
 80016c2:	4619      	mov	r1, r3
 80016c4:	4610      	mov	r0, r2
 80016c6:	f7ff fd9f 	bl	8001208 <CRC16>
 80016ca:	4603      	mov	r3, r0
 80016cc:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80016ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <Modbus_Emission+0xe8>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <Modbus_Emission+0xe8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80016da:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80016dc:	7939      	ldrb	r1, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	460a      	mov	r2, r1
 80016e2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80016e6:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <Modbus_Emission+0xe8>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <Modbus_Emission+0xe8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80016f2:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80016f4:	7979      	ldrb	r1, [r7, #5]
 80016f6:	4413      	add	r3, r2
 80016f8:	460a      	mov	r2, r1
 80016fa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80016fe:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <Modbus_Emission+0xe8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001708:	2b20      	cmp	r3, #32
 800170a:	d10d      	bne.n	8001728 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <Modbus_Emission+0xe8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <Modbus_Emission+0xe8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <Modbus_Emission+0xe8>)
 800171c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800171e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001722:	461a      	mov	r2, r3
 8001724:	f009 fa62 	bl	800abec <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <Modbus_Emission+0xe8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2200      	movs	r2, #0
 800172e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <Modbus_Emission+0xe8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2200      	movs	r2, #0
 8001736:	755a      	strb	r2, [r3, #21]

}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2000030c 	.word	0x2000030c

08001744 <KalmanFilter_Init>:

void KalmanFilter_Init(KalmanFilter* kf, float32_t* A_data, float32_t* B_data, float32_t* C_data,
                       float32_t* G_data, float32_t* Q_data, float32_t* R_data, float32_t* P_data,
                       float32_t* x_data, float32_t* K_data, float32_t* temp1_data,
                       float32_t* temp2_data, float32_t* temp3_data, float32_t* temp4_data,
                       float32_t* temp5_data, float32_t* temp6_data, float32_t* S_data) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
    arm_mat_init_f32(&kf->A, 3, 3, A_data);
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2203      	movs	r2, #3
 8001758:	2103      	movs	r1, #3
 800175a:	f00b f892 	bl	800c882 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, 3, 1, B_data);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f103 0008 	add.w	r0, r3, #8
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	2103      	movs	r1, #3
 800176a:	f00b f88a 	bl	800c882 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->C, 1, 3, C_data);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f103 0010 	add.w	r0, r3, #16
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2203      	movs	r2, #3
 8001778:	2101      	movs	r1, #1
 800177a:	f00b f882 	bl	800c882 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->G, 3, 1, G_data); // Process noise gain matrix is now 3x1
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f103 0018 	add.w	r0, r3, #24
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2201      	movs	r2, #1
 8001788:	2103      	movs	r1, #3
 800178a:	f00b f87a 	bl	800c882 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, 1, 1, Q_data); // Process noise covariance is now 1x1
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f103 0020 	add.w	r0, r3, #32
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	2201      	movs	r2, #1
 8001798:	2101      	movs	r1, #1
 800179a:	f00b f872 	bl	800c882 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, 1, 1, R_data);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	2201      	movs	r2, #1
 80017a8:	2101      	movs	r1, #1
 80017aa:	f00b f86a 	bl	800c882 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, 3, 3, P_data);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80017b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b6:	2203      	movs	r2, #3
 80017b8:	2103      	movs	r1, #3
 80017ba:	f00b f862 	bl	800c882 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->x, 3, 1, x_data);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80017c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c6:	2201      	movs	r2, #1
 80017c8:	2103      	movs	r1, #3
 80017ca:	f00b f85a 	bl	800c882 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, 3, 1, K_data); // Initialize K matrix
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80017d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d6:	2201      	movs	r2, #1
 80017d8:	2103      	movs	r1, #3
 80017da:	f00b f852 	bl	800c882 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp1, 3, 3, temp1_data);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80017e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017e6:	2203      	movs	r2, #3
 80017e8:	2103      	movs	r1, #3
 80017ea:	f00b f84a 	bl	800c882 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, 3, 3, temp2_data);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80017f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017f6:	2203      	movs	r2, #3
 80017f8:	2103      	movs	r1, #3
 80017fa:	f00b f842 	bl	800c882 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, 3, 1, temp3_data);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8001804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001806:	2201      	movs	r2, #1
 8001808:	2103      	movs	r1, #3
 800180a:	f00b f83a 	bl	800c882 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp4, 1, 1, temp4_data);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8001814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001816:	2201      	movs	r2, #1
 8001818:	2101      	movs	r1, #1
 800181a:	f00b f832 	bl	800c882 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp5, 3, 1, temp5_data);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f103 0078 	add.w	r0, r3, #120	@ 0x78
 8001824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001826:	2201      	movs	r2, #1
 8001828:	2103      	movs	r1, #3
 800182a:	f00b f82a 	bl	800c882 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp6, 1, 3, temp6_data);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8001834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001836:	2203      	movs	r2, #3
 8001838:	2101      	movs	r1, #1
 800183a:	f00b f822 	bl	800c882 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->S, 1, 1, S_data);  // Initialize S matrix
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8001844:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001846:	2201      	movs	r2, #1
 8001848:	2101      	movs	r1, #1
 800184a:	f00b f81a 	bl	800c882 <arm_mat_init_f32>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <KalmanFilter_Predict>:

void KalmanFilter_Predict(KalmanFilter* kf, float32_t* u_data, float32_t* w_data) {
 8001856:	b580      	push	{r7, lr}
 8001858:	b088      	sub	sp, #32
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
    arm_matrix_instance_f32 u;
    arm_matrix_instance_f32 w;
    arm_mat_init_f32(&u, 1, 1, u_data);
 8001862:	f107 0018 	add.w	r0, r7, #24
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	2201      	movs	r2, #1
 800186a:	2101      	movs	r1, #1
 800186c:	f00b f809 	bl	800c882 <arm_mat_init_f32>
    arm_mat_init_f32(&w, 1, 1, w_data);
 8001870:	f107 0010 	add.w	r0, r7, #16
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	2101      	movs	r1, #1
 800187a:	f00b f802 	bl	800c882 <arm_mat_init_f32>

    // x = A * x + B * u + G * w
    arm_mat_mult_f32(&kf->A, &kf->x, &kf->temp3);
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3368      	adds	r3, #104	@ 0x68
 800188a:	461a      	mov	r2, r3
 800188c:	f00b fb88 	bl	800cfa0 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->B, &u, &kf->temp5);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f103 0008 	add.w	r0, r3, #8
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f103 0278 	add.w	r2, r3, #120	@ 0x78
 800189c:	f107 0318 	add.w	r3, r7, #24
 80018a0:	4619      	mov	r1, r3
 80018a2:	f00b fb7d 	bl	800cfa0 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->temp5, &kf->temp3);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3368      	adds	r3, #104	@ 0x68
 80018b6:	461a      	mov	r2, r3
 80018b8:	f00a ffa8 	bl	800c80c <arm_mat_add_f32>
    arm_mat_mult_f32(&kf->G, &w, &kf->temp5);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f103 0018 	add.w	r0, r3, #24
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f103 0278 	add.w	r2, r3, #120	@ 0x78
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	4619      	mov	r1, r3
 80018ce:	f00b fb67 	bl	800cfa0 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->temp5, &kf->x);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	3338      	adds	r3, #56	@ 0x38
 80018e2:	461a      	mov	r2, r3
 80018e4:	f00a ff92 	bl	800c80c <arm_mat_add_f32>

    // P = A * P * A^T + G * Q * G^T
    arm_mat_mult_f32(&kf->A, &kf->P, &kf->temp1);
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3358      	adds	r3, #88	@ 0x58
 80018f4:	461a      	mov	r2, r3
 80018f6:	f00b fb53 	bl	800cfa0 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &kf->temp2);
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	3360      	adds	r3, #96	@ 0x60
 8001900:	4619      	mov	r1, r3
 8001902:	4610      	mov	r0, r2
 8001904:	f00b fc01 	bl	800d10a <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	3330      	adds	r3, #48	@ 0x30
 8001918:	461a      	mov	r2, r3
 800191a:	f00b fb41 	bl	800cfa0 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->G, &kf->Q, &kf->temp3);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f103 0018 	add.w	r0, r3, #24
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f103 0120 	add.w	r1, r3, #32
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3368      	adds	r3, #104	@ 0x68
 800192e:	461a      	mov	r2, r3
 8001930:	f00b fb36 	bl	800cfa0 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->G, &kf->temp6);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f103 0218 	add.w	r2, r3, #24
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3380      	adds	r3, #128	@ 0x80
 800193e:	4619      	mov	r1, r3
 8001940:	4610      	mov	r0, r2
 8001942:	f00b fbe2 	bl	800d10a <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp3, &kf->temp6, &kf->temp1);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3358      	adds	r3, #88	@ 0x58
 8001956:	461a      	mov	r2, r3
 8001958:	f00b fb22 	bl	800cfa0 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->P, &kf->temp1, &kf->P);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3330      	adds	r3, #48	@ 0x30
 800196c:	461a      	mov	r2, r3
 800196e:	f00a ff4d 	bl	800c80c <arm_mat_add_f32>
}
 8001972:	bf00      	nop
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <KalmanFilter_Update>:

void KalmanFilter_Update(KalmanFilter* kf, float32_t* y_data) {
 800197c:	b5b0      	push	{r4, r5, r7, lr}
 800197e:	b090      	sub	sp, #64	@ 0x40
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
    // Innovation residual: y - C * x
    arm_matrix_instance_f32 y;
    arm_mat_init_f32(&y, 1, 1, y_data);
 8001986:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	2101      	movs	r1, #1
 8001990:	f00a ff77 	bl	800c882 <arm_mat_init_f32>
    arm_mat_mult_f32(&kf->C, &kf->x, &kf->temp4);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f103 0010 	add.w	r0, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3370      	adds	r3, #112	@ 0x70
 80019a4:	461a      	mov	r2, r3
 80019a6:	f00b fafb 	bl	800cfa0 <arm_mat_mult_f32>
    arm_mat_sub_f32(&y, &kf->temp4, &y);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80019b0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80019b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019b8:	4618      	mov	r0, r3
 80019ba:	f00b fb6b 	bl	800d094 <arm_mat_sub_f32>

    // Innovation covariance: S = C * P * C^T + R
    arm_mat_mult_f32(&kf->C, &kf->P, &kf->temp6);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f103 0010 	add.w	r0, r3, #16
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3380      	adds	r3, #128	@ 0x80
 80019ce:	461a      	mov	r2, r3
 80019d0:	f00b fae6 	bl	800cfa0 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->C, &kf->temp3);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f103 0210 	add.w	r2, r3, #16
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3368      	adds	r3, #104	@ 0x68
 80019de:	4619      	mov	r1, r3
 80019e0:	4610      	mov	r0, r2
 80019e2:	f00b fb92 	bl	800d10a <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp6, &kf->temp3, &kf->S);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3350      	adds	r3, #80	@ 0x50
 80019f6:	461a      	mov	r2, r3
 80019f8:	f00b fad2 	bl	800cfa0 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->S, &kf->R, &kf->S);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3350      	adds	r3, #80	@ 0x50
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f00a fefd 	bl	800c80c <arm_mat_add_f32>

    // Kalman gain: K = P * C^T * S^-1
    arm_mat_inverse_f32(&kf->S, &kf->temp4);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3370      	adds	r3, #112	@ 0x70
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4610      	mov	r0, r2
 8001a20:	f00a ff47 	bl	800c8b2 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&kf->P, &kf->temp3, &kf->temp5);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3378      	adds	r3, #120	@ 0x78
 8001a34:	461a      	mov	r2, r3
 8001a36:	f00b fab3 	bl	800cfa0 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->temp5, &kf->temp4, &kf->K);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f103 0078 	add.w	r0, r3, #120	@ 0x78
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3340      	adds	r3, #64	@ 0x40
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	f00b faa8 	bl	800cfa0 <arm_mat_mult_f32>

    // Corrected state estimate: x = x + K * y
    arm_mat_mult_f32(&kf->K, &y, &kf->temp3);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001a5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a60:	4619      	mov	r1, r3
 8001a62:	f00b fa9d 	bl	800cfa0 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->x, &kf->temp3, &kf->x);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3338      	adds	r3, #56	@ 0x38
 8001a76:	461a      	mov	r2, r3
 8001a78:	f00a fec8 	bl	800c80c <arm_mat_add_f32>

    // Corrected estimate covariance: P = (I - K * C) * P
    arm_matrix_instance_f32 I;
    float32_t I_data[9] = {1, 0, 0, 0, 1, 0, 0, 0, 1};
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <KalmanFilter_Update+0x170>)
 8001a7e:	f107 040c 	add.w	r4, r7, #12
 8001a82:	461d      	mov	r5, r3
 8001a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a8c:	682b      	ldr	r3, [r5, #0]
 8001a8e:	6023      	str	r3, [r4, #0]
    arm_mat_init_f32(&I, 3, 3, I_data);
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001a98:	2203      	movs	r2, #3
 8001a9a:	2103      	movs	r1, #3
 8001a9c:	f00a fef1 	bl	800c882 <arm_mat_init_f32>
    arm_mat_mult_f32(&kf->K, &kf->C, &kf->temp1);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f103 0110 	add.w	r1, r3, #16
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3358      	adds	r3, #88	@ 0x58
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	f00b fa75 	bl	800cfa0 <arm_mat_mult_f32>
    arm_mat_sub_f32(&I, &kf->temp1, &kf->temp2);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8001ac2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f00b fae4 	bl	800d094 <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->temp2, &kf->P, &kf->P);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3330      	adds	r3, #48	@ 0x30
 8001adc:	461a      	mov	r2, r3
 8001ade:	f00b fa5f 	bl	800cfa0 <arm_mat_mult_f32>
}
 8001ae2:	bf00      	nop
 8001ae4:	3740      	adds	r7, #64	@ 0x40
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aea:	bf00      	nop
 8001aec:	0800d430 	.word	0x0800d430

08001af0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af4:	b098      	sub	sp, #96	@ 0x60
 8001af6:	af0e      	add	r7, sp, #56	@ 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af8:	f003 fccd 	bl	8005496 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001afc:	f000 fb6a 	bl	80021d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b00:	f000 fef4 	bl	80028ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001b04:	f000 feac 	bl	8002860 <MX_DMA_Init>
  MX_TIM3_Init();
 8001b08:	f000 fc8e 	bl	8002428 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001b0c:	f000 fc38 	bl	8002380 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001b10:	f000 fd50 	bl	80025b4 <MX_TIM5_Init>
  MX_ADC1_Init();
 8001b14:	f000 fbaa 	bl	800226c <MX_ADC1_Init>
  MX_TIM4_Init();
 8001b18:	f000 fcfe 	bl	8002518 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001b1c:	f000 fd98 	bl	8002650 <MX_TIM6_Init>
  MX_TIM16_Init();
 8001b20:	f000 fe20 	bl	8002764 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001b24:	f000 fe4e 	bl	80027c4 <MX_USART2_UART_Init>
  MX_TIM15_Init();
 8001b28:	f000 fdca 	bl	80026c0 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  //PWM Motor
  HAL_TIM_Base_Start(&htim3);
 8001b2c:	48aa      	ldr	r0, [pc, #680]	@ (8001dd8 <main+0x2e8>)
 8001b2e:	f006 ff49 	bl	80089c4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b32:	2100      	movs	r1, #0
 8001b34:	48a8      	ldr	r0, [pc, #672]	@ (8001dd8 <main+0x2e8>)
 8001b36:	f007 f89b 	bl	8008c70 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001b3a:	4ba7      	ldr	r3, [pc, #668]	@ (8001dd8 <main+0x2e8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	635a      	str	r2, [r3, #52]	@ 0x34

  //Read Encoder
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001b42:	213c      	movs	r1, #60	@ 0x3c
 8001b44:	48a5      	ldr	r0, [pc, #660]	@ (8001ddc <main+0x2ec>)
 8001b46:	f007 fb4f 	bl	80091e8 <HAL_TIM_Encoder_Start>

  //time microsec
  HAL_TIM_Base_Start_IT(&htim5);
 8001b4a:	48a5      	ldr	r0, [pc, #660]	@ (8001de0 <main+0x2f0>)
 8001b4c:	f006 ffaa 	bl	8008aa4 <HAL_TIM_Base_Start_IT>

  //Read joystick
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 2);
 8001b50:	2202      	movs	r2, #2
 8001b52:	49a4      	ldr	r1, [pc, #656]	@ (8001de4 <main+0x2f4>)
 8001b54:	48a4      	ldr	r0, [pc, #656]	@ (8001de8 <main+0x2f8>)
 8001b56:	f004 f90b 	bl	8005d70 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim4);
 8001b5a:	48a4      	ldr	r0, [pc, #656]	@ (8001dec <main+0x2fc>)
 8001b5c:	f006 ff32 	bl	80089c4 <HAL_TIM_Base_Start>

  //PID Control Position
  PID1.Kp = 3; // 7.5
 8001b60:	4ba3      	ldr	r3, [pc, #652]	@ (8001df0 <main+0x300>)
 8001b62:	4aa4      	ldr	r2, [pc, #656]	@ (8001df4 <main+0x304>)
 8001b64:	619a      	str	r2, [r3, #24]
  PID1.Ki = 0.00025; // 0.0025
 8001b66:	4ba2      	ldr	r3, [pc, #648]	@ (8001df0 <main+0x300>)
 8001b68:	4aa3      	ldr	r2, [pc, #652]	@ (8001df8 <main+0x308>)
 8001b6a:	61da      	str	r2, [r3, #28]
  PID1.Kd = 0.005; // 3
 8001b6c:	4ba0      	ldr	r3, [pc, #640]	@ (8001df0 <main+0x300>)
 8001b6e:	4aa3      	ldr	r2, [pc, #652]	@ (8001dfc <main+0x30c>)
 8001b70:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID1, 0);
 8001b72:	2100      	movs	r1, #0
 8001b74:	489e      	ldr	r0, [pc, #632]	@ (8001df0 <main+0x300>)
 8001b76:	f00a fe13 	bl	800c7a0 <arm_pid_init_f32>

  //PID Control Velocity
  PID2.Kp = 0.3; //0.5
 8001b7a:	4ba1      	ldr	r3, [pc, #644]	@ (8001e00 <main+0x310>)
 8001b7c:	4aa1      	ldr	r2, [pc, #644]	@ (8001e04 <main+0x314>)
 8001b7e:	619a      	str	r2, [r3, #24]
  PID2.Ki = 0.0005; // 0.006
 8001b80:	4b9f      	ldr	r3, [pc, #636]	@ (8001e00 <main+0x310>)
 8001b82:	4aa1      	ldr	r2, [pc, #644]	@ (8001e08 <main+0x318>)
 8001b84:	61da      	str	r2, [r3, #28]
  PID2.Kd = 0; // 0.05
 8001b86:	4b9e      	ldr	r3, [pc, #632]	@ (8001e00 <main+0x310>)
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID2, 0);
 8001b8e:	2100      	movs	r1, #0
 8001b90:	489b      	ldr	r0, [pc, #620]	@ (8001e00 <main+0x310>)
 8001b92:	f00a fe05 	bl	800c7a0 <arm_pid_init_f32>

  //Modbus Setting
  // manaul add
  HAL_TIM_Base_Start_IT(&htim6);
 8001b96:	489d      	ldr	r0, [pc, #628]	@ (8001e0c <main+0x31c>)
 8001b98:	f006 ff84 	bl	8008aa4 <HAL_TIM_Base_Start_IT>

  //  modbus
  hmodbus.huart = &huart2;
 8001b9c:	4b9c      	ldr	r3, [pc, #624]	@ (8001e10 <main+0x320>)
 8001b9e:	4a9d      	ldr	r2, [pc, #628]	@ (8001e14 <main+0x324>)
 8001ba0:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8001ba2:	4b9b      	ldr	r3, [pc, #620]	@ (8001e10 <main+0x320>)
 8001ba4:	4a9c      	ldr	r2, [pc, #624]	@ (8001e18 <main+0x328>)
 8001ba6:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8001ba8:	4b99      	ldr	r3, [pc, #612]	@ (8001e10 <main+0x320>)
 8001baa:	2215      	movs	r2, #21
 8001bac:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8001bae:	4b98      	ldr	r3, [pc, #608]	@ (8001e10 <main+0x320>)
 8001bb0:	22c8      	movs	r2, #200	@ 0xc8
 8001bb2:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001bb4:	4999      	ldr	r1, [pc, #612]	@ (8001e1c <main+0x32c>)
 8001bb6:	4896      	ldr	r0, [pc, #600]	@ (8001e10 <main+0x320>)
 8001bb8:	f7ff fad0 	bl	800115c <Modbus_init>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bc2:	4897      	ldr	r0, [pc, #604]	@ (8001e20 <main+0x330>)
 8001bc4:	f005 fe3a 	bl	800783c <HAL_GPIO_WritePin>


  //-----Kalman filter--------//
  // Initialize the Kalman filter
  KalmanFilter_Init(&kf, A_data, B_data, C_data, G_data, Q_data, R_data, P_data, x_data, K_data, temp1_data, temp2_data, temp3_data, temp4_data, temp5_data, temp6_data, S_data);
 8001bc8:	4b96      	ldr	r3, [pc, #600]	@ (8001e24 <main+0x334>)
 8001bca:	930c      	str	r3, [sp, #48]	@ 0x30
 8001bcc:	4b96      	ldr	r3, [pc, #600]	@ (8001e28 <main+0x338>)
 8001bce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001bd0:	4b96      	ldr	r3, [pc, #600]	@ (8001e2c <main+0x33c>)
 8001bd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8001bd4:	4b96      	ldr	r3, [pc, #600]	@ (8001e30 <main+0x340>)
 8001bd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8001bd8:	4b96      	ldr	r3, [pc, #600]	@ (8001e34 <main+0x344>)
 8001bda:	9308      	str	r3, [sp, #32]
 8001bdc:	4b96      	ldr	r3, [pc, #600]	@ (8001e38 <main+0x348>)
 8001bde:	9307      	str	r3, [sp, #28]
 8001be0:	4b96      	ldr	r3, [pc, #600]	@ (8001e3c <main+0x34c>)
 8001be2:	9306      	str	r3, [sp, #24]
 8001be4:	4b96      	ldr	r3, [pc, #600]	@ (8001e40 <main+0x350>)
 8001be6:	9305      	str	r3, [sp, #20]
 8001be8:	4b96      	ldr	r3, [pc, #600]	@ (8001e44 <main+0x354>)
 8001bea:	9304      	str	r3, [sp, #16]
 8001bec:	4b96      	ldr	r3, [pc, #600]	@ (8001e48 <main+0x358>)
 8001bee:	9303      	str	r3, [sp, #12]
 8001bf0:	4b96      	ldr	r3, [pc, #600]	@ (8001e4c <main+0x35c>)
 8001bf2:	9302      	str	r3, [sp, #8]
 8001bf4:	4b96      	ldr	r3, [pc, #600]	@ (8001e50 <main+0x360>)
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	4b96      	ldr	r3, [pc, #600]	@ (8001e54 <main+0x364>)
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	4b96      	ldr	r3, [pc, #600]	@ (8001e58 <main+0x368>)
 8001bfe:	4a97      	ldr	r2, [pc, #604]	@ (8001e5c <main+0x36c>)
 8001c00:	4997      	ldr	r1, [pc, #604]	@ (8001e60 <main+0x370>)
 8001c02:	4898      	ldr	r0, [pc, #608]	@ (8001e64 <main+0x374>)
 8001c04:	f7ff fd9e 	bl	8001744 <KalmanFilter_Init>

  // Update Kalman every 0.001 s (1,000 Hz)
  HAL_TIM_Base_Start_IT(&htim15);
 8001c08:	4897      	ldr	r0, [pc, #604]	@ (8001e68 <main+0x378>)
 8001c0a:	f006 ff4b 	bl	8008aa4 <HAL_TIM_Base_Start_IT>

  LED_Ready();
 8001c0e:	f003 f833 	bl	8004c78 <LED_Ready>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  count_check += 1;
 8001c12:	4b96      	ldr	r3, [pc, #600]	@ (8001e6c <main+0x37c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	4a94      	ldr	r2, [pc, #592]	@ (8001e6c <main+0x37c>)
 8001c1a:	6013      	str	r3, [r2, #0]

	  //------Modbus Function------//

	  Modbus_Protocal_Worker();
 8001c1c:	f7ff fb2a 	bl	8001274 <Modbus_Protocal_Worker>
	  check_vaccum_status();
 8001c20:	f002 fa72 	bl	8004108 <check_vaccum_status>
	  check_gripper_status();
 8001c24:	f002 fb0a 	bl	800423c <check_gripper_status>
	  set_shelf();
 8001c28:	f002 fbb0 	bl	800438c <set_shelf>
	  Pointmode();
 8001c2c:	f002 fc58 	bl	80044e0 <Pointmode>
	  Home();
 8001c30:	f002 fce0 	bl	80045f4 <Home>
	  Run_jog();
 8001c34:	f002 fd28 	bl	8004688 <Run_jog>

	  static uint64_t timestamp = 0;
	  static uint64_t timestamp2 = 0;
	  static uint64_t timestamp3 = 0;

	  currentTime = micros();
 8001c38:	f000 ffba 	bl	8002bb0 <micros>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	498b      	ldr	r1, [pc, #556]	@ (8001e70 <main+0x380>)
 8001c42:	e9c1 2300 	strd	r2, r3, [r1]
//	  if (max_velo < QEIdata.linearVel)
//	  {
//		  max_velo = QEIdata.linearVel;
//	  }

	  if(currentTime > timestamp2){
 8001c46:	4b8a      	ldr	r3, [pc, #552]	@ (8001e70 <main+0x380>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4b88      	ldr	r3, [pc, #544]	@ (8001e74 <main+0x384>)
 8001c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c56:	4282      	cmp	r2, r0
 8001c58:	418b      	sbcs	r3, r1
 8001c5a:	f080 8157 	bcs.w	8001f0c <main+0x41c>
		  timestamp2 = currentTime + 167; //6,000 Hz
 8001c5e:	4b84      	ldr	r3, [pc, #528]	@ (8001e70 <main+0x380>)
 8001c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c64:	f112 04a7 	adds.w	r4, r2, #167	@ 0xa7
 8001c68:	f143 0500 	adc.w	r5, r3, #0
 8001c6c:	4622      	mov	r2, r4
 8001c6e:	462b      	mov	r3, r5
 8001c70:	4980      	ldr	r1, [pc, #512]	@ (8001e74 <main+0x384>)
 8001c72:	e9c1 2300 	strd	r2, r3, [r1]

		  //Read encoder
		  QEIEncoderPosVel_Update();
 8001c76:	f000 ffaf 	bl	8002bd8 <QEIEncoderPosVel_Update>

		  //Create Trajectory
		  q_f = setPosition;
 8001c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e78 <main+0x388>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a7f      	ldr	r2, [pc, #508]	@ (8001e7c <main+0x38c>)
 8001c80:	6013      	str	r3, [r2, #0]
		  checkStartMoving();
 8001c82:	f001 f8d9 	bl	8002e38 <checkStartMoving>
		  createTrajectory();
 8001c86:	f001 fb07 	bl	8003298 <createTrajectory>

		  if(mode == 1){
 8001c8a:	4b7d      	ldr	r3, [pc, #500]	@ (8001e80 <main+0x390>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	f040 8085 	bne.w	8001d9e <main+0x2ae>
			  LED_Auto();
 8001c94:	f003 f814 	bl	8004cc0 <LED_Auto>
			  if(fabs(setPosition - QEIdata.linearPos) <= 0.09 || setPosition == 0){
 8001c98:	4b77      	ldr	r3, [pc, #476]	@ (8001e78 <main+0x388>)
 8001c9a:	ed93 7a00 	vldr	s14, [r3]
 8001c9e:	4b79      	ldr	r3, [pc, #484]	@ (8001e84 <main+0x394>)
 8001ca0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca8:	eef0 7ae7 	vabs.f32	s15, s15
 8001cac:	ee17 0a90 	vmov	r0, s15
 8001cb0:	f7fe fc16 	bl	80004e0 <__aeabi_f2d>
 8001cb4:	a346      	add	r3, pc, #280	@ (adr r3, 8001dd0 <main+0x2e0>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	f7fe fee5 	bl	8000a88 <__aeabi_dcmple>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d107      	bne.n	8001cd4 <main+0x1e4>
 8001cc4:	4b6c      	ldr	r3, [pc, #432]	@ (8001e78 <main+0x388>)
 8001cc6:	edd3 7a00 	vldr	s15, [r3]
 8001cca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd2:	d104      	bne.n	8001cde <main+0x1ee>
				  Vin = 0;
 8001cd4:	4b6c      	ldr	r3, [pc, #432]	@ (8001e88 <main+0x398>)
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	e043      	b.n	8001d66 <main+0x276>
//			  else if(setPosition - QEIdata.linearPos >= -5 && setPosition - QEIdata.linearPos < -0.1){
//			  	  Vin = -1.35;
//			  	  check = -1;
//			  }
			  else{
				  Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 - QEIdata.linearVel);
 8001cde:	4b6b      	ldr	r3, [pc, #428]	@ (8001e8c <main+0x39c>)
 8001ce0:	ed93 7a00 	vldr	s14, [r3]
 8001ce4:	4b6a      	ldr	r3, [pc, #424]	@ (8001e90 <main+0x3a0>)
 8001ce6:	edd3 7a00 	vldr	s15, [r3]
 8001cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cee:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001cf2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cf6:	4b63      	ldr	r3, [pc, #396]	@ (8001e84 <main+0x394>)
 8001cf8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d00:	4b3f      	ldr	r3, [pc, #252]	@ (8001e00 <main+0x310>)
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d04:	edc7 7a08 	vstr	s15, [r7, #32]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0a:	ed93 7a00 	vldr	s14, [r3]
 8001d0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d12:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d22:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001d26:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d32:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d48:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Update state */
    S->state[1] = S->state[0];
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d56:	6a3a      	ldr	r2, [r7, #32]
 8001d58:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	4a49      	ldr	r2, [pc, #292]	@ (8001e88 <main+0x398>)
 8001d64:	6013      	str	r3, [r2, #0]
				  //Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
			  }
			  if(Vin > 24){
 8001d66:	4b48      	ldr	r3, [pc, #288]	@ (8001e88 <main+0x398>)
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8001d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d78:	dd02      	ble.n	8001d80 <main+0x290>
	  			  Vin = 24;
 8001d7a:	4b43      	ldr	r3, [pc, #268]	@ (8001e88 <main+0x398>)
 8001d7c:	4a45      	ldr	r2, [pc, #276]	@ (8001e94 <main+0x3a4>)
 8001d7e:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 8001d80:	4b41      	ldr	r3, [pc, #260]	@ (8001e88 <main+0x398>)
 8001d82:	edd3 7a00 	vldr	s15, [r3]
 8001d86:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 8001d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d92:	f140 809a 	bpl.w	8001eca <main+0x3da>
				  Vin = -24;
 8001d96:	4b3c      	ldr	r3, [pc, #240]	@ (8001e88 <main+0x398>)
 8001d98:	4a3f      	ldr	r2, [pc, #252]	@ (8001e98 <main+0x3a8>)
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e095      	b.n	8001eca <main+0x3da>
			  }
		  }
	      else if(mode == 2){ //manual (control with joy stick)
 8001d9e:	4b38      	ldr	r3, [pc, #224]	@ (8001e80 <main+0x390>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d108      	bne.n	8001db8 <main+0x2c8>
			  JoystickInput();
 8001da6:	f001 ff07 	bl	8003bb8 <JoystickInput>
			  button_up_down_input();
 8001daa:	f001 ff81 	bl	8003cb0 <button_up_down_input>
			  button_reset_input(); //set 0;
 8001dae:	f002 f821 	bl	8003df4 <button_reset_input>
			  button_save_position();
 8001db2:	f002 f8d9 	bl	8003f68 <button_save_position>
 8001db6:	e088      	b.n	8001eca <main+0x3da>
		  }
		  else if(mode == 3){ //stop mode
 8001db8:	4b31      	ldr	r3, [pc, #196]	@ (8001e80 <main+0x390>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d16f      	bne.n	8001ea0 <main+0x3b0>
			  Vin = Vin_force;
 8001dc0:	4b36      	ldr	r3, [pc, #216]	@ (8001e9c <main+0x3ac>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a30      	ldr	r2, [pc, #192]	@ (8001e88 <main+0x398>)
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	e07f      	b.n	8001eca <main+0x3da>
 8001dca:	bf00      	nop
 8001dcc:	f3af 8000 	nop.w
 8001dd0:	70a3d70a 	.word	0x70a3d70a
 8001dd4:	3fb70a3d 	.word	0x3fb70a3d
 8001dd8:	200004a8 	.word	0x200004a8
 8001ddc:	200003dc 	.word	0x200003dc
 8001de0:	20000640 	.word	0x20000640
 8001de4:	20000b48 	.word	0x20000b48
 8001de8:	20000310 	.word	0x20000310
 8001dec:	20000574 	.word	0x20000574
 8001df0:	20000bdc 	.word	0x20000bdc
 8001df4:	40400000 	.word	0x40400000
 8001df8:	3983126f 	.word	0x3983126f
 8001dfc:	3ba3d70a 	.word	0x3ba3d70a
 8001e00:	20000c00 	.word	0x20000c00
 8001e04:	3e99999a 	.word	0x3e99999a
 8001e08:	3a03126f 	.word	0x3a03126f
 8001e0c:	2000070c 	.word	0x2000070c
 8001e10:	20000c48 	.word	0x20000c48
 8001e14:	20000970 	.word	0x20000970
 8001e18:	200008a4 	.word	0x200008a4
 8001e1c:	20001120 	.word	0x20001120
 8001e20:	48000400 	.word	0x48000400
 8001e24:	2000136c 	.word	0x2000136c
 8001e28:	200013d4 	.word	0x200013d4
 8001e2c:	200013c8 	.word	0x200013c8
 8001e30:	200013c4 	.word	0x200013c4
 8001e34:	200013b8 	.word	0x200013b8
 8001e38:	20001394 	.word	0x20001394
 8001e3c:	20001370 	.word	0x20001370
 8001e40:	20001360 	.word	0x20001360
 8001e44:	20001354 	.word	0x20001354
 8001e48:	2000025c 	.word	0x2000025c
 8001e4c:	20000258 	.word	0x20000258
 8001e50:	20000254 	.word	0x20000254
 8001e54:	20000248 	.word	0x20000248
 8001e58:	2000023c 	.word	0x2000023c
 8001e5c:	20001348 	.word	0x20001348
 8001e60:	20000218 	.word	0x20000218
 8001e64:	20001404 	.word	0x20001404
 8001e68:	200007d8 	.word	0x200007d8
 8001e6c:	20001494 	.word	0x20001494
 8001e70:	20001340 	.word	0x20001340
 8001e74:	20001498 	.word	0x20001498
 8001e78:	20000c24 	.word	0x20000c24
 8001e7c:	20000b74 	.word	0x20000b74
 8001e80:	20000200 	.word	0x20000200
 8001e84:	20000b00 	.word	0x20000b00
 8001e88:	20000b68 	.word	0x20000b68
 8001e8c:	20000c28 	.word	0x20000c28
 8001e90:	20000b84 	.word	0x20000b84
 8001e94:	41c00000 	.word	0x41c00000
 8001e98:	c1c00000 	.word	0xc1c00000
 8001e9c:	20000b6c 	.word	0x20000b6c

//			  if(QEIdata.linearPos >= 40){
//				  Vin = 0;
//			  }
		  }
		  else if(mode == 4){ //Emergency mode
 8001ea0:	4bb5      	ldr	r3, [pc, #724]	@ (8002178 <main+0x688>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d110      	bne.n	8001eca <main+0x3da>
			  Vin = 0;
 8001ea8:	4bb4      	ldr	r3, [pc, #720]	@ (800217c <main+0x68c>)
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
			  //LED_Emergency();

			  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1){
 8001eb0:	2104      	movs	r1, #4
 8001eb2:	48b3      	ldr	r0, [pc, #716]	@ (8002180 <main+0x690>)
 8001eb4:	f005 fcaa 	bl	800780c <HAL_GPIO_ReadPin>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d105      	bne.n	8001eca <main+0x3da>
				  mode = 2;
 8001ebe:	4bae      	ldr	r3, [pc, #696]	@ (8002178 <main+0x688>)
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	701a      	strb	r2, [r3, #0]
				  emergency_reset = 1;
 8001ec4:	4baf      	ldr	r3, [pc, #700]	@ (8002184 <main+0x694>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
			  }
		  }

		  if(mode == 1){
 8001eca:	4bab      	ldr	r3, [pc, #684]	@ (8002178 <main+0x688>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d118      	bne.n	8001f04 <main+0x414>
			  if(QEIdata.linearPos < -0.5 || QEIdata.linearPos > 550){
 8001ed2:	4bad      	ldr	r3, [pc, #692]	@ (8002188 <main+0x698>)
 8001ed4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ed8:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001edc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee4:	d409      	bmi.n	8001efa <main+0x40a>
 8001ee6:	4ba8      	ldr	r3, [pc, #672]	@ (8002188 <main+0x698>)
 8001ee8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001eec:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 800218c <main+0x69c>
 8001ef0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef8:	dd06      	ble.n	8001f08 <main+0x418>
				  Vin = 0;
 8001efa:	4ba0      	ldr	r3, [pc, #640]	@ (800217c <main+0x68c>)
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	e001      	b.n	8001f08 <main+0x418>
			  }
		  }
		  else{
			  //software limit
			  SoftwareLimit();
 8001f04:	f001 fe00 	bl	8003b08 <SoftwareLimit>
		  }

		  //Drive Motor which PWM
		  DriveMotor();
 8001f08:	f001 fda2 	bl	8003a50 <DriveMotor>

	  }

	  if(currentTime > timestamp){
 8001f0c:	4ba0      	ldr	r3, [pc, #640]	@ (8002190 <main+0x6a0>)
 8001f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	4b9f      	ldr	r3, [pc, #636]	@ (8002194 <main+0x6a4>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	4282      	cmp	r2, r0
 8001f1e:	418b      	sbcs	r3, r1
 8001f20:	f080 80f2 	bcs.w	8002108 <main+0x618>
		  timestamp = currentTime + 4000; //250 Hz
 8001f24:	4b9a      	ldr	r3, [pc, #616]	@ (8002190 <main+0x6a0>)
 8001f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2a:	f512 687a 	adds.w	r8, r2, #4000	@ 0xfa0
 8001f2e:	f143 0900 	adc.w	r9, r3, #0
 8001f32:	4642      	mov	r2, r8
 8001f34:	464b      	mov	r3, r9
 8001f36:	4997      	ldr	r1, [pc, #604]	@ (8002194 <main+0x6a4>)
 8001f38:	e9c1 2300 	strd	r2, r3, [r1]

		  //control mode
		  if(mode == 1){ //auto
 8001f3c:	4b8e      	ldr	r3, [pc, #568]	@ (8002178 <main+0x688>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	f040 80e1 	bne.w	8002108 <main+0x618>
			  LED_Auto();
 8001f46:	f002 febb 	bl	8004cc0 <LED_Auto>
			  if(fabs(setPosition - QEIdata.linearPos) <= 0.1 || setPosition == 0){
 8001f4a:	4b93      	ldr	r3, [pc, #588]	@ (8002198 <main+0x6a8>)
 8001f4c:	ed93 7a00 	vldr	s14, [r3]
 8001f50:	4b8d      	ldr	r3, [pc, #564]	@ (8002188 <main+0x698>)
 8001f52:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001f56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f5a:	eef0 7ae7 	vabs.f32	s15, s15
 8001f5e:	ee17 0a90 	vmov	r0, s15
 8001f62:	f7fe fabd 	bl	80004e0 <__aeabi_f2d>
 8001f66:	a382      	add	r3, pc, #520	@ (adr r3, 8002170 <main+0x680>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f7fe fd8c 	bl	8000a88 <__aeabi_dcmple>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d107      	bne.n	8001f86 <main+0x496>
 8001f76:	4b88      	ldr	r3, [pc, #544]	@ (8002198 <main+0x6a8>)
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f84:	d104      	bne.n	8001f90 <main+0x4a0>
				  Vin = 0;
 8001f86:	4b7d      	ldr	r3, [pc, #500]	@ (800217c <main+0x68c>)
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	e087      	b.n	80020a0 <main+0x5b0>
//			  else if(setPosition - QEIdata.linearPos >= -5 && setPosition - QEIdata.linearPos < -0.1){
//				  Vin = -1.5;
//				  check = -1;
//			  }
			  else{
				  setVelocity = arm_pid_f32(&PID1, (setPosition + ref_p)/2 - QEIdata.linearPos);
 8001f90:	4b81      	ldr	r3, [pc, #516]	@ (8002198 <main+0x6a8>)
 8001f92:	ed93 7a00 	vldr	s14, [r3]
 8001f96:	4b81      	ldr	r3, [pc, #516]	@ (800219c <main+0x6ac>)
 8001f98:	edd3 7a00 	vldr	s15, [r3]
 8001f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001fa4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fa8:	4b77      	ldr	r3, [pc, #476]	@ (8002188 <main+0x698>)
 8001faa:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001fae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb2:	4b7b      	ldr	r3, [pc, #492]	@ (80021a0 <main+0x6b0>)
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	edc7 7a02 	vstr	s15, [r7, #8]
    out = (S->A0 * in) +
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	ed93 7a00 	vldr	s14, [r3]
 8001fc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fc4:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	edd3 6a01 	vldr	s13, [r3, #4]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001fd8:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	edd3 6a02 	vldr	s13, [r3, #8]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ffa:	edc7 7a01 	vstr	s15, [r7, #4]
    S->state[1] = S->state[0];
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	615a      	str	r2, [r3, #20]
    return (out);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a63      	ldr	r2, [pc, #396]	@ (80021a4 <main+0x6b4>)
 8002016:	6013      	str	r3, [r2, #0]
				  Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 + QEIdata.linearVel);
 8002018:	4b62      	ldr	r3, [pc, #392]	@ (80021a4 <main+0x6b4>)
 800201a:	ed93 7a00 	vldr	s14, [r3]
 800201e:	4b62      	ldr	r3, [pc, #392]	@ (80021a8 <main+0x6b8>)
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002028:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800202c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002030:	4b55      	ldr	r3, [pc, #340]	@ (8002188 <main+0x698>)
 8002032:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203a:	4b5c      	ldr	r3, [pc, #368]	@ (80021ac <main+0x6bc>)
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	edc7 7a05 	vstr	s15, [r7, #20]
    out = (S->A0 * in) +
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	ed93 7a00 	vldr	s14, [r3]
 8002048:	edd7 7a05 	vldr	s15, [r7, #20]
 800204c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	edd3 6a01 	vldr	s13, [r3, #4]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	edd3 7a03 	vldr	s15, [r3, #12]
 800205c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002060:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	edd3 6a02 	vldr	s13, [r3, #8]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002070:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002074:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800207e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002082:	edc7 7a04 	vstr	s15, [r7, #16]
    S->state[1] = S->state[0];
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	615a      	str	r2, [r3, #20]
    return (out);
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4a37      	ldr	r2, [pc, #220]	@ (800217c <main+0x68c>)
 800209e:	6013      	str	r3, [r2, #0]
				  //Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
			  }

			  if(Vin > 24){
 80020a0:	4b36      	ldr	r3, [pc, #216]	@ (800217c <main+0x68c>)
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80020aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	dd02      	ble.n	80020ba <main+0x5ca>
				  Vin = 24;
 80020b4:	4b31      	ldr	r3, [pc, #196]	@ (800217c <main+0x68c>)
 80020b6:	4a3e      	ldr	r2, [pc, #248]	@ (80021b0 <main+0x6c0>)
 80020b8:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 80020ba:	4b30      	ldr	r3, [pc, #192]	@ (800217c <main+0x68c>)
 80020bc:	edd3 7a00 	vldr	s15, [r3]
 80020c0:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 80020c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020cc:	d502      	bpl.n	80020d4 <main+0x5e4>
				  Vin = -24;
 80020ce:	4b2b      	ldr	r3, [pc, #172]	@ (800217c <main+0x68c>)
 80020d0:	4a38      	ldr	r2, [pc, #224]	@ (80021b4 <main+0x6c4>)
 80020d2:	601a      	str	r2, [r3, #0]
			  }

			  if(QEIdata.linearPos < -0.5 || QEIdata.linearPos > 450){
 80020d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002188 <main+0x698>)
 80020d6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80020da:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80020de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e6:	d409      	bmi.n	80020fc <main+0x60c>
 80020e8:	4b27      	ldr	r3, [pc, #156]	@ (8002188 <main+0x698>)
 80020ea:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80020ee:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80021b8 <main+0x6c8>
 80020f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fa:	dd03      	ble.n	8002104 <main+0x614>
			 	  Vin = 0;
 80020fc:	4b1f      	ldr	r3, [pc, #124]	@ (800217c <main+0x68c>)
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
			  }

			  //Drive Motor which PWM
			  DriveMotor();
 8002104:	f001 fca4 	bl	8003a50 <DriveMotor>
//		   trigger_savestate = 0;
//		   check_noise += 1;
//	  }

	  //Check Emergency Status
	  checkEmer();
 8002108:	f002 fe22 	bl	8004d50 <checkEmer>

	  if(currentTime > timestamp3){
 800210c:	4b20      	ldr	r3, [pc, #128]	@ (8002190 <main+0x6a0>)
 800210e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	4b29      	ldr	r3, [pc, #164]	@ (80021bc <main+0x6cc>)
 8002118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211c:	4282      	cmp	r2, r0
 800211e:	418b      	sbcs	r3, r1
 8002120:	f4bf ad77 	bcs.w	8001c12 <main+0x122>
		  timestamp3 = currentTime + 100000; //10 Hz
 8002124:	4b1a      	ldr	r3, [pc, #104]	@ (8002190 <main+0x6a0>)
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	4925      	ldr	r1, [pc, #148]	@ (80021c0 <main+0x6d0>)
 800212c:	eb12 0a01 	adds.w	sl, r2, r1
 8002130:	f143 0b00 	adc.w	fp, r3, #0
 8002134:	4652      	mov	r2, sl
 8002136:	465b      	mov	r3, fp
 8002138:	4920      	ldr	r1, [pc, #128]	@ (80021bc <main+0x6cc>)
 800213a:	e9c1 2300 	strd	r2, r3, [r1]
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 1){
 800213e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002142:	4820      	ldr	r0, [pc, #128]	@ (80021c4 <main+0x6d4>)
 8002144:	f005 fb62 	bl	800780c <HAL_GPIO_ReadPin>
 8002148:	4603      	mov	r3, r0
 800214a:	2b01      	cmp	r3, #1
 800214c:	d103      	bne.n	8002156 <main+0x666>
			  S_top = 1;
 800214e:	4b1e      	ldr	r3, [pc, #120]	@ (80021c8 <main+0x6d8>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e55d      	b.n	8001c12 <main+0x122>
		  }
		  else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 1){
 8002156:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800215a:	481c      	ldr	r0, [pc, #112]	@ (80021cc <main+0x6dc>)
 800215c:	f005 fb56 	bl	800780c <HAL_GPIO_ReadPin>
 8002160:	4603      	mov	r3, r0
 8002162:	2b01      	cmp	r3, #1
 8002164:	f47f ad55 	bne.w	8001c12 <main+0x122>
			  S_down = 1;
 8002168:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <main+0x6e0>)
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]
  {
 800216e:	e550      	b.n	8001c12 <main+0x122>
 8002170:	9999999a 	.word	0x9999999a
 8002174:	3fb99999 	.word	0x3fb99999
 8002178:	20000200 	.word	0x20000200
 800217c:	20000b68 	.word	0x20000b68
 8002180:	48000c00 	.word	0x48000c00
 8002184:	20000bbc 	.word	0x20000bbc
 8002188:	20000b00 	.word	0x20000b00
 800218c:	44098000 	.word	0x44098000
 8002190:	20001340 	.word	0x20001340
 8002194:	200014a0 	.word	0x200014a0
 8002198:	20000c24 	.word	0x20000c24
 800219c:	20000b80 	.word	0x20000b80
 80021a0:	20000bdc 	.word	0x20000bdc
 80021a4:	20000c28 	.word	0x20000c28
 80021a8:	20000b84 	.word	0x20000b84
 80021ac:	20000c00 	.word	0x20000c00
 80021b0:	41c00000 	.word	0x41c00000
 80021b4:	c1c00000 	.word	0xc1c00000
 80021b8:	43e10000 	.word	0x43e10000
 80021bc:	200014a8 	.word	0x200014a8
 80021c0:	000186a0 	.word	0x000186a0
 80021c4:	48000400 	.word	0x48000400
 80021c8:	20000c34 	.word	0x20000c34
 80021cc:	48000800 	.word	0x48000800
 80021d0:	20000c38 	.word	0x20000c38

080021d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b094      	sub	sp, #80	@ 0x50
 80021d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021da:	f107 0318 	add.w	r3, r7, #24
 80021de:	2238      	movs	r2, #56	@ 0x38
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f00a ffd2 	bl	800d18c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	60da      	str	r2, [r3, #12]
 80021f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80021f6:	2000      	movs	r0, #0
 80021f8:	f005 fb50 	bl	800789c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021fc:	2302      	movs	r3, #2
 80021fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002200:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002206:	2340      	movs	r3, #64	@ 0x40
 8002208:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800220a:	2302      	movs	r3, #2
 800220c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800220e:	2302      	movs	r3, #2
 8002210:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002212:	2304      	movs	r3, #4
 8002214:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002216:	2355      	movs	r3, #85	@ 0x55
 8002218:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800221a:	2302      	movs	r3, #2
 800221c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800221e:	2302      	movs	r3, #2
 8002220:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002222:	2302      	movs	r3, #2
 8002224:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002226:	f107 0318 	add.w	r3, r7, #24
 800222a:	4618      	mov	r0, r3
 800222c:	f005 fbea 	bl	8007a04 <HAL_RCC_OscConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002236:	f002 fdcb 	bl	8004dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800223a:	230f      	movs	r3, #15
 800223c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800223e:	2303      	movs	r3, #3
 8002240:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	2104      	movs	r1, #4
 8002252:	4618      	mov	r0, r3
 8002254:	f005 fee8 	bl	8008028 <HAL_RCC_ClockConfig>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800225e:	f002 fdb7 	bl	8004dd0 <Error_Handler>
  }
}
 8002262:	bf00      	nop
 8002264:	3750      	adds	r7, #80	@ 0x50
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	@ 0x30
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	2220      	movs	r2, #32
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f00a ff81 	bl	800d18c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800228a:	4b3a      	ldr	r3, [pc, #232]	@ (8002374 <MX_ADC1_Init+0x108>)
 800228c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002290:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002292:	4b38      	ldr	r3, [pc, #224]	@ (8002374 <MX_ADC1_Init+0x108>)
 8002294:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002298:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800229a:	4b36      	ldr	r3, [pc, #216]	@ (8002374 <MX_ADC1_Init+0x108>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022a0:	4b34      	ldr	r3, [pc, #208]	@ (8002374 <MX_ADC1_Init+0x108>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80022a6:	4b33      	ldr	r3, [pc, #204]	@ (8002374 <MX_ADC1_Init+0x108>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80022ac:	4b31      	ldr	r3, [pc, #196]	@ (8002374 <MX_ADC1_Init+0x108>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022b2:	4b30      	ldr	r3, [pc, #192]	@ (8002374 <MX_ADC1_Init+0x108>)
 80022b4:	2204      	movs	r2, #4
 80022b6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80022b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002374 <MX_ADC1_Init+0x108>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022be:	4b2d      	ldr	r3, [pc, #180]	@ (8002374 <MX_ADC1_Init+0x108>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80022c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002374 <MX_ADC1_Init+0x108>)
 80022c6:	2202      	movs	r2, #2
 80022c8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002374 <MX_ADC1_Init+0x108>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80022d2:	4b28      	ldr	r3, [pc, #160]	@ (8002374 <MX_ADC1_Init+0x108>)
 80022d4:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 80022d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80022da:	4b26      	ldr	r3, [pc, #152]	@ (8002374 <MX_ADC1_Init+0x108>)
 80022dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80022e2:	4b24      	ldr	r3, [pc, #144]	@ (8002374 <MX_ADC1_Init+0x108>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80022ea:	4b22      	ldr	r3, [pc, #136]	@ (8002374 <MX_ADC1_Init+0x108>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80022f0:	4b20      	ldr	r3, [pc, #128]	@ (8002374 <MX_ADC1_Init+0x108>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022f8:	481e      	ldr	r0, [pc, #120]	@ (8002374 <MX_ADC1_Init+0x108>)
 80022fa:	f003 fb7d 	bl	80059f8 <HAL_ADC_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8002304:	f002 fd64 	bl	8004dd0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800230c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002310:	4619      	mov	r1, r3
 8002312:	4818      	ldr	r0, [pc, #96]	@ (8002374 <MX_ADC1_Init+0x108>)
 8002314:	f004 fbae 	bl	8006a74 <HAL_ADCEx_MultiModeConfigChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800231e:	f002 fd57 	bl	8004dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002322:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <MX_ADC1_Init+0x10c>)
 8002324:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002326:	2306      	movs	r3, #6
 8002328:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800232e:	237f      	movs	r3, #127	@ 0x7f
 8002330:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002332:	2304      	movs	r3, #4
 8002334:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	4619      	mov	r1, r3
 800233e:	480d      	ldr	r0, [pc, #52]	@ (8002374 <MX_ADC1_Init+0x108>)
 8002340:	f003 fe08 	bl	8005f54 <HAL_ADC_ConfigChannel>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800234a:	f002 fd41 	bl	8004dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800234e:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <MX_ADC1_Init+0x110>)
 8002350:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002352:	230c      	movs	r3, #12
 8002354:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	4619      	mov	r1, r3
 800235a:	4806      	ldr	r0, [pc, #24]	@ (8002374 <MX_ADC1_Init+0x108>)
 800235c:	f003 fdfa 	bl	8005f54 <HAL_ADC_ConfigChannel>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8002366:	f002 fd33 	bl	8004dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	3730      	adds	r7, #48	@ 0x30
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000310 	.word	0x20000310
 8002378:	04300002 	.word	0x04300002
 800237c:	14f00020 	.word	0x14f00020

08002380 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08c      	sub	sp, #48	@ 0x30
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002386:	f107 030c 	add.w	r3, r7, #12
 800238a:	2224      	movs	r2, #36	@ 0x24
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f00a fefc 	bl	800d18c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002394:	463b      	mov	r3, r7
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800239e:	4b21      	ldr	r3, [pc, #132]	@ (8002424 <MX_TIM2_Init+0xa4>)
 80023a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002424 <MX_TIM2_Init+0xa4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002424 <MX_TIM2_Init+0xa4>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80023b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002424 <MX_TIM2_Init+0xa4>)
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295
 80023b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002424 <MX_TIM2_Init+0xa4>)
 80023bc:	2200      	movs	r2, #0
 80023be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c0:	4b18      	ldr	r3, [pc, #96]	@ (8002424 <MX_TIM2_Init+0xa4>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023c6:	2303      	movs	r3, #3
 80023c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023ce:	2301      	movs	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80023d6:	2302      	movs	r3, #2
 80023d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023de:	2301      	movs	r3, #1
 80023e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023e2:	2300      	movs	r3, #0
 80023e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80023ea:	f107 030c 	add.w	r3, r7, #12
 80023ee:	4619      	mov	r1, r3
 80023f0:	480c      	ldr	r0, [pc, #48]	@ (8002424 <MX_TIM2_Init+0xa4>)
 80023f2:	f006 fe45 	bl	8009080 <HAL_TIM_Encoder_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80023fc:	f002 fce8 	bl	8004dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002400:	2300      	movs	r3, #0
 8002402:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002408:	463b      	mov	r3, r7
 800240a:	4619      	mov	r1, r3
 800240c:	4805      	ldr	r0, [pc, #20]	@ (8002424 <MX_TIM2_Init+0xa4>)
 800240e:	f008 f9ed 	bl	800a7ec <HAL_TIMEx_MasterConfigSynchronization>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002418:	f002 fcda 	bl	8004dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800241c:	bf00      	nop
 800241e:	3730      	adds	r7, #48	@ 0x30
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	200003dc 	.word	0x200003dc

08002428 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08e      	sub	sp, #56	@ 0x38
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800242e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800243c:	f107 031c 	add.w	r3, r7, #28
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002448:	463b      	mov	r3, r7
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	60da      	str	r2, [r3, #12]
 8002454:	611a      	str	r2, [r3, #16]
 8002456:	615a      	str	r2, [r3, #20]
 8002458:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800245a:	4b2d      	ldr	r3, [pc, #180]	@ (8002510 <MX_TIM3_Init+0xe8>)
 800245c:	4a2d      	ldr	r2, [pc, #180]	@ (8002514 <MX_TIM3_Init+0xec>)
 800245e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8002460:	4b2b      	ldr	r3, [pc, #172]	@ (8002510 <MX_TIM3_Init+0xe8>)
 8002462:	22a9      	movs	r2, #169	@ 0xa9
 8002464:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002466:	4b2a      	ldr	r3, [pc, #168]	@ (8002510 <MX_TIM3_Init+0xe8>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800246c:	4b28      	ldr	r3, [pc, #160]	@ (8002510 <MX_TIM3_Init+0xe8>)
 800246e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002472:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002474:	4b26      	ldr	r3, [pc, #152]	@ (8002510 <MX_TIM3_Init+0xe8>)
 8002476:	2200      	movs	r2, #0
 8002478:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247a:	4b25      	ldr	r3, [pc, #148]	@ (8002510 <MX_TIM3_Init+0xe8>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002480:	4823      	ldr	r0, [pc, #140]	@ (8002510 <MX_TIM3_Init+0xe8>)
 8002482:	f006 fa3b 	bl	80088fc <HAL_TIM_Base_Init>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800248c:	f002 fca0 	bl	8004dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002494:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002496:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800249a:	4619      	mov	r1, r3
 800249c:	481c      	ldr	r0, [pc, #112]	@ (8002510 <MX_TIM3_Init+0xe8>)
 800249e:	f007 f9bf 	bl	8009820 <HAL_TIM_ConfigClockSource>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80024a8:	f002 fc92 	bl	8004dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024ac:	4818      	ldr	r0, [pc, #96]	@ (8002510 <MX_TIM3_Init+0xe8>)
 80024ae:	f006 fb71 	bl	8008b94 <HAL_TIM_PWM_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80024b8:	f002 fc8a 	bl	8004dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024bc:	2300      	movs	r3, #0
 80024be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024c4:	f107 031c 	add.w	r3, r7, #28
 80024c8:	4619      	mov	r1, r3
 80024ca:	4811      	ldr	r0, [pc, #68]	@ (8002510 <MX_TIM3_Init+0xe8>)
 80024cc:	f008 f98e 	bl	800a7ec <HAL_TIMEx_MasterConfigSynchronization>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80024d6:	f002 fc7b 	bl	8004dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024da:	2360      	movs	r3, #96	@ 0x60
 80024dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80024de:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80024e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024ec:	463b      	mov	r3, r7
 80024ee:	2200      	movs	r2, #0
 80024f0:	4619      	mov	r1, r3
 80024f2:	4807      	ldr	r0, [pc, #28]	@ (8002510 <MX_TIM3_Init+0xe8>)
 80024f4:	f007 f880 	bl	80095f8 <HAL_TIM_PWM_ConfigChannel>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80024fe:	f002 fc67 	bl	8004dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002502:	4803      	ldr	r0, [pc, #12]	@ (8002510 <MX_TIM3_Init+0xe8>)
 8002504:	f002 fe10 	bl	8005128 <HAL_TIM_MspPostInit>

}
 8002508:	bf00      	nop
 800250a:	3738      	adds	r7, #56	@ 0x38
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	200004a8 	.word	0x200004a8
 8002514:	40000400 	.word	0x40000400

08002518 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800251e:	f107 0310 	add.w	r3, r7, #16
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002536:	4b1d      	ldr	r3, [pc, #116]	@ (80025ac <MX_TIM4_Init+0x94>)
 8002538:	4a1d      	ldr	r2, [pc, #116]	@ (80025b0 <MX_TIM4_Init+0x98>)
 800253a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 800253c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ac <MX_TIM4_Init+0x94>)
 800253e:	22a9      	movs	r2, #169	@ 0xa9
 8002540:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002542:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <MX_TIM4_Init+0x94>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002548:	4b18      	ldr	r3, [pc, #96]	@ (80025ac <MX_TIM4_Init+0x94>)
 800254a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800254e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002550:	4b16      	ldr	r3, [pc, #88]	@ (80025ac <MX_TIM4_Init+0x94>)
 8002552:	2200      	movs	r2, #0
 8002554:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002556:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <MX_TIM4_Init+0x94>)
 8002558:	2200      	movs	r2, #0
 800255a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800255c:	4813      	ldr	r0, [pc, #76]	@ (80025ac <MX_TIM4_Init+0x94>)
 800255e:	f006 f9cd 	bl	80088fc <HAL_TIM_Base_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002568:	f002 fc32 	bl	8004dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800256c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002570:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002572:	f107 0310 	add.w	r3, r7, #16
 8002576:	4619      	mov	r1, r3
 8002578:	480c      	ldr	r0, [pc, #48]	@ (80025ac <MX_TIM4_Init+0x94>)
 800257a:	f007 f951 	bl	8009820 <HAL_TIM_ConfigClockSource>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002584:	f002 fc24 	bl	8004dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002588:	2320      	movs	r3, #32
 800258a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002590:	1d3b      	adds	r3, r7, #4
 8002592:	4619      	mov	r1, r3
 8002594:	4805      	ldr	r0, [pc, #20]	@ (80025ac <MX_TIM4_Init+0x94>)
 8002596:	f008 f929 	bl	800a7ec <HAL_TIMEx_MasterConfigSynchronization>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80025a0:	f002 fc16 	bl	8004dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025a4:	bf00      	nop
 80025a6:	3720      	adds	r7, #32
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000574 	.word	0x20000574
 80025b0:	40000800 	.word	0x40000800

080025b4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ba:	f107 0310 	add.w	r3, r7, #16
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
 80025d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002648 <MX_TIM5_Init+0x94>)
 80025d4:	4a1d      	ldr	r2, [pc, #116]	@ (800264c <MX_TIM5_Init+0x98>)
 80025d6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80025d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002648 <MX_TIM5_Init+0x94>)
 80025da:	22a9      	movs	r2, #169	@ 0xa9
 80025dc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025de:	4b1a      	ldr	r3, [pc, #104]	@ (8002648 <MX_TIM5_Init+0x94>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80025e4:	4b18      	ldr	r3, [pc, #96]	@ (8002648 <MX_TIM5_Init+0x94>)
 80025e6:	f04f 32ff 	mov.w	r2, #4294967295
 80025ea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ec:	4b16      	ldr	r3, [pc, #88]	@ (8002648 <MX_TIM5_Init+0x94>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f2:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <MX_TIM5_Init+0x94>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025f8:	4813      	ldr	r0, [pc, #76]	@ (8002648 <MX_TIM5_Init+0x94>)
 80025fa:	f006 f97f 	bl	80088fc <HAL_TIM_Base_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002604:	f002 fbe4 	bl	8004dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800260c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800260e:	f107 0310 	add.w	r3, r7, #16
 8002612:	4619      	mov	r1, r3
 8002614:	480c      	ldr	r0, [pc, #48]	@ (8002648 <MX_TIM5_Init+0x94>)
 8002616:	f007 f903 	bl	8009820 <HAL_TIM_ConfigClockSource>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002620:	f002 fbd6 	bl	8004dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002624:	2300      	movs	r3, #0
 8002626:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	4619      	mov	r1, r3
 8002630:	4805      	ldr	r0, [pc, #20]	@ (8002648 <MX_TIM5_Init+0x94>)
 8002632:	f008 f8db 	bl	800a7ec <HAL_TIMEx_MasterConfigSynchronization>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800263c:	f002 fbc8 	bl	8004dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002640:	bf00      	nop
 8002642:	3720      	adds	r7, #32
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000640 	.word	0x20000640
 800264c:	40000c00 	.word	0x40000c00

08002650 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002660:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <MX_TIM6_Init+0x68>)
 8002662:	4a16      	ldr	r2, [pc, #88]	@ (80026bc <MX_TIM6_Init+0x6c>)
 8002664:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1699;
 8002666:	4b14      	ldr	r3, [pc, #80]	@ (80026b8 <MX_TIM6_Init+0x68>)
 8002668:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800266c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266e:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <MX_TIM6_Init+0x68>)
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 8002674:	4b10      	ldr	r3, [pc, #64]	@ (80026b8 <MX_TIM6_Init+0x68>)
 8002676:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800267a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267c:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <MX_TIM6_Init+0x68>)
 800267e:	2200      	movs	r2, #0
 8002680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002682:	480d      	ldr	r0, [pc, #52]	@ (80026b8 <MX_TIM6_Init+0x68>)
 8002684:	f006 f93a 	bl	80088fc <HAL_TIM_Base_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800268e:	f002 fb9f 	bl	8004dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	4619      	mov	r1, r3
 800269e:	4806      	ldr	r0, [pc, #24]	@ (80026b8 <MX_TIM6_Init+0x68>)
 80026a0:	f008 f8a4 	bl	800a7ec <HAL_TIMEx_MasterConfigSynchronization>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80026aa:	f002 fb91 	bl	8004dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026ae:	bf00      	nop
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2000070c 	.word	0x2000070c
 80026bc:	40001000 	.word	0x40001000

080026c0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026c6:	f107 0310 	add.w	r3, r7, #16
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	605a      	str	r2, [r3, #4]
 80026d0:	609a      	str	r2, [r3, #8]
 80026d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	605a      	str	r2, [r3, #4]
 80026dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80026de:	4b1f      	ldr	r3, [pc, #124]	@ (800275c <MX_TIM15_Init+0x9c>)
 80026e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002760 <MX_TIM15_Init+0xa0>)
 80026e2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 169;
 80026e4:	4b1d      	ldr	r3, [pc, #116]	@ (800275c <MX_TIM15_Init+0x9c>)
 80026e6:	22a9      	movs	r2, #169	@ 0xa9
 80026e8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ea:	4b1c      	ldr	r3, [pc, #112]	@ (800275c <MX_TIM15_Init+0x9c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80026f0:	4b1a      	ldr	r3, [pc, #104]	@ (800275c <MX_TIM15_Init+0x9c>)
 80026f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026f6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f8:	4b18      	ldr	r3, [pc, #96]	@ (800275c <MX_TIM15_Init+0x9c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80026fe:	4b17      	ldr	r3, [pc, #92]	@ (800275c <MX_TIM15_Init+0x9c>)
 8002700:	2200      	movs	r2, #0
 8002702:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002704:	4b15      	ldr	r3, [pc, #84]	@ (800275c <MX_TIM15_Init+0x9c>)
 8002706:	2200      	movs	r2, #0
 8002708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800270a:	4814      	ldr	r0, [pc, #80]	@ (800275c <MX_TIM15_Init+0x9c>)
 800270c:	f006 f8f6 	bl	80088fc <HAL_TIM_Base_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002716:	f002 fb5b 	bl	8004dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800271a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800271e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002720:	f107 0310 	add.w	r3, r7, #16
 8002724:	4619      	mov	r1, r3
 8002726:	480d      	ldr	r0, [pc, #52]	@ (800275c <MX_TIM15_Init+0x9c>)
 8002728:	f007 f87a 	bl	8009820 <HAL_TIM_ConfigClockSource>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8002732:	f002 fb4d 	bl	8004dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	4619      	mov	r1, r3
 8002742:	4806      	ldr	r0, [pc, #24]	@ (800275c <MX_TIM15_Init+0x9c>)
 8002744:	f008 f852 	bl	800a7ec <HAL_TIMEx_MasterConfigSynchronization>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800274e:	f002 fb3f 	bl	8004dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002752:	bf00      	nop
 8002754:	3720      	adds	r7, #32
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	200007d8 	.word	0x200007d8
 8002760:	40014000 	.word	0x40014000

08002764 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002768:	4b14      	ldr	r3, [pc, #80]	@ (80027bc <MX_TIM16_Init+0x58>)
 800276a:	4a15      	ldr	r2, [pc, #84]	@ (80027c0 <MX_TIM16_Init+0x5c>)
 800276c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800276e:	4b13      	ldr	r3, [pc, #76]	@ (80027bc <MX_TIM16_Init+0x58>)
 8002770:	2200      	movs	r2, #0
 8002772:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002774:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <MX_TIM16_Init+0x58>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800277a:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <MX_TIM16_Init+0x58>)
 800277c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002780:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002782:	4b0e      	ldr	r3, [pc, #56]	@ (80027bc <MX_TIM16_Init+0x58>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002788:	4b0c      	ldr	r3, [pc, #48]	@ (80027bc <MX_TIM16_Init+0x58>)
 800278a:	2200      	movs	r2, #0
 800278c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800278e:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <MX_TIM16_Init+0x58>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002794:	4809      	ldr	r0, [pc, #36]	@ (80027bc <MX_TIM16_Init+0x58>)
 8002796:	f006 f8b1 	bl	80088fc <HAL_TIM_Base_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80027a0:	f002 fb16 	bl	8004dd0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80027a4:	2108      	movs	r1, #8
 80027a6:	4805      	ldr	r0, [pc, #20]	@ (80027bc <MX_TIM16_Init+0x58>)
 80027a8:	f006 fb74 	bl	8008e94 <HAL_TIM_OnePulse_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 80027b2:	f002 fb0d 	bl	8004dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200008a4 	.word	0x200008a4
 80027c0:	40014400 	.word	0x40014400

080027c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027c8:	4b23      	ldr	r3, [pc, #140]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 80027ca:	4a24      	ldr	r2, [pc, #144]	@ (800285c <MX_USART2_UART_Init+0x98>)
 80027cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80027ce:	4b22      	ldr	r3, [pc, #136]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 80027d0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80027d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80027d6:	4b20      	ldr	r3, [pc, #128]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 80027d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027dc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027de:	4b1e      	ldr	r3, [pc, #120]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80027e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 80027e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 80027ee:	220c      	movs	r2, #12
 80027f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027f2:	4b19      	ldr	r3, [pc, #100]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027f8:	4b17      	ldr	r3, [pc, #92]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027fe:	4b16      	ldr	r3, [pc, #88]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 8002800:	2200      	movs	r2, #0
 8002802:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002804:	4b14      	ldr	r3, [pc, #80]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 8002806:	2200      	movs	r2, #0
 8002808:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800280a:	4b13      	ldr	r3, [pc, #76]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 800280c:	2200      	movs	r2, #0
 800280e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002810:	4811      	ldr	r0, [pc, #68]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 8002812:	f008 f8d1 	bl	800a9b8 <HAL_UART_Init>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800281c:	f002 fad8 	bl	8004dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002820:	2100      	movs	r1, #0
 8002822:	480d      	ldr	r0, [pc, #52]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 8002824:	f009 fef1 	bl	800c60a <HAL_UARTEx_SetTxFifoThreshold>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800282e:	f002 facf 	bl	8004dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002832:	2100      	movs	r1, #0
 8002834:	4808      	ldr	r0, [pc, #32]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 8002836:	f009 ff26 	bl	800c686 <HAL_UARTEx_SetRxFifoThreshold>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002840:	f002 fac6 	bl	8004dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002844:	4804      	ldr	r0, [pc, #16]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 8002846:	f009 fea7 	bl	800c598 <HAL_UARTEx_DisableFifoMode>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002850:	f002 fabe 	bl	8004dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20000970 	.word	0x20000970
 800285c:	40004400 	.word	0x40004400

08002860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002866:	4b20      	ldr	r3, [pc, #128]	@ (80028e8 <MX_DMA_Init+0x88>)
 8002868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800286a:	4a1f      	ldr	r2, [pc, #124]	@ (80028e8 <MX_DMA_Init+0x88>)
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	6493      	str	r3, [r2, #72]	@ 0x48
 8002872:	4b1d      	ldr	r3, [pc, #116]	@ (80028e8 <MX_DMA_Init+0x88>)
 8002874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800287e:	4b1a      	ldr	r3, [pc, #104]	@ (80028e8 <MX_DMA_Init+0x88>)
 8002880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002882:	4a19      	ldr	r2, [pc, #100]	@ (80028e8 <MX_DMA_Init+0x88>)
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	6493      	str	r3, [r2, #72]	@ 0x48
 800288a:	4b17      	ldr	r3, [pc, #92]	@ (80028e8 <MX_DMA_Init+0x88>)
 800288c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002896:	4b14      	ldr	r3, [pc, #80]	@ (80028e8 <MX_DMA_Init+0x88>)
 8002898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800289a:	4a13      	ldr	r2, [pc, #76]	@ (80028e8 <MX_DMA_Init+0x88>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80028a2:	4b11      	ldr	r3, [pc, #68]	@ (80028e8 <MX_DMA_Init+0x88>)
 80028a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80028ae:	2200      	movs	r2, #0
 80028b0:	2100      	movs	r1, #0
 80028b2:	200b      	movs	r0, #11
 80028b4:	f004 fac1 	bl	8006e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80028b8:	200b      	movs	r0, #11
 80028ba:	f004 fad8 	bl	8006e6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2100      	movs	r1, #0
 80028c2:	200c      	movs	r0, #12
 80028c4:	f004 fab9 	bl	8006e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80028c8:	200c      	movs	r0, #12
 80028ca:	f004 fad0 	bl	8006e6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80028ce:	2200      	movs	r2, #0
 80028d0:	2100      	movs	r1, #0
 80028d2:	2038      	movs	r0, #56	@ 0x38
 80028d4:	f004 fab1 	bl	8006e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80028d8:	2038      	movs	r0, #56	@ 0x38
 80028da:	f004 fac8 	bl	8006e6e <HAL_NVIC_EnableIRQ>

}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000

080028ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	@ 0x28
 80028f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f2:	f107 0314 	add.w	r3, r7, #20
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	60da      	str	r2, [r3, #12]
 8002900:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002902:	4b7f      	ldr	r3, [pc, #508]	@ (8002b00 <MX_GPIO_Init+0x214>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	4a7e      	ldr	r2, [pc, #504]	@ (8002b00 <MX_GPIO_Init+0x214>)
 8002908:	f043 0304 	orr.w	r3, r3, #4
 800290c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800290e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b00 <MX_GPIO_Init+0x214>)
 8002910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800291a:	4b79      	ldr	r3, [pc, #484]	@ (8002b00 <MX_GPIO_Init+0x214>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291e:	4a78      	ldr	r2, [pc, #480]	@ (8002b00 <MX_GPIO_Init+0x214>)
 8002920:	f043 0320 	orr.w	r3, r3, #32
 8002924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002926:	4b76      	ldr	r3, [pc, #472]	@ (8002b00 <MX_GPIO_Init+0x214>)
 8002928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292a:	f003 0320 	and.w	r3, r3, #32
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002932:	4b73      	ldr	r3, [pc, #460]	@ (8002b00 <MX_GPIO_Init+0x214>)
 8002934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002936:	4a72      	ldr	r2, [pc, #456]	@ (8002b00 <MX_GPIO_Init+0x214>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800293e:	4b70      	ldr	r3, [pc, #448]	@ (8002b00 <MX_GPIO_Init+0x214>)
 8002940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800294a:	4b6d      	ldr	r3, [pc, #436]	@ (8002b00 <MX_GPIO_Init+0x214>)
 800294c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800294e:	4a6c      	ldr	r2, [pc, #432]	@ (8002b00 <MX_GPIO_Init+0x214>)
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002956:	4b6a      	ldr	r3, [pc, #424]	@ (8002b00 <MX_GPIO_Init+0x214>)
 8002958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002962:	4b67      	ldr	r3, [pc, #412]	@ (8002b00 <MX_GPIO_Init+0x214>)
 8002964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002966:	4a66      	ldr	r2, [pc, #408]	@ (8002b00 <MX_GPIO_Init+0x214>)
 8002968:	f043 0308 	orr.w	r3, r3, #8
 800296c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800296e:	4b64      	ldr	r3, [pc, #400]	@ (8002b00 <MX_GPIO_Init+0x214>)
 8002970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 800297a:	2200      	movs	r2, #0
 800297c:	f244 11b6 	movw	r1, #16822	@ 0x41b6
 8002980:	4860      	ldr	r0, [pc, #384]	@ (8002b04 <MX_GPIO_Init+0x218>)
 8002982:	f004 ff5b 	bl	800783c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002986:	2200      	movs	r2, #0
 8002988:	f44f 613e 	mov.w	r1, #3040	@ 0xbe0
 800298c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002990:	f004 ff54 	bl	800783c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_6, GPIO_PIN_RESET);
 8002994:	2200      	movs	r2, #0
 8002996:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800299a:	485b      	ldr	r0, [pc, #364]	@ (8002b08 <MX_GPIO_Init+0x21c>)
 800299c:	f004 ff4e 	bl	800783c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80029a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	4619      	mov	r1, r3
 80029b6:	4853      	ldr	r0, [pc, #332]	@ (8002b04 <MX_GPIO_Init+0x218>)
 80029b8:	f004 fda6 	bl	8007508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC1 PC2 PC4
                           PC5 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80029bc:	f244 13b6 	movw	r3, #16822	@ 0x41b6
 80029c0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c2:	2301      	movs	r3, #1
 80029c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ca:	2300      	movs	r3, #0
 80029cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ce:	f107 0314 	add.w	r3, r7, #20
 80029d2:	4619      	mov	r1, r3
 80029d4:	484b      	ldr	r0, [pc, #300]	@ (8002b04 <MX_GPIO_Init+0x218>)
 80029d6:	f004 fd97 	bl	8007508 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 PA9
                           PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80029da:	f44f 633a 	mov.w	r3, #2976	@ 0xba0
 80029de:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e0:	2301      	movs	r3, #1
 80029e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e8:	2300      	movs	r3, #0
 80029ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	4619      	mov	r1, r3
 80029f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029f6:	f004 fd87 	bl	8007508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029fa:	2340      	movs	r3, #64	@ 0x40
 80029fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fe:	2301      	movs	r3, #1
 8002a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a02:	2302      	movs	r3, #2
 8002a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a06:	2300      	movs	r3, #0
 8002a08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0a:	f107 0314 	add.w	r3, r7, #20
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a14:	f004 fd78 	bl	8007508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_6;
 8002a18:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8002a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2a:	f107 0314 	add.w	r3, r7, #20
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4835      	ldr	r0, [pc, #212]	@ (8002b08 <MX_GPIO_Init+0x21c>)
 8002a32:	f004 fd69 	bl	8007508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a36:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	4619      	mov	r1, r3
 8002a4a:	482e      	ldr	r0, [pc, #184]	@ (8002b04 <MX_GPIO_Init+0x218>)
 8002a4c:	f004 fd5c 	bl	8007508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5e:	f107 0314 	add.w	r3, r7, #20
 8002a62:	4619      	mov	r1, r3
 8002a64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a68:	f004 fd4e 	bl	8007508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a6c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a76:	2302      	movs	r3, #2
 8002a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a7a:	f107 0314 	add.w	r3, r7, #20
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4820      	ldr	r0, [pc, #128]	@ (8002b04 <MX_GPIO_Init+0x218>)
 8002a82:	f004 fd41 	bl	8007508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a86:	2304      	movs	r3, #4
 8002a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a92:	f107 0314 	add.w	r3, r7, #20
 8002a96:	4619      	mov	r1, r3
 8002a98:	481c      	ldr	r0, [pc, #112]	@ (8002b0c <MX_GPIO_Init+0x220>)
 8002a9a:	f004 fd35 	bl	8007508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a9e:	2330      	movs	r3, #48	@ 0x30
 8002aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aaa:	f107 0314 	add.w	r3, r7, #20
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4815      	ldr	r0, [pc, #84]	@ (8002b08 <MX_GPIO_Init+0x21c>)
 8002ab2:	f004 fd29 	bl	8007508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ab6:	2380      	movs	r3, #128	@ 0x80
 8002ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac2:	f107 0314 	add.w	r3, r7, #20
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	480f      	ldr	r0, [pc, #60]	@ (8002b08 <MX_GPIO_Init+0x21c>)
 8002aca:	f004 fd1d 	bl	8007508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ace:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4809      	ldr	r0, [pc, #36]	@ (8002b08 <MX_GPIO_Init+0x21c>)
 8002ae4:	f004 fd10 	bl	8007508 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2100      	movs	r1, #0
 8002aec:	2028      	movs	r0, #40	@ 0x28
 8002aee:	f004 f9a4 	bl	8006e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002af2:	2028      	movs	r0, #40	@ 0x28
 8002af4:	f004 f9bb 	bl	8006e6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002af8:	bf00      	nop
 8002afa:	3728      	adds	r7, #40	@ 0x28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40021000 	.word	0x40021000
 8002b04:	48000800 	.word	0x48000800
 8002b08:	48000400 	.word	0x48000400
 8002b0c:	48000c00 	.word	0x48000c00

08002b10 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b10:	b5b0      	push	{r4, r5, r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002b8c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d108      	bne.n	8002b32 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += 1;
 8002b20:	4b1b      	ldr	r3, [pc, #108]	@ (8002b90 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	1c54      	adds	r4, r2, #1
 8002b28:	f143 0500 	adc.w	r5, r3, #0
 8002b2c:	4b18      	ldr	r3, [pc, #96]	@ (8002b90 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002b2e:	e9c3 4500 	strd	r4, r5, [r3]
	}
//	 Check which version of the timer triggered this callback and toggle LED
	if(htim == &htim6)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a17      	ldr	r2, [pc, #92]	@ (8002b94 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d103      	bne.n	8002b42 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
	    //check2 +=1;
		Heartbeat();
 8002b3a:	f001 fa5d 	bl	8003ff8 <Heartbeat>
		Routine();
 8002b3e:	f001 fa69 	bl	8004014 <Routine>
	}
	//timer IT update Kalman filter
	if(htim == &htim15)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a14      	ldr	r2, [pc, #80]	@ (8002b98 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d11c      	bne.n	8002b84 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		// Read sensor data or get measurements
		float32_t y_data[1] = {QEIdata.linearPos};
 8002b4a:	4b14      	ldr	r3, [pc, #80]	@ (8002b9c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4e:	60fb      	str	r3, [r7, #12]

		// Prediction step
		KalmanFilter_Predict(&kf, u_data, w_data);
 8002b50:	4a13      	ldr	r2, [pc, #76]	@ (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002b52:	4914      	ldr	r1, [pc, #80]	@ (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002b54:	4814      	ldr	r0, [pc, #80]	@ (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b56:	f7fe fe7e 	bl	8001856 <KalmanFilter_Predict>

		// Update step
		KalmanFilter_Update(&kf, y_data);
 8002b5a:	f107 030c 	add.w	r3, r7, #12
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4811      	ldr	r0, [pc, #68]	@ (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b62:	f7fe ff0b 	bl	800197c <KalmanFilter_Update>

		// Use the updated state estimate (kf.x) as needed
		estimated_state[0] = kf.x.pData[0]; // Position
 8002b66:	4b10      	ldr	r3, [pc, #64]	@ (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8002bac <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002b6e:	6013      	str	r3, [r2, #0]
		estimated_state[1] = kf.x.pData[1]; // Velocity
 8002b70:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4a0d      	ldr	r2, [pc, #52]	@ (8002bac <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002b78:	6053      	str	r3, [r2, #4]
		estimated_state[2] = kf.x.pData[2]; // Acceleration
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	4a0a      	ldr	r2, [pc, #40]	@ (8002bac <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002b82:	6093      	str	r3, [r2, #8]

	}
}
 8002b84:	bf00      	nop
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b8c:	20000640 	.word	0x20000640
 8002b90:	20000b40 	.word	0x20000b40
 8002b94:	2000070c 	.word	0x2000070c
 8002b98:	200007d8 	.word	0x200007d8
 8002b9c:	20000b00 	.word	0x20000b00
 8002ba0:	20000280 	.word	0x20000280
 8002ba4:	2000148c 	.word	0x2000148c
 8002ba8:	20001404 	.word	0x20001404
 8002bac:	200013f8 	.word	0x200013f8

08002bb0 <micros>:

uint64_t micros()
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+((_micros - 1) * 2,147,483,647);
 8002bb4:	4b07      	ldr	r3, [pc, #28]	@ (8002bd4 <micros+0x24>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	f203 2387 	addw	r3, r3, #647	@ 0x287
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
}
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	20000640 	.word	0x20000640

08002bd8 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 8002bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = micros();
 8002be0:	f7ff ffe6 	bl	8002bb0 <micros>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4981      	ldr	r1, [pc, #516]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002bea:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim2);
 8002bee:	4b81      	ldr	r3, [pc, #516]	@ (8002df4 <QEIEncoderPosVel_Update+0x21c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	4a7e      	ldr	r2, [pc, #504]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002bf6:	6013      	str	r3, [r2, #0]
	//Postion 1 turn calculation
	QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 8002bf8:	4b7d      	ldr	r3, [pc, #500]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c08:	4b79      	ldr	r3, [pc, #484]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002c0a:	edc3 7a06 	vstr	s15, [r3, #24]
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8002c0e:	4b78      	ldr	r3, [pc, #480]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4b77      	ldr	r3, [pc, #476]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	607b      	str	r3, [r7, #4]
	//Handle Warp around
	if(diffPosition > UINT32_MAX/2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	da02      	bge.n	8002c26 <QEIEncoderPosVel_Update+0x4e>
		diffPosition -=UINT32_MAX;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3301      	adds	r3, #1
 8002c24:	607b      	str	r3, [r7, #4]
	if(diffPosition < -UINT32_MAX/2)
		diffPosition +=UINT32_MAX;
	//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001; //sec
 8002c26:	4b72      	ldr	r3, [pc, #456]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002c28:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002c2c:	4b70      	ldr	r3, [pc, #448]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002c2e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c32:	ebb0 0a02 	subs.w	sl, r0, r2
 8002c36:	eb61 0b03 	sbc.w	fp, r1, r3
 8002c3a:	4650      	mov	r0, sl
 8002c3c:	4659      	mov	r1, fp
 8002c3e:	f7fd fc71 	bl	8000524 <__aeabi_ul2d>
 8002c42:	a367      	add	r3, pc, #412	@ (adr r3, 8002de0 <QEIEncoderPosVel_Update+0x208>)
 8002c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c48:	f7fd fca2 	bl	8000590 <__aeabi_dmul>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	f7fd ff6c 	bl	8000b30 <__aeabi_d2f>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	603b      	str	r3, [r7, #0]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;  //pulse/sec
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	ee07 3a90 	vmov	s15, r3
 8002c62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c66:	ed97 7a00 	vldr	s14, [r7]
 8002c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c6e:	4b60      	ldr	r3, [pc, #384]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002c70:	edc3 7a07 	vstr	s15, [r3, #28]

	QEIdata.rad_s = (QEIdata.QEIAngularVelocity*2*3.14)/8192;
 8002c74:	4b5e      	ldr	r3, [pc, #376]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002c76:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c7e:	ee17 0a90 	vmov	r0, s15
 8002c82:	f7fd fc2d 	bl	80004e0 <__aeabi_f2d>
 8002c86:	a358      	add	r3, pc, #352	@ (adr r3, 8002de8 <QEIEncoderPosVel_Update+0x210>)
 8002c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8c:	f7fd fc80 	bl	8000590 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4610      	mov	r0, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	4b56      	ldr	r3, [pc, #344]	@ (8002df8 <QEIEncoderPosVel_Update+0x220>)
 8002c9e:	f7fd fda1 	bl	80007e4 <__aeabi_ddiv>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f7fd ff41 	bl	8000b30 <__aeabi_d2f>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4a4f      	ldr	r2, [pc, #316]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002cb2:	6213      	str	r3, [r2, #32]
	QEIdata.rpm = (QEIdata.QEIAngularVelocity*60)/8192;
 8002cb4:	4b4e      	ldr	r3, [pc, #312]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002cb6:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cba:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002dfc <QEIEncoderPosVel_Update+0x224>
 8002cbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cc2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002e00 <QEIEncoderPosVel_Update+0x228>
 8002cc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cca:	4b49      	ldr	r3, [pc, #292]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002ccc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	QEIdata.linearVel = (QEIdata.QEIAngularVelocity*10)/8192; //velocity (mm/s)
 8002cd0:	4b47      	ldr	r3, [pc, #284]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002cd2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cd6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002cda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cde:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002e00 <QEIEncoderPosVel_Update+0x228>
 8002ce2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ce6:	4b42      	ldr	r3, [pc, #264]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002ce8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	QEIdata.Velocity[NEW] = QEIdata.linearVel;
 8002cec:	4b40      	ldr	r3, [pc, #256]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf0:	4a3f      	ldr	r2, [pc, #252]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002cf2:	6313      	str	r3, [r2, #48]	@ 0x30
	QEIdata.linearAcc = (QEIdata.Velocity[NEW]-QEIdata.Velocity[OLD])/diffTime; //(mm/s^2)
 8002cf4:	4b3e      	ldr	r3, [pc, #248]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002cf6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8002cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002cfc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002d00:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002d04:	ed97 7a00 	vldr	s14, [r7]
 8002d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d0c:	4b38      	ldr	r3, [pc, #224]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002d0e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	if(QEIdata.Position[NEW] < 2147483648){
 8002d12:	4b37      	ldr	r3, [pc, #220]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	db11      	blt.n	8002d3e <QEIEncoderPosVel_Update+0x166>
		QEIdata.linearPos = ((float)QEIdata.Position[NEW]*10)/8192; //position (mm)
 8002d1a:	4b35      	ldr	r3, [pc, #212]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d26:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002d2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d2e:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8002e00 <QEIEncoderPosVel_Update+0x228>
 8002d32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d36:	4b2e      	ldr	r3, [pc, #184]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002d38:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 8002d3c:	e01c      	b.n	8002d78 <QEIEncoderPosVel_Update+0x1a0>
	}
	else{
		QEIdata.linearPos = -((float)(4294967295 - QEIdata.Position[NEW])*10)/8192;
 8002d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2200      	movs	r2, #0
 8002d44:	461c      	mov	r4, r3
 8002d46:	4615      	mov	r5, r2
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f1d4 38ff 	rsbs	r8, r4, #4294967295
 8002d4e:	eb63 0905 	sbc.w	r9, r3, r5
 8002d52:	4640      	mov	r0, r8
 8002d54:	4649      	mov	r1, r9
 8002d56:	f7fe f80b 	bl	8000d70 <__aeabi_l2f>
 8002d5a:	ee07 0a10 	vmov	s14, r0
 8002d5e:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8002d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d66:	eeb1 7a67 	vneg.f32	s14, s15
 8002d6a:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8002e00 <QEIEncoderPosVel_Update+0x228>
 8002d6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d72:	4b1f      	ldr	r3, [pc, #124]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002d74:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	}

	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8002d78:	4b1d      	ldr	r3, [pc, #116]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002d7e:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8002d80:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002d82:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d86:	491a      	ldr	r1, [pc, #104]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002d88:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata.Velocity[OLD] = QEIdata.Velocity[NEW];
 8002d8c:	4b18      	ldr	r3, [pc, #96]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d90:	4a17      	ldr	r2, [pc, #92]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002d92:	6353      	str	r3, [r2, #52]	@ 0x34

	if (max_velo < QEIdata.linearVel)
 8002d94:	4b16      	ldr	r3, [pc, #88]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002d96:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e04 <QEIEncoderPosVel_Update+0x22c>)
 8002d9c:	edd3 7a00 	vldr	s15, [r3]
 8002da0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da8:	dd03      	ble.n	8002db2 <QEIEncoderPosVel_Update+0x1da>
	{
		max_velo = QEIdata.linearVel;
 8002daa:	4b11      	ldr	r3, [pc, #68]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dae:	4a15      	ldr	r2, [pc, #84]	@ (8002e04 <QEIEncoderPosVel_Update+0x22c>)
 8002db0:	6013      	str	r3, [r2, #0]
	}

	if (max_acc < QEIdata.linearAcc)
 8002db2:	4b0f      	ldr	r3, [pc, #60]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002db4:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002db8:	4b13      	ldr	r3, [pc, #76]	@ (8002e08 <QEIEncoderPosVel_Update+0x230>)
 8002dba:	edd3 7a00 	vldr	s15, [r3]
 8002dbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc6:	dc00      	bgt.n	8002dca <QEIEncoderPosVel_Update+0x1f2>
	{
		max_acc = QEIdata.linearAcc;
	}
}
 8002dc8:	e003      	b.n	8002dd2 <QEIEncoderPosVel_Update+0x1fa>
		max_acc = QEIdata.linearAcc;
 8002dca:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <QEIEncoderPosVel_Update+0x218>)
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dce:	4a0e      	ldr	r2, [pc, #56]	@ (8002e08 <QEIEncoderPosVel_Update+0x230>)
 8002dd0:	6013      	str	r3, [r2, #0]
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ddc:	f3af 8000 	nop.w
 8002de0:	a0b5ed8d 	.word	0xa0b5ed8d
 8002de4:	3eb0c6f7 	.word	0x3eb0c6f7
 8002de8:	51eb851f 	.word	0x51eb851f
 8002dec:	40091eb8 	.word	0x40091eb8
 8002df0:	20000b00 	.word	0x20000b00
 8002df4:	200003dc 	.word	0x200003dc
 8002df8:	40c00000 	.word	0x40c00000
 8002dfc:	42700000 	.word	0x42700000
 8002e00:	46000000 	.word	0x46000000
 8002e04:	20000c2c 	.word	0x20000c2c
 8002e08:	20000c30 	.word	0x20000c30

08002e0c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e0c:	b4b0      	push	{r4, r5, r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	80fb      	strh	r3, [r7, #6]
//			mode = 4; //Emergency mode
//			Vin = 0;
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
//		}
//	}
	start_IT += 1;
 8002e16:	4b07      	ldr	r3, [pc, #28]	@ (8002e34 <HAL_GPIO_EXTI_Callback+0x28>)
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	1c54      	adds	r4, r2, #1
 8002e1e:	f143 0500 	adc.w	r5, r3, #0
 8002e22:	4b04      	ldr	r3, [pc, #16]	@ (8002e34 <HAL_GPIO_EXTI_Callback+0x28>)
 8002e24:	e9c3 4500 	strd	r4, r5, [r3]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bcb0      	pop	{r4, r5, r7}
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000b60 	.word	0x20000b60

08002e38 <checkStartMoving>:

//-----------------------------------Trajectory------------------------------------------//
void checkStartMoving(){
 8002e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
	if(q_f != q_f_old){
 8002e40:	4b9d      	ldr	r3, [pc, #628]	@ (80030b8 <checkStartMoving+0x280>)
 8002e42:	ed93 7a00 	vldr	s14, [r3]
 8002e46:	4b9d      	ldr	r3, [pc, #628]	@ (80030bc <checkStartMoving+0x284>)
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e54:	f000 8201 	beq.w	800325a <checkStartMoving+0x422>
		q_i = q_f_old;   //Define q_i
 8002e58:	4b98      	ldr	r3, [pc, #608]	@ (80030bc <checkStartMoving+0x284>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a98      	ldr	r2, [pc, #608]	@ (80030c0 <checkStartMoving+0x288>)
 8002e5e:	6013      	str	r3, [r2, #0]
		delta_q = q_f - q_i;
 8002e60:	4b95      	ldr	r3, [pc, #596]	@ (80030b8 <checkStartMoving+0x280>)
 8002e62:	ed93 7a00 	vldr	s14, [r3]
 8002e66:	4b96      	ldr	r3, [pc, #600]	@ (80030c0 <checkStartMoving+0x288>)
 8002e68:	edd3 7a00 	vldr	s15, [r3]
 8002e6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e70:	4b94      	ldr	r3, [pc, #592]	@ (80030c4 <checkStartMoving+0x28c>)
 8002e72:	edc3 7a00 	vstr	s15, [r3]
		if(delta_q < 0){
 8002e76:	4b93      	ldr	r3, [pc, #588]	@ (80030c4 <checkStartMoving+0x28c>)
 8002e78:	edd3 7a00 	vldr	s15, [r3]
 8002e7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e84:	d504      	bpl.n	8002e90 <checkStartMoving+0x58>
			dir = -1;
 8002e86:	4b90      	ldr	r3, [pc, #576]	@ (80030c8 <checkStartMoving+0x290>)
 8002e88:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	e002      	b.n	8002e96 <checkStartMoving+0x5e>
		}
		else{
			dir = 1;
 8002e90:	4b8d      	ldr	r3, [pc, #564]	@ (80030c8 <checkStartMoving+0x290>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
		}

		float q_check = fabs(q_d_i + q_2d_max*sqrt(fabs(delta_q)/q_2d_max)*dir);
 8002e96:	4b8d      	ldr	r3, [pc, #564]	@ (80030cc <checkStartMoving+0x294>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fb20 	bl	80004e0 <__aeabi_f2d>
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	460d      	mov	r5, r1
 8002ea4:	4b8a      	ldr	r3, [pc, #552]	@ (80030d0 <checkStartMoving+0x298>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd fb19 	bl	80004e0 <__aeabi_f2d>
 8002eae:	4680      	mov	r8, r0
 8002eb0:	4689      	mov	r9, r1
 8002eb2:	4b84      	ldr	r3, [pc, #528]	@ (80030c4 <checkStartMoving+0x28c>)
 8002eb4:	edd3 7a00 	vldr	s15, [r3]
 8002eb8:	eef0 7ae7 	vabs.f32	s15, s15
 8002ebc:	ee17 0a90 	vmov	r0, s15
 8002ec0:	f7fd fb0e 	bl	80004e0 <__aeabi_f2d>
 8002ec4:	4682      	mov	sl, r0
 8002ec6:	468b      	mov	fp, r1
 8002ec8:	4b81      	ldr	r3, [pc, #516]	@ (80030d0 <checkStartMoving+0x298>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fd fb07 	bl	80004e0 <__aeabi_f2d>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4650      	mov	r0, sl
 8002ed8:	4659      	mov	r1, fp
 8002eda:	f7fd fc83 	bl	80007e4 <__aeabi_ddiv>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	ec43 2b17 	vmov	d7, r2, r3
 8002ee6:	eeb0 0a47 	vmov.f32	s0, s14
 8002eea:	eef0 0a67 	vmov.f32	s1, s15
 8002eee:	f00a f98d 	bl	800d20c <sqrt>
 8002ef2:	ec53 2b10 	vmov	r2, r3, d0
 8002ef6:	4640      	mov	r0, r8
 8002ef8:	4649      	mov	r1, r9
 8002efa:	f7fd fb49 	bl	8000590 <__aeabi_dmul>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4690      	mov	r8, r2
 8002f04:	4699      	mov	r9, r3
 8002f06:	4b70      	ldr	r3, [pc, #448]	@ (80030c8 <checkStartMoving+0x290>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd fad6 	bl	80004bc <__aeabi_i2d>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4640      	mov	r0, r8
 8002f16:	4649      	mov	r1, r9
 8002f18:	f7fd fb3a 	bl	8000590 <__aeabi_dmul>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4620      	mov	r0, r4
 8002f22:	4629      	mov	r1, r5
 8002f24:	f7fd f97e 	bl	8000224 <__adddf3>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	f7fd fdfe 	bl	8000b30 <__aeabi_d2f>
 8002f34:	ee07 0a90 	vmov	s15, r0
 8002f38:	eef0 7ae7 	vabs.f32	s15, s15
 8002f3c:	edc7 7a01 	vstr	s15, [r7, #4]

		if(q_check >= q_d_max){ //Accelerate to maximum speed
 8002f40:	4b64      	ldr	r3, [pc, #400]	@ (80030d4 <checkStartMoving+0x29c>)
 8002f42:	edd3 7a00 	vldr	s15, [r3]
 8002f46:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f52:	f2c0 80cf 	blt.w	80030f4 <checkStartMoving+0x2bc>
			calmode = 1;
 8002f56:	4b60      	ldr	r3, [pc, #384]	@ (80030d8 <checkStartMoving+0x2a0>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	701a      	strb	r2, [r3, #0]
			t_acc = fabs((q_d_max-q_d_i)/q_2d_max);
 8002f5c:	4b5d      	ldr	r3, [pc, #372]	@ (80030d4 <checkStartMoving+0x29c>)
 8002f5e:	ed93 7a00 	vldr	s14, [r3]
 8002f62:	4b5a      	ldr	r3, [pc, #360]	@ (80030cc <checkStartMoving+0x294>)
 8002f64:	edd3 7a00 	vldr	s15, [r3]
 8002f68:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002f6c:	4b58      	ldr	r3, [pc, #352]	@ (80030d0 <checkStartMoving+0x298>)
 8002f6e:	ed93 7a00 	vldr	s14, [r3]
 8002f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f76:	eef0 7ae7 	vabs.f32	s15, s15
 8002f7a:	4b58      	ldr	r3, [pc, #352]	@ (80030dc <checkStartMoving+0x2a4>)
 8002f7c:	edc3 7a00 	vstr	s15, [r3]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 8002f80:	4b52      	ldr	r3, [pc, #328]	@ (80030cc <checkStartMoving+0x294>)
 8002f82:	ed93 7a00 	vldr	s14, [r3]
 8002f86:	4b55      	ldr	r3, [pc, #340]	@ (80030dc <checkStartMoving+0x2a4>)
 8002f88:	edd3 7a00 	vldr	s15, [r3]
 8002f8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f90:	4b4d      	ldr	r3, [pc, #308]	@ (80030c8 <checkStartMoving+0x290>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	ee07 3a90 	vmov	s15, r3
 8002f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa0:	ee17 0a90 	vmov	r0, s15
 8002fa4:	f7fd fa9c 	bl	80004e0 <__aeabi_f2d>
 8002fa8:	4604      	mov	r4, r0
 8002faa:	460d      	mov	r5, r1
 8002fac:	4b48      	ldr	r3, [pc, #288]	@ (80030d0 <checkStartMoving+0x298>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fd fa95 	bl	80004e0 <__aeabi_f2d>
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	4b49      	ldr	r3, [pc, #292]	@ (80030e0 <checkStartMoving+0x2a8>)
 8002fbc:	f7fd fae8 	bl	8000590 <__aeabi_dmul>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4690      	mov	r8, r2
 8002fc6:	4699      	mov	r9, r3
 8002fc8:	4b44      	ldr	r3, [pc, #272]	@ (80030dc <checkStartMoving+0x2a4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fd fa87 	bl	80004e0 <__aeabi_f2d>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4640      	mov	r0, r8
 8002fd8:	4649      	mov	r1, r9
 8002fda:	f7fd fad9 	bl	8000590 <__aeabi_dmul>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4690      	mov	r8, r2
 8002fe4:	4699      	mov	r9, r3
 8002fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80030dc <checkStartMoving+0x2a4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fa78 	bl	80004e0 <__aeabi_f2d>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4640      	mov	r0, r8
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	f7fd faca 	bl	8000590 <__aeabi_dmul>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4690      	mov	r8, r2
 8003002:	4699      	mov	r9, r3
 8003004:	4b30      	ldr	r3, [pc, #192]	@ (80030c8 <checkStartMoving+0x290>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd fa57 	bl	80004bc <__aeabi_i2d>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4640      	mov	r0, r8
 8003014:	4649      	mov	r1, r9
 8003016:	f7fd fabb 	bl	8000590 <__aeabi_dmul>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4620      	mov	r0, r4
 8003020:	4629      	mov	r1, r5
 8003022:	f7fd f8ff 	bl	8000224 <__adddf3>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	f7fd fd7f 	bl	8000b30 <__aeabi_d2f>
 8003032:	4603      	mov	r3, r0
 8003034:	4a2b      	ldr	r2, [pc, #172]	@ (80030e4 <checkStartMoving+0x2ac>)
 8003036:	6013      	str	r3, [r2, #0]
			t_const = fabs((q_f-q_i-2*q_acc)/q_d_max);
 8003038:	4b1f      	ldr	r3, [pc, #124]	@ (80030b8 <checkStartMoving+0x280>)
 800303a:	ed93 7a00 	vldr	s14, [r3]
 800303e:	4b20      	ldr	r3, [pc, #128]	@ (80030c0 <checkStartMoving+0x288>)
 8003040:	edd3 7a00 	vldr	s15, [r3]
 8003044:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003048:	4b26      	ldr	r3, [pc, #152]	@ (80030e4 <checkStartMoving+0x2ac>)
 800304a:	edd3 7a00 	vldr	s15, [r3]
 800304e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003052:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003056:	4b1f      	ldr	r3, [pc, #124]	@ (80030d4 <checkStartMoving+0x29c>)
 8003058:	ed93 7a00 	vldr	s14, [r3]
 800305c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003060:	eef0 7ae7 	vabs.f32	s15, s15
 8003064:	4b20      	ldr	r3, [pc, #128]	@ (80030e8 <checkStartMoving+0x2b0>)
 8003066:	edc3 7a00 	vstr	s15, [r3]
			q_const = q_acc + q_d_max*t_const*dir;
 800306a:	4b1a      	ldr	r3, [pc, #104]	@ (80030d4 <checkStartMoving+0x29c>)
 800306c:	ed93 7a00 	vldr	s14, [r3]
 8003070:	4b1d      	ldr	r3, [pc, #116]	@ (80030e8 <checkStartMoving+0x2b0>)
 8003072:	edd3 7a00 	vldr	s15, [r3]
 8003076:	ee27 7a27 	vmul.f32	s14, s14, s15
 800307a:	4b13      	ldr	r3, [pc, #76]	@ (80030c8 <checkStartMoving+0x290>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800308a:	4b16      	ldr	r3, [pc, #88]	@ (80030e4 <checkStartMoving+0x2ac>)
 800308c:	edd3 7a00 	vldr	s15, [r3]
 8003090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003094:	4b15      	ldr	r3, [pc, #84]	@ (80030ec <checkStartMoving+0x2b4>)
 8003096:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc + t_const;
 800309a:	4b10      	ldr	r3, [pc, #64]	@ (80030dc <checkStartMoving+0x2a4>)
 800309c:	edd3 7a00 	vldr	s15, [r3]
 80030a0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80030a4:	4b10      	ldr	r3, [pc, #64]	@ (80030e8 <checkStartMoving+0x2b0>)
 80030a6:	edd3 7a00 	vldr	s15, [r3]
 80030aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ae:	4b10      	ldr	r3, [pc, #64]	@ (80030f0 <checkStartMoving+0x2b8>)
 80030b0:	edc3 7a00 	vstr	s15, [r3]
 80030b4:	e0c6      	b.n	8003244 <checkStartMoving+0x40c>
 80030b6:	bf00      	nop
 80030b8:	20000b74 	.word	0x20000b74
 80030bc:	20000b8c 	.word	0x20000b8c
 80030c0:	20000b78 	.word	0x20000b78
 80030c4:	20000b7c 	.word	0x20000b7c
 80030c8:	20000214 	.word	0x20000214
 80030cc:	20000b70 	.word	0x20000b70
 80030d0:	2000020c 	.word	0x2000020c
 80030d4:	20000208 	.word	0x20000208
 80030d8:	20000210 	.word	0x20000210
 80030dc:	20000b90 	.word	0x20000b90
 80030e0:	3fe00000 	.word	0x3fe00000
 80030e4:	20000b94 	.word	0x20000b94
 80030e8:	20000b98 	.word	0x20000b98
 80030ec:	20000b9c 	.word	0x20000b9c
 80030f0:	20000bb4 	.word	0x20000bb4
		}
		else{ //Accelerating does not reach maximum speed
			calmode = 2;
 80030f4:	4b5b      	ldr	r3, [pc, #364]	@ (8003264 <checkStartMoving+0x42c>)
 80030f6:	2202      	movs	r2, #2
 80030f8:	701a      	strb	r2, [r3, #0]
			t_acc = sqrt(fabs(delta_q)/q_2d_max);
 80030fa:	4b5b      	ldr	r3, [pc, #364]	@ (8003268 <checkStartMoving+0x430>)
 80030fc:	edd3 7a00 	vldr	s15, [r3]
 8003100:	eef0 7ae7 	vabs.f32	s15, s15
 8003104:	ee17 0a90 	vmov	r0, s15
 8003108:	f7fd f9ea 	bl	80004e0 <__aeabi_f2d>
 800310c:	4604      	mov	r4, r0
 800310e:	460d      	mov	r5, r1
 8003110:	4b56      	ldr	r3, [pc, #344]	@ (800326c <checkStartMoving+0x434>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f7fd f9e3 	bl	80004e0 <__aeabi_f2d>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4620      	mov	r0, r4
 8003120:	4629      	mov	r1, r5
 8003122:	f7fd fb5f 	bl	80007e4 <__aeabi_ddiv>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	ec43 2b17 	vmov	d7, r2, r3
 800312e:	eeb0 0a47 	vmov.f32	s0, s14
 8003132:	eef0 0a67 	vmov.f32	s1, s15
 8003136:	f00a f869 	bl	800d20c <sqrt>
 800313a:	ec53 2b10 	vmov	r2, r3, d0
 800313e:	4610      	mov	r0, r2
 8003140:	4619      	mov	r1, r3
 8003142:	f7fd fcf5 	bl	8000b30 <__aeabi_d2f>
 8003146:	4603      	mov	r3, r0
 8003148:	4a49      	ldr	r2, [pc, #292]	@ (8003270 <checkStartMoving+0x438>)
 800314a:	6013      	str	r3, [r2, #0]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 800314c:	4b49      	ldr	r3, [pc, #292]	@ (8003274 <checkStartMoving+0x43c>)
 800314e:	ed93 7a00 	vldr	s14, [r3]
 8003152:	4b47      	ldr	r3, [pc, #284]	@ (8003270 <checkStartMoving+0x438>)
 8003154:	edd3 7a00 	vldr	s15, [r3]
 8003158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800315c:	4b46      	ldr	r3, [pc, #280]	@ (8003278 <checkStartMoving+0x440>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	ee07 3a90 	vmov	s15, r3
 8003164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316c:	ee17 0a90 	vmov	r0, s15
 8003170:	f7fd f9b6 	bl	80004e0 <__aeabi_f2d>
 8003174:	4604      	mov	r4, r0
 8003176:	460d      	mov	r5, r1
 8003178:	4b3c      	ldr	r3, [pc, #240]	@ (800326c <checkStartMoving+0x434>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd f9af 	bl	80004e0 <__aeabi_f2d>
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	4b3d      	ldr	r3, [pc, #244]	@ (800327c <checkStartMoving+0x444>)
 8003188:	f7fd fa02 	bl	8000590 <__aeabi_dmul>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4690      	mov	r8, r2
 8003192:	4699      	mov	r9, r3
 8003194:	4b36      	ldr	r3, [pc, #216]	@ (8003270 <checkStartMoving+0x438>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7fd f9a1 	bl	80004e0 <__aeabi_f2d>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4640      	mov	r0, r8
 80031a4:	4649      	mov	r1, r9
 80031a6:	f7fd f9f3 	bl	8000590 <__aeabi_dmul>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4690      	mov	r8, r2
 80031b0:	4699      	mov	r9, r3
 80031b2:	4b2f      	ldr	r3, [pc, #188]	@ (8003270 <checkStartMoving+0x438>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd f992 	bl	80004e0 <__aeabi_f2d>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4640      	mov	r0, r8
 80031c2:	4649      	mov	r1, r9
 80031c4:	f7fd f9e4 	bl	8000590 <__aeabi_dmul>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4690      	mov	r8, r2
 80031ce:	4699      	mov	r9, r3
 80031d0:	4b29      	ldr	r3, [pc, #164]	@ (8003278 <checkStartMoving+0x440>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd f971 	bl	80004bc <__aeabi_i2d>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4640      	mov	r0, r8
 80031e0:	4649      	mov	r1, r9
 80031e2:	f7fd f9d5 	bl	8000590 <__aeabi_dmul>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4620      	mov	r0, r4
 80031ec:	4629      	mov	r1, r5
 80031ee:	f7fd f819 	bl	8000224 <__adddf3>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4610      	mov	r0, r2
 80031f8:	4619      	mov	r1, r3
 80031fa:	f7fd fc99 	bl	8000b30 <__aeabi_d2f>
 80031fe:	4603      	mov	r3, r0
 8003200:	4a1f      	ldr	r2, [pc, #124]	@ (8003280 <checkStartMoving+0x448>)
 8003202:	6013      	str	r3, [r2, #0]
			q_d_acc = q_d_i + q_2d_max*t_acc*dir;
 8003204:	4b19      	ldr	r3, [pc, #100]	@ (800326c <checkStartMoving+0x434>)
 8003206:	ed93 7a00 	vldr	s14, [r3]
 800320a:	4b19      	ldr	r3, [pc, #100]	@ (8003270 <checkStartMoving+0x438>)
 800320c:	edd3 7a00 	vldr	s15, [r3]
 8003210:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003214:	4b18      	ldr	r3, [pc, #96]	@ (8003278 <checkStartMoving+0x440>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	ee07 3a90 	vmov	s15, r3
 800321c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003220:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003224:	4b13      	ldr	r3, [pc, #76]	@ (8003274 <checkStartMoving+0x43c>)
 8003226:	edd3 7a00 	vldr	s15, [r3]
 800322a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322e:	4b15      	ldr	r3, [pc, #84]	@ (8003284 <checkStartMoving+0x44c>)
 8003230:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc;
 8003234:	4b0e      	ldr	r3, [pc, #56]	@ (8003270 <checkStartMoving+0x438>)
 8003236:	edd3 7a00 	vldr	s15, [r3]
 800323a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800323e:	4b12      	ldr	r3, [pc, #72]	@ (8003288 <checkStartMoving+0x450>)
 8003240:	edc3 7a00 	vstr	s15, [r3]
		}
		T_start = micros();
 8003244:	f7ff fcb4 	bl	8002bb0 <micros>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	490f      	ldr	r1, [pc, #60]	@ (800328c <checkStartMoving+0x454>)
 800324e:	e9c1 2300 	strd	r2, r3, [r1]
		q_f_old = q_f;
 8003252:	4b0f      	ldr	r3, [pc, #60]	@ (8003290 <checkStartMoving+0x458>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a0f      	ldr	r2, [pc, #60]	@ (8003294 <checkStartMoving+0x45c>)
 8003258:	6013      	str	r3, [r2, #0]
	}
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003264:	20000210 	.word	0x20000210
 8003268:	20000b7c 	.word	0x20000b7c
 800326c:	2000020c 	.word	0x2000020c
 8003270:	20000b90 	.word	0x20000b90
 8003274:	20000b70 	.word	0x20000b70
 8003278:	20000214 	.word	0x20000214
 800327c:	3fe00000 	.word	0x3fe00000
 8003280:	20000b94 	.word	0x20000b94
 8003284:	20000ba0 	.word	0x20000ba0
 8003288:	20000bb4 	.word	0x20000bb4
 800328c:	20000ba8 	.word	0x20000ba8
 8003290:	20000b74 	.word	0x20000b74
 8003294:	20000b8c 	.word	0x20000b8c

08003298 <createTrajectory>:

void createTrajectory(){
 8003298:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800329c:	af00      	add	r7, sp, #0
	if(calmode == 1){
 800329e:	4b84      	ldr	r3, [pc, #528]	@ (80034b0 <createTrajectory+0x218>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	f040 822c 	bne.w	8003700 <createTrajectory+0x468>
		t = (float)(micros()-T_start)/1000000; //sec
 80032a8:	f7ff fc82 	bl	8002bb0 <micros>
 80032ac:	4b81      	ldr	r3, [pc, #516]	@ (80034b4 <createTrajectory+0x21c>)
 80032ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b2:	ebb0 0802 	subs.w	r8, r0, r2
 80032b6:	eb61 0903 	sbc.w	r9, r1, r3
 80032ba:	4640      	mov	r0, r8
 80032bc:	4649      	mov	r1, r9
 80032be:	f7fd fd4f 	bl	8000d60 <__aeabi_ul2f>
 80032c2:	ee06 0a90 	vmov	s13, r0
 80032c6:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 80034b8 <createTrajectory+0x220>
 80032ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032ce:	4b7b      	ldr	r3, [pc, #492]	@ (80034bc <createTrajectory+0x224>)
 80032d0:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 80032d4:	4b79      	ldr	r3, [pc, #484]	@ (80034bc <createTrajectory+0x224>)
 80032d6:	edd3 7a00 	vldr	s15, [r3]
 80032da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e2:	f2c0 8094 	blt.w	800340e <createTrajectory+0x176>
 80032e6:	4b75      	ldr	r3, [pc, #468]	@ (80034bc <createTrajectory+0x224>)
 80032e8:	ed93 7a00 	vldr	s14, [r3]
 80032ec:	4b74      	ldr	r3, [pc, #464]	@ (80034c0 <createTrajectory+0x228>)
 80032ee:	edd3 7a00 	vldr	s15, [r3]
 80032f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fa:	f140 8088 	bpl.w	800340e <createTrajectory+0x176>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 80032fe:	4b71      	ldr	r3, [pc, #452]	@ (80034c4 <createTrajectory+0x22c>)
 8003300:	ed93 7a00 	vldr	s14, [r3]
 8003304:	4b6d      	ldr	r3, [pc, #436]	@ (80034bc <createTrajectory+0x224>)
 8003306:	edd3 7a00 	vldr	s15, [r3]
 800330a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800330e:	4b6e      	ldr	r3, [pc, #440]	@ (80034c8 <createTrajectory+0x230>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800331a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800331e:	4b6b      	ldr	r3, [pc, #428]	@ (80034cc <createTrajectory+0x234>)
 8003320:	edd3 7a00 	vldr	s15, [r3]
 8003324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003328:	ee17 0a90 	vmov	r0, s15
 800332c:	f7fd f8d8 	bl	80004e0 <__aeabi_f2d>
 8003330:	4604      	mov	r4, r0
 8003332:	460d      	mov	r5, r1
 8003334:	4b66      	ldr	r3, [pc, #408]	@ (80034d0 <createTrajectory+0x238>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd f8d1 	bl	80004e0 <__aeabi_f2d>
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	4b64      	ldr	r3, [pc, #400]	@ (80034d4 <createTrajectory+0x23c>)
 8003344:	f7fd f924 	bl	8000590 <__aeabi_dmul>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4690      	mov	r8, r2
 800334e:	4699      	mov	r9, r3
 8003350:	4b5a      	ldr	r3, [pc, #360]	@ (80034bc <createTrajectory+0x224>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7fd f8c3 	bl	80004e0 <__aeabi_f2d>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4640      	mov	r0, r8
 8003360:	4649      	mov	r1, r9
 8003362:	f7fd f915 	bl	8000590 <__aeabi_dmul>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4690      	mov	r8, r2
 800336c:	4699      	mov	r9, r3
 800336e:	4b53      	ldr	r3, [pc, #332]	@ (80034bc <createTrajectory+0x224>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd f8b4 	bl	80004e0 <__aeabi_f2d>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4640      	mov	r0, r8
 800337e:	4649      	mov	r1, r9
 8003380:	f7fd f906 	bl	8000590 <__aeabi_dmul>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4690      	mov	r8, r2
 800338a:	4699      	mov	r9, r3
 800338c:	4b4e      	ldr	r3, [pc, #312]	@ (80034c8 <createTrajectory+0x230>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7fd f893 	bl	80004bc <__aeabi_i2d>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4640      	mov	r0, r8
 800339c:	4649      	mov	r1, r9
 800339e:	f7fd f8f7 	bl	8000590 <__aeabi_dmul>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4620      	mov	r0, r4
 80033a8:	4629      	mov	r1, r5
 80033aa:	f7fc ff3b 	bl	8000224 <__adddf3>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	f7fd fbbb 	bl	8000b30 <__aeabi_d2f>
 80033ba:	4603      	mov	r3, r0
 80033bc:	4a46      	ldr	r2, [pc, #280]	@ (80034d8 <createTrajectory+0x240>)
 80033be:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 80033c0:	4b43      	ldr	r3, [pc, #268]	@ (80034d0 <createTrajectory+0x238>)
 80033c2:	ed93 7a00 	vldr	s14, [r3]
 80033c6:	4b3d      	ldr	r3, [pc, #244]	@ (80034bc <createTrajectory+0x224>)
 80033c8:	edd3 7a00 	vldr	s15, [r3]
 80033cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033d0:	4b3d      	ldr	r3, [pc, #244]	@ (80034c8 <createTrajectory+0x230>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	ee07 3a90 	vmov	s15, r3
 80033d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033e0:	4b38      	ldr	r3, [pc, #224]	@ (80034c4 <createTrajectory+0x22c>)
 80033e2:	edd3 7a00 	vldr	s15, [r3]
 80033e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ea:	4b3c      	ldr	r3, [pc, #240]	@ (80034dc <createTrajectory+0x244>)
 80033ec:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 80033f0:	4b35      	ldr	r3, [pc, #212]	@ (80034c8 <createTrajectory+0x230>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	ee07 3a90 	vmov	s15, r3
 80033f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033fc:	4b34      	ldr	r3, [pc, #208]	@ (80034d0 <createTrajectory+0x238>)
 80033fe:	edd3 7a00 	vldr	s15, [r3]
 8003402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003406:	4b36      	ldr	r3, [pc, #216]	@ (80034e0 <createTrajectory+0x248>)
 8003408:	edc3 7a00 	vstr	s15, [r3]
 800340c:	e2fd      	b.n	8003a0a <createTrajectory+0x772>
		}
		else if((t_acc <= t) && (t < t_acc+t_const)){ //Constant Velocity Segment
 800340e:	4b2c      	ldr	r3, [pc, #176]	@ (80034c0 <createTrajectory+0x228>)
 8003410:	ed93 7a00 	vldr	s14, [r3]
 8003414:	4b29      	ldr	r3, [pc, #164]	@ (80034bc <createTrajectory+0x224>)
 8003416:	edd3 7a00 	vldr	s15, [r3]
 800341a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003422:	d865      	bhi.n	80034f0 <createTrajectory+0x258>
 8003424:	4b26      	ldr	r3, [pc, #152]	@ (80034c0 <createTrajectory+0x228>)
 8003426:	ed93 7a00 	vldr	s14, [r3]
 800342a:	4b2e      	ldr	r3, [pc, #184]	@ (80034e4 <createTrajectory+0x24c>)
 800342c:	edd3 7a00 	vldr	s15, [r3]
 8003430:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003434:	4b21      	ldr	r3, [pc, #132]	@ (80034bc <createTrajectory+0x224>)
 8003436:	edd3 7a00 	vldr	s15, [r3]
 800343a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800343e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003442:	dd55      	ble.n	80034f0 <createTrajectory+0x258>
			ref_p = q_i + q_acc + q_d_max*(t-t_acc)*dir;
 8003444:	4b21      	ldr	r3, [pc, #132]	@ (80034cc <createTrajectory+0x234>)
 8003446:	ed93 7a00 	vldr	s14, [r3]
 800344a:	4b27      	ldr	r3, [pc, #156]	@ (80034e8 <createTrajectory+0x250>)
 800344c:	edd3 7a00 	vldr	s15, [r3]
 8003450:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003454:	4b19      	ldr	r3, [pc, #100]	@ (80034bc <createTrajectory+0x224>)
 8003456:	edd3 6a00 	vldr	s13, [r3]
 800345a:	4b19      	ldr	r3, [pc, #100]	@ (80034c0 <createTrajectory+0x228>)
 800345c:	edd3 7a00 	vldr	s15, [r3]
 8003460:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003464:	4b21      	ldr	r3, [pc, #132]	@ (80034ec <createTrajectory+0x254>)
 8003466:	edd3 7a00 	vldr	s15, [r3]
 800346a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800346e:	4b16      	ldr	r3, [pc, #88]	@ (80034c8 <createTrajectory+0x230>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800347a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800347e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003482:	4b15      	ldr	r3, [pc, #84]	@ (80034d8 <createTrajectory+0x240>)
 8003484:	edc3 7a00 	vstr	s15, [r3]
			ref_v = q_d_max*dir;
 8003488:	4b0f      	ldr	r3, [pc, #60]	@ (80034c8 <createTrajectory+0x230>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	ee07 3a90 	vmov	s15, r3
 8003490:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003494:	4b15      	ldr	r3, [pc, #84]	@ (80034ec <createTrajectory+0x254>)
 8003496:	edd3 7a00 	vldr	s15, [r3]
 800349a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349e:	4b0f      	ldr	r3, [pc, #60]	@ (80034dc <createTrajectory+0x244>)
 80034a0:	edc3 7a00 	vstr	s15, [r3]
			ref_a = 0;
 80034a4:	4b0e      	ldr	r3, [pc, #56]	@ (80034e0 <createTrajectory+0x248>)
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e2ad      	b.n	8003a0a <createTrajectory+0x772>
 80034ae:	bf00      	nop
 80034b0:	20000210 	.word	0x20000210
 80034b4:	20000ba8 	.word	0x20000ba8
 80034b8:	49742400 	.word	0x49742400
 80034bc:	20000bb0 	.word	0x20000bb0
 80034c0:	20000b90 	.word	0x20000b90
 80034c4:	20000b70 	.word	0x20000b70
 80034c8:	20000214 	.word	0x20000214
 80034cc:	20000b78 	.word	0x20000b78
 80034d0:	2000020c 	.word	0x2000020c
 80034d4:	3fe00000 	.word	0x3fe00000
 80034d8:	20000b80 	.word	0x20000b80
 80034dc:	20000b84 	.word	0x20000b84
 80034e0:	20000b88 	.word	0x20000b88
 80034e4:	20000b98 	.word	0x20000b98
 80034e8:	20000b94 	.word	0x20000b94
 80034ec:	20000208 	.word	0x20000208
		}
		else if((t_acc+t_const <= t) && (t < 2*t_acc+t_const)){ //Deceleration Segment
 80034f0:	4b76      	ldr	r3, [pc, #472]	@ (80036cc <createTrajectory+0x434>)
 80034f2:	ed93 7a00 	vldr	s14, [r3]
 80034f6:	4b76      	ldr	r3, [pc, #472]	@ (80036d0 <createTrajectory+0x438>)
 80034f8:	edd3 7a00 	vldr	s15, [r3]
 80034fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003500:	4b74      	ldr	r3, [pc, #464]	@ (80036d4 <createTrajectory+0x43c>)
 8003502:	edd3 7a00 	vldr	s15, [r3]
 8003506:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800350a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350e:	f200 80d8 	bhi.w	80036c2 <createTrajectory+0x42a>
 8003512:	4b6e      	ldr	r3, [pc, #440]	@ (80036cc <createTrajectory+0x434>)
 8003514:	edd3 7a00 	vldr	s15, [r3]
 8003518:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800351c:	4b6c      	ldr	r3, [pc, #432]	@ (80036d0 <createTrajectory+0x438>)
 800351e:	edd3 7a00 	vldr	s15, [r3]
 8003522:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003526:	4b6b      	ldr	r3, [pc, #428]	@ (80036d4 <createTrajectory+0x43c>)
 8003528:	edd3 7a00 	vldr	s15, [r3]
 800352c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003534:	f340 80c5 	ble.w	80036c2 <createTrajectory+0x42a>
			ref_p = q_i + q_const + q_d_max*(t-t_acc-t_const)*dir-0.5*q_2d_max*(t-t_acc-t_const)*(t-t_acc-t_const)*dir;
 8003538:	4b67      	ldr	r3, [pc, #412]	@ (80036d8 <createTrajectory+0x440>)
 800353a:	ed93 7a00 	vldr	s14, [r3]
 800353e:	4b67      	ldr	r3, [pc, #412]	@ (80036dc <createTrajectory+0x444>)
 8003540:	edd3 7a00 	vldr	s15, [r3]
 8003544:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003548:	4b62      	ldr	r3, [pc, #392]	@ (80036d4 <createTrajectory+0x43c>)
 800354a:	edd3 6a00 	vldr	s13, [r3]
 800354e:	4b5f      	ldr	r3, [pc, #380]	@ (80036cc <createTrajectory+0x434>)
 8003550:	edd3 7a00 	vldr	s15, [r3]
 8003554:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003558:	4b5d      	ldr	r3, [pc, #372]	@ (80036d0 <createTrajectory+0x438>)
 800355a:	edd3 7a00 	vldr	s15, [r3]
 800355e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003562:	4b5f      	ldr	r3, [pc, #380]	@ (80036e0 <createTrajectory+0x448>)
 8003564:	edd3 7a00 	vldr	s15, [r3]
 8003568:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800356c:	4b5d      	ldr	r3, [pc, #372]	@ (80036e4 <createTrajectory+0x44c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	ee07 3a90 	vmov	s15, r3
 8003574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003578:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800357c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003580:	ee17 0a90 	vmov	r0, s15
 8003584:	f7fc ffac 	bl	80004e0 <__aeabi_f2d>
 8003588:	4604      	mov	r4, r0
 800358a:	460d      	mov	r5, r1
 800358c:	4b56      	ldr	r3, [pc, #344]	@ (80036e8 <createTrajectory+0x450>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7fc ffa5 	bl	80004e0 <__aeabi_f2d>
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	4b54      	ldr	r3, [pc, #336]	@ (80036ec <createTrajectory+0x454>)
 800359c:	f7fc fff8 	bl	8000590 <__aeabi_dmul>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4690      	mov	r8, r2
 80035a6:	4699      	mov	r9, r3
 80035a8:	4b4a      	ldr	r3, [pc, #296]	@ (80036d4 <createTrajectory+0x43c>)
 80035aa:	ed93 7a00 	vldr	s14, [r3]
 80035ae:	4b47      	ldr	r3, [pc, #284]	@ (80036cc <createTrajectory+0x434>)
 80035b0:	edd3 7a00 	vldr	s15, [r3]
 80035b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035b8:	4b45      	ldr	r3, [pc, #276]	@ (80036d0 <createTrajectory+0x438>)
 80035ba:	edd3 7a00 	vldr	s15, [r3]
 80035be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035c2:	ee17 0a90 	vmov	r0, s15
 80035c6:	f7fc ff8b 	bl	80004e0 <__aeabi_f2d>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4640      	mov	r0, r8
 80035d0:	4649      	mov	r1, r9
 80035d2:	f7fc ffdd 	bl	8000590 <__aeabi_dmul>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4690      	mov	r8, r2
 80035dc:	4699      	mov	r9, r3
 80035de:	4b3d      	ldr	r3, [pc, #244]	@ (80036d4 <createTrajectory+0x43c>)
 80035e0:	ed93 7a00 	vldr	s14, [r3]
 80035e4:	4b39      	ldr	r3, [pc, #228]	@ (80036cc <createTrajectory+0x434>)
 80035e6:	edd3 7a00 	vldr	s15, [r3]
 80035ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035ee:	4b38      	ldr	r3, [pc, #224]	@ (80036d0 <createTrajectory+0x438>)
 80035f0:	edd3 7a00 	vldr	s15, [r3]
 80035f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035f8:	ee17 0a90 	vmov	r0, s15
 80035fc:	f7fc ff70 	bl	80004e0 <__aeabi_f2d>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4640      	mov	r0, r8
 8003606:	4649      	mov	r1, r9
 8003608:	f7fc ffc2 	bl	8000590 <__aeabi_dmul>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4690      	mov	r8, r2
 8003612:	4699      	mov	r9, r3
 8003614:	4b33      	ldr	r3, [pc, #204]	@ (80036e4 <createTrajectory+0x44c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7fc ff4f 	bl	80004bc <__aeabi_i2d>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	4640      	mov	r0, r8
 8003624:	4649      	mov	r1, r9
 8003626:	f7fc ffb3 	bl	8000590 <__aeabi_dmul>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4620      	mov	r0, r4
 8003630:	4629      	mov	r1, r5
 8003632:	f7fc fdf5 	bl	8000220 <__aeabi_dsub>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	f7fd fa77 	bl	8000b30 <__aeabi_d2f>
 8003642:	4603      	mov	r3, r0
 8003644:	4a2a      	ldr	r2, [pc, #168]	@ (80036f0 <createTrajectory+0x458>)
 8003646:	6013      	str	r3, [r2, #0]
			ref_v = -q_2d_max*(t-t_acc-t_const)*dir + q_d_max*dir;
 8003648:	4b27      	ldr	r3, [pc, #156]	@ (80036e8 <createTrajectory+0x450>)
 800364a:	edd3 7a00 	vldr	s15, [r3]
 800364e:	eeb1 7a67 	vneg.f32	s14, s15
 8003652:	4b20      	ldr	r3, [pc, #128]	@ (80036d4 <createTrajectory+0x43c>)
 8003654:	edd3 6a00 	vldr	s13, [r3]
 8003658:	4b1c      	ldr	r3, [pc, #112]	@ (80036cc <createTrajectory+0x434>)
 800365a:	edd3 7a00 	vldr	s15, [r3]
 800365e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003662:	4b1b      	ldr	r3, [pc, #108]	@ (80036d0 <createTrajectory+0x438>)
 8003664:	edd3 7a00 	vldr	s15, [r3]
 8003668:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800366c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003670:	4b1c      	ldr	r3, [pc, #112]	@ (80036e4 <createTrajectory+0x44c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	ee07 3a90 	vmov	s15, r3
 8003678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800367c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003680:	4b18      	ldr	r3, [pc, #96]	@ (80036e4 <createTrajectory+0x44c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	ee07 3a90 	vmov	s15, r3
 8003688:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800368c:	4b14      	ldr	r3, [pc, #80]	@ (80036e0 <createTrajectory+0x448>)
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800369a:	4b16      	ldr	r3, [pc, #88]	@ (80036f4 <createTrajectory+0x45c>)
 800369c:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 80036a0:	4b11      	ldr	r3, [pc, #68]	@ (80036e8 <createTrajectory+0x450>)
 80036a2:	edd3 7a00 	vldr	s15, [r3]
 80036a6:	eeb1 7a67 	vneg.f32	s14, s15
 80036aa:	4b0e      	ldr	r3, [pc, #56]	@ (80036e4 <createTrajectory+0x44c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	ee07 3a90 	vmov	s15, r3
 80036b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ba:	4b0f      	ldr	r3, [pc, #60]	@ (80036f8 <createTrajectory+0x460>)
 80036bc:	edc3 7a00 	vstr	s15, [r3]
 80036c0:	e1a3      	b.n	8003a0a <createTrajectory+0x772>
		}
		else{
			calmode = 3;
 80036c2:	4b0e      	ldr	r3, [pc, #56]	@ (80036fc <createTrajectory+0x464>)
 80036c4:	2203      	movs	r2, #3
 80036c6:	701a      	strb	r2, [r3, #0]
	else if(calmode == 3){ //stop
		ref_p = q_f;
		ref_v = 0;
		ref_a = 0;
	}
}
 80036c8:	e19f      	b.n	8003a0a <createTrajectory+0x772>
 80036ca:	bf00      	nop
 80036cc:	20000b90 	.word	0x20000b90
 80036d0:	20000b98 	.word	0x20000b98
 80036d4:	20000bb0 	.word	0x20000bb0
 80036d8:	20000b78 	.word	0x20000b78
 80036dc:	20000b9c 	.word	0x20000b9c
 80036e0:	20000208 	.word	0x20000208
 80036e4:	20000214 	.word	0x20000214
 80036e8:	2000020c 	.word	0x2000020c
 80036ec:	3fe00000 	.word	0x3fe00000
 80036f0:	20000b80 	.word	0x20000b80
 80036f4:	20000b84 	.word	0x20000b84
 80036f8:	20000b88 	.word	0x20000b88
 80036fc:	20000210 	.word	0x20000210
	else if(calmode == 2){
 8003700:	4bc3      	ldr	r3, [pc, #780]	@ (8003a10 <createTrajectory+0x778>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b02      	cmp	r3, #2
 8003706:	f040 816f 	bne.w	80039e8 <createTrajectory+0x750>
		t = (float)(micros()-T_start)/1000000; //sec
 800370a:	f7ff fa51 	bl	8002bb0 <micros>
 800370e:	4bc1      	ldr	r3, [pc, #772]	@ (8003a14 <createTrajectory+0x77c>)
 8003710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003714:	1a84      	subs	r4, r0, r2
 8003716:	eb61 0503 	sbc.w	r5, r1, r3
 800371a:	4620      	mov	r0, r4
 800371c:	4629      	mov	r1, r5
 800371e:	f7fd fb1f 	bl	8000d60 <__aeabi_ul2f>
 8003722:	ee06 0a90 	vmov	s13, r0
 8003726:	ed9f 7abc 	vldr	s14, [pc, #752]	@ 8003a18 <createTrajectory+0x780>
 800372a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800372e:	4bbb      	ldr	r3, [pc, #748]	@ (8003a1c <createTrajectory+0x784>)
 8003730:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 8003734:	4bb9      	ldr	r3, [pc, #740]	@ (8003a1c <createTrajectory+0x784>)
 8003736:	edd3 7a00 	vldr	s15, [r3]
 800373a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800373e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003742:	f2c0 8094 	blt.w	800386e <createTrajectory+0x5d6>
 8003746:	4bb5      	ldr	r3, [pc, #724]	@ (8003a1c <createTrajectory+0x784>)
 8003748:	ed93 7a00 	vldr	s14, [r3]
 800374c:	4bb4      	ldr	r3, [pc, #720]	@ (8003a20 <createTrajectory+0x788>)
 800374e:	edd3 7a00 	vldr	s15, [r3]
 8003752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375a:	f140 8088 	bpl.w	800386e <createTrajectory+0x5d6>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 800375e:	4bb1      	ldr	r3, [pc, #708]	@ (8003a24 <createTrajectory+0x78c>)
 8003760:	ed93 7a00 	vldr	s14, [r3]
 8003764:	4bad      	ldr	r3, [pc, #692]	@ (8003a1c <createTrajectory+0x784>)
 8003766:	edd3 7a00 	vldr	s15, [r3]
 800376a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800376e:	4bae      	ldr	r3, [pc, #696]	@ (8003a28 <createTrajectory+0x790>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800377a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800377e:	4bab      	ldr	r3, [pc, #684]	@ (8003a2c <createTrajectory+0x794>)
 8003780:	edd3 7a00 	vldr	s15, [r3]
 8003784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003788:	ee17 0a90 	vmov	r0, s15
 800378c:	f7fc fea8 	bl	80004e0 <__aeabi_f2d>
 8003790:	4604      	mov	r4, r0
 8003792:	460d      	mov	r5, r1
 8003794:	4ba6      	ldr	r3, [pc, #664]	@ (8003a30 <createTrajectory+0x798>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f7fc fea1 	bl	80004e0 <__aeabi_f2d>
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	4ba4      	ldr	r3, [pc, #656]	@ (8003a34 <createTrajectory+0x79c>)
 80037a4:	f7fc fef4 	bl	8000590 <__aeabi_dmul>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4690      	mov	r8, r2
 80037ae:	4699      	mov	r9, r3
 80037b0:	4b9a      	ldr	r3, [pc, #616]	@ (8003a1c <createTrajectory+0x784>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fc fe93 	bl	80004e0 <__aeabi_f2d>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4640      	mov	r0, r8
 80037c0:	4649      	mov	r1, r9
 80037c2:	f7fc fee5 	bl	8000590 <__aeabi_dmul>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4690      	mov	r8, r2
 80037cc:	4699      	mov	r9, r3
 80037ce:	4b93      	ldr	r3, [pc, #588]	@ (8003a1c <createTrajectory+0x784>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fc fe84 	bl	80004e0 <__aeabi_f2d>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4640      	mov	r0, r8
 80037de:	4649      	mov	r1, r9
 80037e0:	f7fc fed6 	bl	8000590 <__aeabi_dmul>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4690      	mov	r8, r2
 80037ea:	4699      	mov	r9, r3
 80037ec:	4b8e      	ldr	r3, [pc, #568]	@ (8003a28 <createTrajectory+0x790>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fc fe63 	bl	80004bc <__aeabi_i2d>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4640      	mov	r0, r8
 80037fc:	4649      	mov	r1, r9
 80037fe:	f7fc fec7 	bl	8000590 <__aeabi_dmul>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4620      	mov	r0, r4
 8003808:	4629      	mov	r1, r5
 800380a:	f7fc fd0b 	bl	8000224 <__adddf3>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4610      	mov	r0, r2
 8003814:	4619      	mov	r1, r3
 8003816:	f7fd f98b 	bl	8000b30 <__aeabi_d2f>
 800381a:	4603      	mov	r3, r0
 800381c:	4a86      	ldr	r2, [pc, #536]	@ (8003a38 <createTrajectory+0x7a0>)
 800381e:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 8003820:	4b83      	ldr	r3, [pc, #524]	@ (8003a30 <createTrajectory+0x798>)
 8003822:	ed93 7a00 	vldr	s14, [r3]
 8003826:	4b7d      	ldr	r3, [pc, #500]	@ (8003a1c <createTrajectory+0x784>)
 8003828:	edd3 7a00 	vldr	s15, [r3]
 800382c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003830:	4b7d      	ldr	r3, [pc, #500]	@ (8003a28 <createTrajectory+0x790>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	ee07 3a90 	vmov	s15, r3
 8003838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800383c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003840:	4b78      	ldr	r3, [pc, #480]	@ (8003a24 <createTrajectory+0x78c>)
 8003842:	edd3 7a00 	vldr	s15, [r3]
 8003846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800384a:	4b7c      	ldr	r3, [pc, #496]	@ (8003a3c <createTrajectory+0x7a4>)
 800384c:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 8003850:	4b75      	ldr	r3, [pc, #468]	@ (8003a28 <createTrajectory+0x790>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	ee07 3a90 	vmov	s15, r3
 8003858:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800385c:	4b74      	ldr	r3, [pc, #464]	@ (8003a30 <createTrajectory+0x798>)
 800385e:	edd3 7a00 	vldr	s15, [r3]
 8003862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003866:	4b76      	ldr	r3, [pc, #472]	@ (8003a40 <createTrajectory+0x7a8>)
 8003868:	edc3 7a00 	vstr	s15, [r3]
 800386c:	e0cd      	b.n	8003a0a <createTrajectory+0x772>
		else if((t_acc <= t) && (t < t_acc*2)){
 800386e:	4b6c      	ldr	r3, [pc, #432]	@ (8003a20 <createTrajectory+0x788>)
 8003870:	ed93 7a00 	vldr	s14, [r3]
 8003874:	4b69      	ldr	r3, [pc, #420]	@ (8003a1c <createTrajectory+0x784>)
 8003876:	edd3 7a00 	vldr	s15, [r3]
 800387a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800387e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003882:	f200 80ad 	bhi.w	80039e0 <createTrajectory+0x748>
 8003886:	4b66      	ldr	r3, [pc, #408]	@ (8003a20 <createTrajectory+0x788>)
 8003888:	edd3 7a00 	vldr	s15, [r3]
 800388c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003890:	4b62      	ldr	r3, [pc, #392]	@ (8003a1c <createTrajectory+0x784>)
 8003892:	edd3 7a00 	vldr	s15, [r3]
 8003896:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800389a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800389e:	f340 809f 	ble.w	80039e0 <createTrajectory+0x748>
			ref_p = q_i + q_acc + q_d_acc*(t-t_acc) - 0.5*q_2d_max*(t-t_acc)*(t-t_acc)*dir;
 80038a2:	4b62      	ldr	r3, [pc, #392]	@ (8003a2c <createTrajectory+0x794>)
 80038a4:	ed93 7a00 	vldr	s14, [r3]
 80038a8:	4b66      	ldr	r3, [pc, #408]	@ (8003a44 <createTrajectory+0x7ac>)
 80038aa:	edd3 7a00 	vldr	s15, [r3]
 80038ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038b2:	4b5a      	ldr	r3, [pc, #360]	@ (8003a1c <createTrajectory+0x784>)
 80038b4:	edd3 6a00 	vldr	s13, [r3]
 80038b8:	4b59      	ldr	r3, [pc, #356]	@ (8003a20 <createTrajectory+0x788>)
 80038ba:	edd3 7a00 	vldr	s15, [r3]
 80038be:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80038c2:	4b61      	ldr	r3, [pc, #388]	@ (8003a48 <createTrajectory+0x7b0>)
 80038c4:	edd3 7a00 	vldr	s15, [r3]
 80038c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038d0:	ee17 0a90 	vmov	r0, s15
 80038d4:	f7fc fe04 	bl	80004e0 <__aeabi_f2d>
 80038d8:	4604      	mov	r4, r0
 80038da:	460d      	mov	r5, r1
 80038dc:	4b54      	ldr	r3, [pc, #336]	@ (8003a30 <createTrajectory+0x798>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fc fdfd 	bl	80004e0 <__aeabi_f2d>
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	4b52      	ldr	r3, [pc, #328]	@ (8003a34 <createTrajectory+0x79c>)
 80038ec:	f7fc fe50 	bl	8000590 <__aeabi_dmul>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4690      	mov	r8, r2
 80038f6:	4699      	mov	r9, r3
 80038f8:	4b48      	ldr	r3, [pc, #288]	@ (8003a1c <createTrajectory+0x784>)
 80038fa:	ed93 7a00 	vldr	s14, [r3]
 80038fe:	4b48      	ldr	r3, [pc, #288]	@ (8003a20 <createTrajectory+0x788>)
 8003900:	edd3 7a00 	vldr	s15, [r3]
 8003904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003908:	ee17 0a90 	vmov	r0, s15
 800390c:	f7fc fde8 	bl	80004e0 <__aeabi_f2d>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4640      	mov	r0, r8
 8003916:	4649      	mov	r1, r9
 8003918:	f7fc fe3a 	bl	8000590 <__aeabi_dmul>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4690      	mov	r8, r2
 8003922:	4699      	mov	r9, r3
 8003924:	4b3d      	ldr	r3, [pc, #244]	@ (8003a1c <createTrajectory+0x784>)
 8003926:	ed93 7a00 	vldr	s14, [r3]
 800392a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a20 <createTrajectory+0x788>)
 800392c:	edd3 7a00 	vldr	s15, [r3]
 8003930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003934:	ee17 0a90 	vmov	r0, s15
 8003938:	f7fc fdd2 	bl	80004e0 <__aeabi_f2d>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4640      	mov	r0, r8
 8003942:	4649      	mov	r1, r9
 8003944:	f7fc fe24 	bl	8000590 <__aeabi_dmul>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4690      	mov	r8, r2
 800394e:	4699      	mov	r9, r3
 8003950:	4b35      	ldr	r3, [pc, #212]	@ (8003a28 <createTrajectory+0x790>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7fc fdb1 	bl	80004bc <__aeabi_i2d>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4640      	mov	r0, r8
 8003960:	4649      	mov	r1, r9
 8003962:	f7fc fe15 	bl	8000590 <__aeabi_dmul>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4620      	mov	r0, r4
 800396c:	4629      	mov	r1, r5
 800396e:	f7fc fc57 	bl	8000220 <__aeabi_dsub>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4610      	mov	r0, r2
 8003978:	4619      	mov	r1, r3
 800397a:	f7fd f8d9 	bl	8000b30 <__aeabi_d2f>
 800397e:	4603      	mov	r3, r0
 8003980:	4a2d      	ldr	r2, [pc, #180]	@ (8003a38 <createTrajectory+0x7a0>)
 8003982:	6013      	str	r3, [r2, #0]
			ref_v = q_d_acc - q_2d_max*(t-t_acc)*dir;
 8003984:	4b30      	ldr	r3, [pc, #192]	@ (8003a48 <createTrajectory+0x7b0>)
 8003986:	ed93 7a00 	vldr	s14, [r3]
 800398a:	4b24      	ldr	r3, [pc, #144]	@ (8003a1c <createTrajectory+0x784>)
 800398c:	edd3 6a00 	vldr	s13, [r3]
 8003990:	4b23      	ldr	r3, [pc, #140]	@ (8003a20 <createTrajectory+0x788>)
 8003992:	edd3 7a00 	vldr	s15, [r3]
 8003996:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800399a:	4b25      	ldr	r3, [pc, #148]	@ (8003a30 <createTrajectory+0x798>)
 800399c:	edd3 7a00 	vldr	s15, [r3]
 80039a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039a4:	4b20      	ldr	r3, [pc, #128]	@ (8003a28 <createTrajectory+0x790>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	ee07 3a90 	vmov	s15, r3
 80039ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039b8:	4b20      	ldr	r3, [pc, #128]	@ (8003a3c <createTrajectory+0x7a4>)
 80039ba:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 80039be:	4b1c      	ldr	r3, [pc, #112]	@ (8003a30 <createTrajectory+0x798>)
 80039c0:	edd3 7a00 	vldr	s15, [r3]
 80039c4:	eeb1 7a67 	vneg.f32	s14, s15
 80039c8:	4b17      	ldr	r3, [pc, #92]	@ (8003a28 <createTrajectory+0x790>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	ee07 3a90 	vmov	s15, r3
 80039d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d8:	4b19      	ldr	r3, [pc, #100]	@ (8003a40 <createTrajectory+0x7a8>)
 80039da:	edc3 7a00 	vstr	s15, [r3]
 80039de:	e014      	b.n	8003a0a <createTrajectory+0x772>
			calmode = 3;
 80039e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a10 <createTrajectory+0x778>)
 80039e2:	2203      	movs	r2, #3
 80039e4:	701a      	strb	r2, [r3, #0]
}
 80039e6:	e010      	b.n	8003a0a <createTrajectory+0x772>
	else if(calmode == 3){ //stop
 80039e8:	4b09      	ldr	r3, [pc, #36]	@ (8003a10 <createTrajectory+0x778>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d10c      	bne.n	8003a0a <createTrajectory+0x772>
		ref_p = q_f;
 80039f0:	4b16      	ldr	r3, [pc, #88]	@ (8003a4c <createTrajectory+0x7b4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a10      	ldr	r2, [pc, #64]	@ (8003a38 <createTrajectory+0x7a0>)
 80039f6:	6013      	str	r3, [r2, #0]
		ref_v = 0;
 80039f8:	4b10      	ldr	r3, [pc, #64]	@ (8003a3c <createTrajectory+0x7a4>)
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
		ref_a = 0;
 8003a00:	4b0f      	ldr	r3, [pc, #60]	@ (8003a40 <createTrajectory+0x7a8>)
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
}
 8003a08:	e7ff      	b.n	8003a0a <createTrajectory+0x772>
 8003a0a:	bf00      	nop
 8003a0c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a10:	20000210 	.word	0x20000210
 8003a14:	20000ba8 	.word	0x20000ba8
 8003a18:	49742400 	.word	0x49742400
 8003a1c:	20000bb0 	.word	0x20000bb0
 8003a20:	20000b90 	.word	0x20000b90
 8003a24:	20000b70 	.word	0x20000b70
 8003a28:	20000214 	.word	0x20000214
 8003a2c:	20000b78 	.word	0x20000b78
 8003a30:	2000020c 	.word	0x2000020c
 8003a34:	3fe00000 	.word	0x3fe00000
 8003a38:	20000b80 	.word	0x20000b80
 8003a3c:	20000b84 	.word	0x20000b84
 8003a40:	20000b88 	.word	0x20000b88
 8003a44:	20000b94 	.word	0x20000b94
 8003a48:	20000ba0 	.word	0x20000ba0
 8003a4c:	20000b74 	.word	0x20000b74

08003a50 <DriveMotor>:

//--------------------------Drive Motor----------------//

void DriveMotor(){
 8003a50:	b598      	push	{r3, r4, r7, lr}
 8003a52:	af00      	add	r7, sp, #0
//		S_down_savestate = S_down;
//		mode_savestate = mode;
//		timestamp_savestate = micros() + 50000;
//	}
	//PWM Motor
	duty_cycle = (fabs(Vin)*100)/24;
 8003a54:	4b26      	ldr	r3, [pc, #152]	@ (8003af0 <DriveMotor+0xa0>)
 8003a56:	edd3 7a00 	vldr	s15, [r3]
 8003a5a:	eef0 7ae7 	vabs.f32	s15, s15
 8003a5e:	ee17 0a90 	vmov	r0, s15
 8003a62:	f7fc fd3d 	bl	80004e0 <__aeabi_f2d>
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	4b22      	ldr	r3, [pc, #136]	@ (8003af4 <DriveMotor+0xa4>)
 8003a6c:	f7fc fd90 	bl	8000590 <__aeabi_dmul>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4610      	mov	r0, r2
 8003a76:	4619      	mov	r1, r3
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8003af8 <DriveMotor+0xa8>)
 8003a7e:	f7fc feb1 	bl	80007e4 <__aeabi_ddiv>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4610      	mov	r0, r2
 8003a88:	4619      	mov	r1, r3
 8003a8a:	f7fd f851 	bl	8000b30 <__aeabi_d2f>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4a1a      	ldr	r2, [pc, #104]	@ (8003afc <DriveMotor+0xac>)
 8003a92:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycle*9.99);
 8003a94:	4b19      	ldr	r3, [pc, #100]	@ (8003afc <DriveMotor+0xac>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fc fd21 	bl	80004e0 <__aeabi_f2d>
 8003a9e:	a312      	add	r3, pc, #72	@ (adr r3, 8003ae8 <DriveMotor+0x98>)
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	f7fc fd74 	bl	8000590 <__aeabi_dmul>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4914      	ldr	r1, [pc, #80]	@ (8003b00 <DriveMotor+0xb0>)
 8003aae:	680c      	ldr	r4, [r1, #0]
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	f7fd f81c 	bl	8000af0 <__aeabi_d2uiz>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	6363      	str	r3, [r4, #52]	@ 0x34

	//Control Motor Direction
	if(Vin < 0){
 8003abc:	4b0c      	ldr	r3, [pc, #48]	@ (8003af0 <DriveMotor+0xa0>)
 8003abe:	edd3 7a00 	vldr	s15, [r3]
 8003ac2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aca:	d505      	bpl.n	8003ad8 <DriveMotor+0x88>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8003acc:	2201      	movs	r2, #1
 8003ace:	2120      	movs	r1, #32
 8003ad0:	480c      	ldr	r0, [pc, #48]	@ (8003b04 <DriveMotor+0xb4>)
 8003ad2:	f003 feb3 	bl	800783c <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
	}
//	Vin_old = Vin;
}
 8003ad6:	e004      	b.n	8003ae2 <DriveMotor+0x92>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2120      	movs	r1, #32
 8003adc:	4809      	ldr	r0, [pc, #36]	@ (8003b04 <DriveMotor+0xb4>)
 8003ade:	f003 fead 	bl	800783c <HAL_GPIO_WritePin>
}
 8003ae2:	bf00      	nop
 8003ae4:	bd98      	pop	{r3, r4, r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	47ae147b 	.word	0x47ae147b
 8003aec:	4023fae1 	.word	0x4023fae1
 8003af0:	20000b68 	.word	0x20000b68
 8003af4:	40590000 	.word	0x40590000
 8003af8:	40380000 	.word	0x40380000
 8003afc:	20000204 	.word	0x20000204
 8003b00:	200004a8 	.word	0x200004a8
 8003b04:	48000800 	.word	0x48000800

08003b08 <SoftwareLimit>:

void SoftwareLimit(){
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
	if(S_top == 1 && Vin >= -2){
 8003b0c:	4b26      	ldr	r3, [pc, #152]	@ (8003ba8 <SoftwareLimit+0xa0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d10e      	bne.n	8003b32 <SoftwareLimit+0x2a>
 8003b14:	4b25      	ldr	r3, [pc, #148]	@ (8003bac <SoftwareLimit+0xa4>)
 8003b16:	edd3 7a00 	vldr	s15, [r3]
 8003b1a:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b26:	db04      	blt.n	8003b32 <SoftwareLimit+0x2a>
		Vin = 0;
 8003b28:	4b20      	ldr	r3, [pc, #128]	@ (8003bac <SoftwareLimit+0xa4>)
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	e010      	b.n	8003b54 <SoftwareLimit+0x4c>
	}
	else if(S_top == 1 && Vin < -2){
 8003b32:	4b1d      	ldr	r3, [pc, #116]	@ (8003ba8 <SoftwareLimit+0xa0>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d10c      	bne.n	8003b54 <SoftwareLimit+0x4c>
 8003b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bac <SoftwareLimit+0xa4>)
 8003b3c:	edd3 7a00 	vldr	s15, [r3]
 8003b40:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003b44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4c:	d502      	bpl.n	8003b54 <SoftwareLimit+0x4c>
		S_top = 0;
 8003b4e:	4b16      	ldr	r3, [pc, #88]	@ (8003ba8 <SoftwareLimit+0xa0>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
	}

	if(S_down == 1 && Vin <= 2){
 8003b54:	4b16      	ldr	r3, [pc, #88]	@ (8003bb0 <SoftwareLimit+0xa8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d10e      	bne.n	8003b7a <SoftwareLimit+0x72>
 8003b5c:	4b13      	ldr	r3, [pc, #76]	@ (8003bac <SoftwareLimit+0xa4>)
 8003b5e:	edd3 7a00 	vldr	s15, [r3]
 8003b62:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6e:	d804      	bhi.n	8003b7a <SoftwareLimit+0x72>
		Vin = 0;
 8003b70:	4b0e      	ldr	r3, [pc, #56]	@ (8003bac <SoftwareLimit+0xa4>)
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
	}
	else if(S_down == 1 && Vin > 2){
		S_down = 0;
	}

}
 8003b78:	e011      	b.n	8003b9e <SoftwareLimit+0x96>
	else if(S_down == 1 && Vin > 2){
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb0 <SoftwareLimit+0xa8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d10d      	bne.n	8003b9e <SoftwareLimit+0x96>
 8003b82:	4b0a      	ldr	r3, [pc, #40]	@ (8003bac <SoftwareLimit+0xa4>)
 8003b84:	edd3 7a00 	vldr	s15, [r3]
 8003b88:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b94:	dc00      	bgt.n	8003b98 <SoftwareLimit+0x90>
}
 8003b96:	e002      	b.n	8003b9e <SoftwareLimit+0x96>
		S_down = 0;
 8003b98:	4b05      	ldr	r3, [pc, #20]	@ (8003bb0 <SoftwareLimit+0xa8>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
}
 8003b9e:	bf00      	nop
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	20000c34 	.word	0x20000c34
 8003bac:	20000b68 	.word	0x20000b68
 8003bb0:	20000c38 	.word	0x20000c38
 8003bb4:	00000000 	.word	0x00000000

08003bb8 <JoystickInput>:


//------------------------------------Joy---------------------------------------//

void JoystickInput(){
 8003bb8:	b5b0      	push	{r4, r5, r7, lr}
 8003bba:	af00      	add	r7, sp, #0
//		Vin = 0;
//	}

	//Control x-axis by joy
//	x_position += ((ADCBuffer[0]-2048)*0.005);
	if (ADCBuffer[0]>=2100)
 8003bbc:	4b38      	ldr	r3, [pc, #224]	@ (8003ca0 <JoystickInput+0xe8>)
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	f640 0233 	movw	r2, #2099	@ 0x833
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d92f      	bls.n	8003c28 <JoystickInput+0x70>
	{
		temp_x = (float)(ADCBuffer[0]);
 8003bc8:	4b35      	ldr	r3, [pc, #212]	@ (8003ca0 <JoystickInput+0xe8>)
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	ee07 3a90 	vmov	s15, r3
 8003bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd4:	4b33      	ldr	r3, [pc, #204]	@ (8003ca4 <JoystickInput+0xec>)
 8003bd6:	edc3 7a00 	vstr	s15, [r3]
		x_position += (temp_x/4096)*0.05;
 8003bda:	4b33      	ldr	r3, [pc, #204]	@ (8003ca8 <JoystickInput+0xf0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fc fc7e 	bl	80004e0 <__aeabi_f2d>
 8003be4:	4604      	mov	r4, r0
 8003be6:	460d      	mov	r5, r1
 8003be8:	4b2e      	ldr	r3, [pc, #184]	@ (8003ca4 <JoystickInput+0xec>)
 8003bea:	edd3 7a00 	vldr	s15, [r3]
 8003bee:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8003cac <JoystickInput+0xf4>
 8003bf2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003bf6:	ee16 0a90 	vmov	r0, s13
 8003bfa:	f7fc fc71 	bl	80004e0 <__aeabi_f2d>
 8003bfe:	a326      	add	r3, pc, #152	@ (adr r3, 8003c98 <JoystickInput+0xe0>)
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	f7fc fcc4 	bl	8000590 <__aeabi_dmul>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	4629      	mov	r1, r5
 8003c10:	f7fc fb08 	bl	8000224 <__adddf3>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4610      	mov	r0, r2
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	f7fc ff88 	bl	8000b30 <__aeabi_d2f>
 8003c20:	4603      	mov	r3, r0
 8003c22:	4a21      	ldr	r2, [pc, #132]	@ (8003ca8 <JoystickInput+0xf0>)
 8003c24:	6013      	str	r3, [r2, #0]
	{

		temp_x = (float)(ADCBuffer[0]);
		x_position -= (temp_x/4096)*0.05;
	}
}
 8003c26:	e033      	b.n	8003c90 <JoystickInput+0xd8>
	else if (ADCBuffer[0] <= 1800)
 8003c28:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca0 <JoystickInput+0xe8>)
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8003c30:	d82e      	bhi.n	8003c90 <JoystickInput+0xd8>
		temp_x = (float)(ADCBuffer[0]);
 8003c32:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca0 <JoystickInput+0xe8>)
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3e:	4b19      	ldr	r3, [pc, #100]	@ (8003ca4 <JoystickInput+0xec>)
 8003c40:	edc3 7a00 	vstr	s15, [r3]
		x_position -= (temp_x/4096)*0.05;
 8003c44:	4b18      	ldr	r3, [pc, #96]	@ (8003ca8 <JoystickInput+0xf0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fc fc49 	bl	80004e0 <__aeabi_f2d>
 8003c4e:	4604      	mov	r4, r0
 8003c50:	460d      	mov	r5, r1
 8003c52:	4b14      	ldr	r3, [pc, #80]	@ (8003ca4 <JoystickInput+0xec>)
 8003c54:	edd3 7a00 	vldr	s15, [r3]
 8003c58:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003cac <JoystickInput+0xf4>
 8003c5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c60:	ee16 0a90 	vmov	r0, s13
 8003c64:	f7fc fc3c 	bl	80004e0 <__aeabi_f2d>
 8003c68:	a30b      	add	r3, pc, #44	@ (adr r3, 8003c98 <JoystickInput+0xe0>)
 8003c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6e:	f7fc fc8f 	bl	8000590 <__aeabi_dmul>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4620      	mov	r0, r4
 8003c78:	4629      	mov	r1, r5
 8003c7a:	f7fc fad1 	bl	8000220 <__aeabi_dsub>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4610      	mov	r0, r2
 8003c84:	4619      	mov	r1, r3
 8003c86:	f7fc ff53 	bl	8000b30 <__aeabi_d2f>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4a06      	ldr	r2, [pc, #24]	@ (8003ca8 <JoystickInput+0xf0>)
 8003c8e:	6013      	str	r3, [r2, #0]
}
 8003c90:	bf00      	nop
 8003c92:	bdb0      	pop	{r4, r5, r7, pc}
 8003c94:	f3af 8000 	nop.w
 8003c98:	9999999a 	.word	0x9999999a
 8003c9c:	3fa99999 	.word	0x3fa99999
 8003ca0:	20000b48 	.word	0x20000b48
 8003ca4:	20000b50 	.word	0x20000b50
 8003ca8:	20000b4c 	.word	0x20000b4c
 8003cac:	45800000 	.word	0x45800000

08003cb0 <button_up_down_input>:

void button_up_down_input(){
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
	//check button up
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 1){
 8003cb4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003cb8:	4844      	ldr	r0, [pc, #272]	@ (8003dcc <button_up_down_input+0x11c>)
 8003cba:	f003 fda7 	bl	800780c <HAL_GPIO_ReadPin>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d113      	bne.n	8003cec <button_up_down_input+0x3c>
		set_manual_point = QEIdata.linearPos + 1; //stem 10 mm
 8003cc4:	4b42      	ldr	r3, [pc, #264]	@ (8003dd0 <button_up_down_input+0x120>)
 8003cc6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003cca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cd2:	4b40      	ldr	r3, [pc, #256]	@ (8003dd4 <button_up_down_input+0x124>)
 8003cd4:	edc3 7a00 	vstr	s15, [r3]
		check_up = 1;
 8003cd8:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd8 <button_up_down_input+0x128>)
 8003cda:	2201      	movs	r2, #1
 8003cdc:	701a      	strb	r2, [r3, #0]
		B_up = 1;
 8003cde:	4b3f      	ldr	r3, [pc, #252]	@ (8003ddc <button_up_down_input+0x12c>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	701a      	strb	r2, [r3, #0]
		check_state_B = 1;
 8003ce4:	4b3e      	ldr	r3, [pc, #248]	@ (8003de0 <button_up_down_input+0x130>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	e005      	b.n	8003cf8 <button_up_down_input+0x48>
	}
	else{
		B_up = 0;
 8003cec:	4b3b      	ldr	r3, [pc, #236]	@ (8003ddc <button_up_down_input+0x12c>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	701a      	strb	r2, [r3, #0]
		check_state_B = 2;
 8003cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8003de0 <button_up_down_input+0x130>)
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	601a      	str	r2, [r3, #0]
	}
	if(QEIdata.linearPos < set_manual_point && check_up == 1){
 8003cf8:	4b35      	ldr	r3, [pc, #212]	@ (8003dd0 <button_up_down_input+0x120>)
 8003cfa:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003cfe:	4b35      	ldr	r3, [pc, #212]	@ (8003dd4 <button_up_down_input+0x124>)
 8003d00:	edd3 7a00 	vldr	s15, [r3]
 8003d04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0c:	d50b      	bpl.n	8003d26 <button_up_down_input+0x76>
 8003d0e:	4b32      	ldr	r3, [pc, #200]	@ (8003dd8 <button_up_down_input+0x128>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d107      	bne.n	8003d26 <button_up_down_input+0x76>
		//Vin = 4;
		Vin = 4;
 8003d16:	4b33      	ldr	r3, [pc, #204]	@ (8003de4 <button_up_down_input+0x134>)
 8003d18:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8003d1c:	601a      	str	r2, [r3, #0]
		check_state_B = 3;
 8003d1e:	4b30      	ldr	r3, [pc, #192]	@ (8003de0 <button_up_down_input+0x130>)
 8003d20:	2203      	movs	r2, #3
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	e005      	b.n	8003d32 <button_up_down_input+0x82>
	}
	else{
		check_up = 0;
 8003d26:	4b2c      	ldr	r3, [pc, #176]	@ (8003dd8 <button_up_down_input+0x128>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	701a      	strb	r2, [r3, #0]
		check_state_B = 4;
 8003d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8003de0 <button_up_down_input+0x130>)
 8003d2e:	2204      	movs	r2, #4
 8003d30:	601a      	str	r2, [r3, #0]
	}

	//check button down
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == 1){
 8003d32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d36:	4825      	ldr	r0, [pc, #148]	@ (8003dcc <button_up_down_input+0x11c>)
 8003d38:	f003 fd68 	bl	800780c <HAL_GPIO_ReadPin>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d113      	bne.n	8003d6a <button_up_down_input+0xba>
		set_manual_point = QEIdata.linearPos - 1;
 8003d42:	4b23      	ldr	r3, [pc, #140]	@ (8003dd0 <button_up_down_input+0x120>)
 8003d44:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003d48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d50:	4b20      	ldr	r3, [pc, #128]	@ (8003dd4 <button_up_down_input+0x124>)
 8003d52:	edc3 7a00 	vstr	s15, [r3]
		check_down = 1;
 8003d56:	4b24      	ldr	r3, [pc, #144]	@ (8003de8 <button_up_down_input+0x138>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	701a      	strb	r2, [r3, #0]
		B_down = 1;
 8003d5c:	4b23      	ldr	r3, [pc, #140]	@ (8003dec <button_up_down_input+0x13c>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	701a      	strb	r2, [r3, #0]
		check_state_B = 5;
 8003d62:	4b1f      	ldr	r3, [pc, #124]	@ (8003de0 <button_up_down_input+0x130>)
 8003d64:	2205      	movs	r2, #5
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	e005      	b.n	8003d76 <button_up_down_input+0xc6>
	}
	else{
		B_down = 0;
 8003d6a:	4b20      	ldr	r3, [pc, #128]	@ (8003dec <button_up_down_input+0x13c>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
		check_state_B = 6;
 8003d70:	4b1b      	ldr	r3, [pc, #108]	@ (8003de0 <button_up_down_input+0x130>)
 8003d72:	2206      	movs	r2, #6
 8003d74:	601a      	str	r2, [r3, #0]
	}
	if(QEIdata.linearPos > set_manual_point && check_down == 1){
 8003d76:	4b16      	ldr	r3, [pc, #88]	@ (8003dd0 <button_up_down_input+0x120>)
 8003d78:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003d7c:	4b15      	ldr	r3, [pc, #84]	@ (8003dd4 <button_up_down_input+0x124>)
 8003d7e:	edd3 7a00 	vldr	s15, [r3]
 8003d82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d8a:	dd0a      	ble.n	8003da2 <button_up_down_input+0xf2>
 8003d8c:	4b16      	ldr	r3, [pc, #88]	@ (8003de8 <button_up_down_input+0x138>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d106      	bne.n	8003da2 <button_up_down_input+0xf2>
		//Vin = -3;
		Vin = -3;
 8003d94:	4b13      	ldr	r3, [pc, #76]	@ (8003de4 <button_up_down_input+0x134>)
 8003d96:	4a16      	ldr	r2, [pc, #88]	@ (8003df0 <button_up_down_input+0x140>)
 8003d98:	601a      	str	r2, [r3, #0]
		check_state_B = 7;
 8003d9a:	4b11      	ldr	r3, [pc, #68]	@ (8003de0 <button_up_down_input+0x130>)
 8003d9c:	2207      	movs	r2, #7
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	e005      	b.n	8003dae <button_up_down_input+0xfe>
	}
	else{
		check_down = 0;
 8003da2:	4b11      	ldr	r3, [pc, #68]	@ (8003de8 <button_up_down_input+0x138>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	701a      	strb	r2, [r3, #0]
		check_state_B = 8;
 8003da8:	4b0d      	ldr	r3, [pc, #52]	@ (8003de0 <button_up_down_input+0x130>)
 8003daa:	2208      	movs	r2, #8
 8003dac:	601a      	str	r2, [r3, #0]
	}

	if(check_up == 0 && check_down == 0){
 8003dae:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd8 <button_up_down_input+0x128>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d107      	bne.n	8003dc6 <button_up_down_input+0x116>
 8003db6:	4b0c      	ldr	r3, [pc, #48]	@ (8003de8 <button_up_down_input+0x138>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d103      	bne.n	8003dc6 <button_up_down_input+0x116>
		Vin = 0;
 8003dbe:	4b09      	ldr	r3, [pc, #36]	@ (8003de4 <button_up_down_input+0x134>)
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
	}
}
 8003dc6:	bf00      	nop
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	48000800 	.word	0x48000800
 8003dd0:	20000b00 	.word	0x20000b00
 8003dd4:	20000b54 	.word	0x20000b54
 8003dd8:	20000b58 	.word	0x20000b58
 8003ddc:	20000bb8 	.word	0x20000bb8
 8003de0:	20000c44 	.word	0x20000c44
 8003de4:	20000b68 	.word	0x20000b68
 8003de8:	20000b59 	.word	0x20000b59
 8003dec:	20000bb9 	.word	0x20000bb9
 8003df0:	c0400000 	.word	0xc0400000

08003df4 <button_reset_input>:

void button_reset_input(){
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
	//check button reset
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1 || (Home_state_triger == 0 && set_Home_state == 1) || emergency_reset == 1){
 8003df8:	2104      	movs	r1, #4
 8003dfa:	4846      	ldr	r0, [pc, #280]	@ (8003f14 <button_reset_input+0x120>)
 8003dfc:	f003 fd06 	bl	800780c <HAL_GPIO_ReadPin>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d00b      	beq.n	8003e1e <button_reset_input+0x2a>
 8003e06:	4b44      	ldr	r3, [pc, #272]	@ (8003f18 <button_reset_input+0x124>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d103      	bne.n	8003e16 <button_reset_input+0x22>
 8003e0e:	4b43      	ldr	r3, [pc, #268]	@ (8003f1c <button_reset_input+0x128>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d003      	beq.n	8003e1e <button_reset_input+0x2a>
 8003e16:	4b42      	ldr	r3, [pc, #264]	@ (8003f20 <button_reset_input+0x12c>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d174      	bne.n	8003f08 <button_reset_input+0x114>
		B_reset = 1;
 8003e1e:	4b41      	ldr	r3, [pc, #260]	@ (8003f24 <button_reset_input+0x130>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]
		S_top = 0;
 8003e24:	4b40      	ldr	r3, [pc, #256]	@ (8003f28 <button_reset_input+0x134>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
		S_down = 0;
 8003e2a:	4b40      	ldr	r3, [pc, #256]	@ (8003f2c <button_reset_input+0x138>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 8003e30:	e006      	b.n	8003e40 <button_reset_input+0x4c>
			Modbus_Protocal_Worker();
 8003e32:	f7fd fa1f 	bl	8001274 <Modbus_Protocal_Worker>
//			Vin = -3.5;
			Vin = -5;
 8003e36:	4b3e      	ldr	r3, [pc, #248]	@ (8003f30 <button_reset_input+0x13c>)
 8003e38:	4a3e      	ldr	r2, [pc, #248]	@ (8003f34 <button_reset_input+0x140>)
 8003e3a:	601a      	str	r2, [r3, #0]
			//software limit
			//SoftwareLimit();
			//Drive Motor which PWM
			DriveMotor();
 8003e3c:	f7ff fe08 	bl	8003a50 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 8003e40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e44:	483c      	ldr	r0, [pc, #240]	@ (8003f38 <button_reset_input+0x144>)
 8003e46:	f003 fce1 	bl	800780c <HAL_GPIO_ReadPin>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f0      	beq.n	8003e32 <button_reset_input+0x3e>
		}

//		Vin = 2.1;
		Vin = 2.5;
 8003e50:	4b37      	ldr	r3, [pc, #220]	@ (8003f30 <button_reset_input+0x13c>)
 8003e52:	4a3a      	ldr	r2, [pc, #232]	@ (8003f3c <button_reset_input+0x148>)
 8003e54:	601a      	str	r2, [r3, #0]
		DriveMotor();
 8003e56:	f7ff fdfb 	bl	8003a50 <DriveMotor>
		HAL_Delay(1000);
 8003e5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e5e:	f001 fb8b 	bl	8005578 <HAL_Delay>
		//SoftwareLimit();

		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 8003e62:	e006      	b.n	8003e72 <button_reset_input+0x7e>
			Modbus_Protocal_Worker();
 8003e64:	f7fd fa06 	bl	8001274 <Modbus_Protocal_Worker>
			//Vin = -1.4;
			Vin = -3;
 8003e68:	4b31      	ldr	r3, [pc, #196]	@ (8003f30 <button_reset_input+0x13c>)
 8003e6a:	4a35      	ldr	r2, [pc, #212]	@ (8003f40 <button_reset_input+0x14c>)
 8003e6c:	601a      	str	r2, [r3, #0]
			//software limit
			//SoftwareLimit();
			//Drive Motor which PWM
			DriveMotor();
 8003e6e:	f7ff fdef 	bl	8003a50 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 8003e72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e76:	4830      	ldr	r0, [pc, #192]	@ (8003f38 <button_reset_input+0x144>)
 8003e78:	f003 fcc8 	bl	800780c <HAL_GPIO_ReadPin>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0f0      	beq.n	8003e64 <button_reset_input+0x70>
		}
		Vin = 0;
 8003e82:	4b2b      	ldr	r3, [pc, #172]	@ (8003f30 <button_reset_input+0x13c>)
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
		HAL_Delay(500);
 8003e8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003e8e:	f001 fb73 	bl	8005578 <HAL_Delay>
		__HAL_TIM_SET_COUNTER(&htim2, 0); //set position to 0
 8003e92:	4b2c      	ldr	r3, [pc, #176]	@ (8003f44 <button_reset_input+0x150>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	625a      	str	r2, [r3, #36]	@ 0x24

		//Reset Parameters
		setPosition = 0;
 8003e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8003f48 <button_reset_input+0x154>)
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]
		S_top = 0;
 8003ea2:	4b21      	ldr	r3, [pc, #132]	@ (8003f28 <button_reset_input+0x134>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
		S_down = 1;
 8003ea8:	4b20      	ldr	r3, [pc, #128]	@ (8003f2c <button_reset_input+0x138>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
		emerStatus = 0;
 8003eae:	4b27      	ldr	r3, [pc, #156]	@ (8003f4c <button_reset_input+0x158>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
		check_up = 0;
 8003eb4:	4b26      	ldr	r3, [pc, #152]	@ (8003f50 <button_reset_input+0x15c>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
		check_down = 0;
 8003eba:	4b26      	ldr	r3, [pc, #152]	@ (8003f54 <button_reset_input+0x160>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	701a      	strb	r2, [r3, #0]
		Jog_state_triger = 0;
 8003ec0:	4b25      	ldr	r3, [pc, #148]	@ (8003f58 <button_reset_input+0x164>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
		set_jog_state = 0;
 8003ec6:	4b25      	ldr	r3, [pc, #148]	@ (8003f5c <button_reset_input+0x168>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
		set_point_state = 0;
 8003ecc:	4b24      	ldr	r3, [pc, #144]	@ (8003f60 <button_reset_input+0x16c>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
		point_state_triger = 0;
 8003ed2:	4b24      	ldr	r3, [pc, #144]	@ (8003f64 <button_reset_input+0x170>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]

		if(Home_state_triger == 0 && set_Home_state == 1){
 8003ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8003f18 <button_reset_input+0x124>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d109      	bne.n	8003ef4 <button_reset_input+0x100>
 8003ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8003f1c <button_reset_input+0x128>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d105      	bne.n	8003ef4 <button_reset_input+0x100>
			Home_state_triger = 1;
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f18 <button_reset_input+0x124>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
			B_reset = 0;
 8003eee:	4b0d      	ldr	r3, [pc, #52]	@ (8003f24 <button_reset_input+0x130>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
		}

		if(emergency_reset == 1){
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8003f20 <button_reset_input+0x12c>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d102      	bne.n	8003f02 <button_reset_input+0x10e>
			emergency_reset = 0;
 8003efc:	4b08      	ldr	r3, [pc, #32]	@ (8003f20 <button_reset_input+0x12c>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	701a      	strb	r2, [r3, #0]

		}
		LED_Ready();
 8003f02:	f000 feb9 	bl	8004c78 <LED_Ready>
 8003f06:	e003      	b.n	8003f10 <button_reset_input+0x11c>
	}
	else{
		B_reset = 0;
 8003f08:	4b06      	ldr	r3, [pc, #24]	@ (8003f24 <button_reset_input+0x130>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
	}
}
 8003f0e:	bf00      	nop
 8003f10:	bf00      	nop
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	48000c00 	.word	0x48000c00
 8003f18:	200012d4 	.word	0x200012d4
 8003f1c:	200012d0 	.word	0x200012d0
 8003f20:	20000bbc 	.word	0x20000bbc
 8003f24:	20000bba 	.word	0x20000bba
 8003f28:	20000c34 	.word	0x20000c34
 8003f2c:	20000c38 	.word	0x20000c38
 8003f30:	20000b68 	.word	0x20000b68
 8003f34:	c0a00000 	.word	0xc0a00000
 8003f38:	48000800 	.word	0x48000800
 8003f3c:	40200000 	.word	0x40200000
 8003f40:	c0400000 	.word	0xc0400000
 8003f44:	200003dc 	.word	0x200003dc
 8003f48:	20000c24 	.word	0x20000c24
 8003f4c:	20001490 	.word	0x20001490
 8003f50:	20000b58 	.word	0x20000b58
 8003f54:	20000b59 	.word	0x20000b59
 8003f58:	20001310 	.word	0x20001310
 8003f5c:	200012e0 	.word	0x200012e0
 8003f60:	200012cc 	.word	0x200012cc
 8003f64:	200012c8 	.word	0x200012c8

08003f68 <button_save_position>:

void button_save_position(){
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && B_save == 0 && fabs(QEIdata.linearPos-last_shelf_save) > 20){
 8003f6c:	2180      	movs	r1, #128	@ 0x80
 8003f6e:	481c      	ldr	r0, [pc, #112]	@ (8003fe0 <button_save_position+0x78>)
 8003f70:	f003 fc4c 	bl	800780c <HAL_GPIO_ReadPin>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d12b      	bne.n	8003fd2 <button_save_position+0x6a>
 8003f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe4 <button_save_position+0x7c>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d127      	bne.n	8003fd2 <button_save_position+0x6a>
 8003f82:	4b19      	ldr	r3, [pc, #100]	@ (8003fe8 <button_save_position+0x80>)
 8003f84:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003f88:	4b18      	ldr	r3, [pc, #96]	@ (8003fec <button_save_position+0x84>)
 8003f8a:	edd3 7a00 	vldr	s15, [r3]
 8003f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f92:	eef0 7ae7 	vabs.f32	s15, s15
 8003f96:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa2:	dd16      	ble.n	8003fd2 <button_save_position+0x6a>
		B_save = 1;
 8003fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe4 <button_save_position+0x7c>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	701a      	strb	r2, [r3, #0]
		count_save += 1;
 8003faa:	4b11      	ldr	r3, [pc, #68]	@ (8003ff0 <button_save_position+0x88>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff0 <button_save_position+0x88>)
 8003fb4:	701a      	strb	r2, [r3, #0]
		shelves_pos[count_save] = QEIdata.linearPos;
 8003fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff0 <button_save_position+0x88>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe8 <button_save_position+0x80>)
 8003fbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fc0:	490c      	ldr	r1, [pc, #48]	@ (8003ff4 <button_save_position+0x8c>)
 8003fc2:	0083      	lsls	r3, r0, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	601a      	str	r2, [r3, #0]
		last_shelf_save =  QEIdata.linearPos;
 8003fc8:	4b07      	ldr	r3, [pc, #28]	@ (8003fe8 <button_save_position+0x80>)
 8003fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fcc:	4a07      	ldr	r2, [pc, #28]	@ (8003fec <button_save_position+0x84>)
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	e003      	b.n	8003fda <button_save_position+0x72>
	}
	else{
		B_save = 0;
 8003fd2:	4b04      	ldr	r3, [pc, #16]	@ (8003fe4 <button_save_position+0x7c>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	701a      	strb	r2, [r3, #0]
	}
}
 8003fd8:	bf00      	nop
 8003fda:	bf00      	nop
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	48000400 	.word	0x48000400
 8003fe4:	20000bbb 	.word	0x20000bbb
 8003fe8:	20000b00 	.word	0x20000b00
 8003fec:	20000bd8 	.word	0x20000bd8
 8003ff0:	20000bbd 	.word	0x20000bbd
 8003ff4:	20000bc0 	.word	0x20000bc0

08003ff8 <Heartbeat>:

//-------------------------------------------------//
//-------------------------MODBUS FUNCTIONS--------------------------//
void Heartbeat(){
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16 = 22881;
 8003ffc:	4b04      	ldr	r3, [pc, #16]	@ (8004010 <Heartbeat+0x18>)
 8003ffe:	f645 1261 	movw	r2, #22881	@ 0x5961
 8004002:	801a      	strh	r2, [r3, #0]
}
 8004004:	bf00      	nop
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20001120 	.word	0x20001120

08004014 <Routine>:

void Routine(){
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0){
 8004018:	2110      	movs	r1, #16
 800401a:	4835      	ldr	r0, [pc, #212]	@ (80040f0 <Routine+0xdc>)
 800401c:	f003 fbf6 	bl	800780c <HAL_GPIO_ReadPin>
 8004020:	4603      	mov	r3, r0
 8004022:	2b01      	cmp	r3, #1
 8004024:	d10a      	bne.n	800403c <Routine+0x28>
 8004026:	2120      	movs	r1, #32
 8004028:	4831      	ldr	r0, [pc, #196]	@ (80040f0 <Routine+0xdc>)
 800402a:	f003 fbef 	bl	800780c <HAL_GPIO_ReadPin>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d103      	bne.n	800403c <Routine+0x28>
			gripper_status = 0;
 8004034:	4b2f      	ldr	r3, [pc, #188]	@ (80040f4 <Routine+0xe0>)
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e010      	b.n	800405e <Routine+0x4a>
		}
		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1){
 800403c:	2110      	movs	r1, #16
 800403e:	482c      	ldr	r0, [pc, #176]	@ (80040f0 <Routine+0xdc>)
 8004040:	f003 fbe4 	bl	800780c <HAL_GPIO_ReadPin>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d109      	bne.n	800405e <Routine+0x4a>
 800404a:	2120      	movs	r1, #32
 800404c:	4828      	ldr	r0, [pc, #160]	@ (80040f0 <Routine+0xdc>)
 800404e:	f003 fbdd 	bl	800780c <HAL_GPIO_ReadPin>
 8004052:	4603      	mov	r3, r0
 8004054:	2b01      	cmp	r3, #1
 8004056:	d102      	bne.n	800405e <Routine+0x4a>
			gripper_status = 1;
 8004058:	4b26      	ldr	r3, [pc, #152]	@ (80040f4 <Routine+0xe0>)
 800405a:	2201      	movs	r2, #1
 800405c:	601a      	str	r2, [r3, #0]
		}
		if (gripper_status == 0 ) // not suck  in
 800405e:	4b25      	ldr	r3, [pc, #148]	@ (80040f4 <Routine+0xe0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <Routine+0x60>
		{
			registerFrame[0x04].U16 = 0b0000;
 8004066:	4b24      	ldr	r3, [pc, #144]	@ (80040f8 <Routine+0xe4>)
 8004068:	2200      	movs	r2, #0
 800406a:	811a      	strh	r2, [r3, #8]
			registerFrame[0x04].U16 = 0b0001;
 800406c:	4b22      	ldr	r3, [pc, #136]	@ (80040f8 <Routine+0xe4>)
 800406e:	2201      	movs	r2, #1
 8004070:	811a      	strh	r2, [r3, #8]
 8004072:	e009      	b.n	8004088 <Routine+0x74>
		}
		else if (gripper_status == 1) // suck in
 8004074:	4b1f      	ldr	r3, [pc, #124]	@ (80040f4 <Routine+0xe0>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d105      	bne.n	8004088 <Routine+0x74>
		{
			registerFrame[0x04].U16 = 0b0000;
 800407c:	4b1e      	ldr	r3, [pc, #120]	@ (80040f8 <Routine+0xe4>)
 800407e:	2200      	movs	r2, #0
 8004080:	811a      	strh	r2, [r3, #8]
			registerFrame[0x04].U16 = 0b0010;
 8004082:	4b1d      	ldr	r3, [pc, #116]	@ (80040f8 <Routine+0xe4>)
 8004084:	2202      	movs	r2, #2
 8004086:	811a      	strh	r2, [r3, #8]
		}
		registerFrame[0x10].U16 = Moving_status;
 8004088:	4b1c      	ldr	r3, [pc, #112]	@ (80040fc <Routine+0xe8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	b29a      	uxth	r2, r3
 800408e:	4b1a      	ldr	r3, [pc, #104]	@ (80040f8 <Routine+0xe4>)
 8004090:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = QEIdata.linearPos*10;
 8004092:	4b1b      	ldr	r3, [pc, #108]	@ (8004100 <Routine+0xec>)
 8004094:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004098:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800409c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040a4:	ee17 3a90 	vmov	r3, s15
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	4b13      	ldr	r3, [pc, #76]	@ (80040f8 <Routine+0xe4>)
 80040ac:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[0x12].U16 = QEIdata.linearVel;
 80040ae:	4b14      	ldr	r3, [pc, #80]	@ (8004100 <Routine+0xec>)
 80040b0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80040b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040b8:	ee17 3a90 	vmov	r3, s15
 80040bc:	b29a      	uxth	r2, r3
 80040be:	4b0e      	ldr	r3, [pc, #56]	@ (80040f8 <Routine+0xe4>)
 80040c0:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[0x13].U16 = QEIdata.linearAcc;
 80040c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004100 <Routine+0xec>)
 80040c4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80040c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040cc:	ee17 3a90 	vmov	r3, s15
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	4b09      	ldr	r3, [pc, #36]	@ (80040f8 <Routine+0xe4>)
 80040d4:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[0x40].U16 = x_position;
 80040d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004104 <Routine+0xf0>)
 80040d8:	edd3 7a00 	vldr	s15, [r3]
 80040dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040e0:	ee17 3a90 	vmov	r3, s15
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	4b04      	ldr	r3, [pc, #16]	@ (80040f8 <Routine+0xe4>)
 80040e8:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
}
 80040ec:	bf00      	nop
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	48000400 	.word	0x48000400
 80040f4:	200012b4 	.word	0x200012b4
 80040f8:	20001120 	.word	0x20001120
 80040fc:	2000130c 	.word	0x2000130c
 8004100:	20000b00 	.word	0x20000b00
 8004104:	20000b4c 	.word	0x20000b4c

08004108 <check_vaccum_status>:

void check_vaccum_status()
{
 8004108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800410c:	b082      	sub	sp, #8
 800410e:	af00      	add	r7, sp, #0
	check_state = 1;
 8004110:	493d      	ldr	r1, [pc, #244]	@ (8004208 <check_vaccum_status+0x100>)
 8004112:	2001      	movs	r0, #1
 8004114:	6008      	str	r0, [r1, #0]
	if(registerFrame[0x02].U16 == 0b0000){ // not suck  in
 8004116:	493d      	ldr	r1, [pc, #244]	@ (800420c <check_vaccum_status+0x104>)
 8004118:	8889      	ldrh	r1, [r1, #4]
 800411a:	2900      	cmp	r1, #0
 800411c:	d130      	bne.n	8004180 <check_vaccum_status+0x78>

		vaccum_status = 0;
 800411e:	493c      	ldr	r1, [pc, #240]	@ (8004210 <check_vaccum_status+0x108>)
 8004120:	2000      	movs	r0, #0
 8004122:	6008      	str	r0, [r1, #0]
		if (prev_vac_savestate != vaccum_status)
 8004124:	493a      	ldr	r1, [pc, #232]	@ (8004210 <check_vaccum_status+0x108>)
 8004126:	6809      	ldr	r1, [r1, #0]
 8004128:	17c8      	asrs	r0, r1, #31
 800412a:	460a      	mov	r2, r1
 800412c:	4603      	mov	r3, r0
 800412e:	4939      	ldr	r1, [pc, #228]	@ (8004214 <check_vaccum_status+0x10c>)
 8004130:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004134:	428b      	cmp	r3, r1
 8004136:	bf08      	it	eq
 8004138:	4282      	cmpeq	r2, r0
 800413a:	d01a      	beq.n	8004172 <check_vaccum_status+0x6a>
			{
				trigger_savestate = 1;
 800413c:	4b36      	ldr	r3, [pc, #216]	@ (8004218 <check_vaccum_status+0x110>)
 800413e:	2201      	movs	r2, #1
 8004140:	701a      	strb	r2, [r3, #0]
				S_top_savestate = S_top;
 8004142:	4b36      	ldr	r3, [pc, #216]	@ (800421c <check_vaccum_status+0x114>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a36      	ldr	r2, [pc, #216]	@ (8004220 <check_vaccum_status+0x118>)
 8004148:	6013      	str	r3, [r2, #0]
				S_down_savestate = S_down;
 800414a:	4b36      	ldr	r3, [pc, #216]	@ (8004224 <check_vaccum_status+0x11c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a36      	ldr	r2, [pc, #216]	@ (8004228 <check_vaccum_status+0x120>)
 8004150:	6013      	str	r3, [r2, #0]
				mode_savestate = mode;
 8004152:	4b36      	ldr	r3, [pc, #216]	@ (800422c <check_vaccum_status+0x124>)
 8004154:	781a      	ldrb	r2, [r3, #0]
 8004156:	4b36      	ldr	r3, [pc, #216]	@ (8004230 <check_vaccum_status+0x128>)
 8004158:	701a      	strb	r2, [r3, #0]
				timestamp_savestate = micros() + 500000;
 800415a:	f7fe fd29 	bl	8002bb0 <micros>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4934      	ldr	r1, [pc, #208]	@ (8004234 <check_vaccum_status+0x12c>)
 8004164:	eb12 0a01 	adds.w	sl, r2, r1
 8004168:	f143 0b00 	adc.w	fp, r3, #0
 800416c:	4b32      	ldr	r3, [pc, #200]	@ (8004238 <check_vaccum_status+0x130>)
 800416e:	e9c3 ab00 	strd	sl, fp, [r3]
			}
//		HAL_Delay(50);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8004172:	2201      	movs	r2, #1
 8004174:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004178:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800417c:	f003 fb5e 	bl	800783c <HAL_GPIO_WritePin>
	}
	if(registerFrame[0x02].U16 == 0b0001){ //suck  in
 8004180:	4b22      	ldr	r3, [pc, #136]	@ (800420c <check_vaccum_status+0x104>)
 8004182:	889b      	ldrh	r3, [r3, #4]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d130      	bne.n	80041ea <check_vaccum_status+0xe2>
		vaccum_status = 1;
 8004188:	4b21      	ldr	r3, [pc, #132]	@ (8004210 <check_vaccum_status+0x108>)
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]
		if (prev_vac_savestate != vaccum_status)
 800418e:	4b20      	ldr	r3, [pc, #128]	@ (8004210 <check_vaccum_status+0x108>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	17da      	asrs	r2, r3, #31
 8004194:	461c      	mov	r4, r3
 8004196:	4615      	mov	r5, r2
 8004198:	4b1e      	ldr	r3, [pc, #120]	@ (8004214 <check_vaccum_status+0x10c>)
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	429d      	cmp	r5, r3
 80041a0:	bf08      	it	eq
 80041a2:	4294      	cmpeq	r4, r2
 80041a4:	d01a      	beq.n	80041dc <check_vaccum_status+0xd4>
			{
				trigger_savestate = 1;
 80041a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004218 <check_vaccum_status+0x110>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	701a      	strb	r2, [r3, #0]
				S_top_savestate = S_top;
 80041ac:	4b1b      	ldr	r3, [pc, #108]	@ (800421c <check_vaccum_status+0x114>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004220 <check_vaccum_status+0x118>)
 80041b2:	6013      	str	r3, [r2, #0]
				S_down_savestate = S_down;
 80041b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004224 <check_vaccum_status+0x11c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004228 <check_vaccum_status+0x120>)
 80041ba:	6013      	str	r3, [r2, #0]
				mode_savestate = mode;
 80041bc:	4b1b      	ldr	r3, [pc, #108]	@ (800422c <check_vaccum_status+0x124>)
 80041be:	781a      	ldrb	r2, [r3, #0]
 80041c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004230 <check_vaccum_status+0x128>)
 80041c2:	701a      	strb	r2, [r3, #0]
				timestamp_savestate = micros() + 500000;
 80041c4:	f7fe fcf4 	bl	8002bb0 <micros>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4919      	ldr	r1, [pc, #100]	@ (8004234 <check_vaccum_status+0x12c>)
 80041ce:	eb12 0801 	adds.w	r8, r2, r1
 80041d2:	f143 0900 	adc.w	r9, r3, #0
 80041d6:	4b18      	ldr	r3, [pc, #96]	@ (8004238 <check_vaccum_status+0x130>)
 80041d8:	e9c3 8900 	strd	r8, r9, [r3]
			}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80041dc:	2200      	movs	r2, #0
 80041de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80041e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041e6:	f003 fb29 	bl	800783c <HAL_GPIO_WritePin>
	}

	prev_vac_savestate = vaccum_status;
 80041ea:	4b09      	ldr	r3, [pc, #36]	@ (8004210 <check_vaccum_status+0x108>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	17da      	asrs	r2, r3, #31
 80041f0:	603b      	str	r3, [r7, #0]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	4b07      	ldr	r3, [pc, #28]	@ (8004214 <check_vaccum_status+0x10c>)
 80041f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80041fa:	e9c3 1200 	strd	r1, r2, [r3]
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004208:	200012b8 	.word	0x200012b8
 800420c:	20001120 	.word	0x20001120
 8004210:	200012b0 	.word	0x200012b0
 8004214:	20001328 	.word	0x20001328
 8004218:	20001338 	.word	0x20001338
 800421c:	20000c34 	.word	0x20000c34
 8004220:	20000c3c 	.word	0x20000c3c
 8004224:	20000c38 	.word	0x20000c38
 8004228:	20000c40 	.word	0x20000c40
 800422c:	20000200 	.word	0x20000200
 8004230:	20000201 	.word	0x20000201
 8004234:	0007a120 	.word	0x0007a120
 8004238:	20001320 	.word	0x20001320

0800423c <check_gripper_status>:

void check_gripper_status()
{
 800423c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
	check_state = 2;
 8004244:	4943      	ldr	r1, [pc, #268]	@ (8004354 <check_gripper_status+0x118>)
 8004246:	2002      	movs	r0, #2
 8004248:	6008      	str	r0, [r1, #0]

	if(registerFrame[0x03].U16 == 0b0000) //backward ,not on
 800424a:	4943      	ldr	r1, [pc, #268]	@ (8004358 <check_gripper_status+0x11c>)
 800424c:	88c9      	ldrh	r1, [r1, #6]
 800424e:	2900      	cmp	r1, #0
 8004250:	d136      	bne.n	80042c0 <check_gripper_status+0x84>
	//if(test_Gripper == 0)
	{

		gripper_status = 0;
 8004252:	4942      	ldr	r1, [pc, #264]	@ (800435c <check_gripper_status+0x120>)
 8004254:	2000      	movs	r0, #0
 8004256:	6008      	str	r0, [r1, #0]

		if (prev_grp_savestate != gripper_status)
 8004258:	4940      	ldr	r1, [pc, #256]	@ (800435c <check_gripper_status+0x120>)
 800425a:	6809      	ldr	r1, [r1, #0]
 800425c:	17c8      	asrs	r0, r1, #31
 800425e:	460a      	mov	r2, r1
 8004260:	4603      	mov	r3, r0
 8004262:	493f      	ldr	r1, [pc, #252]	@ (8004360 <check_gripper_status+0x124>)
 8004264:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004268:	428b      	cmp	r3, r1
 800426a:	bf08      	it	eq
 800426c:	4282      	cmpeq	r2, r0
 800426e:	d01a      	beq.n	80042a6 <check_gripper_status+0x6a>
			{
					trigger_savestate = 1;
 8004270:	4b3c      	ldr	r3, [pc, #240]	@ (8004364 <check_gripper_status+0x128>)
 8004272:	2201      	movs	r2, #1
 8004274:	701a      	strb	r2, [r3, #0]
					S_top_savestate = S_top;
 8004276:	4b3c      	ldr	r3, [pc, #240]	@ (8004368 <check_gripper_status+0x12c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a3c      	ldr	r2, [pc, #240]	@ (800436c <check_gripper_status+0x130>)
 800427c:	6013      	str	r3, [r2, #0]
					S_down_savestate = S_down;
 800427e:	4b3c      	ldr	r3, [pc, #240]	@ (8004370 <check_gripper_status+0x134>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a3c      	ldr	r2, [pc, #240]	@ (8004374 <check_gripper_status+0x138>)
 8004284:	6013      	str	r3, [r2, #0]
					mode_savestate = mode;
 8004286:	4b3c      	ldr	r3, [pc, #240]	@ (8004378 <check_gripper_status+0x13c>)
 8004288:	781a      	ldrb	r2, [r3, #0]
 800428a:	4b3c      	ldr	r3, [pc, #240]	@ (800437c <check_gripper_status+0x140>)
 800428c:	701a      	strb	r2, [r3, #0]
					timestamp_savestate = micros() + 500000;
 800428e:	f7fe fc8f 	bl	8002bb0 <micros>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	493a      	ldr	r1, [pc, #232]	@ (8004380 <check_gripper_status+0x144>)
 8004298:	eb12 0a01 	adds.w	sl, r2, r1
 800429c:	f143 0b00 	adc.w	fp, r3, #0
 80042a0:	4b38      	ldr	r3, [pc, #224]	@ (8004384 <check_gripper_status+0x148>)
 80042a2:	e9c3 ab00 	strd	sl, fp, [r3]
			}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80042a6:	2200      	movs	r2, #0
 80042a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042b0:	f003 fac4 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 80042b4:	2201      	movs	r2, #1
 80042b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042ba:	4833      	ldr	r0, [pc, #204]	@ (8004388 <check_gripper_status+0x14c>)
 80042bc:	f003 fabe 	bl	800783c <HAL_GPIO_WritePin>
	}
	if(registerFrame[0x03].U16 == 0b0001) //Forward
 80042c0:	4b25      	ldr	r3, [pc, #148]	@ (8004358 <check_gripper_status+0x11c>)
 80042c2:	88db      	ldrh	r3, [r3, #6]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d136      	bne.n	8004336 <check_gripper_status+0xfa>
	//if(test_Gripper == 1)
	{
		gripper_status = 1;
 80042c8:	4b24      	ldr	r3, [pc, #144]	@ (800435c <check_gripper_status+0x120>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

		if (prev_grp_savestate != gripper_status)
 80042ce:	4b23      	ldr	r3, [pc, #140]	@ (800435c <check_gripper_status+0x120>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	17da      	asrs	r2, r3, #31
 80042d4:	461c      	mov	r4, r3
 80042d6:	4615      	mov	r5, r2
 80042d8:	4b21      	ldr	r3, [pc, #132]	@ (8004360 <check_gripper_status+0x124>)
 80042da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042de:	429d      	cmp	r5, r3
 80042e0:	bf08      	it	eq
 80042e2:	4294      	cmpeq	r4, r2
 80042e4:	d01a      	beq.n	800431c <check_gripper_status+0xe0>
			{
					trigger_savestate = 1;
 80042e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004364 <check_gripper_status+0x128>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	701a      	strb	r2, [r3, #0]
					S_top_savestate = S_top;
 80042ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004368 <check_gripper_status+0x12c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1e      	ldr	r2, [pc, #120]	@ (800436c <check_gripper_status+0x130>)
 80042f2:	6013      	str	r3, [r2, #0]
					S_down_savestate = S_down;
 80042f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004370 <check_gripper_status+0x134>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004374 <check_gripper_status+0x138>)
 80042fa:	6013      	str	r3, [r2, #0]
					mode_savestate = mode;
 80042fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004378 <check_gripper_status+0x13c>)
 80042fe:	781a      	ldrb	r2, [r3, #0]
 8004300:	4b1e      	ldr	r3, [pc, #120]	@ (800437c <check_gripper_status+0x140>)
 8004302:	701a      	strb	r2, [r3, #0]
					timestamp_savestate = micros() + 500000;
 8004304:	f7fe fc54 	bl	8002bb0 <micros>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	491c      	ldr	r1, [pc, #112]	@ (8004380 <check_gripper_status+0x144>)
 800430e:	eb12 0801 	adds.w	r8, r2, r1
 8004312:	f143 0900 	adc.w	r9, r3, #0
 8004316:	4b1b      	ldr	r3, [pc, #108]	@ (8004384 <check_gripper_status+0x148>)
 8004318:	e9c3 8900 	strd	r8, r9, [r3]
			}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800431c:	2201      	movs	r2, #1
 800431e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004322:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004326:	f003 fa89 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 800432a:	2200      	movs	r2, #0
 800432c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004330:	4815      	ldr	r0, [pc, #84]	@ (8004388 <check_gripper_status+0x14c>)
 8004332:	f003 fa83 	bl	800783c <HAL_GPIO_WritePin>
	}

	prev_grp_savestate = gripper_status;
 8004336:	4b09      	ldr	r3, [pc, #36]	@ (800435c <check_gripper_status+0x120>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	17da      	asrs	r2, r3, #31
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	4b07      	ldr	r3, [pc, #28]	@ (8004360 <check_gripper_status+0x124>)
 8004342:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004346:	e9c3 1200 	strd	r1, r2, [r3]
}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004354:	200012b8 	.word	0x200012b8
 8004358:	20001120 	.word	0x20001120
 800435c:	200012b4 	.word	0x200012b4
 8004360:	20001330 	.word	0x20001330
 8004364:	20001338 	.word	0x20001338
 8004368:	20000c34 	.word	0x20000c34
 800436c:	20000c3c 	.word	0x20000c3c
 8004370:	20000c38 	.word	0x20000c38
 8004374:	20000c40 	.word	0x20000c40
 8004378:	20000200 	.word	0x20000200
 800437c:	20000201 	.word	0x20000201
 8004380:	0007a120 	.word	0x0007a120
 8004384:	20001320 	.word	0x20001320
 8004388:	48000800 	.word	0x48000800

0800438c <set_shelf>:

void set_shelf()
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
	check_state = 3;
 8004390:	4b4b      	ldr	r3, [pc, #300]	@ (80044c0 <set_shelf+0x134>)
 8004392:	2203      	movs	r2, #3
 8004394:	601a      	str	r2, [r3, #0]
	if(registerFrame[0x01].U16 ==  0b0001)
 8004396:	4b4b      	ldr	r3, [pc, #300]	@ (80044c4 <set_shelf+0x138>)
 8004398:	885b      	ldrh	r3, [r3, #2]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d104      	bne.n	80043a8 <set_shelf+0x1c>
	{
		set_shelf_state = 1;
 800439e:	4b4a      	ldr	r3, [pc, #296]	@ (80044c8 <set_shelf+0x13c>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	601a      	str	r2, [r3, #0]
		LED_Manual();
 80043a4:	f000 fcb0 	bl	8004d08 <LED_Manual>
	}
	if (set_shelf_state == 1 && Enter_click == 0)
 80043a8:	4b47      	ldr	r3, [pc, #284]	@ (80044c8 <set_shelf+0x13c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d11e      	bne.n	80043ee <set_shelf+0x62>
 80043b0:	4b46      	ldr	r3, [pc, #280]	@ (80044cc <set_shelf+0x140>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d11a      	bne.n	80043ee <set_shelf+0x62>
	{
			registerFrame[0x01].U16 = 0b0000;
 80043b8:	4b42      	ldr	r3, [pc, #264]	@ (80044c4 <set_shelf+0x138>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	805a      	strh	r2, [r3, #2]
			Moving_status = 1;
 80043be:	4b44      	ldr	r3, [pc, #272]	@ (80044d0 <set_shelf+0x144>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]
			registerFrame[0x10].U16 = Moving_status; // set shelve
 80043c4:	4b42      	ldr	r3, [pc, #264]	@ (80044d0 <set_shelf+0x144>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	4b3e      	ldr	r3, [pc, #248]	@ (80044c4 <set_shelf+0x138>)
 80043cc:	841a      	strh	r2, [r3, #32]
			mode = 2; //manual
 80043ce:	4b41      	ldr	r3, [pc, #260]	@ (80044d4 <set_shelf+0x148>)
 80043d0:	2202      	movs	r2, #2
 80043d2:	701a      	strb	r2, [r3, #0]
			if(count_save == 5){
 80043d4:	4b40      	ldr	r3, [pc, #256]	@ (80044d8 <set_shelf+0x14c>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b05      	cmp	r3, #5
 80043da:	d108      	bne.n	80043ee <set_shelf+0x62>
				Enter_click = 1;
 80043dc:	4b3b      	ldr	r3, [pc, #236]	@ (80044cc <set_shelf+0x140>)
 80043de:	2201      	movs	r2, #1
 80043e0:	601a      	str	r2, [r3, #0]
				count_save = 0;
 80043e2:	4b3d      	ldr	r3, [pc, #244]	@ (80044d8 <set_shelf+0x14c>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	701a      	strb	r2, [r3, #0]
				mode = 3;
 80043e8:	4b3a      	ldr	r3, [pc, #232]	@ (80044d4 <set_shelf+0x148>)
 80043ea:	2203      	movs	r2, #3
 80043ec:	701a      	strb	r2, [r3, #0]
			}
	}
	if (set_shelf_state == 1 && Enter_click == 1)
 80043ee:	4b36      	ldr	r3, [pc, #216]	@ (80044c8 <set_shelf+0x13c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d161      	bne.n	80044ba <set_shelf+0x12e>
 80043f6:	4b35      	ldr	r3, [pc, #212]	@ (80044cc <set_shelf+0x140>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d15d      	bne.n	80044ba <set_shelf+0x12e>
	{
		registerFrame[0x01].U16 = 0b0000;
 80043fe:	4b31      	ldr	r3, [pc, #196]	@ (80044c4 <set_shelf+0x138>)
 8004400:	2200      	movs	r2, #0
 8004402:	805a      	strh	r2, [r3, #2]
		registerFrame[0x23].U16 = shelves_pos[1]*10;
 8004404:	4b35      	ldr	r3, [pc, #212]	@ (80044dc <set_shelf+0x150>)
 8004406:	edd3 7a01 	vldr	s15, [r3, #4]
 800440a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800440e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004416:	ee17 3a90 	vmov	r3, s15
 800441a:	b29a      	uxth	r2, r3
 800441c:	4b29      	ldr	r3, [pc, #164]	@ (80044c4 <set_shelf+0x138>)
 800441e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		registerFrame[0x24].U16 = shelves_pos[2]*10;
 8004422:	4b2e      	ldr	r3, [pc, #184]	@ (80044dc <set_shelf+0x150>)
 8004424:	edd3 7a02 	vldr	s15, [r3, #8]
 8004428:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800442c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004434:	ee17 3a90 	vmov	r3, s15
 8004438:	b29a      	uxth	r2, r3
 800443a:	4b22      	ldr	r3, [pc, #136]	@ (80044c4 <set_shelf+0x138>)
 800443c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		registerFrame[0x25].U16 = shelves_pos[3]*10;
 8004440:	4b26      	ldr	r3, [pc, #152]	@ (80044dc <set_shelf+0x150>)
 8004442:	edd3 7a03 	vldr	s15, [r3, #12]
 8004446:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800444a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800444e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004452:	ee17 3a90 	vmov	r3, s15
 8004456:	b29a      	uxth	r2, r3
 8004458:	4b1a      	ldr	r3, [pc, #104]	@ (80044c4 <set_shelf+0x138>)
 800445a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		registerFrame[0x26].U16 = shelves_pos[4]*10;
 800445e:	4b1f      	ldr	r3, [pc, #124]	@ (80044dc <set_shelf+0x150>)
 8004460:	edd3 7a04 	vldr	s15, [r3, #16]
 8004464:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800446c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004470:	ee17 3a90 	vmov	r3, s15
 8004474:	b29a      	uxth	r2, r3
 8004476:	4b13      	ldr	r3, [pc, #76]	@ (80044c4 <set_shelf+0x138>)
 8004478:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		registerFrame[0x27].U16 = shelves_pos[5]*10;
 800447c:	4b17      	ldr	r3, [pc, #92]	@ (80044dc <set_shelf+0x150>)
 800447e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004482:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800448a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800448e:	ee17 3a90 	vmov	r3, s15
 8004492:	b29a      	uxth	r2, r3
 8004494:	4b0b      	ldr	r3, [pc, #44]	@ (80044c4 <set_shelf+0x138>)
 8004496:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
		Moving_status = 0;
 800449a:	4b0d      	ldr	r3, [pc, #52]	@ (80044d0 <set_shelf+0x144>)
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
		registerFrame[0x10].U16 = Moving_status;
 80044a0:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <set_shelf+0x144>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	4b07      	ldr	r3, [pc, #28]	@ (80044c4 <set_shelf+0x138>)
 80044a8:	841a      	strh	r2, [r3, #32]
		set_shelf_state = 0;
 80044aa:	4b07      	ldr	r3, [pc, #28]	@ (80044c8 <set_shelf+0x13c>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
		Enter_click = 0;
 80044b0:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <set_shelf+0x140>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
		LED_Ready();
 80044b6:	f000 fbdf 	bl	8004c78 <LED_Ready>
	}

}
 80044ba:	bf00      	nop
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	200012b8 	.word	0x200012b8
 80044c4:	20001120 	.word	0x20001120
 80044c8:	200012c0 	.word	0x200012c0
 80044cc:	200012bc 	.word	0x200012bc
 80044d0:	2000130c 	.word	0x2000130c
 80044d4:	20000200 	.word	0x20000200
 80044d8:	20000bbd 	.word	0x20000bbd
 80044dc:	20000bc0 	.word	0x20000bc0

080044e0 <Pointmode>:

void Pointmode()
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 ==  0b1000) // Run Point Mode
 80044e4:	4b3a      	ldr	r3, [pc, #232]	@ (80045d0 <Pointmode+0xf0>)
 80044e6:	885b      	ldrh	r3, [r3, #2]
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d116      	bne.n	800451a <Pointmode+0x3a>
		{
			 set_point_state = 1;
 80044ec:	4b39      	ldr	r3, [pc, #228]	@ (80045d4 <Pointmode+0xf4>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
			 set_point_modbus = (registerFrame[0x30].U16) / 10;
 80044f2:	4b37      	ldr	r3, [pc, #220]	@ (80045d0 <Pointmode+0xf0>)
 80044f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80044f8:	4a37      	ldr	r2, [pc, #220]	@ (80045d8 <Pointmode+0xf8>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	08db      	lsrs	r3, r3, #3
 8004500:	b29b      	uxth	r3, r3
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800450a:	4b34      	ldr	r3, [pc, #208]	@ (80045dc <Pointmode+0xfc>)
 800450c:	edc3 7a00 	vstr	s15, [r3]
			 registerFrame[0x01].U16 = 0b0000;
 8004510:	4b2f      	ldr	r3, [pc, #188]	@ (80045d0 <Pointmode+0xf0>)
 8004512:	2200      	movs	r2, #0
 8004514:	805a      	strh	r2, [r3, #2]
			 LED_Auto();
 8004516:	f000 fbd3 	bl	8004cc0 <LED_Auto>
//			 Modbus_Protocal_Worker();
		}

	if (point_state_triger == 0 && set_point_state == 1)
 800451a:	4b31      	ldr	r3, [pc, #196]	@ (80045e0 <Pointmode+0x100>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d130      	bne.n	8004584 <Pointmode+0xa4>
 8004522:	4b2c      	ldr	r3, [pc, #176]	@ (80045d4 <Pointmode+0xf4>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d12c      	bne.n	8004584 <Pointmode+0xa4>
		{
				Moving_status = 16;
 800452a:	4b2e      	ldr	r3, [pc, #184]	@ (80045e4 <Pointmode+0x104>)
 800452c:	2210      	movs	r2, #16
 800452e:	601a      	str	r2, [r3, #0]
				registerFrame[0x10].U16 = Moving_status;
 8004530:	4b2c      	ldr	r3, [pc, #176]	@ (80045e4 <Pointmode+0x104>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	b29a      	uxth	r2, r3
 8004536:	4b26      	ldr	r3, [pc, #152]	@ (80045d0 <Pointmode+0xf0>)
 8004538:	841a      	strh	r2, [r3, #32]
				mode = 1;
 800453a:	4b2b      	ldr	r3, [pc, #172]	@ (80045e8 <Pointmode+0x108>)
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]
				setPosition = set_point_modbus;
 8004540:	4b26      	ldr	r3, [pc, #152]	@ (80045dc <Pointmode+0xfc>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a29      	ldr	r2, [pc, #164]	@ (80045ec <Pointmode+0x10c>)
 8004546:	6013      	str	r3, [r2, #0]
				if(fabs(setPosition-QEIdata.linearPos) <= 0.09){
 8004548:	4b28      	ldr	r3, [pc, #160]	@ (80045ec <Pointmode+0x10c>)
 800454a:	ed93 7a00 	vldr	s14, [r3]
 800454e:	4b28      	ldr	r3, [pc, #160]	@ (80045f0 <Pointmode+0x110>)
 8004550:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004558:	eef0 7ae7 	vabs.f32	s15, s15
 800455c:	ee17 0a90 	vmov	r0, s15
 8004560:	f7fb ffbe 	bl	80004e0 <__aeabi_f2d>
 8004564:	a318      	add	r3, pc, #96	@ (adr r3, 80045c8 <Pointmode+0xe8>)
 8004566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456a:	f7fc fa8d 	bl	8000a88 <__aeabi_dcmple>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <Pointmode+0xa0>
					mode = 3;
 8004574:	4b1c      	ldr	r3, [pc, #112]	@ (80045e8 <Pointmode+0x108>)
 8004576:	2203      	movs	r2, #3
 8004578:	701a      	strb	r2, [r3, #0]
					point_state_triger = 1;
 800457a:	4b19      	ldr	r3, [pc, #100]	@ (80045e0 <Pointmode+0x100>)
 800457c:	2201      	movs	r2, #1
 800457e:	601a      	str	r2, [r3, #0]
				}
				Modbus_Protocal_Worker();
 8004580:	f7fc fe78 	bl	8001274 <Modbus_Protocal_Worker>
		}
	if (point_state_triger == 1 && set_point_state == 1)
 8004584:	4b16      	ldr	r3, [pc, #88]	@ (80045e0 <Pointmode+0x100>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d118      	bne.n	80045be <Pointmode+0xde>
 800458c:	4b11      	ldr	r3, [pc, #68]	@ (80045d4 <Pointmode+0xf4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d114      	bne.n	80045be <Pointmode+0xde>
		{
			mode = 3;
 8004594:	4b14      	ldr	r3, [pc, #80]	@ (80045e8 <Pointmode+0x108>)
 8004596:	2203      	movs	r2, #3
 8004598:	701a      	strb	r2, [r3, #0]
			Moving_status = 0;
 800459a:	4b12      	ldr	r3, [pc, #72]	@ (80045e4 <Pointmode+0x104>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
			registerFrame[0x10].U16 = Moving_status;
 80045a0:	4b10      	ldr	r3, [pc, #64]	@ (80045e4 <Pointmode+0x104>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	4b0a      	ldr	r3, [pc, #40]	@ (80045d0 <Pointmode+0xf0>)
 80045a8:	841a      	strh	r2, [r3, #32]
			set_point_state = 0;
 80045aa:	4b0a      	ldr	r3, [pc, #40]	@ (80045d4 <Pointmode+0xf4>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
			point_state_triger = 0;
 80045b0:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <Pointmode+0x100>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
//			set_point_modbus = 0;
			Modbus_Protocal_Worker();
 80045b6:	f7fc fe5d 	bl	8001274 <Modbus_Protocal_Worker>
			LED_Ready();
 80045ba:	f000 fb5d 	bl	8004c78 <LED_Ready>
//
		}
}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	f3af 8000 	nop.w
 80045c8:	70a3d70a 	.word	0x70a3d70a
 80045cc:	3fb70a3d 	.word	0x3fb70a3d
 80045d0:	20001120 	.word	0x20001120
 80045d4:	200012cc 	.word	0x200012cc
 80045d8:	cccccccd 	.word	0xcccccccd
 80045dc:	200012c4 	.word	0x200012c4
 80045e0:	200012c8 	.word	0x200012c8
 80045e4:	2000130c 	.word	0x2000130c
 80045e8:	20000200 	.word	0x20000200
 80045ec:	20000c24 	.word	0x20000c24
 80045f0:	20000b00 	.word	0x20000b00

080045f4 <Home>:
void Home()
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 ==  0b0010) // Run Home Mode
 80045f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004670 <Home+0x7c>)
 80045fa:	885b      	ldrh	r3, [r3, #2]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d107      	bne.n	8004610 <Home+0x1c>
	{
		set_Home_state = 1;
 8004600:	4b1c      	ldr	r3, [pc, #112]	@ (8004674 <Home+0x80>)
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]
		registerFrame[0x01].U16 = 0b0000;
 8004606:	4b1a      	ldr	r3, [pc, #104]	@ (8004670 <Home+0x7c>)
 8004608:	2200      	movs	r2, #0
 800460a:	805a      	strh	r2, [r3, #2]
		LED_Homing();
 800460c:	f000 fb10 	bl	8004c30 <LED_Homing>
//		Modbus_Protocal_Worker();
	}
	if(Home_state_triger == 0 && set_Home_state == 1)
 8004610:	4b19      	ldr	r3, [pc, #100]	@ (8004678 <Home+0x84>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10e      	bne.n	8004636 <Home+0x42>
 8004618:	4b16      	ldr	r3, [pc, #88]	@ (8004674 <Home+0x80>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d10a      	bne.n	8004636 <Home+0x42>
	{
		Moving_status = 2;
 8004620:	4b16      	ldr	r3, [pc, #88]	@ (800467c <Home+0x88>)
 8004622:	2202      	movs	r2, #2
 8004624:	601a      	str	r2, [r3, #0]
		registerFrame[0x10].U16 = Moving_status;
 8004626:	4b15      	ldr	r3, [pc, #84]	@ (800467c <Home+0x88>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	b29a      	uxth	r2, r3
 800462c:	4b10      	ldr	r3, [pc, #64]	@ (8004670 <Home+0x7c>)
 800462e:	841a      	strh	r2, [r3, #32]
		//set home
		mode = 2;
 8004630:	4b13      	ldr	r3, [pc, #76]	@ (8004680 <Home+0x8c>)
 8004632:	2202      	movs	r2, #2
 8004634:	701a      	strb	r2, [r3, #0]
//		Modbus_Protocal_Worker();
	}
	if(Home_state_triger == 1 && set_Home_state == 1)
 8004636:	4b10      	ldr	r3, [pc, #64]	@ (8004678 <Home+0x84>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d116      	bne.n	800466c <Home+0x78>
 800463e:	4b0d      	ldr	r3, [pc, #52]	@ (8004674 <Home+0x80>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d112      	bne.n	800466c <Home+0x78>
	{
		mode = 3;
 8004646:	4b0e      	ldr	r3, [pc, #56]	@ (8004680 <Home+0x8c>)
 8004648:	2203      	movs	r2, #3
 800464a:	701a      	strb	r2, [r3, #0]
		Moving_status = 0;
 800464c:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <Home+0x88>)
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
		registerFrame[0x10].U16 = Moving_status;
 8004652:	4b0a      	ldr	r3, [pc, #40]	@ (800467c <Home+0x88>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	b29a      	uxth	r2, r3
 8004658:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <Home+0x7c>)
 800465a:	841a      	strh	r2, [r3, #32]
		set_Home_state = 0;
 800465c:	4b05      	ldr	r3, [pc, #20]	@ (8004674 <Home+0x80>)
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
		Home_state_triger = 0;
 8004662:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <Home+0x84>)
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
//		Modbus_Protocal_Worker();
		LED_Ready();
 8004668:	f000 fb06 	bl	8004c78 <LED_Ready>
	}
}
 800466c:	bf00      	nop
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20001120 	.word	0x20001120
 8004674:	200012d0 	.word	0x200012d0
 8004678:	200012d4 	.word	0x200012d4
 800467c:	2000130c 	.word	0x2000130c
 8004680:	20000200 	.word	0x20000200
 8004684:	00000000 	.word	0x00000000

08004688 <Run_jog>:
void Run_jog()
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 ==  0b0100) // Run Jog Mode
 800468c:	4bc0      	ldr	r3, [pc, #768]	@ (8004990 <Run_jog+0x308>)
 800468e:	885b      	ldrh	r3, [r3, #2]
 8004690:	2b04      	cmp	r3, #4
 8004692:	f040 8139 	bne.w	8004908 <Run_jog+0x280>
	{
		set_jog_state = 1;
 8004696:	4bbf      	ldr	r3, [pc, #764]	@ (8004994 <Run_jog+0x30c>)
 8004698:	2201      	movs	r2, #1
 800469a:	601a      	str	r2, [r3, #0]
		Jog_state_triger = 0;
 800469c:	4bbe      	ldr	r3, [pc, #760]	@ (8004998 <Run_jog+0x310>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
		Jog_oneloop_trigger = 0;
 80046a2:	4bbe      	ldr	r3, [pc, #760]	@ (800499c <Run_jog+0x314>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]
		Jog_order = 0;
 80046a8:	4bbd      	ldr	r3, [pc, #756]	@ (80049a0 <Run_jog+0x318>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]

		PickOrder = registerFrame[0x21].U16;
 80046ae:	4bb8      	ldr	r3, [pc, #736]	@ (8004990 <Run_jog+0x308>)
 80046b0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80046b4:	461a      	mov	r2, r3
 80046b6:	4bbb      	ldr	r3, [pc, #748]	@ (80049a4 <Run_jog+0x31c>)
 80046b8:	601a      	str	r2, [r3, #0]
		PlaceOrder = registerFrame[0x22].U16;
 80046ba:	4bb5      	ldr	r3, [pc, #724]	@ (8004990 <Run_jog+0x308>)
 80046bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80046c0:	461a      	mov	r2, r3
 80046c2:	4bb9      	ldr	r3, [pc, #740]	@ (80049a8 <Run_jog+0x320>)
 80046c4:	601a      	str	r2, [r3, #0]

		PickArray[0] = (PickOrder - (PickOrder % 10000)) / 10000;
 80046c6:	4bb7      	ldr	r3, [pc, #732]	@ (80049a4 <Run_jog+0x31c>)
 80046c8:	6819      	ldr	r1, [r3, #0]
 80046ca:	4bb6      	ldr	r3, [pc, #728]	@ (80049a4 <Run_jog+0x31c>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	4bb7      	ldr	r3, [pc, #732]	@ (80049ac <Run_jog+0x324>)
 80046d0:	fb83 0302 	smull	r0, r3, r3, r2
 80046d4:	1318      	asrs	r0, r3, #12
 80046d6:	17d3      	asrs	r3, r2, #31
 80046d8:	1ac3      	subs	r3, r0, r3
 80046da:	f242 7010 	movw	r0, #10000	@ 0x2710
 80046de:	fb00 f303 	mul.w	r3, r0, r3
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	1acb      	subs	r3, r1, r3
 80046e6:	4ab1      	ldr	r2, [pc, #708]	@ (80049ac <Run_jog+0x324>)
 80046e8:	fb82 1203 	smull	r1, r2, r2, r3
 80046ec:	1312      	asrs	r2, r2, #12
 80046ee:	17db      	asrs	r3, r3, #31
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	4aaf      	ldr	r2, [pc, #700]	@ (80049b0 <Run_jog+0x328>)
 80046f4:	6013      	str	r3, [r2, #0]
		PickArray[1] = ((PickOrder % 10000) - (PickOrder % 1000)) / 1000;
 80046f6:	4bab      	ldr	r3, [pc, #684]	@ (80049a4 <Run_jog+0x31c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4aac      	ldr	r2, [pc, #688]	@ (80049ac <Run_jog+0x324>)
 80046fc:	fb82 1203 	smull	r1, r2, r2, r3
 8004700:	1311      	asrs	r1, r2, #12
 8004702:	17da      	asrs	r2, r3, #31
 8004704:	1a8a      	subs	r2, r1, r2
 8004706:	f242 7110 	movw	r1, #10000	@ 0x2710
 800470a:	fb01 f202 	mul.w	r2, r1, r2
 800470e:	1a9a      	subs	r2, r3, r2
 8004710:	4ba4      	ldr	r3, [pc, #656]	@ (80049a4 <Run_jog+0x31c>)
 8004712:	6819      	ldr	r1, [r3, #0]
 8004714:	4ba7      	ldr	r3, [pc, #668]	@ (80049b4 <Run_jog+0x32c>)
 8004716:	fb83 0301 	smull	r0, r3, r3, r1
 800471a:	1198      	asrs	r0, r3, #6
 800471c:	17cb      	asrs	r3, r1, #31
 800471e:	1ac3      	subs	r3, r0, r3
 8004720:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004724:	fb00 f303 	mul.w	r3, r0, r3
 8004728:	1acb      	subs	r3, r1, r3
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	4aa1      	ldr	r2, [pc, #644]	@ (80049b4 <Run_jog+0x32c>)
 800472e:	fb82 1203 	smull	r1, r2, r2, r3
 8004732:	1192      	asrs	r2, r2, #6
 8004734:	17db      	asrs	r3, r3, #31
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	4a9d      	ldr	r2, [pc, #628]	@ (80049b0 <Run_jog+0x328>)
 800473a:	6053      	str	r3, [r2, #4]
		PickArray[2] = ((PickOrder % 1000) - (PickOrder % 100)) / 100;
 800473c:	4b99      	ldr	r3, [pc, #612]	@ (80049a4 <Run_jog+0x31c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a9c      	ldr	r2, [pc, #624]	@ (80049b4 <Run_jog+0x32c>)
 8004742:	fb82 1203 	smull	r1, r2, r2, r3
 8004746:	1191      	asrs	r1, r2, #6
 8004748:	17da      	asrs	r2, r3, #31
 800474a:	1a8a      	subs	r2, r1, r2
 800474c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004750:	fb01 f202 	mul.w	r2, r1, r2
 8004754:	1a9a      	subs	r2, r3, r2
 8004756:	4b93      	ldr	r3, [pc, #588]	@ (80049a4 <Run_jog+0x31c>)
 8004758:	6819      	ldr	r1, [r3, #0]
 800475a:	4b97      	ldr	r3, [pc, #604]	@ (80049b8 <Run_jog+0x330>)
 800475c:	fb83 0301 	smull	r0, r3, r3, r1
 8004760:	1158      	asrs	r0, r3, #5
 8004762:	17cb      	asrs	r3, r1, #31
 8004764:	1ac3      	subs	r3, r0, r3
 8004766:	2064      	movs	r0, #100	@ 0x64
 8004768:	fb00 f303 	mul.w	r3, r0, r3
 800476c:	1acb      	subs	r3, r1, r3
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	4a91      	ldr	r2, [pc, #580]	@ (80049b8 <Run_jog+0x330>)
 8004772:	fb82 1203 	smull	r1, r2, r2, r3
 8004776:	1152      	asrs	r2, r2, #5
 8004778:	17db      	asrs	r3, r3, #31
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	4a8c      	ldr	r2, [pc, #560]	@ (80049b0 <Run_jog+0x328>)
 800477e:	6093      	str	r3, [r2, #8]
		PickArray[3] = ((PickOrder % 100) - (PickOrder % 10)) / 10;
 8004780:	4b88      	ldr	r3, [pc, #544]	@ (80049a4 <Run_jog+0x31c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a8c      	ldr	r2, [pc, #560]	@ (80049b8 <Run_jog+0x330>)
 8004786:	fb82 1203 	smull	r1, r2, r2, r3
 800478a:	1151      	asrs	r1, r2, #5
 800478c:	17da      	asrs	r2, r3, #31
 800478e:	1a89      	subs	r1, r1, r2
 8004790:	2264      	movs	r2, #100	@ 0x64
 8004792:	fb01 f202 	mul.w	r2, r1, r2
 8004796:	1a99      	subs	r1, r3, r2
 8004798:	4b82      	ldr	r3, [pc, #520]	@ (80049a4 <Run_jog+0x31c>)
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	4b87      	ldr	r3, [pc, #540]	@ (80049bc <Run_jog+0x334>)
 800479e:	fb83 2300 	smull	r2, r3, r3, r0
 80047a2:	109a      	asrs	r2, r3, #2
 80047a4:	17c3      	asrs	r3, r0, #31
 80047a6:	1ad2      	subs	r2, r2, r3
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	1ac2      	subs	r2, r0, r3
 80047b2:	1a8b      	subs	r3, r1, r2
 80047b4:	4a81      	ldr	r2, [pc, #516]	@ (80049bc <Run_jog+0x334>)
 80047b6:	fb82 1203 	smull	r1, r2, r2, r3
 80047ba:	1092      	asrs	r2, r2, #2
 80047bc:	17db      	asrs	r3, r3, #31
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	4a7b      	ldr	r2, [pc, #492]	@ (80049b0 <Run_jog+0x328>)
 80047c2:	60d3      	str	r3, [r2, #12]
		PickArray[4] = PickOrder % 10;
 80047c4:	4b77      	ldr	r3, [pc, #476]	@ (80049a4 <Run_jog+0x31c>)
 80047c6:	6819      	ldr	r1, [r3, #0]
 80047c8:	4b7c      	ldr	r3, [pc, #496]	@ (80049bc <Run_jog+0x334>)
 80047ca:	fb83 2301 	smull	r2, r3, r3, r1
 80047ce:	109a      	asrs	r2, r3, #2
 80047d0:	17cb      	asrs	r3, r1, #31
 80047d2:	1ad2      	subs	r2, r2, r3
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	1aca      	subs	r2, r1, r3
 80047de:	4b74      	ldr	r3, [pc, #464]	@ (80049b0 <Run_jog+0x328>)
 80047e0:	611a      	str	r2, [r3, #16]

		PlaceArray[0] = (PlaceOrder - (PlaceOrder % 10000)) / 10000;
 80047e2:	4b71      	ldr	r3, [pc, #452]	@ (80049a8 <Run_jog+0x320>)
 80047e4:	6819      	ldr	r1, [r3, #0]
 80047e6:	4b70      	ldr	r3, [pc, #448]	@ (80049a8 <Run_jog+0x320>)
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4b70      	ldr	r3, [pc, #448]	@ (80049ac <Run_jog+0x324>)
 80047ec:	fb83 0302 	smull	r0, r3, r3, r2
 80047f0:	1318      	asrs	r0, r3, #12
 80047f2:	17d3      	asrs	r3, r2, #31
 80047f4:	1ac3      	subs	r3, r0, r3
 80047f6:	f242 7010 	movw	r0, #10000	@ 0x2710
 80047fa:	fb00 f303 	mul.w	r3, r0, r3
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	1acb      	subs	r3, r1, r3
 8004802:	4a6a      	ldr	r2, [pc, #424]	@ (80049ac <Run_jog+0x324>)
 8004804:	fb82 1203 	smull	r1, r2, r2, r3
 8004808:	1312      	asrs	r2, r2, #12
 800480a:	17db      	asrs	r3, r3, #31
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	4a6c      	ldr	r2, [pc, #432]	@ (80049c0 <Run_jog+0x338>)
 8004810:	6013      	str	r3, [r2, #0]
		PlaceArray[1] = ((PlaceOrder % 10000) - (PlaceOrder % 1000)) / 1000;
 8004812:	4b65      	ldr	r3, [pc, #404]	@ (80049a8 <Run_jog+0x320>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a65      	ldr	r2, [pc, #404]	@ (80049ac <Run_jog+0x324>)
 8004818:	fb82 1203 	smull	r1, r2, r2, r3
 800481c:	1311      	asrs	r1, r2, #12
 800481e:	17da      	asrs	r2, r3, #31
 8004820:	1a8a      	subs	r2, r1, r2
 8004822:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004826:	fb01 f202 	mul.w	r2, r1, r2
 800482a:	1a9a      	subs	r2, r3, r2
 800482c:	4b5e      	ldr	r3, [pc, #376]	@ (80049a8 <Run_jog+0x320>)
 800482e:	6819      	ldr	r1, [r3, #0]
 8004830:	4b60      	ldr	r3, [pc, #384]	@ (80049b4 <Run_jog+0x32c>)
 8004832:	fb83 0301 	smull	r0, r3, r3, r1
 8004836:	1198      	asrs	r0, r3, #6
 8004838:	17cb      	asrs	r3, r1, #31
 800483a:	1ac3      	subs	r3, r0, r3
 800483c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004840:	fb00 f303 	mul.w	r3, r0, r3
 8004844:	1acb      	subs	r3, r1, r3
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	4a5a      	ldr	r2, [pc, #360]	@ (80049b4 <Run_jog+0x32c>)
 800484a:	fb82 1203 	smull	r1, r2, r2, r3
 800484e:	1192      	asrs	r2, r2, #6
 8004850:	17db      	asrs	r3, r3, #31
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	4a5a      	ldr	r2, [pc, #360]	@ (80049c0 <Run_jog+0x338>)
 8004856:	6053      	str	r3, [r2, #4]
		PlaceArray[2] = ((PlaceOrder % 1000) - (PlaceOrder % 100)) / 100;
 8004858:	4b53      	ldr	r3, [pc, #332]	@ (80049a8 <Run_jog+0x320>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a55      	ldr	r2, [pc, #340]	@ (80049b4 <Run_jog+0x32c>)
 800485e:	fb82 1203 	smull	r1, r2, r2, r3
 8004862:	1191      	asrs	r1, r2, #6
 8004864:	17da      	asrs	r2, r3, #31
 8004866:	1a8a      	subs	r2, r1, r2
 8004868:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800486c:	fb01 f202 	mul.w	r2, r1, r2
 8004870:	1a9a      	subs	r2, r3, r2
 8004872:	4b4d      	ldr	r3, [pc, #308]	@ (80049a8 <Run_jog+0x320>)
 8004874:	6819      	ldr	r1, [r3, #0]
 8004876:	4b50      	ldr	r3, [pc, #320]	@ (80049b8 <Run_jog+0x330>)
 8004878:	fb83 0301 	smull	r0, r3, r3, r1
 800487c:	1158      	asrs	r0, r3, #5
 800487e:	17cb      	asrs	r3, r1, #31
 8004880:	1ac3      	subs	r3, r0, r3
 8004882:	2064      	movs	r0, #100	@ 0x64
 8004884:	fb00 f303 	mul.w	r3, r0, r3
 8004888:	1acb      	subs	r3, r1, r3
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	4a4a      	ldr	r2, [pc, #296]	@ (80049b8 <Run_jog+0x330>)
 800488e:	fb82 1203 	smull	r1, r2, r2, r3
 8004892:	1152      	asrs	r2, r2, #5
 8004894:	17db      	asrs	r3, r3, #31
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	4a49      	ldr	r2, [pc, #292]	@ (80049c0 <Run_jog+0x338>)
 800489a:	6093      	str	r3, [r2, #8]
		PlaceArray[3] = ((PlaceOrder % 100) - (PlaceOrder % 10)) / 10;
 800489c:	4b42      	ldr	r3, [pc, #264]	@ (80049a8 <Run_jog+0x320>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a45      	ldr	r2, [pc, #276]	@ (80049b8 <Run_jog+0x330>)
 80048a2:	fb82 1203 	smull	r1, r2, r2, r3
 80048a6:	1151      	asrs	r1, r2, #5
 80048a8:	17da      	asrs	r2, r3, #31
 80048aa:	1a89      	subs	r1, r1, r2
 80048ac:	2264      	movs	r2, #100	@ 0x64
 80048ae:	fb01 f202 	mul.w	r2, r1, r2
 80048b2:	1a99      	subs	r1, r3, r2
 80048b4:	4b3c      	ldr	r3, [pc, #240]	@ (80049a8 <Run_jog+0x320>)
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	4b40      	ldr	r3, [pc, #256]	@ (80049bc <Run_jog+0x334>)
 80048ba:	fb83 2300 	smull	r2, r3, r3, r0
 80048be:	109a      	asrs	r2, r3, #2
 80048c0:	17c3      	asrs	r3, r0, #31
 80048c2:	1ad2      	subs	r2, r2, r3
 80048c4:	4613      	mov	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	1ac2      	subs	r2, r0, r3
 80048ce:	1a8b      	subs	r3, r1, r2
 80048d0:	4a3a      	ldr	r2, [pc, #232]	@ (80049bc <Run_jog+0x334>)
 80048d2:	fb82 1203 	smull	r1, r2, r2, r3
 80048d6:	1092      	asrs	r2, r2, #2
 80048d8:	17db      	asrs	r3, r3, #31
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	4a38      	ldr	r2, [pc, #224]	@ (80049c0 <Run_jog+0x338>)
 80048de:	60d3      	str	r3, [r2, #12]
		PlaceArray[4] = PlaceOrder % 10;
 80048e0:	4b31      	ldr	r3, [pc, #196]	@ (80049a8 <Run_jog+0x320>)
 80048e2:	6819      	ldr	r1, [r3, #0]
 80048e4:	4b35      	ldr	r3, [pc, #212]	@ (80049bc <Run_jog+0x334>)
 80048e6:	fb83 2301 	smull	r2, r3, r3, r1
 80048ea:	109a      	asrs	r2, r3, #2
 80048ec:	17cb      	asrs	r3, r1, #31
 80048ee:	1ad2      	subs	r2, r2, r3
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	1aca      	subs	r2, r1, r3
 80048fa:	4b31      	ldr	r3, [pc, #196]	@ (80049c0 <Run_jog+0x338>)
 80048fc:	611a      	str	r2, [r3, #16]

		registerFrame[0x01].U16 = 0b0000;
 80048fe:	4b24      	ldr	r3, [pc, #144]	@ (8004990 <Run_jog+0x308>)
 8004900:	2200      	movs	r2, #0
 8004902:	805a      	strh	r2, [r3, #2]
		LED_Auto();
 8004904:	f000 f9dc 	bl	8004cc0 <LED_Auto>

	}
	if (Jog_state_triger == 0 && set_jog_state == 1){
 8004908:	4b23      	ldr	r3, [pc, #140]	@ (8004998 <Run_jog+0x310>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	f040 8130 	bne.w	8004b72 <Run_jog+0x4ea>
 8004912:	4b20      	ldr	r3, [pc, #128]	@ (8004994 <Run_jog+0x30c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b01      	cmp	r3, #1
 8004918:	f040 812b 	bne.w	8004b72 <Run_jog+0x4ea>

		// run 5 loop of pick and place

		if(Jog_oneloop_trigger == 0){ //Go pick
 800491c:	4b1f      	ldr	r3, [pc, #124]	@ (800499c <Run_jog+0x314>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	f040 809f 	bne.w	8004a64 <Run_jog+0x3dc>
			Moving_status = 4; //Go pick
 8004926:	4b27      	ldr	r3, [pc, #156]	@ (80049c4 <Run_jog+0x33c>)
 8004928:	2204      	movs	r2, #4
 800492a:	601a      	str	r2, [r3, #0]
			registerFrame[0x10].U16 =  Moving_status;
 800492c:	4b25      	ldr	r3, [pc, #148]	@ (80049c4 <Run_jog+0x33c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	b29a      	uxth	r2, r3
 8004932:	4b17      	ldr	r3, [pc, #92]	@ (8004990 <Run_jog+0x308>)
 8004934:	841a      	strh	r2, [r3, #32]

			mode = 1;
 8004936:	4b24      	ldr	r3, [pc, #144]	@ (80049c8 <Run_jog+0x340>)
 8004938:	2201      	movs	r2, #1
 800493a:	701a      	strb	r2, [r3, #0]
			setPosition = shelves_pos[PickArray[Jog_order]]-10; //Update set point
 800493c:	4b18      	ldr	r3, [pc, #96]	@ (80049a0 <Run_jog+0x318>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1b      	ldr	r2, [pc, #108]	@ (80049b0 <Run_jog+0x328>)
 8004942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004946:	4a21      	ldr	r2, [pc, #132]	@ (80049cc <Run_jog+0x344>)
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	edd3 7a00 	vldr	s15, [r3]
 8004950:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004954:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004958:	4b1d      	ldr	r3, [pc, #116]	@ (80049d0 <Run_jog+0x348>)
 800495a:	edc3 7a00 	vstr	s15, [r3]

			if(fabs(setPosition-QEIdata.linearPos) < 0.09){
 800495e:	4b1c      	ldr	r3, [pc, #112]	@ (80049d0 <Run_jog+0x348>)
 8004960:	ed93 7a00 	vldr	s14, [r3]
 8004964:	4b1b      	ldr	r3, [pc, #108]	@ (80049d4 <Run_jog+0x34c>)
 8004966:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800496a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800496e:	eef0 7ae7 	vabs.f32	s15, s15
 8004972:	ee17 0a90 	vmov	r0, s15
 8004976:	f7fb fdb3 	bl	80004e0 <__aeabi_f2d>
 800497a:	a303      	add	r3, pc, #12	@ (adr r3, 8004988 <Run_jog+0x300>)
 800497c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004980:	e02a      	b.n	80049d8 <Run_jog+0x350>
 8004982:	bf00      	nop
 8004984:	f3af 8000 	nop.w
 8004988:	70a3d70a 	.word	0x70a3d70a
 800498c:	3fb70a3d 	.word	0x3fb70a3d
 8004990:	20001120 	.word	0x20001120
 8004994:	200012e0 	.word	0x200012e0
 8004998:	20001310 	.word	0x20001310
 800499c:	20001318 	.word	0x20001318
 80049a0:	20001314 	.word	0x20001314
 80049a4:	200012d8 	.word	0x200012d8
 80049a8:	200012dc 	.word	0x200012dc
 80049ac:	68db8bad 	.word	0x68db8bad
 80049b0:	200012e4 	.word	0x200012e4
 80049b4:	10624dd3 	.word	0x10624dd3
 80049b8:	51eb851f 	.word	0x51eb851f
 80049bc:	66666667 	.word	0x66666667
 80049c0:	200012f8 	.word	0x200012f8
 80049c4:	2000130c 	.word	0x2000130c
 80049c8:	20000200 	.word	0x20000200
 80049cc:	20000bc0 	.word	0x20000bc0
 80049d0:	20000c24 	.word	0x20000c24
 80049d4:	20000b00 	.word	0x20000b00
 80049d8:	f7fc f84c 	bl	8000a74 <__aeabi_dcmplt>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 80ba 	beq.w	8004b58 <Run_jog+0x4d0>
					mode = 3;
 80049e4:	4b72      	ldr	r3, [pc, #456]	@ (8004bb0 <Run_jog+0x528>)
 80049e6:	2203      	movs	r2, #3
 80049e8:	701a      	strb	r2, [r3, #0]
					Vin = 0;
 80049ea:	4b72      	ldr	r3, [pc, #456]	@ (8004bb4 <Run_jog+0x52c>)
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80049f2:	4b71      	ldr	r3, [pc, #452]	@ (8004bb8 <Run_jog+0x530>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2200      	movs	r2, #0
 80049f8:	635a      	str	r2, [r3, #52]	@ 0x34

					//pick
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80049fa:	2200      	movs	r2, #0
 80049fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a04:	f002 ff1a 	bl	800783c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a0e:	486b      	ldr	r0, [pc, #428]	@ (8004bbc <Run_jog+0x534>)
 8004a10:	f002 ff14 	bl	800783c <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 8004a14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004a18:	f000 fdae 	bl	8005578 <HAL_Delay>

					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a26:	f002 ff09 	bl	800783c <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 8004a2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004a2e:	f000 fda3 	bl	8005578 <HAL_Delay>

					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8004a32:	2201      	movs	r2, #1
 8004a34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a3c:	f002 fefe 	bl	800783c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 8004a40:	2200      	movs	r2, #0
 8004a42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a46:	485d      	ldr	r0, [pc, #372]	@ (8004bbc <Run_jog+0x534>)
 8004a48:	f002 fef8 	bl	800783c <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 8004a4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004a50:	f000 fd92 	bl	8005578 <HAL_Delay>

					Jog_oneloop_trigger = 1;
 8004a54:	4b5a      	ldr	r3, [pc, #360]	@ (8004bc0 <Run_jog+0x538>)
 8004a56:	2201      	movs	r2, #1
 8004a58:	601a      	str	r2, [r3, #0]
					setPosition = QEIdata.linearPos;
 8004a5a:	4b5a      	ldr	r3, [pc, #360]	@ (8004bc4 <Run_jog+0x53c>)
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5e:	4a5a      	ldr	r2, [pc, #360]	@ (8004bc8 <Run_jog+0x540>)
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	e079      	b.n	8004b58 <Run_jog+0x4d0>
			}
		}
		else if(Jog_oneloop_trigger == 1){ //Go place
 8004a64:	4b56      	ldr	r3, [pc, #344]	@ (8004bc0 <Run_jog+0x538>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d175      	bne.n	8004b58 <Run_jog+0x4d0>
			Moving_status = 8; //Go place
 8004a6c:	4b57      	ldr	r3, [pc, #348]	@ (8004bcc <Run_jog+0x544>)
 8004a6e:	2208      	movs	r2, #8
 8004a70:	601a      	str	r2, [r3, #0]
			registerFrame[0x10].U16 =  Moving_status;
 8004a72:	4b56      	ldr	r3, [pc, #344]	@ (8004bcc <Run_jog+0x544>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	4b55      	ldr	r3, [pc, #340]	@ (8004bd0 <Run_jog+0x548>)
 8004a7a:	841a      	strh	r2, [r3, #32]

			mode = 1;
 8004a7c:	4b4c      	ldr	r3, [pc, #304]	@ (8004bb0 <Run_jog+0x528>)
 8004a7e:	2201      	movs	r2, #1
 8004a80:	701a      	strb	r2, [r3, #0]
			setPosition = shelves_pos[PlaceArray[Jog_order]]+10; //Update set point
 8004a82:	4b54      	ldr	r3, [pc, #336]	@ (8004bd4 <Run_jog+0x54c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a54      	ldr	r2, [pc, #336]	@ (8004bd8 <Run_jog+0x550>)
 8004a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a8c:	4a53      	ldr	r2, [pc, #332]	@ (8004bdc <Run_jog+0x554>)
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	edd3 7a00 	vldr	s15, [r3]
 8004a96:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004a9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8004bc8 <Run_jog+0x540>)
 8004aa0:	edc3 7a00 	vstr	s15, [r3]

			if(fabs(setPosition-QEIdata.linearPos) < 0.09){
 8004aa4:	4b48      	ldr	r3, [pc, #288]	@ (8004bc8 <Run_jog+0x540>)
 8004aa6:	ed93 7a00 	vldr	s14, [r3]
 8004aaa:	4b46      	ldr	r3, [pc, #280]	@ (8004bc4 <Run_jog+0x53c>)
 8004aac:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ab4:	eef0 7ae7 	vabs.f32	s15, s15
 8004ab8:	ee17 0a90 	vmov	r0, s15
 8004abc:	f7fb fd10 	bl	80004e0 <__aeabi_f2d>
 8004ac0:	a339      	add	r3, pc, #228	@ (adr r3, 8004ba8 <Run_jog+0x520>)
 8004ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac6:	f7fb ffd5 	bl	8000a74 <__aeabi_dcmplt>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d043      	beq.n	8004b58 <Run_jog+0x4d0>
					mode = 3;
 8004ad0:	4b37      	ldr	r3, [pc, #220]	@ (8004bb0 <Run_jog+0x528>)
 8004ad2:	2203      	movs	r2, #3
 8004ad4:	701a      	strb	r2, [r3, #0]
					Vin = 0;
 8004ad6:	4b37      	ldr	r3, [pc, #220]	@ (8004bb4 <Run_jog+0x52c>)
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8004ade:	4b36      	ldr	r3, [pc, #216]	@ (8004bb8 <Run_jog+0x530>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	635a      	str	r2, [r3, #52]	@ 0x34

					//place
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004aec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004af0:	f002 fea4 	bl	800783c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8004af4:	2201      	movs	r2, #1
 8004af6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004afa:	4830      	ldr	r0, [pc, #192]	@ (8004bbc <Run_jog+0x534>)
 8004afc:	f002 fe9e 	bl	800783c <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 8004b00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004b04:	f000 fd38 	bl	8005578 <HAL_Delay>

					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004b0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b12:	f002 fe93 	bl	800783c <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 8004b16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004b1a:	f000 fd2d 	bl	8005578 <HAL_Delay>

					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004b24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b28:	f002 fe88 	bl	800783c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004b32:	4822      	ldr	r0, [pc, #136]	@ (8004bbc <Run_jog+0x534>)
 8004b34:	f002 fe82 	bl	800783c <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 8004b38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004b3c:	f000 fd1c 	bl	8005578 <HAL_Delay>

					Jog_order += 1;
 8004b40:	4b24      	ldr	r3, [pc, #144]	@ (8004bd4 <Run_jog+0x54c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3301      	adds	r3, #1
 8004b46:	4a23      	ldr	r2, [pc, #140]	@ (8004bd4 <Run_jog+0x54c>)
 8004b48:	6013      	str	r3, [r2, #0]
					Jog_oneloop_trigger = 0;
 8004b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc0 <Run_jog+0x538>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
					setPosition = QEIdata.linearPos;
 8004b50:	4b1c      	ldr	r3, [pc, #112]	@ (8004bc4 <Run_jog+0x53c>)
 8004b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b54:	4a1c      	ldr	r2, [pc, #112]	@ (8004bc8 <Run_jog+0x540>)
 8004b56:	6013      	str	r3, [r2, #0]
			}
		}

		if(Jog_order == 5){
 8004b58:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd4 <Run_jog+0x54c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b05      	cmp	r3, #5
 8004b5e:	d108      	bne.n	8004b72 <Run_jog+0x4ea>
			mode = 3;
 8004b60:	4b13      	ldr	r3, [pc, #76]	@ (8004bb0 <Run_jog+0x528>)
 8004b62:	2203      	movs	r2, #3
 8004b64:	701a      	strb	r2, [r3, #0]
			Jog_state_triger = 1;
 8004b66:	4b1e      	ldr	r3, [pc, #120]	@ (8004be0 <Run_jog+0x558>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
			Jog_order = 0;
 8004b6c:	4b19      	ldr	r3, [pc, #100]	@ (8004bd4 <Run_jog+0x54c>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
		}
	}

	if (Jog_state_triger == 1 && set_jog_state == 1)
 8004b72:	4b1b      	ldr	r3, [pc, #108]	@ (8004be0 <Run_jog+0x558>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d113      	bne.n	8004ba2 <Run_jog+0x51a>
 8004b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004be4 <Run_jog+0x55c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d10f      	bne.n	8004ba2 <Run_jog+0x51a>
	{
		Moving_status = 0;
 8004b82:	4b12      	ldr	r3, [pc, #72]	@ (8004bcc <Run_jog+0x544>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]
		registerFrame[0x10].U16 =  Moving_status;
 8004b88:	4b10      	ldr	r3, [pc, #64]	@ (8004bcc <Run_jog+0x544>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	4b10      	ldr	r3, [pc, #64]	@ (8004bd0 <Run_jog+0x548>)
 8004b90:	841a      	strh	r2, [r3, #32]
		Jog_state_triger = 0;
 8004b92:	4b13      	ldr	r3, [pc, #76]	@ (8004be0 <Run_jog+0x558>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
		set_jog_state = 0;
 8004b98:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <Run_jog+0x55c>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
		LED_Ready();
 8004b9e:	f000 f86b 	bl	8004c78 <LED_Ready>
	}
}
 8004ba2:	bf00      	nop
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	70a3d70a 	.word	0x70a3d70a
 8004bac:	3fb70a3d 	.word	0x3fb70a3d
 8004bb0:	20000200 	.word	0x20000200
 8004bb4:	20000b68 	.word	0x20000b68
 8004bb8:	200004a8 	.word	0x200004a8
 8004bbc:	48000800 	.word	0x48000800
 8004bc0:	20001318 	.word	0x20001318
 8004bc4:	20000b00 	.word	0x20000b00
 8004bc8:	20000c24 	.word	0x20000c24
 8004bcc:	2000130c 	.word	0x2000130c
 8004bd0:	20001120 	.word	0x20001120
 8004bd4:	20001314 	.word	0x20001314
 8004bd8:	200012f8 	.word	0x200012f8
 8004bdc:	20000bc0 	.word	0x20000bc0
 8004be0:	20001310 	.word	0x20001310
 8004be4:	200012e0 	.word	0x200012e0

08004be8 <LED_Emergency>:
//-----------------------------------------------------------//

//-----------------------LED STATUS--------------------------//

void LED_Emergency(){
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8004bec:	2200      	movs	r2, #0
 8004bee:	2104      	movs	r1, #4
 8004bf0:	480d      	ldr	r0, [pc, #52]	@ (8004c28 <LED_Emergency+0x40>)
 8004bf2:	f002 fe23 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	2180      	movs	r1, #128	@ 0x80
 8004bfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004bfe:	f002 fe1d 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8004c02:	2201      	movs	r2, #1
 8004c04:	2140      	movs	r1, #64	@ 0x40
 8004c06:	4809      	ldr	r0, [pc, #36]	@ (8004c2c <LED_Emergency+0x44>)
 8004c08:	f002 fe18 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	2180      	movs	r1, #128	@ 0x80
 8004c10:	4805      	ldr	r0, [pc, #20]	@ (8004c28 <LED_Emergency+0x40>)
 8004c12:	f002 fe13 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8004c16:	2201      	movs	r2, #1
 8004c18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c20:	f002 fe0c 	bl	800783c <HAL_GPIO_WritePin>
}
 8004c24:	bf00      	nop
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	48000800 	.word	0x48000800
 8004c2c:	48000400 	.word	0x48000400

08004c30 <LED_Homing>:

void LED_Homing(){
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8004c34:	2201      	movs	r2, #1
 8004c36:	2104      	movs	r1, #4
 8004c38:	480d      	ldr	r0, [pc, #52]	@ (8004c70 <LED_Homing+0x40>)
 8004c3a:	f002 fdff 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8004c3e:	2201      	movs	r2, #1
 8004c40:	2180      	movs	r1, #128	@ 0x80
 8004c42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c46:	f002 fdf9 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	2140      	movs	r1, #64	@ 0x40
 8004c4e:	4809      	ldr	r0, [pc, #36]	@ (8004c74 <LED_Homing+0x44>)
 8004c50:	f002 fdf4 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8004c54:	2200      	movs	r2, #0
 8004c56:	2180      	movs	r1, #128	@ 0x80
 8004c58:	4805      	ldr	r0, [pc, #20]	@ (8004c70 <LED_Homing+0x40>)
 8004c5a:	f002 fdef 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c68:	f002 fde8 	bl	800783c <HAL_GPIO_WritePin>
}
 8004c6c:	bf00      	nop
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	48000800 	.word	0x48000800
 8004c74:	48000400 	.word	0x48000400

08004c78 <LED_Ready>:

void LED_Ready(){
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	2104      	movs	r1, #4
 8004c80:	480d      	ldr	r0, [pc, #52]	@ (8004cb8 <LED_Ready+0x40>)
 8004c82:	f002 fddb 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8004c86:	2201      	movs	r2, #1
 8004c88:	2180      	movs	r1, #128	@ 0x80
 8004c8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c8e:	f002 fdd5 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8004c92:	2201      	movs	r2, #1
 8004c94:	2140      	movs	r1, #64	@ 0x40
 8004c96:	4809      	ldr	r0, [pc, #36]	@ (8004cbc <LED_Ready+0x44>)
 8004c98:	f002 fdd0 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	2180      	movs	r1, #128	@ 0x80
 8004ca0:	4805      	ldr	r0, [pc, #20]	@ (8004cb8 <LED_Ready+0x40>)
 8004ca2:	f002 fdcb 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004cac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004cb0:	f002 fdc4 	bl	800783c <HAL_GPIO_WritePin>
}
 8004cb4:	bf00      	nop
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	48000800 	.word	0x48000800
 8004cbc:	48000400 	.word	0x48000400

08004cc0 <LED_Auto>:

void LED_Auto(){
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	2104      	movs	r1, #4
 8004cc8:	480d      	ldr	r0, [pc, #52]	@ (8004d00 <LED_Auto+0x40>)
 8004cca:	f002 fdb7 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8004cce:	2201      	movs	r2, #1
 8004cd0:	2180      	movs	r1, #128	@ 0x80
 8004cd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004cd6:	f002 fdb1 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2140      	movs	r1, #64	@ 0x40
 8004cde:	4809      	ldr	r0, [pc, #36]	@ (8004d04 <LED_Auto+0x44>)
 8004ce0:	f002 fdac 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	2180      	movs	r1, #128	@ 0x80
 8004ce8:	4805      	ldr	r0, [pc, #20]	@ (8004d00 <LED_Auto+0x40>)
 8004cea:	f002 fda7 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004cf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004cf8:	f002 fda0 	bl	800783c <HAL_GPIO_WritePin>

}
 8004cfc:	bf00      	nop
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	48000800 	.word	0x48000800
 8004d04:	48000400 	.word	0x48000400

08004d08 <LED_Manual>:

void LED_Manual(){
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	2104      	movs	r1, #4
 8004d10:	480d      	ldr	r0, [pc, #52]	@ (8004d48 <LED_Manual+0x40>)
 8004d12:	f002 fd93 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8004d16:	2200      	movs	r2, #0
 8004d18:	2180      	movs	r1, #128	@ 0x80
 8004d1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d1e:	f002 fd8d 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8004d22:	2201      	movs	r2, #1
 8004d24:	2140      	movs	r1, #64	@ 0x40
 8004d26:	4809      	ldr	r0, [pc, #36]	@ (8004d4c <LED_Manual+0x44>)
 8004d28:	f002 fd88 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	2180      	movs	r1, #128	@ 0x80
 8004d30:	4805      	ldr	r0, [pc, #20]	@ (8004d48 <LED_Manual+0x40>)
 8004d32:	f002 fd83 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8004d36:	2201      	movs	r2, #1
 8004d38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004d3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d40:	f002 fd7c 	bl	800783c <HAL_GPIO_WritePin>
}
 8004d44:	bf00      	nop
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	48000800 	.word	0x48000800
 8004d4c:	48000400 	.word	0x48000400

08004d50 <checkEmer>:

void checkEmer(){
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
	//Check Emergency Status
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 1){
 8004d54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004d58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d5c:	f002 fd56 	bl	800780c <HAL_GPIO_ReadPin>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d120      	bne.n	8004da8 <checkEmer+0x58>
		emerStatus = 1;
 8004d66:	4b14      	ldr	r3, [pc, #80]	@ (8004db8 <checkEmer+0x68>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	701a      	strb	r2, [r3, #0]
		mode = 4;
 8004d6c:	4b13      	ldr	r3, [pc, #76]	@ (8004dbc <checkEmer+0x6c>)
 8004d6e:	2204      	movs	r2, #4
 8004d70:	701a      	strb	r2, [r3, #0]
		Vin = 0;
 8004d72:	4b13      	ldr	r3, [pc, #76]	@ (8004dc0 <checkEmer+0x70>)
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8004d7a:	4b12      	ldr	r3, [pc, #72]	@ (8004dc4 <checkEmer+0x74>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	635a      	str	r2, [r3, #52]	@ 0x34
		LED_Emergency();
 8004d82:	f7ff ff31 	bl	8004be8 <LED_Emergency>
	}
	while(emerStatus == 1){
 8004d86:	e00f      	b.n	8004da8 <checkEmer+0x58>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1){
 8004d88:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004d8c:	480e      	ldr	r0, [pc, #56]	@ (8004dc8 <checkEmer+0x78>)
 8004d8e:	f002 fd3d 	bl	800780c <HAL_GPIO_ReadPin>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d107      	bne.n	8004da8 <checkEmer+0x58>
			 emergency_reset = 1;
 8004d98:	4b0c      	ldr	r3, [pc, #48]	@ (8004dcc <checkEmer+0x7c>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	701a      	strb	r2, [r3, #0]
			 button_reset_input();
 8004d9e:	f7ff f829 	bl	8003df4 <button_reset_input>
			 emerStatus = 0;
 8004da2:	4b05      	ldr	r3, [pc, #20]	@ (8004db8 <checkEmer+0x68>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]
	while(emerStatus == 1){
 8004da8:	4b03      	ldr	r3, [pc, #12]	@ (8004db8 <checkEmer+0x68>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d0eb      	beq.n	8004d88 <checkEmer+0x38>
		}
	}
}
 8004db0:	bf00      	nop
 8004db2:	bf00      	nop
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20001490 	.word	0x20001490
 8004dbc:	20000200 	.word	0x20000200
 8004dc0:	20000b68 	.word	0x20000b68
 8004dc4:	200004a8 	.word	0x200004a8
 8004dc8:	48000800 	.word	0x48000800
 8004dcc:	20000bbc 	.word	0x20000bbc

08004dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004dd4:	b672      	cpsid	i
}
 8004dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004dd8:	bf00      	nop
 8004dda:	e7fd      	b.n	8004dd8 <Error_Handler+0x8>

08004ddc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004de2:	4b0f      	ldr	r3, [pc, #60]	@ (8004e20 <HAL_MspInit+0x44>)
 8004de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004de6:	4a0e      	ldr	r2, [pc, #56]	@ (8004e20 <HAL_MspInit+0x44>)
 8004de8:	f043 0301 	orr.w	r3, r3, #1
 8004dec:	6613      	str	r3, [r2, #96]	@ 0x60
 8004dee:	4b0c      	ldr	r3, [pc, #48]	@ (8004e20 <HAL_MspInit+0x44>)
 8004df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	607b      	str	r3, [r7, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dfa:	4b09      	ldr	r3, [pc, #36]	@ (8004e20 <HAL_MspInit+0x44>)
 8004dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dfe:	4a08      	ldr	r2, [pc, #32]	@ (8004e20 <HAL_MspInit+0x44>)
 8004e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e04:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e06:	4b06      	ldr	r3, [pc, #24]	@ (8004e20 <HAL_MspInit+0x44>)
 8004e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004e12:	f002 fde7 	bl	80079e4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40021000 	.word	0x40021000

08004e24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b0a0      	sub	sp, #128	@ 0x80
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e2c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	605a      	str	r2, [r3, #4]
 8004e36:	609a      	str	r2, [r3, #8]
 8004e38:	60da      	str	r2, [r3, #12]
 8004e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e3c:	f107 0318 	add.w	r3, r7, #24
 8004e40:	2254      	movs	r2, #84	@ 0x54
 8004e42:	2100      	movs	r1, #0
 8004e44:	4618      	mov	r0, r3
 8004e46:	f008 f9a1 	bl	800d18c <memset>
  if(hadc->Instance==ADC1)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e52:	d178      	bne.n	8004f46 <HAL_ADC_MspInit+0x122>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004e54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e58:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004e5a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004e5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e60:	f107 0318 	add.w	r3, r7, #24
 8004e64:	4618      	mov	r0, r3
 8004e66:	f003 fafb 	bl	8008460 <HAL_RCCEx_PeriphCLKConfig>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004e70:	f7ff ffae 	bl	8004dd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004e74:	4b36      	ldr	r3, [pc, #216]	@ (8004f50 <HAL_ADC_MspInit+0x12c>)
 8004e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e78:	4a35      	ldr	r2, [pc, #212]	@ (8004f50 <HAL_ADC_MspInit+0x12c>)
 8004e7a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004e7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e80:	4b33      	ldr	r3, [pc, #204]	@ (8004f50 <HAL_ADC_MspInit+0x12c>)
 8004e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e8c:	4b30      	ldr	r3, [pc, #192]	@ (8004f50 <HAL_ADC_MspInit+0x12c>)
 8004e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e90:	4a2f      	ldr	r2, [pc, #188]	@ (8004f50 <HAL_ADC_MspInit+0x12c>)
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e98:	4b2d      	ldr	r3, [pc, #180]	@ (8004f50 <HAL_ADC_MspInit+0x12c>)
 8004e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8004f50 <HAL_ADC_MspInit+0x12c>)
 8004ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ea8:	4a29      	ldr	r2, [pc, #164]	@ (8004f50 <HAL_ADC_MspInit+0x12c>)
 8004eaa:	f043 0302 	orr.w	r3, r3, #2
 8004eae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004eb0:	4b27      	ldr	r3, [pc, #156]	@ (8004f50 <HAL_ADC_MspInit+0x12c>)
 8004eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ec8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004ecc:	4619      	mov	r1, r3
 8004ece:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ed2:	f002 fb19 	bl	8007508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004ed6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004eda:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004edc:	2303      	movs	r3, #3
 8004ede:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ee4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004ee8:	4619      	mov	r1, r3
 8004eea:	481a      	ldr	r0, [pc, #104]	@ (8004f54 <HAL_ADC_MspInit+0x130>)
 8004eec:	f002 fb0c 	bl	8007508 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 8004ef0:	4b19      	ldr	r3, [pc, #100]	@ (8004f58 <HAL_ADC_MspInit+0x134>)
 8004ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8004f5c <HAL_ADC_MspInit+0x138>)
 8004ef4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004ef6:	4b18      	ldr	r3, [pc, #96]	@ (8004f58 <HAL_ADC_MspInit+0x134>)
 8004ef8:	2205      	movs	r2, #5
 8004efa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004efc:	4b16      	ldr	r3, [pc, #88]	@ (8004f58 <HAL_ADC_MspInit+0x134>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f02:	4b15      	ldr	r3, [pc, #84]	@ (8004f58 <HAL_ADC_MspInit+0x134>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004f08:	4b13      	ldr	r3, [pc, #76]	@ (8004f58 <HAL_ADC_MspInit+0x134>)
 8004f0a:	2280      	movs	r2, #128	@ 0x80
 8004f0c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004f0e:	4b12      	ldr	r3, [pc, #72]	@ (8004f58 <HAL_ADC_MspInit+0x134>)
 8004f10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f14:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004f16:	4b10      	ldr	r3, [pc, #64]	@ (8004f58 <HAL_ADC_MspInit+0x134>)
 8004f18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f1c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f58 <HAL_ADC_MspInit+0x134>)
 8004f20:	2220      	movs	r2, #32
 8004f22:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004f24:	4b0c      	ldr	r3, [pc, #48]	@ (8004f58 <HAL_ADC_MspInit+0x134>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004f2a:	480b      	ldr	r0, [pc, #44]	@ (8004f58 <HAL_ADC_MspInit+0x134>)
 8004f2c:	f001 ffba 	bl	8006ea4 <HAL_DMA_Init>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 8004f36:	f7ff ff4b 	bl	8004dd0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a06      	ldr	r2, [pc, #24]	@ (8004f58 <HAL_ADC_MspInit+0x134>)
 8004f3e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004f40:	4a05      	ldr	r2, [pc, #20]	@ (8004f58 <HAL_ADC_MspInit+0x134>)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004f46:	bf00      	nop
 8004f48:	3780      	adds	r7, #128	@ 0x80
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40021000 	.word	0x40021000
 8004f54:	48000400 	.word	0x48000400
 8004f58:	2000037c 	.word	0x2000037c
 8004f5c:	40020408 	.word	0x40020408

08004f60 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08a      	sub	sp, #40	@ 0x28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f68:	f107 0314 	add.w	r3, r7, #20
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	605a      	str	r2, [r3, #4]
 8004f72:	609a      	str	r2, [r3, #8]
 8004f74:	60da      	str	r2, [r3, #12]
 8004f76:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f80:	d129      	bne.n	8004fd6 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f82:	4b17      	ldr	r3, [pc, #92]	@ (8004fe0 <HAL_TIM_Encoder_MspInit+0x80>)
 8004f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f86:	4a16      	ldr	r2, [pc, #88]	@ (8004fe0 <HAL_TIM_Encoder_MspInit+0x80>)
 8004f88:	f043 0301 	orr.w	r3, r3, #1
 8004f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f8e:	4b14      	ldr	r3, [pc, #80]	@ (8004fe0 <HAL_TIM_Encoder_MspInit+0x80>)
 8004f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	613b      	str	r3, [r7, #16]
 8004f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f9a:	4b11      	ldr	r3, [pc, #68]	@ (8004fe0 <HAL_TIM_Encoder_MspInit+0x80>)
 8004f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f9e:	4a10      	ldr	r2, [pc, #64]	@ (8004fe0 <HAL_TIM_Encoder_MspInit+0x80>)
 8004fa0:	f043 0301 	orr.w	r3, r3, #1
 8004fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe0 <HAL_TIM_Encoder_MspInit+0x80>)
 8004fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8004fb2:	f248 0302 	movw	r3, #32770	@ 0x8002
 8004fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fc8:	f107 0314 	add.w	r3, r7, #20
 8004fcc:	4619      	mov	r1, r3
 8004fce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004fd2:	f002 fa99 	bl	8007508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004fd6:	bf00      	nop
 8004fd8:	3728      	adds	r7, #40	@ 0x28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40021000 	.word	0x40021000

08004fe4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a46      	ldr	r2, [pc, #280]	@ (800510c <HAL_TIM_Base_MspInit+0x128>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d10c      	bne.n	8005010 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ff6:	4b46      	ldr	r3, [pc, #280]	@ (8005110 <HAL_TIM_Base_MspInit+0x12c>)
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffa:	4a45      	ldr	r2, [pc, #276]	@ (8005110 <HAL_TIM_Base_MspInit+0x12c>)
 8004ffc:	f043 0302 	orr.w	r3, r3, #2
 8005000:	6593      	str	r3, [r2, #88]	@ 0x58
 8005002:	4b43      	ldr	r3, [pc, #268]	@ (8005110 <HAL_TIM_Base_MspInit+0x12c>)
 8005004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	61fb      	str	r3, [r7, #28]
 800500c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800500e:	e078      	b.n	8005102 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a3f      	ldr	r2, [pc, #252]	@ (8005114 <HAL_TIM_Base_MspInit+0x130>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d10c      	bne.n	8005034 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800501a:	4b3d      	ldr	r3, [pc, #244]	@ (8005110 <HAL_TIM_Base_MspInit+0x12c>)
 800501c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800501e:	4a3c      	ldr	r2, [pc, #240]	@ (8005110 <HAL_TIM_Base_MspInit+0x12c>)
 8005020:	f043 0304 	orr.w	r3, r3, #4
 8005024:	6593      	str	r3, [r2, #88]	@ 0x58
 8005026:	4b3a      	ldr	r3, [pc, #232]	@ (8005110 <HAL_TIM_Base_MspInit+0x12c>)
 8005028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	61bb      	str	r3, [r7, #24]
 8005030:	69bb      	ldr	r3, [r7, #24]
}
 8005032:	e066      	b.n	8005102 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM5)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a37      	ldr	r2, [pc, #220]	@ (8005118 <HAL_TIM_Base_MspInit+0x134>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d114      	bne.n	8005068 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800503e:	4b34      	ldr	r3, [pc, #208]	@ (8005110 <HAL_TIM_Base_MspInit+0x12c>)
 8005040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005042:	4a33      	ldr	r2, [pc, #204]	@ (8005110 <HAL_TIM_Base_MspInit+0x12c>)
 8005044:	f043 0308 	orr.w	r3, r3, #8
 8005048:	6593      	str	r3, [r2, #88]	@ 0x58
 800504a:	4b31      	ldr	r3, [pc, #196]	@ (8005110 <HAL_TIM_Base_MspInit+0x12c>)
 800504c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005056:	2200      	movs	r2, #0
 8005058:	2100      	movs	r1, #0
 800505a:	2032      	movs	r0, #50	@ 0x32
 800505c:	f001 feed 	bl	8006e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005060:	2032      	movs	r0, #50	@ 0x32
 8005062:	f001 ff04 	bl	8006e6e <HAL_NVIC_EnableIRQ>
}
 8005066:	e04c      	b.n	8005102 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM6)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a2b      	ldr	r2, [pc, #172]	@ (800511c <HAL_TIM_Base_MspInit+0x138>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d114      	bne.n	800509c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005072:	4b27      	ldr	r3, [pc, #156]	@ (8005110 <HAL_TIM_Base_MspInit+0x12c>)
 8005074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005076:	4a26      	ldr	r2, [pc, #152]	@ (8005110 <HAL_TIM_Base_MspInit+0x12c>)
 8005078:	f043 0310 	orr.w	r3, r3, #16
 800507c:	6593      	str	r3, [r2, #88]	@ 0x58
 800507e:	4b24      	ldr	r3, [pc, #144]	@ (8005110 <HAL_TIM_Base_MspInit+0x12c>)
 8005080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800508a:	2200      	movs	r2, #0
 800508c:	2100      	movs	r1, #0
 800508e:	2036      	movs	r0, #54	@ 0x36
 8005090:	f001 fed3 	bl	8006e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005094:	2036      	movs	r0, #54	@ 0x36
 8005096:	f001 feea 	bl	8006e6e <HAL_NVIC_EnableIRQ>
}
 800509a:	e032      	b.n	8005102 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM15)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005120 <HAL_TIM_Base_MspInit+0x13c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d114      	bne.n	80050d0 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80050a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005110 <HAL_TIM_Base_MspInit+0x12c>)
 80050a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050aa:	4a19      	ldr	r2, [pc, #100]	@ (8005110 <HAL_TIM_Base_MspInit+0x12c>)
 80050ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80050b2:	4b17      	ldr	r3, [pc, #92]	@ (8005110 <HAL_TIM_Base_MspInit+0x12c>)
 80050b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80050be:	2200      	movs	r2, #0
 80050c0:	2100      	movs	r1, #0
 80050c2:	2018      	movs	r0, #24
 80050c4:	f001 feb9 	bl	8006e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80050c8:	2018      	movs	r0, #24
 80050ca:	f001 fed0 	bl	8006e6e <HAL_NVIC_EnableIRQ>
}
 80050ce:	e018      	b.n	8005102 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM16)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a13      	ldr	r2, [pc, #76]	@ (8005124 <HAL_TIM_Base_MspInit+0x140>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d113      	bne.n	8005102 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80050da:	4b0d      	ldr	r3, [pc, #52]	@ (8005110 <HAL_TIM_Base_MspInit+0x12c>)
 80050dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050de:	4a0c      	ldr	r2, [pc, #48]	@ (8005110 <HAL_TIM_Base_MspInit+0x12c>)
 80050e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80050e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005110 <HAL_TIM_Base_MspInit+0x12c>)
 80050e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ee:	60bb      	str	r3, [r7, #8]
 80050f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80050f2:	2200      	movs	r2, #0
 80050f4:	2100      	movs	r1, #0
 80050f6:	2019      	movs	r0, #25
 80050f8:	f001 fe9f 	bl	8006e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80050fc:	2019      	movs	r0, #25
 80050fe:	f001 feb6 	bl	8006e6e <HAL_NVIC_EnableIRQ>
}
 8005102:	bf00      	nop
 8005104:	3720      	adds	r7, #32
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40000400 	.word	0x40000400
 8005110:	40021000 	.word	0x40021000
 8005114:	40000800 	.word	0x40000800
 8005118:	40000c00 	.word	0x40000c00
 800511c:	40001000 	.word	0x40001000
 8005120:	40014000 	.word	0x40014000
 8005124:	40014400 	.word	0x40014400

08005128 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005130:	f107 030c 	add.w	r3, r7, #12
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	609a      	str	r2, [r3, #8]
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a11      	ldr	r2, [pc, #68]	@ (800518c <HAL_TIM_MspPostInit+0x64>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d11b      	bne.n	8005182 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800514a:	4b11      	ldr	r3, [pc, #68]	@ (8005190 <HAL_TIM_MspPostInit+0x68>)
 800514c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800514e:	4a10      	ldr	r2, [pc, #64]	@ (8005190 <HAL_TIM_MspPostInit+0x68>)
 8005150:	f043 0304 	orr.w	r3, r3, #4
 8005154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005156:	4b0e      	ldr	r3, [pc, #56]	@ (8005190 <HAL_TIM_MspPostInit+0x68>)
 8005158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800515a:	f003 0304 	and.w	r3, r3, #4
 800515e:	60bb      	str	r3, [r7, #8]
 8005160:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005162:	2340      	movs	r3, #64	@ 0x40
 8005164:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005166:	2302      	movs	r3, #2
 8005168:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800516e:	2300      	movs	r3, #0
 8005170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005172:	2302      	movs	r3, #2
 8005174:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005176:	f107 030c 	add.w	r3, r7, #12
 800517a:	4619      	mov	r1, r3
 800517c:	4805      	ldr	r0, [pc, #20]	@ (8005194 <HAL_TIM_MspPostInit+0x6c>)
 800517e:	f002 f9c3 	bl	8007508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005182:	bf00      	nop
 8005184:	3720      	adds	r7, #32
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40000400 	.word	0x40000400
 8005190:	40021000 	.word	0x40021000
 8005194:	48000800 	.word	0x48000800

08005198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b09e      	sub	sp, #120	@ 0x78
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051a0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	605a      	str	r2, [r3, #4]
 80051aa:	609a      	str	r2, [r3, #8]
 80051ac:	60da      	str	r2, [r3, #12]
 80051ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80051b0:	f107 0310 	add.w	r3, r7, #16
 80051b4:	2254      	movs	r2, #84	@ 0x54
 80051b6:	2100      	movs	r1, #0
 80051b8:	4618      	mov	r0, r3
 80051ba:	f007 ffe7 	bl	800d18c <memset>
  if(huart->Instance==USART2)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a4d      	ldr	r2, [pc, #308]	@ (80052f8 <HAL_UART_MspInit+0x160>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	f040 8092 	bne.w	80052ee <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80051ca:	2302      	movs	r3, #2
 80051cc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051d2:	f107 0310 	add.w	r3, r7, #16
 80051d6:	4618      	mov	r0, r3
 80051d8:	f003 f942 	bl	8008460 <HAL_RCCEx_PeriphCLKConfig>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80051e2:	f7ff fdf5 	bl	8004dd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80051e6:	4b45      	ldr	r3, [pc, #276]	@ (80052fc <HAL_UART_MspInit+0x164>)
 80051e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ea:	4a44      	ldr	r2, [pc, #272]	@ (80052fc <HAL_UART_MspInit+0x164>)
 80051ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80051f2:	4b42      	ldr	r3, [pc, #264]	@ (80052fc <HAL_UART_MspInit+0x164>)
 80051f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051fe:	4b3f      	ldr	r3, [pc, #252]	@ (80052fc <HAL_UART_MspInit+0x164>)
 8005200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005202:	4a3e      	ldr	r2, [pc, #248]	@ (80052fc <HAL_UART_MspInit+0x164>)
 8005204:	f043 0301 	orr.w	r3, r3, #1
 8005208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800520a:	4b3c      	ldr	r3, [pc, #240]	@ (80052fc <HAL_UART_MspInit+0x164>)
 800520c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	60bb      	str	r3, [r7, #8]
 8005214:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005216:	230c      	movs	r3, #12
 8005218:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800521a:	2302      	movs	r3, #2
 800521c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800521e:	2300      	movs	r3, #0
 8005220:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005222:	2300      	movs	r3, #0
 8005224:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005226:	2307      	movs	r3, #7
 8005228:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800522a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800522e:	4619      	mov	r1, r3
 8005230:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005234:	f002 f968 	bl	8007508 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8005238:	4b31      	ldr	r3, [pc, #196]	@ (8005300 <HAL_UART_MspInit+0x168>)
 800523a:	4a32      	ldr	r2, [pc, #200]	@ (8005304 <HAL_UART_MspInit+0x16c>)
 800523c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800523e:	4b30      	ldr	r3, [pc, #192]	@ (8005300 <HAL_UART_MspInit+0x168>)
 8005240:	221b      	movs	r2, #27
 8005242:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005244:	4b2e      	ldr	r3, [pc, #184]	@ (8005300 <HAL_UART_MspInit+0x168>)
 8005246:	2210      	movs	r2, #16
 8005248:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800524a:	4b2d      	ldr	r3, [pc, #180]	@ (8005300 <HAL_UART_MspInit+0x168>)
 800524c:	2200      	movs	r2, #0
 800524e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005250:	4b2b      	ldr	r3, [pc, #172]	@ (8005300 <HAL_UART_MspInit+0x168>)
 8005252:	2280      	movs	r2, #128	@ 0x80
 8005254:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005256:	4b2a      	ldr	r3, [pc, #168]	@ (8005300 <HAL_UART_MspInit+0x168>)
 8005258:	2200      	movs	r2, #0
 800525a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800525c:	4b28      	ldr	r3, [pc, #160]	@ (8005300 <HAL_UART_MspInit+0x168>)
 800525e:	2200      	movs	r2, #0
 8005260:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005262:	4b27      	ldr	r3, [pc, #156]	@ (8005300 <HAL_UART_MspInit+0x168>)
 8005264:	2200      	movs	r2, #0
 8005266:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005268:	4b25      	ldr	r3, [pc, #148]	@ (8005300 <HAL_UART_MspInit+0x168>)
 800526a:	2200      	movs	r2, #0
 800526c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800526e:	4824      	ldr	r0, [pc, #144]	@ (8005300 <HAL_UART_MspInit+0x168>)
 8005270:	f001 fe18 	bl	8006ea4 <HAL_DMA_Init>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800527a:	f7ff fda9 	bl	8004dd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a1f      	ldr	r2, [pc, #124]	@ (8005300 <HAL_UART_MspInit+0x168>)
 8005282:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005284:	4a1e      	ldr	r2, [pc, #120]	@ (8005300 <HAL_UART_MspInit+0x168>)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800528a:	4b1f      	ldr	r3, [pc, #124]	@ (8005308 <HAL_UART_MspInit+0x170>)
 800528c:	4a1f      	ldr	r2, [pc, #124]	@ (800530c <HAL_UART_MspInit+0x174>)
 800528e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005290:	4b1d      	ldr	r3, [pc, #116]	@ (8005308 <HAL_UART_MspInit+0x170>)
 8005292:	221a      	movs	r2, #26
 8005294:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005296:	4b1c      	ldr	r3, [pc, #112]	@ (8005308 <HAL_UART_MspInit+0x170>)
 8005298:	2200      	movs	r2, #0
 800529a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800529c:	4b1a      	ldr	r3, [pc, #104]	@ (8005308 <HAL_UART_MspInit+0x170>)
 800529e:	2200      	movs	r2, #0
 80052a0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80052a2:	4b19      	ldr	r3, [pc, #100]	@ (8005308 <HAL_UART_MspInit+0x170>)
 80052a4:	2280      	movs	r2, #128	@ 0x80
 80052a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052a8:	4b17      	ldr	r3, [pc, #92]	@ (8005308 <HAL_UART_MspInit+0x170>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052ae:	4b16      	ldr	r3, [pc, #88]	@ (8005308 <HAL_UART_MspInit+0x170>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80052b4:	4b14      	ldr	r3, [pc, #80]	@ (8005308 <HAL_UART_MspInit+0x170>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80052ba:	4b13      	ldr	r3, [pc, #76]	@ (8005308 <HAL_UART_MspInit+0x170>)
 80052bc:	2200      	movs	r2, #0
 80052be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80052c0:	4811      	ldr	r0, [pc, #68]	@ (8005308 <HAL_UART_MspInit+0x170>)
 80052c2:	f001 fdef 	bl	8006ea4 <HAL_DMA_Init>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80052cc:	f7ff fd80 	bl	8004dd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005308 <HAL_UART_MspInit+0x170>)
 80052d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80052d8:	4a0b      	ldr	r2, [pc, #44]	@ (8005308 <HAL_UART_MspInit+0x170>)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80052de:	2200      	movs	r2, #0
 80052e0:	2100      	movs	r1, #0
 80052e2:	2026      	movs	r0, #38	@ 0x26
 80052e4:	f001 fda9 	bl	8006e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80052e8:	2026      	movs	r0, #38	@ 0x26
 80052ea:	f001 fdc0 	bl	8006e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80052ee:	bf00      	nop
 80052f0:	3778      	adds	r7, #120	@ 0x78
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40004400 	.word	0x40004400
 80052fc:	40021000 	.word	0x40021000
 8005300:	20000a3c 	.word	0x20000a3c
 8005304:	40020008 	.word	0x40020008
 8005308:	20000a9c 	.word	0x20000a9c
 800530c:	4002001c 	.word	0x4002001c

08005310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005314:	bf00      	nop
 8005316:	e7fd      	b.n	8005314 <NMI_Handler+0x4>

08005318 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800531c:	bf00      	nop
 800531e:	e7fd      	b.n	800531c <HardFault_Handler+0x4>

08005320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005324:	bf00      	nop
 8005326:	e7fd      	b.n	8005324 <MemManage_Handler+0x4>

08005328 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800532c:	bf00      	nop
 800532e:	e7fd      	b.n	800532c <BusFault_Handler+0x4>

08005330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005334:	bf00      	nop
 8005336:	e7fd      	b.n	8005334 <UsageFault_Handler+0x4>

08005338 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800533c:	bf00      	nop
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005346:	b480      	push	{r7}
 8005348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800534a:	bf00      	nop
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005358:	bf00      	nop
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005366:	f000 f8e9 	bl	800553c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800536a:	bf00      	nop
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005374:	4802      	ldr	r0, [pc, #8]	@ (8005380 <DMA1_Channel1_IRQHandler+0x10>)
 8005376:	f001 ff78 	bl	800726a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800537a:	bf00      	nop
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	20000a3c 	.word	0x20000a3c

08005384 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005388:	4802      	ldr	r0, [pc, #8]	@ (8005394 <DMA1_Channel2_IRQHandler+0x10>)
 800538a:	f001 ff6e 	bl	800726a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800538e:	bf00      	nop
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20000a9c 	.word	0x20000a9c

08005398 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800539c:	4802      	ldr	r0, [pc, #8]	@ (80053a8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800539e:	f003 ffb1 	bl	8009304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80053a2:	bf00      	nop
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	200007d8 	.word	0x200007d8

080053ac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80053b0:	4802      	ldr	r0, [pc, #8]	@ (80053bc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80053b2:	f003 ffa7 	bl	8009304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80053b6:	bf00      	nop
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	200008a4 	.word	0x200008a4

080053c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80053c4:	4802      	ldr	r0, [pc, #8]	@ (80053d0 <USART2_IRQHandler+0x10>)
 80053c6:	f005 fcdd 	bl	800ad84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80053ca:	bf00      	nop
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20000970 	.word	0x20000970

080053d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80053d8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80053dc:	f002 fa46 	bl	800786c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80053e0:	bf00      	nop
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80053e8:	4802      	ldr	r0, [pc, #8]	@ (80053f4 <TIM5_IRQHandler+0x10>)
 80053ea:	f003 ff8b 	bl	8009304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80053ee:	bf00      	nop
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	20000640 	.word	0x20000640

080053f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80053fc:	4802      	ldr	r0, [pc, #8]	@ (8005408 <TIM6_DAC_IRQHandler+0x10>)
 80053fe:	f003 ff81 	bl	8009304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005402:	bf00      	nop
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	2000070c 	.word	0x2000070c

0800540c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005410:	4802      	ldr	r0, [pc, #8]	@ (800541c <DMA2_Channel1_IRQHandler+0x10>)
 8005412:	f001 ff2a 	bl	800726a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8005416:	bf00      	nop
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	2000037c 	.word	0x2000037c

08005420 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005424:	4b06      	ldr	r3, [pc, #24]	@ (8005440 <SystemInit+0x20>)
 8005426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800542a:	4a05      	ldr	r2, [pc, #20]	@ (8005440 <SystemInit+0x20>)
 800542c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005430:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005434:	bf00      	nop
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	e000ed00 	.word	0xe000ed00

08005444 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 8005444:	480d      	ldr	r0, [pc, #52]	@ (800547c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005446:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005448:	f7ff ffea 	bl	8005420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800544c:	480c      	ldr	r0, [pc, #48]	@ (8005480 <LoopForever+0x6>)
  ldr r1, =_edata
 800544e:	490d      	ldr	r1, [pc, #52]	@ (8005484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005450:	4a0d      	ldr	r2, [pc, #52]	@ (8005488 <LoopForever+0xe>)
  movs r3, #0
 8005452:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005454:	e002      	b.n	800545c <LoopCopyDataInit>

08005456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800545a:	3304      	adds	r3, #4

0800545c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800545c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800545e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005460:	d3f9      	bcc.n	8005456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005462:	4a0a      	ldr	r2, [pc, #40]	@ (800548c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005464:	4c0a      	ldr	r4, [pc, #40]	@ (8005490 <LoopForever+0x16>)
  movs r3, #0
 8005466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005468:	e001      	b.n	800546e <LoopFillZerobss>

0800546a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800546a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800546c:	3204      	adds	r2, #4

0800546e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800546e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005470:	d3fb      	bcc.n	800546a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005472:	f007 fe99 	bl	800d1a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005476:	f7fc fb3b 	bl	8001af0 <main>

0800547a <LoopForever>:

LoopForever:
    b LoopForever
 800547a:	e7fe      	b.n	800547a <LoopForever>
  ldr   r0, =_estack
 800547c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005484:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 8005488:	0800d4a4 	.word	0x0800d4a4
  ldr r2, =_sbss
 800548c:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8005490:	200015ec 	.word	0x200015ec

08005494 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005494:	e7fe      	b.n	8005494 <ADC1_2_IRQHandler>

08005496 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b082      	sub	sp, #8
 800549a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800549c:	2300      	movs	r3, #0
 800549e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054a0:	2003      	movs	r0, #3
 80054a2:	f001 fcbf 	bl	8006e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80054a6:	2000      	movs	r0, #0
 80054a8:	f000 f80e 	bl	80054c8 <HAL_InitTick>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	71fb      	strb	r3, [r7, #7]
 80054b6:	e001      	b.n	80054bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80054b8:	f7ff fc90 	bl	8004ddc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80054bc:	79fb      	ldrb	r3, [r7, #7]

}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80054d4:	4b16      	ldr	r3, [pc, #88]	@ (8005530 <HAL_InitTick+0x68>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d022      	beq.n	8005522 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80054dc:	4b15      	ldr	r3, [pc, #84]	@ (8005534 <HAL_InitTick+0x6c>)
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	4b13      	ldr	r3, [pc, #76]	@ (8005530 <HAL_InitTick+0x68>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80054e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80054ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f0:	4618      	mov	r0, r3
 80054f2:	f001 fcca 	bl	8006e8a <HAL_SYSTICK_Config>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10f      	bne.n	800551c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b0f      	cmp	r3, #15
 8005500:	d809      	bhi.n	8005516 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005502:	2200      	movs	r2, #0
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	f04f 30ff 	mov.w	r0, #4294967295
 800550a:	f001 fc96 	bl	8006e3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800550e:	4a0a      	ldr	r2, [pc, #40]	@ (8005538 <HAL_InitTick+0x70>)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	e007      	b.n	8005526 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	73fb      	strb	r3, [r7, #15]
 800551a:	e004      	b.n	8005526 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	73fb      	strb	r3, [r7, #15]
 8005520:	e001      	b.n	8005526 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005526:	7bfb      	ldrb	r3, [r7, #15]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	2000028c 	.word	0x2000028c
 8005534:	20000284 	.word	0x20000284
 8005538:	20000288 	.word	0x20000288

0800553c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005540:	4b05      	ldr	r3, [pc, #20]	@ (8005558 <HAL_IncTick+0x1c>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	4b05      	ldr	r3, [pc, #20]	@ (800555c <HAL_IncTick+0x20>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4413      	add	r3, r2
 800554a:	4a03      	ldr	r2, [pc, #12]	@ (8005558 <HAL_IncTick+0x1c>)
 800554c:	6013      	str	r3, [r2, #0]
}
 800554e:	bf00      	nop
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	200014b0 	.word	0x200014b0
 800555c:	2000028c 	.word	0x2000028c

08005560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  return uwTick;
 8005564:	4b03      	ldr	r3, [pc, #12]	@ (8005574 <HAL_GetTick+0x14>)
 8005566:	681b      	ldr	r3, [r3, #0]
}
 8005568:	4618      	mov	r0, r3
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	200014b0 	.word	0x200014b0

08005578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005580:	f7ff ffee 	bl	8005560 <HAL_GetTick>
 8005584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005590:	d004      	beq.n	800559c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005592:	4b09      	ldr	r3, [pc, #36]	@ (80055b8 <HAL_Delay+0x40>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4413      	add	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800559c:	bf00      	nop
 800559e:	f7ff ffdf 	bl	8005560 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d8f7      	bhi.n	800559e <HAL_Delay+0x26>
  {
  }
}
 80055ae:	bf00      	nop
 80055b0:	bf00      	nop
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	2000028c 	.word	0x2000028c

080055bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	609a      	str	r2, [r3, #8]
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	609a      	str	r2, [r3, #8]
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3360      	adds	r3, #96	@ 0x60
 8005636:	461a      	mov	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	4b08      	ldr	r3, [pc, #32]	@ (8005668 <LL_ADC_SetOffset+0x44>)
 8005646:	4013      	ands	r3, r2
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	4313      	orrs	r3, r2
 8005654:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800565c:	bf00      	nop
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	03fff000 	.word	0x03fff000

0800566c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3360      	adds	r3, #96	@ 0x60
 800567a:	461a      	mov	r2, r3
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3360      	adds	r3, #96	@ 0x60
 80056a8:	461a      	mov	r2, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	431a      	orrs	r2, r3
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80056c2:	bf00      	nop
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b087      	sub	sp, #28
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3360      	adds	r3, #96	@ 0x60
 80056de:	461a      	mov	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	431a      	orrs	r2, r3
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80056f8:	bf00      	nop
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3360      	adds	r3, #96	@ 0x60
 8005714:	461a      	mov	r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	431a      	orrs	r2, r3
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800572e:	bf00      	nop
 8005730:	371c      	adds	r7, #28
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	615a      	str	r2, [r3, #20]
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005786:	b480      	push	{r7}
 8005788:	b087      	sub	sp, #28
 800578a:	af00      	add	r7, sp, #0
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	3330      	adds	r3, #48	@ 0x30
 8005796:	461a      	mov	r2, r3
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	0a1b      	lsrs	r3, r3, #8
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	f003 030c 	and.w	r3, r3, #12
 80057a2:	4413      	add	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f003 031f 	and.w	r3, r3, #31
 80057b0:	211f      	movs	r1, #31
 80057b2:	fa01 f303 	lsl.w	r3, r1, r3
 80057b6:	43db      	mvns	r3, r3
 80057b8:	401a      	ands	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	0e9b      	lsrs	r3, r3, #26
 80057be:	f003 011f 	and.w	r1, r3, #31
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f003 031f 	and.w	r3, r3, #31
 80057c8:	fa01 f303 	lsl.w	r3, r1, r3
 80057cc:	431a      	orrs	r2, r3
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80057d2:	bf00      	nop
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80057de:	b480      	push	{r7}
 80057e0:	b087      	sub	sp, #28
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3314      	adds	r3, #20
 80057ee:	461a      	mov	r2, r3
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	0e5b      	lsrs	r3, r3, #25
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	4413      	add	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	0d1b      	lsrs	r3, r3, #20
 8005806:	f003 031f 	and.w	r3, r3, #31
 800580a:	2107      	movs	r1, #7
 800580c:	fa01 f303 	lsl.w	r3, r1, r3
 8005810:	43db      	mvns	r3, r3
 8005812:	401a      	ands	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	0d1b      	lsrs	r3, r3, #20
 8005818:	f003 031f 	and.w	r3, r3, #31
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	fa01 f303 	lsl.w	r3, r1, r3
 8005822:	431a      	orrs	r2, r3
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005828:	bf00      	nop
 800582a:	371c      	adds	r7, #28
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800584c:	43db      	mvns	r3, r3
 800584e:	401a      	ands	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f003 0318 	and.w	r3, r3, #24
 8005856:	4908      	ldr	r1, [pc, #32]	@ (8005878 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005858:	40d9      	lsrs	r1, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	400b      	ands	r3, r1
 800585e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005862:	431a      	orrs	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800586a:	bf00      	nop
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	0007ffff 	.word	0x0007ffff

0800587c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f003 031f 	and.w	r3, r3, #31
}
 800588c:	4618      	mov	r0, r3
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80058a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6093      	str	r3, [r2, #8]
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058d0:	d101      	bne.n	80058d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80058f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80058f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800591c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005920:	d101      	bne.n	8005926 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005944:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005948:	f043 0201 	orr.w	r2, r3, #1
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b01      	cmp	r3, #1
 800596e:	d101      	bne.n	8005974 <LL_ADC_IsEnabled+0x18>
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <LL_ADC_IsEnabled+0x1a>
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005992:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005996:	f043 0204 	orr.w	r2, r3, #4
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	d101      	bne.n	80059c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d101      	bne.n	80059e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
	...

080059f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80059f8:	b590      	push	{r4, r7, lr}
 80059fa:	b089      	sub	sp, #36	@ 0x24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a00:	2300      	movs	r3, #0
 8005a02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e1a9      	b.n	8005d66 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d109      	bne.n	8005a34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff f9ff 	bl	8004e24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff ff3f 	bl	80058bc <LL_ADC_IsDeepPowerDownEnabled>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d004      	beq.n	8005a4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff ff25 	bl	8005898 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7ff ff5a 	bl	800590c <LL_ADC_IsInternalRegulatorEnabled>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d115      	bne.n	8005a8a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7ff ff3e 	bl	80058e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a68:	4b9c      	ldr	r3, [pc, #624]	@ (8005cdc <HAL_ADC_Init+0x2e4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	099b      	lsrs	r3, r3, #6
 8005a6e:	4a9c      	ldr	r2, [pc, #624]	@ (8005ce0 <HAL_ADC_Init+0x2e8>)
 8005a70:	fba2 2303 	umull	r2, r3, r2, r3
 8005a74:	099b      	lsrs	r3, r3, #6
 8005a76:	3301      	adds	r3, #1
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005a7c:	e002      	b.n	8005a84 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1f9      	bne.n	8005a7e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7ff ff3c 	bl	800590c <LL_ADC_IsInternalRegulatorEnabled>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10d      	bne.n	8005ab6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a9e:	f043 0210 	orr.w	r2, r3, #16
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aaa:	f043 0201 	orr.w	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7ff ff75 	bl	80059aa <LL_ADC_REG_IsConversionOngoing>
 8005ac0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac6:	f003 0310 	and.w	r3, r3, #16
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f040 8142 	bne.w	8005d54 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f040 813e 	bne.w	8005d54 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005adc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005ae0:	f043 0202 	orr.w	r2, r3, #2
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7ff ff35 	bl	800595c <LL_ADC_IsEnabled>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d141      	bne.n	8005b7c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b00:	d004      	beq.n	8005b0c <HAL_ADC_Init+0x114>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a77      	ldr	r2, [pc, #476]	@ (8005ce4 <HAL_ADC_Init+0x2ec>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d10f      	bne.n	8005b2c <HAL_ADC_Init+0x134>
 8005b0c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005b10:	f7ff ff24 	bl	800595c <LL_ADC_IsEnabled>
 8005b14:	4604      	mov	r4, r0
 8005b16:	4873      	ldr	r0, [pc, #460]	@ (8005ce4 <HAL_ADC_Init+0x2ec>)
 8005b18:	f7ff ff20 	bl	800595c <LL_ADC_IsEnabled>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	4323      	orrs	r3, r4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	bf0c      	ite	eq
 8005b24:	2301      	moveq	r3, #1
 8005b26:	2300      	movne	r3, #0
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	e012      	b.n	8005b52 <HAL_ADC_Init+0x15a>
 8005b2c:	486e      	ldr	r0, [pc, #440]	@ (8005ce8 <HAL_ADC_Init+0x2f0>)
 8005b2e:	f7ff ff15 	bl	800595c <LL_ADC_IsEnabled>
 8005b32:	4604      	mov	r4, r0
 8005b34:	486d      	ldr	r0, [pc, #436]	@ (8005cec <HAL_ADC_Init+0x2f4>)
 8005b36:	f7ff ff11 	bl	800595c <LL_ADC_IsEnabled>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	431c      	orrs	r4, r3
 8005b3e:	486c      	ldr	r0, [pc, #432]	@ (8005cf0 <HAL_ADC_Init+0x2f8>)
 8005b40:	f7ff ff0c 	bl	800595c <LL_ADC_IsEnabled>
 8005b44:	4603      	mov	r3, r0
 8005b46:	4323      	orrs	r3, r4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	bf0c      	ite	eq
 8005b4c:	2301      	moveq	r3, #1
 8005b4e:	2300      	movne	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d012      	beq.n	8005b7c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b5e:	d004      	beq.n	8005b6a <HAL_ADC_Init+0x172>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a5f      	ldr	r2, [pc, #380]	@ (8005ce4 <HAL_ADC_Init+0x2ec>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d101      	bne.n	8005b6e <HAL_ADC_Init+0x176>
 8005b6a:	4a62      	ldr	r2, [pc, #392]	@ (8005cf4 <HAL_ADC_Init+0x2fc>)
 8005b6c:	e000      	b.n	8005b70 <HAL_ADC_Init+0x178>
 8005b6e:	4a62      	ldr	r2, [pc, #392]	@ (8005cf8 <HAL_ADC_Init+0x300>)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	4619      	mov	r1, r3
 8005b76:	4610      	mov	r0, r2
 8005b78:	f7ff fd20 	bl	80055bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	7f5b      	ldrb	r3, [r3, #29]
 8005b80:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b86:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005b8c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005b92:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b9a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d106      	bne.n	8005bb8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	045b      	lsls	r3, r3, #17
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d009      	beq.n	8005bd4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bcc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	4b48      	ldr	r3, [pc, #288]	@ (8005cfc <HAL_ADC_Init+0x304>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	6812      	ldr	r2, [r2, #0]
 8005be2:	69b9      	ldr	r1, [r7, #24]
 8005be4:	430b      	orrs	r3, r1
 8005be6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff fee4 	bl	80059d0 <LL_ADC_INJ_IsConversionOngoing>
 8005c08:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d17f      	bne.n	8005d10 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d17c      	bne.n	8005d10 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005c1a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005c22:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005c24:	4313      	orrs	r3, r2
 8005c26:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c32:	f023 0302 	bic.w	r3, r3, #2
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6812      	ldr	r2, [r2, #0]
 8005c3a:	69b9      	ldr	r1, [r7, #24]
 8005c3c:	430b      	orrs	r3, r1
 8005c3e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d017      	beq.n	8005c78 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691a      	ldr	r2, [r3, #16]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005c56:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005c60:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005c64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6911      	ldr	r1, [r2, #16]
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6812      	ldr	r2, [r2, #0]
 8005c70:	430b      	orrs	r3, r1
 8005c72:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005c76:	e013      	b.n	8005ca0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691a      	ldr	r2, [r3, #16]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005c86:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6812      	ldr	r2, [r2, #0]
 8005c94:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005c98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005c9c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d12a      	bne.n	8005d00 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005cb4:	f023 0304 	bic.w	r3, r3, #4
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005cc0:	4311      	orrs	r1, r2
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005cc6:	4311      	orrs	r1, r2
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f042 0201 	orr.w	r2, r2, #1
 8005cd8:	611a      	str	r2, [r3, #16]
 8005cda:	e019      	b.n	8005d10 <HAL_ADC_Init+0x318>
 8005cdc:	20000284 	.word	0x20000284
 8005ce0:	053e2d63 	.word	0x053e2d63
 8005ce4:	50000100 	.word	0x50000100
 8005ce8:	50000400 	.word	0x50000400
 8005cec:	50000500 	.word	0x50000500
 8005cf0:	50000600 	.word	0x50000600
 8005cf4:	50000300 	.word	0x50000300
 8005cf8:	50000700 	.word	0x50000700
 8005cfc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	691a      	ldr	r2, [r3, #16]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0201 	bic.w	r2, r2, #1
 8005d0e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d10c      	bne.n	8005d32 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d1e:	f023 010f 	bic.w	r1, r3, #15
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	1e5a      	subs	r2, r3, #1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d30:	e007      	b.n	8005d42 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 020f 	bic.w	r2, r2, #15
 8005d40:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d46:	f023 0303 	bic.w	r3, r3, #3
 8005d4a:	f043 0201 	orr.w	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d52:	e007      	b.n	8005d64 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d58:	f043 0210 	orr.w	r2, r3, #16
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005d64:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3724      	adds	r7, #36	@ 0x24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd90      	pop	{r4, r7, pc}
 8005d6e:	bf00      	nop

08005d70 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d84:	d004      	beq.n	8005d90 <HAL_ADC_Start_DMA+0x20>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a5a      	ldr	r2, [pc, #360]	@ (8005ef4 <HAL_ADC_Start_DMA+0x184>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d101      	bne.n	8005d94 <HAL_ADC_Start_DMA+0x24>
 8005d90:	4b59      	ldr	r3, [pc, #356]	@ (8005ef8 <HAL_ADC_Start_DMA+0x188>)
 8005d92:	e000      	b.n	8005d96 <HAL_ADC_Start_DMA+0x26>
 8005d94:	4b59      	ldr	r3, [pc, #356]	@ (8005efc <HAL_ADC_Start_DMA+0x18c>)
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff fd70 	bl	800587c <LL_ADC_GetMultimode>
 8005d9c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff fe01 	bl	80059aa <LL_ADC_REG_IsConversionOngoing>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f040 809b 	bne.w	8005ee6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d101      	bne.n	8005dbe <HAL_ADC_Start_DMA+0x4e>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	e096      	b.n	8005eec <HAL_ADC_Start_DMA+0x17c>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a4d      	ldr	r2, [pc, #308]	@ (8005f00 <HAL_ADC_Start_DMA+0x190>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d008      	beq.n	8005de2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2b05      	cmp	r3, #5
 8005dda:	d002      	beq.n	8005de2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2b09      	cmp	r3, #9
 8005de0:	d17a      	bne.n	8005ed8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 fcf6 	bl	80067d4 <ADC_Enable>
 8005de8:	4603      	mov	r3, r0
 8005dea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005dec:	7dfb      	ldrb	r3, [r7, #23]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d16d      	bne.n	8005ece <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005df6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005dfa:	f023 0301 	bic.w	r3, r3, #1
 8005dfe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a3a      	ldr	r2, [pc, #232]	@ (8005ef4 <HAL_ADC_Start_DMA+0x184>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d009      	beq.n	8005e24 <HAL_ADC_Start_DMA+0xb4>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a3b      	ldr	r2, [pc, #236]	@ (8005f04 <HAL_ADC_Start_DMA+0x194>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d002      	beq.n	8005e20 <HAL_ADC_Start_DMA+0xb0>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	e003      	b.n	8005e28 <HAL_ADC_Start_DMA+0xb8>
 8005e20:	4b39      	ldr	r3, [pc, #228]	@ (8005f08 <HAL_ADC_Start_DMA+0x198>)
 8005e22:	e001      	b.n	8005e28 <HAL_ADC_Start_DMA+0xb8>
 8005e24:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	6812      	ldr	r2, [r2, #0]
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d002      	beq.n	8005e36 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d105      	bne.n	8005e42 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e3a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d006      	beq.n	8005e5c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e52:	f023 0206 	bic.w	r2, r3, #6
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	661a      	str	r2, [r3, #96]	@ 0x60
 8005e5a:	e002      	b.n	8005e62 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e66:	4a29      	ldr	r2, [pc, #164]	@ (8005f0c <HAL_ADC_Start_DMA+0x19c>)
 8005e68:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e6e:	4a28      	ldr	r2, [pc, #160]	@ (8005f10 <HAL_ADC_Start_DMA+0x1a0>)
 8005e70:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e76:	4a27      	ldr	r2, [pc, #156]	@ (8005f14 <HAL_ADC_Start_DMA+0x1a4>)
 8005e78:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	221c      	movs	r2, #28
 8005e80:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f042 0210 	orr.w	r2, r2, #16
 8005e98:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f042 0201 	orr.w	r2, r2, #1
 8005ea8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3340      	adds	r3, #64	@ 0x40
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f001 f89b 	bl	8006ff4 <HAL_DMA_Start_IT>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff fd5b 	bl	8005982 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005ecc:	e00d      	b.n	8005eea <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005ed6:	e008      	b.n	8005eea <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005ee4:	e001      	b.n	8005eea <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	50000100 	.word	0x50000100
 8005ef8:	50000300 	.word	0x50000300
 8005efc:	50000700 	.word	0x50000700
 8005f00:	50000600 	.word	0x50000600
 8005f04:	50000500 	.word	0x50000500
 8005f08:	50000400 	.word	0x50000400
 8005f0c:	08006901 	.word	0x08006901
 8005f10:	080069d9 	.word	0x080069d9
 8005f14:	080069f5 	.word	0x080069f5

08005f18 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b0b6      	sub	sp, #216	@ 0xd8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005f64:	2300      	movs	r3, #0
 8005f66:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d102      	bne.n	8005f78 <HAL_ADC_ConfigChannel+0x24>
 8005f72:	2302      	movs	r3, #2
 8005f74:	f000 bc13 	b.w	800679e <HAL_ADC_ConfigChannel+0x84a>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7ff fd10 	bl	80059aa <LL_ADC_REG_IsConversionOngoing>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f040 83f3 	bne.w	8006778 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6818      	ldr	r0, [r3, #0]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	6859      	ldr	r1, [r3, #4]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f7ff fbf1 	bl	8005786 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff fcfe 	bl	80059aa <LL_ADC_REG_IsConversionOngoing>
 8005fae:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7ff fd0a 	bl	80059d0 <LL_ADC_INJ_IsConversionOngoing>
 8005fbc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005fc0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f040 81d9 	bne.w	800637c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005fca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f040 81d4 	bne.w	800637c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fdc:	d10f      	bne.n	8005ffe <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	4619      	mov	r1, r3
 8005fea:	f7ff fbf8 	bl	80057de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff fb9f 	bl	800573a <LL_ADC_SetSamplingTimeCommonConfig>
 8005ffc:	e00e      	b.n	800601c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6819      	ldr	r1, [r3, #0]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	461a      	mov	r2, r3
 800600c:	f7ff fbe7 	bl	80057de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2100      	movs	r1, #0
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff fb8f 	bl	800573a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	695a      	ldr	r2, [r3, #20]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	08db      	lsrs	r3, r3, #3
 8006028:	f003 0303 	and.w	r3, r3, #3
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	fa02 f303 	lsl.w	r3, r2, r3
 8006032:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	2b04      	cmp	r3, #4
 800603c:	d022      	beq.n	8006084 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	6919      	ldr	r1, [r3, #16]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800604e:	f7ff fae9 	bl	8005624 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6919      	ldr	r1, [r3, #16]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	461a      	mov	r2, r3
 8006060:	f7ff fb35 	bl	80056ce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6818      	ldr	r0, [r3, #0]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006070:	2b01      	cmp	r3, #1
 8006072:	d102      	bne.n	800607a <HAL_ADC_ConfigChannel+0x126>
 8006074:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006078:	e000      	b.n	800607c <HAL_ADC_ConfigChannel+0x128>
 800607a:	2300      	movs	r3, #0
 800607c:	461a      	mov	r2, r3
 800607e:	f7ff fb41 	bl	8005704 <LL_ADC_SetOffsetSaturation>
 8006082:	e17b      	b.n	800637c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2100      	movs	r1, #0
 800608a:	4618      	mov	r0, r3
 800608c:	f7ff faee 	bl	800566c <LL_ADC_GetOffsetChannel>
 8006090:	4603      	mov	r3, r0
 8006092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10a      	bne.n	80060b0 <HAL_ADC_ConfigChannel+0x15c>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2100      	movs	r1, #0
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff fae3 	bl	800566c <LL_ADC_GetOffsetChannel>
 80060a6:	4603      	mov	r3, r0
 80060a8:	0e9b      	lsrs	r3, r3, #26
 80060aa:	f003 021f 	and.w	r2, r3, #31
 80060ae:	e01e      	b.n	80060ee <HAL_ADC_ConfigChannel+0x19a>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2100      	movs	r1, #0
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff fad8 	bl	800566c <LL_ADC_GetOffsetChannel>
 80060bc:	4603      	mov	r3, r0
 80060be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80060c6:	fa93 f3a3 	rbit	r3, r3
 80060ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80060ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80060d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80060d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80060de:	2320      	movs	r3, #32
 80060e0:	e004      	b.n	80060ec <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80060e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80060e6:	fab3 f383 	clz	r3, r3
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d105      	bne.n	8006106 <HAL_ADC_ConfigChannel+0x1b2>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	0e9b      	lsrs	r3, r3, #26
 8006100:	f003 031f 	and.w	r3, r3, #31
 8006104:	e018      	b.n	8006138 <HAL_ADC_ConfigChannel+0x1e4>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800610e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006112:	fa93 f3a3 	rbit	r3, r3
 8006116:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800611a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800611e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006122:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800612a:	2320      	movs	r3, #32
 800612c:	e004      	b.n	8006138 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800612e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006132:	fab3 f383 	clz	r3, r3
 8006136:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006138:	429a      	cmp	r2, r3
 800613a:	d106      	bne.n	800614a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2200      	movs	r2, #0
 8006142:	2100      	movs	r1, #0
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff faa7 	bl	8005698 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2101      	movs	r1, #1
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff fa8b 	bl	800566c <LL_ADC_GetOffsetChannel>
 8006156:	4603      	mov	r3, r0
 8006158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <HAL_ADC_ConfigChannel+0x222>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2101      	movs	r1, #1
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff fa80 	bl	800566c <LL_ADC_GetOffsetChannel>
 800616c:	4603      	mov	r3, r0
 800616e:	0e9b      	lsrs	r3, r3, #26
 8006170:	f003 021f 	and.w	r2, r3, #31
 8006174:	e01e      	b.n	80061b4 <HAL_ADC_ConfigChannel+0x260>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2101      	movs	r1, #1
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff fa75 	bl	800566c <LL_ADC_GetOffsetChannel>
 8006182:	4603      	mov	r3, r0
 8006184:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006188:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800618c:	fa93 f3a3 	rbit	r3, r3
 8006190:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006194:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006198:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800619c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80061a4:	2320      	movs	r3, #32
 80061a6:	e004      	b.n	80061b2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80061a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80061ac:	fab3 f383 	clz	r3, r3
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d105      	bne.n	80061cc <HAL_ADC_ConfigChannel+0x278>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	0e9b      	lsrs	r3, r3, #26
 80061c6:	f003 031f 	and.w	r3, r3, #31
 80061ca:	e018      	b.n	80061fe <HAL_ADC_ConfigChannel+0x2aa>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061d8:	fa93 f3a3 	rbit	r3, r3
 80061dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80061e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80061e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80061e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80061f0:	2320      	movs	r3, #32
 80061f2:	e004      	b.n	80061fe <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80061f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061f8:	fab3 f383 	clz	r3, r3
 80061fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80061fe:	429a      	cmp	r2, r3
 8006200:	d106      	bne.n	8006210 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2200      	movs	r2, #0
 8006208:	2101      	movs	r1, #1
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fa44 	bl	8005698 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2102      	movs	r1, #2
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff fa28 	bl	800566c <LL_ADC_GetOffsetChannel>
 800621c:	4603      	mov	r3, r0
 800621e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10a      	bne.n	800623c <HAL_ADC_ConfigChannel+0x2e8>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2102      	movs	r1, #2
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff fa1d 	bl	800566c <LL_ADC_GetOffsetChannel>
 8006232:	4603      	mov	r3, r0
 8006234:	0e9b      	lsrs	r3, r3, #26
 8006236:	f003 021f 	and.w	r2, r3, #31
 800623a:	e01e      	b.n	800627a <HAL_ADC_ConfigChannel+0x326>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2102      	movs	r1, #2
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff fa12 	bl	800566c <LL_ADC_GetOffsetChannel>
 8006248:	4603      	mov	r3, r0
 800624a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006252:	fa93 f3a3 	rbit	r3, r3
 8006256:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800625a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800625e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8006262:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800626a:	2320      	movs	r3, #32
 800626c:	e004      	b.n	8006278 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800626e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006272:	fab3 f383 	clz	r3, r3
 8006276:	b2db      	uxtb	r3, r3
 8006278:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006282:	2b00      	cmp	r3, #0
 8006284:	d105      	bne.n	8006292 <HAL_ADC_ConfigChannel+0x33e>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	0e9b      	lsrs	r3, r3, #26
 800628c:	f003 031f 	and.w	r3, r3, #31
 8006290:	e016      	b.n	80062c0 <HAL_ADC_ConfigChannel+0x36c>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800629a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800629e:	fa93 f3a3 	rbit	r3, r3
 80062a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80062a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80062aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80062b2:	2320      	movs	r3, #32
 80062b4:	e004      	b.n	80062c0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80062b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80062ba:	fab3 f383 	clz	r3, r3
 80062be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d106      	bne.n	80062d2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2200      	movs	r2, #0
 80062ca:	2102      	movs	r1, #2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff f9e3 	bl	8005698 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2103      	movs	r1, #3
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff f9c7 	bl	800566c <LL_ADC_GetOffsetChannel>
 80062de:	4603      	mov	r3, r0
 80062e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10a      	bne.n	80062fe <HAL_ADC_ConfigChannel+0x3aa>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2103      	movs	r1, #3
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff f9bc 	bl	800566c <LL_ADC_GetOffsetChannel>
 80062f4:	4603      	mov	r3, r0
 80062f6:	0e9b      	lsrs	r3, r3, #26
 80062f8:	f003 021f 	and.w	r2, r3, #31
 80062fc:	e017      	b.n	800632e <HAL_ADC_ConfigChannel+0x3da>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2103      	movs	r1, #3
 8006304:	4618      	mov	r0, r3
 8006306:	f7ff f9b1 	bl	800566c <LL_ADC_GetOffsetChannel>
 800630a:	4603      	mov	r3, r0
 800630c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800630e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006310:	fa93 f3a3 	rbit	r3, r3
 8006314:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006318:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800631a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006320:	2320      	movs	r3, #32
 8006322:	e003      	b.n	800632c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006324:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006326:	fab3 f383 	clz	r3, r3
 800632a:	b2db      	uxtb	r3, r3
 800632c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006336:	2b00      	cmp	r3, #0
 8006338:	d105      	bne.n	8006346 <HAL_ADC_ConfigChannel+0x3f2>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	0e9b      	lsrs	r3, r3, #26
 8006340:	f003 031f 	and.w	r3, r3, #31
 8006344:	e011      	b.n	800636a <HAL_ADC_ConfigChannel+0x416>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800634c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800634e:	fa93 f3a3 	rbit	r3, r3
 8006352:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006354:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006356:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800635e:	2320      	movs	r3, #32
 8006360:	e003      	b.n	800636a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006362:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006364:	fab3 f383 	clz	r3, r3
 8006368:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800636a:	429a      	cmp	r2, r3
 800636c:	d106      	bne.n	800637c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2200      	movs	r2, #0
 8006374:	2103      	movs	r1, #3
 8006376:	4618      	mov	r0, r3
 8006378:	f7ff f98e 	bl	8005698 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff faeb 	bl	800595c <LL_ADC_IsEnabled>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	f040 813d 	bne.w	8006608 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	6819      	ldr	r1, [r3, #0]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	461a      	mov	r2, r3
 800639c:	f7ff fa4a 	bl	8005834 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	4aa2      	ldr	r2, [pc, #648]	@ (8006630 <HAL_ADC_ConfigChannel+0x6dc>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	f040 812e 	bne.w	8006608 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10b      	bne.n	80063d4 <HAL_ADC_ConfigChannel+0x480>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	0e9b      	lsrs	r3, r3, #26
 80063c2:	3301      	adds	r3, #1
 80063c4:	f003 031f 	and.w	r3, r3, #31
 80063c8:	2b09      	cmp	r3, #9
 80063ca:	bf94      	ite	ls
 80063cc:	2301      	movls	r3, #1
 80063ce:	2300      	movhi	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	e019      	b.n	8006408 <HAL_ADC_ConfigChannel+0x4b4>
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063dc:	fa93 f3a3 	rbit	r3, r3
 80063e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80063e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063e4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80063e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80063ec:	2320      	movs	r3, #32
 80063ee:	e003      	b.n	80063f8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80063f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063f2:	fab3 f383 	clz	r3, r3
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	3301      	adds	r3, #1
 80063fa:	f003 031f 	and.w	r3, r3, #31
 80063fe:	2b09      	cmp	r3, #9
 8006400:	bf94      	ite	ls
 8006402:	2301      	movls	r3, #1
 8006404:	2300      	movhi	r3, #0
 8006406:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006408:	2b00      	cmp	r3, #0
 800640a:	d079      	beq.n	8006500 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006414:	2b00      	cmp	r3, #0
 8006416:	d107      	bne.n	8006428 <HAL_ADC_ConfigChannel+0x4d4>
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	0e9b      	lsrs	r3, r3, #26
 800641e:	3301      	adds	r3, #1
 8006420:	069b      	lsls	r3, r3, #26
 8006422:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006426:	e015      	b.n	8006454 <HAL_ADC_ConfigChannel+0x500>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800642e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006430:	fa93 f3a3 	rbit	r3, r3
 8006434:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006438:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800643a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006440:	2320      	movs	r3, #32
 8006442:	e003      	b.n	800644c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006446:	fab3 f383 	clz	r3, r3
 800644a:	b2db      	uxtb	r3, r3
 800644c:	3301      	adds	r3, #1
 800644e:	069b      	lsls	r3, r3, #26
 8006450:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800645c:	2b00      	cmp	r3, #0
 800645e:	d109      	bne.n	8006474 <HAL_ADC_ConfigChannel+0x520>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	0e9b      	lsrs	r3, r3, #26
 8006466:	3301      	adds	r3, #1
 8006468:	f003 031f 	and.w	r3, r3, #31
 800646c:	2101      	movs	r1, #1
 800646e:	fa01 f303 	lsl.w	r3, r1, r3
 8006472:	e017      	b.n	80064a4 <HAL_ADC_ConfigChannel+0x550>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800647c:	fa93 f3a3 	rbit	r3, r3
 8006480:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006484:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8006486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800648c:	2320      	movs	r3, #32
 800648e:	e003      	b.n	8006498 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006490:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006492:	fab3 f383 	clz	r3, r3
 8006496:	b2db      	uxtb	r3, r3
 8006498:	3301      	adds	r3, #1
 800649a:	f003 031f 	and.w	r3, r3, #31
 800649e:	2101      	movs	r1, #1
 80064a0:	fa01 f303 	lsl.w	r3, r1, r3
 80064a4:	ea42 0103 	orr.w	r1, r2, r3
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10a      	bne.n	80064ca <HAL_ADC_ConfigChannel+0x576>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	0e9b      	lsrs	r3, r3, #26
 80064ba:	3301      	adds	r3, #1
 80064bc:	f003 021f 	and.w	r2, r3, #31
 80064c0:	4613      	mov	r3, r2
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	4413      	add	r3, r2
 80064c6:	051b      	lsls	r3, r3, #20
 80064c8:	e018      	b.n	80064fc <HAL_ADC_ConfigChannel+0x5a8>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d2:	fa93 f3a3 	rbit	r3, r3
 80064d6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80064d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80064dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80064e2:	2320      	movs	r3, #32
 80064e4:	e003      	b.n	80064ee <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80064e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064e8:	fab3 f383 	clz	r3, r3
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	3301      	adds	r3, #1
 80064f0:	f003 021f 	and.w	r2, r3, #31
 80064f4:	4613      	mov	r3, r2
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	4413      	add	r3, r2
 80064fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064fc:	430b      	orrs	r3, r1
 80064fe:	e07e      	b.n	80065fe <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006508:	2b00      	cmp	r3, #0
 800650a:	d107      	bne.n	800651c <HAL_ADC_ConfigChannel+0x5c8>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	0e9b      	lsrs	r3, r3, #26
 8006512:	3301      	adds	r3, #1
 8006514:	069b      	lsls	r3, r3, #26
 8006516:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800651a:	e015      	b.n	8006548 <HAL_ADC_ConfigChannel+0x5f4>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006524:	fa93 f3a3 	rbit	r3, r3
 8006528:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800652a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800652e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006534:	2320      	movs	r3, #32
 8006536:	e003      	b.n	8006540 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653a:	fab3 f383 	clz	r3, r3
 800653e:	b2db      	uxtb	r3, r3
 8006540:	3301      	adds	r3, #1
 8006542:	069b      	lsls	r3, r3, #26
 8006544:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006550:	2b00      	cmp	r3, #0
 8006552:	d109      	bne.n	8006568 <HAL_ADC_ConfigChannel+0x614>
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	0e9b      	lsrs	r3, r3, #26
 800655a:	3301      	adds	r3, #1
 800655c:	f003 031f 	and.w	r3, r3, #31
 8006560:	2101      	movs	r1, #1
 8006562:	fa01 f303 	lsl.w	r3, r1, r3
 8006566:	e017      	b.n	8006598 <HAL_ADC_ConfigChannel+0x644>
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	fa93 f3a3 	rbit	r3, r3
 8006574:	61fb      	str	r3, [r7, #28]
  return result;
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006580:	2320      	movs	r3, #32
 8006582:	e003      	b.n	800658c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006586:	fab3 f383 	clz	r3, r3
 800658a:	b2db      	uxtb	r3, r3
 800658c:	3301      	adds	r3, #1
 800658e:	f003 031f 	and.w	r3, r3, #31
 8006592:	2101      	movs	r1, #1
 8006594:	fa01 f303 	lsl.w	r3, r1, r3
 8006598:	ea42 0103 	orr.w	r1, r2, r3
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10d      	bne.n	80065c4 <HAL_ADC_ConfigChannel+0x670>
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	0e9b      	lsrs	r3, r3, #26
 80065ae:	3301      	adds	r3, #1
 80065b0:	f003 021f 	and.w	r2, r3, #31
 80065b4:	4613      	mov	r3, r2
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	4413      	add	r3, r2
 80065ba:	3b1e      	subs	r3, #30
 80065bc:	051b      	lsls	r3, r3, #20
 80065be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80065c2:	e01b      	b.n	80065fc <HAL_ADC_ConfigChannel+0x6a8>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	fa93 f3a3 	rbit	r3, r3
 80065d0:	613b      	str	r3, [r7, #16]
  return result;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80065dc:	2320      	movs	r3, #32
 80065de:	e003      	b.n	80065e8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	fab3 f383 	clz	r3, r3
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	3301      	adds	r3, #1
 80065ea:	f003 021f 	and.w	r2, r3, #31
 80065ee:	4613      	mov	r3, r2
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	4413      	add	r3, r2
 80065f4:	3b1e      	subs	r3, #30
 80065f6:	051b      	lsls	r3, r3, #20
 80065f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065fc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006602:	4619      	mov	r1, r3
 8006604:	f7ff f8eb 	bl	80057de <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	4b09      	ldr	r3, [pc, #36]	@ (8006634 <HAL_ADC_ConfigChannel+0x6e0>)
 800660e:	4013      	ands	r3, r2
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 80be 	beq.w	8006792 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800661e:	d004      	beq.n	800662a <HAL_ADC_ConfigChannel+0x6d6>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a04      	ldr	r2, [pc, #16]	@ (8006638 <HAL_ADC_ConfigChannel+0x6e4>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d10a      	bne.n	8006640 <HAL_ADC_ConfigChannel+0x6ec>
 800662a:	4b04      	ldr	r3, [pc, #16]	@ (800663c <HAL_ADC_ConfigChannel+0x6e8>)
 800662c:	e009      	b.n	8006642 <HAL_ADC_ConfigChannel+0x6ee>
 800662e:	bf00      	nop
 8006630:	407f0000 	.word	0x407f0000
 8006634:	80080000 	.word	0x80080000
 8006638:	50000100 	.word	0x50000100
 800663c:	50000300 	.word	0x50000300
 8006640:	4b59      	ldr	r3, [pc, #356]	@ (80067a8 <HAL_ADC_ConfigChannel+0x854>)
 8006642:	4618      	mov	r0, r3
 8006644:	f7fe ffe0 	bl	8005608 <LL_ADC_GetCommonPathInternalCh>
 8006648:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a56      	ldr	r2, [pc, #344]	@ (80067ac <HAL_ADC_ConfigChannel+0x858>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d004      	beq.n	8006660 <HAL_ADC_ConfigChannel+0x70c>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a55      	ldr	r2, [pc, #340]	@ (80067b0 <HAL_ADC_ConfigChannel+0x85c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d13a      	bne.n	80066d6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006660:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006664:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d134      	bne.n	80066d6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006674:	d005      	beq.n	8006682 <HAL_ADC_ConfigChannel+0x72e>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a4e      	ldr	r2, [pc, #312]	@ (80067b4 <HAL_ADC_ConfigChannel+0x860>)
 800667c:	4293      	cmp	r3, r2
 800667e:	f040 8085 	bne.w	800678c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800668a:	d004      	beq.n	8006696 <HAL_ADC_ConfigChannel+0x742>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a49      	ldr	r2, [pc, #292]	@ (80067b8 <HAL_ADC_ConfigChannel+0x864>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d101      	bne.n	800669a <HAL_ADC_ConfigChannel+0x746>
 8006696:	4a49      	ldr	r2, [pc, #292]	@ (80067bc <HAL_ADC_ConfigChannel+0x868>)
 8006698:	e000      	b.n	800669c <HAL_ADC_ConfigChannel+0x748>
 800669a:	4a43      	ldr	r2, [pc, #268]	@ (80067a8 <HAL_ADC_ConfigChannel+0x854>)
 800669c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80066a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80066a4:	4619      	mov	r1, r3
 80066a6:	4610      	mov	r0, r2
 80066a8:	f7fe ff9b 	bl	80055e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80066ac:	4b44      	ldr	r3, [pc, #272]	@ (80067c0 <HAL_ADC_ConfigChannel+0x86c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	099b      	lsrs	r3, r3, #6
 80066b2:	4a44      	ldr	r2, [pc, #272]	@ (80067c4 <HAL_ADC_ConfigChannel+0x870>)
 80066b4:	fba2 2303 	umull	r2, r3, r2, r3
 80066b8:	099b      	lsrs	r3, r3, #6
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	4613      	mov	r3, r2
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	4413      	add	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80066c6:	e002      	b.n	80066ce <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1f9      	bne.n	80066c8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80066d4:	e05a      	b.n	800678c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a3b      	ldr	r2, [pc, #236]	@ (80067c8 <HAL_ADC_ConfigChannel+0x874>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d125      	bne.n	800672c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80066e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80066e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d11f      	bne.n	800672c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a31      	ldr	r2, [pc, #196]	@ (80067b8 <HAL_ADC_ConfigChannel+0x864>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d104      	bne.n	8006700 <HAL_ADC_ConfigChannel+0x7ac>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a34      	ldr	r2, [pc, #208]	@ (80067cc <HAL_ADC_ConfigChannel+0x878>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d047      	beq.n	8006790 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006708:	d004      	beq.n	8006714 <HAL_ADC_ConfigChannel+0x7c0>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a2a      	ldr	r2, [pc, #168]	@ (80067b8 <HAL_ADC_ConfigChannel+0x864>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d101      	bne.n	8006718 <HAL_ADC_ConfigChannel+0x7c4>
 8006714:	4a29      	ldr	r2, [pc, #164]	@ (80067bc <HAL_ADC_ConfigChannel+0x868>)
 8006716:	e000      	b.n	800671a <HAL_ADC_ConfigChannel+0x7c6>
 8006718:	4a23      	ldr	r2, [pc, #140]	@ (80067a8 <HAL_ADC_ConfigChannel+0x854>)
 800671a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800671e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006722:	4619      	mov	r1, r3
 8006724:	4610      	mov	r0, r2
 8006726:	f7fe ff5c 	bl	80055e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800672a:	e031      	b.n	8006790 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a27      	ldr	r2, [pc, #156]	@ (80067d0 <HAL_ADC_ConfigChannel+0x87c>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d12d      	bne.n	8006792 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006736:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800673a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d127      	bne.n	8006792 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a1c      	ldr	r2, [pc, #112]	@ (80067b8 <HAL_ADC_ConfigChannel+0x864>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d022      	beq.n	8006792 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006754:	d004      	beq.n	8006760 <HAL_ADC_ConfigChannel+0x80c>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a17      	ldr	r2, [pc, #92]	@ (80067b8 <HAL_ADC_ConfigChannel+0x864>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d101      	bne.n	8006764 <HAL_ADC_ConfigChannel+0x810>
 8006760:	4a16      	ldr	r2, [pc, #88]	@ (80067bc <HAL_ADC_ConfigChannel+0x868>)
 8006762:	e000      	b.n	8006766 <HAL_ADC_ConfigChannel+0x812>
 8006764:	4a10      	ldr	r2, [pc, #64]	@ (80067a8 <HAL_ADC_ConfigChannel+0x854>)
 8006766:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800676a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800676e:	4619      	mov	r1, r3
 8006770:	4610      	mov	r0, r2
 8006772:	f7fe ff36 	bl	80055e2 <LL_ADC_SetCommonPathInternalCh>
 8006776:	e00c      	b.n	8006792 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800677c:	f043 0220 	orr.w	r2, r3, #32
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800678a:	e002      	b.n	8006792 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800678c:	bf00      	nop
 800678e:	e000      	b.n	8006792 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006790:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800679a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800679e:	4618      	mov	r0, r3
 80067a0:	37d8      	adds	r7, #216	@ 0xd8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	50000700 	.word	0x50000700
 80067ac:	c3210000 	.word	0xc3210000
 80067b0:	90c00010 	.word	0x90c00010
 80067b4:	50000600 	.word	0x50000600
 80067b8:	50000100 	.word	0x50000100
 80067bc:	50000300 	.word	0x50000300
 80067c0:	20000284 	.word	0x20000284
 80067c4:	053e2d63 	.word	0x053e2d63
 80067c8:	c7520000 	.word	0xc7520000
 80067cc:	50000500 	.word	0x50000500
 80067d0:	cb840000 	.word	0xcb840000

080067d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80067dc:	2300      	movs	r3, #0
 80067de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff f8b9 	bl	800595c <LL_ADC_IsEnabled>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d176      	bne.n	80068de <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	4b3c      	ldr	r3, [pc, #240]	@ (80068e8 <ADC_Enable+0x114>)
 80067f8:	4013      	ands	r3, r2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00d      	beq.n	800681a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006802:	f043 0210 	orr.w	r2, r3, #16
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800680e:	f043 0201 	orr.w	r2, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e062      	b.n	80068e0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4618      	mov	r0, r3
 8006820:	f7ff f888 	bl	8005934 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800682c:	d004      	beq.n	8006838 <ADC_Enable+0x64>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a2e      	ldr	r2, [pc, #184]	@ (80068ec <ADC_Enable+0x118>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d101      	bne.n	800683c <ADC_Enable+0x68>
 8006838:	4b2d      	ldr	r3, [pc, #180]	@ (80068f0 <ADC_Enable+0x11c>)
 800683a:	e000      	b.n	800683e <ADC_Enable+0x6a>
 800683c:	4b2d      	ldr	r3, [pc, #180]	@ (80068f4 <ADC_Enable+0x120>)
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe fee2 	bl	8005608 <LL_ADC_GetCommonPathInternalCh>
 8006844:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006846:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800684a:	2b00      	cmp	r3, #0
 800684c:	d013      	beq.n	8006876 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800684e:	4b2a      	ldr	r3, [pc, #168]	@ (80068f8 <ADC_Enable+0x124>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	099b      	lsrs	r3, r3, #6
 8006854:	4a29      	ldr	r2, [pc, #164]	@ (80068fc <ADC_Enable+0x128>)
 8006856:	fba2 2303 	umull	r2, r3, r2, r3
 800685a:	099b      	lsrs	r3, r3, #6
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	4613      	mov	r3, r2
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006868:	e002      	b.n	8006870 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	3b01      	subs	r3, #1
 800686e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1f9      	bne.n	800686a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006876:	f7fe fe73 	bl	8005560 <HAL_GetTick>
 800687a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800687c:	e028      	b.n	80068d0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff f86a 	bl	800595c <LL_ADC_IsEnabled>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d104      	bne.n	8006898 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff f84e 	bl	8005934 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006898:	f7fe fe62 	bl	8005560 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d914      	bls.n	80068d0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d00d      	beq.n	80068d0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068b8:	f043 0210 	orr.w	r2, r3, #16
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068c4:	f043 0201 	orr.w	r2, r3, #1
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e007      	b.n	80068e0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d1cf      	bne.n	800687e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	8000003f 	.word	0x8000003f
 80068ec:	50000100 	.word	0x50000100
 80068f0:	50000300 	.word	0x50000300
 80068f4:	50000700 	.word	0x50000700
 80068f8:	20000284 	.word	0x20000284
 80068fc:	053e2d63 	.word	0x053e2d63

08006900 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800690c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006912:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006916:	2b00      	cmp	r3, #0
 8006918:	d14b      	bne.n	80069b2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800691e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0308 	and.w	r3, r3, #8
 8006930:	2b00      	cmp	r3, #0
 8006932:	d021      	beq.n	8006978 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4618      	mov	r0, r3
 800693a:	f7fe ff11 	bl	8005760 <LL_ADC_REG_IsTriggerSourceSWStart>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d032      	beq.n	80069aa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d12b      	bne.n	80069aa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006956:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006962:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d11f      	bne.n	80069aa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800696e:	f043 0201 	orr.w	r2, r3, #1
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006976:	e018      	b.n	80069aa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d111      	bne.n	80069aa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800698a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006996:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d105      	bne.n	80069aa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069a2:	f043 0201 	orr.w	r2, r3, #1
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7ff fab4 	bl	8005f18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80069b0:	e00e      	b.n	80069d0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069b6:	f003 0310 	and.w	r3, r3, #16
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f7ff fabe 	bl	8005f40 <HAL_ADC_ErrorCallback>
}
 80069c4:	e004      	b.n	80069d0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	4798      	blx	r3
}
 80069d0:	bf00      	nop
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f7ff faa0 	bl	8005f2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80069ec:	bf00      	nop
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a00:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a12:	f043 0204 	orr.w	r2, r3, #4
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f7ff fa90 	bl	8005f40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006a20:	bf00      	nop
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <LL_ADC_IsEnabled>:
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <LL_ADC_IsEnabled+0x18>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e000      	b.n	8006a42 <LL_ADC_IsEnabled+0x1a>
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <LL_ADC_REG_IsConversionOngoing>:
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b083      	sub	sp, #12
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f003 0304 	and.w	r3, r3, #4
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d101      	bne.n	8006a66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e000      	b.n	8006a68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006a74:	b590      	push	{r4, r7, lr}
 8006a76:	b0a1      	sub	sp, #132	@ 0x84
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d101      	bne.n	8006a92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006a8e:	2302      	movs	r3, #2
 8006a90:	e0e7      	b.n	8006c62 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006aaa:	d102      	bne.n	8006ab2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006aac:	4b6f      	ldr	r3, [pc, #444]	@ (8006c6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006aae:	60bb      	str	r3, [r7, #8]
 8006ab0:	e009      	b.n	8006ac6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a6e      	ldr	r2, [pc, #440]	@ (8006c70 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d102      	bne.n	8006ac2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006abc:	4b6d      	ldr	r3, [pc, #436]	@ (8006c74 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006abe:	60bb      	str	r3, [r7, #8]
 8006ac0:	e001      	b.n	8006ac6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10b      	bne.n	8006ae4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ad0:	f043 0220 	orr.w	r2, r3, #32
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e0be      	b.n	8006c62 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7ff ffb1 	bl	8006a4e <LL_ADC_REG_IsConversionOngoing>
 8006aec:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7ff ffab 	bl	8006a4e <LL_ADC_REG_IsConversionOngoing>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f040 80a0 	bne.w	8006c40 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006b00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f040 809c 	bne.w	8006c40 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b10:	d004      	beq.n	8006b1c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a55      	ldr	r2, [pc, #340]	@ (8006c6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d101      	bne.n	8006b20 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006b1c:	4b56      	ldr	r3, [pc, #344]	@ (8006c78 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006b1e:	e000      	b.n	8006b22 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006b20:	4b56      	ldr	r3, [pc, #344]	@ (8006c7c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006b22:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d04b      	beq.n	8006bc4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006b2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	6859      	ldr	r1, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006b3e:	035b      	lsls	r3, r3, #13
 8006b40:	430b      	orrs	r3, r1
 8006b42:	431a      	orrs	r2, r3
 8006b44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b46:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b50:	d004      	beq.n	8006b5c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a45      	ldr	r2, [pc, #276]	@ (8006c6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d10f      	bne.n	8006b7c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006b5c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006b60:	f7ff ff62 	bl	8006a28 <LL_ADC_IsEnabled>
 8006b64:	4604      	mov	r4, r0
 8006b66:	4841      	ldr	r0, [pc, #260]	@ (8006c6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006b68:	f7ff ff5e 	bl	8006a28 <LL_ADC_IsEnabled>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	4323      	orrs	r3, r4
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	bf0c      	ite	eq
 8006b74:	2301      	moveq	r3, #1
 8006b76:	2300      	movne	r3, #0
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	e012      	b.n	8006ba2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006b7c:	483c      	ldr	r0, [pc, #240]	@ (8006c70 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006b7e:	f7ff ff53 	bl	8006a28 <LL_ADC_IsEnabled>
 8006b82:	4604      	mov	r4, r0
 8006b84:	483b      	ldr	r0, [pc, #236]	@ (8006c74 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006b86:	f7ff ff4f 	bl	8006a28 <LL_ADC_IsEnabled>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	431c      	orrs	r4, r3
 8006b8e:	483c      	ldr	r0, [pc, #240]	@ (8006c80 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006b90:	f7ff ff4a 	bl	8006a28 <LL_ADC_IsEnabled>
 8006b94:	4603      	mov	r3, r0
 8006b96:	4323      	orrs	r3, r4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	bf0c      	ite	eq
 8006b9c:	2301      	moveq	r3, #1
 8006b9e:	2300      	movne	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d056      	beq.n	8006c54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006ba6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006bae:	f023 030f 	bic.w	r3, r3, #15
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	6811      	ldr	r1, [r2, #0]
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	6892      	ldr	r2, [r2, #8]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	431a      	orrs	r2, r3
 8006bbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bc0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006bc2:	e047      	b.n	8006c54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006bc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006bcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bd8:	d004      	beq.n	8006be4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a23      	ldr	r2, [pc, #140]	@ (8006c6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d10f      	bne.n	8006c04 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006be4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006be8:	f7ff ff1e 	bl	8006a28 <LL_ADC_IsEnabled>
 8006bec:	4604      	mov	r4, r0
 8006bee:	481f      	ldr	r0, [pc, #124]	@ (8006c6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006bf0:	f7ff ff1a 	bl	8006a28 <LL_ADC_IsEnabled>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	4323      	orrs	r3, r4
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	bf0c      	ite	eq
 8006bfc:	2301      	moveq	r3, #1
 8006bfe:	2300      	movne	r3, #0
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	e012      	b.n	8006c2a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006c04:	481a      	ldr	r0, [pc, #104]	@ (8006c70 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006c06:	f7ff ff0f 	bl	8006a28 <LL_ADC_IsEnabled>
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	4819      	ldr	r0, [pc, #100]	@ (8006c74 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006c0e:	f7ff ff0b 	bl	8006a28 <LL_ADC_IsEnabled>
 8006c12:	4603      	mov	r3, r0
 8006c14:	431c      	orrs	r4, r3
 8006c16:	481a      	ldr	r0, [pc, #104]	@ (8006c80 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006c18:	f7ff ff06 	bl	8006a28 <LL_ADC_IsEnabled>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	4323      	orrs	r3, r4
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bf0c      	ite	eq
 8006c24:	2301      	moveq	r3, #1
 8006c26:	2300      	movne	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d012      	beq.n	8006c54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006c2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006c36:	f023 030f 	bic.w	r3, r3, #15
 8006c3a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006c3c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006c3e:	e009      	b.n	8006c54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c44:	f043 0220 	orr.w	r2, r3, #32
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006c52:	e000      	b.n	8006c56 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006c54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006c5e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3784      	adds	r7, #132	@ 0x84
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd90      	pop	{r4, r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	50000100 	.word	0x50000100
 8006c70:	50000400 	.word	0x50000400
 8006c74:	50000500 	.word	0x50000500
 8006c78:	50000300 	.word	0x50000300
 8006c7c:	50000700 	.word	0x50000700
 8006c80:	50000600 	.word	0x50000600

08006c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f003 0307 	and.w	r3, r3, #7
 8006c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c94:	4b0c      	ldr	r3, [pc, #48]	@ (8006cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006cac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006cb6:	4a04      	ldr	r2, [pc, #16]	@ (8006cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	60d3      	str	r3, [r2, #12]
}
 8006cbc:	bf00      	nop
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	e000ed00 	.word	0xe000ed00

08006ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cd0:	4b04      	ldr	r3, [pc, #16]	@ (8006ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	0a1b      	lsrs	r3, r3, #8
 8006cd6:	f003 0307 	and.w	r3, r3, #7
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	e000ed00 	.word	0xe000ed00

08006ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	4603      	mov	r3, r0
 8006cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	db0b      	blt.n	8006d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cfa:	79fb      	ldrb	r3, [r7, #7]
 8006cfc:	f003 021f 	and.w	r2, r3, #31
 8006d00:	4907      	ldr	r1, [pc, #28]	@ (8006d20 <__NVIC_EnableIRQ+0x38>)
 8006d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d06:	095b      	lsrs	r3, r3, #5
 8006d08:	2001      	movs	r0, #1
 8006d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8006d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	e000e100 	.word	0xe000e100

08006d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	6039      	str	r1, [r7, #0]
 8006d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	db0a      	blt.n	8006d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	490c      	ldr	r1, [pc, #48]	@ (8006d70 <__NVIC_SetPriority+0x4c>)
 8006d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d42:	0112      	lsls	r2, r2, #4
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	440b      	add	r3, r1
 8006d48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d4c:	e00a      	b.n	8006d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	4908      	ldr	r1, [pc, #32]	@ (8006d74 <__NVIC_SetPriority+0x50>)
 8006d54:	79fb      	ldrb	r3, [r7, #7]
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	3b04      	subs	r3, #4
 8006d5c:	0112      	lsls	r2, r2, #4
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	440b      	add	r3, r1
 8006d62:	761a      	strb	r2, [r3, #24]
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	e000e100 	.word	0xe000e100
 8006d74:	e000ed00 	.word	0xe000ed00

08006d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b089      	sub	sp, #36	@ 0x24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	f1c3 0307 	rsb	r3, r3, #7
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	bf28      	it	cs
 8006d96:	2304      	movcs	r3, #4
 8006d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	2b06      	cmp	r3, #6
 8006da0:	d902      	bls.n	8006da8 <NVIC_EncodePriority+0x30>
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	3b03      	subs	r3, #3
 8006da6:	e000      	b.n	8006daa <NVIC_EncodePriority+0x32>
 8006da8:	2300      	movs	r3, #0
 8006daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dac:	f04f 32ff 	mov.w	r2, #4294967295
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	fa02 f303 	lsl.w	r3, r2, r3
 8006db6:	43da      	mvns	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	401a      	ands	r2, r3
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dca:	43d9      	mvns	r1, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dd0:	4313      	orrs	r3, r2
         );
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3724      	adds	r7, #36	@ 0x24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
	...

08006de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006df0:	d301      	bcc.n	8006df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006df2:	2301      	movs	r3, #1
 8006df4:	e00f      	b.n	8006e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006df6:	4a0a      	ldr	r2, [pc, #40]	@ (8006e20 <SysTick_Config+0x40>)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006dfe:	210f      	movs	r1, #15
 8006e00:	f04f 30ff 	mov.w	r0, #4294967295
 8006e04:	f7ff ff8e 	bl	8006d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e08:	4b05      	ldr	r3, [pc, #20]	@ (8006e20 <SysTick_Config+0x40>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e0e:	4b04      	ldr	r3, [pc, #16]	@ (8006e20 <SysTick_Config+0x40>)
 8006e10:	2207      	movs	r2, #7
 8006e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	e000e010 	.word	0xe000e010

08006e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7ff ff29 	bl	8006c84 <__NVIC_SetPriorityGrouping>
}
 8006e32:	bf00      	nop
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b086      	sub	sp, #24
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	4603      	mov	r3, r0
 8006e42:	60b9      	str	r1, [r7, #8]
 8006e44:	607a      	str	r2, [r7, #4]
 8006e46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006e48:	f7ff ff40 	bl	8006ccc <__NVIC_GetPriorityGrouping>
 8006e4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	68b9      	ldr	r1, [r7, #8]
 8006e52:	6978      	ldr	r0, [r7, #20]
 8006e54:	f7ff ff90 	bl	8006d78 <NVIC_EncodePriority>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e5e:	4611      	mov	r1, r2
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff ff5f 	bl	8006d24 <__NVIC_SetPriority>
}
 8006e66:	bf00      	nop
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	4603      	mov	r3, r0
 8006e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff ff33 	bl	8006ce8 <__NVIC_EnableIRQ>
}
 8006e82:	bf00      	nop
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7ff ffa4 	bl	8006de0 <SysTick_Config>
 8006e98:	4603      	mov	r3, r0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e08d      	b.n	8006fd2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	4b47      	ldr	r3, [pc, #284]	@ (8006fdc <HAL_DMA_Init+0x138>)
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d80f      	bhi.n	8006ee2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	4b45      	ldr	r3, [pc, #276]	@ (8006fe0 <HAL_DMA_Init+0x13c>)
 8006eca:	4413      	add	r3, r2
 8006ecc:	4a45      	ldr	r2, [pc, #276]	@ (8006fe4 <HAL_DMA_Init+0x140>)
 8006ece:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed2:	091b      	lsrs	r3, r3, #4
 8006ed4:	009a      	lsls	r2, r3, #2
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a42      	ldr	r2, [pc, #264]	@ (8006fe8 <HAL_DMA_Init+0x144>)
 8006ede:	641a      	str	r2, [r3, #64]	@ 0x40
 8006ee0:	e00e      	b.n	8006f00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	4b40      	ldr	r3, [pc, #256]	@ (8006fec <HAL_DMA_Init+0x148>)
 8006eea:	4413      	add	r3, r2
 8006eec:	4a3d      	ldr	r2, [pc, #244]	@ (8006fe4 <HAL_DMA_Init+0x140>)
 8006eee:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef2:	091b      	lsrs	r3, r3, #4
 8006ef4:	009a      	lsls	r2, r3, #2
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a3c      	ldr	r2, [pc, #240]	@ (8006ff0 <HAL_DMA_Init+0x14c>)
 8006efe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fa76 	bl	8007444 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f60:	d102      	bne.n	8006f68 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f70:	b2d2      	uxtb	r2, r2
 8006f72:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006f7c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d010      	beq.n	8006fa8 <HAL_DMA_Init+0x104>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2b04      	cmp	r3, #4
 8006f8c:	d80c      	bhi.n	8006fa8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fa96 	bl	80074c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006fa4:	605a      	str	r2, [r3, #4]
 8006fa6:	e008      	b.n	8006fba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	40020407 	.word	0x40020407
 8006fe0:	bffdfff8 	.word	0xbffdfff8
 8006fe4:	cccccccd 	.word	0xcccccccd
 8006fe8:	40020000 	.word	0x40020000
 8006fec:	bffdfbf8 	.word	0xbffdfbf8
 8006ff0:	40020400 	.word	0x40020400

08006ff4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800700c:	2b01      	cmp	r3, #1
 800700e:	d101      	bne.n	8007014 <HAL_DMA_Start_IT+0x20>
 8007010:	2302      	movs	r3, #2
 8007012:	e066      	b.n	80070e2 <HAL_DMA_Start_IT+0xee>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b01      	cmp	r3, #1
 8007026:	d155      	bne.n	80070d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 0201 	bic.w	r2, r2, #1
 8007044:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	68b9      	ldr	r1, [r7, #8]
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 f9bb 	bl	80073c8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007056:	2b00      	cmp	r3, #0
 8007058:	d008      	beq.n	800706c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f042 020e 	orr.w	r2, r2, #14
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	e00f      	b.n	800708c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 0204 	bic.w	r2, r2, #4
 800707a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f042 020a 	orr.w	r2, r2, #10
 800708a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d007      	beq.n	80070aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d007      	beq.n	80070c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f042 0201 	orr.w	r2, r2, #1
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	e005      	b.n	80070e0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80070dc:	2302      	movs	r3, #2
 80070de:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80070e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3718      	adds	r7, #24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b085      	sub	sp, #20
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d005      	beq.n	800710e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2204      	movs	r2, #4
 8007106:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	73fb      	strb	r3, [r7, #15]
 800710c:	e037      	b.n	800717e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 020e 	bic.w	r2, r2, #14
 800711c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007128:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800712c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0201 	bic.w	r2, r2, #1
 800713c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007142:	f003 021f 	and.w	r2, r3, #31
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714a:	2101      	movs	r1, #1
 800714c:	fa01 f202 	lsl.w	r2, r1, r2
 8007150:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800715a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00c      	beq.n	800717e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800716e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007172:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800717c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800718e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d00d      	beq.n	80071d0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2204      	movs	r2, #4
 80071b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	73fb      	strb	r3, [r7, #15]
 80071ce:	e047      	b.n	8007260 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 020e 	bic.w	r2, r2, #14
 80071de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0201 	bic.w	r2, r2, #1
 80071ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007204:	f003 021f 	and.w	r2, r3, #31
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800720c:	2101      	movs	r1, #1
 800720e:	fa01 f202 	lsl.w	r2, r1, r2
 8007212:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800721c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00c      	beq.n	8007240 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007230:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007234:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800723e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	4798      	blx	r3
    }
  }
  return status;
 8007260:	7bfb      	ldrb	r3, [r7, #15]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007286:	f003 031f 	and.w	r3, r3, #31
 800728a:	2204      	movs	r2, #4
 800728c:	409a      	lsls	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	4013      	ands	r3, r2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d026      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x7a>
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f003 0304 	and.w	r3, r3, #4
 800729c:	2b00      	cmp	r3, #0
 800729e:	d021      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0320 	and.w	r3, r3, #32
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d107      	bne.n	80072be <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0204 	bic.w	r2, r2, #4
 80072bc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072c2:	f003 021f 	and.w	r2, r3, #31
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ca:	2104      	movs	r1, #4
 80072cc:	fa01 f202 	lsl.w	r2, r1, r2
 80072d0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d071      	beq.n	80073be <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80072e2:	e06c      	b.n	80073be <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072e8:	f003 031f 	and.w	r3, r3, #31
 80072ec:	2202      	movs	r2, #2
 80072ee:	409a      	lsls	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4013      	ands	r3, r2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d02e      	beq.n	8007356 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d029      	beq.n	8007356 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0320 	and.w	r3, r3, #32
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10b      	bne.n	8007328 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 020a 	bic.w	r2, r2, #10
 800731e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800732c:	f003 021f 	and.w	r2, r3, #31
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007334:	2102      	movs	r1, #2
 8007336:	fa01 f202 	lsl.w	r2, r1, r2
 800733a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d038      	beq.n	80073be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007354:	e033      	b.n	80073be <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800735a:	f003 031f 	and.w	r3, r3, #31
 800735e:	2208      	movs	r2, #8
 8007360:	409a      	lsls	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4013      	ands	r3, r2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d02a      	beq.n	80073c0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f003 0308 	and.w	r3, r3, #8
 8007370:	2b00      	cmp	r3, #0
 8007372:	d025      	beq.n	80073c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 020e 	bic.w	r2, r2, #14
 8007382:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007388:	f003 021f 	and.w	r2, r3, #31
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007390:	2101      	movs	r1, #1
 8007392:	fa01 f202 	lsl.w	r2, r1, r2
 8007396:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d004      	beq.n	80073c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80073be:	bf00      	nop
 80073c0:	bf00      	nop
}
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80073de:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d004      	beq.n	80073f2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80073f0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073f6:	f003 021f 	and.w	r2, r3, #31
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fe:	2101      	movs	r1, #1
 8007400:	fa01 f202 	lsl.w	r2, r1, r2
 8007404:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	2b10      	cmp	r3, #16
 8007414:	d108      	bne.n	8007428 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007426:	e007      	b.n	8007438 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	60da      	str	r2, [r3, #12]
}
 8007438:	bf00      	nop
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	461a      	mov	r2, r3
 8007452:	4b16      	ldr	r3, [pc, #88]	@ (80074ac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007454:	429a      	cmp	r2, r3
 8007456:	d802      	bhi.n	800745e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007458:	4b15      	ldr	r3, [pc, #84]	@ (80074b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	e001      	b.n	8007462 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800745e:	4b15      	ldr	r3, [pc, #84]	@ (80074b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007460:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	b2db      	uxtb	r3, r3
 800746c:	3b08      	subs	r3, #8
 800746e:	4a12      	ldr	r2, [pc, #72]	@ (80074b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007470:	fba2 2303 	umull	r2, r3, r2, r3
 8007474:	091b      	lsrs	r3, r3, #4
 8007476:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800747c:	089b      	lsrs	r3, r3, #2
 800747e:	009a      	lsls	r2, r3, #2
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	4413      	add	r3, r2
 8007484:	461a      	mov	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a0b      	ldr	r2, [pc, #44]	@ (80074bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800748e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f003 031f 	and.w	r3, r3, #31
 8007496:	2201      	movs	r2, #1
 8007498:	409a      	lsls	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800749e:	bf00      	nop
 80074a0:	371c      	adds	r7, #28
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	40020407 	.word	0x40020407
 80074b0:	40020800 	.word	0x40020800
 80074b4:	40020820 	.word	0x40020820
 80074b8:	cccccccd 	.word	0xcccccccd
 80074bc:	40020880 	.word	0x40020880

080074c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80074d4:	4413      	add	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	461a      	mov	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a08      	ldr	r2, [pc, #32]	@ (8007504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80074e2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	3b01      	subs	r3, #1
 80074e8:	f003 031f 	and.w	r3, r3, #31
 80074ec:	2201      	movs	r2, #1
 80074ee:	409a      	lsls	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80074f4:	bf00      	nop
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	1000823f 	.word	0x1000823f
 8007504:	40020940 	.word	0x40020940

08007508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007512:	2300      	movs	r3, #0
 8007514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007516:	e15a      	b.n	80077ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	2101      	movs	r1, #1
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	fa01 f303 	lsl.w	r3, r1, r3
 8007524:	4013      	ands	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 814c 	beq.w	80077c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f003 0303 	and.w	r3, r3, #3
 8007538:	2b01      	cmp	r3, #1
 800753a:	d005      	beq.n	8007548 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007544:	2b02      	cmp	r3, #2
 8007546:	d130      	bne.n	80075aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	2203      	movs	r2, #3
 8007554:	fa02 f303 	lsl.w	r3, r2, r3
 8007558:	43db      	mvns	r3, r3
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	4013      	ands	r3, r2
 800755e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	fa02 f303 	lsl.w	r3, r2, r3
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	4313      	orrs	r3, r2
 8007570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800757e:	2201      	movs	r2, #1
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	fa02 f303 	lsl.w	r3, r2, r3
 8007586:	43db      	mvns	r3, r3
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4013      	ands	r3, r2
 800758c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	091b      	lsrs	r3, r3, #4
 8007594:	f003 0201 	and.w	r2, r3, #1
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	fa02 f303 	lsl.w	r3, r2, r3
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f003 0303 	and.w	r3, r3, #3
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d017      	beq.n	80075e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	2203      	movs	r2, #3
 80075c2:	fa02 f303 	lsl.w	r3, r2, r3
 80075c6:	43db      	mvns	r3, r3
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	4013      	ands	r3, r2
 80075cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	689a      	ldr	r2, [r3, #8]
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	fa02 f303 	lsl.w	r3, r2, r3
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	4313      	orrs	r3, r2
 80075de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f003 0303 	and.w	r3, r3, #3
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d123      	bne.n	800763a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	08da      	lsrs	r2, r3, #3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3208      	adds	r2, #8
 80075fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f003 0307 	and.w	r3, r3, #7
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	220f      	movs	r2, #15
 800760a:	fa02 f303 	lsl.w	r3, r2, r3
 800760e:	43db      	mvns	r3, r3
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	4013      	ands	r3, r2
 8007614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	691a      	ldr	r2, [r3, #16]
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f003 0307 	and.w	r3, r3, #7
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	fa02 f303 	lsl.w	r3, r2, r3
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	4313      	orrs	r3, r2
 800762a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	08da      	lsrs	r2, r3, #3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3208      	adds	r2, #8
 8007634:	6939      	ldr	r1, [r7, #16]
 8007636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	2203      	movs	r2, #3
 8007646:	fa02 f303 	lsl.w	r3, r2, r3
 800764a:	43db      	mvns	r3, r3
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	4013      	ands	r3, r2
 8007650:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f003 0203 	and.w	r2, r3, #3
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	fa02 f303 	lsl.w	r3, r2, r3
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	4313      	orrs	r3, r2
 8007666:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 80a6 	beq.w	80077c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800767c:	4b5b      	ldr	r3, [pc, #364]	@ (80077ec <HAL_GPIO_Init+0x2e4>)
 800767e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007680:	4a5a      	ldr	r2, [pc, #360]	@ (80077ec <HAL_GPIO_Init+0x2e4>)
 8007682:	f043 0301 	orr.w	r3, r3, #1
 8007686:	6613      	str	r3, [r2, #96]	@ 0x60
 8007688:	4b58      	ldr	r3, [pc, #352]	@ (80077ec <HAL_GPIO_Init+0x2e4>)
 800768a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	60bb      	str	r3, [r7, #8]
 8007692:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007694:	4a56      	ldr	r2, [pc, #344]	@ (80077f0 <HAL_GPIO_Init+0x2e8>)
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	089b      	lsrs	r3, r3, #2
 800769a:	3302      	adds	r3, #2
 800769c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f003 0303 	and.w	r3, r3, #3
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	220f      	movs	r2, #15
 80076ac:	fa02 f303 	lsl.w	r3, r2, r3
 80076b0:	43db      	mvns	r3, r3
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	4013      	ands	r3, r2
 80076b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80076be:	d01f      	beq.n	8007700 <HAL_GPIO_Init+0x1f8>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a4c      	ldr	r2, [pc, #304]	@ (80077f4 <HAL_GPIO_Init+0x2ec>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d019      	beq.n	80076fc <HAL_GPIO_Init+0x1f4>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a4b      	ldr	r2, [pc, #300]	@ (80077f8 <HAL_GPIO_Init+0x2f0>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d013      	beq.n	80076f8 <HAL_GPIO_Init+0x1f0>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a4a      	ldr	r2, [pc, #296]	@ (80077fc <HAL_GPIO_Init+0x2f4>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d00d      	beq.n	80076f4 <HAL_GPIO_Init+0x1ec>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a49      	ldr	r2, [pc, #292]	@ (8007800 <HAL_GPIO_Init+0x2f8>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d007      	beq.n	80076f0 <HAL_GPIO_Init+0x1e8>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a48      	ldr	r2, [pc, #288]	@ (8007804 <HAL_GPIO_Init+0x2fc>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d101      	bne.n	80076ec <HAL_GPIO_Init+0x1e4>
 80076e8:	2305      	movs	r3, #5
 80076ea:	e00a      	b.n	8007702 <HAL_GPIO_Init+0x1fa>
 80076ec:	2306      	movs	r3, #6
 80076ee:	e008      	b.n	8007702 <HAL_GPIO_Init+0x1fa>
 80076f0:	2304      	movs	r3, #4
 80076f2:	e006      	b.n	8007702 <HAL_GPIO_Init+0x1fa>
 80076f4:	2303      	movs	r3, #3
 80076f6:	e004      	b.n	8007702 <HAL_GPIO_Init+0x1fa>
 80076f8:	2302      	movs	r3, #2
 80076fa:	e002      	b.n	8007702 <HAL_GPIO_Init+0x1fa>
 80076fc:	2301      	movs	r3, #1
 80076fe:	e000      	b.n	8007702 <HAL_GPIO_Init+0x1fa>
 8007700:	2300      	movs	r3, #0
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	f002 0203 	and.w	r2, r2, #3
 8007708:	0092      	lsls	r2, r2, #2
 800770a:	4093      	lsls	r3, r2
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	4313      	orrs	r3, r2
 8007710:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007712:	4937      	ldr	r1, [pc, #220]	@ (80077f0 <HAL_GPIO_Init+0x2e8>)
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	089b      	lsrs	r3, r3, #2
 8007718:	3302      	adds	r3, #2
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007720:	4b39      	ldr	r3, [pc, #228]	@ (8007808 <HAL_GPIO_Init+0x300>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	43db      	mvns	r3, r3
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	4013      	ands	r3, r2
 800772e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4313      	orrs	r3, r2
 8007742:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007744:	4a30      	ldr	r2, [pc, #192]	@ (8007808 <HAL_GPIO_Init+0x300>)
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800774a:	4b2f      	ldr	r3, [pc, #188]	@ (8007808 <HAL_GPIO_Init+0x300>)
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	43db      	mvns	r3, r3
 8007754:	693a      	ldr	r2, [r7, #16]
 8007756:	4013      	ands	r3, r2
 8007758:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800776e:	4a26      	ldr	r2, [pc, #152]	@ (8007808 <HAL_GPIO_Init+0x300>)
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007774:	4b24      	ldr	r3, [pc, #144]	@ (8007808 <HAL_GPIO_Init+0x300>)
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	43db      	mvns	r3, r3
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	4013      	ands	r3, r2
 8007782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d003      	beq.n	8007798 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	4313      	orrs	r3, r2
 8007796:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007798:	4a1b      	ldr	r2, [pc, #108]	@ (8007808 <HAL_GPIO_Init+0x300>)
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800779e:	4b1a      	ldr	r3, [pc, #104]	@ (8007808 <HAL_GPIO_Init+0x300>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	43db      	mvns	r3, r3
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	4013      	ands	r3, r2
 80077ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4313      	orrs	r3, r2
 80077c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80077c2:	4a11      	ldr	r2, [pc, #68]	@ (8007808 <HAL_GPIO_Init+0x300>)
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	3301      	adds	r3, #1
 80077cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	fa22 f303 	lsr.w	r3, r2, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f47f ae9d 	bne.w	8007518 <HAL_GPIO_Init+0x10>
  }
}
 80077de:	bf00      	nop
 80077e0:	bf00      	nop
 80077e2:	371c      	adds	r7, #28
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	40021000 	.word	0x40021000
 80077f0:	40010000 	.word	0x40010000
 80077f4:	48000400 	.word	0x48000400
 80077f8:	48000800 	.word	0x48000800
 80077fc:	48000c00 	.word	0x48000c00
 8007800:	48001000 	.word	0x48001000
 8007804:	48001400 	.word	0x48001400
 8007808:	40010400 	.word	0x40010400

0800780c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691a      	ldr	r2, [r3, #16]
 800781c:	887b      	ldrh	r3, [r7, #2]
 800781e:	4013      	ands	r3, r2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d002      	beq.n	800782a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007824:	2301      	movs	r3, #1
 8007826:	73fb      	strb	r3, [r7, #15]
 8007828:	e001      	b.n	800782e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800782e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	807b      	strh	r3, [r7, #2]
 8007848:	4613      	mov	r3, r2
 800784a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800784c:	787b      	ldrb	r3, [r7, #1]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007852:	887a      	ldrh	r2, [r7, #2]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007858:	e002      	b.n	8007860 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800785a:	887a      	ldrh	r2, [r7, #2]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	4603      	mov	r3, r0
 8007874:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007876:	4b08      	ldr	r3, [pc, #32]	@ (8007898 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007878:	695a      	ldr	r2, [r3, #20]
 800787a:	88fb      	ldrh	r3, [r7, #6]
 800787c:	4013      	ands	r3, r2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d006      	beq.n	8007890 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007882:	4a05      	ldr	r2, [pc, #20]	@ (8007898 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007884:	88fb      	ldrh	r3, [r7, #6]
 8007886:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007888:	88fb      	ldrh	r3, [r7, #6]
 800788a:	4618      	mov	r0, r3
 800788c:	f7fb fabe 	bl	8002e0c <HAL_GPIO_EXTI_Callback>
  }
}
 8007890:	bf00      	nop
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	40010400 	.word	0x40010400

0800789c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d141      	bne.n	800792e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80078aa:	4b4b      	ldr	r3, [pc, #300]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80078b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078b6:	d131      	bne.n	800791c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80078b8:	4b47      	ldr	r3, [pc, #284]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078be:	4a46      	ldr	r2, [pc, #280]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80078c8:	4b43      	ldr	r3, [pc, #268]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80078d0:	4a41      	ldr	r2, [pc, #260]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80078d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80078d8:	4b40      	ldr	r3, [pc, #256]	@ (80079dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2232      	movs	r2, #50	@ 0x32
 80078de:	fb02 f303 	mul.w	r3, r2, r3
 80078e2:	4a3f      	ldr	r2, [pc, #252]	@ (80079e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80078e4:	fba2 2303 	umull	r2, r3, r2, r3
 80078e8:	0c9b      	lsrs	r3, r3, #18
 80078ea:	3301      	adds	r3, #1
 80078ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078ee:	e002      	b.n	80078f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3b01      	subs	r3, #1
 80078f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078f6:	4b38      	ldr	r3, [pc, #224]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007902:	d102      	bne.n	800790a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1f2      	bne.n	80078f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800790a:	4b33      	ldr	r3, [pc, #204]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007912:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007916:	d158      	bne.n	80079ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e057      	b.n	80079cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800791c:	4b2e      	ldr	r3, [pc, #184]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800791e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007922:	4a2d      	ldr	r2, [pc, #180]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007928:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800792c:	e04d      	b.n	80079ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007934:	d141      	bne.n	80079ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007936:	4b28      	ldr	r3, [pc, #160]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800793e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007942:	d131      	bne.n	80079a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007944:	4b24      	ldr	r3, [pc, #144]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007946:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800794a:	4a23      	ldr	r2, [pc, #140]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800794c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007950:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007954:	4b20      	ldr	r3, [pc, #128]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800795c:	4a1e      	ldr	r2, [pc, #120]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800795e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007962:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007964:	4b1d      	ldr	r3, [pc, #116]	@ (80079dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2232      	movs	r2, #50	@ 0x32
 800796a:	fb02 f303 	mul.w	r3, r2, r3
 800796e:	4a1c      	ldr	r2, [pc, #112]	@ (80079e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007970:	fba2 2303 	umull	r2, r3, r2, r3
 8007974:	0c9b      	lsrs	r3, r3, #18
 8007976:	3301      	adds	r3, #1
 8007978:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800797a:	e002      	b.n	8007982 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3b01      	subs	r3, #1
 8007980:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007982:	4b15      	ldr	r3, [pc, #84]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800798a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800798e:	d102      	bne.n	8007996 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1f2      	bne.n	800797c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007996:	4b10      	ldr	r3, [pc, #64]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800799e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079a2:	d112      	bne.n	80079ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e011      	b.n	80079cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80079a8:	4b0b      	ldr	r3, [pc, #44]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079ae:	4a0a      	ldr	r2, [pc, #40]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80079b8:	e007      	b.n	80079ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80079ba:	4b07      	ldr	r3, [pc, #28]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80079c2:	4a05      	ldr	r2, [pc, #20]	@ (80079d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80079c8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	40007000 	.word	0x40007000
 80079dc:	20000284 	.word	0x20000284
 80079e0:	431bde83 	.word	0x431bde83

080079e4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80079e4:	b480      	push	{r7}
 80079e6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80079e8:	4b05      	ldr	r3, [pc, #20]	@ (8007a00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	4a04      	ldr	r2, [pc, #16]	@ (8007a00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80079ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80079f2:	6093      	str	r3, [r2, #8]
}
 80079f4:	bf00      	nop
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	40007000 	.word	0x40007000

08007a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b088      	sub	sp, #32
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e2fe      	b.n	8008014 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d075      	beq.n	8007b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a22:	4b97      	ldr	r3, [pc, #604]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f003 030c 	and.w	r3, r3, #12
 8007a2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a2c:	4b94      	ldr	r3, [pc, #592]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f003 0303 	and.w	r3, r3, #3
 8007a34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	2b0c      	cmp	r3, #12
 8007a3a:	d102      	bne.n	8007a42 <HAL_RCC_OscConfig+0x3e>
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d002      	beq.n	8007a48 <HAL_RCC_OscConfig+0x44>
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	2b08      	cmp	r3, #8
 8007a46:	d10b      	bne.n	8007a60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a48:	4b8d      	ldr	r3, [pc, #564]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d05b      	beq.n	8007b0c <HAL_RCC_OscConfig+0x108>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d157      	bne.n	8007b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e2d9      	b.n	8008014 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a68:	d106      	bne.n	8007a78 <HAL_RCC_OscConfig+0x74>
 8007a6a:	4b85      	ldr	r3, [pc, #532]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a84      	ldr	r2, [pc, #528]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	e01d      	b.n	8007ab4 <HAL_RCC_OscConfig+0xb0>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a80:	d10c      	bne.n	8007a9c <HAL_RCC_OscConfig+0x98>
 8007a82:	4b7f      	ldr	r3, [pc, #508]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a7e      	ldr	r2, [pc, #504]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007a88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a8c:	6013      	str	r3, [r2, #0]
 8007a8e:	4b7c      	ldr	r3, [pc, #496]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a7b      	ldr	r2, [pc, #492]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a98:	6013      	str	r3, [r2, #0]
 8007a9a:	e00b      	b.n	8007ab4 <HAL_RCC_OscConfig+0xb0>
 8007a9c:	4b78      	ldr	r3, [pc, #480]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a77      	ldr	r2, [pc, #476]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	4b75      	ldr	r3, [pc, #468]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a74      	ldr	r2, [pc, #464]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007aae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d013      	beq.n	8007ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007abc:	f7fd fd50 	bl	8005560 <HAL_GetTick>
 8007ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ac2:	e008      	b.n	8007ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ac4:	f7fd fd4c 	bl	8005560 <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	2b64      	cmp	r3, #100	@ 0x64
 8007ad0:	d901      	bls.n	8007ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e29e      	b.n	8008014 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ad6:	4b6a      	ldr	r3, [pc, #424]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d0f0      	beq.n	8007ac4 <HAL_RCC_OscConfig+0xc0>
 8007ae2:	e014      	b.n	8007b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae4:	f7fd fd3c 	bl	8005560 <HAL_GetTick>
 8007ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007aea:	e008      	b.n	8007afe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007aec:	f7fd fd38 	bl	8005560 <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	2b64      	cmp	r3, #100	@ 0x64
 8007af8:	d901      	bls.n	8007afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e28a      	b.n	8008014 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007afe:	4b60      	ldr	r3, [pc, #384]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1f0      	bne.n	8007aec <HAL_RCC_OscConfig+0xe8>
 8007b0a:	e000      	b.n	8007b0e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0302 	and.w	r3, r3, #2
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d075      	beq.n	8007c06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b1a:	4b59      	ldr	r3, [pc, #356]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 030c 	and.w	r3, r3, #12
 8007b22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b24:	4b56      	ldr	r3, [pc, #344]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f003 0303 	and.w	r3, r3, #3
 8007b2c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	2b0c      	cmp	r3, #12
 8007b32:	d102      	bne.n	8007b3a <HAL_RCC_OscConfig+0x136>
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d002      	beq.n	8007b40 <HAL_RCC_OscConfig+0x13c>
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d11f      	bne.n	8007b80 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b40:	4b4f      	ldr	r3, [pc, #316]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d005      	beq.n	8007b58 <HAL_RCC_OscConfig+0x154>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e25d      	b.n	8008014 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b58:	4b49      	ldr	r3, [pc, #292]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	061b      	lsls	r3, r3, #24
 8007b66:	4946      	ldr	r1, [pc, #280]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007b6c:	4b45      	ldr	r3, [pc, #276]	@ (8007c84 <HAL_RCC_OscConfig+0x280>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fd fca9 	bl	80054c8 <HAL_InitTick>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d043      	beq.n	8007c04 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e249      	b.n	8008014 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d023      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b88:	4b3d      	ldr	r3, [pc, #244]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a3c      	ldr	r2, [pc, #240]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007b8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b94:	f7fd fce4 	bl	8005560 <HAL_GetTick>
 8007b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b9a:	e008      	b.n	8007bae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b9c:	f7fd fce0 	bl	8005560 <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d901      	bls.n	8007bae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e232      	b.n	8008014 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007bae:	4b34      	ldr	r3, [pc, #208]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d0f0      	beq.n	8007b9c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bba:	4b31      	ldr	r3, [pc, #196]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	061b      	lsls	r3, r3, #24
 8007bc8:	492d      	ldr	r1, [pc, #180]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	604b      	str	r3, [r1, #4]
 8007bce:	e01a      	b.n	8007c06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a2a      	ldr	r2, [pc, #168]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007bd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bdc:	f7fd fcc0 	bl	8005560 <HAL_GetTick>
 8007be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007be2:	e008      	b.n	8007bf6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007be4:	f7fd fcbc 	bl	8005560 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d901      	bls.n	8007bf6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e20e      	b.n	8008014 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007bf6:	4b22      	ldr	r3, [pc, #136]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1f0      	bne.n	8007be4 <HAL_RCC_OscConfig+0x1e0>
 8007c02:	e000      	b.n	8007c06 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0308 	and.w	r3, r3, #8
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d041      	beq.n	8007c96 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d01c      	beq.n	8007c54 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c1a:	4b19      	ldr	r3, [pc, #100]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c20:	4a17      	ldr	r2, [pc, #92]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007c22:	f043 0301 	orr.w	r3, r3, #1
 8007c26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c2a:	f7fd fc99 	bl	8005560 <HAL_GetTick>
 8007c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c30:	e008      	b.n	8007c44 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c32:	f7fd fc95 	bl	8005560 <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d901      	bls.n	8007c44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e1e7      	b.n	8008014 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c44:	4b0e      	ldr	r3, [pc, #56]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c4a:	f003 0302 	and.w	r3, r3, #2
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d0ef      	beq.n	8007c32 <HAL_RCC_OscConfig+0x22e>
 8007c52:	e020      	b.n	8007c96 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c54:	4b0a      	ldr	r3, [pc, #40]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c5a:	4a09      	ldr	r2, [pc, #36]	@ (8007c80 <HAL_RCC_OscConfig+0x27c>)
 8007c5c:	f023 0301 	bic.w	r3, r3, #1
 8007c60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c64:	f7fd fc7c 	bl	8005560 <HAL_GetTick>
 8007c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c6a:	e00d      	b.n	8007c88 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c6c:	f7fd fc78 	bl	8005560 <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d906      	bls.n	8007c88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e1ca      	b.n	8008014 <HAL_RCC_OscConfig+0x610>
 8007c7e:	bf00      	nop
 8007c80:	40021000 	.word	0x40021000
 8007c84:	20000288 	.word	0x20000288
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c88:	4b8c      	ldr	r3, [pc, #560]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c8e:	f003 0302 	and.w	r3, r3, #2
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1ea      	bne.n	8007c6c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0304 	and.w	r3, r3, #4
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f000 80a6 	beq.w	8007df0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007ca8:	4b84      	ldr	r3, [pc, #528]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d101      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x2b4>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e000      	b.n	8007cba <HAL_RCC_OscConfig+0x2b6>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00d      	beq.n	8007cda <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cbe:	4b7f      	ldr	r3, [pc, #508]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cc2:	4a7e      	ldr	r2, [pc, #504]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cca:	4b7c      	ldr	r3, [pc, #496]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cda:	4b79      	ldr	r3, [pc, #484]	@ (8007ec0 <HAL_RCC_OscConfig+0x4bc>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d118      	bne.n	8007d18 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ce6:	4b76      	ldr	r3, [pc, #472]	@ (8007ec0 <HAL_RCC_OscConfig+0x4bc>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a75      	ldr	r2, [pc, #468]	@ (8007ec0 <HAL_RCC_OscConfig+0x4bc>)
 8007cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cf2:	f7fd fc35 	bl	8005560 <HAL_GetTick>
 8007cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cf8:	e008      	b.n	8007d0c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cfa:	f7fd fc31 	bl	8005560 <HAL_GetTick>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d901      	bls.n	8007d0c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e183      	b.n	8008014 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d0c:	4b6c      	ldr	r3, [pc, #432]	@ (8007ec0 <HAL_RCC_OscConfig+0x4bc>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d0f0      	beq.n	8007cfa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d108      	bne.n	8007d32 <HAL_RCC_OscConfig+0x32e>
 8007d20:	4b66      	ldr	r3, [pc, #408]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d26:	4a65      	ldr	r2, [pc, #404]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007d28:	f043 0301 	orr.w	r3, r3, #1
 8007d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007d30:	e024      	b.n	8007d7c <HAL_RCC_OscConfig+0x378>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	2b05      	cmp	r3, #5
 8007d38:	d110      	bne.n	8007d5c <HAL_RCC_OscConfig+0x358>
 8007d3a:	4b60      	ldr	r3, [pc, #384]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d40:	4a5e      	ldr	r2, [pc, #376]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007d42:	f043 0304 	orr.w	r3, r3, #4
 8007d46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007d4a:	4b5c      	ldr	r3, [pc, #368]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d50:	4a5a      	ldr	r2, [pc, #360]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007d52:	f043 0301 	orr.w	r3, r3, #1
 8007d56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007d5a:	e00f      	b.n	8007d7c <HAL_RCC_OscConfig+0x378>
 8007d5c:	4b57      	ldr	r3, [pc, #348]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d62:	4a56      	ldr	r2, [pc, #344]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007d64:	f023 0301 	bic.w	r3, r3, #1
 8007d68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007d6c:	4b53      	ldr	r3, [pc, #332]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d72:	4a52      	ldr	r2, [pc, #328]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007d74:	f023 0304 	bic.w	r3, r3, #4
 8007d78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d016      	beq.n	8007db2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d84:	f7fd fbec 	bl	8005560 <HAL_GetTick>
 8007d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d8a:	e00a      	b.n	8007da2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d8c:	f7fd fbe8 	bl	8005560 <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d901      	bls.n	8007da2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e138      	b.n	8008014 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007da2:	4b46      	ldr	r3, [pc, #280]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007da8:	f003 0302 	and.w	r3, r3, #2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d0ed      	beq.n	8007d8c <HAL_RCC_OscConfig+0x388>
 8007db0:	e015      	b.n	8007dde <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007db2:	f7fd fbd5 	bl	8005560 <HAL_GetTick>
 8007db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007db8:	e00a      	b.n	8007dd0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dba:	f7fd fbd1 	bl	8005560 <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d901      	bls.n	8007dd0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e121      	b.n	8008014 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1ed      	bne.n	8007dba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007dde:	7ffb      	ldrb	r3, [r7, #31]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d105      	bne.n	8007df0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007de4:	4b35      	ldr	r3, [pc, #212]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007de8:	4a34      	ldr	r2, [pc, #208]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007dea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007dee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0320 	and.w	r3, r3, #32
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d03c      	beq.n	8007e76 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d01c      	beq.n	8007e3e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e04:	4b2d      	ldr	r3, [pc, #180]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007e06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e0a:	4a2c      	ldr	r2, [pc, #176]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007e0c:	f043 0301 	orr.w	r3, r3, #1
 8007e10:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e14:	f7fd fba4 	bl	8005560 <HAL_GetTick>
 8007e18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e1a:	e008      	b.n	8007e2e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e1c:	f7fd fba0 	bl	8005560 <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d901      	bls.n	8007e2e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e0f2      	b.n	8008014 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e2e:	4b23      	ldr	r3, [pc, #140]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007e30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d0ef      	beq.n	8007e1c <HAL_RCC_OscConfig+0x418>
 8007e3c:	e01b      	b.n	8007e76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007e40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e44:	4a1d      	ldr	r2, [pc, #116]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007e46:	f023 0301 	bic.w	r3, r3, #1
 8007e4a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e4e:	f7fd fb87 	bl	8005560 <HAL_GetTick>
 8007e52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007e54:	e008      	b.n	8007e68 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e56:	f7fd fb83 	bl	8005560 <HAL_GetTick>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d901      	bls.n	8007e68 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e0d5      	b.n	8008014 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007e68:	4b14      	ldr	r3, [pc, #80]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e6e:	f003 0302 	and.w	r3, r3, #2
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1ef      	bne.n	8007e56 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f000 80c9 	beq.w	8008012 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e80:	4b0e      	ldr	r3, [pc, #56]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f003 030c 	and.w	r3, r3, #12
 8007e88:	2b0c      	cmp	r3, #12
 8007e8a:	f000 8083 	beq.w	8007f94 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d15e      	bne.n	8007f54 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e96:	4b09      	ldr	r3, [pc, #36]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a08      	ldr	r2, [pc, #32]	@ (8007ebc <HAL_RCC_OscConfig+0x4b8>)
 8007e9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea2:	f7fd fb5d 	bl	8005560 <HAL_GetTick>
 8007ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ea8:	e00c      	b.n	8007ec4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eaa:	f7fd fb59 	bl	8005560 <HAL_GetTick>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d905      	bls.n	8007ec4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e0ab      	b.n	8008014 <HAL_RCC_OscConfig+0x610>
 8007ebc:	40021000 	.word	0x40021000
 8007ec0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ec4:	4b55      	ldr	r3, [pc, #340]	@ (800801c <HAL_RCC_OscConfig+0x618>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1ec      	bne.n	8007eaa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ed0:	4b52      	ldr	r3, [pc, #328]	@ (800801c <HAL_RCC_OscConfig+0x618>)
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	4b52      	ldr	r3, [pc, #328]	@ (8008020 <HAL_RCC_OscConfig+0x61c>)
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	6a11      	ldr	r1, [r2, #32]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007ee0:	3a01      	subs	r2, #1
 8007ee2:	0112      	lsls	r2, r2, #4
 8007ee4:	4311      	orrs	r1, r2
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007eea:	0212      	lsls	r2, r2, #8
 8007eec:	4311      	orrs	r1, r2
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007ef2:	0852      	lsrs	r2, r2, #1
 8007ef4:	3a01      	subs	r2, #1
 8007ef6:	0552      	lsls	r2, r2, #21
 8007ef8:	4311      	orrs	r1, r2
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007efe:	0852      	lsrs	r2, r2, #1
 8007f00:	3a01      	subs	r2, #1
 8007f02:	0652      	lsls	r2, r2, #25
 8007f04:	4311      	orrs	r1, r2
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007f0a:	06d2      	lsls	r2, r2, #27
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	4943      	ldr	r1, [pc, #268]	@ (800801c <HAL_RCC_OscConfig+0x618>)
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f14:	4b41      	ldr	r3, [pc, #260]	@ (800801c <HAL_RCC_OscConfig+0x618>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a40      	ldr	r2, [pc, #256]	@ (800801c <HAL_RCC_OscConfig+0x618>)
 8007f1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f1e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007f20:	4b3e      	ldr	r3, [pc, #248]	@ (800801c <HAL_RCC_OscConfig+0x618>)
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	4a3d      	ldr	r2, [pc, #244]	@ (800801c <HAL_RCC_OscConfig+0x618>)
 8007f26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f2a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f2c:	f7fd fb18 	bl	8005560 <HAL_GetTick>
 8007f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f32:	e008      	b.n	8007f46 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f34:	f7fd fb14 	bl	8005560 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e066      	b.n	8008014 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f46:	4b35      	ldr	r3, [pc, #212]	@ (800801c <HAL_RCC_OscConfig+0x618>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d0f0      	beq.n	8007f34 <HAL_RCC_OscConfig+0x530>
 8007f52:	e05e      	b.n	8008012 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f54:	4b31      	ldr	r3, [pc, #196]	@ (800801c <HAL_RCC_OscConfig+0x618>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a30      	ldr	r2, [pc, #192]	@ (800801c <HAL_RCC_OscConfig+0x618>)
 8007f5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f60:	f7fd fafe 	bl	8005560 <HAL_GetTick>
 8007f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f66:	e008      	b.n	8007f7a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f68:	f7fd fafa 	bl	8005560 <HAL_GetTick>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d901      	bls.n	8007f7a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e04c      	b.n	8008014 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f7a:	4b28      	ldr	r3, [pc, #160]	@ (800801c <HAL_RCC_OscConfig+0x618>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1f0      	bne.n	8007f68 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007f86:	4b25      	ldr	r3, [pc, #148]	@ (800801c <HAL_RCC_OscConfig+0x618>)
 8007f88:	68da      	ldr	r2, [r3, #12]
 8007f8a:	4924      	ldr	r1, [pc, #144]	@ (800801c <HAL_RCC_OscConfig+0x618>)
 8007f8c:	4b25      	ldr	r3, [pc, #148]	@ (8008024 <HAL_RCC_OscConfig+0x620>)
 8007f8e:	4013      	ands	r3, r2
 8007f90:	60cb      	str	r3, [r1, #12]
 8007f92:	e03e      	b.n	8008012 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e039      	b.n	8008014 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800801c <HAL_RCC_OscConfig+0x618>)
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f003 0203 	and.w	r2, r3, #3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d12c      	bne.n	800800e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d123      	bne.n	800800e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d11b      	bne.n	800800e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d113      	bne.n	800800e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff0:	085b      	lsrs	r3, r3, #1
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d109      	bne.n	800800e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008004:	085b      	lsrs	r3, r3, #1
 8008006:	3b01      	subs	r3, #1
 8008008:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800800a:	429a      	cmp	r2, r3
 800800c:	d001      	beq.n	8008012 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e000      	b.n	8008014 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3720      	adds	r7, #32
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	40021000 	.word	0x40021000
 8008020:	019f800c 	.word	0x019f800c
 8008024:	feeefffc 	.word	0xfeeefffc

08008028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008032:	2300      	movs	r3, #0
 8008034:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e11e      	b.n	800827e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008040:	4b91      	ldr	r3, [pc, #580]	@ (8008288 <HAL_RCC_ClockConfig+0x260>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 030f 	and.w	r3, r3, #15
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	429a      	cmp	r2, r3
 800804c:	d910      	bls.n	8008070 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800804e:	4b8e      	ldr	r3, [pc, #568]	@ (8008288 <HAL_RCC_ClockConfig+0x260>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f023 020f 	bic.w	r2, r3, #15
 8008056:	498c      	ldr	r1, [pc, #560]	@ (8008288 <HAL_RCC_ClockConfig+0x260>)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	4313      	orrs	r3, r2
 800805c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800805e:	4b8a      	ldr	r3, [pc, #552]	@ (8008288 <HAL_RCC_ClockConfig+0x260>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 030f 	and.w	r3, r3, #15
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	429a      	cmp	r2, r3
 800806a:	d001      	beq.n	8008070 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e106      	b.n	800827e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	d073      	beq.n	8008164 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	2b03      	cmp	r3, #3
 8008082:	d129      	bne.n	80080d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008084:	4b81      	ldr	r3, [pc, #516]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e0f4      	b.n	800827e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008094:	f000 f99e 	bl	80083d4 <RCC_GetSysClockFreqFromPLLSource>
 8008098:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	4a7c      	ldr	r2, [pc, #496]	@ (8008290 <HAL_RCC_ClockConfig+0x268>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d93f      	bls.n	8008122 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80080a2:	4b7a      	ldr	r3, [pc, #488]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d009      	beq.n	80080c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d033      	beq.n	8008122 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d12f      	bne.n	8008122 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80080c2:	4b72      	ldr	r3, [pc, #456]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080ca:	4a70      	ldr	r2, [pc, #448]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 80080cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80080d2:	2380      	movs	r3, #128	@ 0x80
 80080d4:	617b      	str	r3, [r7, #20]
 80080d6:	e024      	b.n	8008122 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d107      	bne.n	80080f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080e0:	4b6a      	ldr	r3, [pc, #424]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d109      	bne.n	8008100 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e0c6      	b.n	800827e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080f0:	4b66      	ldr	r3, [pc, #408]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e0be      	b.n	800827e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008100:	f000 f8ce 	bl	80082a0 <HAL_RCC_GetSysClockFreq>
 8008104:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	4a61      	ldr	r2, [pc, #388]	@ (8008290 <HAL_RCC_ClockConfig+0x268>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d909      	bls.n	8008122 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800810e:	4b5f      	ldr	r3, [pc, #380]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008116:	4a5d      	ldr	r2, [pc, #372]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 8008118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800811c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800811e:	2380      	movs	r3, #128	@ 0x80
 8008120:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008122:	4b5a      	ldr	r3, [pc, #360]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f023 0203 	bic.w	r2, r3, #3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	4957      	ldr	r1, [pc, #348]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 8008130:	4313      	orrs	r3, r2
 8008132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008134:	f7fd fa14 	bl	8005560 <HAL_GetTick>
 8008138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800813a:	e00a      	b.n	8008152 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800813c:	f7fd fa10 	bl	8005560 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800814a:	4293      	cmp	r3, r2
 800814c:	d901      	bls.n	8008152 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e095      	b.n	800827e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008152:	4b4e      	ldr	r3, [pc, #312]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	f003 020c 	and.w	r2, r3, #12
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	429a      	cmp	r2, r3
 8008162:	d1eb      	bne.n	800813c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0302 	and.w	r3, r3, #2
 800816c:	2b00      	cmp	r3, #0
 800816e:	d023      	beq.n	80081b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0304 	and.w	r3, r3, #4
 8008178:	2b00      	cmp	r3, #0
 800817a:	d005      	beq.n	8008188 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800817c:	4b43      	ldr	r3, [pc, #268]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	4a42      	ldr	r2, [pc, #264]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 8008182:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008186:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0308 	and.w	r3, r3, #8
 8008190:	2b00      	cmp	r3, #0
 8008192:	d007      	beq.n	80081a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008194:	4b3d      	ldr	r3, [pc, #244]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800819c:	4a3b      	ldr	r2, [pc, #236]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 800819e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80081a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081a4:	4b39      	ldr	r3, [pc, #228]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	4936      	ldr	r1, [pc, #216]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	608b      	str	r3, [r1, #8]
 80081b6:	e008      	b.n	80081ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2b80      	cmp	r3, #128	@ 0x80
 80081bc:	d105      	bne.n	80081ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80081be:	4b33      	ldr	r3, [pc, #204]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	4a32      	ldr	r2, [pc, #200]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 80081c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80081ca:	4b2f      	ldr	r3, [pc, #188]	@ (8008288 <HAL_RCC_ClockConfig+0x260>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 030f 	and.w	r3, r3, #15
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d21d      	bcs.n	8008214 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081d8:	4b2b      	ldr	r3, [pc, #172]	@ (8008288 <HAL_RCC_ClockConfig+0x260>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f023 020f 	bic.w	r2, r3, #15
 80081e0:	4929      	ldr	r1, [pc, #164]	@ (8008288 <HAL_RCC_ClockConfig+0x260>)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80081e8:	f7fd f9ba 	bl	8005560 <HAL_GetTick>
 80081ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ee:	e00a      	b.n	8008206 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081f0:	f7fd f9b6 	bl	8005560 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081fe:	4293      	cmp	r3, r2
 8008200:	d901      	bls.n	8008206 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e03b      	b.n	800827e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008206:	4b20      	ldr	r3, [pc, #128]	@ (8008288 <HAL_RCC_ClockConfig+0x260>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 030f 	and.w	r3, r3, #15
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	429a      	cmp	r2, r3
 8008212:	d1ed      	bne.n	80081f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	2b00      	cmp	r3, #0
 800821e:	d008      	beq.n	8008232 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008220:	4b1a      	ldr	r3, [pc, #104]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	4917      	ldr	r1, [pc, #92]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 800822e:	4313      	orrs	r3, r2
 8008230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0308 	and.w	r3, r3, #8
 800823a:	2b00      	cmp	r3, #0
 800823c:	d009      	beq.n	8008252 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800823e:	4b13      	ldr	r3, [pc, #76]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	490f      	ldr	r1, [pc, #60]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 800824e:	4313      	orrs	r3, r2
 8008250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008252:	f000 f825 	bl	80082a0 <HAL_RCC_GetSysClockFreq>
 8008256:	4602      	mov	r2, r0
 8008258:	4b0c      	ldr	r3, [pc, #48]	@ (800828c <HAL_RCC_ClockConfig+0x264>)
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	091b      	lsrs	r3, r3, #4
 800825e:	f003 030f 	and.w	r3, r3, #15
 8008262:	490c      	ldr	r1, [pc, #48]	@ (8008294 <HAL_RCC_ClockConfig+0x26c>)
 8008264:	5ccb      	ldrb	r3, [r1, r3]
 8008266:	f003 031f 	and.w	r3, r3, #31
 800826a:	fa22 f303 	lsr.w	r3, r2, r3
 800826e:	4a0a      	ldr	r2, [pc, #40]	@ (8008298 <HAL_RCC_ClockConfig+0x270>)
 8008270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008272:	4b0a      	ldr	r3, [pc, #40]	@ (800829c <HAL_RCC_ClockConfig+0x274>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4618      	mov	r0, r3
 8008278:	f7fd f926 	bl	80054c8 <HAL_InitTick>
 800827c:	4603      	mov	r3, r0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	40022000 	.word	0x40022000
 800828c:	40021000 	.word	0x40021000
 8008290:	04c4b400 	.word	0x04c4b400
 8008294:	0800d454 	.word	0x0800d454
 8008298:	20000284 	.word	0x20000284
 800829c:	20000288 	.word	0x20000288

080082a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80082a6:	4b2c      	ldr	r3, [pc, #176]	@ (8008358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f003 030c 	and.w	r3, r3, #12
 80082ae:	2b04      	cmp	r3, #4
 80082b0:	d102      	bne.n	80082b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80082b2:	4b2a      	ldr	r3, [pc, #168]	@ (800835c <HAL_RCC_GetSysClockFreq+0xbc>)
 80082b4:	613b      	str	r3, [r7, #16]
 80082b6:	e047      	b.n	8008348 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80082b8:	4b27      	ldr	r3, [pc, #156]	@ (8008358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f003 030c 	and.w	r3, r3, #12
 80082c0:	2b08      	cmp	r3, #8
 80082c2:	d102      	bne.n	80082ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80082c4:	4b26      	ldr	r3, [pc, #152]	@ (8008360 <HAL_RCC_GetSysClockFreq+0xc0>)
 80082c6:	613b      	str	r3, [r7, #16]
 80082c8:	e03e      	b.n	8008348 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80082ca:	4b23      	ldr	r3, [pc, #140]	@ (8008358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f003 030c 	and.w	r3, r3, #12
 80082d2:	2b0c      	cmp	r3, #12
 80082d4:	d136      	bne.n	8008344 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80082d6:	4b20      	ldr	r3, [pc, #128]	@ (8008358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	f003 0303 	and.w	r3, r3, #3
 80082de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80082e0:	4b1d      	ldr	r3, [pc, #116]	@ (8008358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	091b      	lsrs	r3, r3, #4
 80082e6:	f003 030f 	and.w	r3, r3, #15
 80082ea:	3301      	adds	r3, #1
 80082ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2b03      	cmp	r3, #3
 80082f2:	d10c      	bne.n	800830e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80082f4:	4a1a      	ldr	r2, [pc, #104]	@ (8008360 <HAL_RCC_GetSysClockFreq+0xc0>)
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082fc:	4a16      	ldr	r2, [pc, #88]	@ (8008358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80082fe:	68d2      	ldr	r2, [r2, #12]
 8008300:	0a12      	lsrs	r2, r2, #8
 8008302:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008306:	fb02 f303 	mul.w	r3, r2, r3
 800830a:	617b      	str	r3, [r7, #20]
      break;
 800830c:	e00c      	b.n	8008328 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800830e:	4a13      	ldr	r2, [pc, #76]	@ (800835c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	fbb2 f3f3 	udiv	r3, r2, r3
 8008316:	4a10      	ldr	r2, [pc, #64]	@ (8008358 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008318:	68d2      	ldr	r2, [r2, #12]
 800831a:	0a12      	lsrs	r2, r2, #8
 800831c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008320:	fb02 f303 	mul.w	r3, r2, r3
 8008324:	617b      	str	r3, [r7, #20]
      break;
 8008326:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008328:	4b0b      	ldr	r3, [pc, #44]	@ (8008358 <HAL_RCC_GetSysClockFreq+0xb8>)
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	0e5b      	lsrs	r3, r3, #25
 800832e:	f003 0303 	and.w	r3, r3, #3
 8008332:	3301      	adds	r3, #1
 8008334:	005b      	lsls	r3, r3, #1
 8008336:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008340:	613b      	str	r3, [r7, #16]
 8008342:	e001      	b.n	8008348 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008344:	2300      	movs	r3, #0
 8008346:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008348:	693b      	ldr	r3, [r7, #16]
}
 800834a:	4618      	mov	r0, r3
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	40021000 	.word	0x40021000
 800835c:	00f42400 	.word	0x00f42400
 8008360:	016e3600 	.word	0x016e3600

08008364 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008364:	b480      	push	{r7}
 8008366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008368:	4b03      	ldr	r3, [pc, #12]	@ (8008378 <HAL_RCC_GetHCLKFreq+0x14>)
 800836a:	681b      	ldr	r3, [r3, #0]
}
 800836c:	4618      	mov	r0, r3
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	20000284 	.word	0x20000284

0800837c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008380:	f7ff fff0 	bl	8008364 <HAL_RCC_GetHCLKFreq>
 8008384:	4602      	mov	r2, r0
 8008386:	4b06      	ldr	r3, [pc, #24]	@ (80083a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	0a1b      	lsrs	r3, r3, #8
 800838c:	f003 0307 	and.w	r3, r3, #7
 8008390:	4904      	ldr	r1, [pc, #16]	@ (80083a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008392:	5ccb      	ldrb	r3, [r1, r3]
 8008394:	f003 031f 	and.w	r3, r3, #31
 8008398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800839c:	4618      	mov	r0, r3
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	40021000 	.word	0x40021000
 80083a4:	0800d464 	.word	0x0800d464

080083a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80083ac:	f7ff ffda 	bl	8008364 <HAL_RCC_GetHCLKFreq>
 80083b0:	4602      	mov	r2, r0
 80083b2:	4b06      	ldr	r3, [pc, #24]	@ (80083cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	0adb      	lsrs	r3, r3, #11
 80083b8:	f003 0307 	and.w	r3, r3, #7
 80083bc:	4904      	ldr	r1, [pc, #16]	@ (80083d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80083be:	5ccb      	ldrb	r3, [r1, r3]
 80083c0:	f003 031f 	and.w	r3, r3, #31
 80083c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	40021000 	.word	0x40021000
 80083d0:	0800d464 	.word	0x0800d464

080083d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b087      	sub	sp, #28
 80083d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80083da:	4b1e      	ldr	r3, [pc, #120]	@ (8008454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f003 0303 	and.w	r3, r3, #3
 80083e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80083e4:	4b1b      	ldr	r3, [pc, #108]	@ (8008454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	091b      	lsrs	r3, r3, #4
 80083ea:	f003 030f 	and.w	r3, r3, #15
 80083ee:	3301      	adds	r3, #1
 80083f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d10c      	bne.n	8008412 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80083f8:	4a17      	ldr	r2, [pc, #92]	@ (8008458 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008400:	4a14      	ldr	r2, [pc, #80]	@ (8008454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008402:	68d2      	ldr	r2, [r2, #12]
 8008404:	0a12      	lsrs	r2, r2, #8
 8008406:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800840a:	fb02 f303 	mul.w	r3, r2, r3
 800840e:	617b      	str	r3, [r7, #20]
    break;
 8008410:	e00c      	b.n	800842c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008412:	4a12      	ldr	r2, [pc, #72]	@ (800845c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	fbb2 f3f3 	udiv	r3, r2, r3
 800841a:	4a0e      	ldr	r2, [pc, #56]	@ (8008454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800841c:	68d2      	ldr	r2, [r2, #12]
 800841e:	0a12      	lsrs	r2, r2, #8
 8008420:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008424:	fb02 f303 	mul.w	r3, r2, r3
 8008428:	617b      	str	r3, [r7, #20]
    break;
 800842a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800842c:	4b09      	ldr	r3, [pc, #36]	@ (8008454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	0e5b      	lsrs	r3, r3, #25
 8008432:	f003 0303 	and.w	r3, r3, #3
 8008436:	3301      	adds	r3, #1
 8008438:	005b      	lsls	r3, r3, #1
 800843a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	fbb2 f3f3 	udiv	r3, r2, r3
 8008444:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008446:	687b      	ldr	r3, [r7, #4]
}
 8008448:	4618      	mov	r0, r3
 800844a:	371c      	adds	r7, #28
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	40021000 	.word	0x40021000
 8008458:	016e3600 	.word	0x016e3600
 800845c:	00f42400 	.word	0x00f42400

08008460 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008468:	2300      	movs	r3, #0
 800846a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800846c:	2300      	movs	r3, #0
 800846e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 8098 	beq.w	80085ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800847e:	2300      	movs	r3, #0
 8008480:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008482:	4b43      	ldr	r3, [pc, #268]	@ (8008590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10d      	bne.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800848e:	4b40      	ldr	r3, [pc, #256]	@ (8008590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008492:	4a3f      	ldr	r2, [pc, #252]	@ (8008590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008498:	6593      	str	r3, [r2, #88]	@ 0x58
 800849a:	4b3d      	ldr	r3, [pc, #244]	@ (8008590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800849c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800849e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084a2:	60bb      	str	r3, [r7, #8]
 80084a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084a6:	2301      	movs	r3, #1
 80084a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084aa:	4b3a      	ldr	r3, [pc, #232]	@ (8008594 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a39      	ldr	r2, [pc, #228]	@ (8008594 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80084b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084b6:	f7fd f853 	bl	8005560 <HAL_GetTick>
 80084ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084bc:	e009      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084be:	f7fd f84f 	bl	8005560 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d902      	bls.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	74fb      	strb	r3, [r7, #19]
        break;
 80084d0:	e005      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084d2:	4b30      	ldr	r3, [pc, #192]	@ (8008594 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d0ef      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80084de:	7cfb      	ldrb	r3, [r7, #19]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d159      	bne.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80084e4:	4b2a      	ldr	r3, [pc, #168]	@ (8008590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d01e      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d019      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008500:	4b23      	ldr	r3, [pc, #140]	@ (8008590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800850a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800850c:	4b20      	ldr	r3, [pc, #128]	@ (8008590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800850e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008512:	4a1f      	ldr	r2, [pc, #124]	@ (8008590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800851c:	4b1c      	ldr	r3, [pc, #112]	@ (8008590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800851e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008522:	4a1b      	ldr	r2, [pc, #108]	@ (8008590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008524:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008528:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800852c:	4a18      	ldr	r2, [pc, #96]	@ (8008590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b00      	cmp	r3, #0
 800853c:	d016      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800853e:	f7fd f80f 	bl	8005560 <HAL_GetTick>
 8008542:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008544:	e00b      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008546:	f7fd f80b 	bl	8005560 <HAL_GetTick>
 800854a:	4602      	mov	r2, r0
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008554:	4293      	cmp	r3, r2
 8008556:	d902      	bls.n	800855e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008558:	2303      	movs	r3, #3
 800855a:	74fb      	strb	r3, [r7, #19]
            break;
 800855c:	e006      	b.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800855e:	4b0c      	ldr	r3, [pc, #48]	@ (8008590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008564:	f003 0302 	and.w	r3, r3, #2
 8008568:	2b00      	cmp	r3, #0
 800856a:	d0ec      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800856c:	7cfb      	ldrb	r3, [r7, #19]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10b      	bne.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008572:	4b07      	ldr	r3, [pc, #28]	@ (8008590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008578:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008580:	4903      	ldr	r1, [pc, #12]	@ (8008590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008582:	4313      	orrs	r3, r2
 8008584:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008588:	e008      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800858a:	7cfb      	ldrb	r3, [r7, #19]
 800858c:	74bb      	strb	r3, [r7, #18]
 800858e:	e005      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008590:	40021000 	.word	0x40021000
 8008594:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008598:	7cfb      	ldrb	r3, [r7, #19]
 800859a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800859c:	7c7b      	ldrb	r3, [r7, #17]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d105      	bne.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085a2:	4ba7      	ldr	r3, [pc, #668]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085a6:	4aa6      	ldr	r2, [pc, #664]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00a      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80085ba:	4ba1      	ldr	r3, [pc, #644]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085c0:	f023 0203 	bic.w	r2, r3, #3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	499d      	ldr	r1, [pc, #628]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0302 	and.w	r3, r3, #2
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00a      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80085dc:	4b98      	ldr	r3, [pc, #608]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085e2:	f023 020c 	bic.w	r2, r3, #12
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	4995      	ldr	r1, [pc, #596]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ec:	4313      	orrs	r3, r2
 80085ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 0304 	and.w	r3, r3, #4
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00a      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80085fe:	4b90      	ldr	r3, [pc, #576]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008604:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	498c      	ldr	r1, [pc, #560]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800860e:	4313      	orrs	r3, r2
 8008610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0308 	and.w	r3, r3, #8
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00a      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008620:	4b87      	ldr	r3, [pc, #540]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008626:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	4984      	ldr	r1, [pc, #528]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008630:	4313      	orrs	r3, r2
 8008632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 0310 	and.w	r3, r3, #16
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00a      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008642:	4b7f      	ldr	r3, [pc, #508]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008648:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	497b      	ldr	r1, [pc, #492]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008652:	4313      	orrs	r3, r2
 8008654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 0320 	and.w	r3, r3, #32
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00a      	beq.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008664:	4b76      	ldr	r3, [pc, #472]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800866a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	4973      	ldr	r1, [pc, #460]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008674:	4313      	orrs	r3, r2
 8008676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00a      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008686:	4b6e      	ldr	r3, [pc, #440]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800868c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	69db      	ldr	r3, [r3, #28]
 8008694:	496a      	ldr	r1, [pc, #424]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008696:	4313      	orrs	r3, r2
 8008698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00a      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80086a8:	4b65      	ldr	r3, [pc, #404]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	4962      	ldr	r1, [pc, #392]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80086ca:	4b5d      	ldr	r3, [pc, #372]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d8:	4959      	ldr	r1, [pc, #356]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00a      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80086ec:	4b54      	ldr	r3, [pc, #336]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086f2:	f023 0203 	bic.w	r2, r3, #3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086fa:	4951      	ldr	r1, [pc, #324]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00a      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800870e:	4b4c      	ldr	r3, [pc, #304]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008714:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800871c:	4948      	ldr	r1, [pc, #288]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800871e:	4313      	orrs	r3, r2
 8008720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800872c:	2b00      	cmp	r3, #0
 800872e:	d015      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008730:	4b43      	ldr	r3, [pc, #268]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008736:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800873e:	4940      	ldr	r1, [pc, #256]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008740:	4313      	orrs	r3, r2
 8008742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800874a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800874e:	d105      	bne.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008750:	4b3b      	ldr	r3, [pc, #236]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	4a3a      	ldr	r2, [pc, #232]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008756:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800875a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008764:	2b00      	cmp	r3, #0
 8008766:	d015      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008768:	4b35      	ldr	r3, [pc, #212]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800876a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800876e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008776:	4932      	ldr	r1, [pc, #200]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008778:	4313      	orrs	r3, r2
 800877a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008782:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008786:	d105      	bne.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008788:	4b2d      	ldr	r3, [pc, #180]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	4a2c      	ldr	r2, [pc, #176]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800878e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008792:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d015      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80087a0:	4b27      	ldr	r3, [pc, #156]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ae:	4924      	ldr	r1, [pc, #144]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087be:	d105      	bne.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80087c0:	4b1f      	ldr	r3, [pc, #124]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	4a1e      	ldr	r2, [pc, #120]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d015      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087d8:	4b19      	ldr	r3, [pc, #100]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087e6:	4916      	ldr	r1, [pc, #88]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087e8:	4313      	orrs	r3, r2
 80087ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087f6:	d105      	bne.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80087f8:	4b11      	ldr	r3, [pc, #68]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	4a10      	ldr	r2, [pc, #64]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008802:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d019      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008810:	4b0b      	ldr	r3, [pc, #44]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008816:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800881e:	4908      	ldr	r1, [pc, #32]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008820:	4313      	orrs	r3, r2
 8008822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800882a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800882e:	d109      	bne.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008830:	4b03      	ldr	r3, [pc, #12]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	4a02      	ldr	r2, [pc, #8]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008836:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800883a:	60d3      	str	r3, [r2, #12]
 800883c:	e002      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800883e:	bf00      	nop
 8008840:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d015      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008850:	4b29      	ldr	r3, [pc, #164]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008856:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800885e:	4926      	ldr	r1, [pc, #152]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008860:	4313      	orrs	r3, r2
 8008862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800886a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800886e:	d105      	bne.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008870:	4b21      	ldr	r3, [pc, #132]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	4a20      	ldr	r2, [pc, #128]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800887a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d015      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008888:	4b1b      	ldr	r3, [pc, #108]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800888a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800888e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008896:	4918      	ldr	r1, [pc, #96]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008898:	4313      	orrs	r3, r2
 800889a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088a6:	d105      	bne.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80088a8:	4b13      	ldr	r3, [pc, #76]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	4a12      	ldr	r2, [pc, #72]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80088ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d015      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80088c0:	4b0d      	ldr	r3, [pc, #52]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80088c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088ce:	490a      	ldr	r1, [pc, #40]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80088d0:	4313      	orrs	r3, r2
 80088d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088de:	d105      	bne.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088e0:	4b05      	ldr	r3, [pc, #20]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	4a04      	ldr	r2, [pc, #16]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80088e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80088ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	40021000 	.word	0x40021000

080088fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d101      	bne.n	800890e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e054      	b.n	80089b8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	d111      	bne.n	800893e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f001 feec 	bl	800a700 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800892c:	2b00      	cmp	r3, #0
 800892e:	d102      	bne.n	8008936 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a23      	ldr	r2, [pc, #140]	@ (80089c0 <HAL_TIM_Base_Init+0xc4>)
 8008934:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2202      	movs	r2, #2
 8008942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3304      	adds	r3, #4
 800894e:	4619      	mov	r1, r3
 8008950:	4610      	mov	r0, r2
 8008952:	f001 fa35 	bl	8009dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2201      	movs	r2, #1
 800899a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	08004fe5 	.word	0x08004fe5

080089c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d001      	beq.n	80089dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e04c      	b.n	8008a76 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2202      	movs	r2, #2
 80089e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a26      	ldr	r2, [pc, #152]	@ (8008a84 <HAL_TIM_Base_Start+0xc0>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d022      	beq.n	8008a34 <HAL_TIM_Base_Start+0x70>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089f6:	d01d      	beq.n	8008a34 <HAL_TIM_Base_Start+0x70>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a22      	ldr	r2, [pc, #136]	@ (8008a88 <HAL_TIM_Base_Start+0xc4>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d018      	beq.n	8008a34 <HAL_TIM_Base_Start+0x70>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a21      	ldr	r2, [pc, #132]	@ (8008a8c <HAL_TIM_Base_Start+0xc8>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d013      	beq.n	8008a34 <HAL_TIM_Base_Start+0x70>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a1f      	ldr	r2, [pc, #124]	@ (8008a90 <HAL_TIM_Base_Start+0xcc>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d00e      	beq.n	8008a34 <HAL_TIM_Base_Start+0x70>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8008a94 <HAL_TIM_Base_Start+0xd0>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d009      	beq.n	8008a34 <HAL_TIM_Base_Start+0x70>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a1c      	ldr	r2, [pc, #112]	@ (8008a98 <HAL_TIM_Base_Start+0xd4>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d004      	beq.n	8008a34 <HAL_TIM_Base_Start+0x70>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a1b      	ldr	r2, [pc, #108]	@ (8008a9c <HAL_TIM_Base_Start+0xd8>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d115      	bne.n	8008a60 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689a      	ldr	r2, [r3, #8]
 8008a3a:	4b19      	ldr	r3, [pc, #100]	@ (8008aa0 <HAL_TIM_Base_Start+0xdc>)
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b06      	cmp	r3, #6
 8008a44:	d015      	beq.n	8008a72 <HAL_TIM_Base_Start+0xae>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a4c:	d011      	beq.n	8008a72 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f042 0201 	orr.w	r2, r2, #1
 8008a5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a5e:	e008      	b.n	8008a72 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f042 0201 	orr.w	r2, r2, #1
 8008a6e:	601a      	str	r2, [r3, #0]
 8008a70:	e000      	b.n	8008a74 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	40012c00 	.word	0x40012c00
 8008a88:	40000400 	.word	0x40000400
 8008a8c:	40000800 	.word	0x40000800
 8008a90:	40000c00 	.word	0x40000c00
 8008a94:	40013400 	.word	0x40013400
 8008a98:	40014000 	.word	0x40014000
 8008a9c:	40015000 	.word	0x40015000
 8008aa0:	00010007 	.word	0x00010007

08008aa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d001      	beq.n	8008abc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e054      	b.n	8008b66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68da      	ldr	r2, [r3, #12]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f042 0201 	orr.w	r2, r2, #1
 8008ad2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a26      	ldr	r2, [pc, #152]	@ (8008b74 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d022      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x80>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ae6:	d01d      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x80>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a22      	ldr	r2, [pc, #136]	@ (8008b78 <HAL_TIM_Base_Start_IT+0xd4>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d018      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x80>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a21      	ldr	r2, [pc, #132]	@ (8008b7c <HAL_TIM_Base_Start_IT+0xd8>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d013      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x80>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a1f      	ldr	r2, [pc, #124]	@ (8008b80 <HAL_TIM_Base_Start_IT+0xdc>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d00e      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x80>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8008b84 <HAL_TIM_Base_Start_IT+0xe0>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d009      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x80>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a1c      	ldr	r2, [pc, #112]	@ (8008b88 <HAL_TIM_Base_Start_IT+0xe4>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d004      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x80>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8008b8c <HAL_TIM_Base_Start_IT+0xe8>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d115      	bne.n	8008b50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689a      	ldr	r2, [r3, #8]
 8008b2a:	4b19      	ldr	r3, [pc, #100]	@ (8008b90 <HAL_TIM_Base_Start_IT+0xec>)
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b06      	cmp	r3, #6
 8008b34:	d015      	beq.n	8008b62 <HAL_TIM_Base_Start_IT+0xbe>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b3c:	d011      	beq.n	8008b62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f042 0201 	orr.w	r2, r2, #1
 8008b4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b4e:	e008      	b.n	8008b62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f042 0201 	orr.w	r2, r2, #1
 8008b5e:	601a      	str	r2, [r3, #0]
 8008b60:	e000      	b.n	8008b64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	40012c00 	.word	0x40012c00
 8008b78:	40000400 	.word	0x40000400
 8008b7c:	40000800 	.word	0x40000800
 8008b80:	40000c00 	.word	0x40000c00
 8008b84:	40013400 	.word	0x40013400
 8008b88:	40014000 	.word	0x40014000
 8008b8c:	40015000 	.word	0x40015000
 8008b90:	00010007 	.word	0x00010007

08008b94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d101      	bne.n	8008ba6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e054      	b.n	8008c50 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d111      	bne.n	8008bd6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f001 fda0 	bl	800a700 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d102      	bne.n	8008bce <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a23      	ldr	r2, [pc, #140]	@ (8008c58 <HAL_TIM_PWM_Init+0xc4>)
 8008bcc:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2202      	movs	r2, #2
 8008bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	3304      	adds	r3, #4
 8008be6:	4619      	mov	r1, r3
 8008be8:	4610      	mov	r0, r2
 8008bea:	f001 f8e9 	bl	8009dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	08008c5d 	.word	0x08008c5d

08008c5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d109      	bne.n	8008c94 <HAL_TIM_PWM_Start+0x24>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	bf14      	ite	ne
 8008c8c:	2301      	movne	r3, #1
 8008c8e:	2300      	moveq	r3, #0
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	e03c      	b.n	8008d0e <HAL_TIM_PWM_Start+0x9e>
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	2b04      	cmp	r3, #4
 8008c98:	d109      	bne.n	8008cae <HAL_TIM_PWM_Start+0x3e>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	bf14      	ite	ne
 8008ca6:	2301      	movne	r3, #1
 8008ca8:	2300      	moveq	r3, #0
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	e02f      	b.n	8008d0e <HAL_TIM_PWM_Start+0x9e>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b08      	cmp	r3, #8
 8008cb2:	d109      	bne.n	8008cc8 <HAL_TIM_PWM_Start+0x58>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	bf14      	ite	ne
 8008cc0:	2301      	movne	r3, #1
 8008cc2:	2300      	moveq	r3, #0
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	e022      	b.n	8008d0e <HAL_TIM_PWM_Start+0x9e>
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	2b0c      	cmp	r3, #12
 8008ccc:	d109      	bne.n	8008ce2 <HAL_TIM_PWM_Start+0x72>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	bf14      	ite	ne
 8008cda:	2301      	movne	r3, #1
 8008cdc:	2300      	moveq	r3, #0
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	e015      	b.n	8008d0e <HAL_TIM_PWM_Start+0x9e>
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	2b10      	cmp	r3, #16
 8008ce6:	d109      	bne.n	8008cfc <HAL_TIM_PWM_Start+0x8c>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	bf14      	ite	ne
 8008cf4:	2301      	movne	r3, #1
 8008cf6:	2300      	moveq	r3, #0
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	e008      	b.n	8008d0e <HAL_TIM_PWM_Start+0x9e>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	bf14      	ite	ne
 8008d08:	2301      	movne	r3, #1
 8008d0a:	2300      	moveq	r3, #0
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e0a6      	b.n	8008e64 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d104      	bne.n	8008d26 <HAL_TIM_PWM_Start+0xb6>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d24:	e023      	b.n	8008d6e <HAL_TIM_PWM_Start+0xfe>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b04      	cmp	r3, #4
 8008d2a:	d104      	bne.n	8008d36 <HAL_TIM_PWM_Start+0xc6>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2202      	movs	r2, #2
 8008d30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d34:	e01b      	b.n	8008d6e <HAL_TIM_PWM_Start+0xfe>
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b08      	cmp	r3, #8
 8008d3a:	d104      	bne.n	8008d46 <HAL_TIM_PWM_Start+0xd6>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d44:	e013      	b.n	8008d6e <HAL_TIM_PWM_Start+0xfe>
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b0c      	cmp	r3, #12
 8008d4a:	d104      	bne.n	8008d56 <HAL_TIM_PWM_Start+0xe6>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2202      	movs	r2, #2
 8008d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d54:	e00b      	b.n	8008d6e <HAL_TIM_PWM_Start+0xfe>
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b10      	cmp	r3, #16
 8008d5a:	d104      	bne.n	8008d66 <HAL_TIM_PWM_Start+0xf6>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2202      	movs	r2, #2
 8008d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d64:	e003      	b.n	8008d6e <HAL_TIM_PWM_Start+0xfe>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2202      	movs	r2, #2
 8008d6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2201      	movs	r2, #1
 8008d74:	6839      	ldr	r1, [r7, #0]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f001 fc9c 	bl	800a6b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a3a      	ldr	r2, [pc, #232]	@ (8008e6c <HAL_TIM_PWM_Start+0x1fc>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d018      	beq.n	8008db8 <HAL_TIM_PWM_Start+0x148>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a39      	ldr	r2, [pc, #228]	@ (8008e70 <HAL_TIM_PWM_Start+0x200>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d013      	beq.n	8008db8 <HAL_TIM_PWM_Start+0x148>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a37      	ldr	r2, [pc, #220]	@ (8008e74 <HAL_TIM_PWM_Start+0x204>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d00e      	beq.n	8008db8 <HAL_TIM_PWM_Start+0x148>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a36      	ldr	r2, [pc, #216]	@ (8008e78 <HAL_TIM_PWM_Start+0x208>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d009      	beq.n	8008db8 <HAL_TIM_PWM_Start+0x148>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a34      	ldr	r2, [pc, #208]	@ (8008e7c <HAL_TIM_PWM_Start+0x20c>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d004      	beq.n	8008db8 <HAL_TIM_PWM_Start+0x148>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a33      	ldr	r2, [pc, #204]	@ (8008e80 <HAL_TIM_PWM_Start+0x210>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d101      	bne.n	8008dbc <HAL_TIM_PWM_Start+0x14c>
 8008db8:	2301      	movs	r3, #1
 8008dba:	e000      	b.n	8008dbe <HAL_TIM_PWM_Start+0x14e>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d007      	beq.n	8008dd2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008dd0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a25      	ldr	r2, [pc, #148]	@ (8008e6c <HAL_TIM_PWM_Start+0x1fc>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d022      	beq.n	8008e22 <HAL_TIM_PWM_Start+0x1b2>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008de4:	d01d      	beq.n	8008e22 <HAL_TIM_PWM_Start+0x1b2>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a26      	ldr	r2, [pc, #152]	@ (8008e84 <HAL_TIM_PWM_Start+0x214>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d018      	beq.n	8008e22 <HAL_TIM_PWM_Start+0x1b2>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a24      	ldr	r2, [pc, #144]	@ (8008e88 <HAL_TIM_PWM_Start+0x218>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d013      	beq.n	8008e22 <HAL_TIM_PWM_Start+0x1b2>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a23      	ldr	r2, [pc, #140]	@ (8008e8c <HAL_TIM_PWM_Start+0x21c>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d00e      	beq.n	8008e22 <HAL_TIM_PWM_Start+0x1b2>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a19      	ldr	r2, [pc, #100]	@ (8008e70 <HAL_TIM_PWM_Start+0x200>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d009      	beq.n	8008e22 <HAL_TIM_PWM_Start+0x1b2>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a18      	ldr	r2, [pc, #96]	@ (8008e74 <HAL_TIM_PWM_Start+0x204>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d004      	beq.n	8008e22 <HAL_TIM_PWM_Start+0x1b2>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a18      	ldr	r2, [pc, #96]	@ (8008e80 <HAL_TIM_PWM_Start+0x210>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d115      	bne.n	8008e4e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	689a      	ldr	r2, [r3, #8]
 8008e28:	4b19      	ldr	r3, [pc, #100]	@ (8008e90 <HAL_TIM_PWM_Start+0x220>)
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2b06      	cmp	r3, #6
 8008e32:	d015      	beq.n	8008e60 <HAL_TIM_PWM_Start+0x1f0>
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e3a:	d011      	beq.n	8008e60 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f042 0201 	orr.w	r2, r2, #1
 8008e4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e4c:	e008      	b.n	8008e60 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f042 0201 	orr.w	r2, r2, #1
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	e000      	b.n	8008e62 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	40012c00 	.word	0x40012c00
 8008e70:	40013400 	.word	0x40013400
 8008e74:	40014000 	.word	0x40014000
 8008e78:	40014400 	.word	0x40014400
 8008e7c:	40014800 	.word	0x40014800
 8008e80:	40015000 	.word	0x40015000
 8008e84:	40000400 	.word	0x40000400
 8008e88:	40000800 	.word	0x40000800
 8008e8c:	40000c00 	.word	0x40000c00
 8008e90:	00010007 	.word	0x00010007

08008e94 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d101      	bne.n	8008ea8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e04c      	b.n	8008f42 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d111      	bne.n	8008ed8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f001 fc1f 	bl	800a700 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d102      	bne.n	8008ed0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8008f4c <HAL_TIM_OnePulse_Init+0xb8>)
 8008ece:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2202      	movs	r2, #2
 8008edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4610      	mov	r0, r2
 8008eec:	f000 ff68 	bl	8009dc0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f022 0208 	bic.w	r2, r2, #8
 8008efe:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6819      	ldr	r1, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	430a      	orrs	r2, r1
 8008f0e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	08008f51 	.word	0x08008f51

08008f50 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008f74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008f7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f8c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d108      	bne.n	8008fa6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d105      	bne.n	8008fa6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f9a:	7b7b      	ldrb	r3, [r7, #13]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d102      	bne.n	8008fa6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008fa0:	7b3b      	ldrb	r3, [r7, #12]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d001      	beq.n	8008faa <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e059      	b.n	800905e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2202      	movs	r2, #2
 8008fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2202      	movs	r2, #2
 8008fb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2202      	movs	r2, #2
 8008fbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68da      	ldr	r2, [r3, #12]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f042 0202 	orr.w	r2, r2, #2
 8008fd8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68da      	ldr	r2, [r3, #12]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f042 0204 	orr.w	r2, r2, #4
 8008fe8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f001 fb5e 	bl	800a6b4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	2104      	movs	r1, #4
 8009000:	4618      	mov	r0, r3
 8009002:	f001 fb57 	bl	800a6b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a17      	ldr	r2, [pc, #92]	@ (8009068 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d018      	beq.n	8009042 <HAL_TIM_OnePulse_Start_IT+0xde>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a15      	ldr	r2, [pc, #84]	@ (800906c <HAL_TIM_OnePulse_Start_IT+0x108>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d013      	beq.n	8009042 <HAL_TIM_OnePulse_Start_IT+0xde>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a14      	ldr	r2, [pc, #80]	@ (8009070 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d00e      	beq.n	8009042 <HAL_TIM_OnePulse_Start_IT+0xde>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a12      	ldr	r2, [pc, #72]	@ (8009074 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d009      	beq.n	8009042 <HAL_TIM_OnePulse_Start_IT+0xde>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a11      	ldr	r2, [pc, #68]	@ (8009078 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d004      	beq.n	8009042 <HAL_TIM_OnePulse_Start_IT+0xde>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a0f      	ldr	r2, [pc, #60]	@ (800907c <HAL_TIM_OnePulse_Start_IT+0x118>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d101      	bne.n	8009046 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8009042:	2301      	movs	r3, #1
 8009044:	e000      	b.n	8009048 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8009046:	2300      	movs	r3, #0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d007      	beq.n	800905c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800905a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	40012c00 	.word	0x40012c00
 800906c:	40013400 	.word	0x40013400
 8009070:	40014000 	.word	0x40014000
 8009074:	40014400 	.word	0x40014400
 8009078:	40014800 	.word	0x40014800
 800907c:	40015000 	.word	0x40015000

08009080 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d101      	bne.n	8009094 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e0a2      	b.n	80091da <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b00      	cmp	r3, #0
 800909e:	d111      	bne.n	80090c4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f001 fb29 	bl	800a700 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d102      	bne.n	80090bc <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a4a      	ldr	r2, [pc, #296]	@ (80091e4 <HAL_TIM_Encoder_Init+0x164>)
 80090ba:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2202      	movs	r2, #2
 80090c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	6812      	ldr	r2, [r2, #0]
 80090d6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80090da:	f023 0307 	bic.w	r3, r3, #7
 80090de:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3304      	adds	r3, #4
 80090e8:	4619      	mov	r1, r3
 80090ea:	4610      	mov	r0, r2
 80090ec:	f000 fe68 	bl	8009dc0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	4313      	orrs	r3, r2
 8009110:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009118:	f023 0303 	bic.w	r3, r3, #3
 800911c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	689a      	ldr	r2, [r3, #8]
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	021b      	lsls	r3, r3, #8
 8009128:	4313      	orrs	r3, r2
 800912a:	693a      	ldr	r2, [r7, #16]
 800912c:	4313      	orrs	r3, r2
 800912e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009136:	f023 030c 	bic.w	r3, r3, #12
 800913a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009142:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	68da      	ldr	r2, [r3, #12]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	69db      	ldr	r3, [r3, #28]
 8009150:	021b      	lsls	r3, r3, #8
 8009152:	4313      	orrs	r3, r2
 8009154:	693a      	ldr	r2, [r7, #16]
 8009156:	4313      	orrs	r3, r2
 8009158:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	011a      	lsls	r2, r3, #4
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	6a1b      	ldr	r3, [r3, #32]
 8009164:	031b      	lsls	r3, r3, #12
 8009166:	4313      	orrs	r3, r2
 8009168:	693a      	ldr	r2, [r7, #16]
 800916a:	4313      	orrs	r3, r2
 800916c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009174:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800917c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	685a      	ldr	r2, [r3, #4]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	695b      	ldr	r3, [r3, #20]
 8009186:	011b      	lsls	r3, r3, #4
 8009188:	4313      	orrs	r3, r2
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	4313      	orrs	r3, r2
 800918e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3718      	adds	r7, #24
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	08004f61 	.word	0x08004f61

080091e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80091f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009200:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009208:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009210:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d110      	bne.n	800923a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009218:	7bfb      	ldrb	r3, [r7, #15]
 800921a:	2b01      	cmp	r3, #1
 800921c:	d102      	bne.n	8009224 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800921e:	7b7b      	ldrb	r3, [r7, #13]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d001      	beq.n	8009228 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	e069      	b.n	80092fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2202      	movs	r2, #2
 800922c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2202      	movs	r2, #2
 8009234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009238:	e031      	b.n	800929e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	2b04      	cmp	r3, #4
 800923e:	d110      	bne.n	8009262 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009240:	7bbb      	ldrb	r3, [r7, #14]
 8009242:	2b01      	cmp	r3, #1
 8009244:	d102      	bne.n	800924c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009246:	7b3b      	ldrb	r3, [r7, #12]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d001      	beq.n	8009250 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	e055      	b.n	80092fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2202      	movs	r2, #2
 8009254:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2202      	movs	r2, #2
 800925c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009260:	e01d      	b.n	800929e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009262:	7bfb      	ldrb	r3, [r7, #15]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d108      	bne.n	800927a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009268:	7bbb      	ldrb	r3, [r7, #14]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d105      	bne.n	800927a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800926e:	7b7b      	ldrb	r3, [r7, #13]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d102      	bne.n	800927a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009274:	7b3b      	ldrb	r3, [r7, #12]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d001      	beq.n	800927e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e03e      	b.n	80092fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2202      	movs	r2, #2
 8009282:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2202      	movs	r2, #2
 800928a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2202      	movs	r2, #2
 8009292:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2202      	movs	r2, #2
 800929a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d003      	beq.n	80092ac <HAL_TIM_Encoder_Start+0xc4>
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	2b04      	cmp	r3, #4
 80092a8:	d008      	beq.n	80092bc <HAL_TIM_Encoder_Start+0xd4>
 80092aa:	e00f      	b.n	80092cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2201      	movs	r2, #1
 80092b2:	2100      	movs	r1, #0
 80092b4:	4618      	mov	r0, r3
 80092b6:	f001 f9fd 	bl	800a6b4 <TIM_CCxChannelCmd>
      break;
 80092ba:	e016      	b.n	80092ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2201      	movs	r2, #1
 80092c2:	2104      	movs	r1, #4
 80092c4:	4618      	mov	r0, r3
 80092c6:	f001 f9f5 	bl	800a6b4 <TIM_CCxChannelCmd>
      break;
 80092ca:	e00e      	b.n	80092ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2201      	movs	r2, #1
 80092d2:	2100      	movs	r1, #0
 80092d4:	4618      	mov	r0, r3
 80092d6:	f001 f9ed 	bl	800a6b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2201      	movs	r2, #1
 80092e0:	2104      	movs	r1, #4
 80092e2:	4618      	mov	r0, r3
 80092e4:	f001 f9e6 	bl	800a6b4 <TIM_CCxChannelCmd>
      break;
 80092e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f042 0201 	orr.w	r2, r2, #1
 80092f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	f003 0302 	and.w	r3, r3, #2
 8009322:	2b00      	cmp	r3, #0
 8009324:	d026      	beq.n	8009374 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f003 0302 	and.w	r3, r3, #2
 800932c:	2b00      	cmp	r3, #0
 800932e:	d021      	beq.n	8009374 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f06f 0202 	mvn.w	r2, #2
 8009338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	f003 0303 	and.w	r3, r3, #3
 800934a:	2b00      	cmp	r3, #0
 800934c:	d005      	beq.n	800935a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	4798      	blx	r3
 8009358:	e009      	b.n	800936e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	f003 0304 	and.w	r3, r3, #4
 800937a:	2b00      	cmp	r3, #0
 800937c:	d026      	beq.n	80093cc <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f003 0304 	and.w	r3, r3, #4
 8009384:	2b00      	cmp	r3, #0
 8009386:	d021      	beq.n	80093cc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f06f 0204 	mvn.w	r2, #4
 8009390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2202      	movs	r2, #2
 8009396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d005      	beq.n	80093b2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	4798      	blx	r3
 80093b0:	e009      	b.n	80093c6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	f003 0308 	and.w	r3, r3, #8
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d026      	beq.n	8009424 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f003 0308 	and.w	r3, r3, #8
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d021      	beq.n	8009424 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f06f 0208 	mvn.w	r2, #8
 80093e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2204      	movs	r2, #4
 80093ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	69db      	ldr	r3, [r3, #28]
 80093f6:	f003 0303 	and.w	r3, r3, #3
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d005      	beq.n	800940a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	4798      	blx	r3
 8009408:	e009      	b.n	800941e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	f003 0310 	and.w	r3, r3, #16
 800942a:	2b00      	cmp	r3, #0
 800942c:	d026      	beq.n	800947c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f003 0310 	and.w	r3, r3, #16
 8009434:	2b00      	cmp	r3, #0
 8009436:	d021      	beq.n	800947c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f06f 0210 	mvn.w	r2, #16
 8009440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2208      	movs	r2, #8
 8009446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	69db      	ldr	r3, [r3, #28]
 800944e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009452:	2b00      	cmp	r3, #0
 8009454:	d005      	beq.n	8009462 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	4798      	blx	r3
 8009460:	e009      	b.n	8009476 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	f003 0301 	and.w	r3, r3, #1
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00e      	beq.n	80094a4 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f003 0301 	and.w	r3, r3, #1
 800948c:	2b00      	cmp	r3, #0
 800948e:	d009      	beq.n	80094a4 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f06f 0201 	mvn.w	r2, #1
 8009498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d104      	bne.n	80094b8 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00e      	beq.n	80094d6 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d009      	beq.n	80094d6 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80094ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00e      	beq.n	80094fe <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d009      	beq.n	80094fe <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80094f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00e      	beq.n	8009526 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800950e:	2b00      	cmp	r3, #0
 8009510:	d009      	beq.n	8009526 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800951a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	f003 0320 	and.w	r3, r3, #32
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00e      	beq.n	800954e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f003 0320 	and.w	r3, r3, #32
 8009536:	2b00      	cmp	r3, #0
 8009538:	d009      	beq.n	800954e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f06f 0220 	mvn.w	r2, #32
 8009542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00e      	beq.n	8009576 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d009      	beq.n	8009576 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800956a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00e      	beq.n	800959e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009586:	2b00      	cmp	r3, #0
 8009588:	d009      	beq.n	800959e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00e      	beq.n	80095c6 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d009      	beq.n	80095c6 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80095ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00e      	beq.n	80095ee <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d009      	beq.n	80095ee <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80095e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095ee:	bf00      	nop
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
	...

080095f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800960e:	2b01      	cmp	r3, #1
 8009610:	d101      	bne.n	8009616 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009612:	2302      	movs	r3, #2
 8009614:	e0ff      	b.n	8009816 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b14      	cmp	r3, #20
 8009622:	f200 80f0 	bhi.w	8009806 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009626:	a201      	add	r2, pc, #4	@ (adr r2, 800962c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800962c:	08009681 	.word	0x08009681
 8009630:	08009807 	.word	0x08009807
 8009634:	08009807 	.word	0x08009807
 8009638:	08009807 	.word	0x08009807
 800963c:	080096c1 	.word	0x080096c1
 8009640:	08009807 	.word	0x08009807
 8009644:	08009807 	.word	0x08009807
 8009648:	08009807 	.word	0x08009807
 800964c:	08009703 	.word	0x08009703
 8009650:	08009807 	.word	0x08009807
 8009654:	08009807 	.word	0x08009807
 8009658:	08009807 	.word	0x08009807
 800965c:	08009743 	.word	0x08009743
 8009660:	08009807 	.word	0x08009807
 8009664:	08009807 	.word	0x08009807
 8009668:	08009807 	.word	0x08009807
 800966c:	08009785 	.word	0x08009785
 8009670:	08009807 	.word	0x08009807
 8009674:	08009807 	.word	0x08009807
 8009678:	08009807 	.word	0x08009807
 800967c:	080097c5 	.word	0x080097c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68b9      	ldr	r1, [r7, #8]
 8009686:	4618      	mov	r0, r3
 8009688:	f000 fc4e 	bl	8009f28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	699a      	ldr	r2, [r3, #24]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f042 0208 	orr.w	r2, r2, #8
 800969a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	699a      	ldr	r2, [r3, #24]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f022 0204 	bic.w	r2, r2, #4
 80096aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6999      	ldr	r1, [r3, #24]
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	691a      	ldr	r2, [r3, #16]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	430a      	orrs	r2, r1
 80096bc:	619a      	str	r2, [r3, #24]
      break;
 80096be:	e0a5      	b.n	800980c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68b9      	ldr	r1, [r7, #8]
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 fcc8 	bl	800a05c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	699a      	ldr	r2, [r3, #24]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80096da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	699a      	ldr	r2, [r3, #24]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80096ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6999      	ldr	r1, [r3, #24]
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	021a      	lsls	r2, r3, #8
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	430a      	orrs	r2, r1
 80096fe:	619a      	str	r2, [r3, #24]
      break;
 8009700:	e084      	b.n	800980c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	68b9      	ldr	r1, [r7, #8]
 8009708:	4618      	mov	r0, r3
 800970a:	f000 fd3b 	bl	800a184 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	69da      	ldr	r2, [r3, #28]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f042 0208 	orr.w	r2, r2, #8
 800971c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	69da      	ldr	r2, [r3, #28]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f022 0204 	bic.w	r2, r2, #4
 800972c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	69d9      	ldr	r1, [r3, #28]
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	691a      	ldr	r2, [r3, #16]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	430a      	orrs	r2, r1
 800973e:	61da      	str	r2, [r3, #28]
      break;
 8009740:	e064      	b.n	800980c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68b9      	ldr	r1, [r7, #8]
 8009748:	4618      	mov	r0, r3
 800974a:	f000 fdad 	bl	800a2a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	69da      	ldr	r2, [r3, #28]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800975c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	69da      	ldr	r2, [r3, #28]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800976c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	69d9      	ldr	r1, [r3, #28]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	021a      	lsls	r2, r3, #8
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	430a      	orrs	r2, r1
 8009780:	61da      	str	r2, [r3, #28]
      break;
 8009782:	e043      	b.n	800980c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68b9      	ldr	r1, [r7, #8]
 800978a:	4618      	mov	r0, r3
 800978c:	f000 fe20 	bl	800a3d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f042 0208 	orr.w	r2, r2, #8
 800979e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f022 0204 	bic.w	r2, r2, #4
 80097ae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	691a      	ldr	r2, [r3, #16]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	430a      	orrs	r2, r1
 80097c0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80097c2:	e023      	b.n	800980c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68b9      	ldr	r1, [r7, #8]
 80097ca:	4618      	mov	r0, r3
 80097cc:	f000 fe6a 	bl	800a4a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097ee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	021a      	lsls	r2, r3, #8
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	430a      	orrs	r2, r1
 8009802:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009804:	e002      	b.n	800980c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	75fb      	strb	r3, [r7, #23]
      break;
 800980a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009814:	7dfb      	ldrb	r3, [r7, #23]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3718      	adds	r7, #24
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop

08009820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009834:	2b01      	cmp	r3, #1
 8009836:	d101      	bne.n	800983c <HAL_TIM_ConfigClockSource+0x1c>
 8009838:	2302      	movs	r3, #2
 800983a:	e0f6      	b.n	8009a2a <HAL_TIM_ConfigClockSource+0x20a>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2202      	movs	r2, #2
 8009848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800985a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800985e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68ba      	ldr	r2, [r7, #8]
 800986e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a6f      	ldr	r2, [pc, #444]	@ (8009a34 <HAL_TIM_ConfigClockSource+0x214>)
 8009876:	4293      	cmp	r3, r2
 8009878:	f000 80c1 	beq.w	80099fe <HAL_TIM_ConfigClockSource+0x1de>
 800987c:	4a6d      	ldr	r2, [pc, #436]	@ (8009a34 <HAL_TIM_ConfigClockSource+0x214>)
 800987e:	4293      	cmp	r3, r2
 8009880:	f200 80c6 	bhi.w	8009a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8009884:	4a6c      	ldr	r2, [pc, #432]	@ (8009a38 <HAL_TIM_ConfigClockSource+0x218>)
 8009886:	4293      	cmp	r3, r2
 8009888:	f000 80b9 	beq.w	80099fe <HAL_TIM_ConfigClockSource+0x1de>
 800988c:	4a6a      	ldr	r2, [pc, #424]	@ (8009a38 <HAL_TIM_ConfigClockSource+0x218>)
 800988e:	4293      	cmp	r3, r2
 8009890:	f200 80be 	bhi.w	8009a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8009894:	4a69      	ldr	r2, [pc, #420]	@ (8009a3c <HAL_TIM_ConfigClockSource+0x21c>)
 8009896:	4293      	cmp	r3, r2
 8009898:	f000 80b1 	beq.w	80099fe <HAL_TIM_ConfigClockSource+0x1de>
 800989c:	4a67      	ldr	r2, [pc, #412]	@ (8009a3c <HAL_TIM_ConfigClockSource+0x21c>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	f200 80b6 	bhi.w	8009a10 <HAL_TIM_ConfigClockSource+0x1f0>
 80098a4:	4a66      	ldr	r2, [pc, #408]	@ (8009a40 <HAL_TIM_ConfigClockSource+0x220>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	f000 80a9 	beq.w	80099fe <HAL_TIM_ConfigClockSource+0x1de>
 80098ac:	4a64      	ldr	r2, [pc, #400]	@ (8009a40 <HAL_TIM_ConfigClockSource+0x220>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	f200 80ae 	bhi.w	8009a10 <HAL_TIM_ConfigClockSource+0x1f0>
 80098b4:	4a63      	ldr	r2, [pc, #396]	@ (8009a44 <HAL_TIM_ConfigClockSource+0x224>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	f000 80a1 	beq.w	80099fe <HAL_TIM_ConfigClockSource+0x1de>
 80098bc:	4a61      	ldr	r2, [pc, #388]	@ (8009a44 <HAL_TIM_ConfigClockSource+0x224>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	f200 80a6 	bhi.w	8009a10 <HAL_TIM_ConfigClockSource+0x1f0>
 80098c4:	4a60      	ldr	r2, [pc, #384]	@ (8009a48 <HAL_TIM_ConfigClockSource+0x228>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	f000 8099 	beq.w	80099fe <HAL_TIM_ConfigClockSource+0x1de>
 80098cc:	4a5e      	ldr	r2, [pc, #376]	@ (8009a48 <HAL_TIM_ConfigClockSource+0x228>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	f200 809e 	bhi.w	8009a10 <HAL_TIM_ConfigClockSource+0x1f0>
 80098d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80098d8:	f000 8091 	beq.w	80099fe <HAL_TIM_ConfigClockSource+0x1de>
 80098dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80098e0:	f200 8096 	bhi.w	8009a10 <HAL_TIM_ConfigClockSource+0x1f0>
 80098e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098e8:	f000 8089 	beq.w	80099fe <HAL_TIM_ConfigClockSource+0x1de>
 80098ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098f0:	f200 808e 	bhi.w	8009a10 <HAL_TIM_ConfigClockSource+0x1f0>
 80098f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098f8:	d03e      	beq.n	8009978 <HAL_TIM_ConfigClockSource+0x158>
 80098fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098fe:	f200 8087 	bhi.w	8009a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8009902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009906:	f000 8086 	beq.w	8009a16 <HAL_TIM_ConfigClockSource+0x1f6>
 800990a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800990e:	d87f      	bhi.n	8009a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8009910:	2b70      	cmp	r3, #112	@ 0x70
 8009912:	d01a      	beq.n	800994a <HAL_TIM_ConfigClockSource+0x12a>
 8009914:	2b70      	cmp	r3, #112	@ 0x70
 8009916:	d87b      	bhi.n	8009a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8009918:	2b60      	cmp	r3, #96	@ 0x60
 800991a:	d050      	beq.n	80099be <HAL_TIM_ConfigClockSource+0x19e>
 800991c:	2b60      	cmp	r3, #96	@ 0x60
 800991e:	d877      	bhi.n	8009a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8009920:	2b50      	cmp	r3, #80	@ 0x50
 8009922:	d03c      	beq.n	800999e <HAL_TIM_ConfigClockSource+0x17e>
 8009924:	2b50      	cmp	r3, #80	@ 0x50
 8009926:	d873      	bhi.n	8009a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8009928:	2b40      	cmp	r3, #64	@ 0x40
 800992a:	d058      	beq.n	80099de <HAL_TIM_ConfigClockSource+0x1be>
 800992c:	2b40      	cmp	r3, #64	@ 0x40
 800992e:	d86f      	bhi.n	8009a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8009930:	2b30      	cmp	r3, #48	@ 0x30
 8009932:	d064      	beq.n	80099fe <HAL_TIM_ConfigClockSource+0x1de>
 8009934:	2b30      	cmp	r3, #48	@ 0x30
 8009936:	d86b      	bhi.n	8009a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8009938:	2b20      	cmp	r3, #32
 800993a:	d060      	beq.n	80099fe <HAL_TIM_ConfigClockSource+0x1de>
 800993c:	2b20      	cmp	r3, #32
 800993e:	d867      	bhi.n	8009a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8009940:	2b00      	cmp	r3, #0
 8009942:	d05c      	beq.n	80099fe <HAL_TIM_ConfigClockSource+0x1de>
 8009944:	2b10      	cmp	r3, #16
 8009946:	d05a      	beq.n	80099fe <HAL_TIM_ConfigClockSource+0x1de>
 8009948:	e062      	b.n	8009a10 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800995a:	f000 fe8b 	bl	800a674 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800996c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	609a      	str	r2, [r3, #8]
      break;
 8009976:	e04f      	b.n	8009a18 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009988:	f000 fe74 	bl	800a674 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	689a      	ldr	r2, [r3, #8]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800999a:	609a      	str	r2, [r3, #8]
      break;
 800999c:	e03c      	b.n	8009a18 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80099aa:	461a      	mov	r2, r3
 80099ac:	f000 fde6 	bl	800a57c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2150      	movs	r1, #80	@ 0x50
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 fe3f 	bl	800a63a <TIM_ITRx_SetConfig>
      break;
 80099bc:	e02c      	b.n	8009a18 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80099ca:	461a      	mov	r2, r3
 80099cc:	f000 fe05 	bl	800a5da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2160      	movs	r1, #96	@ 0x60
 80099d6:	4618      	mov	r0, r3
 80099d8:	f000 fe2f 	bl	800a63a <TIM_ITRx_SetConfig>
      break;
 80099dc:	e01c      	b.n	8009a18 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80099ea:	461a      	mov	r2, r3
 80099ec:	f000 fdc6 	bl	800a57c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2140      	movs	r1, #64	@ 0x40
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 fe1f 	bl	800a63a <TIM_ITRx_SetConfig>
      break;
 80099fc:	e00c      	b.n	8009a18 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4619      	mov	r1, r3
 8009a08:	4610      	mov	r0, r2
 8009a0a:	f000 fe16 	bl	800a63a <TIM_ITRx_SetConfig>
      break;
 8009a0e:	e003      	b.n	8009a18 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	73fb      	strb	r3, [r7, #15]
      break;
 8009a14:	e000      	b.n	8009a18 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009a16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	00100070 	.word	0x00100070
 8009a38:	00100060 	.word	0x00100060
 8009a3c:	00100050 	.word	0x00100050
 8009a40:	00100040 	.word	0x00100040
 8009a44:	00100030 	.word	0x00100030
 8009a48:	00100020 	.word	0x00100020

08009a4c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009aa4:	bf00      	nop
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b087      	sub	sp, #28
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	607a      	str	r2, [r7, #4]
 8009b0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d101      	bne.n	8009b1c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e14a      	b.n	8009db2 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	f040 80dd 	bne.w	8009ce4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8009b2a:	7afb      	ldrb	r3, [r7, #11]
 8009b2c:	2b1f      	cmp	r3, #31
 8009b2e:	f200 80d6 	bhi.w	8009cde <HAL_TIM_RegisterCallback+0x1de>
 8009b32:	a201      	add	r2, pc, #4	@ (adr r2, 8009b38 <HAL_TIM_RegisterCallback+0x38>)
 8009b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b38:	08009bb9 	.word	0x08009bb9
 8009b3c:	08009bc1 	.word	0x08009bc1
 8009b40:	08009bc9 	.word	0x08009bc9
 8009b44:	08009bd1 	.word	0x08009bd1
 8009b48:	08009bd9 	.word	0x08009bd9
 8009b4c:	08009be1 	.word	0x08009be1
 8009b50:	08009be9 	.word	0x08009be9
 8009b54:	08009bf1 	.word	0x08009bf1
 8009b58:	08009bf9 	.word	0x08009bf9
 8009b5c:	08009c01 	.word	0x08009c01
 8009b60:	08009c09 	.word	0x08009c09
 8009b64:	08009c11 	.word	0x08009c11
 8009b68:	08009c19 	.word	0x08009c19
 8009b6c:	08009c21 	.word	0x08009c21
 8009b70:	08009c2b 	.word	0x08009c2b
 8009b74:	08009c35 	.word	0x08009c35
 8009b78:	08009c3f 	.word	0x08009c3f
 8009b7c:	08009c49 	.word	0x08009c49
 8009b80:	08009c53 	.word	0x08009c53
 8009b84:	08009c5d 	.word	0x08009c5d
 8009b88:	08009c67 	.word	0x08009c67
 8009b8c:	08009c71 	.word	0x08009c71
 8009b90:	08009c7b 	.word	0x08009c7b
 8009b94:	08009c85 	.word	0x08009c85
 8009b98:	08009c8f 	.word	0x08009c8f
 8009b9c:	08009c99 	.word	0x08009c99
 8009ba0:	08009ca3 	.word	0x08009ca3
 8009ba4:	08009cad 	.word	0x08009cad
 8009ba8:	08009cb7 	.word	0x08009cb7
 8009bac:	08009cc1 	.word	0x08009cc1
 8009bb0:	08009ccb 	.word	0x08009ccb
 8009bb4:	08009cd5 	.word	0x08009cd5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009bbe:	e0f7      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009bc6:	e0f3      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009bce:	e0ef      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009bd6:	e0eb      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009bde:	e0e7      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009be6:	e0e3      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009bee:	e0df      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009bf6:	e0db      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009bfe:	e0d7      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009c06:	e0d3      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009c0e:	e0cf      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009c16:	e0cb      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009c1e:	e0c7      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009c28:	e0c2      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8009c32:	e0bd      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8009c3c:	e0b8      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8009c46:	e0b3      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8009c50:	e0ae      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009c5a:	e0a9      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009c64:	e0a4      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009c6e:	e09f      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009c78:	e09a      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009c82:	e095      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009c8c:	e090      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009c96:	e08b      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009ca0:	e086      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009caa:	e081      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009cb4:	e07c      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009cbe:	e077      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009cc8:	e072      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009cd2:	e06d      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009cdc:	e068      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	75fb      	strb	r3, [r7, #23]
        break;
 8009ce2:	e065      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d15d      	bne.n	8009dac <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8009cf0:	7afb      	ldrb	r3, [r7, #11]
 8009cf2:	2b0d      	cmp	r3, #13
 8009cf4:	d857      	bhi.n	8009da6 <HAL_TIM_RegisterCallback+0x2a6>
 8009cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8009cfc <HAL_TIM_RegisterCallback+0x1fc>)
 8009cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfc:	08009d35 	.word	0x08009d35
 8009d00:	08009d3d 	.word	0x08009d3d
 8009d04:	08009d45 	.word	0x08009d45
 8009d08:	08009d4d 	.word	0x08009d4d
 8009d0c:	08009d55 	.word	0x08009d55
 8009d10:	08009d5d 	.word	0x08009d5d
 8009d14:	08009d65 	.word	0x08009d65
 8009d18:	08009d6d 	.word	0x08009d6d
 8009d1c:	08009d75 	.word	0x08009d75
 8009d20:	08009d7d 	.word	0x08009d7d
 8009d24:	08009d85 	.word	0x08009d85
 8009d28:	08009d8d 	.word	0x08009d8d
 8009d2c:	08009d95 	.word	0x08009d95
 8009d30:	08009d9d 	.word	0x08009d9d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009d3a:	e039      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009d42:	e035      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009d4a:	e031      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009d52:	e02d      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009d5a:	e029      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009d62:	e025      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009d6a:	e021      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009d72:	e01d      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009d7a:	e019      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009d82:	e015      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009d8a:	e011      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009d92:	e00d      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009d9a:	e009      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009da4:	e004      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	75fb      	strb	r3, [r7, #23]
        break;
 8009daa:	e001      	b.n	8009db0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	371c      	adds	r7, #28
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop

08009dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a4c      	ldr	r2, [pc, #304]	@ (8009f04 <TIM_Base_SetConfig+0x144>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d017      	beq.n	8009e08 <TIM_Base_SetConfig+0x48>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dde:	d013      	beq.n	8009e08 <TIM_Base_SetConfig+0x48>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a49      	ldr	r2, [pc, #292]	@ (8009f08 <TIM_Base_SetConfig+0x148>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d00f      	beq.n	8009e08 <TIM_Base_SetConfig+0x48>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a48      	ldr	r2, [pc, #288]	@ (8009f0c <TIM_Base_SetConfig+0x14c>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d00b      	beq.n	8009e08 <TIM_Base_SetConfig+0x48>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a47      	ldr	r2, [pc, #284]	@ (8009f10 <TIM_Base_SetConfig+0x150>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d007      	beq.n	8009e08 <TIM_Base_SetConfig+0x48>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a46      	ldr	r2, [pc, #280]	@ (8009f14 <TIM_Base_SetConfig+0x154>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d003      	beq.n	8009e08 <TIM_Base_SetConfig+0x48>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a45      	ldr	r2, [pc, #276]	@ (8009f18 <TIM_Base_SetConfig+0x158>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d108      	bne.n	8009e1a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	4313      	orrs	r3, r2
 8009e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a39      	ldr	r2, [pc, #228]	@ (8009f04 <TIM_Base_SetConfig+0x144>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d023      	beq.n	8009e6a <TIM_Base_SetConfig+0xaa>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e28:	d01f      	beq.n	8009e6a <TIM_Base_SetConfig+0xaa>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a36      	ldr	r2, [pc, #216]	@ (8009f08 <TIM_Base_SetConfig+0x148>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d01b      	beq.n	8009e6a <TIM_Base_SetConfig+0xaa>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a35      	ldr	r2, [pc, #212]	@ (8009f0c <TIM_Base_SetConfig+0x14c>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d017      	beq.n	8009e6a <TIM_Base_SetConfig+0xaa>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a34      	ldr	r2, [pc, #208]	@ (8009f10 <TIM_Base_SetConfig+0x150>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d013      	beq.n	8009e6a <TIM_Base_SetConfig+0xaa>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a33      	ldr	r2, [pc, #204]	@ (8009f14 <TIM_Base_SetConfig+0x154>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d00f      	beq.n	8009e6a <TIM_Base_SetConfig+0xaa>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a33      	ldr	r2, [pc, #204]	@ (8009f1c <TIM_Base_SetConfig+0x15c>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d00b      	beq.n	8009e6a <TIM_Base_SetConfig+0xaa>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a32      	ldr	r2, [pc, #200]	@ (8009f20 <TIM_Base_SetConfig+0x160>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d007      	beq.n	8009e6a <TIM_Base_SetConfig+0xaa>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a31      	ldr	r2, [pc, #196]	@ (8009f24 <TIM_Base_SetConfig+0x164>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d003      	beq.n	8009e6a <TIM_Base_SetConfig+0xaa>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a2c      	ldr	r2, [pc, #176]	@ (8009f18 <TIM_Base_SetConfig+0x158>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d108      	bne.n	8009e7c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	689a      	ldr	r2, [r3, #8]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a18      	ldr	r2, [pc, #96]	@ (8009f04 <TIM_Base_SetConfig+0x144>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d013      	beq.n	8009ed0 <TIM_Base_SetConfig+0x110>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8009f14 <TIM_Base_SetConfig+0x154>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d00f      	beq.n	8009ed0 <TIM_Base_SetConfig+0x110>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8009f1c <TIM_Base_SetConfig+0x15c>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d00b      	beq.n	8009ed0 <TIM_Base_SetConfig+0x110>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a19      	ldr	r2, [pc, #100]	@ (8009f20 <TIM_Base_SetConfig+0x160>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d007      	beq.n	8009ed0 <TIM_Base_SetConfig+0x110>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a18      	ldr	r2, [pc, #96]	@ (8009f24 <TIM_Base_SetConfig+0x164>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d003      	beq.n	8009ed0 <TIM_Base_SetConfig+0x110>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4a13      	ldr	r2, [pc, #76]	@ (8009f18 <TIM_Base_SetConfig+0x158>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d103      	bne.n	8009ed8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	691a      	ldr	r2, [r3, #16]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d105      	bne.n	8009ef6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	f023 0201 	bic.w	r2, r3, #1
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	611a      	str	r2, [r3, #16]
  }
}
 8009ef6:	bf00      	nop
 8009ef8:	3714      	adds	r7, #20
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	40012c00 	.word	0x40012c00
 8009f08:	40000400 	.word	0x40000400
 8009f0c:	40000800 	.word	0x40000800
 8009f10:	40000c00 	.word	0x40000c00
 8009f14:	40013400 	.word	0x40013400
 8009f18:	40015000 	.word	0x40015000
 8009f1c:	40014000 	.word	0x40014000
 8009f20:	40014400 	.word	0x40014400
 8009f24:	40014800 	.word	0x40014800

08009f28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b087      	sub	sp, #28
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a1b      	ldr	r3, [r3, #32]
 8009f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a1b      	ldr	r3, [r3, #32]
 8009f3c:	f023 0201 	bic.w	r2, r3, #1
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f023 0303 	bic.w	r3, r3, #3
 8009f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	f023 0302 	bic.w	r3, r3, #2
 8009f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a30      	ldr	r2, [pc, #192]	@ (800a044 <TIM_OC1_SetConfig+0x11c>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d013      	beq.n	8009fb0 <TIM_OC1_SetConfig+0x88>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a2f      	ldr	r2, [pc, #188]	@ (800a048 <TIM_OC1_SetConfig+0x120>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d00f      	beq.n	8009fb0 <TIM_OC1_SetConfig+0x88>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a2e      	ldr	r2, [pc, #184]	@ (800a04c <TIM_OC1_SetConfig+0x124>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d00b      	beq.n	8009fb0 <TIM_OC1_SetConfig+0x88>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a2d      	ldr	r2, [pc, #180]	@ (800a050 <TIM_OC1_SetConfig+0x128>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d007      	beq.n	8009fb0 <TIM_OC1_SetConfig+0x88>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a2c      	ldr	r2, [pc, #176]	@ (800a054 <TIM_OC1_SetConfig+0x12c>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d003      	beq.n	8009fb0 <TIM_OC1_SetConfig+0x88>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a2b      	ldr	r2, [pc, #172]	@ (800a058 <TIM_OC1_SetConfig+0x130>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d10c      	bne.n	8009fca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	f023 0308 	bic.w	r3, r3, #8
 8009fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	697a      	ldr	r2, [r7, #20]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	f023 0304 	bic.w	r3, r3, #4
 8009fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a1d      	ldr	r2, [pc, #116]	@ (800a044 <TIM_OC1_SetConfig+0x11c>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d013      	beq.n	8009ffa <TIM_OC1_SetConfig+0xd2>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a1c      	ldr	r2, [pc, #112]	@ (800a048 <TIM_OC1_SetConfig+0x120>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d00f      	beq.n	8009ffa <TIM_OC1_SetConfig+0xd2>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800a04c <TIM_OC1_SetConfig+0x124>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d00b      	beq.n	8009ffa <TIM_OC1_SetConfig+0xd2>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a1a      	ldr	r2, [pc, #104]	@ (800a050 <TIM_OC1_SetConfig+0x128>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d007      	beq.n	8009ffa <TIM_OC1_SetConfig+0xd2>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a19      	ldr	r2, [pc, #100]	@ (800a054 <TIM_OC1_SetConfig+0x12c>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d003      	beq.n	8009ffa <TIM_OC1_SetConfig+0xd2>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a18      	ldr	r2, [pc, #96]	@ (800a058 <TIM_OC1_SetConfig+0x130>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d111      	bne.n	800a01e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	4313      	orrs	r3, r2
 800a012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	699b      	ldr	r3, [r3, #24]
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	685a      	ldr	r2, [r3, #4]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	697a      	ldr	r2, [r7, #20]
 800a036:	621a      	str	r2, [r3, #32]
}
 800a038:	bf00      	nop
 800a03a:	371c      	adds	r7, #28
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	40012c00 	.word	0x40012c00
 800a048:	40013400 	.word	0x40013400
 800a04c:	40014000 	.word	0x40014000
 800a050:	40014400 	.word	0x40014400
 800a054:	40014800 	.word	0x40014800
 800a058:	40015000 	.word	0x40015000

0800a05c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b087      	sub	sp, #28
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a1b      	ldr	r3, [r3, #32]
 800a070:	f023 0210 	bic.w	r2, r3, #16
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a08a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a08e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	021b      	lsls	r3, r3, #8
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	f023 0320 	bic.w	r3, r3, #32
 800a0aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	011b      	lsls	r3, r3, #4
 800a0b2:	697a      	ldr	r2, [r7, #20]
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a2c      	ldr	r2, [pc, #176]	@ (800a16c <TIM_OC2_SetConfig+0x110>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d007      	beq.n	800a0d0 <TIM_OC2_SetConfig+0x74>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4a2b      	ldr	r2, [pc, #172]	@ (800a170 <TIM_OC2_SetConfig+0x114>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d003      	beq.n	800a0d0 <TIM_OC2_SetConfig+0x74>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a2a      	ldr	r2, [pc, #168]	@ (800a174 <TIM_OC2_SetConfig+0x118>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d10d      	bne.n	800a0ec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	011b      	lsls	r3, r3, #4
 800a0de:	697a      	ldr	r2, [r7, #20]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a1f      	ldr	r2, [pc, #124]	@ (800a16c <TIM_OC2_SetConfig+0x110>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d013      	beq.n	800a11c <TIM_OC2_SetConfig+0xc0>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a1e      	ldr	r2, [pc, #120]	@ (800a170 <TIM_OC2_SetConfig+0x114>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d00f      	beq.n	800a11c <TIM_OC2_SetConfig+0xc0>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a1e      	ldr	r2, [pc, #120]	@ (800a178 <TIM_OC2_SetConfig+0x11c>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d00b      	beq.n	800a11c <TIM_OC2_SetConfig+0xc0>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a1d      	ldr	r2, [pc, #116]	@ (800a17c <TIM_OC2_SetConfig+0x120>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d007      	beq.n	800a11c <TIM_OC2_SetConfig+0xc0>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a1c      	ldr	r2, [pc, #112]	@ (800a180 <TIM_OC2_SetConfig+0x124>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d003      	beq.n	800a11c <TIM_OC2_SetConfig+0xc0>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a17      	ldr	r2, [pc, #92]	@ (800a174 <TIM_OC2_SetConfig+0x118>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d113      	bne.n	800a144 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a122:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a12a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	695b      	ldr	r3, [r3, #20]
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	4313      	orrs	r3, r2
 800a136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	699b      	ldr	r3, [r3, #24]
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	4313      	orrs	r3, r2
 800a142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	621a      	str	r2, [r3, #32]
}
 800a15e:	bf00      	nop
 800a160:	371c      	adds	r7, #28
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	40012c00 	.word	0x40012c00
 800a170:	40013400 	.word	0x40013400
 800a174:	40015000 	.word	0x40015000
 800a178:	40014000 	.word	0x40014000
 800a17c:	40014400 	.word	0x40014400
 800a180:	40014800 	.word	0x40014800

0800a184 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a184:	b480      	push	{r7}
 800a186:	b087      	sub	sp, #28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6a1b      	ldr	r3, [r3, #32]
 800a198:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	69db      	ldr	r3, [r3, #28]
 800a1aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a1b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f023 0303 	bic.w	r3, r3, #3
 800a1be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a1d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	021b      	lsls	r3, r3, #8
 800a1d8:	697a      	ldr	r2, [r7, #20]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a2b      	ldr	r2, [pc, #172]	@ (800a290 <TIM_OC3_SetConfig+0x10c>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d007      	beq.n	800a1f6 <TIM_OC3_SetConfig+0x72>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a2a      	ldr	r2, [pc, #168]	@ (800a294 <TIM_OC3_SetConfig+0x110>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d003      	beq.n	800a1f6 <TIM_OC3_SetConfig+0x72>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a29      	ldr	r2, [pc, #164]	@ (800a298 <TIM_OC3_SetConfig+0x114>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d10d      	bne.n	800a212 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a1fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	021b      	lsls	r3, r3, #8
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	4313      	orrs	r3, r2
 800a208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a1e      	ldr	r2, [pc, #120]	@ (800a290 <TIM_OC3_SetConfig+0x10c>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d013      	beq.n	800a242 <TIM_OC3_SetConfig+0xbe>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4a1d      	ldr	r2, [pc, #116]	@ (800a294 <TIM_OC3_SetConfig+0x110>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d00f      	beq.n	800a242 <TIM_OC3_SetConfig+0xbe>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a1d      	ldr	r2, [pc, #116]	@ (800a29c <TIM_OC3_SetConfig+0x118>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d00b      	beq.n	800a242 <TIM_OC3_SetConfig+0xbe>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4a1c      	ldr	r2, [pc, #112]	@ (800a2a0 <TIM_OC3_SetConfig+0x11c>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d007      	beq.n	800a242 <TIM_OC3_SetConfig+0xbe>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4a1b      	ldr	r2, [pc, #108]	@ (800a2a4 <TIM_OC3_SetConfig+0x120>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d003      	beq.n	800a242 <TIM_OC3_SetConfig+0xbe>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4a16      	ldr	r2, [pc, #88]	@ (800a298 <TIM_OC3_SetConfig+0x114>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d113      	bne.n	800a26a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	011b      	lsls	r3, r3, #4
 800a258:	693a      	ldr	r2, [r7, #16]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	011b      	lsls	r3, r3, #4
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	4313      	orrs	r3, r2
 800a268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	685a      	ldr	r2, [r3, #4]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	697a      	ldr	r2, [r7, #20]
 800a282:	621a      	str	r2, [r3, #32]
}
 800a284:	bf00      	nop
 800a286:	371c      	adds	r7, #28
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	40012c00 	.word	0x40012c00
 800a294:	40013400 	.word	0x40013400
 800a298:	40015000 	.word	0x40015000
 800a29c:	40014000 	.word	0x40014000
 800a2a0:	40014400 	.word	0x40014400
 800a2a4:	40014800 	.word	0x40014800

0800a2a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b087      	sub	sp, #28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a1b      	ldr	r3, [r3, #32]
 800a2bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	69db      	ldr	r3, [r3, #28]
 800a2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a2d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	021b      	lsls	r3, r3, #8
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a2f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	031b      	lsls	r3, r3, #12
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	4313      	orrs	r3, r2
 800a302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a2c      	ldr	r2, [pc, #176]	@ (800a3b8 <TIM_OC4_SetConfig+0x110>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d007      	beq.n	800a31c <TIM_OC4_SetConfig+0x74>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a2b      	ldr	r2, [pc, #172]	@ (800a3bc <TIM_OC4_SetConfig+0x114>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d003      	beq.n	800a31c <TIM_OC4_SetConfig+0x74>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a2a      	ldr	r2, [pc, #168]	@ (800a3c0 <TIM_OC4_SetConfig+0x118>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d10d      	bne.n	800a338 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	031b      	lsls	r3, r3, #12
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	4313      	orrs	r3, r2
 800a32e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a336:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	4a1f      	ldr	r2, [pc, #124]	@ (800a3b8 <TIM_OC4_SetConfig+0x110>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d013      	beq.n	800a368 <TIM_OC4_SetConfig+0xc0>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	4a1e      	ldr	r2, [pc, #120]	@ (800a3bc <TIM_OC4_SetConfig+0x114>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d00f      	beq.n	800a368 <TIM_OC4_SetConfig+0xc0>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4a1e      	ldr	r2, [pc, #120]	@ (800a3c4 <TIM_OC4_SetConfig+0x11c>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d00b      	beq.n	800a368 <TIM_OC4_SetConfig+0xc0>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4a1d      	ldr	r2, [pc, #116]	@ (800a3c8 <TIM_OC4_SetConfig+0x120>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d007      	beq.n	800a368 <TIM_OC4_SetConfig+0xc0>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4a1c      	ldr	r2, [pc, #112]	@ (800a3cc <TIM_OC4_SetConfig+0x124>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d003      	beq.n	800a368 <TIM_OC4_SetConfig+0xc0>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a17      	ldr	r2, [pc, #92]	@ (800a3c0 <TIM_OC4_SetConfig+0x118>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d113      	bne.n	800a390 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a36e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a376:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	695b      	ldr	r3, [r3, #20]
 800a37c:	019b      	lsls	r3, r3, #6
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	4313      	orrs	r3, r2
 800a382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	019b      	lsls	r3, r3, #6
 800a38a:	693a      	ldr	r2, [r7, #16]
 800a38c:	4313      	orrs	r3, r2
 800a38e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	685a      	ldr	r2, [r3, #4]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	621a      	str	r2, [r3, #32]
}
 800a3aa:	bf00      	nop
 800a3ac:	371c      	adds	r7, #28
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	40012c00 	.word	0x40012c00
 800a3bc:	40013400 	.word	0x40013400
 800a3c0:	40015000 	.word	0x40015000
 800a3c4:	40014000 	.word	0x40014000
 800a3c8:	40014400 	.word	0x40014400
 800a3cc:	40014800 	.word	0x40014800

0800a3d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b087      	sub	sp, #28
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a1b      	ldr	r3, [r3, #32]
 800a3e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a414:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	041b      	lsls	r3, r3, #16
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	4313      	orrs	r3, r2
 800a420:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a19      	ldr	r2, [pc, #100]	@ (800a48c <TIM_OC5_SetConfig+0xbc>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d013      	beq.n	800a452 <TIM_OC5_SetConfig+0x82>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a18      	ldr	r2, [pc, #96]	@ (800a490 <TIM_OC5_SetConfig+0xc0>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d00f      	beq.n	800a452 <TIM_OC5_SetConfig+0x82>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a17      	ldr	r2, [pc, #92]	@ (800a494 <TIM_OC5_SetConfig+0xc4>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d00b      	beq.n	800a452 <TIM_OC5_SetConfig+0x82>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a16      	ldr	r2, [pc, #88]	@ (800a498 <TIM_OC5_SetConfig+0xc8>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d007      	beq.n	800a452 <TIM_OC5_SetConfig+0x82>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a15      	ldr	r2, [pc, #84]	@ (800a49c <TIM_OC5_SetConfig+0xcc>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d003      	beq.n	800a452 <TIM_OC5_SetConfig+0x82>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a14      	ldr	r2, [pc, #80]	@ (800a4a0 <TIM_OC5_SetConfig+0xd0>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d109      	bne.n	800a466 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a458:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	695b      	ldr	r3, [r3, #20]
 800a45e:	021b      	lsls	r3, r3, #8
 800a460:	697a      	ldr	r2, [r7, #20]
 800a462:	4313      	orrs	r3, r2
 800a464:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	693a      	ldr	r2, [r7, #16]
 800a47e:	621a      	str	r2, [r3, #32]
}
 800a480:	bf00      	nop
 800a482:	371c      	adds	r7, #28
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr
 800a48c:	40012c00 	.word	0x40012c00
 800a490:	40013400 	.word	0x40013400
 800a494:	40014000 	.word	0x40014000
 800a498:	40014400 	.word	0x40014400
 800a49c:	40014800 	.word	0x40014800
 800a4a0:	40015000 	.word	0x40015000

0800a4a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b087      	sub	sp, #28
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6a1b      	ldr	r3, [r3, #32]
 800a4b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a4d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	021b      	lsls	r3, r3, #8
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a4ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	051b      	lsls	r3, r3, #20
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4a1a      	ldr	r2, [pc, #104]	@ (800a564 <TIM_OC6_SetConfig+0xc0>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d013      	beq.n	800a528 <TIM_OC6_SetConfig+0x84>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4a19      	ldr	r2, [pc, #100]	@ (800a568 <TIM_OC6_SetConfig+0xc4>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d00f      	beq.n	800a528 <TIM_OC6_SetConfig+0x84>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4a18      	ldr	r2, [pc, #96]	@ (800a56c <TIM_OC6_SetConfig+0xc8>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d00b      	beq.n	800a528 <TIM_OC6_SetConfig+0x84>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a17      	ldr	r2, [pc, #92]	@ (800a570 <TIM_OC6_SetConfig+0xcc>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d007      	beq.n	800a528 <TIM_OC6_SetConfig+0x84>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4a16      	ldr	r2, [pc, #88]	@ (800a574 <TIM_OC6_SetConfig+0xd0>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d003      	beq.n	800a528 <TIM_OC6_SetConfig+0x84>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a15      	ldr	r2, [pc, #84]	@ (800a578 <TIM_OC6_SetConfig+0xd4>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d109      	bne.n	800a53c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a52e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	695b      	ldr	r3, [r3, #20]
 800a534:	029b      	lsls	r3, r3, #10
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	4313      	orrs	r3, r2
 800a53a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	621a      	str	r2, [r3, #32]
}
 800a556:	bf00      	nop
 800a558:	371c      	adds	r7, #28
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	40012c00 	.word	0x40012c00
 800a568:	40013400 	.word	0x40013400
 800a56c:	40014000 	.word	0x40014000
 800a570:	40014400 	.word	0x40014400
 800a574:	40014800 	.word	0x40014800
 800a578:	40015000 	.word	0x40015000

0800a57c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b087      	sub	sp, #28
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6a1b      	ldr	r3, [r3, #32]
 800a58c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6a1b      	ldr	r3, [r3, #32]
 800a592:	f023 0201 	bic.w	r2, r3, #1
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	699b      	ldr	r3, [r3, #24]
 800a59e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a5a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	011b      	lsls	r3, r3, #4
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f023 030a 	bic.w	r3, r3, #10
 800a5b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	697a      	ldr	r2, [r7, #20]
 800a5cc:	621a      	str	r2, [r3, #32]
}
 800a5ce:	bf00      	nop
 800a5d0:	371c      	adds	r7, #28
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr

0800a5da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5da:	b480      	push	{r7}
 800a5dc:	b087      	sub	sp, #28
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	60f8      	str	r0, [r7, #12]
 800a5e2:	60b9      	str	r1, [r7, #8]
 800a5e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6a1b      	ldr	r3, [r3, #32]
 800a5f0:	f023 0210 	bic.w	r2, r3, #16
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	699b      	ldr	r3, [r3, #24]
 800a5fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a604:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	031b      	lsls	r3, r3, #12
 800a60a:	693a      	ldr	r2, [r7, #16]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a616:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	011b      	lsls	r3, r3, #4
 800a61c:	697a      	ldr	r2, [r7, #20]
 800a61e:	4313      	orrs	r3, r2
 800a620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	693a      	ldr	r2, [r7, #16]
 800a626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	621a      	str	r2, [r3, #32]
}
 800a62e:	bf00      	nop
 800a630:	371c      	adds	r7, #28
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a63a:	b480      	push	{r7}
 800a63c:	b085      	sub	sp, #20
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
 800a642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a654:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a656:	683a      	ldr	r2, [r7, #0]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	f043 0307 	orr.w	r3, r3, #7
 800a660:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	609a      	str	r2, [r3, #8]
}
 800a668:	bf00      	nop
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a674:	b480      	push	{r7}
 800a676:	b087      	sub	sp, #28
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	607a      	str	r2, [r7, #4]
 800a680:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a68e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	021a      	lsls	r2, r3, #8
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	431a      	orrs	r2, r3
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	697a      	ldr	r2, [r7, #20]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	697a      	ldr	r2, [r7, #20]
 800a6a6:	609a      	str	r2, [r3, #8]
}
 800a6a8:	bf00      	nop
 800a6aa:	371c      	adds	r7, #28
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b087      	sub	sp, #28
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	f003 031f 	and.w	r3, r3, #31
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6a1a      	ldr	r2, [r3, #32]
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	43db      	mvns	r3, r3
 800a6d6:	401a      	ands	r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6a1a      	ldr	r2, [r3, #32]
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	f003 031f 	and.w	r3, r3, #31
 800a6e6:	6879      	ldr	r1, [r7, #4]
 800a6e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a6ec:	431a      	orrs	r2, r3
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	621a      	str	r2, [r3, #32]
}
 800a6f2:	bf00      	nop
 800a6f4:	371c      	adds	r7, #28
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
	...

0800a700 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a26      	ldr	r2, [pc, #152]	@ (800a7a4 <TIM_ResetCallback+0xa4>)
 800a70c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4a25      	ldr	r2, [pc, #148]	@ (800a7a8 <TIM_ResetCallback+0xa8>)
 800a714:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a24      	ldr	r2, [pc, #144]	@ (800a7ac <TIM_ResetCallback+0xac>)
 800a71c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4a23      	ldr	r2, [pc, #140]	@ (800a7b0 <TIM_ResetCallback+0xb0>)
 800a724:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a22      	ldr	r2, [pc, #136]	@ (800a7b4 <TIM_ResetCallback+0xb4>)
 800a72c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a21      	ldr	r2, [pc, #132]	@ (800a7b8 <TIM_ResetCallback+0xb8>)
 800a734:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a20      	ldr	r2, [pc, #128]	@ (800a7bc <TIM_ResetCallback+0xbc>)
 800a73c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a1f      	ldr	r2, [pc, #124]	@ (800a7c0 <TIM_ResetCallback+0xc0>)
 800a744:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a1e      	ldr	r2, [pc, #120]	@ (800a7c4 <TIM_ResetCallback+0xc4>)
 800a74c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a1d      	ldr	r2, [pc, #116]	@ (800a7c8 <TIM_ResetCallback+0xc8>)
 800a754:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a1c      	ldr	r2, [pc, #112]	@ (800a7cc <TIM_ResetCallback+0xcc>)
 800a75c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a1b      	ldr	r2, [pc, #108]	@ (800a7d0 <TIM_ResetCallback+0xd0>)
 800a764:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a1a      	ldr	r2, [pc, #104]	@ (800a7d4 <TIM_ResetCallback+0xd4>)
 800a76c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a19      	ldr	r2, [pc, #100]	@ (800a7d8 <TIM_ResetCallback+0xd8>)
 800a774:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a18      	ldr	r2, [pc, #96]	@ (800a7dc <TIM_ResetCallback+0xdc>)
 800a77c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a17      	ldr	r2, [pc, #92]	@ (800a7e0 <TIM_ResetCallback+0xe0>)
 800a784:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a16      	ldr	r2, [pc, #88]	@ (800a7e4 <TIM_ResetCallback+0xe4>)
 800a78c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4a15      	ldr	r2, [pc, #84]	@ (800a7e8 <TIM_ResetCallback+0xe8>)
 800a794:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800a798:	bf00      	nop
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	08002b11 	.word	0x08002b11
 800a7a8:	08009a4d 	.word	0x08009a4d
 800a7ac:	08009ac5 	.word	0x08009ac5
 800a7b0:	08009ad9 	.word	0x08009ad9
 800a7b4:	08009a75 	.word	0x08009a75
 800a7b8:	08009a89 	.word	0x08009a89
 800a7bc:	08009a61 	.word	0x08009a61
 800a7c0:	08009a9d 	.word	0x08009a9d
 800a7c4:	08009ab1 	.word	0x08009ab1
 800a7c8:	08009aed 	.word	0x08009aed
 800a7cc:	0800a919 	.word	0x0800a919
 800a7d0:	0800a92d 	.word	0x0800a92d
 800a7d4:	0800a941 	.word	0x0800a941
 800a7d8:	0800a955 	.word	0x0800a955
 800a7dc:	0800a969 	.word	0x0800a969
 800a7e0:	0800a97d 	.word	0x0800a97d
 800a7e4:	0800a991 	.word	0x0800a991
 800a7e8:	0800a9a5 	.word	0x0800a9a5

0800a7ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d101      	bne.n	800a804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a800:	2302      	movs	r3, #2
 800a802:	e074      	b.n	800a8ee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2202      	movs	r2, #2
 800a810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a34      	ldr	r2, [pc, #208]	@ (800a8fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d009      	beq.n	800a842 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a33      	ldr	r2, [pc, #204]	@ (800a900 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d004      	beq.n	800a842 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a31      	ldr	r2, [pc, #196]	@ (800a904 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d108      	bne.n	800a854 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a848:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	4313      	orrs	r3, r2
 800a852:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a85a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a85e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	4313      	orrs	r3, r2
 800a868:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a21      	ldr	r2, [pc, #132]	@ (800a8fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d022      	beq.n	800a8c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a884:	d01d      	beq.n	800a8c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a1f      	ldr	r2, [pc, #124]	@ (800a908 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d018      	beq.n	800a8c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a1d      	ldr	r2, [pc, #116]	@ (800a90c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d013      	beq.n	800a8c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a1c      	ldr	r2, [pc, #112]	@ (800a910 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d00e      	beq.n	800a8c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a15      	ldr	r2, [pc, #84]	@ (800a900 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d009      	beq.n	800a8c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a18      	ldr	r2, [pc, #96]	@ (800a914 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d004      	beq.n	800a8c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a11      	ldr	r2, [pc, #68]	@ (800a904 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d10c      	bne.n	800a8dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3714      	adds	r7, #20
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	40012c00 	.word	0x40012c00
 800a900:	40013400 	.word	0x40013400
 800a904:	40015000 	.word	0x40015000
 800a908:	40000400 	.word	0x40000400
 800a90c:	40000800 	.word	0x40000800
 800a910:	40000c00 	.word	0x40000c00
 800a914:	40014000 	.word	0x40014000

0800a918 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a920:	bf00      	nop
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a934:	bf00      	nop
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a948:	bf00      	nop
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a970:	bf00      	nop
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d101      	bne.n	800a9ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e050      	b.n	800aa6c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d114      	bne.n	800a9fe <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fdc5 	bl	800b56c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d103      	bne.n	800a9f4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a21      	ldr	r2, [pc, #132]	@ (800aa74 <HAL_UART_Init+0xbc>)
 800a9f0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2224      	movs	r2, #36	@ 0x24
 800aa02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f022 0201 	bic.w	r2, r2, #1
 800aa14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d002      	beq.n	800aa24 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f001 f8f2 	bl	800bc08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 fdf3 	bl	800b610 <UART_SetConfig>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d101      	bne.n	800aa34 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	e01b      	b.n	800aa6c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	685a      	ldr	r2, [r3, #4]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aa42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	689a      	ldr	r2, [r3, #8]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aa52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f042 0201 	orr.w	r2, r2, #1
 800aa62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f001 f971 	bl	800bd4c <UART_CheckIdleState>
 800aa6a:	4603      	mov	r3, r0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3708      	adds	r7, #8
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	08005199 	.word	0x08005199

0800aa78 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b087      	sub	sp, #28
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	460b      	mov	r3, r1
 800aa82:	607a      	str	r2, [r7, #4]
 800aa84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800aa86:	2300      	movs	r3, #0
 800aa88:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d109      	bne.n	800aaa4 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e09c      	b.n	800abde <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaaa:	2b20      	cmp	r3, #32
 800aaac:	d16c      	bne.n	800ab88 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800aaae:	7afb      	ldrb	r3, [r7, #11]
 800aab0:	2b0c      	cmp	r3, #12
 800aab2:	d85e      	bhi.n	800ab72 <HAL_UART_RegisterCallback+0xfa>
 800aab4:	a201      	add	r2, pc, #4	@ (adr r2, 800aabc <HAL_UART_RegisterCallback+0x44>)
 800aab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaba:	bf00      	nop
 800aabc:	0800aaf1 	.word	0x0800aaf1
 800aac0:	0800aafb 	.word	0x0800aafb
 800aac4:	0800ab05 	.word	0x0800ab05
 800aac8:	0800ab0f 	.word	0x0800ab0f
 800aacc:	0800ab19 	.word	0x0800ab19
 800aad0:	0800ab23 	.word	0x0800ab23
 800aad4:	0800ab2d 	.word	0x0800ab2d
 800aad8:	0800ab37 	.word	0x0800ab37
 800aadc:	0800ab41 	.word	0x0800ab41
 800aae0:	0800ab4b 	.word	0x0800ab4b
 800aae4:	0800ab55 	.word	0x0800ab55
 800aae8:	0800ab5f 	.word	0x0800ab5f
 800aaec:	0800ab69 	.word	0x0800ab69
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800aaf8:	e070      	b.n	800abdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800ab02:	e06b      	b.n	800abdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800ab0c:	e066      	b.n	800abdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800ab16:	e061      	b.n	800abdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800ab20:	e05c      	b.n	800abdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800ab2a:	e057      	b.n	800abdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800ab34:	e052      	b.n	800abdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800ab3e:	e04d      	b.n	800abdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800ab48:	e048      	b.n	800abdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800ab52:	e043      	b.n	800abdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800ab5c:	e03e      	b.n	800abdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800ab66:	e039      	b.n	800abdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800ab70:	e034      	b.n	800abdc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	75fb      	strb	r3, [r7, #23]
        break;
 800ab86:	e029      	b.n	800abdc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d11a      	bne.n	800abc8 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800ab92:	7afb      	ldrb	r3, [r7, #11]
 800ab94:	2b0b      	cmp	r3, #11
 800ab96:	d002      	beq.n	800ab9e <HAL_UART_RegisterCallback+0x126>
 800ab98:	2b0c      	cmp	r3, #12
 800ab9a:	d005      	beq.n	800aba8 <HAL_UART_RegisterCallback+0x130>
 800ab9c:	e009      	b.n	800abb2 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800aba6:	e019      	b.n	800abdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800abb0:	e014      	b.n	800abdc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abb8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	75fb      	strb	r3, [r7, #23]
        break;
 800abc6:	e009      	b.n	800abdc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800abdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	371c      	adds	r7, #28
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop

0800abec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b08a      	sub	sp, #40	@ 0x28
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	4613      	mov	r3, r2
 800abf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac00:	2b20      	cmp	r3, #32
 800ac02:	d167      	bne.n	800acd4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d002      	beq.n	800ac10 <HAL_UART_Transmit_DMA+0x24>
 800ac0a:	88fb      	ldrh	r3, [r7, #6]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d101      	bne.n	800ac14 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	e060      	b.n	800acd6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	88fa      	ldrh	r2, [r7, #6]
 800ac1e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	88fa      	ldrh	r2, [r7, #6]
 800ac26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2221      	movs	r2, #33	@ 0x21
 800ac36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d028      	beq.n	800ac94 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac46:	4a26      	ldr	r2, [pc, #152]	@ (800ace0 <HAL_UART_Transmit_DMA+0xf4>)
 800ac48:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac4e:	4a25      	ldr	r2, [pc, #148]	@ (800ace4 <HAL_UART_Transmit_DMA+0xf8>)
 800ac50:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac56:	4a24      	ldr	r2, [pc, #144]	@ (800ace8 <HAL_UART_Transmit_DMA+0xfc>)
 800ac58:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac5e:	2200      	movs	r2, #0
 800ac60:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	3328      	adds	r3, #40	@ 0x28
 800ac72:	461a      	mov	r2, r3
 800ac74:	88fb      	ldrh	r3, [r7, #6]
 800ac76:	f7fc f9bd 	bl	8006ff4 <HAL_DMA_Start_IT>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d009      	beq.n	800ac94 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2210      	movs	r2, #16
 800ac84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2220      	movs	r2, #32
 800ac8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	e020      	b.n	800acd6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2240      	movs	r2, #64	@ 0x40
 800ac9a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	3308      	adds	r3, #8
 800aca2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	e853 3f00 	ldrex	r3, [r3]
 800acaa:	613b      	str	r3, [r7, #16]
   return(result);
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acb2:	627b      	str	r3, [r7, #36]	@ 0x24
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	3308      	adds	r3, #8
 800acba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acbc:	623a      	str	r2, [r7, #32]
 800acbe:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc0:	69f9      	ldr	r1, [r7, #28]
 800acc2:	6a3a      	ldr	r2, [r7, #32]
 800acc4:	e841 2300 	strex	r3, r2, [r1]
 800acc8:	61bb      	str	r3, [r7, #24]
   return(result);
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d1e5      	bne.n	800ac9c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800acd0:	2300      	movs	r3, #0
 800acd2:	e000      	b.n	800acd6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800acd4:	2302      	movs	r3, #2
  }
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3728      	adds	r7, #40	@ 0x28
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	0800c217 	.word	0x0800c217
 800ace4:	0800c2b5 	.word	0x0800c2b5
 800ace8:	0800c44f 	.word	0x0800c44f

0800acec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b08a      	sub	sp, #40	@ 0x28
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	4613      	mov	r3, r2
 800acf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad00:	2b20      	cmp	r3, #32
 800ad02:	d137      	bne.n	800ad74 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d002      	beq.n	800ad10 <HAL_UART_Receive_DMA+0x24>
 800ad0a:	88fb      	ldrh	r3, [r7, #6]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d101      	bne.n	800ad14 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	e030      	b.n	800ad76 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2200      	movs	r2, #0
 800ad18:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a18      	ldr	r2, [pc, #96]	@ (800ad80 <HAL_UART_Receive_DMA+0x94>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d01f      	beq.n	800ad64 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d018      	beq.n	800ad64 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	e853 3f00 	ldrex	r3, [r3]
 800ad3e:	613b      	str	r3, [r7, #16]
   return(result);
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ad46:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad50:	623b      	str	r3, [r7, #32]
 800ad52:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad54:	69f9      	ldr	r1, [r7, #28]
 800ad56:	6a3a      	ldr	r2, [r7, #32]
 800ad58:	e841 2300 	strex	r3, r2, [r1]
 800ad5c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1e6      	bne.n	800ad32 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ad64:	88fb      	ldrh	r3, [r7, #6]
 800ad66:	461a      	mov	r2, r3
 800ad68:	68b9      	ldr	r1, [r7, #8]
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f001 f906 	bl	800bf7c <UART_Start_Receive_DMA>
 800ad70:	4603      	mov	r3, r0
 800ad72:	e000      	b.n	800ad76 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ad74:	2302      	movs	r3, #2
  }
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3728      	adds	r7, #40	@ 0x28
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	40008000 	.word	0x40008000

0800ad84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b0ba      	sub	sp, #232	@ 0xe8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	69db      	ldr	r3, [r3, #28]
 800ad92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800adaa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800adae:	f640 030f 	movw	r3, #2063	@ 0x80f
 800adb2:	4013      	ands	r3, r2
 800adb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800adb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d11b      	bne.n	800adf8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800adc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adc4:	f003 0320 	and.w	r3, r3, #32
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d015      	beq.n	800adf8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800adcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800add0:	f003 0320 	and.w	r3, r3, #32
 800add4:	2b00      	cmp	r3, #0
 800add6:	d105      	bne.n	800ade4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800add8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800addc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d009      	beq.n	800adf8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f000 82f3 	beq.w	800b3d4 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	4798      	blx	r3
      }
      return;
 800adf6:	e2ed      	b.n	800b3d4 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800adf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f000 8129 	beq.w	800b054 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ae02:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ae06:	4b90      	ldr	r3, [pc, #576]	@ (800b048 <HAL_UART_IRQHandler+0x2c4>)
 800ae08:	4013      	ands	r3, r2
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d106      	bne.n	800ae1c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ae0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ae12:	4b8e      	ldr	r3, [pc, #568]	@ (800b04c <HAL_UART_IRQHandler+0x2c8>)
 800ae14:	4013      	ands	r3, r2
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f000 811c 	beq.w	800b054 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae20:	f003 0301 	and.w	r3, r3, #1
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d011      	beq.n	800ae4c <HAL_UART_IRQHandler+0xc8>
 800ae28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00b      	beq.n	800ae4c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2201      	movs	r2, #1
 800ae3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae42:	f043 0201 	orr.w	r2, r3, #1
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae50:	f003 0302 	and.w	r3, r3, #2
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d011      	beq.n	800ae7c <HAL_UART_IRQHandler+0xf8>
 800ae58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae5c:	f003 0301 	and.w	r3, r3, #1
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00b      	beq.n	800ae7c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2202      	movs	r2, #2
 800ae6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae72:	f043 0204 	orr.w	r2, r3, #4
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae80:	f003 0304 	and.w	r3, r3, #4
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d011      	beq.n	800aeac <HAL_UART_IRQHandler+0x128>
 800ae88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae8c:	f003 0301 	and.w	r3, r3, #1
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00b      	beq.n	800aeac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2204      	movs	r2, #4
 800ae9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aea2:	f043 0202 	orr.w	r2, r3, #2
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aeac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aeb0:	f003 0308 	and.w	r3, r3, #8
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d017      	beq.n	800aee8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aeb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aebc:	f003 0320 	and.w	r3, r3, #32
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d105      	bne.n	800aed0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aec4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aec8:	4b5f      	ldr	r3, [pc, #380]	@ (800b048 <HAL_UART_IRQHandler+0x2c4>)
 800aeca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00b      	beq.n	800aee8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2208      	movs	r2, #8
 800aed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aede:	f043 0208 	orr.w	r2, r3, #8
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aeec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d012      	beq.n	800af1a <HAL_UART_IRQHandler+0x196>
 800aef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aef8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00c      	beq.n	800af1a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800af08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af10:	f043 0220 	orr.w	r2, r3, #32
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 8259 	beq.w	800b3d8 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af2a:	f003 0320 	and.w	r3, r3, #32
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d013      	beq.n	800af5a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af36:	f003 0320 	and.w	r3, r3, #32
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d105      	bne.n	800af4a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af46:	2b00      	cmp	r3, #0
 800af48:	d007      	beq.n	800af5a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d003      	beq.n	800af5a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af6e:	2b40      	cmp	r3, #64	@ 0x40
 800af70:	d005      	beq.n	800af7e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af76:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d058      	beq.n	800b030 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f001 f8e3 	bl	800c14a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af8e:	2b40      	cmp	r3, #64	@ 0x40
 800af90:	d148      	bne.n	800b024 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	3308      	adds	r3, #8
 800af98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800afa0:	e853 3f00 	ldrex	r3, [r3]
 800afa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800afa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800afac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	3308      	adds	r3, #8
 800afba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800afbe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800afc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800afca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800afce:	e841 2300 	strex	r3, r2, [r1]
 800afd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800afd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1d9      	bne.n	800af92 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d017      	beq.n	800b018 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afee:	4a18      	ldr	r2, [pc, #96]	@ (800b050 <HAL_UART_IRQHandler+0x2cc>)
 800aff0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fc f8cf 	bl	800719c <HAL_DMA_Abort_IT>
 800affe:	4603      	mov	r3, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	d01f      	beq.n	800b044 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b00a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b012:	4610      	mov	r0, r2
 800b014:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b016:	e015      	b.n	800b044 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b022:	e00f      	b.n	800b044 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b02e:	e009      	b.n	800b044 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b042:	e1c9      	b.n	800b3d8 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b044:	bf00      	nop
    return;
 800b046:	e1c7      	b.n	800b3d8 <HAL_UART_IRQHandler+0x654>
 800b048:	10000001 	.word	0x10000001
 800b04c:	04000120 	.word	0x04000120
 800b050:	0800c4d3 	.word	0x0800c4d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b058:	2b01      	cmp	r3, #1
 800b05a:	f040 8157 	bne.w	800b30c <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b062:	f003 0310 	and.w	r3, r3, #16
 800b066:	2b00      	cmp	r3, #0
 800b068:	f000 8150 	beq.w	800b30c <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b06c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b070:	f003 0310 	and.w	r3, r3, #16
 800b074:	2b00      	cmp	r3, #0
 800b076:	f000 8149 	beq.w	800b30c <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2210      	movs	r2, #16
 800b080:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b08c:	2b40      	cmp	r3, #64	@ 0x40
 800b08e:	f040 80bd 	bne.w	800b20c <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 8199 	beq.w	800b3dc <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b0b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	f080 8191 	bcs.w	800b3dc <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b0c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 0320 	and.w	r3, r3, #32
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f040 8087 	bne.w	800b1e6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b0e4:	e853 3f00 	ldrex	r3, [r3]
 800b0e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b0ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b0f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b102:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b106:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b10e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b112:	e841 2300 	strex	r3, r2, [r1]
 800b116:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b11a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1da      	bne.n	800b0d8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	3308      	adds	r3, #8
 800b128:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b12c:	e853 3f00 	ldrex	r3, [r3]
 800b130:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b132:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b134:	f023 0301 	bic.w	r3, r3, #1
 800b138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	3308      	adds	r3, #8
 800b142:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b146:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b14a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b14e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b152:	e841 2300 	strex	r3, r2, [r1]
 800b156:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b158:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1e1      	bne.n	800b122 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	3308      	adds	r3, #8
 800b164:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b166:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b168:	e853 3f00 	ldrex	r3, [r3]
 800b16c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b16e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b170:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b174:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	3308      	adds	r3, #8
 800b17e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b182:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b184:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b186:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b188:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b18a:	e841 2300 	strex	r3, r2, [r1]
 800b18e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b190:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1e3      	bne.n	800b15e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2220      	movs	r2, #32
 800b19a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1ac:	e853 3f00 	ldrex	r3, [r3]
 800b1b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b1b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1b4:	f023 0310 	bic.w	r3, r3, #16
 800b1b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b1c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b1c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b1cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1ce:	e841 2300 	strex	r3, r2, [r1]
 800b1d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b1d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d1e4      	bne.n	800b1a4 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7fb ff82 	bl	80070ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2202      	movs	r2, #2
 800b1ea:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800b1fe:	b292      	uxth	r2, r2
 800b200:	1a8a      	subs	r2, r1, r2
 800b202:	b292      	uxth	r2, r2
 800b204:	4611      	mov	r1, r2
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b20a:	e0e7      	b.n	800b3dc <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b218:	b29b      	uxth	r3, r3
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b226:	b29b      	uxth	r3, r3
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 80d9 	beq.w	800b3e0 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800b22e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b232:	2b00      	cmp	r3, #0
 800b234:	f000 80d4 	beq.w	800b3e0 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b240:	e853 3f00 	ldrex	r3, [r3]
 800b244:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b248:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b24c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	461a      	mov	r2, r3
 800b256:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b25a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b25c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b260:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b262:	e841 2300 	strex	r3, r2, [r1]
 800b266:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1e4      	bne.n	800b238 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	3308      	adds	r3, #8
 800b274:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b278:	e853 3f00 	ldrex	r3, [r3]
 800b27c:	623b      	str	r3, [r7, #32]
   return(result);
 800b27e:	6a3b      	ldr	r3, [r7, #32]
 800b280:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b284:	f023 0301 	bic.w	r3, r3, #1
 800b288:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	3308      	adds	r3, #8
 800b292:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b296:	633a      	str	r2, [r7, #48]	@ 0x30
 800b298:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b29a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b29c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b29e:	e841 2300 	strex	r3, r2, [r1]
 800b2a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d1e1      	bne.n	800b26e <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2220      	movs	r2, #32
 800b2ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	e853 3f00 	ldrex	r3, [r3]
 800b2ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f023 0310 	bic.w	r3, r3, #16
 800b2d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	461a      	mov	r2, r3
 800b2dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b2e0:	61fb      	str	r3, [r7, #28]
 800b2e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e4:	69b9      	ldr	r1, [r7, #24]
 800b2e6:	69fa      	ldr	r2, [r7, #28]
 800b2e8:	e841 2300 	strex	r3, r2, [r1]
 800b2ec:	617b      	str	r3, [r7, #20]
   return(result);
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d1e4      	bne.n	800b2be <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2202      	movs	r2, #2
 800b2f8:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b300:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800b304:	4611      	mov	r1, r2
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b30a:	e069      	b.n	800b3e0 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b30c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b310:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d010      	beq.n	800b33a <HAL_UART_IRQHandler+0x5b6>
 800b318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b31c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00a      	beq.n	800b33a <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b32c:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b338:	e055      	b.n	800b3e6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b33a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b33e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b342:	2b00      	cmp	r3, #0
 800b344:	d014      	beq.n	800b370 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b34a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d105      	bne.n	800b35e <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b356:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d008      	beq.n	800b370 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b362:	2b00      	cmp	r3, #0
 800b364:	d03e      	beq.n	800b3e4 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	4798      	blx	r3
    }
    return;
 800b36e:	e039      	b.n	800b3e4 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d009      	beq.n	800b390 <HAL_UART_IRQHandler+0x60c>
 800b37c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b384:	2b00      	cmp	r3, #0
 800b386:	d003      	beq.n	800b390 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f001 f8ba 	bl	800c502 <UART_EndTransmit_IT>
    return;
 800b38e:	e02a      	b.n	800b3e6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b394:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d00b      	beq.n	800b3b4 <HAL_UART_IRQHandler+0x630>
 800b39c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d005      	beq.n	800b3b4 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b3b2:	e018      	b.n	800b3e6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b3b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d012      	beq.n	800b3e6 <HAL_UART_IRQHandler+0x662>
 800b3c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	da0e      	bge.n	800b3e6 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b3d2:	e008      	b.n	800b3e6 <HAL_UART_IRQHandler+0x662>
      return;
 800b3d4:	bf00      	nop
 800b3d6:	e006      	b.n	800b3e6 <HAL_UART_IRQHandler+0x662>
    return;
 800b3d8:	bf00      	nop
 800b3da:	e004      	b.n	800b3e6 <HAL_UART_IRQHandler+0x662>
      return;
 800b3dc:	bf00      	nop
 800b3de:	e002      	b.n	800b3e6 <HAL_UART_IRQHandler+0x662>
      return;
 800b3e0:	bf00      	nop
 800b3e2:	e000      	b.n	800b3e6 <HAL_UART_IRQHandler+0x662>
    return;
 800b3e4:	bf00      	nop
  }
}
 800b3e6:	37e8      	adds	r7, #232	@ 0xe8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b41c:	bf00      	nop
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b430:	bf00      	nop
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b444:	bf00      	nop
 800b446:	370c      	adds	r7, #12
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b458:	bf00      	nop
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b46c:	bf00      	nop
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b480:	bf00      	nop
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	460b      	mov	r3, r1
 800b496:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b498:	bf00      	nop
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a09      	ldr	r2, [pc, #36]	@ (800b4d8 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d009      	beq.n	800b4cc <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	695b      	ldr	r3, [r3, #20]
 800b4be:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	683a      	ldr	r2, [r7, #0]
 800b4c8:	430a      	orrs	r2, r1
 800b4ca:	615a      	str	r2, [r3, #20]
  }
}
 800b4cc:	bf00      	nop
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr
 800b4d8:	40008000 	.word	0x40008000

0800b4dc <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a18      	ldr	r2, [pc, #96]	@ (800b54c <HAL_UART_EnableReceiverTimeout+0x70>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d027      	beq.n	800b53e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4f4:	2b20      	cmp	r3, #32
 800b4f6:	d120      	bne.n	800b53a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d101      	bne.n	800b506 <HAL_UART_EnableReceiverTimeout+0x2a>
 800b502:	2302      	movs	r3, #2
 800b504:	e01c      	b.n	800b540 <HAL_UART_EnableReceiverTimeout+0x64>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2201      	movs	r2, #1
 800b50a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2224      	movs	r2, #36	@ 0x24
 800b512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	685a      	ldr	r2, [r3, #4]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800b524:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2220      	movs	r2, #32
 800b52a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800b536:	2300      	movs	r3, #0
 800b538:	e002      	b.n	800b540 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800b53a:	2302      	movs	r3, #2
 800b53c:	e000      	b.n	800b540 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
  }
}
 800b540:	4618      	mov	r0, r3
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	40008000 	.word	0x40008000

0800b550 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800b55e:	4618      	mov	r0, r3
 800b560:	370c      	adds	r7, #12
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
	...

0800b56c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4a1a      	ldr	r2, [pc, #104]	@ (800b5e0 <UART_InitCallbacksToDefault+0x74>)
 800b578:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a19      	ldr	r2, [pc, #100]	@ (800b5e4 <UART_InitCallbacksToDefault+0x78>)
 800b580:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4a18      	ldr	r2, [pc, #96]	@ (800b5e8 <UART_InitCallbacksToDefault+0x7c>)
 800b588:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a17      	ldr	r2, [pc, #92]	@ (800b5ec <UART_InitCallbacksToDefault+0x80>)
 800b590:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a16      	ldr	r2, [pc, #88]	@ (800b5f0 <UART_InitCallbacksToDefault+0x84>)
 800b598:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4a15      	ldr	r2, [pc, #84]	@ (800b5f4 <UART_InitCallbacksToDefault+0x88>)
 800b5a0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	4a14      	ldr	r2, [pc, #80]	@ (800b5f8 <UART_InitCallbacksToDefault+0x8c>)
 800b5a8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4a13      	ldr	r2, [pc, #76]	@ (800b5fc <UART_InitCallbacksToDefault+0x90>)
 800b5b0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4a12      	ldr	r2, [pc, #72]	@ (800b600 <UART_InitCallbacksToDefault+0x94>)
 800b5b8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	4a11      	ldr	r2, [pc, #68]	@ (800b604 <UART_InitCallbacksToDefault+0x98>)
 800b5c0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4a10      	ldr	r2, [pc, #64]	@ (800b608 <UART_InitCallbacksToDefault+0x9c>)
 800b5c8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a0f      	ldr	r2, [pc, #60]	@ (800b60c <UART_InitCallbacksToDefault+0xa0>)
 800b5d0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800b5d4:	bf00      	nop
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr
 800b5e0:	0800b401 	.word	0x0800b401
 800b5e4:	0800b3ed 	.word	0x0800b3ed
 800b5e8:	0800b429 	.word	0x0800b429
 800b5ec:	0800b415 	.word	0x0800b415
 800b5f0:	0800b43d 	.word	0x0800b43d
 800b5f4:	0800b451 	.word	0x0800b451
 800b5f8:	0800b465 	.word	0x0800b465
 800b5fc:	0800b479 	.word	0x0800b479
 800b600:	0800c55d 	.word	0x0800c55d
 800b604:	0800c571 	.word	0x0800c571
 800b608:	0800c585 	.word	0x0800c585
 800b60c:	0800b48d 	.word	0x0800b48d

0800b610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b614:	b08c      	sub	sp, #48	@ 0x30
 800b616:	af00      	add	r7, sp, #0
 800b618:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b61a:	2300      	movs	r3, #0
 800b61c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	689a      	ldr	r2, [r3, #8]
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	691b      	ldr	r3, [r3, #16]
 800b628:	431a      	orrs	r2, r3
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	695b      	ldr	r3, [r3, #20]
 800b62e:	431a      	orrs	r2, r3
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	69db      	ldr	r3, [r3, #28]
 800b634:	4313      	orrs	r3, r2
 800b636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	4baa      	ldr	r3, [pc, #680]	@ (800b8e8 <UART_SetConfig+0x2d8>)
 800b640:	4013      	ands	r3, r2
 800b642:	697a      	ldr	r2, [r7, #20]
 800b644:	6812      	ldr	r2, [r2, #0]
 800b646:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b648:	430b      	orrs	r3, r1
 800b64a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	68da      	ldr	r2, [r3, #12]
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	430a      	orrs	r2, r1
 800b660:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	699b      	ldr	r3, [r3, #24]
 800b666:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a9f      	ldr	r2, [pc, #636]	@ (800b8ec <UART_SetConfig+0x2dc>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d004      	beq.n	800b67c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	6a1b      	ldr	r3, [r3, #32]
 800b676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b678:	4313      	orrs	r3, r2
 800b67a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b686:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b68a:	697a      	ldr	r2, [r7, #20]
 800b68c:	6812      	ldr	r2, [r2, #0]
 800b68e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b690:	430b      	orrs	r3, r1
 800b692:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b69a:	f023 010f 	bic.w	r1, r3, #15
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	430a      	orrs	r2, r1
 800b6a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a90      	ldr	r2, [pc, #576]	@ (800b8f0 <UART_SetConfig+0x2e0>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d125      	bne.n	800b700 <UART_SetConfig+0xf0>
 800b6b4:	4b8f      	ldr	r3, [pc, #572]	@ (800b8f4 <UART_SetConfig+0x2e4>)
 800b6b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6ba:	f003 0303 	and.w	r3, r3, #3
 800b6be:	2b03      	cmp	r3, #3
 800b6c0:	d81a      	bhi.n	800b6f8 <UART_SetConfig+0xe8>
 800b6c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b6c8 <UART_SetConfig+0xb8>)
 800b6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c8:	0800b6d9 	.word	0x0800b6d9
 800b6cc:	0800b6e9 	.word	0x0800b6e9
 800b6d0:	0800b6e1 	.word	0x0800b6e1
 800b6d4:	0800b6f1 	.word	0x0800b6f1
 800b6d8:	2301      	movs	r3, #1
 800b6da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6de:	e116      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b6e0:	2302      	movs	r3, #2
 800b6e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6e6:	e112      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b6e8:	2304      	movs	r3, #4
 800b6ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6ee:	e10e      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b6f0:	2308      	movs	r3, #8
 800b6f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6f6:	e10a      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b6f8:	2310      	movs	r3, #16
 800b6fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6fe:	e106      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a7c      	ldr	r2, [pc, #496]	@ (800b8f8 <UART_SetConfig+0x2e8>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d138      	bne.n	800b77c <UART_SetConfig+0x16c>
 800b70a:	4b7a      	ldr	r3, [pc, #488]	@ (800b8f4 <UART_SetConfig+0x2e4>)
 800b70c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b710:	f003 030c 	and.w	r3, r3, #12
 800b714:	2b0c      	cmp	r3, #12
 800b716:	d82d      	bhi.n	800b774 <UART_SetConfig+0x164>
 800b718:	a201      	add	r2, pc, #4	@ (adr r2, 800b720 <UART_SetConfig+0x110>)
 800b71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b71e:	bf00      	nop
 800b720:	0800b755 	.word	0x0800b755
 800b724:	0800b775 	.word	0x0800b775
 800b728:	0800b775 	.word	0x0800b775
 800b72c:	0800b775 	.word	0x0800b775
 800b730:	0800b765 	.word	0x0800b765
 800b734:	0800b775 	.word	0x0800b775
 800b738:	0800b775 	.word	0x0800b775
 800b73c:	0800b775 	.word	0x0800b775
 800b740:	0800b75d 	.word	0x0800b75d
 800b744:	0800b775 	.word	0x0800b775
 800b748:	0800b775 	.word	0x0800b775
 800b74c:	0800b775 	.word	0x0800b775
 800b750:	0800b76d 	.word	0x0800b76d
 800b754:	2300      	movs	r3, #0
 800b756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b75a:	e0d8      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b75c:	2302      	movs	r3, #2
 800b75e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b762:	e0d4      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b764:	2304      	movs	r3, #4
 800b766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b76a:	e0d0      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b76c:	2308      	movs	r3, #8
 800b76e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b772:	e0cc      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b774:	2310      	movs	r3, #16
 800b776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b77a:	e0c8      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4a5e      	ldr	r2, [pc, #376]	@ (800b8fc <UART_SetConfig+0x2ec>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d125      	bne.n	800b7d2 <UART_SetConfig+0x1c2>
 800b786:	4b5b      	ldr	r3, [pc, #364]	@ (800b8f4 <UART_SetConfig+0x2e4>)
 800b788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b78c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b790:	2b30      	cmp	r3, #48	@ 0x30
 800b792:	d016      	beq.n	800b7c2 <UART_SetConfig+0x1b2>
 800b794:	2b30      	cmp	r3, #48	@ 0x30
 800b796:	d818      	bhi.n	800b7ca <UART_SetConfig+0x1ba>
 800b798:	2b20      	cmp	r3, #32
 800b79a:	d00a      	beq.n	800b7b2 <UART_SetConfig+0x1a2>
 800b79c:	2b20      	cmp	r3, #32
 800b79e:	d814      	bhi.n	800b7ca <UART_SetConfig+0x1ba>
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d002      	beq.n	800b7aa <UART_SetConfig+0x19a>
 800b7a4:	2b10      	cmp	r3, #16
 800b7a6:	d008      	beq.n	800b7ba <UART_SetConfig+0x1aa>
 800b7a8:	e00f      	b.n	800b7ca <UART_SetConfig+0x1ba>
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7b0:	e0ad      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b7b2:	2302      	movs	r3, #2
 800b7b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7b8:	e0a9      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b7ba:	2304      	movs	r3, #4
 800b7bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7c0:	e0a5      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b7c2:	2308      	movs	r3, #8
 800b7c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7c8:	e0a1      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b7ca:	2310      	movs	r3, #16
 800b7cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7d0:	e09d      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a4a      	ldr	r2, [pc, #296]	@ (800b900 <UART_SetConfig+0x2f0>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d125      	bne.n	800b828 <UART_SetConfig+0x218>
 800b7dc:	4b45      	ldr	r3, [pc, #276]	@ (800b8f4 <UART_SetConfig+0x2e4>)
 800b7de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b7e6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7e8:	d016      	beq.n	800b818 <UART_SetConfig+0x208>
 800b7ea:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7ec:	d818      	bhi.n	800b820 <UART_SetConfig+0x210>
 800b7ee:	2b80      	cmp	r3, #128	@ 0x80
 800b7f0:	d00a      	beq.n	800b808 <UART_SetConfig+0x1f8>
 800b7f2:	2b80      	cmp	r3, #128	@ 0x80
 800b7f4:	d814      	bhi.n	800b820 <UART_SetConfig+0x210>
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d002      	beq.n	800b800 <UART_SetConfig+0x1f0>
 800b7fa:	2b40      	cmp	r3, #64	@ 0x40
 800b7fc:	d008      	beq.n	800b810 <UART_SetConfig+0x200>
 800b7fe:	e00f      	b.n	800b820 <UART_SetConfig+0x210>
 800b800:	2300      	movs	r3, #0
 800b802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b806:	e082      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b808:	2302      	movs	r3, #2
 800b80a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b80e:	e07e      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b810:	2304      	movs	r3, #4
 800b812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b816:	e07a      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b818:	2308      	movs	r3, #8
 800b81a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b81e:	e076      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b820:	2310      	movs	r3, #16
 800b822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b826:	e072      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a35      	ldr	r2, [pc, #212]	@ (800b904 <UART_SetConfig+0x2f4>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d12a      	bne.n	800b888 <UART_SetConfig+0x278>
 800b832:	4b30      	ldr	r3, [pc, #192]	@ (800b8f4 <UART_SetConfig+0x2e4>)
 800b834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b838:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b83c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b840:	d01a      	beq.n	800b878 <UART_SetConfig+0x268>
 800b842:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b846:	d81b      	bhi.n	800b880 <UART_SetConfig+0x270>
 800b848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b84c:	d00c      	beq.n	800b868 <UART_SetConfig+0x258>
 800b84e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b852:	d815      	bhi.n	800b880 <UART_SetConfig+0x270>
 800b854:	2b00      	cmp	r3, #0
 800b856:	d003      	beq.n	800b860 <UART_SetConfig+0x250>
 800b858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b85c:	d008      	beq.n	800b870 <UART_SetConfig+0x260>
 800b85e:	e00f      	b.n	800b880 <UART_SetConfig+0x270>
 800b860:	2300      	movs	r3, #0
 800b862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b866:	e052      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b868:	2302      	movs	r3, #2
 800b86a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b86e:	e04e      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b870:	2304      	movs	r3, #4
 800b872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b876:	e04a      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b878:	2308      	movs	r3, #8
 800b87a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b87e:	e046      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b880:	2310      	movs	r3, #16
 800b882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b886:	e042      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a17      	ldr	r2, [pc, #92]	@ (800b8ec <UART_SetConfig+0x2dc>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d13a      	bne.n	800b908 <UART_SetConfig+0x2f8>
 800b892:	4b18      	ldr	r3, [pc, #96]	@ (800b8f4 <UART_SetConfig+0x2e4>)
 800b894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b898:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b89c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b8a0:	d01a      	beq.n	800b8d8 <UART_SetConfig+0x2c8>
 800b8a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b8a6:	d81b      	bhi.n	800b8e0 <UART_SetConfig+0x2d0>
 800b8a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b8ac:	d00c      	beq.n	800b8c8 <UART_SetConfig+0x2b8>
 800b8ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b8b2:	d815      	bhi.n	800b8e0 <UART_SetConfig+0x2d0>
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d003      	beq.n	800b8c0 <UART_SetConfig+0x2b0>
 800b8b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8bc:	d008      	beq.n	800b8d0 <UART_SetConfig+0x2c0>
 800b8be:	e00f      	b.n	800b8e0 <UART_SetConfig+0x2d0>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8c6:	e022      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b8c8:	2302      	movs	r3, #2
 800b8ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8ce:	e01e      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b8d0:	2304      	movs	r3, #4
 800b8d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8d6:	e01a      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b8d8:	2308      	movs	r3, #8
 800b8da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8de:	e016      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b8e0:	2310      	movs	r3, #16
 800b8e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8e6:	e012      	b.n	800b90e <UART_SetConfig+0x2fe>
 800b8e8:	cfff69f3 	.word	0xcfff69f3
 800b8ec:	40008000 	.word	0x40008000
 800b8f0:	40013800 	.word	0x40013800
 800b8f4:	40021000 	.word	0x40021000
 800b8f8:	40004400 	.word	0x40004400
 800b8fc:	40004800 	.word	0x40004800
 800b900:	40004c00 	.word	0x40004c00
 800b904:	40005000 	.word	0x40005000
 800b908:	2310      	movs	r3, #16
 800b90a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4aae      	ldr	r2, [pc, #696]	@ (800bbcc <UART_SetConfig+0x5bc>)
 800b914:	4293      	cmp	r3, r2
 800b916:	f040 8097 	bne.w	800ba48 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b91a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b91e:	2b08      	cmp	r3, #8
 800b920:	d823      	bhi.n	800b96a <UART_SetConfig+0x35a>
 800b922:	a201      	add	r2, pc, #4	@ (adr r2, 800b928 <UART_SetConfig+0x318>)
 800b924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b928:	0800b94d 	.word	0x0800b94d
 800b92c:	0800b96b 	.word	0x0800b96b
 800b930:	0800b955 	.word	0x0800b955
 800b934:	0800b96b 	.word	0x0800b96b
 800b938:	0800b95b 	.word	0x0800b95b
 800b93c:	0800b96b 	.word	0x0800b96b
 800b940:	0800b96b 	.word	0x0800b96b
 800b944:	0800b96b 	.word	0x0800b96b
 800b948:	0800b963 	.word	0x0800b963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b94c:	f7fc fd16 	bl	800837c <HAL_RCC_GetPCLK1Freq>
 800b950:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b952:	e010      	b.n	800b976 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b954:	4b9e      	ldr	r3, [pc, #632]	@ (800bbd0 <UART_SetConfig+0x5c0>)
 800b956:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b958:	e00d      	b.n	800b976 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b95a:	f7fc fca1 	bl	80082a0 <HAL_RCC_GetSysClockFreq>
 800b95e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b960:	e009      	b.n	800b976 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b966:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b968:	e005      	b.n	800b976 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b96a:	2300      	movs	r3, #0
 800b96c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b96e:	2301      	movs	r3, #1
 800b970:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b974:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f000 8130 	beq.w	800bbde <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b982:	4a94      	ldr	r2, [pc, #592]	@ (800bbd4 <UART_SetConfig+0x5c4>)
 800b984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b988:	461a      	mov	r2, r3
 800b98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b990:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	685a      	ldr	r2, [r3, #4]
 800b996:	4613      	mov	r3, r2
 800b998:	005b      	lsls	r3, r3, #1
 800b99a:	4413      	add	r3, r2
 800b99c:	69ba      	ldr	r2, [r7, #24]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d305      	bcc.n	800b9ae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b9a8:	69ba      	ldr	r2, [r7, #24]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d903      	bls.n	800b9b6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b9b4:	e113      	b.n	800bbde <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	60bb      	str	r3, [r7, #8]
 800b9bc:	60fa      	str	r2, [r7, #12]
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9c2:	4a84      	ldr	r2, [pc, #528]	@ (800bbd4 <UART_SetConfig+0x5c4>)
 800b9c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	603b      	str	r3, [r7, #0]
 800b9ce:	607a      	str	r2, [r7, #4]
 800b9d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b9d8:	f7f5 fa08 	bl	8000dec <__aeabi_uldivmod>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	460b      	mov	r3, r1
 800b9e0:	4610      	mov	r0, r2
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	f04f 0200 	mov.w	r2, #0
 800b9e8:	f04f 0300 	mov.w	r3, #0
 800b9ec:	020b      	lsls	r3, r1, #8
 800b9ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b9f2:	0202      	lsls	r2, r0, #8
 800b9f4:	6979      	ldr	r1, [r7, #20]
 800b9f6:	6849      	ldr	r1, [r1, #4]
 800b9f8:	0849      	lsrs	r1, r1, #1
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	460c      	mov	r4, r1
 800b9fe:	4605      	mov	r5, r0
 800ba00:	eb12 0804 	adds.w	r8, r2, r4
 800ba04:	eb43 0905 	adc.w	r9, r3, r5
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	469a      	mov	sl, r3
 800ba10:	4693      	mov	fp, r2
 800ba12:	4652      	mov	r2, sl
 800ba14:	465b      	mov	r3, fp
 800ba16:	4640      	mov	r0, r8
 800ba18:	4649      	mov	r1, r9
 800ba1a:	f7f5 f9e7 	bl	8000dec <__aeabi_uldivmod>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	460b      	mov	r3, r1
 800ba22:	4613      	mov	r3, r2
 800ba24:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ba26:	6a3b      	ldr	r3, [r7, #32]
 800ba28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba2c:	d308      	bcc.n	800ba40 <UART_SetConfig+0x430>
 800ba2e:	6a3b      	ldr	r3, [r7, #32]
 800ba30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba34:	d204      	bcs.n	800ba40 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	6a3a      	ldr	r2, [r7, #32]
 800ba3c:	60da      	str	r2, [r3, #12]
 800ba3e:	e0ce      	b.n	800bbde <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ba46:	e0ca      	b.n	800bbde <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	69db      	ldr	r3, [r3, #28]
 800ba4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba50:	d166      	bne.n	800bb20 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ba52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba56:	2b08      	cmp	r3, #8
 800ba58:	d827      	bhi.n	800baaa <UART_SetConfig+0x49a>
 800ba5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba60 <UART_SetConfig+0x450>)
 800ba5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba60:	0800ba85 	.word	0x0800ba85
 800ba64:	0800ba8d 	.word	0x0800ba8d
 800ba68:	0800ba95 	.word	0x0800ba95
 800ba6c:	0800baab 	.word	0x0800baab
 800ba70:	0800ba9b 	.word	0x0800ba9b
 800ba74:	0800baab 	.word	0x0800baab
 800ba78:	0800baab 	.word	0x0800baab
 800ba7c:	0800baab 	.word	0x0800baab
 800ba80:	0800baa3 	.word	0x0800baa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba84:	f7fc fc7a 	bl	800837c <HAL_RCC_GetPCLK1Freq>
 800ba88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba8a:	e014      	b.n	800bab6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba8c:	f7fc fc8c 	bl	80083a8 <HAL_RCC_GetPCLK2Freq>
 800ba90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba92:	e010      	b.n	800bab6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba94:	4b4e      	ldr	r3, [pc, #312]	@ (800bbd0 <UART_SetConfig+0x5c0>)
 800ba96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba98:	e00d      	b.n	800bab6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba9a:	f7fc fc01 	bl	80082a0 <HAL_RCC_GetSysClockFreq>
 800ba9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800baa0:	e009      	b.n	800bab6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800baa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800baa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800baa8:	e005      	b.n	800bab6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800baaa:	2300      	movs	r3, #0
 800baac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bab4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab8:	2b00      	cmp	r3, #0
 800baba:	f000 8090 	beq.w	800bbde <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bac2:	4a44      	ldr	r2, [pc, #272]	@ (800bbd4 <UART_SetConfig+0x5c4>)
 800bac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bac8:	461a      	mov	r2, r3
 800baca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bacc:	fbb3 f3f2 	udiv	r3, r3, r2
 800bad0:	005a      	lsls	r2, r3, #1
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	085b      	lsrs	r3, r3, #1
 800bad8:	441a      	add	r2, r3
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	fbb2 f3f3 	udiv	r3, r2, r3
 800bae2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bae4:	6a3b      	ldr	r3, [r7, #32]
 800bae6:	2b0f      	cmp	r3, #15
 800bae8:	d916      	bls.n	800bb18 <UART_SetConfig+0x508>
 800baea:	6a3b      	ldr	r3, [r7, #32]
 800baec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800baf0:	d212      	bcs.n	800bb18 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800baf2:	6a3b      	ldr	r3, [r7, #32]
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	f023 030f 	bic.w	r3, r3, #15
 800bafa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bafc:	6a3b      	ldr	r3, [r7, #32]
 800bafe:	085b      	lsrs	r3, r3, #1
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	f003 0307 	and.w	r3, r3, #7
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	8bfb      	ldrh	r3, [r7, #30]
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	8bfa      	ldrh	r2, [r7, #30]
 800bb14:	60da      	str	r2, [r3, #12]
 800bb16:	e062      	b.n	800bbde <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bb1e:	e05e      	b.n	800bbde <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bb24:	2b08      	cmp	r3, #8
 800bb26:	d828      	bhi.n	800bb7a <UART_SetConfig+0x56a>
 800bb28:	a201      	add	r2, pc, #4	@ (adr r2, 800bb30 <UART_SetConfig+0x520>)
 800bb2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2e:	bf00      	nop
 800bb30:	0800bb55 	.word	0x0800bb55
 800bb34:	0800bb5d 	.word	0x0800bb5d
 800bb38:	0800bb65 	.word	0x0800bb65
 800bb3c:	0800bb7b 	.word	0x0800bb7b
 800bb40:	0800bb6b 	.word	0x0800bb6b
 800bb44:	0800bb7b 	.word	0x0800bb7b
 800bb48:	0800bb7b 	.word	0x0800bb7b
 800bb4c:	0800bb7b 	.word	0x0800bb7b
 800bb50:	0800bb73 	.word	0x0800bb73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb54:	f7fc fc12 	bl	800837c <HAL_RCC_GetPCLK1Freq>
 800bb58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb5a:	e014      	b.n	800bb86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb5c:	f7fc fc24 	bl	80083a8 <HAL_RCC_GetPCLK2Freq>
 800bb60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb62:	e010      	b.n	800bb86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb64:	4b1a      	ldr	r3, [pc, #104]	@ (800bbd0 <UART_SetConfig+0x5c0>)
 800bb66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb68:	e00d      	b.n	800bb86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb6a:	f7fc fb99 	bl	80082a0 <HAL_RCC_GetSysClockFreq>
 800bb6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb70:	e009      	b.n	800bb86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb78:	e005      	b.n	800bb86 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bb84:	bf00      	nop
    }

    if (pclk != 0U)
 800bb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d028      	beq.n	800bbde <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb90:	4a10      	ldr	r2, [pc, #64]	@ (800bbd4 <UART_SetConfig+0x5c4>)
 800bb92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb96:	461a      	mov	r2, r3
 800bb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb9a:	fbb3 f2f2 	udiv	r2, r3, r2
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	085b      	lsrs	r3, r3, #1
 800bba4:	441a      	add	r2, r3
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bbb0:	6a3b      	ldr	r3, [r7, #32]
 800bbb2:	2b0f      	cmp	r3, #15
 800bbb4:	d910      	bls.n	800bbd8 <UART_SetConfig+0x5c8>
 800bbb6:	6a3b      	ldr	r3, [r7, #32]
 800bbb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbbc:	d20c      	bcs.n	800bbd8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bbbe:	6a3b      	ldr	r3, [r7, #32]
 800bbc0:	b29a      	uxth	r2, r3
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	60da      	str	r2, [r3, #12]
 800bbc8:	e009      	b.n	800bbde <UART_SetConfig+0x5ce>
 800bbca:	bf00      	nop
 800bbcc:	40008000 	.word	0x40008000
 800bbd0:	00f42400 	.word	0x00f42400
 800bbd4:	0800d46c 	.word	0x0800d46c
      }
      else
      {
        ret = HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bbfa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3730      	adds	r7, #48	@ 0x30
 800bc02:	46bd      	mov	sp, r7
 800bc04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bc08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc14:	f003 0308 	and.w	r3, r3, #8
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00a      	beq.n	800bc32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	430a      	orrs	r2, r1
 800bc30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc36:	f003 0301 	and.w	r3, r3, #1
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d00a      	beq.n	800bc54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	430a      	orrs	r2, r1
 800bc52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc58:	f003 0302 	and.w	r3, r3, #2
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00a      	beq.n	800bc76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	430a      	orrs	r2, r1
 800bc74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc7a:	f003 0304 	and.w	r3, r3, #4
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d00a      	beq.n	800bc98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	430a      	orrs	r2, r1
 800bc96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc9c:	f003 0310 	and.w	r3, r3, #16
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d00a      	beq.n	800bcba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	430a      	orrs	r2, r1
 800bcb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcbe:	f003 0320 	and.w	r3, r3, #32
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d00a      	beq.n	800bcdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	430a      	orrs	r2, r1
 800bcda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d01a      	beq.n	800bd1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	430a      	orrs	r2, r1
 800bcfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd06:	d10a      	bne.n	800bd1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	430a      	orrs	r2, r1
 800bd1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00a      	beq.n	800bd40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	430a      	orrs	r2, r1
 800bd3e:	605a      	str	r2, [r3, #4]
  }
}
 800bd40:	bf00      	nop
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b098      	sub	sp, #96	@ 0x60
 800bd50:	af02      	add	r7, sp, #8
 800bd52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bd5c:	f7f9 fc00 	bl	8005560 <HAL_GetTick>
 800bd60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f003 0308 	and.w	r3, r3, #8
 800bd6c:	2b08      	cmp	r3, #8
 800bd6e:	d12f      	bne.n	800bdd0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bd74:	9300      	str	r3, [sp, #0]
 800bd76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 f88e 	bl	800bea0 <UART_WaitOnFlagUntilTimeout>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d022      	beq.n	800bdd0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd92:	e853 3f00 	ldrex	r3, [r3]
 800bd96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd9e:	653b      	str	r3, [r7, #80]	@ 0x50
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	461a      	mov	r2, r3
 800bda6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bda8:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdaa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bdae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bdb0:	e841 2300 	strex	r3, r2, [r1]
 800bdb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bdb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d1e6      	bne.n	800bd8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2220      	movs	r2, #32
 800bdc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdcc:	2303      	movs	r3, #3
 800bdce:	e063      	b.n	800be98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f003 0304 	and.w	r3, r3, #4
 800bdda:	2b04      	cmp	r3, #4
 800bddc:	d149      	bne.n	800be72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bdde:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bde2:	9300      	str	r3, [sp, #0]
 800bde4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bde6:	2200      	movs	r2, #0
 800bde8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 f857 	bl	800bea0 <UART_WaitOnFlagUntilTimeout>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d03c      	beq.n	800be72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be00:	e853 3f00 	ldrex	r3, [r3]
 800be04:	623b      	str	r3, [r7, #32]
   return(result);
 800be06:	6a3b      	ldr	r3, [r7, #32]
 800be08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	461a      	mov	r2, r3
 800be14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be16:	633b      	str	r3, [r7, #48]	@ 0x30
 800be18:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be1e:	e841 2300 	strex	r3, r2, [r1]
 800be22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800be24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1e6      	bne.n	800bdf8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	3308      	adds	r3, #8
 800be30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	e853 3f00 	ldrex	r3, [r3]
 800be38:	60fb      	str	r3, [r7, #12]
   return(result);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f023 0301 	bic.w	r3, r3, #1
 800be40:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	3308      	adds	r3, #8
 800be48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be4a:	61fa      	str	r2, [r7, #28]
 800be4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be4e:	69b9      	ldr	r1, [r7, #24]
 800be50:	69fa      	ldr	r2, [r7, #28]
 800be52:	e841 2300 	strex	r3, r2, [r1]
 800be56:	617b      	str	r3, [r7, #20]
   return(result);
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1e5      	bne.n	800be2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2220      	movs	r2, #32
 800be62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be6e:	2303      	movs	r3, #3
 800be70:	e012      	b.n	800be98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2220      	movs	r2, #32
 800be76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2220      	movs	r2, #32
 800be7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2200      	movs	r2, #0
 800be86:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2200      	movs	r2, #0
 800be92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3758      	adds	r7, #88	@ 0x58
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	603b      	str	r3, [r7, #0]
 800beac:	4613      	mov	r3, r2
 800beae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800beb0:	e04f      	b.n	800bf52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beb8:	d04b      	beq.n	800bf52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800beba:	f7f9 fb51 	bl	8005560 <HAL_GetTick>
 800bebe:	4602      	mov	r2, r0
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	69ba      	ldr	r2, [r7, #24]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d302      	bcc.n	800bed0 <UART_WaitOnFlagUntilTimeout+0x30>
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d101      	bne.n	800bed4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bed0:	2303      	movs	r3, #3
 800bed2:	e04e      	b.n	800bf72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f003 0304 	and.w	r3, r3, #4
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d037      	beq.n	800bf52 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	2b80      	cmp	r3, #128	@ 0x80
 800bee6:	d034      	beq.n	800bf52 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	2b40      	cmp	r3, #64	@ 0x40
 800beec:	d031      	beq.n	800bf52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	69db      	ldr	r3, [r3, #28]
 800bef4:	f003 0308 	and.w	r3, r3, #8
 800bef8:	2b08      	cmp	r3, #8
 800befa:	d110      	bne.n	800bf1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2208      	movs	r2, #8
 800bf02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f000 f920 	bl	800c14a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2208      	movs	r2, #8
 800bf0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2200      	movs	r2, #0
 800bf16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	e029      	b.n	800bf72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	69db      	ldr	r3, [r3, #28]
 800bf24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bf28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bf2c:	d111      	bne.n	800bf52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bf36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bf38:	68f8      	ldr	r0, [r7, #12]
 800bf3a:	f000 f906 	bl	800c14a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2220      	movs	r2, #32
 800bf42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bf4e:	2303      	movs	r3, #3
 800bf50:	e00f      	b.n	800bf72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	69da      	ldr	r2, [r3, #28]
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	4013      	ands	r3, r2
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	bf0c      	ite	eq
 800bf62:	2301      	moveq	r3, #1
 800bf64:	2300      	movne	r3, #0
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	461a      	mov	r2, r3
 800bf6a:	79fb      	ldrb	r3, [r7, #7]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d0a0      	beq.n	800beb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
	...

0800bf7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b096      	sub	sp, #88	@ 0x58
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	4613      	mov	r3, r2
 800bf88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	88fa      	ldrh	r2, [r7, #6]
 800bf94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2222      	movs	r2, #34	@ 0x22
 800bfa4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d02d      	beq.n	800c00e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfb8:	4a40      	ldr	r2, [pc, #256]	@ (800c0bc <UART_Start_Receive_DMA+0x140>)
 800bfba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfc2:	4a3f      	ldr	r2, [pc, #252]	@ (800c0c0 <UART_Start_Receive_DMA+0x144>)
 800bfc4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfcc:	4a3d      	ldr	r2, [pc, #244]	@ (800c0c4 <UART_Start_Receive_DMA+0x148>)
 800bfce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	3324      	adds	r3, #36	@ 0x24
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfec:	461a      	mov	r2, r3
 800bfee:	88fb      	ldrh	r3, [r7, #6]
 800bff0:	f7fb f800 	bl	8006ff4 <HAL_DMA_Start_IT>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d009      	beq.n	800c00e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2210      	movs	r2, #16
 800bffe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2220      	movs	r2, #32
 800c006:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c00a:	2301      	movs	r3, #1
 800c00c:	e051      	b.n	800c0b2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d018      	beq.n	800c048 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c01e:	e853 3f00 	ldrex	r3, [r3]
 800c022:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c02a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	461a      	mov	r2, r3
 800c032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c034:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c036:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c038:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c03a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c03c:	e841 2300 	strex	r3, r2, [r1]
 800c040:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1e6      	bne.n	800c016 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	3308      	adds	r3, #8
 800c04e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c052:	e853 3f00 	ldrex	r3, [r3]
 800c056:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c05a:	f043 0301 	orr.w	r3, r3, #1
 800c05e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	3308      	adds	r3, #8
 800c066:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c068:	637a      	str	r2, [r7, #52]	@ 0x34
 800c06a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c06c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c06e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c070:	e841 2300 	strex	r3, r2, [r1]
 800c074:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d1e5      	bne.n	800c048 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	3308      	adds	r3, #8
 800c082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	e853 3f00 	ldrex	r3, [r3]
 800c08a:	613b      	str	r3, [r7, #16]
   return(result);
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c092:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	3308      	adds	r3, #8
 800c09a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c09c:	623a      	str	r2, [r7, #32]
 800c09e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a0:	69f9      	ldr	r1, [r7, #28]
 800c0a2:	6a3a      	ldr	r2, [r7, #32]
 800c0a4:	e841 2300 	strex	r3, r2, [r1]
 800c0a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0aa:	69bb      	ldr	r3, [r7, #24]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1e5      	bne.n	800c07c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3758      	adds	r7, #88	@ 0x58
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	0800c2d5 	.word	0x0800c2d5
 800c0c0:	0800c409 	.word	0x0800c409
 800c0c4:	0800c44f 	.word	0x0800c44f

0800c0c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b08f      	sub	sp, #60	@ 0x3c
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d6:	6a3b      	ldr	r3, [r7, #32]
 800c0d8:	e853 3f00 	ldrex	r3, [r3]
 800c0dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c0e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c0f0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0f6:	e841 2300 	strex	r3, r2, [r1]
 800c0fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1e6      	bne.n	800c0d0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	3308      	adds	r3, #8
 800c108:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	e853 3f00 	ldrex	r3, [r3]
 800c110:	60bb      	str	r3, [r7, #8]
   return(result);
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c118:	633b      	str	r3, [r7, #48]	@ 0x30
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	3308      	adds	r3, #8
 800c120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c122:	61ba      	str	r2, [r7, #24]
 800c124:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c126:	6979      	ldr	r1, [r7, #20]
 800c128:	69ba      	ldr	r2, [r7, #24]
 800c12a:	e841 2300 	strex	r3, r2, [r1]
 800c12e:	613b      	str	r3, [r7, #16]
   return(result);
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d1e5      	bne.n	800c102 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2220      	movs	r2, #32
 800c13a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c13e:	bf00      	nop
 800c140:	373c      	adds	r7, #60	@ 0x3c
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr

0800c14a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c14a:	b480      	push	{r7}
 800c14c:	b095      	sub	sp, #84	@ 0x54
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c15a:	e853 3f00 	ldrex	r3, [r3]
 800c15e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c162:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	461a      	mov	r2, r3
 800c16e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c170:	643b      	str	r3, [r7, #64]	@ 0x40
 800c172:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c174:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c176:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c178:	e841 2300 	strex	r3, r2, [r1]
 800c17c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1e6      	bne.n	800c152 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	3308      	adds	r3, #8
 800c18a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c18c:	6a3b      	ldr	r3, [r7, #32]
 800c18e:	e853 3f00 	ldrex	r3, [r3]
 800c192:	61fb      	str	r3, [r7, #28]
   return(result);
 800c194:	69fb      	ldr	r3, [r7, #28]
 800c196:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c19a:	f023 0301 	bic.w	r3, r3, #1
 800c19e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	3308      	adds	r3, #8
 800c1a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c1a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c1aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c1ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1b0:	e841 2300 	strex	r3, r2, [r1]
 800c1b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1e3      	bne.n	800c184 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d118      	bne.n	800c1f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	e853 3f00 	ldrex	r3, [r3]
 800c1d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	f023 0310 	bic.w	r3, r3, #16
 800c1d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1e2:	61bb      	str	r3, [r7, #24]
 800c1e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e6:	6979      	ldr	r1, [r7, #20]
 800c1e8:	69ba      	ldr	r2, [r7, #24]
 800c1ea:	e841 2300 	strex	r3, r2, [r1]
 800c1ee:	613b      	str	r3, [r7, #16]
   return(result);
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d1e6      	bne.n	800c1c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2220      	movs	r2, #32
 800c1fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c20a:	bf00      	nop
 800c20c:	3754      	adds	r7, #84	@ 0x54
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr

0800c216 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b090      	sub	sp, #64	@ 0x40
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c222:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f003 0320 	and.w	r3, r3, #32
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d137      	bne.n	800c2a2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c234:	2200      	movs	r2, #0
 800c236:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c23a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	3308      	adds	r3, #8
 800c240:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c244:	e853 3f00 	ldrex	r3, [r3]
 800c248:	623b      	str	r3, [r7, #32]
   return(result);
 800c24a:	6a3b      	ldr	r3, [r7, #32]
 800c24c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c250:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	3308      	adds	r3, #8
 800c258:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c25a:	633a      	str	r2, [r7, #48]	@ 0x30
 800c25c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c25e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c262:	e841 2300 	strex	r3, r2, [r1]
 800c266:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1e5      	bne.n	800c23a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c26e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	e853 3f00 	ldrex	r3, [r3]
 800c27a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c282:	637b      	str	r3, [r7, #52]	@ 0x34
 800c284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	461a      	mov	r2, r3
 800c28a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c28c:	61fb      	str	r3, [r7, #28]
 800c28e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c290:	69b9      	ldr	r1, [r7, #24]
 800c292:	69fa      	ldr	r2, [r7, #28]
 800c294:	e841 2300 	strex	r3, r2, [r1]
 800c298:	617b      	str	r3, [r7, #20]
   return(result);
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1e6      	bne.n	800c26e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c2a0:	e004      	b.n	800c2ac <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800c2a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c2a8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c2aa:	4798      	blx	r3
}
 800c2ac:	bf00      	nop
 800c2ae:	3740      	adds	r7, #64	@ 0x40
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2c0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c2c8:	68f8      	ldr	r0, [r7, #12]
 800c2ca:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2cc:	bf00      	nop
 800c2ce:	3710      	adds	r7, #16
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b09c      	sub	sp, #112	@ 0x70
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2e0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f003 0320 	and.w	r3, r3, #32
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d171      	bne.n	800c3d4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c2f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c300:	e853 3f00 	ldrex	r3, [r3]
 800c304:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c306:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c30c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c30e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	461a      	mov	r2, r3
 800c314:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c316:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c318:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c31c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c31e:	e841 2300 	strex	r3, r2, [r1]
 800c322:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c326:	2b00      	cmp	r3, #0
 800c328:	d1e6      	bne.n	800c2f8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c32a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	3308      	adds	r3, #8
 800c330:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c334:	e853 3f00 	ldrex	r3, [r3]
 800c338:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c33a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c33c:	f023 0301 	bic.w	r3, r3, #1
 800c340:	667b      	str	r3, [r7, #100]	@ 0x64
 800c342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	3308      	adds	r3, #8
 800c348:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c34a:	647a      	str	r2, [r7, #68]	@ 0x44
 800c34c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c350:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c352:	e841 2300 	strex	r3, r2, [r1]
 800c356:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d1e5      	bne.n	800c32a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c35e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	3308      	adds	r3, #8
 800c364:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c368:	e853 3f00 	ldrex	r3, [r3]
 800c36c:	623b      	str	r3, [r7, #32]
   return(result);
 800c36e:	6a3b      	ldr	r3, [r7, #32]
 800c370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c374:	663b      	str	r3, [r7, #96]	@ 0x60
 800c376:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	3308      	adds	r3, #8
 800c37c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c37e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c380:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c382:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c384:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c386:	e841 2300 	strex	r3, r2, [r1]
 800c38a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d1e5      	bne.n	800c35e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c394:	2220      	movs	r2, #32
 800c396:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c39a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c39c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d118      	bne.n	800c3d4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	e853 3f00 	ldrex	r3, [r3]
 800c3ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f023 0310 	bic.w	r3, r3, #16
 800c3b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c3b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	461a      	mov	r2, r3
 800c3be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3c0:	61fb      	str	r3, [r7, #28]
 800c3c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c4:	69b9      	ldr	r1, [r7, #24]
 800c3c6:	69fa      	ldr	r2, [r7, #28]
 800c3c8:	e841 2300 	strex	r3, r2, [r1]
 800c3cc:	617b      	str	r3, [r7, #20]
   return(result);
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1e6      	bne.n	800c3a2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	d109      	bne.n	800c3f6 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800c3e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c3e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c3ea:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c3f2:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c3f4:	e004      	b.n	800c400 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800c3f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c3fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c3fe:	4798      	blx	r3
}
 800c400:	bf00      	nop
 800c402:	3770      	adds	r7, #112	@ 0x70
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c414:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2201      	movs	r2, #1
 800c41a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c420:	2b01      	cmp	r3, #1
 800c422:	d10b      	bne.n	800c43c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c42a:	68fa      	ldr	r2, [r7, #12]
 800c42c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c430:	0852      	lsrs	r2, r2, #1
 800c432:	b292      	uxth	r2, r2
 800c434:	4611      	mov	r1, r2
 800c436:	68f8      	ldr	r0, [r7, #12]
 800c438:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c43a:	e004      	b.n	800c446 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c442:	68f8      	ldr	r0, [r7, #12]
 800c444:	4798      	blx	r3
}
 800c446:	bf00      	nop
 800c448:	3710      	adds	r7, #16
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c44e:	b580      	push	{r7, lr}
 800c450:	b086      	sub	sp, #24
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c45a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c462:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c46a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	689b      	ldr	r3, [r3, #8]
 800c472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c476:	2b80      	cmp	r3, #128	@ 0x80
 800c478:	d109      	bne.n	800c48e <UART_DMAError+0x40>
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	2b21      	cmp	r3, #33	@ 0x21
 800c47e:	d106      	bne.n	800c48e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	2200      	movs	r2, #0
 800c484:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c488:	6978      	ldr	r0, [r7, #20]
 800c48a:	f7ff fe1d 	bl	800c0c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	689b      	ldr	r3, [r3, #8]
 800c494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c498:	2b40      	cmp	r3, #64	@ 0x40
 800c49a:	d109      	bne.n	800c4b0 <UART_DMAError+0x62>
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2b22      	cmp	r3, #34	@ 0x22
 800c4a0:	d106      	bne.n	800c4b0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c4aa:	6978      	ldr	r0, [r7, #20]
 800c4ac:	f7ff fe4d 	bl	800c14a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4b6:	f043 0210 	orr.w	r2, r3, #16
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c4c6:	6978      	ldr	r0, [r7, #20]
 800c4c8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4ca:	bf00      	nop
 800c4cc:	3718      	adds	r7, #24
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}

0800c4d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b084      	sub	sp, #16
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4fa:	bf00      	nop
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b088      	sub	sp, #32
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	e853 3f00 	ldrex	r3, [r3]
 800c516:	60bb      	str	r3, [r7, #8]
   return(result);
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c51e:	61fb      	str	r3, [r7, #28]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	461a      	mov	r2, r3
 800c526:	69fb      	ldr	r3, [r7, #28]
 800c528:	61bb      	str	r3, [r7, #24]
 800c52a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c52c:	6979      	ldr	r1, [r7, #20]
 800c52e:	69ba      	ldr	r2, [r7, #24]
 800c530:	e841 2300 	strex	r3, r2, [r1]
 800c534:	613b      	str	r3, [r7, #16]
   return(result);
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d1e6      	bne.n	800c50a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2220      	movs	r2, #32
 800c540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2200      	movs	r2, #0
 800c548:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c554:	bf00      	nop
 800c556:	3720      	adds	r7, #32
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c564:	bf00      	nop
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c578:	bf00      	nop
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c58c:	bf00      	nop
 800c58e:	370c      	adds	r7, #12
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d101      	bne.n	800c5ae <HAL_UARTEx_DisableFifoMode+0x16>
 800c5aa:	2302      	movs	r3, #2
 800c5ac:	e027      	b.n	800c5fe <HAL_UARTEx_DisableFifoMode+0x66>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2224      	movs	r2, #36	@ 0x24
 800c5ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f022 0201 	bic.w	r2, r2, #1
 800c5d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c5dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2220      	movs	r2, #32
 800c5f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c5fc:	2300      	movs	r3, #0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3714      	adds	r7, #20
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr

0800c60a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b084      	sub	sp, #16
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
 800c612:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d101      	bne.n	800c622 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c61e:	2302      	movs	r3, #2
 800c620:	e02d      	b.n	800c67e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2201      	movs	r2, #1
 800c626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2224      	movs	r2, #36	@ 0x24
 800c62e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f022 0201 	bic.w	r2, r2, #1
 800c648:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	689b      	ldr	r3, [r3, #8]
 800c650:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	683a      	ldr	r2, [r7, #0]
 800c65a:	430a      	orrs	r2, r1
 800c65c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 f850 	bl	800c704 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2220      	movs	r2, #32
 800c670:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c67c:	2300      	movs	r3, #0
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c686:	b580      	push	{r7, lr}
 800c688:	b084      	sub	sp, #16
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
 800c68e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c696:	2b01      	cmp	r3, #1
 800c698:	d101      	bne.n	800c69e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c69a:	2302      	movs	r3, #2
 800c69c:	e02d      	b.n	800c6fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2224      	movs	r2, #36	@ 0x24
 800c6aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f022 0201 	bic.w	r2, r2, #1
 800c6c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	683a      	ldr	r2, [r7, #0]
 800c6d6:	430a      	orrs	r2, r1
 800c6d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 f812 	bl	800c704 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2220      	movs	r2, #32
 800c6ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c6f8:	2300      	movs	r3, #0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
	...

0800c704 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c710:	2b00      	cmp	r3, #0
 800c712:	d108      	bne.n	800c726 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2201      	movs	r2, #1
 800c718:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2201      	movs	r2, #1
 800c720:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c724:	e031      	b.n	800c78a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c726:	2308      	movs	r3, #8
 800c728:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c72a:	2308      	movs	r3, #8
 800c72c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	0e5b      	lsrs	r3, r3, #25
 800c736:	b2db      	uxtb	r3, r3
 800c738:	f003 0307 	and.w	r3, r3, #7
 800c73c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	0f5b      	lsrs	r3, r3, #29
 800c746:	b2db      	uxtb	r3, r3
 800c748:	f003 0307 	and.w	r3, r3, #7
 800c74c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c74e:	7bbb      	ldrb	r3, [r7, #14]
 800c750:	7b3a      	ldrb	r2, [r7, #12]
 800c752:	4911      	ldr	r1, [pc, #68]	@ (800c798 <UARTEx_SetNbDataToProcess+0x94>)
 800c754:	5c8a      	ldrb	r2, [r1, r2]
 800c756:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c75a:	7b3a      	ldrb	r2, [r7, #12]
 800c75c:	490f      	ldr	r1, [pc, #60]	@ (800c79c <UARTEx_SetNbDataToProcess+0x98>)
 800c75e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c760:	fb93 f3f2 	sdiv	r3, r3, r2
 800c764:	b29a      	uxth	r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c76c:	7bfb      	ldrb	r3, [r7, #15]
 800c76e:	7b7a      	ldrb	r2, [r7, #13]
 800c770:	4909      	ldr	r1, [pc, #36]	@ (800c798 <UARTEx_SetNbDataToProcess+0x94>)
 800c772:	5c8a      	ldrb	r2, [r1, r2]
 800c774:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c778:	7b7a      	ldrb	r2, [r7, #13]
 800c77a:	4908      	ldr	r1, [pc, #32]	@ (800c79c <UARTEx_SetNbDataToProcess+0x98>)
 800c77c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c77e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c782:	b29a      	uxth	r2, r3
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c78a:	bf00      	nop
 800c78c:	3714      	adds	r7, #20
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	0800d484 	.word	0x0800d484
 800c79c:	0800d48c 	.word	0x0800d48c

0800c7a0 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	ed93 7a06 	vldr	s14, [r3, #24]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	edd3 7a07 	vldr	s15, [r3, #28]
 800c7b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	edd3 7a08 	vldr	s15, [r3, #32]
 800c7c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	edd3 7a06 	vldr	s15, [r3, #24]
 800c7d0:	eeb1 7a67 	vneg.f32	s14, s15
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	edd3 7a08 	vldr	s15, [r3, #32]
 800c7da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c7de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6a1a      	ldr	r2, [r3, #32]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d006      	beq.n	800c804 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	330c      	adds	r3, #12
 800c7fa:	220c      	movs	r2, #12
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	4618      	mov	r0, r3
 800c800:	f000 fcc4 	bl	800d18c <memset>
  }

}
 800c804:	bf00      	nop
 800c806:	3708      	adds	r7, #8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b08b      	sub	sp, #44	@ 0x2c
 800c810:	af00      	add	r7, sp, #0
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	881b      	ldrh	r3, [r3, #0]
 800c82e:	461a      	mov	r2, r3
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	885b      	ldrh	r3, [r3, #2]
 800c834:	fb02 f303 	mul.w	r3, r2, r3
 800c838:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800c83e:	e013      	b.n	800c868 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800c840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c842:	1d1a      	adds	r2, r3, #4
 800c844:	627a      	str	r2, [r7, #36]	@ 0x24
 800c846:	ed93 7a00 	vldr	s14, [r3]
 800c84a:	6a3b      	ldr	r3, [r7, #32]
 800c84c:	1d1a      	adds	r2, r3, #4
 800c84e:	623a      	str	r2, [r7, #32]
 800c850:	edd3 7a00 	vldr	s15, [r3]
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	1d1a      	adds	r2, r3, #4
 800c858:	61fa      	str	r2, [r7, #28]
 800c85a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c85e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	3b01      	subs	r3, #1
 800c866:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d1e8      	bne.n	800c840 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c86e:	2300      	movs	r3, #0
 800c870:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800c872:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c876:	4618      	mov	r0, r3
 800c878:	372c      	adds	r7, #44	@ 0x2c
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr

0800c882 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800c882:	b480      	push	{r7}
 800c884:	b085      	sub	sp, #20
 800c886:	af00      	add	r7, sp, #0
 800c888:	60f8      	str	r0, [r7, #12]
 800c88a:	607b      	str	r3, [r7, #4]
 800c88c:	460b      	mov	r3, r1
 800c88e:	817b      	strh	r3, [r7, #10]
 800c890:	4613      	mov	r3, r2
 800c892:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	897a      	ldrh	r2, [r7, #10]
 800c898:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	893a      	ldrh	r2, [r7, #8]
 800c89e:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	605a      	str	r2, [r3, #4]
}
 800c8a6:	bf00      	nop
 800c8a8:	3714      	adds	r7, #20
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr

0800c8b2 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800c8b2:	b480      	push	{r7}
 800c8b4:	b0bb      	sub	sp, #236	@ 0xec
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
 800c8ba:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	881b      	ldrh	r3, [r3, #0]
 800c8cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	885b      	ldrh	r3, [r3, #2]
 800c8d2:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800c8d4:	f04f 0300 	mov.w	r3, #0
 800c8d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c8dc:	f04f 0300 	mov.w	r3, #0
 800c8e0:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800c8e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c8ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800c8ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800c8f4:	e03b      	b.n	800c96e <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800c8f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c8f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c8fc:	1ad3      	subs	r3, r2, r3
 800c8fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c902:	e00c      	b.n	800c91e <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800c904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c908:	1d1a      	adds	r2, r3, #4
 800c90a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800c90e:	f04f 0200 	mov.w	r2, #0
 800c912:	601a      	str	r2, [r3, #0]
        j--;
 800c914:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c918:	3b01      	subs	r3, #1
 800c91a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c91e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c922:	2b00      	cmp	r3, #0
 800c924:	d1ee      	bne.n	800c904 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800c926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c92a:	1d1a      	adds	r2, r3, #4
 800c92c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800c930:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800c934:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800c936:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c93a:	3b01      	subs	r3, #1
 800c93c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c940:	e00c      	b.n	800c95c <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800c942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c946:	1d1a      	adds	r2, r3, #4
 800c948:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800c94c:	f04f 0200 	mov.w	r2, #0
 800c950:	601a      	str	r2, [r3, #0]
        j--;
 800c952:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c956:	3b01      	subs	r3, #1
 800c958:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c95c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c960:	2b00      	cmp	r3, #0
 800c962:	d1ee      	bne.n	800c942 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800c964:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c968:	3b01      	subs	r3, #1
 800c96a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800c96e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d1bf      	bne.n	800c8f6 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800c976:	2300      	movs	r3, #0
 800c978:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c97c:	e2c7      	b.n	800cf0e <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800c97e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c982:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	685a      	ldr	r2, [r3, #4]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	885b      	ldrh	r3, [r3, #2]
 800c98c:	3301      	adds	r3, #1
 800c98e:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800c992:	fb01 f303 	mul.w	r3, r1, r3
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	4413      	add	r3, r2
 800c99a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800c99e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800c9a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c9ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800c9b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c9ba:	e02c      	b.n	800ca16 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	685a      	ldr	r2, [r3, #4]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	885b      	ldrh	r3, [r3, #2]
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c9ca:	fb03 f101 	mul.w	r1, r3, r1
 800c9ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c9d2:	440b      	add	r3, r1
 800c9d4:	009b      	lsls	r3, r3, #2
 800c9d6:	4413      	add	r3, r2
 800c9d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800c9dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800c9e4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800c9e8:	eeb0 7ae7 	vabs.f32	s14, s15
 800c9ec:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c9f0:	eef0 7ae7 	vabs.f32	s15, s15
 800c9f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9fc:	dd06      	ble.n	800ca0c <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800c9fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ca02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800ca06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800ca0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ca10:	3301      	adds	r3, #1
 800ca12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ca16:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ca1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d3cd      	bcc.n	800c9bc <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800ca20:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ca24:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ca28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca2c:	f000 809b 	beq.w	800cb66 <arm_mat_inverse_f32+0x2b4>
 800ca30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ca34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	f000 8094 	beq.w	800cb66 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	885b      	ldrh	r3, [r3, #2]
 800ca52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ca56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca5a:	1ad3      	subs	r3, r2, r3
 800ca5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca60:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ca62:	fb03 f202 	mul.w	r2, r3, r2
 800ca66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca6a:	4413      	add	r3, r2
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ca72:	4413      	add	r3, r2
 800ca74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ca78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca7a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ca7e:	fb03 f202 	mul.w	r2, r3, r2
 800ca82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca86:	4413      	add	r3, r2
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ca8e:	4413      	add	r3, r2
 800ca90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ca94:	2300      	movs	r3, #0
 800ca96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ca9a:	e018      	b.n	800cace <arm_mat_inverse_f32+0x21c>
 800ca9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800caa4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800caa8:	1d1a      	adds	r2, r3, #4
 800caaa:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800caae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cab2:	6812      	ldr	r2, [r2, #0]
 800cab4:	601a      	str	r2, [r3, #0]
 800cab6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800caba:	1d1a      	adds	r2, r3, #4
 800cabc:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800cac0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cac2:	601a      	str	r2, [r3, #0]
 800cac4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800cac8:	3301      	adds	r3, #1
 800caca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cace:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800cad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cad4:	429a      	cmp	r2, r3
 800cad6:	dbe1      	blt.n	800ca9c <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	885b      	ldrh	r3, [r3, #2]
 800caec:	647b      	str	r3, [r7, #68]	@ 0x44
 800caee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800caf0:	643b      	str	r3, [r7, #64]	@ 0x40
 800caf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800caf4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800caf6:	fb02 f303 	mul.w	r3, r2, r3
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cb00:	4413      	add	r3, r2
 800cb02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cb06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cb0c:	fb02 f303 	mul.w	r3, r2, r3
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cb16:	4413      	add	r3, r2
 800cb18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cb22:	e018      	b.n	800cb56 <arm_mat_inverse_f32+0x2a4>
 800cb24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb30:	1d1a      	adds	r2, r3, #4
 800cb32:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800cb36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cb3a:	6812      	ldr	r2, [r2, #0]
 800cb3c:	601a      	str	r2, [r3, #0]
 800cb3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cb42:	1d1a      	adds	r2, r3, #4
 800cb44:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cb48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cb4a:	601a      	str	r2, [r3, #0]
 800cb4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800cb50:	3301      	adds	r3, #1
 800cb52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cb56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cb5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	dbe1      	blt.n	800cb24 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800cb60:	2301      	movs	r3, #1
 800cb62:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800cb66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d009      	beq.n	800cb82 <arm_mat_inverse_f32+0x2d0>
 800cb6e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cb72:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cb76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb7a:	d102      	bne.n	800cb82 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800cb7c:	f06f 0304 	mvn.w	r3, #4
 800cb80:	e208      	b.n	800cf94 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800cb82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb86:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800cb8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb8e:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	885b      	ldrh	r3, [r3, #2]
 800cb9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cba0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cba2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cba6:	1ad3      	subs	r3, r2, r3
 800cba8:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cbae:	fb03 f202 	mul.w	r2, r3, r2
 800cbb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cbb6:	4413      	add	r3, r2
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800cbbe:	4413      	add	r3, r2
 800cbc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cbca:	e011      	b.n	800cbf0 <arm_mat_inverse_f32+0x33e>
 800cbcc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cbd0:	1d1a      	adds	r2, r3, #4
 800cbd2:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800cbd6:	ed93 7a00 	vldr	s14, [r3]
 800cbda:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cbde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbe2:	edc3 7a00 	vstr	s15, [r3]
 800cbe6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cbea:	3301      	adds	r3, #1
 800cbec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cbf0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	dbe8      	blt.n	800cbcc <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	885b      	ldrh	r3, [r3, #2]
 800cc06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc10:	fb02 f303 	mul.w	r3, r2, r3
 800cc14:	009b      	lsls	r3, r3, #2
 800cc16:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800cc1a:	4413      	add	r3, r2
 800cc1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cc20:	2300      	movs	r3, #0
 800cc22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cc26:	e011      	b.n	800cc4c <arm_mat_inverse_f32+0x39a>
 800cc28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cc2c:	1d1a      	adds	r2, r3, #4
 800cc2e:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800cc32:	ed93 7a00 	vldr	s14, [r3]
 800cc36:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cc3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc3e:	edc3 7a00 	vstr	s15, [r3]
 800cc42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cc46:	3301      	adds	r3, #1
 800cc48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cc4c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800cc50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc52:	429a      	cmp	r2, r3
 800cc54:	dbe8      	blt.n	800cc28 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800cc56:	2300      	movs	r3, #0
 800cc58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800cc5c:	e0ae      	b.n	800cdbc <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	685a      	ldr	r2, [r3, #4]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	885b      	ldrh	r3, [r3, #2]
 800cc66:	4619      	mov	r1, r3
 800cc68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cc6c:	fb03 f101 	mul.w	r1, r3, r1
 800cc70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cc74:	440b      	add	r3, r1
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	4413      	add	r3, r2
 800cc7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800cc7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	885b      	ldrh	r3, [r3, #2]
 800cc9c:	617b      	str	r3, [r7, #20]
 800cc9e:	697a      	ldr	r2, [r7, #20]
 800cca0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cca4:	1ad3      	subs	r3, r2, r3
 800cca6:	613b      	str	r3, [r7, #16]
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ccae:	fb03 f202 	mul.w	r2, r3, r2
 800ccb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ccb6:	4413      	add	r3, r2
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800ccbe:	4413      	add	r3, r2
 800ccc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ccc8:	fb03 f202 	mul.w	r2, r3, r2
 800cccc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ccd0:	4413      	add	r3, r2
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800ccd8:	4413      	add	r3, r2
 800ccda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ccde:	2300      	movs	r3, #0
 800cce0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cce4:	e01a      	b.n	800cd1c <arm_mat_inverse_f32+0x46a>
 800cce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ccea:	1d1a      	adds	r2, r3, #4
 800ccec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ccf0:	ed93 7a00 	vldr	s14, [r3]
 800ccf4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ccf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cd00:	1d1a      	adds	r2, r3, #4
 800cd02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800cd06:	ed93 7a00 	vldr	s14, [r3]
 800cd0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd0e:	edc3 7a00 	vstr	s15, [r3]
 800cd12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cd16:	3301      	adds	r3, #1
 800cd18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cd1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	dbdf      	blt.n	800cce6 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	885b      	ldrh	r3, [r3, #2]
 800cd3a:	60fb      	str	r3, [r7, #12]
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	60bb      	str	r3, [r7, #8]
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cd46:	fb02 f303 	mul.w	r3, r2, r3
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cd50:	4413      	add	r3, r2
 800cd52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cd5a:	fb02 f303 	mul.w	r3, r2, r3
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cd64:	4413      	add	r3, r2
 800cd66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cd70:	e01a      	b.n	800cda8 <arm_mat_inverse_f32+0x4f6>
 800cd72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cd76:	1d1a      	adds	r2, r3, #4
 800cd78:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cd7c:	ed93 7a00 	vldr	s14, [r3]
 800cd80:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cd84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cd8c:	1d1a      	adds	r2, r3, #4
 800cd8e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800cd92:	ed93 7a00 	vldr	s14, [r3]
 800cd96:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd9a:	edc3 7a00 	vstr	s15, [r3]
 800cd9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cda2:	3301      	adds	r3, #1
 800cda4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cda8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	dbdf      	blt.n	800cd72 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800cdb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cdbc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cdc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	f4ff af4b 	bcc.w	800cc5e <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800cdc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdca:	3301      	adds	r3, #1
 800cdcc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cdd0:	e092      	b.n	800cef8 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	685a      	ldr	r2, [r3, #4]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	885b      	ldrh	r3, [r3, #2]
 800cdda:	4619      	mov	r1, r3
 800cddc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cde0:	fb03 f101 	mul.w	r1, r3, r1
 800cde4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cde8:	440b      	add	r3, r1
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	4413      	add	r3, r2
 800cdee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800cdf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	677b      	str	r3, [r7, #116]	@ 0x74
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	885b      	ldrh	r3, [r3, #2]
 800ce0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ce14:	1ad3      	subs	r3, r2, r3
 800ce16:	623b      	str	r3, [r7, #32]
 800ce18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce1a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ce1e:	fb03 f202 	mul.w	r2, r3, r2
 800ce22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ce26:	4413      	add	r3, r2
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ce2c:	4413      	add	r3, r2
 800ce2e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ce30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce34:	fb03 f202 	mul.w	r2, r3, r2
 800ce38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ce3c:	4413      	add	r3, r2
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ce42:	4413      	add	r3, r2
 800ce44:	677b      	str	r3, [r7, #116]	@ 0x74
 800ce46:	2300      	movs	r3, #0
 800ce48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ce4a:	e014      	b.n	800ce76 <arm_mat_inverse_f32+0x5c4>
 800ce4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ce4e:	1d1a      	adds	r2, r3, #4
 800ce50:	677a      	str	r2, [r7, #116]	@ 0x74
 800ce52:	ed93 7a00 	vldr	s14, [r3]
 800ce56:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ce5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce60:	1d1a      	adds	r2, r3, #4
 800ce62:	67ba      	str	r2, [r7, #120]	@ 0x78
 800ce64:	ed93 7a00 	vldr	s14, [r3]
 800ce68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce6c:	edc3 7a00 	vstr	s15, [r3]
 800ce70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ce72:	3301      	adds	r3, #1
 800ce74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ce76:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ce78:	6a3b      	ldr	r3, [r7, #32]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	dbe6      	blt.n	800ce4c <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	885b      	ldrh	r3, [r3, #2]
 800ce8e:	61fb      	str	r3, [r7, #28]
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	61bb      	str	r3, [r7, #24]
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ce9a:	fb02 f303 	mul.w	r3, r2, r3
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cea2:	4413      	add	r3, r2
 800cea4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cea6:	69fb      	ldr	r3, [r7, #28]
 800cea8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ceaa:	fb02 f303 	mul.w	r3, r2, r3
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ceb2:	4413      	add	r3, r2
 800ceb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	673b      	str	r3, [r7, #112]	@ 0x70
 800ceba:	e014      	b.n	800cee6 <arm_mat_inverse_f32+0x634>
 800cebc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cebe:	1d1a      	adds	r2, r3, #4
 800cec0:	66ba      	str	r2, [r7, #104]	@ 0x68
 800cec2:	ed93 7a00 	vldr	s14, [r3]
 800cec6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ceca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ced0:	1d1a      	adds	r2, r3, #4
 800ced2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ced4:	ed93 7a00 	vldr	s14, [r3]
 800ced8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cedc:	edc3 7a00 	vstr	s15, [r3]
 800cee0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cee2:	3301      	adds	r3, #1
 800cee4:	673b      	str	r3, [r7, #112]	@ 0x70
 800cee6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	dbe6      	blt.n	800cebc <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800ceee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cef2:	3301      	adds	r3, #1
 800cef4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cef8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cefc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cefe:	429a      	cmp	r2, r3
 800cf00:	f4ff af67 	bcc.w	800cdd2 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800cf04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cf08:	3301      	adds	r3, #1
 800cf0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cf0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cf12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cf14:	429a      	cmp	r2, r3
 800cf16:	f4ff ad32 	bcc.w	800c97e <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800cf20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	d033      	beq.n	800cf90 <arm_mat_inverse_f32+0x6de>
 800cf28:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cf2c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf34:	d12c      	bne.n	800cf90 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cf42:	e010      	b.n	800cf66 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800cf44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cf4c:	4413      	add	r3, r2
 800cf4e:	edd3 7a00 	vldr	s15, [r3]
 800cf52:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf5a:	d10d      	bne.n	800cf78 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800cf5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf60:	3301      	adds	r3, #1
 800cf62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cf66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cf6a:	fb02 f303 	mul.w	r3, r2, r3
 800cf6e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d3e6      	bcc.n	800cf44 <arm_mat_inverse_f32+0x692>
 800cf76:	e000      	b.n	800cf7a <arm_mat_inverse_f32+0x6c8>
            break;
 800cf78:	bf00      	nop
      }

      if (i == numRows * numCols)
 800cf7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cf7e:	fb02 f303 	mul.w	r3, r2, r3
 800cf82:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d102      	bne.n	800cf90 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800cf8a:	23fb      	movs	r3, #251	@ 0xfb
 800cf8c:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800cf90:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	37ec      	adds	r7, #236	@ 0xec
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr

0800cfa0 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b093      	sub	sp, #76	@ 0x4c
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	685b      	ldr	r3, [r3, #4]
 800cfbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	881b      	ldrh	r3, [r3, #0]
 800cfce:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	885b      	ldrh	r3, [r3, #2]
 800cfd4:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	885b      	ldrh	r3, [r3, #2]
 800cfda:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800cfdc:	2300      	movs	r3, #0
 800cfde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cfe0:	8b7b      	ldrh	r3, [r7, #26]
 800cfe2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800cfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfe6:	009b      	lsls	r3, r3, #2
 800cfe8:	69fa      	ldr	r2, [r7, #28]
 800cfea:	4413      	add	r3, r2
 800cfec:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800cfee:	8b3b      	ldrh	r3, [r7, #24]
 800cff0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800cff8:	f04f 0300 	mov.w	r3, #0
 800cffc:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800cffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d000:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800d002:	8afb      	ldrh	r3, [r7, #22]
 800d004:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800d006:	e017      	b.n	800d038 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800d008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d00a:	1d1a      	adds	r2, r3, #4
 800d00c:	647a      	str	r2, [r7, #68]	@ 0x44
 800d00e:	ed93 7a00 	vldr	s14, [r3]
 800d012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d014:	edd3 7a00 	vldr	s15, [r3]
 800d018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d01c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800d020:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d024:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800d028:	8b3b      	ldrh	r3, [r7, #24]
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d02e:	4413      	add	r3, r2
 800d030:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800d032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d034:	3b01      	subs	r3, #1
 800d036:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800d038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d1e4      	bne.n	800d008 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800d03e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d040:	1d1a      	adds	r2, r3, #4
 800d042:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d044:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d046:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800d048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d04a:	3b01      	subs	r3, #1
 800d04c:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800d04e:	8b3a      	ldrh	r2, [r7, #24]
 800d050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d052:	1ad3      	subs	r3, r2, r3
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	6a3a      	ldr	r2, [r7, #32]
 800d058:	4413      	add	r3, r2
 800d05a:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800d05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d1ca      	bne.n	800cff8 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800d062:	8b3b      	ldrh	r3, [r7, #24]
 800d064:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d066:	4413      	add	r3, r2
 800d068:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800d06a:	8afb      	ldrh	r3, [r7, #22]
 800d06c:	009b      	lsls	r3, r3, #2
 800d06e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d070:	4413      	add	r3, r2
 800d072:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800d074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d076:	3b01      	subs	r3, #1
 800d078:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800d07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d1b1      	bne.n	800cfe4 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d080:	2300      	movs	r3, #0
 800d082:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800d084:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800d088:	4618      	mov	r0, r3
 800d08a:	374c      	adds	r7, #76	@ 0x4c
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr

0800d094 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d094:	b480      	push	{r7}
 800d096:	b08b      	sub	sp, #44	@ 0x2c
 800d098:	af00      	add	r7, sp, #0
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	881b      	ldrh	r3, [r3, #0]
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	885b      	ldrh	r3, [r3, #2]
 800d0bc:	fb02 f303 	mul.w	r3, r2, r3
 800d0c0:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800d0c6:	e013      	b.n	800d0f0 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800d0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ca:	1d1a      	adds	r2, r3, #4
 800d0cc:	627a      	str	r2, [r7, #36]	@ 0x24
 800d0ce:	ed93 7a00 	vldr	s14, [r3]
 800d0d2:	6a3b      	ldr	r3, [r7, #32]
 800d0d4:	1d1a      	adds	r2, r3, #4
 800d0d6:	623a      	str	r2, [r7, #32]
 800d0d8:	edd3 7a00 	vldr	s15, [r3]
 800d0dc:	69fb      	ldr	r3, [r7, #28]
 800d0de:	1d1a      	adds	r2, r3, #4
 800d0e0:	61fa      	str	r2, [r7, #28]
 800d0e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0e6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	3b01      	subs	r3, #1
 800d0ee:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d1e8      	bne.n	800d0c8 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800d0fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	372c      	adds	r7, #44	@ 0x2c
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr

0800d10a <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800d10a:	b480      	push	{r7}
 800d10c:	b08b      	sub	sp, #44	@ 0x2c
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
 800d112:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	881b      	ldrh	r3, [r3, #0]
 800d124:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	885b      	ldrh	r3, [r3, #2]
 800d12a:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800d12c:	89fb      	ldrh	r3, [r7, #14]
 800d12e:	61bb      	str	r3, [r7, #24]
 800d130:	2300      	movs	r3, #0
 800d132:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	693a      	ldr	r2, [r7, #16]
 800d13a:	4413      	add	r3, r2
 800d13c:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800d13e:	89bb      	ldrh	r3, [r7, #12]
 800d140:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800d142:	e00d      	b.n	800d160 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800d144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d146:	1d1a      	adds	r2, r3, #4
 800d148:	627a      	str	r2, [r7, #36]	@ 0x24
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	6a3b      	ldr	r3, [r7, #32]
 800d14e:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800d150:	89fb      	ldrh	r3, [r7, #14]
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	6a3a      	ldr	r2, [r7, #32]
 800d156:	4413      	add	r3, r2
 800d158:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	3b01      	subs	r3, #1
 800d15e:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d1ee      	bne.n	800d144 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	3301      	adds	r3, #1
 800d16a:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800d16c:	69bb      	ldr	r3, [r7, #24]
 800d16e:	3b01      	subs	r3, #1
 800d170:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800d172:	69bb      	ldr	r3, [r7, #24]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d1dd      	bne.n	800d134 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d178:	2300      	movs	r3, #0
 800d17a:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800d17c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d180:	4618      	mov	r0, r3
 800d182:	372c      	adds	r7, #44	@ 0x2c
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr

0800d18c <memset>:
 800d18c:	4402      	add	r2, r0
 800d18e:	4603      	mov	r3, r0
 800d190:	4293      	cmp	r3, r2
 800d192:	d100      	bne.n	800d196 <memset+0xa>
 800d194:	4770      	bx	lr
 800d196:	f803 1b01 	strb.w	r1, [r3], #1
 800d19a:	e7f9      	b.n	800d190 <memset+0x4>

0800d19c <__errno>:
 800d19c:	4b01      	ldr	r3, [pc, #4]	@ (800d1a4 <__errno+0x8>)
 800d19e:	6818      	ldr	r0, [r3, #0]
 800d1a0:	4770      	bx	lr
 800d1a2:	bf00      	nop
 800d1a4:	20000290 	.word	0x20000290

0800d1a8 <__libc_init_array>:
 800d1a8:	b570      	push	{r4, r5, r6, lr}
 800d1aa:	4d0d      	ldr	r5, [pc, #52]	@ (800d1e0 <__libc_init_array+0x38>)
 800d1ac:	4c0d      	ldr	r4, [pc, #52]	@ (800d1e4 <__libc_init_array+0x3c>)
 800d1ae:	1b64      	subs	r4, r4, r5
 800d1b0:	10a4      	asrs	r4, r4, #2
 800d1b2:	2600      	movs	r6, #0
 800d1b4:	42a6      	cmp	r6, r4
 800d1b6:	d109      	bne.n	800d1cc <__libc_init_array+0x24>
 800d1b8:	4d0b      	ldr	r5, [pc, #44]	@ (800d1e8 <__libc_init_array+0x40>)
 800d1ba:	4c0c      	ldr	r4, [pc, #48]	@ (800d1ec <__libc_init_array+0x44>)
 800d1bc:	f000 f92c 	bl	800d418 <_init>
 800d1c0:	1b64      	subs	r4, r4, r5
 800d1c2:	10a4      	asrs	r4, r4, #2
 800d1c4:	2600      	movs	r6, #0
 800d1c6:	42a6      	cmp	r6, r4
 800d1c8:	d105      	bne.n	800d1d6 <__libc_init_array+0x2e>
 800d1ca:	bd70      	pop	{r4, r5, r6, pc}
 800d1cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1d0:	4798      	blx	r3
 800d1d2:	3601      	adds	r6, #1
 800d1d4:	e7ee      	b.n	800d1b4 <__libc_init_array+0xc>
 800d1d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1da:	4798      	blx	r3
 800d1dc:	3601      	adds	r6, #1
 800d1de:	e7f2      	b.n	800d1c6 <__libc_init_array+0x1e>
 800d1e0:	0800d49c 	.word	0x0800d49c
 800d1e4:	0800d49c 	.word	0x0800d49c
 800d1e8:	0800d49c 	.word	0x0800d49c
 800d1ec:	0800d4a0 	.word	0x0800d4a0

0800d1f0 <memcpy>:
 800d1f0:	440a      	add	r2, r1
 800d1f2:	4291      	cmp	r1, r2
 800d1f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d1f8:	d100      	bne.n	800d1fc <memcpy+0xc>
 800d1fa:	4770      	bx	lr
 800d1fc:	b510      	push	{r4, lr}
 800d1fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d202:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d206:	4291      	cmp	r1, r2
 800d208:	d1f9      	bne.n	800d1fe <memcpy+0xe>
 800d20a:	bd10      	pop	{r4, pc}

0800d20c <sqrt>:
 800d20c:	b538      	push	{r3, r4, r5, lr}
 800d20e:	ed2d 8b02 	vpush	{d8}
 800d212:	ec55 4b10 	vmov	r4, r5, d0
 800d216:	f000 f825 	bl	800d264 <__ieee754_sqrt>
 800d21a:	4622      	mov	r2, r4
 800d21c:	462b      	mov	r3, r5
 800d21e:	4620      	mov	r0, r4
 800d220:	4629      	mov	r1, r5
 800d222:	eeb0 8a40 	vmov.f32	s16, s0
 800d226:	eef0 8a60 	vmov.f32	s17, s1
 800d22a:	f7f3 fc4b 	bl	8000ac4 <__aeabi_dcmpun>
 800d22e:	b990      	cbnz	r0, 800d256 <sqrt+0x4a>
 800d230:	2200      	movs	r2, #0
 800d232:	2300      	movs	r3, #0
 800d234:	4620      	mov	r0, r4
 800d236:	4629      	mov	r1, r5
 800d238:	f7f3 fc1c 	bl	8000a74 <__aeabi_dcmplt>
 800d23c:	b158      	cbz	r0, 800d256 <sqrt+0x4a>
 800d23e:	f7ff ffad 	bl	800d19c <__errno>
 800d242:	2321      	movs	r3, #33	@ 0x21
 800d244:	6003      	str	r3, [r0, #0]
 800d246:	2200      	movs	r2, #0
 800d248:	2300      	movs	r3, #0
 800d24a:	4610      	mov	r0, r2
 800d24c:	4619      	mov	r1, r3
 800d24e:	f7f3 fac9 	bl	80007e4 <__aeabi_ddiv>
 800d252:	ec41 0b18 	vmov	d8, r0, r1
 800d256:	eeb0 0a48 	vmov.f32	s0, s16
 800d25a:	eef0 0a68 	vmov.f32	s1, s17
 800d25e:	ecbd 8b02 	vpop	{d8}
 800d262:	bd38      	pop	{r3, r4, r5, pc}

0800d264 <__ieee754_sqrt>:
 800d264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d268:	4a68      	ldr	r2, [pc, #416]	@ (800d40c <__ieee754_sqrt+0x1a8>)
 800d26a:	ec55 4b10 	vmov	r4, r5, d0
 800d26e:	43aa      	bics	r2, r5
 800d270:	462b      	mov	r3, r5
 800d272:	4621      	mov	r1, r4
 800d274:	d110      	bne.n	800d298 <__ieee754_sqrt+0x34>
 800d276:	4622      	mov	r2, r4
 800d278:	4620      	mov	r0, r4
 800d27a:	4629      	mov	r1, r5
 800d27c:	f7f3 f988 	bl	8000590 <__aeabi_dmul>
 800d280:	4602      	mov	r2, r0
 800d282:	460b      	mov	r3, r1
 800d284:	4620      	mov	r0, r4
 800d286:	4629      	mov	r1, r5
 800d288:	f7f2 ffcc 	bl	8000224 <__adddf3>
 800d28c:	4604      	mov	r4, r0
 800d28e:	460d      	mov	r5, r1
 800d290:	ec45 4b10 	vmov	d0, r4, r5
 800d294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d298:	2d00      	cmp	r5, #0
 800d29a:	dc0e      	bgt.n	800d2ba <__ieee754_sqrt+0x56>
 800d29c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d2a0:	4322      	orrs	r2, r4
 800d2a2:	d0f5      	beq.n	800d290 <__ieee754_sqrt+0x2c>
 800d2a4:	b19d      	cbz	r5, 800d2ce <__ieee754_sqrt+0x6a>
 800d2a6:	4622      	mov	r2, r4
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	4629      	mov	r1, r5
 800d2ac:	f7f2 ffb8 	bl	8000220 <__aeabi_dsub>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	f7f3 fa96 	bl	80007e4 <__aeabi_ddiv>
 800d2b8:	e7e8      	b.n	800d28c <__ieee754_sqrt+0x28>
 800d2ba:	152a      	asrs	r2, r5, #20
 800d2bc:	d115      	bne.n	800d2ea <__ieee754_sqrt+0x86>
 800d2be:	2000      	movs	r0, #0
 800d2c0:	e009      	b.n	800d2d6 <__ieee754_sqrt+0x72>
 800d2c2:	0acb      	lsrs	r3, r1, #11
 800d2c4:	3a15      	subs	r2, #21
 800d2c6:	0549      	lsls	r1, r1, #21
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d0fa      	beq.n	800d2c2 <__ieee754_sqrt+0x5e>
 800d2cc:	e7f7      	b.n	800d2be <__ieee754_sqrt+0x5a>
 800d2ce:	462a      	mov	r2, r5
 800d2d0:	e7fa      	b.n	800d2c8 <__ieee754_sqrt+0x64>
 800d2d2:	005b      	lsls	r3, r3, #1
 800d2d4:	3001      	adds	r0, #1
 800d2d6:	02dc      	lsls	r4, r3, #11
 800d2d8:	d5fb      	bpl.n	800d2d2 <__ieee754_sqrt+0x6e>
 800d2da:	1e44      	subs	r4, r0, #1
 800d2dc:	1b12      	subs	r2, r2, r4
 800d2de:	f1c0 0420 	rsb	r4, r0, #32
 800d2e2:	fa21 f404 	lsr.w	r4, r1, r4
 800d2e6:	4323      	orrs	r3, r4
 800d2e8:	4081      	lsls	r1, r0
 800d2ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2ee:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d2f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d2f6:	07d2      	lsls	r2, r2, #31
 800d2f8:	bf5c      	itt	pl
 800d2fa:	005b      	lslpl	r3, r3, #1
 800d2fc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d300:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d304:	bf58      	it	pl
 800d306:	0049      	lslpl	r1, r1, #1
 800d308:	2600      	movs	r6, #0
 800d30a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d30e:	106d      	asrs	r5, r5, #1
 800d310:	0049      	lsls	r1, r1, #1
 800d312:	2016      	movs	r0, #22
 800d314:	4632      	mov	r2, r6
 800d316:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d31a:	1917      	adds	r7, r2, r4
 800d31c:	429f      	cmp	r7, r3
 800d31e:	bfde      	ittt	le
 800d320:	193a      	addle	r2, r7, r4
 800d322:	1bdb      	suble	r3, r3, r7
 800d324:	1936      	addle	r6, r6, r4
 800d326:	0fcf      	lsrs	r7, r1, #31
 800d328:	3801      	subs	r0, #1
 800d32a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d32e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d332:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d336:	d1f0      	bne.n	800d31a <__ieee754_sqrt+0xb6>
 800d338:	4604      	mov	r4, r0
 800d33a:	2720      	movs	r7, #32
 800d33c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d340:	429a      	cmp	r2, r3
 800d342:	eb00 0e0c 	add.w	lr, r0, ip
 800d346:	db02      	blt.n	800d34e <__ieee754_sqrt+0xea>
 800d348:	d113      	bne.n	800d372 <__ieee754_sqrt+0x10e>
 800d34a:	458e      	cmp	lr, r1
 800d34c:	d811      	bhi.n	800d372 <__ieee754_sqrt+0x10e>
 800d34e:	f1be 0f00 	cmp.w	lr, #0
 800d352:	eb0e 000c 	add.w	r0, lr, ip
 800d356:	da42      	bge.n	800d3de <__ieee754_sqrt+0x17a>
 800d358:	2800      	cmp	r0, #0
 800d35a:	db40      	blt.n	800d3de <__ieee754_sqrt+0x17a>
 800d35c:	f102 0801 	add.w	r8, r2, #1
 800d360:	1a9b      	subs	r3, r3, r2
 800d362:	458e      	cmp	lr, r1
 800d364:	bf88      	it	hi
 800d366:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d36a:	eba1 010e 	sub.w	r1, r1, lr
 800d36e:	4464      	add	r4, ip
 800d370:	4642      	mov	r2, r8
 800d372:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d376:	3f01      	subs	r7, #1
 800d378:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d37c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d380:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d384:	d1dc      	bne.n	800d340 <__ieee754_sqrt+0xdc>
 800d386:	4319      	orrs	r1, r3
 800d388:	d01b      	beq.n	800d3c2 <__ieee754_sqrt+0x15e>
 800d38a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d410 <__ieee754_sqrt+0x1ac>
 800d38e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d414 <__ieee754_sqrt+0x1b0>
 800d392:	e9da 0100 	ldrd	r0, r1, [sl]
 800d396:	e9db 2300 	ldrd	r2, r3, [fp]
 800d39a:	f7f2 ff41 	bl	8000220 <__aeabi_dsub>
 800d39e:	e9da 8900 	ldrd	r8, r9, [sl]
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	4640      	mov	r0, r8
 800d3a8:	4649      	mov	r1, r9
 800d3aa:	f7f3 fb6d 	bl	8000a88 <__aeabi_dcmple>
 800d3ae:	b140      	cbz	r0, 800d3c2 <__ieee754_sqrt+0x15e>
 800d3b0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d3b4:	e9da 0100 	ldrd	r0, r1, [sl]
 800d3b8:	e9db 2300 	ldrd	r2, r3, [fp]
 800d3bc:	d111      	bne.n	800d3e2 <__ieee754_sqrt+0x17e>
 800d3be:	3601      	adds	r6, #1
 800d3c0:	463c      	mov	r4, r7
 800d3c2:	1072      	asrs	r2, r6, #1
 800d3c4:	0863      	lsrs	r3, r4, #1
 800d3c6:	07f1      	lsls	r1, r6, #31
 800d3c8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d3cc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d3d0:	bf48      	it	mi
 800d3d2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d3d6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d3da:	4618      	mov	r0, r3
 800d3dc:	e756      	b.n	800d28c <__ieee754_sqrt+0x28>
 800d3de:	4690      	mov	r8, r2
 800d3e0:	e7be      	b.n	800d360 <__ieee754_sqrt+0xfc>
 800d3e2:	f7f2 ff1f 	bl	8000224 <__adddf3>
 800d3e6:	e9da 8900 	ldrd	r8, r9, [sl]
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	460b      	mov	r3, r1
 800d3ee:	4640      	mov	r0, r8
 800d3f0:	4649      	mov	r1, r9
 800d3f2:	f7f3 fb3f 	bl	8000a74 <__aeabi_dcmplt>
 800d3f6:	b120      	cbz	r0, 800d402 <__ieee754_sqrt+0x19e>
 800d3f8:	1ca0      	adds	r0, r4, #2
 800d3fa:	bf08      	it	eq
 800d3fc:	3601      	addeq	r6, #1
 800d3fe:	3402      	adds	r4, #2
 800d400:	e7df      	b.n	800d3c2 <__ieee754_sqrt+0x15e>
 800d402:	1c63      	adds	r3, r4, #1
 800d404:	f023 0401 	bic.w	r4, r3, #1
 800d408:	e7db      	b.n	800d3c2 <__ieee754_sqrt+0x15e>
 800d40a:	bf00      	nop
 800d40c:	7ff00000 	.word	0x7ff00000
 800d410:	200002e8 	.word	0x200002e8
 800d414:	200002e0 	.word	0x200002e0

0800d418 <_init>:
 800d418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d41a:	bf00      	nop
 800d41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d41e:	bc08      	pop	{r3}
 800d420:	469e      	mov	lr, r3
 800d422:	4770      	bx	lr

0800d424 <_fini>:
 800d424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d426:	bf00      	nop
 800d428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d42a:	bc08      	pop	{r3}
 800d42c:	469e      	mov	lr, r3
 800d42e:	4770      	bx	lr
