
Studio_readRPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009068  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009240  08009240  00019240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009280  08009280  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009280  08009280  00019280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009288  08009288  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009288  08009288  00019288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800928c  0800928c  0001928c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009290  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  20000088  08009318  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  08009318  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001824c  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cdb  00000000  00000000  00038347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  0003b028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a0  00000000  00000000  0003c568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028da3  00000000  00000000  0003d608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001878c  00000000  00000000  000663ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114226  00000000  00000000  0007eb37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006094  00000000  00000000  00192d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00198df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000088 	.word	0x20000088
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009228 	.word	0x08009228

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000008c 	.word	0x2000008c
 8000214:	08009228 	.word	0x08009228

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	; 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000e00:	f000 b970 	b.w	80010e4 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9e08      	ldr	r6, [sp, #32]
 8000e22:	460d      	mov	r5, r1
 8000e24:	4604      	mov	r4, r0
 8000e26:	460f      	mov	r7, r1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d14a      	bne.n	8000ec2 <__udivmoddi4+0xa6>
 8000e2c:	428a      	cmp	r2, r1
 8000e2e:	4694      	mov	ip, r2
 8000e30:	d965      	bls.n	8000efe <__udivmoddi4+0xe2>
 8000e32:	fab2 f382 	clz	r3, r2
 8000e36:	b143      	cbz	r3, 8000e4a <__udivmoddi4+0x2e>
 8000e38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e3c:	f1c3 0220 	rsb	r2, r3, #32
 8000e40:	409f      	lsls	r7, r3
 8000e42:	fa20 f202 	lsr.w	r2, r0, r2
 8000e46:	4317      	orrs	r7, r2
 8000e48:	409c      	lsls	r4, r3
 8000e4a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e4e:	fa1f f58c 	uxth.w	r5, ip
 8000e52:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e56:	0c22      	lsrs	r2, r4, #16
 8000e58:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e5c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e60:	fb01 f005 	mul.w	r0, r1, r5
 8000e64:	4290      	cmp	r0, r2
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x62>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000e70:	f080 811c 	bcs.w	80010ac <__udivmoddi4+0x290>
 8000e74:	4290      	cmp	r0, r2
 8000e76:	f240 8119 	bls.w	80010ac <__udivmoddi4+0x290>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4462      	add	r2, ip
 8000e7e:	1a12      	subs	r2, r2, r0
 8000e80:	b2a4      	uxth	r4, r4
 8000e82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e8e:	fb00 f505 	mul.w	r5, r0, r5
 8000e92:	42a5      	cmp	r5, r4
 8000e94:	d90a      	bls.n	8000eac <__udivmoddi4+0x90>
 8000e96:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e9e:	f080 8107 	bcs.w	80010b0 <__udivmoddi4+0x294>
 8000ea2:	42a5      	cmp	r5, r4
 8000ea4:	f240 8104 	bls.w	80010b0 <__udivmoddi4+0x294>
 8000ea8:	4464      	add	r4, ip
 8000eaa:	3802      	subs	r0, #2
 8000eac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000eb0:	1b64      	subs	r4, r4, r5
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	b11e      	cbz	r6, 8000ebe <__udivmoddi4+0xa2>
 8000eb6:	40dc      	lsrs	r4, r3
 8000eb8:	2300      	movs	r3, #0
 8000eba:	e9c6 4300 	strd	r4, r3, [r6]
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0xbc>
 8000ec6:	2e00      	cmp	r6, #0
 8000ec8:	f000 80ed 	beq.w	80010a6 <__udivmoddi4+0x28a>
 8000ecc:	2100      	movs	r1, #0
 8000ece:	e9c6 0500 	strd	r0, r5, [r6]
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	fab3 f183 	clz	r1, r3
 8000edc:	2900      	cmp	r1, #0
 8000ede:	d149      	bne.n	8000f74 <__udivmoddi4+0x158>
 8000ee0:	42ab      	cmp	r3, r5
 8000ee2:	d302      	bcc.n	8000eea <__udivmoddi4+0xce>
 8000ee4:	4282      	cmp	r2, r0
 8000ee6:	f200 80f8 	bhi.w	80010da <__udivmoddi4+0x2be>
 8000eea:	1a84      	subs	r4, r0, r2
 8000eec:	eb65 0203 	sbc.w	r2, r5, r3
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	4617      	mov	r7, r2
 8000ef4:	2e00      	cmp	r6, #0
 8000ef6:	d0e2      	beq.n	8000ebe <__udivmoddi4+0xa2>
 8000ef8:	e9c6 4700 	strd	r4, r7, [r6]
 8000efc:	e7df      	b.n	8000ebe <__udivmoddi4+0xa2>
 8000efe:	b902      	cbnz	r2, 8000f02 <__udivmoddi4+0xe6>
 8000f00:	deff      	udf	#255	; 0xff
 8000f02:	fab2 f382 	clz	r3, r2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f040 8090 	bne.w	800102c <__udivmoddi4+0x210>
 8000f0c:	1a8a      	subs	r2, r1, r2
 8000f0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	2101      	movs	r1, #1
 8000f18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000f20:	0c22      	lsrs	r2, r4, #16
 8000f22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f26:	fb0e f005 	mul.w	r0, lr, r5
 8000f2a:	4290      	cmp	r0, r2
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x124>
 8000f2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000f32:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f36:	d202      	bcs.n	8000f3e <__udivmoddi4+0x122>
 8000f38:	4290      	cmp	r0, r2
 8000f3a:	f200 80cb 	bhi.w	80010d4 <__udivmoddi4+0x2b8>
 8000f3e:	4645      	mov	r5, r8
 8000f40:	1a12      	subs	r2, r2, r0
 8000f42:	b2a4      	uxth	r4, r4
 8000f44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f48:	fb07 2210 	mls	r2, r7, r0, r2
 8000f4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f50:	fb0e fe00 	mul.w	lr, lr, r0
 8000f54:	45a6      	cmp	lr, r4
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x14e>
 8000f58:	eb1c 0404 	adds.w	r4, ip, r4
 8000f5c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000f60:	d202      	bcs.n	8000f68 <__udivmoddi4+0x14c>
 8000f62:	45a6      	cmp	lr, r4
 8000f64:	f200 80bb 	bhi.w	80010de <__udivmoddi4+0x2c2>
 8000f68:	4610      	mov	r0, r2
 8000f6a:	eba4 040e 	sub.w	r4, r4, lr
 8000f6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f72:	e79f      	b.n	8000eb4 <__udivmoddi4+0x98>
 8000f74:	f1c1 0720 	rsb	r7, r1, #32
 8000f78:	408b      	lsls	r3, r1
 8000f7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f82:	fa05 f401 	lsl.w	r4, r5, r1
 8000f86:	fa20 f307 	lsr.w	r3, r0, r7
 8000f8a:	40fd      	lsrs	r5, r7
 8000f8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f90:	4323      	orrs	r3, r4
 8000f92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f96:	fa1f fe8c 	uxth.w	lr, ip
 8000f9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000f9e:	0c1c      	lsrs	r4, r3, #16
 8000fa0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000fa4:	fb08 f50e 	mul.w	r5, r8, lr
 8000fa8:	42a5      	cmp	r5, r4
 8000faa:	fa02 f201 	lsl.w	r2, r2, r1
 8000fae:	fa00 f001 	lsl.w	r0, r0, r1
 8000fb2:	d90b      	bls.n	8000fcc <__udivmoddi4+0x1b0>
 8000fb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000fb8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000fbc:	f080 8088 	bcs.w	80010d0 <__udivmoddi4+0x2b4>
 8000fc0:	42a5      	cmp	r5, r4
 8000fc2:	f240 8085 	bls.w	80010d0 <__udivmoddi4+0x2b4>
 8000fc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fca:	4464      	add	r4, ip
 8000fcc:	1b64      	subs	r4, r4, r5
 8000fce:	b29d      	uxth	r5, r3
 8000fd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000fd8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fdc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fe0:	45a6      	cmp	lr, r4
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x1da>
 8000fe4:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000fec:	d26c      	bcs.n	80010c8 <__udivmoddi4+0x2ac>
 8000fee:	45a6      	cmp	lr, r4
 8000ff0:	d96a      	bls.n	80010c8 <__udivmoddi4+0x2ac>
 8000ff2:	3b02      	subs	r3, #2
 8000ff4:	4464      	add	r4, ip
 8000ff6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ffa:	fba3 9502 	umull	r9, r5, r3, r2
 8000ffe:	eba4 040e 	sub.w	r4, r4, lr
 8001002:	42ac      	cmp	r4, r5
 8001004:	46c8      	mov	r8, r9
 8001006:	46ae      	mov	lr, r5
 8001008:	d356      	bcc.n	80010b8 <__udivmoddi4+0x29c>
 800100a:	d053      	beq.n	80010b4 <__udivmoddi4+0x298>
 800100c:	b156      	cbz	r6, 8001024 <__udivmoddi4+0x208>
 800100e:	ebb0 0208 	subs.w	r2, r0, r8
 8001012:	eb64 040e 	sbc.w	r4, r4, lr
 8001016:	fa04 f707 	lsl.w	r7, r4, r7
 800101a:	40ca      	lsrs	r2, r1
 800101c:	40cc      	lsrs	r4, r1
 800101e:	4317      	orrs	r7, r2
 8001020:	e9c6 7400 	strd	r7, r4, [r6]
 8001024:	4618      	mov	r0, r3
 8001026:	2100      	movs	r1, #0
 8001028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800102c:	f1c3 0120 	rsb	r1, r3, #32
 8001030:	fa02 fc03 	lsl.w	ip, r2, r3
 8001034:	fa20 f201 	lsr.w	r2, r0, r1
 8001038:	fa25 f101 	lsr.w	r1, r5, r1
 800103c:	409d      	lsls	r5, r3
 800103e:	432a      	orrs	r2, r5
 8001040:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001044:	fa1f fe8c 	uxth.w	lr, ip
 8001048:	fbb1 f0f7 	udiv	r0, r1, r7
 800104c:	fb07 1510 	mls	r5, r7, r0, r1
 8001050:	0c11      	lsrs	r1, r2, #16
 8001052:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001056:	fb00 f50e 	mul.w	r5, r0, lr
 800105a:	428d      	cmp	r5, r1
 800105c:	fa04 f403 	lsl.w	r4, r4, r3
 8001060:	d908      	bls.n	8001074 <__udivmoddi4+0x258>
 8001062:	eb1c 0101 	adds.w	r1, ip, r1
 8001066:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800106a:	d22f      	bcs.n	80010cc <__udivmoddi4+0x2b0>
 800106c:	428d      	cmp	r5, r1
 800106e:	d92d      	bls.n	80010cc <__udivmoddi4+0x2b0>
 8001070:	3802      	subs	r0, #2
 8001072:	4461      	add	r1, ip
 8001074:	1b49      	subs	r1, r1, r5
 8001076:	b292      	uxth	r2, r2
 8001078:	fbb1 f5f7 	udiv	r5, r1, r7
 800107c:	fb07 1115 	mls	r1, r7, r5, r1
 8001080:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001084:	fb05 f10e 	mul.w	r1, r5, lr
 8001088:	4291      	cmp	r1, r2
 800108a:	d908      	bls.n	800109e <__udivmoddi4+0x282>
 800108c:	eb1c 0202 	adds.w	r2, ip, r2
 8001090:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001094:	d216      	bcs.n	80010c4 <__udivmoddi4+0x2a8>
 8001096:	4291      	cmp	r1, r2
 8001098:	d914      	bls.n	80010c4 <__udivmoddi4+0x2a8>
 800109a:	3d02      	subs	r5, #2
 800109c:	4462      	add	r2, ip
 800109e:	1a52      	subs	r2, r2, r1
 80010a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80010a4:	e738      	b.n	8000f18 <__udivmoddi4+0xfc>
 80010a6:	4631      	mov	r1, r6
 80010a8:	4630      	mov	r0, r6
 80010aa:	e708      	b.n	8000ebe <__udivmoddi4+0xa2>
 80010ac:	4639      	mov	r1, r7
 80010ae:	e6e6      	b.n	8000e7e <__udivmoddi4+0x62>
 80010b0:	4610      	mov	r0, r2
 80010b2:	e6fb      	b.n	8000eac <__udivmoddi4+0x90>
 80010b4:	4548      	cmp	r0, r9
 80010b6:	d2a9      	bcs.n	800100c <__udivmoddi4+0x1f0>
 80010b8:	ebb9 0802 	subs.w	r8, r9, r2
 80010bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010c0:	3b01      	subs	r3, #1
 80010c2:	e7a3      	b.n	800100c <__udivmoddi4+0x1f0>
 80010c4:	4645      	mov	r5, r8
 80010c6:	e7ea      	b.n	800109e <__udivmoddi4+0x282>
 80010c8:	462b      	mov	r3, r5
 80010ca:	e794      	b.n	8000ff6 <__udivmoddi4+0x1da>
 80010cc:	4640      	mov	r0, r8
 80010ce:	e7d1      	b.n	8001074 <__udivmoddi4+0x258>
 80010d0:	46d0      	mov	r8, sl
 80010d2:	e77b      	b.n	8000fcc <__udivmoddi4+0x1b0>
 80010d4:	3d02      	subs	r5, #2
 80010d6:	4462      	add	r2, ip
 80010d8:	e732      	b.n	8000f40 <__udivmoddi4+0x124>
 80010da:	4608      	mov	r0, r1
 80010dc:	e70a      	b.n	8000ef4 <__udivmoddi4+0xd8>
 80010de:	4464      	add	r4, ip
 80010e0:	3802      	subs	r0, #2
 80010e2:	e742      	b.n	8000f6a <__udivmoddi4+0x14e>

080010e4 <__aeabi_idiv0>:
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ec:	b08c      	sub	sp, #48	; 0x30
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f0:	f002 fa45 	bl	800357e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f4:	f000 fafc 	bl	80016f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f8:	f000 fdac 	bl	8001c54 <MX_GPIO_Init>
  MX_DMA_Init();
 80010fc:	f000 fd80 	bl	8001c00 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001100:	f000 fbcc 	bl	800189c <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8001104:	f000 fc68 	bl	80019d8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001108:	f000 fc12 	bl	8001930 <MX_TIM2_Init>
  MX_TIM5_Init();
 800110c:	f000 fd2a 	bl	8001b64 <MX_TIM5_Init>
  MX_ADC1_Init();
 8001110:	f000 fb3a 	bl	8001788 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001114:	f000 fcd8 	bl	8001ac8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //PWM Motor
  HAL_TIM_Base_Start(&htim3);
 8001118:	48a9      	ldr	r0, [pc, #676]	; (80013c0 <main+0x2d8>)
 800111a:	f005 fbfb 	bl	8006914 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800111e:	2100      	movs	r1, #0
 8001120:	48a7      	ldr	r0, [pc, #668]	; (80013c0 <main+0x2d8>)
 8001122:	f005 fd41 	bl	8006ba8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 8001126:	4ba6      	ldr	r3, [pc, #664]	; (80013c0 <main+0x2d8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800112e:	635a      	str	r2, [r3, #52]	; 0x34

  //Read Encoder
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001130:	213c      	movs	r1, #60	; 0x3c
 8001132:	48a4      	ldr	r0, [pc, #656]	; (80013c4 <main+0x2dc>)
 8001134:	f005 fef0 	bl	8006f18 <HAL_TIM_Encoder_Start>

  //time microsec
  HAL_TIM_Base_Start_IT(&htim5);
 8001138:	48a3      	ldr	r0, [pc, #652]	; (80013c8 <main+0x2e0>)
 800113a:	f005 fc5b 	bl	80069f4 <HAL_TIM_Base_Start_IT>

  //Read joystick
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 2);
 800113e:	2202      	movs	r2, #2
 8001140:	49a2      	ldr	r1, [pc, #648]	; (80013cc <main+0x2e4>)
 8001142:	48a3      	ldr	r0, [pc, #652]	; (80013d0 <main+0x2e8>)
 8001144:	f002 fe88 	bl	8003e58 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim4);
 8001148:	48a2      	ldr	r0, [pc, #648]	; (80013d4 <main+0x2ec>)
 800114a:	f005 fbe3 	bl	8006914 <HAL_TIM_Base_Start>

  //PID Control Position
  PID1.Kp = 5; //No more than 0.92
 800114e:	4ba2      	ldr	r3, [pc, #648]	; (80013d8 <main+0x2f0>)
 8001150:	4aa2      	ldr	r2, [pc, #648]	; (80013dc <main+0x2f4>)
 8001152:	619a      	str	r2, [r3, #24]
  PID1.Ki = 0.00002;
 8001154:	4ba0      	ldr	r3, [pc, #640]	; (80013d8 <main+0x2f0>)
 8001156:	4aa2      	ldr	r2, [pc, #648]	; (80013e0 <main+0x2f8>)
 8001158:	61da      	str	r2, [r3, #28]
  PID1.Kd = 1;
 800115a:	4b9f      	ldr	r3, [pc, #636]	; (80013d8 <main+0x2f0>)
 800115c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001160:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID1, 0);
 8001162:	2100      	movs	r1, #0
 8001164:	489c      	ldr	r0, [pc, #624]	; (80013d8 <main+0x2f0>)
 8001166:	f007 fef1 	bl	8008f4c <arm_pid_init_f32>

  //PID Control Velocity
  PID2.Kp = 0.15;  //No more than 0.044
 800116a:	4b9e      	ldr	r3, [pc, #632]	; (80013e4 <main+0x2fc>)
 800116c:	4a9e      	ldr	r2, [pc, #632]	; (80013e8 <main+0x300>)
 800116e:	619a      	str	r2, [r3, #24]
  PID2.Ki = 0.006;
 8001170:	4b9c      	ldr	r3, [pc, #624]	; (80013e4 <main+0x2fc>)
 8001172:	4a9e      	ldr	r2, [pc, #632]	; (80013ec <main+0x304>)
 8001174:	61da      	str	r2, [r3, #28]
  PID2.Kd = 0.05;
 8001176:	4b9b      	ldr	r3, [pc, #620]	; (80013e4 <main+0x2fc>)
 8001178:	4a9d      	ldr	r2, [pc, #628]	; (80013f0 <main+0x308>)
 800117a:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID2, 0);
 800117c:	2100      	movs	r1, #0
 800117e:	4899      	ldr	r0, [pc, #612]	; (80013e4 <main+0x2fc>)
 8001180:	f007 fee4 	bl	8008f4c <arm_pid_init_f32>
    /* USER CODE BEGIN 3 */

	  static uint64_t timestamp = 0;
	  static uint64_t timestamp2 = 0;

	  int64_t currentTime = micros();
 8001184:	f000 fe8c 	bl	8001ea0 <micros>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  if (max_velo < QEIdata.linearVel)
 8001190:	4b98      	ldr	r3, [pc, #608]	; (80013f4 <main+0x30c>)
 8001192:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001196:	4b98      	ldr	r3, [pc, #608]	; (80013f8 <main+0x310>)
 8001198:	edd3 7a00 	vldr	s15, [r3]
 800119c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	dd03      	ble.n	80011ae <main+0xc6>
	  {
		  max_velo = QEIdata.linearVel;
 80011a6:	4b93      	ldr	r3, [pc, #588]	; (80013f4 <main+0x30c>)
 80011a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011aa:	4a93      	ldr	r2, [pc, #588]	; (80013f8 <main+0x310>)
 80011ac:	6013      	str	r3, [r2, #0]
	  }
	  if(currentTime > timestamp2){
 80011ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80011b2:	4992      	ldr	r1, [pc, #584]	; (80013fc <main+0x314>)
 80011b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011b8:	4290      	cmp	r0, r2
 80011ba:	eb71 0303 	sbcs.w	r3, r1, r3
 80011be:	f080 813f 	bcs.w	8001440 <main+0x358>

		  //timestamp2 = currentTime + 125; //8,000 Hz
		  timestamp2 = currentTime + 167; //6,000 Hz
 80011c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80011c6:	f112 04a7 	adds.w	r4, r2, #167	; 0xa7
 80011ca:	f143 0500 	adc.w	r5, r3, #0
 80011ce:	4622      	mov	r2, r4
 80011d0:	462b      	mov	r3, r5
 80011d2:	498a      	ldr	r1, [pc, #552]	; (80013fc <main+0x314>)
 80011d4:	e9c1 2300 	strd	r2, r3, [r1]

		  //Read encoder
		  QEIEncoderPosVel_Update();
 80011d8:	f000 fe7e 	bl	8001ed8 <QEIEncoderPosVel_Update>

		  //Create Trajectory
		  q_f = setPosition;
 80011dc:	4b88      	ldr	r3, [pc, #544]	; (8001400 <main+0x318>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a88      	ldr	r2, [pc, #544]	; (8001404 <main+0x31c>)
 80011e2:	6013      	str	r3, [r2, #0]
		  checkStartMoving();
 80011e4:	f000 ff9e 	bl	8002124 <checkStartMoving>
		  createTrajectory();
 80011e8:	f001 f9cc 	bl	8002584 <createTrajectory>

		  if(mode == 1){
 80011ec:	4b86      	ldr	r3, [pc, #536]	; (8001408 <main+0x320>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	f040 80d0 	bne.w	8001396 <main+0x2ae>
			  if(fabs(setPosition - QEIdata.linearPos) < 0.05){
 80011f6:	4b82      	ldr	r3, [pc, #520]	; (8001400 <main+0x318>)
 80011f8:	ed93 7a00 	vldr	s14, [r3]
 80011fc:	4b7d      	ldr	r3, [pc, #500]	; (80013f4 <main+0x30c>)
 80011fe:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001206:	eef0 7ae7 	vabs.f32	s15, s15
 800120a:	ee17 0a90 	vmov	r0, s15
 800120e:	f7ff f967 	bl	80004e0 <__aeabi_f2d>
 8001212:	a367      	add	r3, pc, #412	; (adr r3, 80013b0 <main+0x2c8>)
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	f7ff fc2c 	bl	8000a74 <__aeabi_dcmplt>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d004      	beq.n	800122c <main+0x144>
				  Vin = 0;
 8001222:	4b7a      	ldr	r3, [pc, #488]	; (800140c <main+0x324>)
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	e099      	b.n	8001360 <main+0x278>
			  }
			  else if(setPosition - QEIdata.linearPos < 3 && setPosition - QEIdata.linearPos > 0.05){
 800122c:	4b74      	ldr	r3, [pc, #464]	; (8001400 <main+0x318>)
 800122e:	ed93 7a00 	vldr	s14, [r3]
 8001232:	4b70      	ldr	r3, [pc, #448]	; (80013f4 <main+0x30c>)
 8001234:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800123c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001248:	d51b      	bpl.n	8001282 <main+0x19a>
 800124a:	4b6d      	ldr	r3, [pc, #436]	; (8001400 <main+0x318>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	4b68      	ldr	r3, [pc, #416]	; (80013f4 <main+0x30c>)
 8001252:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001256:	ee77 7a67 	vsub.f32	s15, s14, s15
 800125a:	ee17 0a90 	vmov	r0, s15
 800125e:	f7ff f93f 	bl	80004e0 <__aeabi_f2d>
 8001262:	a353      	add	r3, pc, #332	; (adr r3, 80013b0 <main+0x2c8>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff fc22 	bl	8000ab0 <__aeabi_dcmpgt>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d007      	beq.n	8001282 <main+0x19a>
				  Vin = 2;
 8001272:	4b66      	ldr	r3, [pc, #408]	; (800140c <main+0x324>)
 8001274:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001278:	601a      	str	r2, [r3, #0]
				  check = 1;
 800127a:	4b65      	ldr	r3, [pc, #404]	; (8001410 <main+0x328>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	e06e      	b.n	8001360 <main+0x278>
			  }
			  else if(setPosition - QEIdata.linearPos > -3 && setPosition - QEIdata.linearPos < -0.05){
 8001282:	4b5f      	ldr	r3, [pc, #380]	; (8001400 <main+0x318>)
 8001284:	ed93 7a00 	vldr	s14, [r3]
 8001288:	4b5a      	ldr	r3, [pc, #360]	; (80013f4 <main+0x30c>)
 800128a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800128e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001292:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 8001296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	dd1b      	ble.n	80012d8 <main+0x1f0>
 80012a0:	4b57      	ldr	r3, [pc, #348]	; (8001400 <main+0x318>)
 80012a2:	ed93 7a00 	vldr	s14, [r3]
 80012a6:	4b53      	ldr	r3, [pc, #332]	; (80013f4 <main+0x30c>)
 80012a8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80012ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b0:	ee17 0a90 	vmov	r0, s15
 80012b4:	f7ff f914 	bl	80004e0 <__aeabi_f2d>
 80012b8:	a33f      	add	r3, pc, #252	; (adr r3, 80013b8 <main+0x2d0>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f7ff fbd9 	bl	8000a74 <__aeabi_dcmplt>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d007      	beq.n	80012d8 <main+0x1f0>
			  	  Vin = -1.5;
 80012c8:	4b50      	ldr	r3, [pc, #320]	; (800140c <main+0x324>)
 80012ca:	4a52      	ldr	r2, [pc, #328]	; (8001414 <main+0x32c>)
 80012cc:	601a      	str	r2, [r3, #0]
			  	  check = -1;
 80012ce:	4b50      	ldr	r3, [pc, #320]	; (8001410 <main+0x328>)
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	e043      	b.n	8001360 <main+0x278>
			  }
			  else{
				  Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 - QEIdata.linearVel);
 80012d8:	4b4f      	ldr	r3, [pc, #316]	; (8001418 <main+0x330>)
 80012da:	ed93 7a00 	vldr	s14, [r3]
 80012de:	4b4f      	ldr	r3, [pc, #316]	; (800141c <main+0x334>)
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012f0:	4b40      	ldr	r3, [pc, #256]	; (80013f4 <main+0x30c>)
 80012f2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80012f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012fa:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <main+0x2fc>)
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
 80012fe:	edc7 7a08 	vstr	s15, [r7, #32]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	ed93 7a00 	vldr	s14, [r3]
 8001308:	edd7 7a08 	vldr	s15, [r7, #32]
 800130c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	edd3 6a01 	vldr	s13, [r3, #4]
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	edd3 7a03 	vldr	s15, [r3, #12]
 800131c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001320:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	edd3 6a02 	vldr	s13, [r3, #8]
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001334:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800133e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001342:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Update state */
    S->state[1] = S->state[0];
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	6a3a      	ldr	r2, [r7, #32]
 8001352:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	4a2b      	ldr	r2, [pc, #172]	; (800140c <main+0x324>)
 800135e:	6013      	str	r3, [r2, #0]
				  //Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
			  }
			  if(Vin > 24){
 8001360:	4b2a      	ldr	r3, [pc, #168]	; (800140c <main+0x324>)
 8001362:	edd3 7a00 	vldr	s15, [r3]
 8001366:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 800136a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800136e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001372:	dd02      	ble.n	800137a <main+0x292>
	  			  Vin = 24;
 8001374:	4b25      	ldr	r3, [pc, #148]	; (800140c <main+0x324>)
 8001376:	4a2a      	ldr	r2, [pc, #168]	; (8001420 <main+0x338>)
 8001378:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 800137a:	4b24      	ldr	r3, [pc, #144]	; (800140c <main+0x324>)
 800137c:	edd3 7a00 	vldr	s15, [r3]
 8001380:	eebb 7a08 	vmov.f32	s14, #184	; 0xc1c00000 -24.0
 8001384:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138c:	d554      	bpl.n	8001438 <main+0x350>
				  Vin = -24;
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <main+0x324>)
 8001390:	4a24      	ldr	r2, [pc, #144]	; (8001424 <main+0x33c>)
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e050      	b.n	8001438 <main+0x350>
			  }
		  }
	      else if(mode == 2){ //manual (control with joy stick)
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <main+0x320>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d144      	bne.n	8001428 <main+0x340>
			  JoystickInput();
 800139e:	f001 fd81 	bl	8002ea4 <JoystickInput>
			  button_up_down_input();
 80013a2:	f001 fd9f 	bl	8002ee4 <button_up_down_input>
			  button_reset_input(); //set 0;
 80013a6:	f001 fe1b 	bl	8002fe0 <button_reset_input>
 80013aa:	e045      	b.n	8001438 <main+0x350>
 80013ac:	f3af 8000 	nop.w
 80013b0:	9999999a 	.word	0x9999999a
 80013b4:	3fa99999 	.word	0x3fa99999
 80013b8:	9999999a 	.word	0x9999999a
 80013bc:	bfa99999 	.word	0xbfa99999
 80013c0:	20000250 	.word	0x20000250
 80013c4:	20000204 	.word	0x20000204
 80013c8:	200002e8 	.word	0x200002e8
 80013cc:	20000370 	.word	0x20000370
 80013d0:	200000a4 	.word	0x200000a4
 80013d4:	2000029c 	.word	0x2000029c
 80013d8:	200003cc 	.word	0x200003cc
 80013dc:	40a00000 	.word	0x40a00000
 80013e0:	37a7c5ac 	.word	0x37a7c5ac
 80013e4:	200003f0 	.word	0x200003f0
 80013e8:	3e19999a 	.word	0x3e19999a
 80013ec:	3bc49ba6 	.word	0x3bc49ba6
 80013f0:	3d4ccccd 	.word	0x3d4ccccd
 80013f4:	20000338 	.word	0x20000338
 80013f8:	2000041c 	.word	0x2000041c
 80013fc:	20000430 	.word	0x20000430
 8001400:	20000414 	.word	0x20000414
 8001404:	20000384 	.word	0x20000384
 8001408:	20000000 	.word	0x20000000
 800140c:	2000037c 	.word	0x2000037c
 8001410:	20000428 	.word	0x20000428
 8001414:	bfc00000 	.word	0xbfc00000
 8001418:	20000418 	.word	0x20000418
 800141c:	20000394 	.word	0x20000394
 8001420:	41c00000 	.word	0x41c00000
 8001424:	c1c00000 	.word	0xc1c00000
		  }
		  else if(mode == 3){ //stop mode
 8001428:	4ba3      	ldr	r3, [pc, #652]	; (80016b8 <main+0x5d0>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b03      	cmp	r3, #3
 800142e:	d103      	bne.n	8001438 <main+0x350>
			  Vin = 0;
 8001430:	4ba2      	ldr	r3, [pc, #648]	; (80016bc <main+0x5d4>)
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
		  }

		  //software limit
		  SoftwareLimit();
 8001438:	f001 fcde 	bl	8002df8 <SoftwareLimit>

		  //Drive Motor which PWM
		  DriveMotor();
 800143c:	f001 fc80 	bl	8002d40 <DriveMotor>

	  }

	  if(currentTime > timestamp){
 8001440:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001444:	499e      	ldr	r1, [pc, #632]	; (80016c0 <main+0x5d8>)
 8001446:	e9d1 0100 	ldrd	r0, r1, [r1]
 800144a:	4290      	cmp	r0, r2
 800144c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001450:	f4bf ae98 	bcs.w	8001184 <main+0x9c>
		  //timestamp = currentTime + 1000; //1000 Hz
		  timestamp = currentTime + 4000; //250 Hz
 8001454:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001458:	f512 687a 	adds.w	r8, r2, #4000	; 0xfa0
 800145c:	f143 0900 	adc.w	r9, r3, #0
 8001460:	4642      	mov	r2, r8
 8001462:	464b      	mov	r3, r9
 8001464:	4996      	ldr	r1, [pc, #600]	; (80016c0 <main+0x5d8>)
 8001466:	e9c1 2300 	strd	r2, r3, [r1]

		  //control mode
		  if(mode == 1){ //auto
 800146a:	4b93      	ldr	r3, [pc, #588]	; (80016b8 <main+0x5d0>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b01      	cmp	r3, #1
 8001470:	f47f ae88 	bne.w	8001184 <main+0x9c>
			  if(fabs(setPosition - QEIdata.linearPos) < 0.05){
 8001474:	4b93      	ldr	r3, [pc, #588]	; (80016c4 <main+0x5dc>)
 8001476:	ed93 7a00 	vldr	s14, [r3]
 800147a:	4b93      	ldr	r3, [pc, #588]	; (80016c8 <main+0x5e0>)
 800147c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	eef0 7ae7 	vabs.f32	s15, s15
 8001488:	ee17 0a90 	vmov	r0, s15
 800148c:	f7ff f828 	bl	80004e0 <__aeabi_f2d>
 8001490:	a385      	add	r3, pc, #532	; (adr r3, 80016a8 <main+0x5c0>)
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	f7ff faed 	bl	8000a74 <__aeabi_dcmplt>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d004      	beq.n	80014aa <main+0x3c2>
				  Vin = 0;
 80014a0:	4b86      	ldr	r3, [pc, #536]	; (80016bc <main+0x5d4>)
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	e0dd      	b.n	8001666 <main+0x57e>
			  }
			  else if(setPosition - QEIdata.linearPos < 3 && setPosition - QEIdata.linearPos > 0.05){
 80014aa:	4b86      	ldr	r3, [pc, #536]	; (80016c4 <main+0x5dc>)
 80014ac:	ed93 7a00 	vldr	s14, [r3]
 80014b0:	4b85      	ldr	r3, [pc, #532]	; (80016c8 <main+0x5e0>)
 80014b2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80014b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ba:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80014be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	d51b      	bpl.n	8001500 <main+0x418>
 80014c8:	4b7e      	ldr	r3, [pc, #504]	; (80016c4 <main+0x5dc>)
 80014ca:	ed93 7a00 	vldr	s14, [r3]
 80014ce:	4b7e      	ldr	r3, [pc, #504]	; (80016c8 <main+0x5e0>)
 80014d0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80014d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d8:	ee17 0a90 	vmov	r0, s15
 80014dc:	f7ff f800 	bl	80004e0 <__aeabi_f2d>
 80014e0:	a371      	add	r3, pc, #452	; (adr r3, 80016a8 <main+0x5c0>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	f7ff fae3 	bl	8000ab0 <__aeabi_dcmpgt>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d007      	beq.n	8001500 <main+0x418>
			  	  Vin = 2;
 80014f0:	4b72      	ldr	r3, [pc, #456]	; (80016bc <main+0x5d4>)
 80014f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f6:	601a      	str	r2, [r3, #0]
			  	  check = 2;
 80014f8:	4b74      	ldr	r3, [pc, #464]	; (80016cc <main+0x5e4>)
 80014fa:	2202      	movs	r2, #2
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	e0b2      	b.n	8001666 <main+0x57e>
			  }
			  else if(setPosition - QEIdata.linearPos > -3 && setPosition - QEIdata.linearPos < -0.05){
 8001500:	4b70      	ldr	r3, [pc, #448]	; (80016c4 <main+0x5dc>)
 8001502:	ed93 7a00 	vldr	s14, [r3]
 8001506:	4b70      	ldr	r3, [pc, #448]	; (80016c8 <main+0x5e0>)
 8001508:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800150c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001510:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 8001514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151c:	dd1b      	ble.n	8001556 <main+0x46e>
 800151e:	4b69      	ldr	r3, [pc, #420]	; (80016c4 <main+0x5dc>)
 8001520:	ed93 7a00 	vldr	s14, [r3]
 8001524:	4b68      	ldr	r3, [pc, #416]	; (80016c8 <main+0x5e0>)
 8001526:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800152a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800152e:	ee17 0a90 	vmov	r0, s15
 8001532:	f7fe ffd5 	bl	80004e0 <__aeabi_f2d>
 8001536:	a35e      	add	r3, pc, #376	; (adr r3, 80016b0 <main+0x5c8>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7ff fa9a 	bl	8000a74 <__aeabi_dcmplt>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d007      	beq.n	8001556 <main+0x46e>
			  	  Vin = -1.5;
 8001546:	4b5d      	ldr	r3, [pc, #372]	; (80016bc <main+0x5d4>)
 8001548:	4a61      	ldr	r2, [pc, #388]	; (80016d0 <main+0x5e8>)
 800154a:	601a      	str	r2, [r3, #0]
			  	  check = -2;
 800154c:	4b5f      	ldr	r3, [pc, #380]	; (80016cc <main+0x5e4>)
 800154e:	f06f 0201 	mvn.w	r2, #1
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	e087      	b.n	8001666 <main+0x57e>
			  }
			  else{
				  setVelocity = arm_pid_f32(&PID1, (setPosition + ref_p)/2 - QEIdata.linearPos);
 8001556:	4b5b      	ldr	r3, [pc, #364]	; (80016c4 <main+0x5dc>)
 8001558:	ed93 7a00 	vldr	s14, [r3]
 800155c:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <main+0x5ec>)
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001566:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800156a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800156e:	4b56      	ldr	r3, [pc, #344]	; (80016c8 <main+0x5e0>)
 8001570:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001578:	4b57      	ldr	r3, [pc, #348]	; (80016d8 <main+0x5f0>)
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	edc7 7a02 	vstr	s15, [r7, #8]
    out = (S->A0 * in) +
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	ed93 7a00 	vldr	s14, [r3]
 8001586:	edd7 7a02 	vldr	s15, [r7, #8]
 800158a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	edd3 6a01 	vldr	s13, [r3, #4]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	edd3 7a03 	vldr	s15, [r3, #12]
 800159a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800159e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	edd3 6a02 	vldr	s13, [r3, #8]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80015ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80015bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c0:	edc7 7a01 	vstr	s15, [r7, #4]
    S->state[1] = S->state[0];
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	615a      	str	r2, [r3, #20]
    return (out);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a40      	ldr	r2, [pc, #256]	; (80016dc <main+0x5f4>)
 80015dc:	6013      	str	r3, [r2, #0]
				  Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 + QEIdata.linearVel);
 80015de:	4b3f      	ldr	r3, [pc, #252]	; (80016dc <main+0x5f4>)
 80015e0:	ed93 7a00 	vldr	s14, [r3]
 80015e4:	4b3e      	ldr	r3, [pc, #248]	; (80016e0 <main+0x5f8>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015f6:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <main+0x5e0>)
 80015f8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80015fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001600:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <main+0x5fc>)
 8001602:	61bb      	str	r3, [r7, #24]
 8001604:	edc7 7a05 	vstr	s15, [r7, #20]
    out = (S->A0 * in) +
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	ed93 7a00 	vldr	s14, [r3]
 800160e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001612:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	edd3 6a01 	vldr	s13, [r3, #4]
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001622:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001626:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	edd3 7a04 	vldr	s15, [r3, #16]
 8001636:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800163a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001648:	edc7 7a04 	vstr	s15, [r7, #16]
    S->state[1] = S->state[0];
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	615a      	str	r2, [r3, #20]
    return (out);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4a16      	ldr	r2, [pc, #88]	; (80016bc <main+0x5d4>)
 8001664:	6013      	str	r3, [r2, #0]
				  //Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
			  }
			  if(Vin > 24){
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <main+0x5d4>)
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001678:	dd02      	ble.n	8001680 <main+0x598>
				  Vin = 24;
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <main+0x5d4>)
 800167c:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <main+0x600>)
 800167e:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <main+0x5d4>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	eebb 7a08 	vmov.f32	s14, #184	; 0xc1c00000 -24.0
 800168a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001692:	d502      	bpl.n	800169a <main+0x5b2>
				  Vin = -24;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <main+0x5d4>)
 8001696:	4a15      	ldr	r2, [pc, #84]	; (80016ec <main+0x604>)
 8001698:	601a      	str	r2, [r3, #0]
			  }

			  //software limit
			  SoftwareLimit();
 800169a:	f001 fbad 	bl	8002df8 <SoftwareLimit>

			  //Drive Motor which PWM
			  DriveMotor();
 800169e:	f001 fb4f 	bl	8002d40 <DriveMotor>
  {
 80016a2:	e56f      	b.n	8001184 <main+0x9c>
 80016a4:	f3af 8000 	nop.w
 80016a8:	9999999a 	.word	0x9999999a
 80016ac:	3fa99999 	.word	0x3fa99999
 80016b0:	9999999a 	.word	0x9999999a
 80016b4:	bfa99999 	.word	0xbfa99999
 80016b8:	20000000 	.word	0x20000000
 80016bc:	2000037c 	.word	0x2000037c
 80016c0:	20000438 	.word	0x20000438
 80016c4:	20000414 	.word	0x20000414
 80016c8:	20000338 	.word	0x20000338
 80016cc:	20000428 	.word	0x20000428
 80016d0:	bfc00000 	.word	0xbfc00000
 80016d4:	20000390 	.word	0x20000390
 80016d8:	200003cc 	.word	0x200003cc
 80016dc:	20000418 	.word	0x20000418
 80016e0:	20000394 	.word	0x20000394
 80016e4:	200003f0 	.word	0x200003f0
 80016e8:	41c00000 	.word	0x41c00000
 80016ec:	c1c00000 	.word	0xc1c00000

080016f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b094      	sub	sp, #80	; 0x50
 80016f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f6:	f107 0318 	add.w	r3, r7, #24
 80016fa:	2238      	movs	r2, #56	; 0x38
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f007 fc5a 	bl	8008fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001712:	2000      	movs	r0, #0
 8001714:	f004 f876 	bl	8005804 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001718:	2302      	movs	r3, #2
 800171a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001722:	2340      	movs	r3, #64	; 0x40
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001726:	2302      	movs	r3, #2
 8001728:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800172a:	2302      	movs	r3, #2
 800172c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800172e:	2304      	movs	r3, #4
 8001730:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001732:	2355      	movs	r3, #85	; 0x55
 8001734:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001736:	2302      	movs	r3, #2
 8001738:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800173a:	2302      	movs	r3, #2
 800173c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800173e:	2302      	movs	r3, #2
 8001740:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001742:	f107 0318 	add.w	r3, r7, #24
 8001746:	4618      	mov	r0, r3
 8001748:	f004 f910 	bl	800596c <HAL_RCC_OscConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001752:	f001 fc9b 	bl	800308c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001756:	230f      	movs	r3, #15
 8001758:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175a:	2303      	movs	r3, #3
 800175c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2104      	movs	r1, #4
 800176e:	4618      	mov	r0, r3
 8001770:	f004 fc0e 	bl	8005f90 <HAL_RCC_ClockConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800177a:	f001 fc87 	bl	800308c <Error_Handler>
  }
}
 800177e:	bf00      	nop
 8001780:	3750      	adds	r7, #80	; 0x50
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	; 0x30
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800178e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	2220      	movs	r2, #32
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f007 fc09 	bl	8008fb8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017a6:	4b3a      	ldr	r3, [pc, #232]	; (8001890 <MX_ADC1_Init+0x108>)
 80017a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80017ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017ae:	4b38      	ldr	r3, [pc, #224]	; (8001890 <MX_ADC1_Init+0x108>)
 80017b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017b6:	4b36      	ldr	r3, [pc, #216]	; (8001890 <MX_ADC1_Init+0x108>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017bc:	4b34      	ldr	r3, [pc, #208]	; (8001890 <MX_ADC1_Init+0x108>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80017c2:	4b33      	ldr	r3, [pc, #204]	; (8001890 <MX_ADC1_Init+0x108>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017c8:	4b31      	ldr	r3, [pc, #196]	; (8001890 <MX_ADC1_Init+0x108>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ce:	4b30      	ldr	r3, [pc, #192]	; (8001890 <MX_ADC1_Init+0x108>)
 80017d0:	2204      	movs	r2, #4
 80017d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017d4:	4b2e      	ldr	r3, [pc, #184]	; (8001890 <MX_ADC1_Init+0x108>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017da:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <MX_ADC1_Init+0x108>)
 80017dc:	2200      	movs	r2, #0
 80017de:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80017e0:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <MX_ADC1_Init+0x108>)
 80017e2:	2202      	movs	r2, #2
 80017e4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017e6:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <MX_ADC1_Init+0x108>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80017ee:	4b28      	ldr	r3, [pc, #160]	; (8001890 <MX_ADC1_Init+0x108>)
 80017f0:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 80017f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <MX_ADC1_Init+0x108>)
 80017f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017fc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80017fe:	4b24      	ldr	r3, [pc, #144]	; (8001890 <MX_ADC1_Init+0x108>)
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001806:	4b22      	ldr	r3, [pc, #136]	; (8001890 <MX_ADC1_Init+0x108>)
 8001808:	2200      	movs	r2, #0
 800180a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800180c:	4b20      	ldr	r3, [pc, #128]	; (8001890 <MX_ADC1_Init+0x108>)
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001814:	481e      	ldr	r0, [pc, #120]	; (8001890 <MX_ADC1_Init+0x108>)
 8001816:	f002 f963 	bl	8003ae0 <HAL_ADC_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001820:	f001 fc34 	bl	800308c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001824:	2300      	movs	r3, #0
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182c:	4619      	mov	r1, r3
 800182e:	4818      	ldr	r0, [pc, #96]	; (8001890 <MX_ADC1_Init+0x108>)
 8001830:	f003 f994 	bl	8004b5c <HAL_ADCEx_MultiModeConfigChannel>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800183a:	f001 fc27 	bl	800308c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <MX_ADC1_Init+0x10c>)
 8001840:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001842:	2306      	movs	r3, #6
 8001844:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800184a:	237f      	movs	r3, #127	; 0x7f
 800184c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800184e:	2304      	movs	r3, #4
 8001850:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	4619      	mov	r1, r3
 800185a:	480d      	ldr	r0, [pc, #52]	; (8001890 <MX_ADC1_Init+0x108>)
 800185c:	f002 fbee 	bl	800403c <HAL_ADC_ConfigChannel>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001866:	f001 fc11 	bl	800308c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <MX_ADC1_Init+0x110>)
 800186c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800186e:	230c      	movs	r3, #12
 8001870:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <MX_ADC1_Init+0x108>)
 8001878:	f002 fbe0 	bl	800403c <HAL_ADC_ConfigChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001882:	f001 fc03 	bl	800308c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	3730      	adds	r7, #48	; 0x30
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200000a4 	.word	0x200000a4
 8001894:	04300002 	.word	0x04300002
 8001898:	14f00020 	.word	0x14f00020

0800189c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018a0:	4b21      	ldr	r3, [pc, #132]	; (8001928 <MX_LPUART1_UART_Init+0x8c>)
 80018a2:	4a22      	ldr	r2, [pc, #136]	; (800192c <MX_LPUART1_UART_Init+0x90>)
 80018a4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <MX_LPUART1_UART_Init+0x8c>)
 80018a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018ac:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ae:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <MX_LPUART1_UART_Init+0x8c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80018b4:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <MX_LPUART1_UART_Init+0x8c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <MX_LPUART1_UART_Init+0x8c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <MX_LPUART1_UART_Init+0x8c>)
 80018c2:	220c      	movs	r2, #12
 80018c4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <MX_LPUART1_UART_Init+0x8c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018cc:	4b16      	ldr	r3, [pc, #88]	; (8001928 <MX_LPUART1_UART_Init+0x8c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <MX_LPUART1_UART_Init+0x8c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <MX_LPUART1_UART_Init+0x8c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80018de:	4812      	ldr	r0, [pc, #72]	; (8001928 <MX_LPUART1_UART_Init+0x8c>)
 80018e0:	f006 fcc6 	bl	8008270 <HAL_UART_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80018ea:	f001 fbcf 	bl	800308c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ee:	2100      	movs	r1, #0
 80018f0:	480d      	ldr	r0, [pc, #52]	; (8001928 <MX_LPUART1_UART_Init+0x8c>)
 80018f2:	f007 fa61 	bl	8008db8 <HAL_UARTEx_SetTxFifoThreshold>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80018fc:	f001 fbc6 	bl	800308c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001900:	2100      	movs	r1, #0
 8001902:	4809      	ldr	r0, [pc, #36]	; (8001928 <MX_LPUART1_UART_Init+0x8c>)
 8001904:	f007 fa96 	bl	8008e34 <HAL_UARTEx_SetRxFifoThreshold>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800190e:	f001 fbbd 	bl	800308c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_LPUART1_UART_Init+0x8c>)
 8001914:	f007 fa17 	bl	8008d46 <HAL_UARTEx_DisableFifoMode>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800191e:	f001 fbb5 	bl	800308c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000170 	.word	0x20000170
 800192c:	40008000 	.word	0x40008000

08001930 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	; 0x30
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001936:	f107 030c 	add.w	r3, r7, #12
 800193a:	2224      	movs	r2, #36	; 0x24
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f007 fb3a 	bl	8008fb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001944:	463b      	mov	r3, r7
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800194e:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <MX_TIM2_Init+0xa4>)
 8001950:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001954:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001956:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <MX_TIM2_Init+0xa4>)
 8001958:	2200      	movs	r2, #0
 800195a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195c:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <MX_TIM2_Init+0xa4>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001962:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <MX_TIM2_Init+0xa4>)
 8001964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001968:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <MX_TIM2_Init+0xa4>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001970:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <MX_TIM2_Init+0xa4>)
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001976:	2303      	movs	r3, #3
 8001978:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800197e:	2301      	movs	r3, #1
 8001980:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800198e:	2301      	movs	r3, #1
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001992:	2300      	movs	r3, #0
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	4619      	mov	r1, r3
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <MX_TIM2_Init+0xa4>)
 80019a2:	f005 fa13 	bl	8006dcc <HAL_TIM_Encoder_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80019ac:	f001 fb6e 	bl	800308c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b0:	2300      	movs	r3, #0
 80019b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b8:	463b      	mov	r3, r7
 80019ba:	4619      	mov	r1, r3
 80019bc:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_TIM2_Init+0xa4>)
 80019be:	f006 fb7b 	bl	80080b8 <HAL_TIMEx_MasterConfigSynchronization>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80019c8:	f001 fb60 	bl	800308c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	3730      	adds	r7, #48	; 0x30
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000204 	.word	0x20000204

080019d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08e      	sub	sp, #56	; 0x38
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f8:	463b      	mov	r3, r7
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	611a      	str	r2, [r3, #16]
 8001a06:	615a      	str	r2, [r3, #20]
 8001a08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <MX_TIM3_Init+0xe8>)
 8001a0c:	4a2d      	ldr	r2, [pc, #180]	; (8001ac4 <MX_TIM3_Init+0xec>)
 8001a0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001a10:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <MX_TIM3_Init+0xe8>)
 8001a12:	22a9      	movs	r2, #169	; 0xa9
 8001a14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a16:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <MX_TIM3_Init+0xe8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001a1c:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <MX_TIM3_Init+0xe8>)
 8001a1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a24:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <MX_TIM3_Init+0xe8>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2a:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <MX_TIM3_Init+0xe8>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a30:	4823      	ldr	r0, [pc, #140]	; (8001ac0 <MX_TIM3_Init+0xe8>)
 8001a32:	f004 ff17 	bl	8006864 <HAL_TIM_Base_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001a3c:	f001 fb26 	bl	800308c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	481c      	ldr	r0, [pc, #112]	; (8001ac0 <MX_TIM3_Init+0xe8>)
 8001a4e:	f005 fd55 	bl	80074fc <HAL_TIM_ConfigClockSource>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001a58:	f001 fb18 	bl	800308c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a5c:	4818      	ldr	r0, [pc, #96]	; (8001ac0 <MX_TIM3_Init+0xe8>)
 8001a5e:	f005 f841 	bl	8006ae4 <HAL_TIM_PWM_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001a68:	f001 fb10 	bl	800308c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4811      	ldr	r0, [pc, #68]	; (8001ac0 <MX_TIM3_Init+0xe8>)
 8001a7c:	f006 fb1c 	bl	80080b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001a86:	f001 fb01 	bl	800308c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a8a:	2360      	movs	r3, #96	; 0x60
 8001a8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001a8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <MX_TIM3_Init+0xe8>)
 8001aa4:	f005 fc16 	bl	80072d4 <HAL_TIM_PWM_ConfigChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001aae:	f001 faed 	bl	800308c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ab2:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <MX_TIM3_Init+0xe8>)
 8001ab4:	f001 fc9a 	bl	80033ec <HAL_TIM_MspPostInit>

}
 8001ab8:	bf00      	nop
 8001aba:	3738      	adds	r7, #56	; 0x38
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000250 	.word	0x20000250
 8001ac4:	40000400 	.word	0x40000400

08001ac8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ace:	f107 0310 	add.w	r3, r7, #16
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001ae8:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <MX_TIM4_Init+0x98>)
 8001aea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001aee:	22a9      	movs	r2, #169	; 0xa9
 8001af0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af2:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001afa:	f242 720f 	movw	r2, #9999	; 0x270f
 8001afe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b00:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b0c:	4813      	ldr	r0, [pc, #76]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001b0e:	f004 fea9 	bl	8006864 <HAL_TIM_Base_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001b18:	f001 fab8 	bl	800308c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b22:	f107 0310 	add.w	r3, r7, #16
 8001b26:	4619      	mov	r1, r3
 8001b28:	480c      	ldr	r0, [pc, #48]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001b2a:	f005 fce7 	bl	80074fc <HAL_TIM_ConfigClockSource>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b34:	f001 faaa 	bl	800308c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b38:	2320      	movs	r3, #32
 8001b3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	4619      	mov	r1, r3
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001b46:	f006 fab7 	bl	80080b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b50:	f001 fa9c 	bl	800308c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	2000029c 	.word	0x2000029c
 8001b60:	40000800 	.word	0x40000800

08001b64 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6a:	f107 0310 	add.w	r3, r7, #16
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b82:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <MX_TIM5_Init+0x94>)
 8001b84:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <MX_TIM5_Init+0x98>)
 8001b86:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <MX_TIM5_Init+0x94>)
 8001b8a:	22a9      	movs	r2, #169	; 0xa9
 8001b8c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <MX_TIM5_Init+0x94>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8001b94:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <MX_TIM5_Init+0x94>)
 8001b96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b9a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <MX_TIM5_Init+0x94>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <MX_TIM5_Init+0x94>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ba8:	4813      	ldr	r0, [pc, #76]	; (8001bf8 <MX_TIM5_Init+0x94>)
 8001baa:	f004 fe5b 	bl	8006864 <HAL_TIM_Base_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001bb4:	f001 fa6a 	bl	800308c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001bbe:	f107 0310 	add.w	r3, r7, #16
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <MX_TIM5_Init+0x94>)
 8001bc6:	f005 fc99 	bl	80074fc <HAL_TIM_ConfigClockSource>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001bd0:	f001 fa5c 	bl	800308c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_TIM5_Init+0x94>)
 8001be2:	f006 fa69 	bl	80080b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001bec:	f001 fa4e 	bl	800308c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200002e8 	.word	0x200002e8
 8001bfc:	40000c00 	.word	0x40000c00

08001c00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <MX_DMA_Init+0x50>)
 8001c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0a:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <MX_DMA_Init+0x50>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	6493      	str	r3, [r2, #72]	; 0x48
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <MX_DMA_Init+0x50>)
 8001c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <MX_DMA_Init+0x50>)
 8001c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c22:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <MX_DMA_Init+0x50>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6493      	str	r3, [r2, #72]	; 0x48
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_DMA_Init+0x50>)
 8001c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	200b      	movs	r0, #11
 8001c3c:	f003 f971 	bl	8004f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c40:	200b      	movs	r0, #11
 8001c42:	f003 f988 	bl	8004f56 <HAL_NVIC_EnableIRQ>

}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000

08001c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	; 0x28
 8001c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
 8001c68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6a:	4b7c      	ldr	r3, [pc, #496]	; (8001e5c <MX_GPIO_Init+0x208>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6e:	4a7b      	ldr	r2, [pc, #492]	; (8001e5c <MX_GPIO_Init+0x208>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c76:	4b79      	ldr	r3, [pc, #484]	; (8001e5c <MX_GPIO_Init+0x208>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c82:	4b76      	ldr	r3, [pc, #472]	; (8001e5c <MX_GPIO_Init+0x208>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	4a75      	ldr	r2, [pc, #468]	; (8001e5c <MX_GPIO_Init+0x208>)
 8001c88:	f043 0320 	orr.w	r3, r3, #32
 8001c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8e:	4b73      	ldr	r3, [pc, #460]	; (8001e5c <MX_GPIO_Init+0x208>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	4b70      	ldr	r3, [pc, #448]	; (8001e5c <MX_GPIO_Init+0x208>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	4a6f      	ldr	r2, [pc, #444]	; (8001e5c <MX_GPIO_Init+0x208>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca6:	4b6d      	ldr	r3, [pc, #436]	; (8001e5c <MX_GPIO_Init+0x208>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	4b6a      	ldr	r3, [pc, #424]	; (8001e5c <MX_GPIO_Init+0x208>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	4a69      	ldr	r2, [pc, #420]	; (8001e5c <MX_GPIO_Init+0x208>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cbe:	4b67      	ldr	r3, [pc, #412]	; (8001e5c <MX_GPIO_Init+0x208>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cca:	4b64      	ldr	r3, [pc, #400]	; (8001e5c <MX_GPIO_Init+0x208>)
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cce:	4a63      	ldr	r2, [pc, #396]	; (8001e5c <MX_GPIO_Init+0x208>)
 8001cd0:	f043 0308 	orr.w	r3, r3, #8
 8001cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd6:	4b61      	ldr	r3, [pc, #388]	; (8001e5c <MX_GPIO_Init+0x208>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8001ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cec:	f003 fd5a 	bl	80057a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	21b0      	movs	r1, #176	; 0xb0
 8001cf4:	485a      	ldr	r0, [pc, #360]	; (8001e60 <MX_GPIO_Init+0x20c>)
 8001cf6:	f003 fd55 	bl	80057a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_6, GPIO_PIN_RESET);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001d00:	4858      	ldr	r0, [pc, #352]	; (8001e64 <MX_GPIO_Init+0x210>)
 8001d02:	f003 fd4f 	bl	80057a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4850      	ldr	r0, [pc, #320]	; (8001e60 <MX_GPIO_Init+0x20c>)
 8001d1e:	f003 fba7 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8
                           PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001d22:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001d26:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3e:	f003 fb97 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001d42:	23b0      	movs	r3, #176	; 0xb0
 8001d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d46:	2301      	movs	r3, #1
 8001d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	4841      	ldr	r0, [pc, #260]	; (8001e60 <MX_GPIO_Init+0x20c>)
 8001d5a:	f003 fb89 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_6;
 8001d5e:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d64:	2301      	movs	r3, #1
 8001d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	4619      	mov	r1, r3
 8001d76:	483b      	ldr	r0, [pc, #236]	; (8001e64 <MX_GPIO_Init+0x210>)
 8001d78:	f003 fb7a 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d94:	f003 fb6c 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001da4:	2302      	movs	r3, #2
 8001da6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4619      	mov	r1, r3
 8001dae:	482c      	ldr	r0, [pc, #176]	; (8001e60 <MX_GPIO_Init+0x20c>)
 8001db0:	f003 fb5e 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001db4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4825      	ldr	r0, [pc, #148]	; (8001e60 <MX_GPIO_Init+0x20c>)
 8001dca:	f003 fb51 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dce:	2304      	movs	r3, #4
 8001dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	4821      	ldr	r0, [pc, #132]	; (8001e68 <MX_GPIO_Init+0x214>)
 8001de2:	f003 fb45 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001de6:	2330      	movs	r3, #48	; 0x30
 8001de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	4619      	mov	r1, r3
 8001df8:	481a      	ldr	r0, [pc, #104]	; (8001e64 <MX_GPIO_Init+0x210>)
 8001dfa:	f003 fb39 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e06:	2302      	movs	r3, #2
 8001e08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4814      	ldr	r0, [pc, #80]	; (8001e64 <MX_GPIO_Init+0x210>)
 8001e12:	f003 fb2d 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480d      	ldr	r0, [pc, #52]	; (8001e64 <MX_GPIO_Init+0x210>)
 8001e2e:	f003 fb1f 	bl	8005470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	2017      	movs	r0, #23
 8001e38:	f003 f873 	bl	8004f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e3c:	2017      	movs	r0, #23
 8001e3e:	f003 f88a 	bl	8004f56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	2028      	movs	r0, #40	; 0x28
 8001e48:	f003 f86b 	bl	8004f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e4c:	2028      	movs	r0, #40	; 0x28
 8001e4e:	f003 f882 	bl	8004f56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e52:	bf00      	nop
 8001e54:	3728      	adds	r7, #40	; 0x28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	48000800 	.word	0x48000800
 8001e64:	48000400 	.word	0x48000400
 8001e68:	48000c00 	.word	0x48000c00

08001e6c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e6c:	b4b0      	push	{r4, r5, r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d108      	bne.n	8001e8e <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e82:	1e54      	subs	r4, r2, #1
 8001e84:	f143 0500 	adc.w	r5, r3, #0
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001e8a:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bcb0      	pop	{r4, r5, r7}
 8001e96:	4770      	bx	lr
 8001e98:	200002e8 	.word	0x200002e8
 8001e9c:	20000368 	.word	0x20000368

08001ea0 <micros>:

uint64_t micros()
{
 8001ea0:	b4b0      	push	{r4, r5, r7}
 8001ea2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <micros+0x2c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	2200      	movs	r2, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <micros+0x30>)
 8001eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb6:	1884      	adds	r4, r0, r2
 8001eb8:	eb41 0503 	adc.w	r5, r1, r3
 8001ebc:	4622      	mov	r2, r4
 8001ebe:	462b      	mov	r3, r5
}
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bcb0      	pop	{r4, r5, r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	200002e8 	.word	0x200002e8
 8001ed0:	20000368 	.word	0x20000368
 8001ed4:	00000000 	.word	0x00000000

08001ed8 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 8001ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = micros();
 8001ee0:	f7ff ffde 	bl	8001ea0 <micros>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4965      	ldr	r1, [pc, #404]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8001eea:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim2);
 8001eee:	4b65      	ldr	r3, [pc, #404]	; (8002084 <QEIEncoderPosVel_Update+0x1ac>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	4a62      	ldr	r2, [pc, #392]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8001ef6:	6013      	str	r3, [r2, #0]
	//Postion 1 turn calculation
	QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 8001ef8:	4b61      	ldr	r3, [pc, #388]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f00:	ee07 3a90 	vmov	s15, r3
 8001f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f08:	4b5d      	ldr	r3, [pc, #372]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8001f0a:	edc3 7a06 	vstr	s15, [r3, #24]
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8001f0e:	4b5c      	ldr	r3, [pc, #368]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4b5b      	ldr	r3, [pc, #364]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	607b      	str	r3, [r7, #4]
	//Handle Warp around
	if(diffPosition > UINT32_MAX/2)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	da02      	bge.n	8001f26 <QEIEncoderPosVel_Update+0x4e>
		diffPosition -=UINT32_MAX;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3301      	adds	r3, #1
 8001f24:	607b      	str	r3, [r7, #4]
	if(diffPosition < -UINT32_MAX/2)
		diffPosition +=UINT32_MAX;
	//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001; //sec
 8001f26:	4b56      	ldr	r3, [pc, #344]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8001f28:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f2c:	4b54      	ldr	r3, [pc, #336]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8001f2e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001f32:	ebb0 0a02 	subs.w	sl, r0, r2
 8001f36:	eb61 0b03 	sbc.w	fp, r1, r3
 8001f3a:	4650      	mov	r0, sl
 8001f3c:	4659      	mov	r1, fp
 8001f3e:	f7fe faf1 	bl	8000524 <__aeabi_ul2d>
 8001f42:	a34b      	add	r3, pc, #300	; (adr r3, 8002070 <QEIEncoderPosVel_Update+0x198>)
 8001f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f48:	f7fe fb22 	bl	8000590 <__aeabi_dmul>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	f7fe fdec 	bl	8000b30 <__aeabi_d2f>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	603b      	str	r3, [r7, #0]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;  //pulse/sec
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f66:	ed97 7a00 	vldr	s14, [r7]
 8001f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f6e:	4b44      	ldr	r3, [pc, #272]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8001f70:	edc3 7a07 	vstr	s15, [r3, #28]

	QEIdata.rad_s = (QEIdata.QEIAngularVelocity*2*3.14)/8192;
 8001f74:	4b42      	ldr	r3, [pc, #264]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8001f76:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f7e:	ee17 0a90 	vmov	r0, s15
 8001f82:	f7fe faad 	bl	80004e0 <__aeabi_f2d>
 8001f86:	a33c      	add	r3, pc, #240	; (adr r3, 8002078 <QEIEncoderPosVel_Update+0x1a0>)
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	f7fe fb00 	bl	8000590 <__aeabi_dmul>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	4b3a      	ldr	r3, [pc, #232]	; (8002088 <QEIEncoderPosVel_Update+0x1b0>)
 8001f9e:	f7fe fc21 	bl	80007e4 <__aeabi_ddiv>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f7fe fdc1 	bl	8000b30 <__aeabi_d2f>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4a33      	ldr	r2, [pc, #204]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8001fb2:	6213      	str	r3, [r2, #32]
	QEIdata.rpm = (QEIdata.QEIAngularVelocity*60)/8192;
 8001fb4:	4b32      	ldr	r3, [pc, #200]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8001fb6:	edd3 7a07 	vldr	s15, [r3, #28]
 8001fba:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800208c <QEIEncoderPosVel_Update+0x1b4>
 8001fbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fc2:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002090 <QEIEncoderPosVel_Update+0x1b8>
 8001fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fca:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8001fcc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	QEIdata.linearVel = (QEIdata.QEIAngularVelocity*10)/8192; //velocity (mm/s)
 8001fd0:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8001fd2:	edd3 7a07 	vldr	s15, [r3, #28]
 8001fd6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fde:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8002090 <QEIEncoderPosVel_Update+0x1b8>
 8001fe2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fe6:	4b26      	ldr	r3, [pc, #152]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8001fe8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	if(QEIdata.Position[NEW] < 2147483648){
 8001fec:	4b24      	ldr	r3, [pc, #144]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	db11      	blt.n	8002018 <QEIEncoderPosVel_Update+0x140>
		QEIdata.linearPos = ((float)QEIdata.Position[NEW]*10)/8192; //position (mm)
 8001ff4:	4b22      	ldr	r3, [pc, #136]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	ee07 3a90 	vmov	s15, r3
 8001ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002000:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002004:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002008:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002090 <QEIEncoderPosVel_Update+0x1b8>
 800200c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8002012:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8002016:	e01c      	b.n	8002052 <QEIEncoderPosVel_Update+0x17a>
	}
	else{
		QEIdata.linearPos = -((float)(4294967295 - QEIdata.Position[NEW])*10)/8192;
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2200      	movs	r2, #0
 800201e:	461c      	mov	r4, r3
 8002020:	4615      	mov	r5, r2
 8002022:	2300      	movs	r3, #0
 8002024:	f1d4 38ff 	rsbs	r8, r4, #4294967295	; 0xffffffff
 8002028:	eb63 0905 	sbc.w	r9, r3, r5
 800202c:	4640      	mov	r0, r8
 800202e:	4649      	mov	r1, r9
 8002030:	f7fe fe9e 	bl	8000d70 <__aeabi_l2f>
 8002034:	ee07 0a10 	vmov	s14, r0
 8002038:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800203c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002040:	eeb1 7a67 	vneg.f32	s14, s15
 8002044:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002090 <QEIEncoderPosVel_Update+0x1b8>
 8002048:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 800204e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	}

	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8002052:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8002058:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 800205c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002060:	4907      	ldr	r1, [pc, #28]	; (8002080 <QEIEncoderPosVel_Update+0x1a8>)
 8002062:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002070:	a0b5ed8d 	.word	0xa0b5ed8d
 8002074:	3eb0c6f7 	.word	0x3eb0c6f7
 8002078:	51eb851f 	.word	0x51eb851f
 800207c:	40091eb8 	.word	0x40091eb8
 8002080:	20000338 	.word	0x20000338
 8002084:	20000204 	.word	0x20000204
 8002088:	40c00000 	.word	0x40c00000
 800208c:	42700000 	.word	0x42700000
 8002090:	46000000 	.word	0x46000000

08002094 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_10)  //change mode IT
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a4:	d121      	bne.n	80020ea <HAL_GPIO_EXTI_Callback+0x56>
	{
//		setPosition = 100;
		mode += 1;
 80020a6:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <HAL_GPIO_EXTI_Callback+0x84>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	3301      	adds	r3, #1
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <HAL_GPIO_EXTI_Callback+0x84>)
 80020b0:	701a      	strb	r2, [r3, #0]
		if(mode==4){
 80020b2:	4b19      	ldr	r3, [pc, #100]	; (8002118 <HAL_GPIO_EXTI_Callback+0x84>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d102      	bne.n	80020c0 <HAL_GPIO_EXTI_Callback+0x2c>
			mode = 1;
 80020ba:	4b17      	ldr	r3, [pc, #92]	; (8002118 <HAL_GPIO_EXTI_Callback+0x84>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
		}

		if(mode == 1){
 80020c0:	4b15      	ldr	r3, [pc, #84]	; (8002118 <HAL_GPIO_EXTI_Callback+0x84>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d106      	bne.n	80020d6 <HAL_GPIO_EXTI_Callback+0x42>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80020c8:	2201      	movs	r2, #1
 80020ca:	2140      	movs	r1, #64	; 0x40
 80020cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d0:	f003 fb68 	bl	80057a4 <HAL_GPIO_WritePin>
 80020d4:	e009      	b.n	80020ea <HAL_GPIO_EXTI_Callback+0x56>
		}
		else if(mode == 2){
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <HAL_GPIO_EXTI_Callback+0x84>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d105      	bne.n	80020ea <HAL_GPIO_EXTI_Callback+0x56>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2140      	movs	r1, #64	; 0x40
 80020e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e6:	f003 fb5d 	bl	80057a4 <HAL_GPIO_WritePin>
		}
	}
	if(GPIO_Pin == GPIO_PIN_8){ //check top sensor
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020f0:	d104      	bne.n	80020fc <HAL_GPIO_EXTI_Callback+0x68>
		S_top = 1;
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_GPIO_EXTI_Callback+0x88>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
		//Vin = -2;
		DriveMotor();
 80020f8:	f000 fe22 	bl	8002d40 <DriveMotor>
	}
	if(GPIO_Pin == GPIO_PIN_9){ //check down sensor
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002102:	d104      	bne.n	800210e <HAL_GPIO_EXTI_Callback+0x7a>
		S_down = 1;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]
		//Vin = 2;
		DriveMotor();
 800210a:	f000 fe19 	bl	8002d40 <DriveMotor>
	}
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000000 	.word	0x20000000
 800211c:	20000420 	.word	0x20000420
 8002120:	20000424 	.word	0x20000424

08002124 <checkStartMoving>:

//-----------------------------------Trajectory------------------------------------------//
void checkStartMoving(){
 8002124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
	if(q_f != q_f_old){
 800212c:	4b9d      	ldr	r3, [pc, #628]	; (80023a4 <checkStartMoving+0x280>)
 800212e:	ed93 7a00 	vldr	s14, [r3]
 8002132:	4b9d      	ldr	r3, [pc, #628]	; (80023a8 <checkStartMoving+0x284>)
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	eeb4 7a67 	vcmp.f32	s14, s15
 800213c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002140:	f000 8201 	beq.w	8002546 <checkStartMoving+0x422>
		q_i = q_f_old;   //Define q_i
 8002144:	4b98      	ldr	r3, [pc, #608]	; (80023a8 <checkStartMoving+0x284>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a98      	ldr	r2, [pc, #608]	; (80023ac <checkStartMoving+0x288>)
 800214a:	6013      	str	r3, [r2, #0]
		delta_q = q_f - q_i;
 800214c:	4b95      	ldr	r3, [pc, #596]	; (80023a4 <checkStartMoving+0x280>)
 800214e:	ed93 7a00 	vldr	s14, [r3]
 8002152:	4b96      	ldr	r3, [pc, #600]	; (80023ac <checkStartMoving+0x288>)
 8002154:	edd3 7a00 	vldr	s15, [r3]
 8002158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800215c:	4b94      	ldr	r3, [pc, #592]	; (80023b0 <checkStartMoving+0x28c>)
 800215e:	edc3 7a00 	vstr	s15, [r3]
		if(delta_q < 0){
 8002162:	4b93      	ldr	r3, [pc, #588]	; (80023b0 <checkStartMoving+0x28c>)
 8002164:	edd3 7a00 	vldr	s15, [r3]
 8002168:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800216c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002170:	d504      	bpl.n	800217c <checkStartMoving+0x58>
			dir = -1;
 8002172:	4b90      	ldr	r3, [pc, #576]	; (80023b4 <checkStartMoving+0x290>)
 8002174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	e002      	b.n	8002182 <checkStartMoving+0x5e>
		}
		else{
			dir = 1;
 800217c:	4b8d      	ldr	r3, [pc, #564]	; (80023b4 <checkStartMoving+0x290>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]
		}

		float q_check = fabs(q_d_i + q_2d_max*sqrt(fabs(delta_q)/q_2d_max)*dir);
 8002182:	4b8d      	ldr	r3, [pc, #564]	; (80023b8 <checkStartMoving+0x294>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f9aa 	bl	80004e0 <__aeabi_f2d>
 800218c:	4604      	mov	r4, r0
 800218e:	460d      	mov	r5, r1
 8002190:	4b8a      	ldr	r3, [pc, #552]	; (80023bc <checkStartMoving+0x298>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe f9a3 	bl	80004e0 <__aeabi_f2d>
 800219a:	4680      	mov	r8, r0
 800219c:	4689      	mov	r9, r1
 800219e:	4b84      	ldr	r3, [pc, #528]	; (80023b0 <checkStartMoving+0x28c>)
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	eef0 7ae7 	vabs.f32	s15, s15
 80021a8:	ee17 0a90 	vmov	r0, s15
 80021ac:	f7fe f998 	bl	80004e0 <__aeabi_f2d>
 80021b0:	4682      	mov	sl, r0
 80021b2:	468b      	mov	fp, r1
 80021b4:	4b81      	ldr	r3, [pc, #516]	; (80023bc <checkStartMoving+0x298>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe f991 	bl	80004e0 <__aeabi_f2d>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4650      	mov	r0, sl
 80021c4:	4659      	mov	r1, fp
 80021c6:	f7fe fb0d 	bl	80007e4 <__aeabi_ddiv>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	ec43 2b17 	vmov	d7, r2, r3
 80021d2:	eeb0 0a47 	vmov.f32	s0, s14
 80021d6:	eef0 0a67 	vmov.f32	s1, s15
 80021da:	f006 ff1f 	bl	800901c <sqrt>
 80021de:	ec53 2b10 	vmov	r2, r3, d0
 80021e2:	4640      	mov	r0, r8
 80021e4:	4649      	mov	r1, r9
 80021e6:	f7fe f9d3 	bl	8000590 <__aeabi_dmul>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	4699      	mov	r9, r3
 80021f2:	4b70      	ldr	r3, [pc, #448]	; (80023b4 <checkStartMoving+0x290>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe f960 	bl	80004bc <__aeabi_i2d>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4640      	mov	r0, r8
 8002202:	4649      	mov	r1, r9
 8002204:	f7fe f9c4 	bl	8000590 <__aeabi_dmul>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4620      	mov	r0, r4
 800220e:	4629      	mov	r1, r5
 8002210:	f7fe f808 	bl	8000224 <__adddf3>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	f7fe fc88 	bl	8000b30 <__aeabi_d2f>
 8002220:	ee07 0a90 	vmov	s15, r0
 8002224:	eef0 7ae7 	vabs.f32	s15, s15
 8002228:	edc7 7a01 	vstr	s15, [r7, #4]

		if(q_check >= q_d_max){ //Accelerate to maximum speed
 800222c:	4b64      	ldr	r3, [pc, #400]	; (80023c0 <checkStartMoving+0x29c>)
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	ed97 7a01 	vldr	s14, [r7, #4]
 8002236:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800223a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223e:	f2c0 80cf 	blt.w	80023e0 <checkStartMoving+0x2bc>
			calmode = 1;
 8002242:	4b60      	ldr	r3, [pc, #384]	; (80023c4 <checkStartMoving+0x2a0>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
			t_acc = fabs((q_d_max-q_d_i)/q_2d_max);
 8002248:	4b5d      	ldr	r3, [pc, #372]	; (80023c0 <checkStartMoving+0x29c>)
 800224a:	ed93 7a00 	vldr	s14, [r3]
 800224e:	4b5a      	ldr	r3, [pc, #360]	; (80023b8 <checkStartMoving+0x294>)
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002258:	4b58      	ldr	r3, [pc, #352]	; (80023bc <checkStartMoving+0x298>)
 800225a:	ed93 7a00 	vldr	s14, [r3]
 800225e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002262:	eef0 7ae7 	vabs.f32	s15, s15
 8002266:	4b58      	ldr	r3, [pc, #352]	; (80023c8 <checkStartMoving+0x2a4>)
 8002268:	edc3 7a00 	vstr	s15, [r3]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 800226c:	4b52      	ldr	r3, [pc, #328]	; (80023b8 <checkStartMoving+0x294>)
 800226e:	ed93 7a00 	vldr	s14, [r3]
 8002272:	4b55      	ldr	r3, [pc, #340]	; (80023c8 <checkStartMoving+0x2a4>)
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800227c:	4b4d      	ldr	r3, [pc, #308]	; (80023b4 <checkStartMoving+0x290>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	ee07 3a90 	vmov	s15, r3
 8002284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228c:	ee17 0a90 	vmov	r0, s15
 8002290:	f7fe f926 	bl	80004e0 <__aeabi_f2d>
 8002294:	4604      	mov	r4, r0
 8002296:	460d      	mov	r5, r1
 8002298:	4b48      	ldr	r3, [pc, #288]	; (80023bc <checkStartMoving+0x298>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe f91f 	bl	80004e0 <__aeabi_f2d>
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	4b49      	ldr	r3, [pc, #292]	; (80023cc <checkStartMoving+0x2a8>)
 80022a8:	f7fe f972 	bl	8000590 <__aeabi_dmul>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4690      	mov	r8, r2
 80022b2:	4699      	mov	r9, r3
 80022b4:	4b44      	ldr	r3, [pc, #272]	; (80023c8 <checkStartMoving+0x2a4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f911 	bl	80004e0 <__aeabi_f2d>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4640      	mov	r0, r8
 80022c4:	4649      	mov	r1, r9
 80022c6:	f7fe f963 	bl	8000590 <__aeabi_dmul>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4690      	mov	r8, r2
 80022d0:	4699      	mov	r9, r3
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <checkStartMoving+0x2a4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe f902 	bl	80004e0 <__aeabi_f2d>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4640      	mov	r0, r8
 80022e2:	4649      	mov	r1, r9
 80022e4:	f7fe f954 	bl	8000590 <__aeabi_dmul>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4690      	mov	r8, r2
 80022ee:	4699      	mov	r9, r3
 80022f0:	4b30      	ldr	r3, [pc, #192]	; (80023b4 <checkStartMoving+0x290>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe f8e1 	bl	80004bc <__aeabi_i2d>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4640      	mov	r0, r8
 8002300:	4649      	mov	r1, r9
 8002302:	f7fe f945 	bl	8000590 <__aeabi_dmul>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4620      	mov	r0, r4
 800230c:	4629      	mov	r1, r5
 800230e:	f7fd ff89 	bl	8000224 <__adddf3>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4610      	mov	r0, r2
 8002318:	4619      	mov	r1, r3
 800231a:	f7fe fc09 	bl	8000b30 <__aeabi_d2f>
 800231e:	4603      	mov	r3, r0
 8002320:	4a2b      	ldr	r2, [pc, #172]	; (80023d0 <checkStartMoving+0x2ac>)
 8002322:	6013      	str	r3, [r2, #0]
			t_const = fabs((q_f-q_i-2*q_acc)/q_d_max);
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <checkStartMoving+0x280>)
 8002326:	ed93 7a00 	vldr	s14, [r3]
 800232a:	4b20      	ldr	r3, [pc, #128]	; (80023ac <checkStartMoving+0x288>)
 800232c:	edd3 7a00 	vldr	s15, [r3]
 8002330:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002334:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <checkStartMoving+0x2ac>)
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800233e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002342:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <checkStartMoving+0x29c>)
 8002344:	ed93 7a00 	vldr	s14, [r3]
 8002348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800234c:	eef0 7ae7 	vabs.f32	s15, s15
 8002350:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <checkStartMoving+0x2b0>)
 8002352:	edc3 7a00 	vstr	s15, [r3]
			q_const = q_acc + q_d_max*t_const*dir;
 8002356:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <checkStartMoving+0x29c>)
 8002358:	ed93 7a00 	vldr	s14, [r3]
 800235c:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <checkStartMoving+0x2b0>)
 800235e:	edd3 7a00 	vldr	s15, [r3]
 8002362:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002366:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <checkStartMoving+0x290>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002372:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002376:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <checkStartMoving+0x2ac>)
 8002378:	edd3 7a00 	vldr	s15, [r3]
 800237c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002380:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <checkStartMoving+0x2b4>)
 8002382:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc + t_const;
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <checkStartMoving+0x2a4>)
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002390:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <checkStartMoving+0x2b0>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <checkStartMoving+0x2b8>)
 800239c:	edc3 7a00 	vstr	s15, [r3]
 80023a0:	e0c6      	b.n	8002530 <checkStartMoving+0x40c>
 80023a2:	bf00      	nop
 80023a4:	20000384 	.word	0x20000384
 80023a8:	2000039c 	.word	0x2000039c
 80023ac:	20000388 	.word	0x20000388
 80023b0:	2000038c 	.word	0x2000038c
 80023b4:	20000014 	.word	0x20000014
 80023b8:	20000380 	.word	0x20000380
 80023bc:	2000000c 	.word	0x2000000c
 80023c0:	20000008 	.word	0x20000008
 80023c4:	20000010 	.word	0x20000010
 80023c8:	200003a0 	.word	0x200003a0
 80023cc:	3fe00000 	.word	0x3fe00000
 80023d0:	200003a4 	.word	0x200003a4
 80023d4:	200003a8 	.word	0x200003a8
 80023d8:	200003ac 	.word	0x200003ac
 80023dc:	200003c4 	.word	0x200003c4
		}
		else{ //Accelerating does not reach maximum speed
			calmode = 2;
 80023e0:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <checkStartMoving+0x42c>)
 80023e2:	2202      	movs	r2, #2
 80023e4:	701a      	strb	r2, [r3, #0]
			t_acc = sqrt(fabs(delta_q)/q_2d_max);
 80023e6:	4b5b      	ldr	r3, [pc, #364]	; (8002554 <checkStartMoving+0x430>)
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	eef0 7ae7 	vabs.f32	s15, s15
 80023f0:	ee17 0a90 	vmov	r0, s15
 80023f4:	f7fe f874 	bl	80004e0 <__aeabi_f2d>
 80023f8:	4604      	mov	r4, r0
 80023fa:	460d      	mov	r5, r1
 80023fc:	4b56      	ldr	r3, [pc, #344]	; (8002558 <checkStartMoving+0x434>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe f86d 	bl	80004e0 <__aeabi_f2d>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4620      	mov	r0, r4
 800240c:	4629      	mov	r1, r5
 800240e:	f7fe f9e9 	bl	80007e4 <__aeabi_ddiv>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	ec43 2b17 	vmov	d7, r2, r3
 800241a:	eeb0 0a47 	vmov.f32	s0, s14
 800241e:	eef0 0a67 	vmov.f32	s1, s15
 8002422:	f006 fdfb 	bl	800901c <sqrt>
 8002426:	ec53 2b10 	vmov	r2, r3, d0
 800242a:	4610      	mov	r0, r2
 800242c:	4619      	mov	r1, r3
 800242e:	f7fe fb7f 	bl	8000b30 <__aeabi_d2f>
 8002432:	4603      	mov	r3, r0
 8002434:	4a49      	ldr	r2, [pc, #292]	; (800255c <checkStartMoving+0x438>)
 8002436:	6013      	str	r3, [r2, #0]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 8002438:	4b49      	ldr	r3, [pc, #292]	; (8002560 <checkStartMoving+0x43c>)
 800243a:	ed93 7a00 	vldr	s14, [r3]
 800243e:	4b47      	ldr	r3, [pc, #284]	; (800255c <checkStartMoving+0x438>)
 8002440:	edd3 7a00 	vldr	s15, [r3]
 8002444:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002448:	4b46      	ldr	r3, [pc, #280]	; (8002564 <checkStartMoving+0x440>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	ee07 3a90 	vmov	s15, r3
 8002450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002458:	ee17 0a90 	vmov	r0, s15
 800245c:	f7fe f840 	bl	80004e0 <__aeabi_f2d>
 8002460:	4604      	mov	r4, r0
 8002462:	460d      	mov	r5, r1
 8002464:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <checkStartMoving+0x434>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f839 	bl	80004e0 <__aeabi_f2d>
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	4b3d      	ldr	r3, [pc, #244]	; (8002568 <checkStartMoving+0x444>)
 8002474:	f7fe f88c 	bl	8000590 <__aeabi_dmul>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4690      	mov	r8, r2
 800247e:	4699      	mov	r9, r3
 8002480:	4b36      	ldr	r3, [pc, #216]	; (800255c <checkStartMoving+0x438>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe f82b 	bl	80004e0 <__aeabi_f2d>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4640      	mov	r0, r8
 8002490:	4649      	mov	r1, r9
 8002492:	f7fe f87d 	bl	8000590 <__aeabi_dmul>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4690      	mov	r8, r2
 800249c:	4699      	mov	r9, r3
 800249e:	4b2f      	ldr	r3, [pc, #188]	; (800255c <checkStartMoving+0x438>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f81c 	bl	80004e0 <__aeabi_f2d>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4640      	mov	r0, r8
 80024ae:	4649      	mov	r1, r9
 80024b0:	f7fe f86e 	bl	8000590 <__aeabi_dmul>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4690      	mov	r8, r2
 80024ba:	4699      	mov	r9, r3
 80024bc:	4b29      	ldr	r3, [pc, #164]	; (8002564 <checkStartMoving+0x440>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fd fffb 	bl	80004bc <__aeabi_i2d>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4640      	mov	r0, r8
 80024cc:	4649      	mov	r1, r9
 80024ce:	f7fe f85f 	bl	8000590 <__aeabi_dmul>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4620      	mov	r0, r4
 80024d8:	4629      	mov	r1, r5
 80024da:	f7fd fea3 	bl	8000224 <__adddf3>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	f7fe fb23 	bl	8000b30 <__aeabi_d2f>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4a1f      	ldr	r2, [pc, #124]	; (800256c <checkStartMoving+0x448>)
 80024ee:	6013      	str	r3, [r2, #0]
			q_d_acc = q_d_i + q_2d_max*t_acc*dir;
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <checkStartMoving+0x434>)
 80024f2:	ed93 7a00 	vldr	s14, [r3]
 80024f6:	4b19      	ldr	r3, [pc, #100]	; (800255c <checkStartMoving+0x438>)
 80024f8:	edd3 7a00 	vldr	s15, [r3]
 80024fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002500:	4b18      	ldr	r3, [pc, #96]	; (8002564 <checkStartMoving+0x440>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	ee07 3a90 	vmov	s15, r3
 8002508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800250c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002510:	4b13      	ldr	r3, [pc, #76]	; (8002560 <checkStartMoving+0x43c>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <checkStartMoving+0x44c>)
 800251c:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc;
 8002520:	4b0e      	ldr	r3, [pc, #56]	; (800255c <checkStartMoving+0x438>)
 8002522:	edd3 7a00 	vldr	s15, [r3]
 8002526:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800252a:	4b12      	ldr	r3, [pc, #72]	; (8002574 <checkStartMoving+0x450>)
 800252c:	edc3 7a00 	vstr	s15, [r3]
		}
		T_start = micros();
 8002530:	f7ff fcb6 	bl	8001ea0 <micros>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	490f      	ldr	r1, [pc, #60]	; (8002578 <checkStartMoving+0x454>)
 800253a:	e9c1 2300 	strd	r2, r3, [r1]
		q_f_old = q_f;
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <checkStartMoving+0x458>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a0f      	ldr	r2, [pc, #60]	; (8002580 <checkStartMoving+0x45c>)
 8002544:	6013      	str	r3, [r2, #0]
	}
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002550:	20000010 	.word	0x20000010
 8002554:	2000038c 	.word	0x2000038c
 8002558:	2000000c 	.word	0x2000000c
 800255c:	200003a0 	.word	0x200003a0
 8002560:	20000380 	.word	0x20000380
 8002564:	20000014 	.word	0x20000014
 8002568:	3fe00000 	.word	0x3fe00000
 800256c:	200003a4 	.word	0x200003a4
 8002570:	200003b0 	.word	0x200003b0
 8002574:	200003c4 	.word	0x200003c4
 8002578:	200003b8 	.word	0x200003b8
 800257c:	20000384 	.word	0x20000384
 8002580:	2000039c 	.word	0x2000039c

08002584 <createTrajectory>:

void createTrajectory(){
 8002584:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002588:	af00      	add	r7, sp, #0
	if(calmode == 1){
 800258a:	4b84      	ldr	r3, [pc, #528]	; (800279c <createTrajectory+0x218>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b01      	cmp	r3, #1
 8002590:	f040 822c 	bne.w	80029ec <createTrajectory+0x468>
		t = (float)(micros()-T_start)/1000000; //sec
 8002594:	f7ff fc84 	bl	8001ea0 <micros>
 8002598:	4b81      	ldr	r3, [pc, #516]	; (80027a0 <createTrajectory+0x21c>)
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	ebb0 0802 	subs.w	r8, r0, r2
 80025a2:	eb61 0903 	sbc.w	r9, r1, r3
 80025a6:	4640      	mov	r0, r8
 80025a8:	4649      	mov	r1, r9
 80025aa:	f7fe fbd9 	bl	8000d60 <__aeabi_ul2f>
 80025ae:	ee06 0a90 	vmov	s13, r0
 80025b2:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80027a4 <createTrajectory+0x220>
 80025b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ba:	4b7b      	ldr	r3, [pc, #492]	; (80027a8 <createTrajectory+0x224>)
 80025bc:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 80025c0:	4b79      	ldr	r3, [pc, #484]	; (80027a8 <createTrajectory+0x224>)
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ce:	f2c0 8094 	blt.w	80026fa <createTrajectory+0x176>
 80025d2:	4b75      	ldr	r3, [pc, #468]	; (80027a8 <createTrajectory+0x224>)
 80025d4:	ed93 7a00 	vldr	s14, [r3]
 80025d8:	4b74      	ldr	r3, [pc, #464]	; (80027ac <createTrajectory+0x228>)
 80025da:	edd3 7a00 	vldr	s15, [r3]
 80025de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e6:	f140 8088 	bpl.w	80026fa <createTrajectory+0x176>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 80025ea:	4b71      	ldr	r3, [pc, #452]	; (80027b0 <createTrajectory+0x22c>)
 80025ec:	ed93 7a00 	vldr	s14, [r3]
 80025f0:	4b6d      	ldr	r3, [pc, #436]	; (80027a8 <createTrajectory+0x224>)
 80025f2:	edd3 7a00 	vldr	s15, [r3]
 80025f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025fa:	4b6e      	ldr	r3, [pc, #440]	; (80027b4 <createTrajectory+0x230>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	ee07 3a90 	vmov	s15, r3
 8002602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002606:	ee27 7a27 	vmul.f32	s14, s14, s15
 800260a:	4b6b      	ldr	r3, [pc, #428]	; (80027b8 <createTrajectory+0x234>)
 800260c:	edd3 7a00 	vldr	s15, [r3]
 8002610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002614:	ee17 0a90 	vmov	r0, s15
 8002618:	f7fd ff62 	bl	80004e0 <__aeabi_f2d>
 800261c:	4604      	mov	r4, r0
 800261e:	460d      	mov	r5, r1
 8002620:	4b66      	ldr	r3, [pc, #408]	; (80027bc <createTrajectory+0x238>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7fd ff5b 	bl	80004e0 <__aeabi_f2d>
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	4b64      	ldr	r3, [pc, #400]	; (80027c0 <createTrajectory+0x23c>)
 8002630:	f7fd ffae 	bl	8000590 <__aeabi_dmul>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4690      	mov	r8, r2
 800263a:	4699      	mov	r9, r3
 800263c:	4b5a      	ldr	r3, [pc, #360]	; (80027a8 <createTrajectory+0x224>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd ff4d 	bl	80004e0 <__aeabi_f2d>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4640      	mov	r0, r8
 800264c:	4649      	mov	r1, r9
 800264e:	f7fd ff9f 	bl	8000590 <__aeabi_dmul>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4690      	mov	r8, r2
 8002658:	4699      	mov	r9, r3
 800265a:	4b53      	ldr	r3, [pc, #332]	; (80027a8 <createTrajectory+0x224>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd ff3e 	bl	80004e0 <__aeabi_f2d>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4640      	mov	r0, r8
 800266a:	4649      	mov	r1, r9
 800266c:	f7fd ff90 	bl	8000590 <__aeabi_dmul>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4690      	mov	r8, r2
 8002676:	4699      	mov	r9, r3
 8002678:	4b4e      	ldr	r3, [pc, #312]	; (80027b4 <createTrajectory+0x230>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd ff1d 	bl	80004bc <__aeabi_i2d>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4640      	mov	r0, r8
 8002688:	4649      	mov	r1, r9
 800268a:	f7fd ff81 	bl	8000590 <__aeabi_dmul>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4620      	mov	r0, r4
 8002694:	4629      	mov	r1, r5
 8002696:	f7fd fdc5 	bl	8000224 <__adddf3>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4610      	mov	r0, r2
 80026a0:	4619      	mov	r1, r3
 80026a2:	f7fe fa45 	bl	8000b30 <__aeabi_d2f>
 80026a6:	4603      	mov	r3, r0
 80026a8:	4a46      	ldr	r2, [pc, #280]	; (80027c4 <createTrajectory+0x240>)
 80026aa:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 80026ac:	4b43      	ldr	r3, [pc, #268]	; (80027bc <createTrajectory+0x238>)
 80026ae:	ed93 7a00 	vldr	s14, [r3]
 80026b2:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <createTrajectory+0x224>)
 80026b4:	edd3 7a00 	vldr	s15, [r3]
 80026b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <createTrajectory+0x230>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	ee07 3a90 	vmov	s15, r3
 80026c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026cc:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <createTrajectory+0x22c>)
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d6:	4b3c      	ldr	r3, [pc, #240]	; (80027c8 <createTrajectory+0x244>)
 80026d8:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <createTrajectory+0x230>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	ee07 3a90 	vmov	s15, r3
 80026e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026e8:	4b34      	ldr	r3, [pc, #208]	; (80027bc <createTrajectory+0x238>)
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f2:	4b36      	ldr	r3, [pc, #216]	; (80027cc <createTrajectory+0x248>)
 80026f4:	edc3 7a00 	vstr	s15, [r3]
 80026f8:	e2fd      	b.n	8002cf6 <createTrajectory+0x772>
		}
		else if((t_acc <= t) && (t < t_acc+t_const)){ //Constant Velocity Segment
 80026fa:	4b2c      	ldr	r3, [pc, #176]	; (80027ac <createTrajectory+0x228>)
 80026fc:	ed93 7a00 	vldr	s14, [r3]
 8002700:	4b29      	ldr	r3, [pc, #164]	; (80027a8 <createTrajectory+0x224>)
 8002702:	edd3 7a00 	vldr	s15, [r3]
 8002706:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800270a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270e:	d865      	bhi.n	80027dc <createTrajectory+0x258>
 8002710:	4b26      	ldr	r3, [pc, #152]	; (80027ac <createTrajectory+0x228>)
 8002712:	ed93 7a00 	vldr	s14, [r3]
 8002716:	4b2e      	ldr	r3, [pc, #184]	; (80027d0 <createTrajectory+0x24c>)
 8002718:	edd3 7a00 	vldr	s15, [r3]
 800271c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002720:	4b21      	ldr	r3, [pc, #132]	; (80027a8 <createTrajectory+0x224>)
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800272a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800272e:	dd55      	ble.n	80027dc <createTrajectory+0x258>
			ref_p = q_i + q_acc + q_d_max*(t-t_acc)*dir;
 8002730:	4b21      	ldr	r3, [pc, #132]	; (80027b8 <createTrajectory+0x234>)
 8002732:	ed93 7a00 	vldr	s14, [r3]
 8002736:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <createTrajectory+0x250>)
 8002738:	edd3 7a00 	vldr	s15, [r3]
 800273c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <createTrajectory+0x224>)
 8002742:	edd3 6a00 	vldr	s13, [r3]
 8002746:	4b19      	ldr	r3, [pc, #100]	; (80027ac <createTrajectory+0x228>)
 8002748:	edd3 7a00 	vldr	s15, [r3]
 800274c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002750:	4b21      	ldr	r3, [pc, #132]	; (80027d8 <createTrajectory+0x254>)
 8002752:	edd3 7a00 	vldr	s15, [r3]
 8002756:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800275a:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <createTrajectory+0x230>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	ee07 3a90 	vmov	s15, r3
 8002762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002766:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800276a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <createTrajectory+0x240>)
 8002770:	edc3 7a00 	vstr	s15, [r3]
			ref_v = q_d_max*dir;
 8002774:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <createTrajectory+0x230>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	ee07 3a90 	vmov	s15, r3
 800277c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002780:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <createTrajectory+0x254>)
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278a:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <createTrajectory+0x244>)
 800278c:	edc3 7a00 	vstr	s15, [r3]
			ref_a = 0;
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <createTrajectory+0x248>)
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e2ad      	b.n	8002cf6 <createTrajectory+0x772>
 800279a:	bf00      	nop
 800279c:	20000010 	.word	0x20000010
 80027a0:	200003b8 	.word	0x200003b8
 80027a4:	49742400 	.word	0x49742400
 80027a8:	200003c0 	.word	0x200003c0
 80027ac:	200003a0 	.word	0x200003a0
 80027b0:	20000380 	.word	0x20000380
 80027b4:	20000014 	.word	0x20000014
 80027b8:	20000388 	.word	0x20000388
 80027bc:	2000000c 	.word	0x2000000c
 80027c0:	3fe00000 	.word	0x3fe00000
 80027c4:	20000390 	.word	0x20000390
 80027c8:	20000394 	.word	0x20000394
 80027cc:	20000398 	.word	0x20000398
 80027d0:	200003a8 	.word	0x200003a8
 80027d4:	200003a4 	.word	0x200003a4
 80027d8:	20000008 	.word	0x20000008
		}
		else if((t_acc+t_const <= t) && (t < 2*t_acc+t_const)){ //Deceleration Segment
 80027dc:	4b76      	ldr	r3, [pc, #472]	; (80029b8 <createTrajectory+0x434>)
 80027de:	ed93 7a00 	vldr	s14, [r3]
 80027e2:	4b76      	ldr	r3, [pc, #472]	; (80029bc <createTrajectory+0x438>)
 80027e4:	edd3 7a00 	vldr	s15, [r3]
 80027e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ec:	4b74      	ldr	r3, [pc, #464]	; (80029c0 <createTrajectory+0x43c>)
 80027ee:	edd3 7a00 	vldr	s15, [r3]
 80027f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fa:	f200 80d8 	bhi.w	80029ae <createTrajectory+0x42a>
 80027fe:	4b6e      	ldr	r3, [pc, #440]	; (80029b8 <createTrajectory+0x434>)
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002808:	4b6c      	ldr	r3, [pc, #432]	; (80029bc <createTrajectory+0x438>)
 800280a:	edd3 7a00 	vldr	s15, [r3]
 800280e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002812:	4b6b      	ldr	r3, [pc, #428]	; (80029c0 <createTrajectory+0x43c>)
 8002814:	edd3 7a00 	vldr	s15, [r3]
 8002818:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800281c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002820:	f340 80c5 	ble.w	80029ae <createTrajectory+0x42a>
			ref_p = q_i + q_const + q_d_max*(t-t_acc-t_const)*dir-0.5*q_2d_max*(t-t_acc-t_const)*(t-t_acc-t_const)*dir;
 8002824:	4b67      	ldr	r3, [pc, #412]	; (80029c4 <createTrajectory+0x440>)
 8002826:	ed93 7a00 	vldr	s14, [r3]
 800282a:	4b67      	ldr	r3, [pc, #412]	; (80029c8 <createTrajectory+0x444>)
 800282c:	edd3 7a00 	vldr	s15, [r3]
 8002830:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002834:	4b62      	ldr	r3, [pc, #392]	; (80029c0 <createTrajectory+0x43c>)
 8002836:	edd3 6a00 	vldr	s13, [r3]
 800283a:	4b5f      	ldr	r3, [pc, #380]	; (80029b8 <createTrajectory+0x434>)
 800283c:	edd3 7a00 	vldr	s15, [r3]
 8002840:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002844:	4b5d      	ldr	r3, [pc, #372]	; (80029bc <createTrajectory+0x438>)
 8002846:	edd3 7a00 	vldr	s15, [r3]
 800284a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800284e:	4b5f      	ldr	r3, [pc, #380]	; (80029cc <createTrajectory+0x448>)
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002858:	4b5d      	ldr	r3, [pc, #372]	; (80029d0 <createTrajectory+0x44c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	ee07 3a90 	vmov	s15, r3
 8002860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800286c:	ee17 0a90 	vmov	r0, s15
 8002870:	f7fd fe36 	bl	80004e0 <__aeabi_f2d>
 8002874:	4604      	mov	r4, r0
 8002876:	460d      	mov	r5, r1
 8002878:	4b56      	ldr	r3, [pc, #344]	; (80029d4 <createTrajectory+0x450>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7fd fe2f 	bl	80004e0 <__aeabi_f2d>
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	4b54      	ldr	r3, [pc, #336]	; (80029d8 <createTrajectory+0x454>)
 8002888:	f7fd fe82 	bl	8000590 <__aeabi_dmul>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4690      	mov	r8, r2
 8002892:	4699      	mov	r9, r3
 8002894:	4b4a      	ldr	r3, [pc, #296]	; (80029c0 <createTrajectory+0x43c>)
 8002896:	ed93 7a00 	vldr	s14, [r3]
 800289a:	4b47      	ldr	r3, [pc, #284]	; (80029b8 <createTrajectory+0x434>)
 800289c:	edd3 7a00 	vldr	s15, [r3]
 80028a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028a4:	4b45      	ldr	r3, [pc, #276]	; (80029bc <createTrajectory+0x438>)
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ae:	ee17 0a90 	vmov	r0, s15
 80028b2:	f7fd fe15 	bl	80004e0 <__aeabi_f2d>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4640      	mov	r0, r8
 80028bc:	4649      	mov	r1, r9
 80028be:	f7fd fe67 	bl	8000590 <__aeabi_dmul>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4690      	mov	r8, r2
 80028c8:	4699      	mov	r9, r3
 80028ca:	4b3d      	ldr	r3, [pc, #244]	; (80029c0 <createTrajectory+0x43c>)
 80028cc:	ed93 7a00 	vldr	s14, [r3]
 80028d0:	4b39      	ldr	r3, [pc, #228]	; (80029b8 <createTrajectory+0x434>)
 80028d2:	edd3 7a00 	vldr	s15, [r3]
 80028d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028da:	4b38      	ldr	r3, [pc, #224]	; (80029bc <createTrajectory+0x438>)
 80028dc:	edd3 7a00 	vldr	s15, [r3]
 80028e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e4:	ee17 0a90 	vmov	r0, s15
 80028e8:	f7fd fdfa 	bl	80004e0 <__aeabi_f2d>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4640      	mov	r0, r8
 80028f2:	4649      	mov	r1, r9
 80028f4:	f7fd fe4c 	bl	8000590 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4690      	mov	r8, r2
 80028fe:	4699      	mov	r9, r3
 8002900:	4b33      	ldr	r3, [pc, #204]	; (80029d0 <createTrajectory+0x44c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd fdd9 	bl	80004bc <__aeabi_i2d>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4640      	mov	r0, r8
 8002910:	4649      	mov	r1, r9
 8002912:	f7fd fe3d 	bl	8000590 <__aeabi_dmul>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4620      	mov	r0, r4
 800291c:	4629      	mov	r1, r5
 800291e:	f7fd fc7f 	bl	8000220 <__aeabi_dsub>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4610      	mov	r0, r2
 8002928:	4619      	mov	r1, r3
 800292a:	f7fe f901 	bl	8000b30 <__aeabi_d2f>
 800292e:	4603      	mov	r3, r0
 8002930:	4a2a      	ldr	r2, [pc, #168]	; (80029dc <createTrajectory+0x458>)
 8002932:	6013      	str	r3, [r2, #0]
			ref_v = -q_2d_max*(t-t_acc-t_const)*dir + q_d_max*dir;
 8002934:	4b27      	ldr	r3, [pc, #156]	; (80029d4 <createTrajectory+0x450>)
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	eeb1 7a67 	vneg.f32	s14, s15
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <createTrajectory+0x43c>)
 8002940:	edd3 6a00 	vldr	s13, [r3]
 8002944:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <createTrajectory+0x434>)
 8002946:	edd3 7a00 	vldr	s15, [r3]
 800294a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800294e:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <createTrajectory+0x438>)
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002958:	ee27 7a27 	vmul.f32	s14, s14, s15
 800295c:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <createTrajectory+0x44c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	ee07 3a90 	vmov	s15, r3
 8002964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002968:	ee27 7a27 	vmul.f32	s14, s14, s15
 800296c:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <createTrajectory+0x44c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	ee07 3a90 	vmov	s15, r3
 8002974:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002978:	4b14      	ldr	r3, [pc, #80]	; (80029cc <createTrajectory+0x448>)
 800297a:	edd3 7a00 	vldr	s15, [r3]
 800297e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002986:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <createTrajectory+0x45c>)
 8002988:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <createTrajectory+0x450>)
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	eeb1 7a67 	vneg.f32	s14, s15
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <createTrajectory+0x44c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	ee07 3a90 	vmov	s15, r3
 800299e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a6:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <createTrajectory+0x460>)
 80029a8:	edc3 7a00 	vstr	s15, [r3]
 80029ac:	e1a3      	b.n	8002cf6 <createTrajectory+0x772>
		}
		else{
			calmode = 3;
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <createTrajectory+0x464>)
 80029b0:	2203      	movs	r2, #3
 80029b2:	701a      	strb	r2, [r3, #0]
	else if(calmode == 3){ //stop
		ref_p = q_f;
		ref_v = 0;
		ref_a = 0;
	}
}
 80029b4:	e19f      	b.n	8002cf6 <createTrajectory+0x772>
 80029b6:	bf00      	nop
 80029b8:	200003a0 	.word	0x200003a0
 80029bc:	200003a8 	.word	0x200003a8
 80029c0:	200003c0 	.word	0x200003c0
 80029c4:	20000388 	.word	0x20000388
 80029c8:	200003ac 	.word	0x200003ac
 80029cc:	20000008 	.word	0x20000008
 80029d0:	20000014 	.word	0x20000014
 80029d4:	2000000c 	.word	0x2000000c
 80029d8:	3fe00000 	.word	0x3fe00000
 80029dc:	20000390 	.word	0x20000390
 80029e0:	20000394 	.word	0x20000394
 80029e4:	20000398 	.word	0x20000398
 80029e8:	20000010 	.word	0x20000010
	else if(calmode == 2){
 80029ec:	4bc3      	ldr	r3, [pc, #780]	; (8002cfc <createTrajectory+0x778>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	f040 816f 	bne.w	8002cd4 <createTrajectory+0x750>
		t = (float)(micros()-T_start)/1000000; //sec
 80029f6:	f7ff fa53 	bl	8001ea0 <micros>
 80029fa:	4bc1      	ldr	r3, [pc, #772]	; (8002d00 <createTrajectory+0x77c>)
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	1a84      	subs	r4, r0, r2
 8002a02:	eb61 0503 	sbc.w	r5, r1, r3
 8002a06:	4620      	mov	r0, r4
 8002a08:	4629      	mov	r1, r5
 8002a0a:	f7fe f9a9 	bl	8000d60 <__aeabi_ul2f>
 8002a0e:	ee06 0a90 	vmov	s13, r0
 8002a12:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8002d04 <createTrajectory+0x780>
 8002a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a1a:	4bbb      	ldr	r3, [pc, #748]	; (8002d08 <createTrajectory+0x784>)
 8002a1c:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 8002a20:	4bb9      	ldr	r3, [pc, #740]	; (8002d08 <createTrajectory+0x784>)
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2e:	f2c0 8094 	blt.w	8002b5a <createTrajectory+0x5d6>
 8002a32:	4bb5      	ldr	r3, [pc, #724]	; (8002d08 <createTrajectory+0x784>)
 8002a34:	ed93 7a00 	vldr	s14, [r3]
 8002a38:	4bb4      	ldr	r3, [pc, #720]	; (8002d0c <createTrajectory+0x788>)
 8002a3a:	edd3 7a00 	vldr	s15, [r3]
 8002a3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a46:	f140 8088 	bpl.w	8002b5a <createTrajectory+0x5d6>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 8002a4a:	4bb1      	ldr	r3, [pc, #708]	; (8002d10 <createTrajectory+0x78c>)
 8002a4c:	ed93 7a00 	vldr	s14, [r3]
 8002a50:	4bad      	ldr	r3, [pc, #692]	; (8002d08 <createTrajectory+0x784>)
 8002a52:	edd3 7a00 	vldr	s15, [r3]
 8002a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a5a:	4bae      	ldr	r3, [pc, #696]	; (8002d14 <createTrajectory+0x790>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	ee07 3a90 	vmov	s15, r3
 8002a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a6a:	4bab      	ldr	r3, [pc, #684]	; (8002d18 <createTrajectory+0x794>)
 8002a6c:	edd3 7a00 	vldr	s15, [r3]
 8002a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a74:	ee17 0a90 	vmov	r0, s15
 8002a78:	f7fd fd32 	bl	80004e0 <__aeabi_f2d>
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	460d      	mov	r5, r1
 8002a80:	4ba6      	ldr	r3, [pc, #664]	; (8002d1c <createTrajectory+0x798>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fd2b 	bl	80004e0 <__aeabi_f2d>
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	4ba4      	ldr	r3, [pc, #656]	; (8002d20 <createTrajectory+0x79c>)
 8002a90:	f7fd fd7e 	bl	8000590 <__aeabi_dmul>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4690      	mov	r8, r2
 8002a9a:	4699      	mov	r9, r3
 8002a9c:	4b9a      	ldr	r3, [pc, #616]	; (8002d08 <createTrajectory+0x784>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fd1d 	bl	80004e0 <__aeabi_f2d>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4640      	mov	r0, r8
 8002aac:	4649      	mov	r1, r9
 8002aae:	f7fd fd6f 	bl	8000590 <__aeabi_dmul>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4690      	mov	r8, r2
 8002ab8:	4699      	mov	r9, r3
 8002aba:	4b93      	ldr	r3, [pc, #588]	; (8002d08 <createTrajectory+0x784>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fd fd0e 	bl	80004e0 <__aeabi_f2d>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4640      	mov	r0, r8
 8002aca:	4649      	mov	r1, r9
 8002acc:	f7fd fd60 	bl	8000590 <__aeabi_dmul>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4690      	mov	r8, r2
 8002ad6:	4699      	mov	r9, r3
 8002ad8:	4b8e      	ldr	r3, [pc, #568]	; (8002d14 <createTrajectory+0x790>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fced 	bl	80004bc <__aeabi_i2d>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4640      	mov	r0, r8
 8002ae8:	4649      	mov	r1, r9
 8002aea:	f7fd fd51 	bl	8000590 <__aeabi_dmul>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4620      	mov	r0, r4
 8002af4:	4629      	mov	r1, r5
 8002af6:	f7fd fb95 	bl	8000224 <__adddf3>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4610      	mov	r0, r2
 8002b00:	4619      	mov	r1, r3
 8002b02:	f7fe f815 	bl	8000b30 <__aeabi_d2f>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4a86      	ldr	r2, [pc, #536]	; (8002d24 <createTrajectory+0x7a0>)
 8002b0a:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 8002b0c:	4b83      	ldr	r3, [pc, #524]	; (8002d1c <createTrajectory+0x798>)
 8002b0e:	ed93 7a00 	vldr	s14, [r3]
 8002b12:	4b7d      	ldr	r3, [pc, #500]	; (8002d08 <createTrajectory+0x784>)
 8002b14:	edd3 7a00 	vldr	s15, [r3]
 8002b18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b1c:	4b7d      	ldr	r3, [pc, #500]	; (8002d14 <createTrajectory+0x790>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	ee07 3a90 	vmov	s15, r3
 8002b24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b2c:	4b78      	ldr	r3, [pc, #480]	; (8002d10 <createTrajectory+0x78c>)
 8002b2e:	edd3 7a00 	vldr	s15, [r3]
 8002b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b36:	4b7c      	ldr	r3, [pc, #496]	; (8002d28 <createTrajectory+0x7a4>)
 8002b38:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 8002b3c:	4b75      	ldr	r3, [pc, #468]	; (8002d14 <createTrajectory+0x790>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	ee07 3a90 	vmov	s15, r3
 8002b44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b48:	4b74      	ldr	r3, [pc, #464]	; (8002d1c <createTrajectory+0x798>)
 8002b4a:	edd3 7a00 	vldr	s15, [r3]
 8002b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b52:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <createTrajectory+0x7a8>)
 8002b54:	edc3 7a00 	vstr	s15, [r3]
 8002b58:	e0cd      	b.n	8002cf6 <createTrajectory+0x772>
		else if((t_acc <= t) && (t < t_acc*2)){
 8002b5a:	4b6c      	ldr	r3, [pc, #432]	; (8002d0c <createTrajectory+0x788>)
 8002b5c:	ed93 7a00 	vldr	s14, [r3]
 8002b60:	4b69      	ldr	r3, [pc, #420]	; (8002d08 <createTrajectory+0x784>)
 8002b62:	edd3 7a00 	vldr	s15, [r3]
 8002b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6e:	f200 80ad 	bhi.w	8002ccc <createTrajectory+0x748>
 8002b72:	4b66      	ldr	r3, [pc, #408]	; (8002d0c <createTrajectory+0x788>)
 8002b74:	edd3 7a00 	vldr	s15, [r3]
 8002b78:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002b7c:	4b62      	ldr	r3, [pc, #392]	; (8002d08 <createTrajectory+0x784>)
 8002b7e:	edd3 7a00 	vldr	s15, [r3]
 8002b82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8a:	f340 809f 	ble.w	8002ccc <createTrajectory+0x748>
			ref_p = q_i + q_acc + q_d_acc*(t-t_acc) - 0.5*q_2d_max*(t-t_acc)*(t-t_acc)*dir;
 8002b8e:	4b62      	ldr	r3, [pc, #392]	; (8002d18 <createTrajectory+0x794>)
 8002b90:	ed93 7a00 	vldr	s14, [r3]
 8002b94:	4b66      	ldr	r3, [pc, #408]	; (8002d30 <createTrajectory+0x7ac>)
 8002b96:	edd3 7a00 	vldr	s15, [r3]
 8002b9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b9e:	4b5a      	ldr	r3, [pc, #360]	; (8002d08 <createTrajectory+0x784>)
 8002ba0:	edd3 6a00 	vldr	s13, [r3]
 8002ba4:	4b59      	ldr	r3, [pc, #356]	; (8002d0c <createTrajectory+0x788>)
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002bae:	4b61      	ldr	r3, [pc, #388]	; (8002d34 <createTrajectory+0x7b0>)
 8002bb0:	edd3 7a00 	vldr	s15, [r3]
 8002bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bbc:	ee17 0a90 	vmov	r0, s15
 8002bc0:	f7fd fc8e 	bl	80004e0 <__aeabi_f2d>
 8002bc4:	4604      	mov	r4, r0
 8002bc6:	460d      	mov	r5, r1
 8002bc8:	4b54      	ldr	r3, [pc, #336]	; (8002d1c <createTrajectory+0x798>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fc87 	bl	80004e0 <__aeabi_f2d>
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	4b52      	ldr	r3, [pc, #328]	; (8002d20 <createTrajectory+0x79c>)
 8002bd8:	f7fd fcda 	bl	8000590 <__aeabi_dmul>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4690      	mov	r8, r2
 8002be2:	4699      	mov	r9, r3
 8002be4:	4b48      	ldr	r3, [pc, #288]	; (8002d08 <createTrajectory+0x784>)
 8002be6:	ed93 7a00 	vldr	s14, [r3]
 8002bea:	4b48      	ldr	r3, [pc, #288]	; (8002d0c <createTrajectory+0x788>)
 8002bec:	edd3 7a00 	vldr	s15, [r3]
 8002bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bf4:	ee17 0a90 	vmov	r0, s15
 8002bf8:	f7fd fc72 	bl	80004e0 <__aeabi_f2d>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4640      	mov	r0, r8
 8002c02:	4649      	mov	r1, r9
 8002c04:	f7fd fcc4 	bl	8000590 <__aeabi_dmul>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4690      	mov	r8, r2
 8002c0e:	4699      	mov	r9, r3
 8002c10:	4b3d      	ldr	r3, [pc, #244]	; (8002d08 <createTrajectory+0x784>)
 8002c12:	ed93 7a00 	vldr	s14, [r3]
 8002c16:	4b3d      	ldr	r3, [pc, #244]	; (8002d0c <createTrajectory+0x788>)
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c20:	ee17 0a90 	vmov	r0, s15
 8002c24:	f7fd fc5c 	bl	80004e0 <__aeabi_f2d>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4640      	mov	r0, r8
 8002c2e:	4649      	mov	r1, r9
 8002c30:	f7fd fcae 	bl	8000590 <__aeabi_dmul>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4690      	mov	r8, r2
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	4b35      	ldr	r3, [pc, #212]	; (8002d14 <createTrajectory+0x790>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fd fc3b 	bl	80004bc <__aeabi_i2d>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4640      	mov	r0, r8
 8002c4c:	4649      	mov	r1, r9
 8002c4e:	f7fd fc9f 	bl	8000590 <__aeabi_dmul>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4620      	mov	r0, r4
 8002c58:	4629      	mov	r1, r5
 8002c5a:	f7fd fae1 	bl	8000220 <__aeabi_dsub>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4610      	mov	r0, r2
 8002c64:	4619      	mov	r1, r3
 8002c66:	f7fd ff63 	bl	8000b30 <__aeabi_d2f>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4a2d      	ldr	r2, [pc, #180]	; (8002d24 <createTrajectory+0x7a0>)
 8002c6e:	6013      	str	r3, [r2, #0]
			ref_v = q_d_acc - q_2d_max*(t-t_acc)*dir;
 8002c70:	4b30      	ldr	r3, [pc, #192]	; (8002d34 <createTrajectory+0x7b0>)
 8002c72:	ed93 7a00 	vldr	s14, [r3]
 8002c76:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <createTrajectory+0x784>)
 8002c78:	edd3 6a00 	vldr	s13, [r3]
 8002c7c:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <createTrajectory+0x788>)
 8002c7e:	edd3 7a00 	vldr	s15, [r3]
 8002c82:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c86:	4b25      	ldr	r3, [pc, #148]	; (8002d1c <createTrajectory+0x798>)
 8002c88:	edd3 7a00 	vldr	s15, [r3]
 8002c8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c90:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <createTrajectory+0x790>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	ee07 3a90 	vmov	s15, r3
 8002c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca4:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <createTrajectory+0x7a4>)
 8002ca6:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 8002caa:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <createTrajectory+0x798>)
 8002cac:	edd3 7a00 	vldr	s15, [r3]
 8002cb0:	eeb1 7a67 	vneg.f32	s14, s15
 8002cb4:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <createTrajectory+0x790>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	ee07 3a90 	vmov	s15, r3
 8002cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc4:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <createTrajectory+0x7a8>)
 8002cc6:	edc3 7a00 	vstr	s15, [r3]
 8002cca:	e014      	b.n	8002cf6 <createTrajectory+0x772>
			calmode = 3;
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <createTrajectory+0x778>)
 8002cce:	2203      	movs	r2, #3
 8002cd0:	701a      	strb	r2, [r3, #0]
}
 8002cd2:	e010      	b.n	8002cf6 <createTrajectory+0x772>
	else if(calmode == 3){ //stop
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <createTrajectory+0x778>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d10c      	bne.n	8002cf6 <createTrajectory+0x772>
		ref_p = q_f;
 8002cdc:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <createTrajectory+0x7b4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a10      	ldr	r2, [pc, #64]	; (8002d24 <createTrajectory+0x7a0>)
 8002ce2:	6013      	str	r3, [r2, #0]
		ref_v = 0;
 8002ce4:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <createTrajectory+0x7a4>)
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
		ref_a = 0;
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <createTrajectory+0x7a8>)
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
}
 8002cf4:	e7ff      	b.n	8002cf6 <createTrajectory+0x772>
 8002cf6:	bf00      	nop
 8002cf8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002cfc:	20000010 	.word	0x20000010
 8002d00:	200003b8 	.word	0x200003b8
 8002d04:	49742400 	.word	0x49742400
 8002d08:	200003c0 	.word	0x200003c0
 8002d0c:	200003a0 	.word	0x200003a0
 8002d10:	20000380 	.word	0x20000380
 8002d14:	20000014 	.word	0x20000014
 8002d18:	20000388 	.word	0x20000388
 8002d1c:	2000000c 	.word	0x2000000c
 8002d20:	3fe00000 	.word	0x3fe00000
 8002d24:	20000390 	.word	0x20000390
 8002d28:	20000394 	.word	0x20000394
 8002d2c:	20000398 	.word	0x20000398
 8002d30:	200003a4 	.word	0x200003a4
 8002d34:	200003b0 	.word	0x200003b0
 8002d38:	20000384 	.word	0x20000384
 8002d3c:	00000000 	.word	0x00000000

08002d40 <DriveMotor>:

//--------------------------Drive Motor----------------//

void DriveMotor(){
 8002d40:	b598      	push	{r3, r4, r7, lr}
 8002d42:	af00      	add	r7, sp, #0
	//PWM Motor
	duty_cycle = (fabs(Vin)*100)/24;
 8002d44:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <DriveMotor+0xa0>)
 8002d46:	edd3 7a00 	vldr	s15, [r3]
 8002d4a:	eef0 7ae7 	vabs.f32	s15, s15
 8002d4e:	ee17 0a90 	vmov	r0, s15
 8002d52:	f7fd fbc5 	bl	80004e0 <__aeabi_f2d>
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	4b22      	ldr	r3, [pc, #136]	; (8002de4 <DriveMotor+0xa4>)
 8002d5c:	f7fd fc18 	bl	8000590 <__aeabi_dmul>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <DriveMotor+0xa8>)
 8002d6e:	f7fd fd39 	bl	80007e4 <__aeabi_ddiv>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4610      	mov	r0, r2
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f7fd fed9 	bl	8000b30 <__aeabi_d2f>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4a1a      	ldr	r2, [pc, #104]	; (8002dec <DriveMotor+0xac>)
 8002d82:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycle*9.99);
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <DriveMotor+0xac>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fba9 	bl	80004e0 <__aeabi_f2d>
 8002d8e:	a312      	add	r3, pc, #72	; (adr r3, 8002dd8 <DriveMotor+0x98>)
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	f7fd fbfc 	bl	8000590 <__aeabi_dmul>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4914      	ldr	r1, [pc, #80]	; (8002df0 <DriveMotor+0xb0>)
 8002d9e:	680c      	ldr	r4, [r1, #0]
 8002da0:	4610      	mov	r0, r2
 8002da2:	4619      	mov	r1, r3
 8002da4:	f7fd fea4 	bl	8000af0 <__aeabi_d2uiz>
 8002da8:	4603      	mov	r3, r0
 8002daa:	6363      	str	r3, [r4, #52]	; 0x34

	//Control Motor Direction
	if(Vin < 0){
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <DriveMotor+0xa0>)
 8002dae:	edd3 7a00 	vldr	s15, [r3]
 8002db2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dba:	d505      	bpl.n	8002dc8 <DriveMotor+0x88>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	2120      	movs	r1, #32
 8002dc0:	480c      	ldr	r0, [pc, #48]	; (8002df4 <DriveMotor+0xb4>)
 8002dc2:	f002 fcef 	bl	80057a4 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
	}
}
 8002dc6:	e004      	b.n	8002dd2 <DriveMotor+0x92>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 8002dc8:	2200      	movs	r2, #0
 8002dca:	2120      	movs	r1, #32
 8002dcc:	4809      	ldr	r0, [pc, #36]	; (8002df4 <DriveMotor+0xb4>)
 8002dce:	f002 fce9 	bl	80057a4 <HAL_GPIO_WritePin>
}
 8002dd2:	bf00      	nop
 8002dd4:	bd98      	pop	{r3, r4, r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	47ae147b 	.word	0x47ae147b
 8002ddc:	4023fae1 	.word	0x4023fae1
 8002de0:	2000037c 	.word	0x2000037c
 8002de4:	40590000 	.word	0x40590000
 8002de8:	40380000 	.word	0x40380000
 8002dec:	20000004 	.word	0x20000004
 8002df0:	20000250 	.word	0x20000250
 8002df4:	48000800 	.word	0x48000800

08002df8 <SoftwareLimit>:

void SoftwareLimit(){
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
	if(S_top == 1 && Vin >= -2){
 8002dfc:	4b26      	ldr	r3, [pc, #152]	; (8002e98 <SoftwareLimit+0xa0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d10e      	bne.n	8002e22 <SoftwareLimit+0x2a>
 8002e04:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <SoftwareLimit+0xa4>)
 8002e06:	edd3 7a00 	vldr	s15, [r3]
 8002e0a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e16:	db04      	blt.n	8002e22 <SoftwareLimit+0x2a>
		Vin = 0;
 8002e18:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <SoftwareLimit+0xa4>)
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	e010      	b.n	8002e44 <SoftwareLimit+0x4c>
	}
	else if(S_top == 1 && Vin < -2){
 8002e22:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <SoftwareLimit+0xa0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d10c      	bne.n	8002e44 <SoftwareLimit+0x4c>
 8002e2a:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <SoftwareLimit+0xa4>)
 8002e2c:	edd3 7a00 	vldr	s15, [r3]
 8002e30:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e3c:	d502      	bpl.n	8002e44 <SoftwareLimit+0x4c>
		S_top = 0;
 8002e3e:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <SoftwareLimit+0xa0>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
	}

	if(S_down == 1 && Vin <= 2){
 8002e44:	4b16      	ldr	r3, [pc, #88]	; (8002ea0 <SoftwareLimit+0xa8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d10e      	bne.n	8002e6a <SoftwareLimit+0x72>
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <SoftwareLimit+0xa4>)
 8002e4e:	edd3 7a00 	vldr	s15, [r3]
 8002e52:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5e:	d804      	bhi.n	8002e6a <SoftwareLimit+0x72>
		Vin = 0;
 8002e60:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <SoftwareLimit+0xa4>)
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
	}
	else if(S_down == 1 && Vin > 2){
		S_down = 0;
	}

}
 8002e68:	e011      	b.n	8002e8e <SoftwareLimit+0x96>
	else if(S_down == 1 && Vin > 2){
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <SoftwareLimit+0xa8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d10d      	bne.n	8002e8e <SoftwareLimit+0x96>
 8002e72:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <SoftwareLimit+0xa4>)
 8002e74:	edd3 7a00 	vldr	s15, [r3]
 8002e78:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e84:	dc00      	bgt.n	8002e88 <SoftwareLimit+0x90>
}
 8002e86:	e002      	b.n	8002e8e <SoftwareLimit+0x96>
		S_down = 0;
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <SoftwareLimit+0xa8>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
}
 8002e8e:	bf00      	nop
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	20000420 	.word	0x20000420
 8002e9c:	2000037c 	.word	0x2000037c
 8002ea0:	20000424 	.word	0x20000424

08002ea4 <JoystickInput>:


//-----------------------Joy--------------------------//

void JoystickInput(){
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
	//Control by joy
	Vin = (float)(ADCBuffer[1]-1850)*24/2048; //0->24V
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <JoystickInput+0x34>)
 8002eaa:	885b      	ldrh	r3, [r3, #2]
 8002eac:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 8002eb0:	ee07 3a90 	vmov	s15, r3
 8002eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eb8:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8002ebc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ec0:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002edc <JoystickInput+0x38>
 8002ec4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <JoystickInput+0x3c>)
 8002eca:	edc3 7a00 	vstr	s15, [r3]
}
 8002ece:	bf00      	nop
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	20000370 	.word	0x20000370
 8002edc:	45000000 	.word	0x45000000
 8002ee0:	2000037c 	.word	0x2000037c

08002ee4 <button_up_down_input>:

void button_up_down_input(){
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
	//check button up
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 1){
 8002ee8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002eec:	4832      	ldr	r0, [pc, #200]	; (8002fb8 <button_up_down_input+0xd4>)
 8002eee:	f002 fc41 	bl	8005774 <HAL_GPIO_ReadPin>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d110      	bne.n	8002f1a <button_up_down_input+0x36>
		set_manual_point = QEIdata.linearPos + 10; //stem 10 mm
 8002ef8:	4b30      	ldr	r3, [pc, #192]	; (8002fbc <button_up_down_input+0xd8>)
 8002efa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002efe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f06:	4b2e      	ldr	r3, [pc, #184]	; (8002fc0 <button_up_down_input+0xdc>)
 8002f08:	edc3 7a00 	vstr	s15, [r3]
		check_up = 1;
 8002f0c:	4b2d      	ldr	r3, [pc, #180]	; (8002fc4 <button_up_down_input+0xe0>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
		B_up = 1;
 8002f12:	4b2d      	ldr	r3, [pc, #180]	; (8002fc8 <button_up_down_input+0xe4>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
 8002f18:	e002      	b.n	8002f20 <button_up_down_input+0x3c>
	}
	else{
		B_up = 0;
 8002f1a:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <button_up_down_input+0xe4>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
	}
	if(QEIdata.linearPos < set_manual_point && check_up == 1){
 8002f20:	4b26      	ldr	r3, [pc, #152]	; (8002fbc <button_up_down_input+0xd8>)
 8002f22:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002f26:	4b26      	ldr	r3, [pc, #152]	; (8002fc0 <button_up_down_input+0xdc>)
 8002f28:	edd3 7a00 	vldr	s15, [r3]
 8002f2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f34:	d507      	bpl.n	8002f46 <button_up_down_input+0x62>
 8002f36:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <button_up_down_input+0xe0>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d103      	bne.n	8002f46 <button_up_down_input+0x62>
		Vin = 4.5;
 8002f3e:	4b23      	ldr	r3, [pc, #140]	; (8002fcc <button_up_down_input+0xe8>)
 8002f40:	4a23      	ldr	r2, [pc, #140]	; (8002fd0 <button_up_down_input+0xec>)
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	e002      	b.n	8002f4c <button_up_down_input+0x68>
	}
	else{
		check_up = 0;
 8002f46:	4b1f      	ldr	r3, [pc, #124]	; (8002fc4 <button_up_down_input+0xe0>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
	}

	//check button down
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == 1){
 8002f4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f50:	4819      	ldr	r0, [pc, #100]	; (8002fb8 <button_up_down_input+0xd4>)
 8002f52:	f002 fc0f 	bl	8005774 <HAL_GPIO_ReadPin>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d110      	bne.n	8002f7e <button_up_down_input+0x9a>
		set_manual_point = QEIdata.linearPos - 10;
 8002f5c:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <button_up_down_input+0xd8>)
 8002f5e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002f62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f6a:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <button_up_down_input+0xdc>)
 8002f6c:	edc3 7a00 	vstr	s15, [r3]
		check_down = 1;
 8002f70:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <button_up_down_input+0xf0>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	701a      	strb	r2, [r3, #0]
		B_down = 1;
 8002f76:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <button_up_down_input+0xf4>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	701a      	strb	r2, [r3, #0]
 8002f7c:	e002      	b.n	8002f84 <button_up_down_input+0xa0>
	}
	else{
		B_down = 0;
 8002f7e:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <button_up_down_input+0xf4>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
	}
	if(QEIdata.linearPos > set_manual_point && check_down == 1){
 8002f84:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <button_up_down_input+0xd8>)
 8002f86:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <button_up_down_input+0xdc>)
 8002f8c:	edd3 7a00 	vldr	s15, [r3]
 8002f90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f98:	dd07      	ble.n	8002faa <button_up_down_input+0xc6>
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <button_up_down_input+0xf0>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d103      	bne.n	8002faa <button_up_down_input+0xc6>
		Vin = -3.5;
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <button_up_down_input+0xe8>)
 8002fa4:	4a0d      	ldr	r2, [pc, #52]	; (8002fdc <button_up_down_input+0xf8>)
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e003      	b.n	8002fb2 <button_up_down_input+0xce>
	}
	else{
		check_down = 0;
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <button_up_down_input+0xf0>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
	}
}
 8002fb0:	bf00      	nop
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	48000800 	.word	0x48000800
 8002fbc:	20000338 	.word	0x20000338
 8002fc0:	20000374 	.word	0x20000374
 8002fc4:	20000378 	.word	0x20000378
 8002fc8:	200003c8 	.word	0x200003c8
 8002fcc:	2000037c 	.word	0x2000037c
 8002fd0:	40900000 	.word	0x40900000
 8002fd4:	20000379 	.word	0x20000379
 8002fd8:	200003c9 	.word	0x200003c9
 8002fdc:	c0600000 	.word	0xc0600000

08002fe0 <button_reset_input>:

void button_reset_input(){
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
	//check button reset
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1){
 8002fe4:	2104      	movs	r1, #4
 8002fe6:	4821      	ldr	r0, [pc, #132]	; (800306c <button_reset_input+0x8c>)
 8002fe8:	f002 fbc4 	bl	8005774 <HAL_GPIO_ReadPin>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d136      	bne.n	8003060 <button_reset_input+0x80>
		B_reset = 1;
 8002ff2:	4b1f      	ldr	r3, [pc, #124]	; (8003070 <button_reset_input+0x90>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 8002ff8:	e006      	b.n	8003008 <button_reset_input+0x28>
			Vin = -3.5;
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <button_reset_input+0x94>)
 8002ffc:	4a1e      	ldr	r2, [pc, #120]	; (8003078 <button_reset_input+0x98>)
 8002ffe:	601a      	str	r2, [r3, #0]
			//software limit
			SoftwareLimit();
 8003000:	f7ff fefa 	bl	8002df8 <SoftwareLimit>
			//Drive Motor which PWM
			DriveMotor();
 8003004:	f7ff fe9c 	bl	8002d40 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 8003008:	f44f 7100 	mov.w	r1, #512	; 0x200
 800300c:	481b      	ldr	r0, [pc, #108]	; (800307c <button_reset_input+0x9c>)
 800300e:	f002 fbb1 	bl	8005774 <HAL_GPIO_ReadPin>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <button_reset_input+0x1a>
		}

		Vin = 2.1;
 8003018:	4b16      	ldr	r3, [pc, #88]	; (8003074 <button_reset_input+0x94>)
 800301a:	4a19      	ldr	r2, [pc, #100]	; (8003080 <button_reset_input+0xa0>)
 800301c:	601a      	str	r2, [r3, #0]
		SoftwareLimit();
 800301e:	f7ff feeb 	bl	8002df8 <SoftwareLimit>
		DriveMotor();
 8003022:	f7ff fe8d 	bl	8002d40 <DriveMotor>
		HAL_Delay(500);
 8003026:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800302a:	f000 fb19 	bl	8003660 <HAL_Delay>

		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 800302e:	e006      	b.n	800303e <button_reset_input+0x5e>
			Vin = -1.1;
 8003030:	4b10      	ldr	r3, [pc, #64]	; (8003074 <button_reset_input+0x94>)
 8003032:	4a14      	ldr	r2, [pc, #80]	; (8003084 <button_reset_input+0xa4>)
 8003034:	601a      	str	r2, [r3, #0]
			//software limit
			SoftwareLimit();
 8003036:	f7ff fedf 	bl	8002df8 <SoftwareLimit>
			//Drive Motor which PWM
			DriveMotor();
 800303a:	f7ff fe81 	bl	8002d40 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 800303e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003042:	480e      	ldr	r0, [pc, #56]	; (800307c <button_reset_input+0x9c>)
 8003044:	f002 fb96 	bl	8005774 <HAL_GPIO_ReadPin>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <button_reset_input+0x50>
		}
		Vin = 0;
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <button_reset_input+0x94>)
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim2, 0); //set position to 0
 8003056:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <button_reset_input+0xa8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2200      	movs	r2, #0
 800305c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	else{
		B_reset = 0;
	}
}
 800305e:	e002      	b.n	8003066 <button_reset_input+0x86>
		B_reset = 0;
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <button_reset_input+0x90>)
 8003062:	2200      	movs	r2, #0
 8003064:	701a      	strb	r2, [r3, #0]
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	48000c00 	.word	0x48000c00
 8003070:	200003ca 	.word	0x200003ca
 8003074:	2000037c 	.word	0x2000037c
 8003078:	c0600000 	.word	0xc0600000
 800307c:	48000400 	.word	0x48000400
 8003080:	40066666 	.word	0x40066666
 8003084:	bf8ccccd 	.word	0xbf8ccccd
 8003088:	20000204 	.word	0x20000204

0800308c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003090:	b672      	cpsid	i
}
 8003092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003094:	e7fe      	b.n	8003094 <Error_Handler+0x8>
	...

08003098 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309e:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <HAL_MspInit+0x44>)
 80030a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a2:	4a0e      	ldr	r2, [pc, #56]	; (80030dc <HAL_MspInit+0x44>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	6613      	str	r3, [r2, #96]	; 0x60
 80030aa:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <HAL_MspInit+0x44>)
 80030ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <HAL_MspInit+0x44>)
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	4a08      	ldr	r2, [pc, #32]	; (80030dc <HAL_MspInit+0x44>)
 80030bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c0:	6593      	str	r3, [r2, #88]	; 0x58
 80030c2:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_MspInit+0x44>)
 80030c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80030ce:	f002 fc3d 	bl	800594c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000

080030e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b0a0      	sub	sp, #128	; 0x80
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030f8:	f107 0318 	add.w	r3, r7, #24
 80030fc:	2254      	movs	r2, #84	; 0x54
 80030fe:	2100      	movs	r1, #0
 8003100:	4618      	mov	r0, r3
 8003102:	f005 ff59 	bl	8008fb8 <memset>
  if(hadc->Instance==ADC1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800310e:	d178      	bne.n	8003202 <HAL_ADC_MspInit+0x122>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003114:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003116:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800311a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800311c:	f107 0318 	add.w	r3, r7, #24
 8003120:	4618      	mov	r0, r3
 8003122:	f003 f951 	bl	80063c8 <HAL_RCCEx_PeriphCLKConfig>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800312c:	f7ff ffae 	bl	800308c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003130:	4b36      	ldr	r3, [pc, #216]	; (800320c <HAL_ADC_MspInit+0x12c>)
 8003132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003134:	4a35      	ldr	r2, [pc, #212]	; (800320c <HAL_ADC_MspInit+0x12c>)
 8003136:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800313a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800313c:	4b33      	ldr	r3, [pc, #204]	; (800320c <HAL_ADC_MspInit+0x12c>)
 800313e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003148:	4b30      	ldr	r3, [pc, #192]	; (800320c <HAL_ADC_MspInit+0x12c>)
 800314a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314c:	4a2f      	ldr	r2, [pc, #188]	; (800320c <HAL_ADC_MspInit+0x12c>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003154:	4b2d      	ldr	r3, [pc, #180]	; (800320c <HAL_ADC_MspInit+0x12c>)
 8003156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003160:	4b2a      	ldr	r3, [pc, #168]	; (800320c <HAL_ADC_MspInit+0x12c>)
 8003162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003164:	4a29      	ldr	r2, [pc, #164]	; (800320c <HAL_ADC_MspInit+0x12c>)
 8003166:	f043 0302 	orr.w	r3, r3, #2
 800316a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800316c:	4b27      	ldr	r3, [pc, #156]	; (800320c <HAL_ADC_MspInit+0x12c>)
 800316e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003178:	2301      	movs	r3, #1
 800317a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800317c:	2303      	movs	r3, #3
 800317e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003184:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003188:	4619      	mov	r1, r3
 800318a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800318e:	f002 f96f 	bl	8005470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003192:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003196:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003198:	2303      	movs	r3, #3
 800319a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	2300      	movs	r3, #0
 800319e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80031a4:	4619      	mov	r1, r3
 80031a6:	481a      	ldr	r0, [pc, #104]	; (8003210 <HAL_ADC_MspInit+0x130>)
 80031a8:	f002 f962 	bl	8005470 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80031ac:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_ADC_MspInit+0x134>)
 80031ae:	4a1a      	ldr	r2, [pc, #104]	; (8003218 <HAL_ADC_MspInit+0x138>)
 80031b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80031b2:	4b18      	ldr	r3, [pc, #96]	; (8003214 <HAL_ADC_MspInit+0x134>)
 80031b4:	2205      	movs	r2, #5
 80031b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031b8:	4b16      	ldr	r3, [pc, #88]	; (8003214 <HAL_ADC_MspInit+0x134>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031be:	4b15      	ldr	r3, [pc, #84]	; (8003214 <HAL_ADC_MspInit+0x134>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80031c4:	4b13      	ldr	r3, [pc, #76]	; (8003214 <HAL_ADC_MspInit+0x134>)
 80031c6:	2280      	movs	r2, #128	; 0x80
 80031c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <HAL_ADC_MspInit+0x134>)
 80031cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <HAL_ADC_MspInit+0x134>)
 80031d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80031da:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <HAL_ADC_MspInit+0x134>)
 80031dc:	2220      	movs	r2, #32
 80031de:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <HAL_ADC_MspInit+0x134>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80031e6:	480b      	ldr	r0, [pc, #44]	; (8003214 <HAL_ADC_MspInit+0x134>)
 80031e8:	f001 fed0 	bl	8004f8c <HAL_DMA_Init>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 80031f2:	f7ff ff4b 	bl	800308c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a06      	ldr	r2, [pc, #24]	; (8003214 <HAL_ADC_MspInit+0x134>)
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54
 80031fc:	4a05      	ldr	r2, [pc, #20]	; (8003214 <HAL_ADC_MspInit+0x134>)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003202:	bf00      	nop
 8003204:	3780      	adds	r7, #128	; 0x80
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	48000400 	.word	0x48000400
 8003214:	20000110 	.word	0x20000110
 8003218:	40020008 	.word	0x40020008

0800321c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b09e      	sub	sp, #120	; 0x78
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003234:	f107 0310 	add.w	r3, r7, #16
 8003238:	2254      	movs	r2, #84	; 0x54
 800323a:	2100      	movs	r1, #0
 800323c:	4618      	mov	r0, r3
 800323e:	f005 febb 	bl	8008fb8 <memset>
  if(huart->Instance==LPUART1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1f      	ldr	r2, [pc, #124]	; (80032c4 <HAL_UART_MspInit+0xa8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d136      	bne.n	80032ba <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800324c:	2320      	movs	r3, #32
 800324e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003250:	2300      	movs	r3, #0
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003254:	f107 0310 	add.w	r3, r7, #16
 8003258:	4618      	mov	r0, r3
 800325a:	f003 f8b5 	bl	80063c8 <HAL_RCCEx_PeriphCLKConfig>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003264:	f7ff ff12 	bl	800308c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003268:	4b17      	ldr	r3, [pc, #92]	; (80032c8 <HAL_UART_MspInit+0xac>)
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	4a16      	ldr	r2, [pc, #88]	; (80032c8 <HAL_UART_MspInit+0xac>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003274:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <HAL_UART_MspInit+0xac>)
 8003276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003280:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <HAL_UART_MspInit+0xac>)
 8003282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003284:	4a10      	ldr	r2, [pc, #64]	; (80032c8 <HAL_UART_MspInit+0xac>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800328c:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <HAL_UART_MspInit+0xac>)
 800328e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003298:	230c      	movs	r3, #12
 800329a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329c:	2302      	movs	r3, #2
 800329e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a4:	2300      	movs	r3, #0
 80032a6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80032a8:	230c      	movs	r3, #12
 80032aa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80032b0:	4619      	mov	r1, r3
 80032b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032b6:	f002 f8db 	bl	8005470 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80032ba:	bf00      	nop
 80032bc:	3778      	adds	r7, #120	; 0x78
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40008000 	.word	0x40008000
 80032c8:	40021000 	.word	0x40021000

080032cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	; 0x28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ec:	d129      	bne.n	8003342 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032ee:	4b17      	ldr	r3, [pc, #92]	; (800334c <HAL_TIM_Encoder_MspInit+0x80>)
 80032f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f2:	4a16      	ldr	r2, [pc, #88]	; (800334c <HAL_TIM_Encoder_MspInit+0x80>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6593      	str	r3, [r2, #88]	; 0x58
 80032fa:	4b14      	ldr	r3, [pc, #80]	; (800334c <HAL_TIM_Encoder_MspInit+0x80>)
 80032fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003306:	4b11      	ldr	r3, [pc, #68]	; (800334c <HAL_TIM_Encoder_MspInit+0x80>)
 8003308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330a:	4a10      	ldr	r2, [pc, #64]	; (800334c <HAL_TIM_Encoder_MspInit+0x80>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003312:	4b0e      	ldr	r3, [pc, #56]	; (800334c <HAL_TIM_Encoder_MspInit+0x80>)
 8003314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 800331e:	f248 0302 	movw	r3, #32770	; 0x8002
 8003322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003324:	2302      	movs	r3, #2
 8003326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332c:	2300      	movs	r3, #0
 800332e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003330:	2301      	movs	r3, #1
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	4619      	mov	r1, r3
 800333a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800333e:	f002 f897 	bl	8005470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003342:	bf00      	nop
 8003344:	3728      	adds	r7, #40	; 0x28
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000

08003350 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a1f      	ldr	r2, [pc, #124]	; (80033dc <HAL_TIM_Base_MspInit+0x8c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d10c      	bne.n	800337c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003362:	4b1f      	ldr	r3, [pc, #124]	; (80033e0 <HAL_TIM_Base_MspInit+0x90>)
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	4a1e      	ldr	r2, [pc, #120]	; (80033e0 <HAL_TIM_Base_MspInit+0x90>)
 8003368:	f043 0302 	orr.w	r3, r3, #2
 800336c:	6593      	str	r3, [r2, #88]	; 0x58
 800336e:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <HAL_TIM_Base_MspInit+0x90>)
 8003370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800337a:	e02a      	b.n	80033d2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a18      	ldr	r2, [pc, #96]	; (80033e4 <HAL_TIM_Base_MspInit+0x94>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d10c      	bne.n	80033a0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003386:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <HAL_TIM_Base_MspInit+0x90>)
 8003388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338a:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <HAL_TIM_Base_MspInit+0x90>)
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	6593      	str	r3, [r2, #88]	; 0x58
 8003392:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <HAL_TIM_Base_MspInit+0x90>)
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	693b      	ldr	r3, [r7, #16]
}
 800339e:	e018      	b.n	80033d2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM5)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a10      	ldr	r2, [pc, #64]	; (80033e8 <HAL_TIM_Base_MspInit+0x98>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d113      	bne.n	80033d2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80033aa:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <HAL_TIM_Base_MspInit+0x90>)
 80033ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ae:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <HAL_TIM_Base_MspInit+0x90>)
 80033b0:	f043 0308 	orr.w	r3, r3, #8
 80033b4:	6593      	str	r3, [r2, #88]	; 0x58
 80033b6:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <HAL_TIM_Base_MspInit+0x90>)
 80033b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80033c2:	2200      	movs	r2, #0
 80033c4:	2100      	movs	r1, #0
 80033c6:	2032      	movs	r0, #50	; 0x32
 80033c8:	f001 fdab 	bl	8004f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80033cc:	2032      	movs	r0, #50	; 0x32
 80033ce:	f001 fdc2 	bl	8004f56 <HAL_NVIC_EnableIRQ>
}
 80033d2:	bf00      	nop
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40000400 	.word	0x40000400
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40000800 	.word	0x40000800
 80033e8:	40000c00 	.word	0x40000c00

080033ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f4:	f107 030c 	add.w	r3, r7, #12
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a11      	ldr	r2, [pc, #68]	; (8003450 <HAL_TIM_MspPostInit+0x64>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d11b      	bne.n	8003446 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800340e:	4b11      	ldr	r3, [pc, #68]	; (8003454 <HAL_TIM_MspPostInit+0x68>)
 8003410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003412:	4a10      	ldr	r2, [pc, #64]	; (8003454 <HAL_TIM_MspPostInit+0x68>)
 8003414:	f043 0304 	orr.w	r3, r3, #4
 8003418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800341a:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <HAL_TIM_MspPostInit+0x68>)
 800341c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003426:	2340      	movs	r3, #64	; 0x40
 8003428:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342a:	2302      	movs	r3, #2
 800342c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003436:	2302      	movs	r3, #2
 8003438:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800343a:	f107 030c 	add.w	r3, r7, #12
 800343e:	4619      	mov	r1, r3
 8003440:	4805      	ldr	r0, [pc, #20]	; (8003458 <HAL_TIM_MspPostInit+0x6c>)
 8003442:	f002 f815 	bl	8005470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003446:	bf00      	nop
 8003448:	3720      	adds	r7, #32
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40000400 	.word	0x40000400
 8003454:	40021000 	.word	0x40021000
 8003458:	48000800 	.word	0x48000800

0800345c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003460:	e7fe      	b.n	8003460 <NMI_Handler+0x4>

08003462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003462:	b480      	push	{r7}
 8003464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003466:	e7fe      	b.n	8003466 <HardFault_Handler+0x4>

08003468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800346c:	e7fe      	b.n	800346c <MemManage_Handler+0x4>

0800346e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800346e:	b480      	push	{r7}
 8003470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003472:	e7fe      	b.n	8003472 <BusFault_Handler+0x4>

08003474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003478:	e7fe      	b.n	8003478 <UsageFault_Handler+0x4>

0800347a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800347a:	b480      	push	{r7}
 800347c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003496:	b480      	push	{r7}
 8003498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800349a:	bf00      	nop
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034a8:	f000 f8bc 	bl	8003624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034ac:	bf00      	nop
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034b4:	4802      	ldr	r0, [pc, #8]	; (80034c0 <DMA1_Channel1_IRQHandler+0x10>)
 80034b6:	f001 fe8c 	bl	80051d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000110 	.word	0x20000110

080034c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80034c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80034cc:	f002 f982 	bl	80057d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80034d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80034d4:	f002 f97e 	bl	80057d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80034d8:	bf00      	nop
 80034da:	bd80      	pop	{r7, pc}

080034dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80034e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80034e4:	f002 f976 	bl	80057d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80034e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80034ec:	f002 f972 	bl	80057d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80034f0:	bf00      	nop
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80034f8:	4802      	ldr	r0, [pc, #8]	; (8003504 <TIM5_IRQHandler+0x10>)
 80034fa:	f003 fd9b 	bl	8007034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	200002e8 	.word	0x200002e8

08003508 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <SystemInit+0x20>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003512:	4a05      	ldr	r2, [pc, #20]	; (8003528 <SystemInit+0x20>)
 8003514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800352c:	480d      	ldr	r0, [pc, #52]	; (8003564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800352e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003530:	f7ff ffea 	bl	8003508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003534:	480c      	ldr	r0, [pc, #48]	; (8003568 <LoopForever+0x6>)
  ldr r1, =_edata
 8003536:	490d      	ldr	r1, [pc, #52]	; (800356c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003538:	4a0d      	ldr	r2, [pc, #52]	; (8003570 <LoopForever+0xe>)
  movs r3, #0
 800353a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800353c:	e002      	b.n	8003544 <LoopCopyDataInit>

0800353e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800353e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003542:	3304      	adds	r3, #4

08003544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003548:	d3f9      	bcc.n	800353e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800354a:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800354c:	4c0a      	ldr	r4, [pc, #40]	; (8003578 <LoopForever+0x16>)
  movs r3, #0
 800354e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003550:	e001      	b.n	8003556 <LoopFillZerobss>

08003552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003554:	3204      	adds	r2, #4

08003556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003558:	d3fb      	bcc.n	8003552 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800355a:	f005 fd3b 	bl	8008fd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800355e:	f7fd fdc3 	bl	80010e8 <main>

08003562 <LoopForever>:

LoopForever:
    b LoopForever
 8003562:	e7fe      	b.n	8003562 <LoopForever>
  ldr   r0, =_estack
 8003564:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800356c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003570:	08009290 	.word	0x08009290
  ldr r2, =_sbss
 8003574:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003578:	2000057c 	.word	0x2000057c

0800357c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800357c:	e7fe      	b.n	800357c <ADC1_2_IRQHandler>

0800357e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003584:	2300      	movs	r3, #0
 8003586:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003588:	2003      	movs	r0, #3
 800358a:	f001 fcbf 	bl	8004f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800358e:	2000      	movs	r0, #0
 8003590:	f000 f80e 	bl	80035b0 <HAL_InitTick>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	71fb      	strb	r3, [r7, #7]
 800359e:	e001      	b.n	80035a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035a0:	f7ff fd7a 	bl	8003098 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035a4:	79fb      	ldrb	r3, [r7, #7]

}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80035bc:	4b16      	ldr	r3, [pc, #88]	; (8003618 <HAL_InitTick+0x68>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d022      	beq.n	800360a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80035c4:	4b15      	ldr	r3, [pc, #84]	; (800361c <HAL_InitTick+0x6c>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	4b13      	ldr	r3, [pc, #76]	; (8003618 <HAL_InitTick+0x68>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80035d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80035d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d8:	4618      	mov	r0, r3
 80035da:	f001 fcca 	bl	8004f72 <HAL_SYSTICK_Config>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10f      	bne.n	8003604 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b0f      	cmp	r3, #15
 80035e8:	d809      	bhi.n	80035fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035ea:	2200      	movs	r2, #0
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035f2:	f001 fc96 	bl	8004f22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035f6:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <HAL_InitTick+0x70>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	e007      	b.n	800360e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
 8003602:	e004      	b.n	800360e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
 8003608:	e001      	b.n	800360e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800360e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20000020 	.word	0x20000020
 800361c:	20000018 	.word	0x20000018
 8003620:	2000001c 	.word	0x2000001c

08003624 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <HAL_IncTick+0x1c>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_IncTick+0x20>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4413      	add	r3, r2
 8003632:	4a03      	ldr	r2, [pc, #12]	; (8003640 <HAL_IncTick+0x1c>)
 8003634:	6013      	str	r3, [r2, #0]
}
 8003636:	bf00      	nop
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	20000440 	.word	0x20000440
 8003644:	20000020 	.word	0x20000020

08003648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  return uwTick;
 800364c:	4b03      	ldr	r3, [pc, #12]	; (800365c <HAL_GetTick+0x14>)
 800364e:	681b      	ldr	r3, [r3, #0]
}
 8003650:	4618      	mov	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	20000440 	.word	0x20000440

08003660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003668:	f7ff ffee 	bl	8003648 <HAL_GetTick>
 800366c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003678:	d004      	beq.n	8003684 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800367a:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_Delay+0x40>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4413      	add	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003684:	bf00      	nop
 8003686:	f7ff ffdf 	bl	8003648 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	429a      	cmp	r2, r3
 8003694:	d8f7      	bhi.n	8003686 <HAL_Delay+0x26>
  {
  }
}
 8003696:	bf00      	nop
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000020 	.word	0x20000020

080036a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	609a      	str	r2, [r3, #8]
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	609a      	str	r2, [r3, #8]
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	3360      	adds	r3, #96	; 0x60
 800371e:	461a      	mov	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4b08      	ldr	r3, [pc, #32]	; (8003750 <LL_ADC_SetOffset+0x44>)
 800372e:	4013      	ands	r3, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	4313      	orrs	r3, r2
 800373c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003744:	bf00      	nop
 8003746:	371c      	adds	r7, #28
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	03fff000 	.word	0x03fff000

08003754 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3360      	adds	r3, #96	; 0x60
 8003762:	461a      	mov	r2, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003774:	4618      	mov	r0, r3
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3360      	adds	r3, #96	; 0x60
 8003790:	461a      	mov	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	431a      	orrs	r2, r3
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b087      	sub	sp, #28
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	3360      	adds	r3, #96	; 0x60
 80037c6:	461a      	mov	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	431a      	orrs	r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80037e0:	bf00      	nop
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	3360      	adds	r3, #96	; 0x60
 80037fc:	461a      	mov	r2, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	431a      	orrs	r2, r3
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003816:	bf00      	nop
 8003818:	371c      	adds	r7, #28
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	615a      	str	r2, [r3, #20]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800386e:	b480      	push	{r7}
 8003870:	b087      	sub	sp, #28
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3330      	adds	r3, #48	; 0x30
 800387e:	461a      	mov	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	0a1b      	lsrs	r3, r3, #8
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	4413      	add	r3, r2
 800388c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	211f      	movs	r1, #31
 800389a:	fa01 f303 	lsl.w	r3, r1, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	401a      	ands	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	0e9b      	lsrs	r3, r3, #26
 80038a6:	f003 011f 	and.w	r1, r3, #31
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	fa01 f303 	lsl.w	r3, r1, r3
 80038b4:	431a      	orrs	r2, r3
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b087      	sub	sp, #28
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3314      	adds	r3, #20
 80038d6:	461a      	mov	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	0e5b      	lsrs	r3, r3, #25
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	4413      	add	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	0d1b      	lsrs	r3, r3, #20
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	2107      	movs	r1, #7
 80038f4:	fa01 f303 	lsl.w	r3, r1, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	401a      	ands	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	0d1b      	lsrs	r3, r3, #20
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	fa01 f303 	lsl.w	r3, r1, r3
 800390a:	431a      	orrs	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003934:	43db      	mvns	r3, r3
 8003936:	401a      	ands	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f003 0318 	and.w	r3, r3, #24
 800393e:	4908      	ldr	r1, [pc, #32]	; (8003960 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003940:	40d9      	lsrs	r1, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	400b      	ands	r3, r1
 8003946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800394a:	431a      	orrs	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003952:	bf00      	nop
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	0007ffff 	.word	0x0007ffff

08003964 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 031f 	and.w	r3, r3, #31
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003990:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6093      	str	r3, [r2, #8]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039b8:	d101      	bne.n	80039be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80039dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a08:	d101      	bne.n	8003a0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a30:	f043 0201 	orr.w	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <LL_ADC_IsEnabled+0x18>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <LL_ADC_IsEnabled+0x1a>
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a7e:	f043 0204 	orr.w	r2, r3, #4
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d101      	bne.n	8003aaa <LL_ADC_REG_IsConversionOngoing+0x18>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d101      	bne.n	8003ad0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
	...

08003ae0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ae0:	b590      	push	{r4, r7, lr}
 8003ae2:	b089      	sub	sp, #36	; 0x24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e1a9      	b.n	8003e4e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d109      	bne.n	8003b1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff fae9 	bl	80030e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff ff3f 	bl	80039a4 <LL_ADC_IsDeepPowerDownEnabled>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d004      	beq.n	8003b36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff ff25 	bl	8003980 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff ff5a 	bl	80039f4 <LL_ADC_IsInternalRegulatorEnabled>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d115      	bne.n	8003b72 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff ff3e 	bl	80039cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b50:	4b9c      	ldr	r3, [pc, #624]	; (8003dc4 <HAL_ADC_Init+0x2e4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	099b      	lsrs	r3, r3, #6
 8003b56:	4a9c      	ldr	r2, [pc, #624]	; (8003dc8 <HAL_ADC_Init+0x2e8>)
 8003b58:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5c:	099b      	lsrs	r3, r3, #6
 8003b5e:	3301      	adds	r3, #1
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b64:	e002      	b.n	8003b6c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f9      	bne.n	8003b66 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff ff3c 	bl	80039f4 <LL_ADC_IsInternalRegulatorEnabled>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10d      	bne.n	8003b9e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b86:	f043 0210 	orr.w	r2, r3, #16
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b92:	f043 0201 	orr.w	r2, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff ff75 	bl	8003a92 <LL_ADC_REG_IsConversionOngoing>
 8003ba8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f040 8142 	bne.w	8003e3c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f040 813e 	bne.w	8003e3c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003bc8:	f043 0202 	orr.w	r2, r3, #2
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff ff35 	bl	8003a44 <LL_ADC_IsEnabled>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d141      	bne.n	8003c64 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003be8:	d004      	beq.n	8003bf4 <HAL_ADC_Init+0x114>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a77      	ldr	r2, [pc, #476]	; (8003dcc <HAL_ADC_Init+0x2ec>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d10f      	bne.n	8003c14 <HAL_ADC_Init+0x134>
 8003bf4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003bf8:	f7ff ff24 	bl	8003a44 <LL_ADC_IsEnabled>
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	4873      	ldr	r0, [pc, #460]	; (8003dcc <HAL_ADC_Init+0x2ec>)
 8003c00:	f7ff ff20 	bl	8003a44 <LL_ADC_IsEnabled>
 8003c04:	4603      	mov	r3, r0
 8003c06:	4323      	orrs	r3, r4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bf0c      	ite	eq
 8003c0c:	2301      	moveq	r3, #1
 8003c0e:	2300      	movne	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	e012      	b.n	8003c3a <HAL_ADC_Init+0x15a>
 8003c14:	486e      	ldr	r0, [pc, #440]	; (8003dd0 <HAL_ADC_Init+0x2f0>)
 8003c16:	f7ff ff15 	bl	8003a44 <LL_ADC_IsEnabled>
 8003c1a:	4604      	mov	r4, r0
 8003c1c:	486d      	ldr	r0, [pc, #436]	; (8003dd4 <HAL_ADC_Init+0x2f4>)
 8003c1e:	f7ff ff11 	bl	8003a44 <LL_ADC_IsEnabled>
 8003c22:	4603      	mov	r3, r0
 8003c24:	431c      	orrs	r4, r3
 8003c26:	486c      	ldr	r0, [pc, #432]	; (8003dd8 <HAL_ADC_Init+0x2f8>)
 8003c28:	f7ff ff0c 	bl	8003a44 <LL_ADC_IsEnabled>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	4323      	orrs	r3, r4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d012      	beq.n	8003c64 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c46:	d004      	beq.n	8003c52 <HAL_ADC_Init+0x172>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a5f      	ldr	r2, [pc, #380]	; (8003dcc <HAL_ADC_Init+0x2ec>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d101      	bne.n	8003c56 <HAL_ADC_Init+0x176>
 8003c52:	4a62      	ldr	r2, [pc, #392]	; (8003ddc <HAL_ADC_Init+0x2fc>)
 8003c54:	e000      	b.n	8003c58 <HAL_ADC_Init+0x178>
 8003c56:	4a62      	ldr	r2, [pc, #392]	; (8003de0 <HAL_ADC_Init+0x300>)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4610      	mov	r0, r2
 8003c60:	f7ff fd20 	bl	80036a4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	7f5b      	ldrb	r3, [r3, #29]
 8003c68:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c6e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003c74:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003c7a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c82:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d106      	bne.n	8003ca0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c96:	3b01      	subs	r3, #1
 8003c98:	045b      	lsls	r3, r3, #17
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d009      	beq.n	8003cbc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	4b48      	ldr	r3, [pc, #288]	; (8003de4 <HAL_ADC_Init+0x304>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6812      	ldr	r2, [r2, #0]
 8003cca:	69b9      	ldr	r1, [r7, #24]
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff fee4 	bl	8003ab8 <LL_ADC_INJ_IsConversionOngoing>
 8003cf0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d17f      	bne.n	8003df8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d17c      	bne.n	8003df8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d02:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d0a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d1a:	f023 0302 	bic.w	r3, r3, #2
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	69b9      	ldr	r1, [r7, #24]
 8003d24:	430b      	orrs	r3, r1
 8003d26:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d017      	beq.n	8003d60 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d3e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003d48:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6911      	ldr	r1, [r2, #16]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003d5e:	e013      	b.n	8003d88 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d6e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d84:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d12a      	bne.n	8003de8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003d9c:	f023 0304 	bic.w	r3, r3, #4
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003da8:	4311      	orrs	r1, r2
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003dae:	4311      	orrs	r1, r2
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003db4:	430a      	orrs	r2, r1
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0201 	orr.w	r2, r2, #1
 8003dc0:	611a      	str	r2, [r3, #16]
 8003dc2:	e019      	b.n	8003df8 <HAL_ADC_Init+0x318>
 8003dc4:	20000018 	.word	0x20000018
 8003dc8:	053e2d63 	.word	0x053e2d63
 8003dcc:	50000100 	.word	0x50000100
 8003dd0:	50000400 	.word	0x50000400
 8003dd4:	50000500 	.word	0x50000500
 8003dd8:	50000600 	.word	0x50000600
 8003ddc:	50000300 	.word	0x50000300
 8003de0:	50000700 	.word	0x50000700
 8003de4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0201 	bic.w	r2, r2, #1
 8003df6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d10c      	bne.n	8003e1a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	f023 010f 	bic.w	r1, r3, #15
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	1e5a      	subs	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
 8003e18:	e007      	b.n	8003e2a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 020f 	bic.w	r2, r2, #15
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2e:	f023 0303 	bic.w	r3, r3, #3
 8003e32:	f043 0201 	orr.w	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e3a:	e007      	b.n	8003e4c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e40:	f043 0210 	orr.w	r2, r3, #16
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3724      	adds	r7, #36	; 0x24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd90      	pop	{r4, r7, pc}
 8003e56:	bf00      	nop

08003e58 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e6c:	d004      	beq.n	8003e78 <HAL_ADC_Start_DMA+0x20>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a5a      	ldr	r2, [pc, #360]	; (8003fdc <HAL_ADC_Start_DMA+0x184>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d101      	bne.n	8003e7c <HAL_ADC_Start_DMA+0x24>
 8003e78:	4b59      	ldr	r3, [pc, #356]	; (8003fe0 <HAL_ADC_Start_DMA+0x188>)
 8003e7a:	e000      	b.n	8003e7e <HAL_ADC_Start_DMA+0x26>
 8003e7c:	4b59      	ldr	r3, [pc, #356]	; (8003fe4 <HAL_ADC_Start_DMA+0x18c>)
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff fd70 	bl	8003964 <LL_ADC_GetMultimode>
 8003e84:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff fe01 	bl	8003a92 <LL_ADC_REG_IsConversionOngoing>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f040 809b 	bne.w	8003fce <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_ADC_Start_DMA+0x4e>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e096      	b.n	8003fd4 <HAL_ADC_Start_DMA+0x17c>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a4d      	ldr	r2, [pc, #308]	; (8003fe8 <HAL_ADC_Start_DMA+0x190>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d008      	beq.n	8003eca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d005      	beq.n	8003eca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b05      	cmp	r3, #5
 8003ec2:	d002      	beq.n	8003eca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	2b09      	cmp	r3, #9
 8003ec8:	d17a      	bne.n	8003fc0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 fcf6 	bl	80048bc <ADC_Enable>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d16d      	bne.n	8003fb6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ede:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a3a      	ldr	r2, [pc, #232]	; (8003fdc <HAL_ADC_Start_DMA+0x184>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d009      	beq.n	8003f0c <HAL_ADC_Start_DMA+0xb4>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a3b      	ldr	r2, [pc, #236]	; (8003fec <HAL_ADC_Start_DMA+0x194>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d002      	beq.n	8003f08 <HAL_ADC_Start_DMA+0xb0>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	e003      	b.n	8003f10 <HAL_ADC_Start_DMA+0xb8>
 8003f08:	4b39      	ldr	r3, [pc, #228]	; (8003ff0 <HAL_ADC_Start_DMA+0x198>)
 8003f0a:	e001      	b.n	8003f10 <HAL_ADC_Start_DMA+0xb8>
 8003f0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d002      	beq.n	8003f1e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d105      	bne.n	8003f2a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d006      	beq.n	8003f44 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f3a:	f023 0206 	bic.w	r2, r3, #6
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	661a      	str	r2, [r3, #96]	; 0x60
 8003f42:	e002      	b.n	8003f4a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4e:	4a29      	ldr	r2, [pc, #164]	; (8003ff4 <HAL_ADC_Start_DMA+0x19c>)
 8003f50:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f56:	4a28      	ldr	r2, [pc, #160]	; (8003ff8 <HAL_ADC_Start_DMA+0x1a0>)
 8003f58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	4a27      	ldr	r2, [pc, #156]	; (8003ffc <HAL_ADC_Start_DMA+0x1a4>)
 8003f60:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	221c      	movs	r2, #28
 8003f68:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0210 	orr.w	r2, r2, #16
 8003f80:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 0201 	orr.w	r2, r2, #1
 8003f90:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3340      	adds	r3, #64	; 0x40
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f001 f89b 	bl	80050dc <HAL_DMA_Start_IT>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff fd5b 	bl	8003a6a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003fb4:	e00d      	b.n	8003fd2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003fbe:	e008      	b.n	8003fd2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003fcc:	e001      	b.n	8003fd2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	50000100 	.word	0x50000100
 8003fe0:	50000300 	.word	0x50000300
 8003fe4:	50000700 	.word	0x50000700
 8003fe8:	50000600 	.word	0x50000600
 8003fec:	50000500 	.word	0x50000500
 8003ff0:	50000400 	.word	0x50000400
 8003ff4:	080049e9 	.word	0x080049e9
 8003ff8:	08004ac1 	.word	0x08004ac1
 8003ffc:	08004add 	.word	0x08004add

08004000 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b0b6      	sub	sp, #216	; 0xd8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004056:	2b01      	cmp	r3, #1
 8004058:	d102      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x24>
 800405a:	2302      	movs	r3, #2
 800405c:	f000 bc13 	b.w	8004886 <HAL_ADC_ConfigChannel+0x84a>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff fd10 	bl	8003a92 <LL_ADC_REG_IsConversionOngoing>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	f040 83f3 	bne.w	8004860 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6859      	ldr	r1, [r3, #4]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	f7ff fbf1 	bl	800386e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fcfe 	bl	8003a92 <LL_ADC_REG_IsConversionOngoing>
 8004096:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff fd0a 	bl	8003ab8 <LL_ADC_INJ_IsConversionOngoing>
 80040a4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f040 81d9 	bne.w	8004464 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f040 81d4 	bne.w	8004464 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040c4:	d10f      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2200      	movs	r2, #0
 80040d0:	4619      	mov	r1, r3
 80040d2:	f7ff fbf8 	bl	80038c6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff fb9f 	bl	8003822 <LL_ADC_SetSamplingTimeCommonConfig>
 80040e4:	e00e      	b.n	8004104 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6819      	ldr	r1, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	461a      	mov	r2, r3
 80040f4:	f7ff fbe7 	bl	80038c6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2100      	movs	r1, #0
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff fb8f 	bl	8003822 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	695a      	ldr	r2, [r3, #20]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	08db      	lsrs	r3, r3, #3
 8004110:	f003 0303 	and.w	r3, r3, #3
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b04      	cmp	r3, #4
 8004124:	d022      	beq.n	800416c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6919      	ldr	r1, [r3, #16]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004136:	f7ff fae9 	bl	800370c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	6919      	ldr	r1, [r3, #16]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	461a      	mov	r2, r3
 8004148:	f7ff fb35 	bl	80037b6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004158:	2b01      	cmp	r3, #1
 800415a:	d102      	bne.n	8004162 <HAL_ADC_ConfigChannel+0x126>
 800415c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004160:	e000      	b.n	8004164 <HAL_ADC_ConfigChannel+0x128>
 8004162:	2300      	movs	r3, #0
 8004164:	461a      	mov	r2, r3
 8004166:	f7ff fb41 	bl	80037ec <LL_ADC_SetOffsetSaturation>
 800416a:	e17b      	b.n	8004464 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2100      	movs	r1, #0
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff faee 	bl	8003754 <LL_ADC_GetOffsetChannel>
 8004178:	4603      	mov	r3, r0
 800417a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10a      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x15c>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2100      	movs	r1, #0
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff fae3 	bl	8003754 <LL_ADC_GetOffsetChannel>
 800418e:	4603      	mov	r3, r0
 8004190:	0e9b      	lsrs	r3, r3, #26
 8004192:	f003 021f 	and.w	r2, r3, #31
 8004196:	e01e      	b.n	80041d6 <HAL_ADC_ConfigChannel+0x19a>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2100      	movs	r1, #0
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff fad8 	bl	8003754 <LL_ADC_GetOffsetChannel>
 80041a4:	4603      	mov	r3, r0
 80041a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80041ae:	fa93 f3a3 	rbit	r3, r3
 80041b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80041ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80041c6:	2320      	movs	r3, #32
 80041c8:	e004      	b.n	80041d4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80041ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041ce:	fab3 f383 	clz	r3, r3
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d105      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x1b2>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	0e9b      	lsrs	r3, r3, #26
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	e018      	b.n	8004220 <HAL_ADC_ConfigChannel+0x1e4>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80041fa:	fa93 f3a3 	rbit	r3, r3
 80041fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004206:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800420a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004212:	2320      	movs	r3, #32
 8004214:	e004      	b.n	8004220 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004216:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800421a:	fab3 f383 	clz	r3, r3
 800421e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004220:	429a      	cmp	r2, r3
 8004222:	d106      	bne.n	8004232 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2200      	movs	r2, #0
 800422a:	2100      	movs	r1, #0
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff faa7 	bl	8003780 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2101      	movs	r1, #1
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff fa8b 	bl	8003754 <LL_ADC_GetOffsetChannel>
 800423e:	4603      	mov	r3, r0
 8004240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10a      	bne.n	800425e <HAL_ADC_ConfigChannel+0x222>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2101      	movs	r1, #1
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fa80 	bl	8003754 <LL_ADC_GetOffsetChannel>
 8004254:	4603      	mov	r3, r0
 8004256:	0e9b      	lsrs	r3, r3, #26
 8004258:	f003 021f 	and.w	r2, r3, #31
 800425c:	e01e      	b.n	800429c <HAL_ADC_ConfigChannel+0x260>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2101      	movs	r1, #1
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff fa75 	bl	8003754 <LL_ADC_GetOffsetChannel>
 800426a:	4603      	mov	r3, r0
 800426c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004270:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004274:	fa93 f3a3 	rbit	r3, r3
 8004278:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800427c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004280:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004284:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800428c:	2320      	movs	r3, #32
 800428e:	e004      	b.n	800429a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004290:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004294:	fab3 f383 	clz	r3, r3
 8004298:	b2db      	uxtb	r3, r3
 800429a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d105      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0x278>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	0e9b      	lsrs	r3, r3, #26
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	e018      	b.n	80042e6 <HAL_ADC_ConfigChannel+0x2aa>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042c0:	fa93 f3a3 	rbit	r3, r3
 80042c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80042c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80042cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80042d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80042d8:	2320      	movs	r3, #32
 80042da:	e004      	b.n	80042e6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80042dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042e0:	fab3 f383 	clz	r3, r3
 80042e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d106      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2200      	movs	r2, #0
 80042f0:	2101      	movs	r1, #1
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fa44 	bl	8003780 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2102      	movs	r1, #2
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fa28 	bl	8003754 <LL_ADC_GetOffsetChannel>
 8004304:	4603      	mov	r3, r0
 8004306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x2e8>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2102      	movs	r1, #2
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fa1d 	bl	8003754 <LL_ADC_GetOffsetChannel>
 800431a:	4603      	mov	r3, r0
 800431c:	0e9b      	lsrs	r3, r3, #26
 800431e:	f003 021f 	and.w	r2, r3, #31
 8004322:	e01e      	b.n	8004362 <HAL_ADC_ConfigChannel+0x326>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2102      	movs	r1, #2
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff fa12 	bl	8003754 <LL_ADC_GetOffsetChannel>
 8004330:	4603      	mov	r3, r0
 8004332:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004342:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800434a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004352:	2320      	movs	r3, #32
 8004354:	e004      	b.n	8004360 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004356:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800435a:	fab3 f383 	clz	r3, r3
 800435e:	b2db      	uxtb	r3, r3
 8004360:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800436a:	2b00      	cmp	r3, #0
 800436c:	d105      	bne.n	800437a <HAL_ADC_ConfigChannel+0x33e>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	0e9b      	lsrs	r3, r3, #26
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	e016      	b.n	80043a8 <HAL_ADC_ConfigChannel+0x36c>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004382:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004386:	fa93 f3a3 	rbit	r3, r3
 800438a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800438c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800438e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004392:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800439a:	2320      	movs	r3, #32
 800439c:	e004      	b.n	80043a8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800439e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043a2:	fab3 f383 	clz	r3, r3
 80043a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d106      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2200      	movs	r2, #0
 80043b2:	2102      	movs	r1, #2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff f9e3 	bl	8003780 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2103      	movs	r1, #3
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff f9c7 	bl	8003754 <LL_ADC_GetOffsetChannel>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x3aa>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2103      	movs	r1, #3
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff f9bc 	bl	8003754 <LL_ADC_GetOffsetChannel>
 80043dc:	4603      	mov	r3, r0
 80043de:	0e9b      	lsrs	r3, r3, #26
 80043e0:	f003 021f 	and.w	r2, r3, #31
 80043e4:	e017      	b.n	8004416 <HAL_ADC_ConfigChannel+0x3da>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2103      	movs	r1, #3
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff f9b1 	bl	8003754 <LL_ADC_GetOffsetChannel>
 80043f2:	4603      	mov	r3, r0
 80043f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043f8:	fa93 f3a3 	rbit	r3, r3
 80043fc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80043fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004400:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004402:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004408:	2320      	movs	r3, #32
 800440a:	e003      	b.n	8004414 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800440c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800440e:	fab3 f383 	clz	r3, r3
 8004412:	b2db      	uxtb	r3, r3
 8004414:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800441e:	2b00      	cmp	r3, #0
 8004420:	d105      	bne.n	800442e <HAL_ADC_ConfigChannel+0x3f2>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	0e9b      	lsrs	r3, r3, #26
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	e011      	b.n	8004452 <HAL_ADC_ConfigChannel+0x416>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004434:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004436:	fa93 f3a3 	rbit	r3, r3
 800443a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800443c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800443e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004446:	2320      	movs	r3, #32
 8004448:	e003      	b.n	8004452 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800444a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800444c:	fab3 f383 	clz	r3, r3
 8004450:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004452:	429a      	cmp	r2, r3
 8004454:	d106      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2200      	movs	r2, #0
 800445c:	2103      	movs	r1, #3
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff f98e 	bl	8003780 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff faeb 	bl	8003a44 <LL_ADC_IsEnabled>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	f040 813d 	bne.w	80046f0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	6819      	ldr	r1, [r3, #0]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	461a      	mov	r2, r3
 8004484:	f7ff fa4a 	bl	800391c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	4aa2      	ldr	r2, [pc, #648]	; (8004718 <HAL_ADC_ConfigChannel+0x6dc>)
 800448e:	4293      	cmp	r3, r2
 8004490:	f040 812e 	bne.w	80046f0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10b      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x480>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	0e9b      	lsrs	r3, r3, #26
 80044aa:	3301      	adds	r3, #1
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	2b09      	cmp	r3, #9
 80044b2:	bf94      	ite	ls
 80044b4:	2301      	movls	r3, #1
 80044b6:	2300      	movhi	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	e019      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x4b4>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c4:	fa93 f3a3 	rbit	r3, r3
 80044c8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80044ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044cc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80044ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80044d4:	2320      	movs	r3, #32
 80044d6:	e003      	b.n	80044e0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80044d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044da:	fab3 f383 	clz	r3, r3
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	3301      	adds	r3, #1
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	2b09      	cmp	r3, #9
 80044e8:	bf94      	ite	ls
 80044ea:	2301      	movls	r3, #1
 80044ec:	2300      	movhi	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d079      	beq.n	80045e8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d107      	bne.n	8004510 <HAL_ADC_ConfigChannel+0x4d4>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	0e9b      	lsrs	r3, r3, #26
 8004506:	3301      	adds	r3, #1
 8004508:	069b      	lsls	r3, r3, #26
 800450a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800450e:	e015      	b.n	800453c <HAL_ADC_ConfigChannel+0x500>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004518:	fa93 f3a3 	rbit	r3, r3
 800451c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800451e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004520:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004528:	2320      	movs	r3, #32
 800452a:	e003      	b.n	8004534 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800452c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800452e:	fab3 f383 	clz	r3, r3
 8004532:	b2db      	uxtb	r3, r3
 8004534:	3301      	adds	r3, #1
 8004536:	069b      	lsls	r3, r3, #26
 8004538:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <HAL_ADC_ConfigChannel+0x520>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0e9b      	lsrs	r3, r3, #26
 800454e:	3301      	adds	r3, #1
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	2101      	movs	r1, #1
 8004556:	fa01 f303 	lsl.w	r3, r1, r3
 800455a:	e017      	b.n	800458c <HAL_ADC_ConfigChannel+0x550>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004564:	fa93 f3a3 	rbit	r3, r3
 8004568:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800456a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800456c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800456e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004574:	2320      	movs	r3, #32
 8004576:	e003      	b.n	8004580 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800457a:	fab3 f383 	clz	r3, r3
 800457e:	b2db      	uxtb	r3, r3
 8004580:	3301      	adds	r3, #1
 8004582:	f003 031f 	and.w	r3, r3, #31
 8004586:	2101      	movs	r1, #1
 8004588:	fa01 f303 	lsl.w	r3, r1, r3
 800458c:	ea42 0103 	orr.w	r1, r2, r3
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x576>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	0e9b      	lsrs	r3, r3, #26
 80045a2:	3301      	adds	r3, #1
 80045a4:	f003 021f 	and.w	r2, r3, #31
 80045a8:	4613      	mov	r3, r2
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	4413      	add	r3, r2
 80045ae:	051b      	lsls	r3, r3, #20
 80045b0:	e018      	b.n	80045e4 <HAL_ADC_ConfigChannel+0x5a8>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ba:	fa93 f3a3 	rbit	r3, r3
 80045be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80045c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80045c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80045ca:	2320      	movs	r3, #32
 80045cc:	e003      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80045ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d0:	fab3 f383 	clz	r3, r3
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	3301      	adds	r3, #1
 80045d8:	f003 021f 	and.w	r2, r3, #31
 80045dc:	4613      	mov	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4413      	add	r3, r2
 80045e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045e4:	430b      	orrs	r3, r1
 80045e6:	e07e      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d107      	bne.n	8004604 <HAL_ADC_ConfigChannel+0x5c8>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	0e9b      	lsrs	r3, r3, #26
 80045fa:	3301      	adds	r3, #1
 80045fc:	069b      	lsls	r3, r3, #26
 80045fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004602:	e015      	b.n	8004630 <HAL_ADC_ConfigChannel+0x5f4>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460c:	fa93 f3a3 	rbit	r3, r3
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004614:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800461c:	2320      	movs	r3, #32
 800461e:	e003      	b.n	8004628 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	fab3 f383 	clz	r3, r3
 8004626:	b2db      	uxtb	r3, r3
 8004628:	3301      	adds	r3, #1
 800462a:	069b      	lsls	r3, r3, #26
 800462c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004638:	2b00      	cmp	r3, #0
 800463a:	d109      	bne.n	8004650 <HAL_ADC_ConfigChannel+0x614>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	0e9b      	lsrs	r3, r3, #26
 8004642:	3301      	adds	r3, #1
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	2101      	movs	r1, #1
 800464a:	fa01 f303 	lsl.w	r3, r1, r3
 800464e:	e017      	b.n	8004680 <HAL_ADC_ConfigChannel+0x644>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	fa93 f3a3 	rbit	r3, r3
 800465c:	61fb      	str	r3, [r7, #28]
  return result;
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004668:	2320      	movs	r3, #32
 800466a:	e003      	b.n	8004674 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	fab3 f383 	clz	r3, r3
 8004672:	b2db      	uxtb	r3, r3
 8004674:	3301      	adds	r3, #1
 8004676:	f003 031f 	and.w	r3, r3, #31
 800467a:	2101      	movs	r1, #1
 800467c:	fa01 f303 	lsl.w	r3, r1, r3
 8004680:	ea42 0103 	orr.w	r1, r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10d      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x670>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	0e9b      	lsrs	r3, r3, #26
 8004696:	3301      	adds	r3, #1
 8004698:	f003 021f 	and.w	r2, r3, #31
 800469c:	4613      	mov	r3, r2
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	4413      	add	r3, r2
 80046a2:	3b1e      	subs	r3, #30
 80046a4:	051b      	lsls	r3, r3, #20
 80046a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046aa:	e01b      	b.n	80046e4 <HAL_ADC_ConfigChannel+0x6a8>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	fa93 f3a3 	rbit	r3, r3
 80046b8:	613b      	str	r3, [r7, #16]
  return result;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80046c4:	2320      	movs	r3, #32
 80046c6:	e003      	b.n	80046d0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	fab3 f383 	clz	r3, r3
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	3301      	adds	r3, #1
 80046d2:	f003 021f 	and.w	r2, r3, #31
 80046d6:	4613      	mov	r3, r2
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	4413      	add	r3, r2
 80046dc:	3b1e      	subs	r3, #30
 80046de:	051b      	lsls	r3, r3, #20
 80046e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046ea:	4619      	mov	r1, r3
 80046ec:	f7ff f8eb 	bl	80038c6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	4b09      	ldr	r3, [pc, #36]	; (800471c <HAL_ADC_ConfigChannel+0x6e0>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80be 	beq.w	800487a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004706:	d004      	beq.n	8004712 <HAL_ADC_ConfigChannel+0x6d6>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a04      	ldr	r2, [pc, #16]	; (8004720 <HAL_ADC_ConfigChannel+0x6e4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d10a      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x6ec>
 8004712:	4b04      	ldr	r3, [pc, #16]	; (8004724 <HAL_ADC_ConfigChannel+0x6e8>)
 8004714:	e009      	b.n	800472a <HAL_ADC_ConfigChannel+0x6ee>
 8004716:	bf00      	nop
 8004718:	407f0000 	.word	0x407f0000
 800471c:	80080000 	.word	0x80080000
 8004720:	50000100 	.word	0x50000100
 8004724:	50000300 	.word	0x50000300
 8004728:	4b59      	ldr	r3, [pc, #356]	; (8004890 <HAL_ADC_ConfigChannel+0x854>)
 800472a:	4618      	mov	r0, r3
 800472c:	f7fe ffe0 	bl	80036f0 <LL_ADC_GetCommonPathInternalCh>
 8004730:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a56      	ldr	r2, [pc, #344]	; (8004894 <HAL_ADC_ConfigChannel+0x858>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d004      	beq.n	8004748 <HAL_ADC_ConfigChannel+0x70c>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a55      	ldr	r2, [pc, #340]	; (8004898 <HAL_ADC_ConfigChannel+0x85c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d13a      	bne.n	80047be <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800474c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d134      	bne.n	80047be <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800475c:	d005      	beq.n	800476a <HAL_ADC_ConfigChannel+0x72e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a4e      	ldr	r2, [pc, #312]	; (800489c <HAL_ADC_ConfigChannel+0x860>)
 8004764:	4293      	cmp	r3, r2
 8004766:	f040 8085 	bne.w	8004874 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004772:	d004      	beq.n	800477e <HAL_ADC_ConfigChannel+0x742>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a49      	ldr	r2, [pc, #292]	; (80048a0 <HAL_ADC_ConfigChannel+0x864>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d101      	bne.n	8004782 <HAL_ADC_ConfigChannel+0x746>
 800477e:	4a49      	ldr	r2, [pc, #292]	; (80048a4 <HAL_ADC_ConfigChannel+0x868>)
 8004780:	e000      	b.n	8004784 <HAL_ADC_ConfigChannel+0x748>
 8004782:	4a43      	ldr	r2, [pc, #268]	; (8004890 <HAL_ADC_ConfigChannel+0x854>)
 8004784:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004788:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800478c:	4619      	mov	r1, r3
 800478e:	4610      	mov	r0, r2
 8004790:	f7fe ff9b 	bl	80036ca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004794:	4b44      	ldr	r3, [pc, #272]	; (80048a8 <HAL_ADC_ConfigChannel+0x86c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	099b      	lsrs	r3, r3, #6
 800479a:	4a44      	ldr	r2, [pc, #272]	; (80048ac <HAL_ADC_ConfigChannel+0x870>)
 800479c:	fba2 2303 	umull	r2, r3, r2, r3
 80047a0:	099b      	lsrs	r3, r3, #6
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	4613      	mov	r3, r2
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80047ae:	e002      	b.n	80047b6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1f9      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047bc:	e05a      	b.n	8004874 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a3b      	ldr	r2, [pc, #236]	; (80048b0 <HAL_ADC_ConfigChannel+0x874>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d125      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80047c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d11f      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a31      	ldr	r2, [pc, #196]	; (80048a0 <HAL_ADC_ConfigChannel+0x864>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d104      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x7ac>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a34      	ldr	r2, [pc, #208]	; (80048b4 <HAL_ADC_ConfigChannel+0x878>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d047      	beq.n	8004878 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047f0:	d004      	beq.n	80047fc <HAL_ADC_ConfigChannel+0x7c0>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a2a      	ldr	r2, [pc, #168]	; (80048a0 <HAL_ADC_ConfigChannel+0x864>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d101      	bne.n	8004800 <HAL_ADC_ConfigChannel+0x7c4>
 80047fc:	4a29      	ldr	r2, [pc, #164]	; (80048a4 <HAL_ADC_ConfigChannel+0x868>)
 80047fe:	e000      	b.n	8004802 <HAL_ADC_ConfigChannel+0x7c6>
 8004800:	4a23      	ldr	r2, [pc, #140]	; (8004890 <HAL_ADC_ConfigChannel+0x854>)
 8004802:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800480a:	4619      	mov	r1, r3
 800480c:	4610      	mov	r0, r2
 800480e:	f7fe ff5c 	bl	80036ca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004812:	e031      	b.n	8004878 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a27      	ldr	r2, [pc, #156]	; (80048b8 <HAL_ADC_ConfigChannel+0x87c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d12d      	bne.n	800487a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800481e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d127      	bne.n	800487a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1c      	ldr	r2, [pc, #112]	; (80048a0 <HAL_ADC_ConfigChannel+0x864>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d022      	beq.n	800487a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800483c:	d004      	beq.n	8004848 <HAL_ADC_ConfigChannel+0x80c>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a17      	ldr	r2, [pc, #92]	; (80048a0 <HAL_ADC_ConfigChannel+0x864>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d101      	bne.n	800484c <HAL_ADC_ConfigChannel+0x810>
 8004848:	4a16      	ldr	r2, [pc, #88]	; (80048a4 <HAL_ADC_ConfigChannel+0x868>)
 800484a:	e000      	b.n	800484e <HAL_ADC_ConfigChannel+0x812>
 800484c:	4a10      	ldr	r2, [pc, #64]	; (8004890 <HAL_ADC_ConfigChannel+0x854>)
 800484e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004852:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004856:	4619      	mov	r1, r3
 8004858:	4610      	mov	r0, r2
 800485a:	f7fe ff36 	bl	80036ca <LL_ADC_SetCommonPathInternalCh>
 800485e:	e00c      	b.n	800487a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004864:	f043 0220 	orr.w	r2, r3, #32
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004872:	e002      	b.n	800487a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004874:	bf00      	nop
 8004876:	e000      	b.n	800487a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004878:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004882:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004886:	4618      	mov	r0, r3
 8004888:	37d8      	adds	r7, #216	; 0xd8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	50000700 	.word	0x50000700
 8004894:	c3210000 	.word	0xc3210000
 8004898:	90c00010 	.word	0x90c00010
 800489c:	50000600 	.word	0x50000600
 80048a0:	50000100 	.word	0x50000100
 80048a4:	50000300 	.word	0x50000300
 80048a8:	20000018 	.word	0x20000018
 80048ac:	053e2d63 	.word	0x053e2d63
 80048b0:	c7520000 	.word	0xc7520000
 80048b4:	50000500 	.word	0x50000500
 80048b8:	cb840000 	.word	0xcb840000

080048bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff f8b9 	bl	8003a44 <LL_ADC_IsEnabled>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d176      	bne.n	80049c6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	4b3c      	ldr	r3, [pc, #240]	; (80049d0 <ADC_Enable+0x114>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00d      	beq.n	8004902 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ea:	f043 0210 	orr.w	r2, r3, #16
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f6:	f043 0201 	orr.w	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e062      	b.n	80049c8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff f888 	bl	8003a1c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004914:	d004      	beq.n	8004920 <ADC_Enable+0x64>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a2e      	ldr	r2, [pc, #184]	; (80049d4 <ADC_Enable+0x118>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d101      	bne.n	8004924 <ADC_Enable+0x68>
 8004920:	4b2d      	ldr	r3, [pc, #180]	; (80049d8 <ADC_Enable+0x11c>)
 8004922:	e000      	b.n	8004926 <ADC_Enable+0x6a>
 8004924:	4b2d      	ldr	r3, [pc, #180]	; (80049dc <ADC_Enable+0x120>)
 8004926:	4618      	mov	r0, r3
 8004928:	f7fe fee2 	bl	80036f0 <LL_ADC_GetCommonPathInternalCh>
 800492c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800492e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004932:	2b00      	cmp	r3, #0
 8004934:	d013      	beq.n	800495e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004936:	4b2a      	ldr	r3, [pc, #168]	; (80049e0 <ADC_Enable+0x124>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	099b      	lsrs	r3, r3, #6
 800493c:	4a29      	ldr	r2, [pc, #164]	; (80049e4 <ADC_Enable+0x128>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	099b      	lsrs	r3, r3, #6
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	4613      	mov	r3, r2
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004950:	e002      	b.n	8004958 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	3b01      	subs	r3, #1
 8004956:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f9      	bne.n	8004952 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800495e:	f7fe fe73 	bl	8003648 <HAL_GetTick>
 8004962:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004964:	e028      	b.n	80049b8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff f86a 	bl	8003a44 <LL_ADC_IsEnabled>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d104      	bne.n	8004980 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff f84e 	bl	8003a1c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004980:	f7fe fe62 	bl	8003648 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d914      	bls.n	80049b8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b01      	cmp	r3, #1
 800499a:	d00d      	beq.n	80049b8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a0:	f043 0210 	orr.w	r2, r3, #16
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ac:	f043 0201 	orr.w	r2, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e007      	b.n	80049c8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d1cf      	bne.n	8004966 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	8000003f 	.word	0x8000003f
 80049d4:	50000100 	.word	0x50000100
 80049d8:	50000300 	.word	0x50000300
 80049dc:	50000700 	.word	0x50000700
 80049e0:	20000018 	.word	0x20000018
 80049e4:	053e2d63 	.word	0x053e2d63

080049e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d14b      	bne.n	8004a9a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d021      	beq.n	8004a60 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fe ff11 	bl	8003848 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d032      	beq.n	8004a92 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d12b      	bne.n	8004a92 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d11f      	bne.n	8004a92 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a56:	f043 0201 	orr.w	r2, r3, #1
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a5e:	e018      	b.n	8004a92 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d111      	bne.n	8004a92 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d105      	bne.n	8004a92 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8a:	f043 0201 	orr.w	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7ff fab4 	bl	8004000 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a98:	e00e      	b.n	8004ab8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f7ff fabe 	bl	8004028 <HAL_ADC_ErrorCallback>
}
 8004aac:	e004      	b.n	8004ab8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	4798      	blx	r3
}
 8004ab8:	bf00      	nop
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7ff faa0 	bl	8004014 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ad4:	bf00      	nop
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004afa:	f043 0204 	orr.w	r2, r3, #4
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f7ff fa90 	bl	8004028 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <LL_ADC_IsEnabled>:
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <LL_ADC_IsEnabled+0x18>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <LL_ADC_IsEnabled+0x1a>
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <LL_ADC_REG_IsConversionOngoing>:
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d101      	bne.n	8004b4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004b5c:	b590      	push	{r4, r7, lr}
 8004b5e:	b0a1      	sub	sp, #132	; 0x84
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b76:	2302      	movs	r3, #2
 8004b78:	e0e7      	b.n	8004d4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004b82:	2300      	movs	r3, #0
 8004b84:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004b86:	2300      	movs	r3, #0
 8004b88:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b92:	d102      	bne.n	8004b9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b94:	4b6f      	ldr	r3, [pc, #444]	; (8004d54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b96:	60bb      	str	r3, [r7, #8]
 8004b98:	e009      	b.n	8004bae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a6e      	ldr	r2, [pc, #440]	; (8004d58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d102      	bne.n	8004baa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004ba4:	4b6d      	ldr	r3, [pc, #436]	; (8004d5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004ba6:	60bb      	str	r3, [r7, #8]
 8004ba8:	e001      	b.n	8004bae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004baa:	2300      	movs	r3, #0
 8004bac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10b      	bne.n	8004bcc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb8:	f043 0220 	orr.w	r2, r3, #32
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0be      	b.n	8004d4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff ffb1 	bl	8004b36 <LL_ADC_REG_IsConversionOngoing>
 8004bd4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff ffab 	bl	8004b36 <LL_ADC_REG_IsConversionOngoing>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f040 80a0 	bne.w	8004d28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f040 809c 	bne.w	8004d28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bf8:	d004      	beq.n	8004c04 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a55      	ldr	r2, [pc, #340]	; (8004d54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d101      	bne.n	8004c08 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004c04:	4b56      	ldr	r3, [pc, #344]	; (8004d60 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004c06:	e000      	b.n	8004c0a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004c08:	4b56      	ldr	r3, [pc, #344]	; (8004d64 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004c0a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d04b      	beq.n	8004cac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	6859      	ldr	r1, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c26:	035b      	lsls	r3, r3, #13
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c2e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c38:	d004      	beq.n	8004c44 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a45      	ldr	r2, [pc, #276]	; (8004d54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d10f      	bne.n	8004c64 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004c44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004c48:	f7ff ff62 	bl	8004b10 <LL_ADC_IsEnabled>
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	4841      	ldr	r0, [pc, #260]	; (8004d54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c50:	f7ff ff5e 	bl	8004b10 <LL_ADC_IsEnabled>
 8004c54:	4603      	mov	r3, r0
 8004c56:	4323      	orrs	r3, r4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e012      	b.n	8004c8a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004c64:	483c      	ldr	r0, [pc, #240]	; (8004d58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004c66:	f7ff ff53 	bl	8004b10 <LL_ADC_IsEnabled>
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	483b      	ldr	r0, [pc, #236]	; (8004d5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004c6e:	f7ff ff4f 	bl	8004b10 <LL_ADC_IsEnabled>
 8004c72:	4603      	mov	r3, r0
 8004c74:	431c      	orrs	r4, r3
 8004c76:	483c      	ldr	r0, [pc, #240]	; (8004d68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004c78:	f7ff ff4a 	bl	8004b10 <LL_ADC_IsEnabled>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4323      	orrs	r3, r4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bf0c      	ite	eq
 8004c84:	2301      	moveq	r3, #1
 8004c86:	2300      	movne	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d056      	beq.n	8004d3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004c96:	f023 030f 	bic.w	r3, r3, #15
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	6811      	ldr	r1, [r2, #0]
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	6892      	ldr	r2, [r2, #8]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ca8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004caa:	e047      	b.n	8004d3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cb6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cc0:	d004      	beq.n	8004ccc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a23      	ldr	r2, [pc, #140]	; (8004d54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d10f      	bne.n	8004cec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004ccc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004cd0:	f7ff ff1e 	bl	8004b10 <LL_ADC_IsEnabled>
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	481f      	ldr	r0, [pc, #124]	; (8004d54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004cd8:	f7ff ff1a 	bl	8004b10 <LL_ADC_IsEnabled>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	4323      	orrs	r3, r4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	bf0c      	ite	eq
 8004ce4:	2301      	moveq	r3, #1
 8004ce6:	2300      	movne	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	e012      	b.n	8004d12 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004cec:	481a      	ldr	r0, [pc, #104]	; (8004d58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004cee:	f7ff ff0f 	bl	8004b10 <LL_ADC_IsEnabled>
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	4819      	ldr	r0, [pc, #100]	; (8004d5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004cf6:	f7ff ff0b 	bl	8004b10 <LL_ADC_IsEnabled>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	431c      	orrs	r4, r3
 8004cfe:	481a      	ldr	r0, [pc, #104]	; (8004d68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004d00:	f7ff ff06 	bl	8004b10 <LL_ADC_IsEnabled>
 8004d04:	4603      	mov	r3, r0
 8004d06:	4323      	orrs	r3, r4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bf0c      	ite	eq
 8004d0c:	2301      	moveq	r3, #1
 8004d0e:	2300      	movne	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d012      	beq.n	8004d3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004d1e:	f023 030f 	bic.w	r3, r3, #15
 8004d22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004d24:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d26:	e009      	b.n	8004d3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2c:	f043 0220 	orr.w	r2, r3, #32
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004d3a:	e000      	b.n	8004d3e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004d46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3784      	adds	r7, #132	; 0x84
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd90      	pop	{r4, r7, pc}
 8004d52:	bf00      	nop
 8004d54:	50000100 	.word	0x50000100
 8004d58:	50000400 	.word	0x50000400
 8004d5c:	50000500 	.word	0x50000500
 8004d60:	50000300 	.word	0x50000300
 8004d64:	50000700 	.word	0x50000700
 8004d68:	50000600 	.word	0x50000600

08004d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <__NVIC_SetPriorityGrouping+0x44>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d88:	4013      	ands	r3, r2
 8004d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d9e:	4a04      	ldr	r2, [pc, #16]	; (8004db0 <__NVIC_SetPriorityGrouping+0x44>)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	60d3      	str	r3, [r2, #12]
}
 8004da4:	bf00      	nop
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	e000ed00 	.word	0xe000ed00

08004db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004db8:	4b04      	ldr	r3, [pc, #16]	; (8004dcc <__NVIC_GetPriorityGrouping+0x18>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	0a1b      	lsrs	r3, r3, #8
 8004dbe:	f003 0307 	and.w	r3, r3, #7
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	e000ed00 	.word	0xe000ed00

08004dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	db0b      	blt.n	8004dfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004de2:	79fb      	ldrb	r3, [r7, #7]
 8004de4:	f003 021f 	and.w	r2, r3, #31
 8004de8:	4907      	ldr	r1, [pc, #28]	; (8004e08 <__NVIC_EnableIRQ+0x38>)
 8004dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	2001      	movs	r0, #1
 8004df2:	fa00 f202 	lsl.w	r2, r0, r2
 8004df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	e000e100 	.word	0xe000e100

08004e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	6039      	str	r1, [r7, #0]
 8004e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	db0a      	blt.n	8004e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	490c      	ldr	r1, [pc, #48]	; (8004e58 <__NVIC_SetPriority+0x4c>)
 8004e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e2a:	0112      	lsls	r2, r2, #4
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	440b      	add	r3, r1
 8004e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e34:	e00a      	b.n	8004e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	4908      	ldr	r1, [pc, #32]	; (8004e5c <__NVIC_SetPriority+0x50>)
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	3b04      	subs	r3, #4
 8004e44:	0112      	lsls	r2, r2, #4
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	440b      	add	r3, r1
 8004e4a:	761a      	strb	r2, [r3, #24]
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	e000e100 	.word	0xe000e100
 8004e5c:	e000ed00 	.word	0xe000ed00

08004e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b089      	sub	sp, #36	; 0x24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f1c3 0307 	rsb	r3, r3, #7
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	bf28      	it	cs
 8004e7e:	2304      	movcs	r3, #4
 8004e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	3304      	adds	r3, #4
 8004e86:	2b06      	cmp	r3, #6
 8004e88:	d902      	bls.n	8004e90 <NVIC_EncodePriority+0x30>
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	3b03      	subs	r3, #3
 8004e8e:	e000      	b.n	8004e92 <NVIC_EncodePriority+0x32>
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	43da      	mvns	r2, r3
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	401a      	ands	r2, r3
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb2:	43d9      	mvns	r1, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb8:	4313      	orrs	r3, r2
         );
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3724      	adds	r7, #36	; 0x24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
	...

08004ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ed8:	d301      	bcc.n	8004ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004eda:	2301      	movs	r3, #1
 8004edc:	e00f      	b.n	8004efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ede:	4a0a      	ldr	r2, [pc, #40]	; (8004f08 <SysTick_Config+0x40>)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ee6:	210f      	movs	r1, #15
 8004ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004eec:	f7ff ff8e 	bl	8004e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <SysTick_Config+0x40>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ef6:	4b04      	ldr	r3, [pc, #16]	; (8004f08 <SysTick_Config+0x40>)
 8004ef8:	2207      	movs	r2, #7
 8004efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	e000e010 	.word	0xe000e010

08004f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff ff29 	bl	8004d6c <__NVIC_SetPriorityGrouping>
}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b086      	sub	sp, #24
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	4603      	mov	r3, r0
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f30:	f7ff ff40 	bl	8004db4 <__NVIC_GetPriorityGrouping>
 8004f34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	6978      	ldr	r0, [r7, #20]
 8004f3c:	f7ff ff90 	bl	8004e60 <NVIC_EncodePriority>
 8004f40:	4602      	mov	r2, r0
 8004f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f46:	4611      	mov	r1, r2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff ff5f 	bl	8004e0c <__NVIC_SetPriority>
}
 8004f4e:	bf00      	nop
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b082      	sub	sp, #8
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff ff33 	bl	8004dd0 <__NVIC_EnableIRQ>
}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7ff ffa4 	bl	8004ec8 <SysTick_Config>
 8004f80:	4603      	mov	r3, r0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e08d      	b.n	80050ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4b47      	ldr	r3, [pc, #284]	; (80050c4 <HAL_DMA_Init+0x138>)
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d80f      	bhi.n	8004fca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4b45      	ldr	r3, [pc, #276]	; (80050c8 <HAL_DMA_Init+0x13c>)
 8004fb2:	4413      	add	r3, r2
 8004fb4:	4a45      	ldr	r2, [pc, #276]	; (80050cc <HAL_DMA_Init+0x140>)
 8004fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fba:	091b      	lsrs	r3, r3, #4
 8004fbc:	009a      	lsls	r2, r3, #2
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a42      	ldr	r2, [pc, #264]	; (80050d0 <HAL_DMA_Init+0x144>)
 8004fc6:	641a      	str	r2, [r3, #64]	; 0x40
 8004fc8:	e00e      	b.n	8004fe8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	4b40      	ldr	r3, [pc, #256]	; (80050d4 <HAL_DMA_Init+0x148>)
 8004fd2:	4413      	add	r3, r2
 8004fd4:	4a3d      	ldr	r2, [pc, #244]	; (80050cc <HAL_DMA_Init+0x140>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	091b      	lsrs	r3, r3, #4
 8004fdc:	009a      	lsls	r2, r3, #2
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a3c      	ldr	r2, [pc, #240]	; (80050d8 <HAL_DMA_Init+0x14c>)
 8004fe6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800500c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005018:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005024:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f9b6 	bl	80053ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005048:	d102      	bne.n	8005050 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005064:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d010      	beq.n	8005090 <HAL_DMA_Init+0x104>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b04      	cmp	r3, #4
 8005074:	d80c      	bhi.n	8005090 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f9d6 	bl	8005428 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800508c:	605a      	str	r2, [r3, #4]
 800508e:	e008      	b.n	80050a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	40020407 	.word	0x40020407
 80050c8:	bffdfff8 	.word	0xbffdfff8
 80050cc:	cccccccd 	.word	0xcccccccd
 80050d0:	40020000 	.word	0x40020000
 80050d4:	bffdfbf8 	.word	0xbffdfbf8
 80050d8:	40020400 	.word	0x40020400

080050dc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <HAL_DMA_Start_IT+0x20>
 80050f8:	2302      	movs	r3, #2
 80050fa:	e066      	b.n	80051ca <HAL_DMA_Start_IT+0xee>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	d155      	bne.n	80051bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0201 	bic.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f8fb 	bl	8005330 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513e:	2b00      	cmp	r3, #0
 8005140:	d008      	beq.n	8005154 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 020e 	orr.w	r2, r2, #14
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	e00f      	b.n	8005174 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0204 	bic.w	r2, r2, #4
 8005162:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 020a 	orr.w	r2, r2, #10
 8005172:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d007      	beq.n	8005192 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800518c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005190:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0201 	orr.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	e005      	b.n	80051c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80051c4:	2302      	movs	r3, #2
 80051c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ee:	f003 031f 	and.w	r3, r3, #31
 80051f2:	2204      	movs	r2, #4
 80051f4:	409a      	lsls	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4013      	ands	r3, r2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d026      	beq.n	800524c <HAL_DMA_IRQHandler+0x7a>
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d021      	beq.n	800524c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b00      	cmp	r3, #0
 8005214:	d107      	bne.n	8005226 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0204 	bic.w	r2, r2, #4
 8005224:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	f003 021f 	and.w	r2, r3, #31
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	2104      	movs	r1, #4
 8005234:	fa01 f202 	lsl.w	r2, r1, r2
 8005238:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	2b00      	cmp	r3, #0
 8005240:	d071      	beq.n	8005326 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800524a:	e06c      	b.n	8005326 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005250:	f003 031f 	and.w	r3, r3, #31
 8005254:	2202      	movs	r2, #2
 8005256:	409a      	lsls	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4013      	ands	r3, r2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d02e      	beq.n	80052be <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d029      	beq.n	80052be <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10b      	bne.n	8005290 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 020a 	bic.w	r2, r2, #10
 8005286:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005294:	f003 021f 	and.w	r2, r3, #31
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	2102      	movs	r1, #2
 800529e:	fa01 f202 	lsl.w	r2, r1, r2
 80052a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d038      	beq.n	8005326 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80052bc:	e033      	b.n	8005326 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c2:	f003 031f 	and.w	r3, r3, #31
 80052c6:	2208      	movs	r2, #8
 80052c8:	409a      	lsls	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4013      	ands	r3, r2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d02a      	beq.n	8005328 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d025      	beq.n	8005328 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 020e 	bic.w	r2, r2, #14
 80052ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f0:	f003 021f 	and.w	r2, r3, #31
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f8:	2101      	movs	r1, #1
 80052fa:	fa01 f202 	lsl.w	r2, r1, r2
 80052fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531a:	2b00      	cmp	r3, #0
 800531c:	d004      	beq.n	8005328 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005326:	bf00      	nop
 8005328:	bf00      	nop
}
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005346:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005358:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535e:	f003 021f 	and.w	r2, r3, #31
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	2101      	movs	r1, #1
 8005368:	fa01 f202 	lsl.w	r2, r1, r2
 800536c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	2b10      	cmp	r3, #16
 800537c:	d108      	bne.n	8005390 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800538e:	e007      	b.n	80053a0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	60da      	str	r2, [r3, #12]
}
 80053a0:	bf00      	nop
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	4b16      	ldr	r3, [pc, #88]	; (8005414 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80053bc:	429a      	cmp	r2, r3
 80053be:	d802      	bhi.n	80053c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80053c0:	4b15      	ldr	r3, [pc, #84]	; (8005418 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	e001      	b.n	80053ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80053c6:	4b15      	ldr	r3, [pc, #84]	; (800541c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80053c8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	3b08      	subs	r3, #8
 80053d6:	4a12      	ldr	r2, [pc, #72]	; (8005420 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80053d8:	fba2 2303 	umull	r2, r3, r2, r3
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e4:	089b      	lsrs	r3, r3, #2
 80053e6:	009a      	lsls	r2, r3, #2
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	4413      	add	r3, r2
 80053ec:	461a      	mov	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a0b      	ldr	r2, [pc, #44]	; (8005424 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80053f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f003 031f 	and.w	r3, r3, #31
 80053fe:	2201      	movs	r2, #1
 8005400:	409a      	lsls	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005406:	bf00      	nop
 8005408:	371c      	adds	r7, #28
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40020407 	.word	0x40020407
 8005418:	40020800 	.word	0x40020800
 800541c:	40020820 	.word	0x40020820
 8005420:	cccccccd 	.word	0xcccccccd
 8005424:	40020880 	.word	0x40020880

08005428 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	b2db      	uxtb	r3, r3
 8005436:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800543c:	4413      	add	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	461a      	mov	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a08      	ldr	r2, [pc, #32]	; (800546c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800544a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3b01      	subs	r3, #1
 8005450:	f003 031f 	and.w	r3, r3, #31
 8005454:	2201      	movs	r2, #1
 8005456:	409a      	lsls	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800545c:	bf00      	nop
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	1000823f 	.word	0x1000823f
 800546c:	40020940 	.word	0x40020940

08005470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800547e:	e15a      	b.n	8005736 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	2101      	movs	r1, #1
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	fa01 f303 	lsl.w	r3, r1, r3
 800548c:	4013      	ands	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 814c 	beq.w	8005730 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f003 0303 	and.w	r3, r3, #3
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d005      	beq.n	80054b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d130      	bne.n	8005512 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	2203      	movs	r2, #3
 80054bc:	fa02 f303 	lsl.w	r3, r2, r3
 80054c0:	43db      	mvns	r3, r3
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4013      	ands	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	fa02 f303 	lsl.w	r3, r2, r3
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054e6:	2201      	movs	r2, #1
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	43db      	mvns	r3, r3
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4013      	ands	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	091b      	lsrs	r3, r3, #4
 80054fc:	f003 0201 	and.w	r2, r3, #1
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	2b03      	cmp	r3, #3
 800551c:	d017      	beq.n	800554e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	2203      	movs	r2, #3
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	43db      	mvns	r3, r3
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4013      	ands	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d123      	bne.n	80055a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	08da      	lsrs	r2, r3, #3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3208      	adds	r2, #8
 8005562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005566:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	220f      	movs	r2, #15
 8005572:	fa02 f303 	lsl.w	r3, r2, r3
 8005576:	43db      	mvns	r3, r3
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4013      	ands	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	fa02 f303 	lsl.w	r3, r2, r3
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	08da      	lsrs	r2, r3, #3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3208      	adds	r2, #8
 800559c:	6939      	ldr	r1, [r7, #16]
 800559e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	2203      	movs	r2, #3
 80055ae:	fa02 f303 	lsl.w	r3, r2, r3
 80055b2:	43db      	mvns	r3, r3
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4013      	ands	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f003 0203 	and.w	r2, r3, #3
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 80a6 	beq.w	8005730 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055e4:	4b5b      	ldr	r3, [pc, #364]	; (8005754 <HAL_GPIO_Init+0x2e4>)
 80055e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e8:	4a5a      	ldr	r2, [pc, #360]	; (8005754 <HAL_GPIO_Init+0x2e4>)
 80055ea:	f043 0301 	orr.w	r3, r3, #1
 80055ee:	6613      	str	r3, [r2, #96]	; 0x60
 80055f0:	4b58      	ldr	r3, [pc, #352]	; (8005754 <HAL_GPIO_Init+0x2e4>)
 80055f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055fc:	4a56      	ldr	r2, [pc, #344]	; (8005758 <HAL_GPIO_Init+0x2e8>)
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	089b      	lsrs	r3, r3, #2
 8005602:	3302      	adds	r3, #2
 8005604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005608:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f003 0303 	and.w	r3, r3, #3
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	220f      	movs	r2, #15
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	43db      	mvns	r3, r3
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4013      	ands	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005626:	d01f      	beq.n	8005668 <HAL_GPIO_Init+0x1f8>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a4c      	ldr	r2, [pc, #304]	; (800575c <HAL_GPIO_Init+0x2ec>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d019      	beq.n	8005664 <HAL_GPIO_Init+0x1f4>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a4b      	ldr	r2, [pc, #300]	; (8005760 <HAL_GPIO_Init+0x2f0>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d013      	beq.n	8005660 <HAL_GPIO_Init+0x1f0>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a4a      	ldr	r2, [pc, #296]	; (8005764 <HAL_GPIO_Init+0x2f4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00d      	beq.n	800565c <HAL_GPIO_Init+0x1ec>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a49      	ldr	r2, [pc, #292]	; (8005768 <HAL_GPIO_Init+0x2f8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d007      	beq.n	8005658 <HAL_GPIO_Init+0x1e8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a48      	ldr	r2, [pc, #288]	; (800576c <HAL_GPIO_Init+0x2fc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d101      	bne.n	8005654 <HAL_GPIO_Init+0x1e4>
 8005650:	2305      	movs	r3, #5
 8005652:	e00a      	b.n	800566a <HAL_GPIO_Init+0x1fa>
 8005654:	2306      	movs	r3, #6
 8005656:	e008      	b.n	800566a <HAL_GPIO_Init+0x1fa>
 8005658:	2304      	movs	r3, #4
 800565a:	e006      	b.n	800566a <HAL_GPIO_Init+0x1fa>
 800565c:	2303      	movs	r3, #3
 800565e:	e004      	b.n	800566a <HAL_GPIO_Init+0x1fa>
 8005660:	2302      	movs	r3, #2
 8005662:	e002      	b.n	800566a <HAL_GPIO_Init+0x1fa>
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <HAL_GPIO_Init+0x1fa>
 8005668:	2300      	movs	r3, #0
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	f002 0203 	and.w	r2, r2, #3
 8005670:	0092      	lsls	r2, r2, #2
 8005672:	4093      	lsls	r3, r2
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800567a:	4937      	ldr	r1, [pc, #220]	; (8005758 <HAL_GPIO_Init+0x2e8>)
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	089b      	lsrs	r3, r3, #2
 8005680:	3302      	adds	r3, #2
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005688:	4b39      	ldr	r3, [pc, #228]	; (8005770 <HAL_GPIO_Init+0x300>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	43db      	mvns	r3, r3
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4013      	ands	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80056ac:	4a30      	ldr	r2, [pc, #192]	; (8005770 <HAL_GPIO_Init+0x300>)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80056b2:	4b2f      	ldr	r3, [pc, #188]	; (8005770 <HAL_GPIO_Init+0x300>)
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	43db      	mvns	r3, r3
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4013      	ands	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80056d6:	4a26      	ldr	r2, [pc, #152]	; (8005770 <HAL_GPIO_Init+0x300>)
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80056dc:	4b24      	ldr	r3, [pc, #144]	; (8005770 <HAL_GPIO_Init+0x300>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	43db      	mvns	r3, r3
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4013      	ands	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005700:	4a1b      	ldr	r2, [pc, #108]	; (8005770 <HAL_GPIO_Init+0x300>)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005706:	4b1a      	ldr	r3, [pc, #104]	; (8005770 <HAL_GPIO_Init+0x300>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	43db      	mvns	r3, r3
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4013      	ands	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4313      	orrs	r3, r2
 8005728:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800572a:	4a11      	ldr	r2, [pc, #68]	; (8005770 <HAL_GPIO_Init+0x300>)
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	3301      	adds	r3, #1
 8005734:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	f47f ae9d 	bne.w	8005480 <HAL_GPIO_Init+0x10>
  }
}
 8005746:	bf00      	nop
 8005748:	bf00      	nop
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	40021000 	.word	0x40021000
 8005758:	40010000 	.word	0x40010000
 800575c:	48000400 	.word	0x48000400
 8005760:	48000800 	.word	0x48000800
 8005764:	48000c00 	.word	0x48000c00
 8005768:	48001000 	.word	0x48001000
 800576c:	48001400 	.word	0x48001400
 8005770:	40010400 	.word	0x40010400

08005774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	887b      	ldrh	r3, [r7, #2]
 8005786:	4013      	ands	r3, r2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800578c:	2301      	movs	r3, #1
 800578e:	73fb      	strb	r3, [r7, #15]
 8005790:	e001      	b.n	8005796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005792:	2300      	movs	r3, #0
 8005794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005796:	7bfb      	ldrb	r3, [r7, #15]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	807b      	strh	r3, [r7, #2]
 80057b0:	4613      	mov	r3, r2
 80057b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057b4:	787b      	ldrb	r3, [r7, #1]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057ba:	887a      	ldrh	r2, [r7, #2]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80057c0:	e002      	b.n	80057c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80057c2:	887a      	ldrh	r2, [r7, #2]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80057de:	4b08      	ldr	r3, [pc, #32]	; (8005800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057e0:	695a      	ldr	r2, [r3, #20]
 80057e2:	88fb      	ldrh	r3, [r7, #6]
 80057e4:	4013      	ands	r3, r2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d006      	beq.n	80057f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057ea:	4a05      	ldr	r2, [pc, #20]	; (8005800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057ec:	88fb      	ldrh	r3, [r7, #6]
 80057ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057f0:	88fb      	ldrh	r3, [r7, #6]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fc fc4e 	bl	8002094 <HAL_GPIO_EXTI_Callback>
  }
}
 80057f8:	bf00      	nop
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	40010400 	.word	0x40010400

08005804 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d141      	bne.n	8005896 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005812:	4b4b      	ldr	r3, [pc, #300]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800581a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800581e:	d131      	bne.n	8005884 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005820:	4b47      	ldr	r3, [pc, #284]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005826:	4a46      	ldr	r2, [pc, #280]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800582c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005830:	4b43      	ldr	r3, [pc, #268]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005838:	4a41      	ldr	r2, [pc, #260]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800583a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800583e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005840:	4b40      	ldr	r3, [pc, #256]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2232      	movs	r2, #50	; 0x32
 8005846:	fb02 f303 	mul.w	r3, r2, r3
 800584a:	4a3f      	ldr	r2, [pc, #252]	; (8005948 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800584c:	fba2 2303 	umull	r2, r3, r2, r3
 8005850:	0c9b      	lsrs	r3, r3, #18
 8005852:	3301      	adds	r3, #1
 8005854:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005856:	e002      	b.n	800585e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	3b01      	subs	r3, #1
 800585c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800585e:	4b38      	ldr	r3, [pc, #224]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800586a:	d102      	bne.n	8005872 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f2      	bne.n	8005858 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005872:	4b33      	ldr	r3, [pc, #204]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800587a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800587e:	d158      	bne.n	8005932 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e057      	b.n	8005934 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005884:	4b2e      	ldr	r3, [pc, #184]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800588a:	4a2d      	ldr	r2, [pc, #180]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800588c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005890:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005894:	e04d      	b.n	8005932 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800589c:	d141      	bne.n	8005922 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800589e:	4b28      	ldr	r3, [pc, #160]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058aa:	d131      	bne.n	8005910 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058ac:	4b24      	ldr	r3, [pc, #144]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058b2:	4a23      	ldr	r2, [pc, #140]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058bc:	4b20      	ldr	r3, [pc, #128]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058c4:	4a1e      	ldr	r2, [pc, #120]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058cc:	4b1d      	ldr	r3, [pc, #116]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2232      	movs	r2, #50	; 0x32
 80058d2:	fb02 f303 	mul.w	r3, r2, r3
 80058d6:	4a1c      	ldr	r2, [pc, #112]	; (8005948 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80058d8:	fba2 2303 	umull	r2, r3, r2, r3
 80058dc:	0c9b      	lsrs	r3, r3, #18
 80058de:	3301      	adds	r3, #1
 80058e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058e2:	e002      	b.n	80058ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058ea:	4b15      	ldr	r3, [pc, #84]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f6:	d102      	bne.n	80058fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1f2      	bne.n	80058e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058fe:	4b10      	ldr	r3, [pc, #64]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800590a:	d112      	bne.n	8005932 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e011      	b.n	8005934 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005916:	4a0a      	ldr	r2, [pc, #40]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800591c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005920:	e007      	b.n	8005932 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005922:	4b07      	ldr	r3, [pc, #28]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800592a:	4a05      	ldr	r2, [pc, #20]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800592c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005930:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	40007000 	.word	0x40007000
 8005944:	20000018 	.word	0x20000018
 8005948:	431bde83 	.word	0x431bde83

0800594c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005950:	4b05      	ldr	r3, [pc, #20]	; (8005968 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	4a04      	ldr	r2, [pc, #16]	; (8005968 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005956:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800595a:	6093      	str	r3, [r2, #8]
}
 800595c:	bf00      	nop
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	40007000 	.word	0x40007000

0800596c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b088      	sub	sp, #32
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e2fe      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d075      	beq.n	8005a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800598a:	4b97      	ldr	r3, [pc, #604]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 030c 	and.w	r3, r3, #12
 8005992:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005994:	4b94      	ldr	r3, [pc, #592]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f003 0303 	and.w	r3, r3, #3
 800599c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	2b0c      	cmp	r3, #12
 80059a2:	d102      	bne.n	80059aa <HAL_RCC_OscConfig+0x3e>
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d002      	beq.n	80059b0 <HAL_RCC_OscConfig+0x44>
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d10b      	bne.n	80059c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b0:	4b8d      	ldr	r3, [pc, #564]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d05b      	beq.n	8005a74 <HAL_RCC_OscConfig+0x108>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d157      	bne.n	8005a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e2d9      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059d0:	d106      	bne.n	80059e0 <HAL_RCC_OscConfig+0x74>
 80059d2:	4b85      	ldr	r3, [pc, #532]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a84      	ldr	r2, [pc, #528]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 80059d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	e01d      	b.n	8005a1c <HAL_RCC_OscConfig+0xb0>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059e8:	d10c      	bne.n	8005a04 <HAL_RCC_OscConfig+0x98>
 80059ea:	4b7f      	ldr	r3, [pc, #508]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a7e      	ldr	r2, [pc, #504]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 80059f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	4b7c      	ldr	r3, [pc, #496]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a7b      	ldr	r2, [pc, #492]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 80059fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	e00b      	b.n	8005a1c <HAL_RCC_OscConfig+0xb0>
 8005a04:	4b78      	ldr	r3, [pc, #480]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a77      	ldr	r2, [pc, #476]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	4b75      	ldr	r3, [pc, #468]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a74      	ldr	r2, [pc, #464]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d013      	beq.n	8005a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a24:	f7fd fe10 	bl	8003648 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a2c:	f7fd fe0c 	bl	8003648 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b64      	cmp	r3, #100	; 0x64
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e29e      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a3e:	4b6a      	ldr	r3, [pc, #424]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0f0      	beq.n	8005a2c <HAL_RCC_OscConfig+0xc0>
 8005a4a:	e014      	b.n	8005a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a4c:	f7fd fdfc 	bl	8003648 <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a52:	e008      	b.n	8005a66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a54:	f7fd fdf8 	bl	8003648 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b64      	cmp	r3, #100	; 0x64
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e28a      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a66:	4b60      	ldr	r3, [pc, #384]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1f0      	bne.n	8005a54 <HAL_RCC_OscConfig+0xe8>
 8005a72:	e000      	b.n	8005a76 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d075      	beq.n	8005b6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a82:	4b59      	ldr	r3, [pc, #356]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 030c 	and.w	r3, r3, #12
 8005a8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a8c:	4b56      	ldr	r3, [pc, #344]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f003 0303 	and.w	r3, r3, #3
 8005a94:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b0c      	cmp	r3, #12
 8005a9a:	d102      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x136>
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d002      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x13c>
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d11f      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aa8:	4b4f      	ldr	r3, [pc, #316]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x154>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e25d      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac0:	4b49      	ldr	r3, [pc, #292]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	061b      	lsls	r3, r3, #24
 8005ace:	4946      	ldr	r1, [pc, #280]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ad4:	4b45      	ldr	r3, [pc, #276]	; (8005bec <HAL_RCC_OscConfig+0x280>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fd fd69 	bl	80035b0 <HAL_InitTick>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d043      	beq.n	8005b6c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e249      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d023      	beq.n	8005b38 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005af0:	4b3d      	ldr	r3, [pc, #244]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a3c      	ldr	r2, [pc, #240]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afc:	f7fd fda4 	bl	8003648 <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b04:	f7fd fda0 	bl	8003648 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e232      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b16:	4b34      	ldr	r3, [pc, #208]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0f0      	beq.n	8005b04 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b22:	4b31      	ldr	r3, [pc, #196]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	061b      	lsls	r3, r3, #24
 8005b30:	492d      	ldr	r1, [pc, #180]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	604b      	str	r3, [r1, #4]
 8005b36:	e01a      	b.n	8005b6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b38:	4b2b      	ldr	r3, [pc, #172]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a2a      	ldr	r2, [pc, #168]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005b3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b44:	f7fd fd80 	bl	8003648 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b4c:	f7fd fd7c 	bl	8003648 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e20e      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b5e:	4b22      	ldr	r3, [pc, #136]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1f0      	bne.n	8005b4c <HAL_RCC_OscConfig+0x1e0>
 8005b6a:	e000      	b.n	8005b6e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d041      	beq.n	8005bfe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d01c      	beq.n	8005bbc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b82:	4b19      	ldr	r3, [pc, #100]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b88:	4a17      	ldr	r2, [pc, #92]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b92:	f7fd fd59 	bl	8003648 <HAL_GetTick>
 8005b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b98:	e008      	b.n	8005bac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b9a:	f7fd fd55 	bl	8003648 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e1e7      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bac:	4b0e      	ldr	r3, [pc, #56]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0ef      	beq.n	8005b9a <HAL_RCC_OscConfig+0x22e>
 8005bba:	e020      	b.n	8005bfe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bc2:	4a09      	ldr	r2, [pc, #36]	; (8005be8 <HAL_RCC_OscConfig+0x27c>)
 8005bc4:	f023 0301 	bic.w	r3, r3, #1
 8005bc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bcc:	f7fd fd3c 	bl	8003648 <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bd2:	e00d      	b.n	8005bf0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bd4:	f7fd fd38 	bl	8003648 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d906      	bls.n	8005bf0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e1ca      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>
 8005be6:	bf00      	nop
 8005be8:	40021000 	.word	0x40021000
 8005bec:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bf0:	4b8c      	ldr	r3, [pc, #560]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1ea      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0304 	and.w	r3, r3, #4
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 80a6 	beq.w	8005d58 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c10:	4b84      	ldr	r3, [pc, #528]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <HAL_RCC_OscConfig+0x2b4>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e000      	b.n	8005c22 <HAL_RCC_OscConfig+0x2b6>
 8005c20:	2300      	movs	r3, #0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00d      	beq.n	8005c42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c26:	4b7f      	ldr	r3, [pc, #508]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2a:	4a7e      	ldr	r2, [pc, #504]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c30:	6593      	str	r3, [r2, #88]	; 0x58
 8005c32:	4b7c      	ldr	r3, [pc, #496]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c42:	4b79      	ldr	r3, [pc, #484]	; (8005e28 <HAL_RCC_OscConfig+0x4bc>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d118      	bne.n	8005c80 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c4e:	4b76      	ldr	r3, [pc, #472]	; (8005e28 <HAL_RCC_OscConfig+0x4bc>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a75      	ldr	r2, [pc, #468]	; (8005e28 <HAL_RCC_OscConfig+0x4bc>)
 8005c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c5a:	f7fd fcf5 	bl	8003648 <HAL_GetTick>
 8005c5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c60:	e008      	b.n	8005c74 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c62:	f7fd fcf1 	bl	8003648 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e183      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c74:	4b6c      	ldr	r3, [pc, #432]	; (8005e28 <HAL_RCC_OscConfig+0x4bc>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0f0      	beq.n	8005c62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d108      	bne.n	8005c9a <HAL_RCC_OscConfig+0x32e>
 8005c88:	4b66      	ldr	r3, [pc, #408]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8e:	4a65      	ldr	r2, [pc, #404]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005c90:	f043 0301 	orr.w	r3, r3, #1
 8005c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c98:	e024      	b.n	8005ce4 <HAL_RCC_OscConfig+0x378>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2b05      	cmp	r3, #5
 8005ca0:	d110      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x358>
 8005ca2:	4b60      	ldr	r3, [pc, #384]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca8:	4a5e      	ldr	r2, [pc, #376]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005caa:	f043 0304 	orr.w	r3, r3, #4
 8005cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cb2:	4b5c      	ldr	r3, [pc, #368]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb8:	4a5a      	ldr	r2, [pc, #360]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005cba:	f043 0301 	orr.w	r3, r3, #1
 8005cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cc2:	e00f      	b.n	8005ce4 <HAL_RCC_OscConfig+0x378>
 8005cc4:	4b57      	ldr	r3, [pc, #348]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cca:	4a56      	ldr	r2, [pc, #344]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005ccc:	f023 0301 	bic.w	r3, r3, #1
 8005cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cd4:	4b53      	ldr	r3, [pc, #332]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cda:	4a52      	ldr	r2, [pc, #328]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005cdc:	f023 0304 	bic.w	r3, r3, #4
 8005ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d016      	beq.n	8005d1a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cec:	f7fd fcac 	bl	8003648 <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cf2:	e00a      	b.n	8005d0a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cf4:	f7fd fca8 	bl	8003648 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e138      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d0a:	4b46      	ldr	r3, [pc, #280]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0ed      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x388>
 8005d18:	e015      	b.n	8005d46 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1a:	f7fd fc95 	bl	8003648 <HAL_GetTick>
 8005d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d20:	e00a      	b.n	8005d38 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d22:	f7fd fc91 	bl	8003648 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e121      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d38:	4b3a      	ldr	r3, [pc, #232]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1ed      	bne.n	8005d22 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d46:	7ffb      	ldrb	r3, [r7, #31]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d105      	bne.n	8005d58 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d4c:	4b35      	ldr	r3, [pc, #212]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d50:	4a34      	ldr	r2, [pc, #208]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d56:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d03c      	beq.n	8005dde <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d01c      	beq.n	8005da6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d6c:	4b2d      	ldr	r3, [pc, #180]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d72:	4a2c      	ldr	r2, [pc, #176]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005d74:	f043 0301 	orr.w	r3, r3, #1
 8005d78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d7c:	f7fd fc64 	bl	8003648 <HAL_GetTick>
 8005d80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d84:	f7fd fc60 	bl	8003648 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e0f2      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d96:	4b23      	ldr	r3, [pc, #140]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005d98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0ef      	beq.n	8005d84 <HAL_RCC_OscConfig+0x418>
 8005da4:	e01b      	b.n	8005dde <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005da6:	4b1f      	ldr	r3, [pc, #124]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005da8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dac:	4a1d      	ldr	r2, [pc, #116]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005dae:	f023 0301 	bic.w	r3, r3, #1
 8005db2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db6:	f7fd fc47 	bl	8003648 <HAL_GetTick>
 8005dba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dbe:	f7fd fc43 	bl	8003648 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e0d5      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dd0:	4b14      	ldr	r3, [pc, #80]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005dd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1ef      	bne.n	8005dbe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 80c9 	beq.w	8005f7a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005de8:	4b0e      	ldr	r3, [pc, #56]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f003 030c 	and.w	r3, r3, #12
 8005df0:	2b0c      	cmp	r3, #12
 8005df2:	f000 8083 	beq.w	8005efc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d15e      	bne.n	8005ebc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dfe:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a08      	ldr	r2, [pc, #32]	; (8005e24 <HAL_RCC_OscConfig+0x4b8>)
 8005e04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0a:	f7fd fc1d 	bl	8003648 <HAL_GetTick>
 8005e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e10:	e00c      	b.n	8005e2c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e12:	f7fd fc19 	bl	8003648 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d905      	bls.n	8005e2c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e0ab      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>
 8005e24:	40021000 	.word	0x40021000
 8005e28:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e2c:	4b55      	ldr	r3, [pc, #340]	; (8005f84 <HAL_RCC_OscConfig+0x618>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1ec      	bne.n	8005e12 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e38:	4b52      	ldr	r3, [pc, #328]	; (8005f84 <HAL_RCC_OscConfig+0x618>)
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	4b52      	ldr	r3, [pc, #328]	; (8005f88 <HAL_RCC_OscConfig+0x61c>)
 8005e3e:	4013      	ands	r3, r2
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6a11      	ldr	r1, [r2, #32]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e48:	3a01      	subs	r2, #1
 8005e4a:	0112      	lsls	r2, r2, #4
 8005e4c:	4311      	orrs	r1, r2
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005e52:	0212      	lsls	r2, r2, #8
 8005e54:	4311      	orrs	r1, r2
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e5a:	0852      	lsrs	r2, r2, #1
 8005e5c:	3a01      	subs	r2, #1
 8005e5e:	0552      	lsls	r2, r2, #21
 8005e60:	4311      	orrs	r1, r2
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e66:	0852      	lsrs	r2, r2, #1
 8005e68:	3a01      	subs	r2, #1
 8005e6a:	0652      	lsls	r2, r2, #25
 8005e6c:	4311      	orrs	r1, r2
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e72:	06d2      	lsls	r2, r2, #27
 8005e74:	430a      	orrs	r2, r1
 8005e76:	4943      	ldr	r1, [pc, #268]	; (8005f84 <HAL_RCC_OscConfig+0x618>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e7c:	4b41      	ldr	r3, [pc, #260]	; (8005f84 <HAL_RCC_OscConfig+0x618>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a40      	ldr	r2, [pc, #256]	; (8005f84 <HAL_RCC_OscConfig+0x618>)
 8005e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e86:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e88:	4b3e      	ldr	r3, [pc, #248]	; (8005f84 <HAL_RCC_OscConfig+0x618>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	4a3d      	ldr	r2, [pc, #244]	; (8005f84 <HAL_RCC_OscConfig+0x618>)
 8005e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e94:	f7fd fbd8 	bl	8003648 <HAL_GetTick>
 8005e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e9c:	f7fd fbd4 	bl	8003648 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e066      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eae:	4b35      	ldr	r3, [pc, #212]	; (8005f84 <HAL_RCC_OscConfig+0x618>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0f0      	beq.n	8005e9c <HAL_RCC_OscConfig+0x530>
 8005eba:	e05e      	b.n	8005f7a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ebc:	4b31      	ldr	r3, [pc, #196]	; (8005f84 <HAL_RCC_OscConfig+0x618>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a30      	ldr	r2, [pc, #192]	; (8005f84 <HAL_RCC_OscConfig+0x618>)
 8005ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec8:	f7fd fbbe 	bl	8003648 <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ed0:	f7fd fbba 	bl	8003648 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e04c      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ee2:	4b28      	ldr	r3, [pc, #160]	; (8005f84 <HAL_RCC_OscConfig+0x618>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f0      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005eee:	4b25      	ldr	r3, [pc, #148]	; (8005f84 <HAL_RCC_OscConfig+0x618>)
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	4924      	ldr	r1, [pc, #144]	; (8005f84 <HAL_RCC_OscConfig+0x618>)
 8005ef4:	4b25      	ldr	r3, [pc, #148]	; (8005f8c <HAL_RCC_OscConfig+0x620>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	60cb      	str	r3, [r1, #12]
 8005efa:	e03e      	b.n	8005f7a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d101      	bne.n	8005f08 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e039      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005f08:	4b1e      	ldr	r3, [pc, #120]	; (8005f84 <HAL_RCC_OscConfig+0x618>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f003 0203 	and.w	r2, r3, #3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d12c      	bne.n	8005f76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	3b01      	subs	r3, #1
 8005f28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d123      	bne.n	8005f76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f38:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d11b      	bne.n	8005f76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d113      	bne.n	8005f76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f58:	085b      	lsrs	r3, r3, #1
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d109      	bne.n	8005f76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6c:	085b      	lsrs	r3, r3, #1
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d001      	beq.n	8005f7a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3720      	adds	r7, #32
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	40021000 	.word	0x40021000
 8005f88:	019f800c 	.word	0x019f800c
 8005f8c:	feeefffc 	.word	0xfeeefffc

08005f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e11e      	b.n	80061e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fa8:	4b91      	ldr	r3, [pc, #580]	; (80061f0 <HAL_RCC_ClockConfig+0x260>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 030f 	and.w	r3, r3, #15
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d910      	bls.n	8005fd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb6:	4b8e      	ldr	r3, [pc, #568]	; (80061f0 <HAL_RCC_ClockConfig+0x260>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f023 020f 	bic.w	r2, r3, #15
 8005fbe:	498c      	ldr	r1, [pc, #560]	; (80061f0 <HAL_RCC_ClockConfig+0x260>)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc6:	4b8a      	ldr	r3, [pc, #552]	; (80061f0 <HAL_RCC_ClockConfig+0x260>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 030f 	and.w	r3, r3, #15
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d001      	beq.n	8005fd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e106      	b.n	80061e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d073      	beq.n	80060cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	2b03      	cmp	r3, #3
 8005fea:	d129      	bne.n	8006040 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fec:	4b81      	ldr	r3, [pc, #516]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e0f4      	b.n	80061e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005ffc:	f000 f99e 	bl	800633c <RCC_GetSysClockFreqFromPLLSource>
 8006000:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	4a7c      	ldr	r2, [pc, #496]	; (80061f8 <HAL_RCC_ClockConfig+0x268>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d93f      	bls.n	800608a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800600a:	4b7a      	ldr	r3, [pc, #488]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d009      	beq.n	800602a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800601e:	2b00      	cmp	r3, #0
 8006020:	d033      	beq.n	800608a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006026:	2b00      	cmp	r3, #0
 8006028:	d12f      	bne.n	800608a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800602a:	4b72      	ldr	r3, [pc, #456]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006032:	4a70      	ldr	r2, [pc, #448]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 8006034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006038:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800603a:	2380      	movs	r3, #128	; 0x80
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	e024      	b.n	800608a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d107      	bne.n	8006058 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006048:	4b6a      	ldr	r3, [pc, #424]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d109      	bne.n	8006068 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e0c6      	b.n	80061e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006058:	4b66      	ldr	r3, [pc, #408]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e0be      	b.n	80061e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006068:	f000 f8ce 	bl	8006208 <HAL_RCC_GetSysClockFreq>
 800606c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	4a61      	ldr	r2, [pc, #388]	; (80061f8 <HAL_RCC_ClockConfig+0x268>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d909      	bls.n	800608a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006076:	4b5f      	ldr	r3, [pc, #380]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800607e:	4a5d      	ldr	r2, [pc, #372]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 8006080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006084:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006086:	2380      	movs	r3, #128	; 0x80
 8006088:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800608a:	4b5a      	ldr	r3, [pc, #360]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f023 0203 	bic.w	r2, r3, #3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	4957      	ldr	r1, [pc, #348]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 8006098:	4313      	orrs	r3, r2
 800609a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800609c:	f7fd fad4 	bl	8003648 <HAL_GetTick>
 80060a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a2:	e00a      	b.n	80060ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060a4:	f7fd fad0 	bl	8003648 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e095      	b.n	80061e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ba:	4b4e      	ldr	r3, [pc, #312]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 020c 	and.w	r2, r3, #12
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d1eb      	bne.n	80060a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d023      	beq.n	8006120 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d005      	beq.n	80060f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060e4:	4b43      	ldr	r3, [pc, #268]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	4a42      	ldr	r2, [pc, #264]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 80060ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80060ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0308 	and.w	r3, r3, #8
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d007      	beq.n	800610c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80060fc:	4b3d      	ldr	r3, [pc, #244]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006104:	4a3b      	ldr	r2, [pc, #236]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 8006106:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800610a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800610c:	4b39      	ldr	r3, [pc, #228]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	4936      	ldr	r1, [pc, #216]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 800611a:	4313      	orrs	r3, r2
 800611c:	608b      	str	r3, [r1, #8]
 800611e:	e008      	b.n	8006132 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	2b80      	cmp	r3, #128	; 0x80
 8006124:	d105      	bne.n	8006132 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006126:	4b33      	ldr	r3, [pc, #204]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	4a32      	ldr	r2, [pc, #200]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 800612c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006130:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006132:	4b2f      	ldr	r3, [pc, #188]	; (80061f0 <HAL_RCC_ClockConfig+0x260>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	429a      	cmp	r2, r3
 800613e:	d21d      	bcs.n	800617c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006140:	4b2b      	ldr	r3, [pc, #172]	; (80061f0 <HAL_RCC_ClockConfig+0x260>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f023 020f 	bic.w	r2, r3, #15
 8006148:	4929      	ldr	r1, [pc, #164]	; (80061f0 <HAL_RCC_ClockConfig+0x260>)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	4313      	orrs	r3, r2
 800614e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006150:	f7fd fa7a 	bl	8003648 <HAL_GetTick>
 8006154:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006156:	e00a      	b.n	800616e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006158:	f7fd fa76 	bl	8003648 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	f241 3288 	movw	r2, #5000	; 0x1388
 8006166:	4293      	cmp	r3, r2
 8006168:	d901      	bls.n	800616e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e03b      	b.n	80061e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800616e:	4b20      	ldr	r3, [pc, #128]	; (80061f0 <HAL_RCC_ClockConfig+0x260>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d1ed      	bne.n	8006158 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d008      	beq.n	800619a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006188:	4b1a      	ldr	r3, [pc, #104]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	4917      	ldr	r1, [pc, #92]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 8006196:	4313      	orrs	r3, r2
 8006198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d009      	beq.n	80061ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061a6:	4b13      	ldr	r3, [pc, #76]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	490f      	ldr	r1, [pc, #60]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061ba:	f000 f825 	bl	8006208 <HAL_RCC_GetSysClockFreq>
 80061be:	4602      	mov	r2, r0
 80061c0:	4b0c      	ldr	r3, [pc, #48]	; (80061f4 <HAL_RCC_ClockConfig+0x264>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	091b      	lsrs	r3, r3, #4
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	490c      	ldr	r1, [pc, #48]	; (80061fc <HAL_RCC_ClockConfig+0x26c>)
 80061cc:	5ccb      	ldrb	r3, [r1, r3]
 80061ce:	f003 031f 	and.w	r3, r3, #31
 80061d2:	fa22 f303 	lsr.w	r3, r2, r3
 80061d6:	4a0a      	ldr	r2, [pc, #40]	; (8006200 <HAL_RCC_ClockConfig+0x270>)
 80061d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80061da:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <HAL_RCC_ClockConfig+0x274>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fd f9e6 	bl	80035b0 <HAL_InitTick>
 80061e4:	4603      	mov	r3, r0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	40022000 	.word	0x40022000
 80061f4:	40021000 	.word	0x40021000
 80061f8:	04c4b400 	.word	0x04c4b400
 80061fc:	08009240 	.word	0x08009240
 8006200:	20000018 	.word	0x20000018
 8006204:	2000001c 	.word	0x2000001c

08006208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800620e:	4b2c      	ldr	r3, [pc, #176]	; (80062c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 030c 	and.w	r3, r3, #12
 8006216:	2b04      	cmp	r3, #4
 8006218:	d102      	bne.n	8006220 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800621a:	4b2a      	ldr	r3, [pc, #168]	; (80062c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800621c:	613b      	str	r3, [r7, #16]
 800621e:	e047      	b.n	80062b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006220:	4b27      	ldr	r3, [pc, #156]	; (80062c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f003 030c 	and.w	r3, r3, #12
 8006228:	2b08      	cmp	r3, #8
 800622a:	d102      	bne.n	8006232 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800622c:	4b26      	ldr	r3, [pc, #152]	; (80062c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	e03e      	b.n	80062b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006232:	4b23      	ldr	r3, [pc, #140]	; (80062c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 030c 	and.w	r3, r3, #12
 800623a:	2b0c      	cmp	r3, #12
 800623c:	d136      	bne.n	80062ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800623e:	4b20      	ldr	r3, [pc, #128]	; (80062c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006248:	4b1d      	ldr	r3, [pc, #116]	; (80062c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	091b      	lsrs	r3, r3, #4
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	3301      	adds	r3, #1
 8006254:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2b03      	cmp	r3, #3
 800625a:	d10c      	bne.n	8006276 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800625c:	4a1a      	ldr	r2, [pc, #104]	; (80062c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	fbb2 f3f3 	udiv	r3, r2, r3
 8006264:	4a16      	ldr	r2, [pc, #88]	; (80062c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006266:	68d2      	ldr	r2, [r2, #12]
 8006268:	0a12      	lsrs	r2, r2, #8
 800626a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800626e:	fb02 f303 	mul.w	r3, r2, r3
 8006272:	617b      	str	r3, [r7, #20]
      break;
 8006274:	e00c      	b.n	8006290 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006276:	4a13      	ldr	r2, [pc, #76]	; (80062c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	fbb2 f3f3 	udiv	r3, r2, r3
 800627e:	4a10      	ldr	r2, [pc, #64]	; (80062c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006280:	68d2      	ldr	r2, [r2, #12]
 8006282:	0a12      	lsrs	r2, r2, #8
 8006284:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006288:	fb02 f303 	mul.w	r3, r2, r3
 800628c:	617b      	str	r3, [r7, #20]
      break;
 800628e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006290:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	0e5b      	lsrs	r3, r3, #25
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	3301      	adds	r3, #1
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a8:	613b      	str	r3, [r7, #16]
 80062aa:	e001      	b.n	80062b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80062b0:	693b      	ldr	r3, [r7, #16]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40021000 	.word	0x40021000
 80062c4:	00f42400 	.word	0x00f42400
 80062c8:	016e3600 	.word	0x016e3600

080062cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062d0:	4b03      	ldr	r3, [pc, #12]	; (80062e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80062d2:	681b      	ldr	r3, [r3, #0]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	20000018 	.word	0x20000018

080062e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062e8:	f7ff fff0 	bl	80062cc <HAL_RCC_GetHCLKFreq>
 80062ec:	4602      	mov	r2, r0
 80062ee:	4b06      	ldr	r3, [pc, #24]	; (8006308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	0a1b      	lsrs	r3, r3, #8
 80062f4:	f003 0307 	and.w	r3, r3, #7
 80062f8:	4904      	ldr	r1, [pc, #16]	; (800630c <HAL_RCC_GetPCLK1Freq+0x28>)
 80062fa:	5ccb      	ldrb	r3, [r1, r3]
 80062fc:	f003 031f 	and.w	r3, r3, #31
 8006300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006304:	4618      	mov	r0, r3
 8006306:	bd80      	pop	{r7, pc}
 8006308:	40021000 	.word	0x40021000
 800630c:	08009250 	.word	0x08009250

08006310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006314:	f7ff ffda 	bl	80062cc <HAL_RCC_GetHCLKFreq>
 8006318:	4602      	mov	r2, r0
 800631a:	4b06      	ldr	r3, [pc, #24]	; (8006334 <HAL_RCC_GetPCLK2Freq+0x24>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	0adb      	lsrs	r3, r3, #11
 8006320:	f003 0307 	and.w	r3, r3, #7
 8006324:	4904      	ldr	r1, [pc, #16]	; (8006338 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006326:	5ccb      	ldrb	r3, [r1, r3]
 8006328:	f003 031f 	and.w	r3, r3, #31
 800632c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006330:	4618      	mov	r0, r3
 8006332:	bd80      	pop	{r7, pc}
 8006334:	40021000 	.word	0x40021000
 8006338:	08009250 	.word	0x08009250

0800633c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006342:	4b1e      	ldr	r3, [pc, #120]	; (80063bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800634c:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	091b      	lsrs	r3, r3, #4
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	3301      	adds	r3, #1
 8006358:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	2b03      	cmp	r3, #3
 800635e:	d10c      	bne.n	800637a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006360:	4a17      	ldr	r2, [pc, #92]	; (80063c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	fbb2 f3f3 	udiv	r3, r2, r3
 8006368:	4a14      	ldr	r2, [pc, #80]	; (80063bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800636a:	68d2      	ldr	r2, [r2, #12]
 800636c:	0a12      	lsrs	r2, r2, #8
 800636e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006372:	fb02 f303 	mul.w	r3, r2, r3
 8006376:	617b      	str	r3, [r7, #20]
    break;
 8006378:	e00c      	b.n	8006394 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800637a:	4a12      	ldr	r2, [pc, #72]	; (80063c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006382:	4a0e      	ldr	r2, [pc, #56]	; (80063bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006384:	68d2      	ldr	r2, [r2, #12]
 8006386:	0a12      	lsrs	r2, r2, #8
 8006388:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800638c:	fb02 f303 	mul.w	r3, r2, r3
 8006390:	617b      	str	r3, [r7, #20]
    break;
 8006392:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006394:	4b09      	ldr	r3, [pc, #36]	; (80063bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	0e5b      	lsrs	r3, r3, #25
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	3301      	adds	r3, #1
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80063ae:	687b      	ldr	r3, [r7, #4]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	40021000 	.word	0x40021000
 80063c0:	016e3600 	.word	0x016e3600
 80063c4:	00f42400 	.word	0x00f42400

080063c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063d0:	2300      	movs	r3, #0
 80063d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063d4:	2300      	movs	r3, #0
 80063d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 8098 	beq.w	8006516 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063e6:	2300      	movs	r3, #0
 80063e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063ea:	4b43      	ldr	r3, [pc, #268]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10d      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063f6:	4b40      	ldr	r3, [pc, #256]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fa:	4a3f      	ldr	r2, [pc, #252]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006400:	6593      	str	r3, [r2, #88]	; 0x58
 8006402:	4b3d      	ldr	r3, [pc, #244]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800640a:	60bb      	str	r3, [r7, #8]
 800640c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800640e:	2301      	movs	r3, #1
 8006410:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006412:	4b3a      	ldr	r3, [pc, #232]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a39      	ldr	r2, [pc, #228]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800641c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800641e:	f7fd f913 	bl	8003648 <HAL_GetTick>
 8006422:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006424:	e009      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006426:	f7fd f90f 	bl	8003648 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d902      	bls.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	74fb      	strb	r3, [r7, #19]
        break;
 8006438:	e005      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800643a:	4b30      	ldr	r3, [pc, #192]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006442:	2b00      	cmp	r3, #0
 8006444:	d0ef      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006446:	7cfb      	ldrb	r3, [r7, #19]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d159      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800644c:	4b2a      	ldr	r3, [pc, #168]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800644e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006456:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d01e      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	429a      	cmp	r2, r3
 8006466:	d019      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006468:	4b23      	ldr	r3, [pc, #140]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800646a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006472:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006474:	4b20      	ldr	r3, [pc, #128]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647a:	4a1f      	ldr	r2, [pc, #124]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800647c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006484:	4b1c      	ldr	r3, [pc, #112]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648a:	4a1b      	ldr	r2, [pc, #108]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800648c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006494:	4a18      	ldr	r2, [pc, #96]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d016      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a6:	f7fd f8cf 	bl	8003648 <HAL_GetTick>
 80064aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064ac:	e00b      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ae:	f7fd f8cb 	bl	8003648 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064bc:	4293      	cmp	r3, r2
 80064be:	d902      	bls.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	74fb      	strb	r3, [r7, #19]
            break;
 80064c4:	e006      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064c6:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0ec      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80064d4:	7cfb      	ldrb	r3, [r7, #19]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10b      	bne.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064da:	4b07      	ldr	r3, [pc, #28]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e8:	4903      	ldr	r1, [pc, #12]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80064f0:	e008      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064f2:	7cfb      	ldrb	r3, [r7, #19]
 80064f4:	74bb      	strb	r3, [r7, #18]
 80064f6:	e005      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80064f8:	40021000 	.word	0x40021000
 80064fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006500:	7cfb      	ldrb	r3, [r7, #19]
 8006502:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006504:	7c7b      	ldrb	r3, [r7, #17]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d105      	bne.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800650a:	4ba7      	ldr	r3, [pc, #668]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800650e:	4aa6      	ldr	r2, [pc, #664]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006514:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00a      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006522:	4ba1      	ldr	r3, [pc, #644]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006528:	f023 0203 	bic.w	r2, r3, #3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	499d      	ldr	r1, [pc, #628]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006532:	4313      	orrs	r3, r2
 8006534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00a      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006544:	4b98      	ldr	r3, [pc, #608]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654a:	f023 020c 	bic.w	r2, r3, #12
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	4995      	ldr	r1, [pc, #596]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006554:	4313      	orrs	r3, r2
 8006556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0304 	and.w	r3, r3, #4
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00a      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006566:	4b90      	ldr	r3, [pc, #576]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	498c      	ldr	r1, [pc, #560]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006576:	4313      	orrs	r3, r2
 8006578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0308 	and.w	r3, r3, #8
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00a      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006588:	4b87      	ldr	r3, [pc, #540]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800658a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	4984      	ldr	r1, [pc, #528]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006598:	4313      	orrs	r3, r2
 800659a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0310 	and.w	r3, r3, #16
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80065aa:	4b7f      	ldr	r3, [pc, #508]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	497b      	ldr	r1, [pc, #492]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0320 	and.w	r3, r3, #32
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00a      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065cc:	4b76      	ldr	r3, [pc, #472]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	4973      	ldr	r1, [pc, #460]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00a      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065ee:	4b6e      	ldr	r3, [pc, #440]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	496a      	ldr	r1, [pc, #424]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00a      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006610:	4b65      	ldr	r3, [pc, #404]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006616:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	4962      	ldr	r1, [pc, #392]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006620:	4313      	orrs	r3, r2
 8006622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00a      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006632:	4b5d      	ldr	r3, [pc, #372]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006638:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	4959      	ldr	r1, [pc, #356]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006642:	4313      	orrs	r3, r2
 8006644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006654:	4b54      	ldr	r3, [pc, #336]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006656:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800665a:	f023 0203 	bic.w	r2, r3, #3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006662:	4951      	ldr	r1, [pc, #324]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006664:	4313      	orrs	r3, r2
 8006666:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00a      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006676:	4b4c      	ldr	r3, [pc, #304]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	4948      	ldr	r1, [pc, #288]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006686:	4313      	orrs	r3, r2
 8006688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006694:	2b00      	cmp	r3, #0
 8006696:	d015      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006698:	4b43      	ldr	r3, [pc, #268]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800669a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	4940      	ldr	r1, [pc, #256]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066b6:	d105      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066b8:	4b3b      	ldr	r3, [pc, #236]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	4a3a      	ldr	r2, [pc, #232]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d015      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80066d0:	4b35      	ldr	r3, [pc, #212]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066de:	4932      	ldr	r1, [pc, #200]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ee:	d105      	bne.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066f0:	4b2d      	ldr	r3, [pc, #180]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	4a2c      	ldr	r2, [pc, #176]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066fa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d015      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006708:	4b27      	ldr	r3, [pc, #156]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800670a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006716:	4924      	ldr	r1, [pc, #144]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006718:	4313      	orrs	r3, r2
 800671a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006726:	d105      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006728:	4b1f      	ldr	r3, [pc, #124]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	4a1e      	ldr	r2, [pc, #120]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800672e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006732:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d015      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006740:	4b19      	ldr	r3, [pc, #100]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006746:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674e:	4916      	ldr	r1, [pc, #88]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006750:	4313      	orrs	r3, r2
 8006752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800675e:	d105      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006760:	4b11      	ldr	r3, [pc, #68]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	4a10      	ldr	r2, [pc, #64]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800676a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d019      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006778:	4b0b      	ldr	r3, [pc, #44]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800677a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	4908      	ldr	r1, [pc, #32]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006788:	4313      	orrs	r3, r2
 800678a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006796:	d109      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006798:	4b03      	ldr	r3, [pc, #12]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	4a02      	ldr	r2, [pc, #8]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800679e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067a2:	60d3      	str	r3, [r2, #12]
 80067a4:	e002      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80067a6:	bf00      	nop
 80067a8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d015      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80067b8:	4b29      	ldr	r3, [pc, #164]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c6:	4926      	ldr	r1, [pc, #152]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067d6:	d105      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80067d8:	4b21      	ldr	r3, [pc, #132]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	4a20      	ldr	r2, [pc, #128]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067e2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d015      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80067f0:	4b1b      	ldr	r3, [pc, #108]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067fe:	4918      	ldr	r1, [pc, #96]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006800:	4313      	orrs	r3, r2
 8006802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800680a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800680e:	d105      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006810:	4b13      	ldr	r3, [pc, #76]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	4a12      	ldr	r2, [pc, #72]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800681a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d015      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006828:	4b0d      	ldr	r3, [pc, #52]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800682a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800682e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006836:	490a      	ldr	r1, [pc, #40]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006838:	4313      	orrs	r3, r2
 800683a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006842:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006846:	d105      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006848:	4b05      	ldr	r3, [pc, #20]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	4a04      	ldr	r2, [pc, #16]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800684e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006852:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006854:	7cbb      	ldrb	r3, [r7, #18]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	40021000 	.word	0x40021000

08006864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e049      	b.n	800690a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d106      	bne.n	8006890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7fc fd60 	bl	8003350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	3304      	adds	r3, #4
 80068a0:	4619      	mov	r1, r3
 80068a2:	4610      	mov	r0, r2
 80068a4:	f000 ff68 	bl	8007778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b01      	cmp	r3, #1
 8006926:	d001      	beq.n	800692c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e04c      	b.n	80069c6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a26      	ldr	r2, [pc, #152]	; (80069d4 <HAL_TIM_Base_Start+0xc0>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d022      	beq.n	8006984 <HAL_TIM_Base_Start+0x70>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006946:	d01d      	beq.n	8006984 <HAL_TIM_Base_Start+0x70>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a22      	ldr	r2, [pc, #136]	; (80069d8 <HAL_TIM_Base_Start+0xc4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d018      	beq.n	8006984 <HAL_TIM_Base_Start+0x70>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a21      	ldr	r2, [pc, #132]	; (80069dc <HAL_TIM_Base_Start+0xc8>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d013      	beq.n	8006984 <HAL_TIM_Base_Start+0x70>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1f      	ldr	r2, [pc, #124]	; (80069e0 <HAL_TIM_Base_Start+0xcc>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00e      	beq.n	8006984 <HAL_TIM_Base_Start+0x70>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a1e      	ldr	r2, [pc, #120]	; (80069e4 <HAL_TIM_Base_Start+0xd0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d009      	beq.n	8006984 <HAL_TIM_Base_Start+0x70>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a1c      	ldr	r2, [pc, #112]	; (80069e8 <HAL_TIM_Base_Start+0xd4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d004      	beq.n	8006984 <HAL_TIM_Base_Start+0x70>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a1b      	ldr	r2, [pc, #108]	; (80069ec <HAL_TIM_Base_Start+0xd8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d115      	bne.n	80069b0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689a      	ldr	r2, [r3, #8]
 800698a:	4b19      	ldr	r3, [pc, #100]	; (80069f0 <HAL_TIM_Base_Start+0xdc>)
 800698c:	4013      	ands	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b06      	cmp	r3, #6
 8006994:	d015      	beq.n	80069c2 <HAL_TIM_Base_Start+0xae>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800699c:	d011      	beq.n	80069c2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f042 0201 	orr.w	r2, r2, #1
 80069ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ae:	e008      	b.n	80069c2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f042 0201 	orr.w	r2, r2, #1
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	e000      	b.n	80069c4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40012c00 	.word	0x40012c00
 80069d8:	40000400 	.word	0x40000400
 80069dc:	40000800 	.word	0x40000800
 80069e0:	40000c00 	.word	0x40000c00
 80069e4:	40013400 	.word	0x40013400
 80069e8:	40014000 	.word	0x40014000
 80069ec:	40015000 	.word	0x40015000
 80069f0:	00010007 	.word	0x00010007

080069f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d001      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e054      	b.n	8006ab6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a26      	ldr	r2, [pc, #152]	; (8006ac4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d022      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a36:	d01d      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a22      	ldr	r2, [pc, #136]	; (8006ac8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d018      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a21      	ldr	r2, [pc, #132]	; (8006acc <HAL_TIM_Base_Start_IT+0xd8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d013      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a1f      	ldr	r2, [pc, #124]	; (8006ad0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00e      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1e      	ldr	r2, [pc, #120]	; (8006ad4 <HAL_TIM_Base_Start_IT+0xe0>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d009      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a1c      	ldr	r2, [pc, #112]	; (8006ad8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d004      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a1b      	ldr	r2, [pc, #108]	; (8006adc <HAL_TIM_Base_Start_IT+0xe8>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d115      	bne.n	8006aa0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	4b19      	ldr	r3, [pc, #100]	; (8006ae0 <HAL_TIM_Base_Start_IT+0xec>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b06      	cmp	r3, #6
 8006a84:	d015      	beq.n	8006ab2 <HAL_TIM_Base_Start_IT+0xbe>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a8c:	d011      	beq.n	8006ab2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0201 	orr.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a9e:	e008      	b.n	8006ab2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0201 	orr.w	r2, r2, #1
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	e000      	b.n	8006ab4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	40012c00 	.word	0x40012c00
 8006ac8:	40000400 	.word	0x40000400
 8006acc:	40000800 	.word	0x40000800
 8006ad0:	40000c00 	.word	0x40000c00
 8006ad4:	40013400 	.word	0x40013400
 8006ad8:	40014000 	.word	0x40014000
 8006adc:	40015000 	.word	0x40015000
 8006ae0:	00010007 	.word	0x00010007

08006ae4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e049      	b.n	8006b8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d106      	bne.n	8006b10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f841 	bl	8006b92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3304      	adds	r3, #4
 8006b20:	4619      	mov	r1, r3
 8006b22:	4610      	mov	r0, r2
 8006b24:	f000 fe28 	bl	8007778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b9a:	bf00      	nop
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
	...

08006ba8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d109      	bne.n	8006bcc <HAL_TIM_PWM_Start+0x24>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	bf14      	ite	ne
 8006bc4:	2301      	movne	r3, #1
 8006bc6:	2300      	moveq	r3, #0
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	e03c      	b.n	8006c46 <HAL_TIM_PWM_Start+0x9e>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	d109      	bne.n	8006be6 <HAL_TIM_PWM_Start+0x3e>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	bf14      	ite	ne
 8006bde:	2301      	movne	r3, #1
 8006be0:	2300      	moveq	r3, #0
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	e02f      	b.n	8006c46 <HAL_TIM_PWM_Start+0x9e>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d109      	bne.n	8006c00 <HAL_TIM_PWM_Start+0x58>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	bf14      	ite	ne
 8006bf8:	2301      	movne	r3, #1
 8006bfa:	2300      	moveq	r3, #0
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	e022      	b.n	8006c46 <HAL_TIM_PWM_Start+0x9e>
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2b0c      	cmp	r3, #12
 8006c04:	d109      	bne.n	8006c1a <HAL_TIM_PWM_Start+0x72>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	bf14      	ite	ne
 8006c12:	2301      	movne	r3, #1
 8006c14:	2300      	moveq	r3, #0
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	e015      	b.n	8006c46 <HAL_TIM_PWM_Start+0x9e>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b10      	cmp	r3, #16
 8006c1e:	d109      	bne.n	8006c34 <HAL_TIM_PWM_Start+0x8c>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	bf14      	ite	ne
 8006c2c:	2301      	movne	r3, #1
 8006c2e:	2300      	moveq	r3, #0
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	e008      	b.n	8006c46 <HAL_TIM_PWM_Start+0x9e>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	bf14      	ite	ne
 8006c40:	2301      	movne	r3, #1
 8006c42:	2300      	moveq	r3, #0
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e0a6      	b.n	8006d9c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d104      	bne.n	8006c5e <HAL_TIM_PWM_Start+0xb6>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c5c:	e023      	b.n	8006ca6 <HAL_TIM_PWM_Start+0xfe>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b04      	cmp	r3, #4
 8006c62:	d104      	bne.n	8006c6e <HAL_TIM_PWM_Start+0xc6>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c6c:	e01b      	b.n	8006ca6 <HAL_TIM_PWM_Start+0xfe>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	d104      	bne.n	8006c7e <HAL_TIM_PWM_Start+0xd6>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c7c:	e013      	b.n	8006ca6 <HAL_TIM_PWM_Start+0xfe>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b0c      	cmp	r3, #12
 8006c82:	d104      	bne.n	8006c8e <HAL_TIM_PWM_Start+0xe6>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c8c:	e00b      	b.n	8006ca6 <HAL_TIM_PWM_Start+0xfe>
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b10      	cmp	r3, #16
 8006c92:	d104      	bne.n	8006c9e <HAL_TIM_PWM_Start+0xf6>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c9c:	e003      	b.n	8006ca6 <HAL_TIM_PWM_Start+0xfe>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2201      	movs	r2, #1
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 f9dc 	bl	800806c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a3a      	ldr	r2, [pc, #232]	; (8006da4 <HAL_TIM_PWM_Start+0x1fc>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d018      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x148>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a39      	ldr	r2, [pc, #228]	; (8006da8 <HAL_TIM_PWM_Start+0x200>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d013      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x148>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a37      	ldr	r2, [pc, #220]	; (8006dac <HAL_TIM_PWM_Start+0x204>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d00e      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x148>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a36      	ldr	r2, [pc, #216]	; (8006db0 <HAL_TIM_PWM_Start+0x208>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d009      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x148>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a34      	ldr	r2, [pc, #208]	; (8006db4 <HAL_TIM_PWM_Start+0x20c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d004      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x148>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a33      	ldr	r2, [pc, #204]	; (8006db8 <HAL_TIM_PWM_Start+0x210>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d101      	bne.n	8006cf4 <HAL_TIM_PWM_Start+0x14c>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e000      	b.n	8006cf6 <HAL_TIM_PWM_Start+0x14e>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d007      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a25      	ldr	r2, [pc, #148]	; (8006da4 <HAL_TIM_PWM_Start+0x1fc>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d022      	beq.n	8006d5a <HAL_TIM_PWM_Start+0x1b2>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1c:	d01d      	beq.n	8006d5a <HAL_TIM_PWM_Start+0x1b2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a26      	ldr	r2, [pc, #152]	; (8006dbc <HAL_TIM_PWM_Start+0x214>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d018      	beq.n	8006d5a <HAL_TIM_PWM_Start+0x1b2>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a24      	ldr	r2, [pc, #144]	; (8006dc0 <HAL_TIM_PWM_Start+0x218>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d013      	beq.n	8006d5a <HAL_TIM_PWM_Start+0x1b2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a23      	ldr	r2, [pc, #140]	; (8006dc4 <HAL_TIM_PWM_Start+0x21c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d00e      	beq.n	8006d5a <HAL_TIM_PWM_Start+0x1b2>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a19      	ldr	r2, [pc, #100]	; (8006da8 <HAL_TIM_PWM_Start+0x200>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d009      	beq.n	8006d5a <HAL_TIM_PWM_Start+0x1b2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a18      	ldr	r2, [pc, #96]	; (8006dac <HAL_TIM_PWM_Start+0x204>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d004      	beq.n	8006d5a <HAL_TIM_PWM_Start+0x1b2>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a18      	ldr	r2, [pc, #96]	; (8006db8 <HAL_TIM_PWM_Start+0x210>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d115      	bne.n	8006d86 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689a      	ldr	r2, [r3, #8]
 8006d60:	4b19      	ldr	r3, [pc, #100]	; (8006dc8 <HAL_TIM_PWM_Start+0x220>)
 8006d62:	4013      	ands	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b06      	cmp	r3, #6
 8006d6a:	d015      	beq.n	8006d98 <HAL_TIM_PWM_Start+0x1f0>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d72:	d011      	beq.n	8006d98 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f042 0201 	orr.w	r2, r2, #1
 8006d82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d84:	e008      	b.n	8006d98 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f042 0201 	orr.w	r2, r2, #1
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	e000      	b.n	8006d9a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	40012c00 	.word	0x40012c00
 8006da8:	40013400 	.word	0x40013400
 8006dac:	40014000 	.word	0x40014000
 8006db0:	40014400 	.word	0x40014400
 8006db4:	40014800 	.word	0x40014800
 8006db8:	40015000 	.word	0x40015000
 8006dbc:	40000400 	.word	0x40000400
 8006dc0:	40000800 	.word	0x40000800
 8006dc4:	40000c00 	.word	0x40000c00
 8006dc8:	00010007 	.word	0x00010007

08006dcc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e097      	b.n	8006f10 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d106      	bne.n	8006dfa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7fc fa69 	bl	80032cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	6812      	ldr	r2, [r2, #0]
 8006e0c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006e10:	f023 0307 	bic.w	r3, r3, #7
 8006e14:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4610      	mov	r0, r2
 8006e22:	f000 fca9 	bl	8007778 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e4e:	f023 0303 	bic.w	r3, r3, #3
 8006e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	021b      	lsls	r3, r3, #8
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006e6c:	f023 030c 	bic.w	r3, r3, #12
 8006e70:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	011a      	lsls	r2, r3, #4
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	031b      	lsls	r3, r3, #12
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006eaa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006eb2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	011b      	lsls	r3, r3, #4
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f28:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f30:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f38:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f40:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d110      	bne.n	8006f6a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d102      	bne.n	8006f54 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f4e:	7b7b      	ldrb	r3, [r7, #13]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d001      	beq.n	8006f58 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e069      	b.n	800702c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f68:	e031      	b.n	8006fce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d110      	bne.n	8006f92 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f70:	7bbb      	ldrb	r3, [r7, #14]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d102      	bne.n	8006f7c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f76:	7b3b      	ldrb	r3, [r7, #12]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d001      	beq.n	8006f80 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e055      	b.n	800702c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2202      	movs	r2, #2
 8006f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f90:	e01d      	b.n	8006fce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d108      	bne.n	8006faa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f98:	7bbb      	ldrb	r3, [r7, #14]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d105      	bne.n	8006faa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f9e:	7b7b      	ldrb	r3, [r7, #13]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d102      	bne.n	8006faa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fa4:	7b3b      	ldrb	r3, [r7, #12]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d001      	beq.n	8006fae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e03e      	b.n	800702c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2202      	movs	r2, #2
 8006fba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <HAL_TIM_Encoder_Start+0xc4>
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	d008      	beq.n	8006fec <HAL_TIM_Encoder_Start+0xd4>
 8006fda:	e00f      	b.n	8006ffc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f001 f841 	bl	800806c <TIM_CCxChannelCmd>
      break;
 8006fea:	e016      	b.n	800701a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	2104      	movs	r1, #4
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f001 f839 	bl	800806c <TIM_CCxChannelCmd>
      break;
 8006ffa:	e00e      	b.n	800701a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2201      	movs	r2, #1
 8007002:	2100      	movs	r1, #0
 8007004:	4618      	mov	r0, r3
 8007006:	f001 f831 	bl	800806c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2201      	movs	r2, #1
 8007010:	2104      	movs	r1, #4
 8007012:	4618      	mov	r0, r3
 8007014:	f001 f82a 	bl	800806c <TIM_CCxChannelCmd>
      break;
 8007018:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f042 0201 	orr.w	r2, r2, #1
 8007028:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d020      	beq.n	8007098 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d01b      	beq.n	8007098 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f06f 0202 	mvn.w	r2, #2
 8007068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fb5c 	bl	800773c <HAL_TIM_IC_CaptureCallback>
 8007084:	e005      	b.n	8007092 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fb4e 	bl	8007728 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fb5f 	bl	8007750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f003 0304 	and.w	r3, r3, #4
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d020      	beq.n	80070e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d01b      	beq.n	80070e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f06f 0204 	mvn.w	r2, #4
 80070b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2202      	movs	r2, #2
 80070ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fb36 	bl	800773c <HAL_TIM_IC_CaptureCallback>
 80070d0:	e005      	b.n	80070de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fb28 	bl	8007728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fb39 	bl	8007750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f003 0308 	and.w	r3, r3, #8
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d020      	beq.n	8007130 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f003 0308 	and.w	r3, r3, #8
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d01b      	beq.n	8007130 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f06f 0208 	mvn.w	r2, #8
 8007100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2204      	movs	r2, #4
 8007106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	f003 0303 	and.w	r3, r3, #3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fb10 	bl	800773c <HAL_TIM_IC_CaptureCallback>
 800711c:	e005      	b.n	800712a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fb02 	bl	8007728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fb13 	bl	8007750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f003 0310 	and.w	r3, r3, #16
 8007136:	2b00      	cmp	r3, #0
 8007138:	d020      	beq.n	800717c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f003 0310 	and.w	r3, r3, #16
 8007140:	2b00      	cmp	r3, #0
 8007142:	d01b      	beq.n	800717c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f06f 0210 	mvn.w	r2, #16
 800714c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2208      	movs	r2, #8
 8007152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 faea 	bl	800773c <HAL_TIM_IC_CaptureCallback>
 8007168:	e005      	b.n	8007176 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fadc 	bl	8007728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 faed 	bl	8007750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00c      	beq.n	80071a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	2b00      	cmp	r3, #0
 800718e:	d007      	beq.n	80071a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f06f 0201 	mvn.w	r2, #1
 8007198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7fa fe66 	bl	8001e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d104      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00c      	beq.n	80071ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d007      	beq.n	80071ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80071c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 f815 	bl	80081f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00c      	beq.n	80071f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d007      	beq.n	80071f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80071ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f001 f80d 	bl	800820c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00c      	beq.n	8007216 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007202:	2b00      	cmp	r3, #0
 8007204:	d007      	beq.n	8007216 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800720e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 faa7 	bl	8007764 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	f003 0320 	and.w	r3, r3, #32
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00c      	beq.n	800723a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f003 0320 	and.w	r3, r3, #32
 8007226:	2b00      	cmp	r3, #0
 8007228:	d007      	beq.n	800723a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f06f 0220 	mvn.w	r2, #32
 8007232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 ffd5 	bl	80081e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00c      	beq.n	800725e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d007      	beq.n	800725e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 ffe1 	bl	8008220 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00c      	beq.n	8007282 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d007      	beq.n	8007282 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800727a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 ffd9 	bl	8008234 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00c      	beq.n	80072a6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d007      	beq.n	80072a6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800729e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 ffd1 	bl	8008248 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00c      	beq.n	80072ca <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d007      	beq.n	80072ca <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80072c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 ffc9 	bl	800825c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072ca:	bf00      	nop
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
	...

080072d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d101      	bne.n	80072f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072ee:	2302      	movs	r3, #2
 80072f0:	e0ff      	b.n	80074f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b14      	cmp	r3, #20
 80072fe:	f200 80f0 	bhi.w	80074e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007302:	a201      	add	r2, pc, #4	; (adr r2, 8007308 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007308:	0800735d 	.word	0x0800735d
 800730c:	080074e3 	.word	0x080074e3
 8007310:	080074e3 	.word	0x080074e3
 8007314:	080074e3 	.word	0x080074e3
 8007318:	0800739d 	.word	0x0800739d
 800731c:	080074e3 	.word	0x080074e3
 8007320:	080074e3 	.word	0x080074e3
 8007324:	080074e3 	.word	0x080074e3
 8007328:	080073df 	.word	0x080073df
 800732c:	080074e3 	.word	0x080074e3
 8007330:	080074e3 	.word	0x080074e3
 8007334:	080074e3 	.word	0x080074e3
 8007338:	0800741f 	.word	0x0800741f
 800733c:	080074e3 	.word	0x080074e3
 8007340:	080074e3 	.word	0x080074e3
 8007344:	080074e3 	.word	0x080074e3
 8007348:	08007461 	.word	0x08007461
 800734c:	080074e3 	.word	0x080074e3
 8007350:	080074e3 	.word	0x080074e3
 8007354:	080074e3 	.word	0x080074e3
 8007358:	080074a1 	.word	0x080074a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68b9      	ldr	r1, [r7, #8]
 8007362:	4618      	mov	r0, r3
 8007364:	f000 fabc 	bl	80078e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	699a      	ldr	r2, [r3, #24]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f042 0208 	orr.w	r2, r2, #8
 8007376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	699a      	ldr	r2, [r3, #24]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f022 0204 	bic.w	r2, r2, #4
 8007386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6999      	ldr	r1, [r3, #24]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	691a      	ldr	r2, [r3, #16]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	619a      	str	r2, [r3, #24]
      break;
 800739a:	e0a5      	b.n	80074e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68b9      	ldr	r1, [r7, #8]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 fb36 	bl	8007a14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699a      	ldr	r2, [r3, #24]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	699a      	ldr	r2, [r3, #24]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6999      	ldr	r1, [r3, #24]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	021a      	lsls	r2, r3, #8
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	430a      	orrs	r2, r1
 80073da:	619a      	str	r2, [r3, #24]
      break;
 80073dc:	e084      	b.n	80074e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68b9      	ldr	r1, [r7, #8]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 fba9 	bl	8007b3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	69da      	ldr	r2, [r3, #28]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 0208 	orr.w	r2, r2, #8
 80073f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	69da      	ldr	r2, [r3, #28]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0204 	bic.w	r2, r2, #4
 8007408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	69d9      	ldr	r1, [r3, #28]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	691a      	ldr	r2, [r3, #16]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	61da      	str	r2, [r3, #28]
      break;
 800741c:	e064      	b.n	80074e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68b9      	ldr	r1, [r7, #8]
 8007424:	4618      	mov	r0, r3
 8007426:	f000 fc1b 	bl	8007c60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69da      	ldr	r2, [r3, #28]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	69da      	ldr	r2, [r3, #28]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	69d9      	ldr	r1, [r3, #28]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	021a      	lsls	r2, r3, #8
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	430a      	orrs	r2, r1
 800745c:	61da      	str	r2, [r3, #28]
      break;
 800745e:	e043      	b.n	80074e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68b9      	ldr	r1, [r7, #8]
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fc8e 	bl	8007d88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0208 	orr.w	r2, r2, #8
 800747a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 0204 	bic.w	r2, r2, #4
 800748a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	691a      	ldr	r2, [r3, #16]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800749e:	e023      	b.n	80074e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68b9      	ldr	r1, [r7, #8]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fcd8 	bl	8007e5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074ca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	021a      	lsls	r2, r3, #8
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80074e0:	e002      	b.n	80074e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	75fb      	strb	r3, [r7, #23]
      break;
 80074e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3718      	adds	r7, #24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop

080074fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007510:	2b01      	cmp	r3, #1
 8007512:	d101      	bne.n	8007518 <HAL_TIM_ConfigClockSource+0x1c>
 8007514:	2302      	movs	r3, #2
 8007516:	e0f6      	b.n	8007706 <HAL_TIM_ConfigClockSource+0x20a>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007536:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800753a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a6f      	ldr	r2, [pc, #444]	; (8007710 <HAL_TIM_ConfigClockSource+0x214>)
 8007552:	4293      	cmp	r3, r2
 8007554:	f000 80c1 	beq.w	80076da <HAL_TIM_ConfigClockSource+0x1de>
 8007558:	4a6d      	ldr	r2, [pc, #436]	; (8007710 <HAL_TIM_ConfigClockSource+0x214>)
 800755a:	4293      	cmp	r3, r2
 800755c:	f200 80c6 	bhi.w	80076ec <HAL_TIM_ConfigClockSource+0x1f0>
 8007560:	4a6c      	ldr	r2, [pc, #432]	; (8007714 <HAL_TIM_ConfigClockSource+0x218>)
 8007562:	4293      	cmp	r3, r2
 8007564:	f000 80b9 	beq.w	80076da <HAL_TIM_ConfigClockSource+0x1de>
 8007568:	4a6a      	ldr	r2, [pc, #424]	; (8007714 <HAL_TIM_ConfigClockSource+0x218>)
 800756a:	4293      	cmp	r3, r2
 800756c:	f200 80be 	bhi.w	80076ec <HAL_TIM_ConfigClockSource+0x1f0>
 8007570:	4a69      	ldr	r2, [pc, #420]	; (8007718 <HAL_TIM_ConfigClockSource+0x21c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	f000 80b1 	beq.w	80076da <HAL_TIM_ConfigClockSource+0x1de>
 8007578:	4a67      	ldr	r2, [pc, #412]	; (8007718 <HAL_TIM_ConfigClockSource+0x21c>)
 800757a:	4293      	cmp	r3, r2
 800757c:	f200 80b6 	bhi.w	80076ec <HAL_TIM_ConfigClockSource+0x1f0>
 8007580:	4a66      	ldr	r2, [pc, #408]	; (800771c <HAL_TIM_ConfigClockSource+0x220>)
 8007582:	4293      	cmp	r3, r2
 8007584:	f000 80a9 	beq.w	80076da <HAL_TIM_ConfigClockSource+0x1de>
 8007588:	4a64      	ldr	r2, [pc, #400]	; (800771c <HAL_TIM_ConfigClockSource+0x220>)
 800758a:	4293      	cmp	r3, r2
 800758c:	f200 80ae 	bhi.w	80076ec <HAL_TIM_ConfigClockSource+0x1f0>
 8007590:	4a63      	ldr	r2, [pc, #396]	; (8007720 <HAL_TIM_ConfigClockSource+0x224>)
 8007592:	4293      	cmp	r3, r2
 8007594:	f000 80a1 	beq.w	80076da <HAL_TIM_ConfigClockSource+0x1de>
 8007598:	4a61      	ldr	r2, [pc, #388]	; (8007720 <HAL_TIM_ConfigClockSource+0x224>)
 800759a:	4293      	cmp	r3, r2
 800759c:	f200 80a6 	bhi.w	80076ec <HAL_TIM_ConfigClockSource+0x1f0>
 80075a0:	4a60      	ldr	r2, [pc, #384]	; (8007724 <HAL_TIM_ConfigClockSource+0x228>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	f000 8099 	beq.w	80076da <HAL_TIM_ConfigClockSource+0x1de>
 80075a8:	4a5e      	ldr	r2, [pc, #376]	; (8007724 <HAL_TIM_ConfigClockSource+0x228>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	f200 809e 	bhi.w	80076ec <HAL_TIM_ConfigClockSource+0x1f0>
 80075b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80075b4:	f000 8091 	beq.w	80076da <HAL_TIM_ConfigClockSource+0x1de>
 80075b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80075bc:	f200 8096 	bhi.w	80076ec <HAL_TIM_ConfigClockSource+0x1f0>
 80075c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075c4:	f000 8089 	beq.w	80076da <HAL_TIM_ConfigClockSource+0x1de>
 80075c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075cc:	f200 808e 	bhi.w	80076ec <HAL_TIM_ConfigClockSource+0x1f0>
 80075d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075d4:	d03e      	beq.n	8007654 <HAL_TIM_ConfigClockSource+0x158>
 80075d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075da:	f200 8087 	bhi.w	80076ec <HAL_TIM_ConfigClockSource+0x1f0>
 80075de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e2:	f000 8086 	beq.w	80076f2 <HAL_TIM_ConfigClockSource+0x1f6>
 80075e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ea:	d87f      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x1f0>
 80075ec:	2b70      	cmp	r3, #112	; 0x70
 80075ee:	d01a      	beq.n	8007626 <HAL_TIM_ConfigClockSource+0x12a>
 80075f0:	2b70      	cmp	r3, #112	; 0x70
 80075f2:	d87b      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x1f0>
 80075f4:	2b60      	cmp	r3, #96	; 0x60
 80075f6:	d050      	beq.n	800769a <HAL_TIM_ConfigClockSource+0x19e>
 80075f8:	2b60      	cmp	r3, #96	; 0x60
 80075fa:	d877      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x1f0>
 80075fc:	2b50      	cmp	r3, #80	; 0x50
 80075fe:	d03c      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x17e>
 8007600:	2b50      	cmp	r3, #80	; 0x50
 8007602:	d873      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x1f0>
 8007604:	2b40      	cmp	r3, #64	; 0x40
 8007606:	d058      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x1be>
 8007608:	2b40      	cmp	r3, #64	; 0x40
 800760a:	d86f      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x1f0>
 800760c:	2b30      	cmp	r3, #48	; 0x30
 800760e:	d064      	beq.n	80076da <HAL_TIM_ConfigClockSource+0x1de>
 8007610:	2b30      	cmp	r3, #48	; 0x30
 8007612:	d86b      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x1f0>
 8007614:	2b20      	cmp	r3, #32
 8007616:	d060      	beq.n	80076da <HAL_TIM_ConfigClockSource+0x1de>
 8007618:	2b20      	cmp	r3, #32
 800761a:	d867      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x1f0>
 800761c:	2b00      	cmp	r3, #0
 800761e:	d05c      	beq.n	80076da <HAL_TIM_ConfigClockSource+0x1de>
 8007620:	2b10      	cmp	r3, #16
 8007622:	d05a      	beq.n	80076da <HAL_TIM_ConfigClockSource+0x1de>
 8007624:	e062      	b.n	80076ec <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007636:	f000 fcf9 	bl	800802c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007648:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	609a      	str	r2, [r3, #8]
      break;
 8007652:	e04f      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007664:	f000 fce2 	bl	800802c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689a      	ldr	r2, [r3, #8]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007676:	609a      	str	r2, [r3, #8]
      break;
 8007678:	e03c      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007686:	461a      	mov	r2, r3
 8007688:	f000 fc54 	bl	8007f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2150      	movs	r1, #80	; 0x50
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fcad 	bl	8007ff2 <TIM_ITRx_SetConfig>
      break;
 8007698:	e02c      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076a6:	461a      	mov	r2, r3
 80076a8:	f000 fc73 	bl	8007f92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2160      	movs	r1, #96	; 0x60
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 fc9d 	bl	8007ff2 <TIM_ITRx_SetConfig>
      break;
 80076b8:	e01c      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076c6:	461a      	mov	r2, r3
 80076c8:	f000 fc34 	bl	8007f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2140      	movs	r1, #64	; 0x40
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 fc8d 	bl	8007ff2 <TIM_ITRx_SetConfig>
      break;
 80076d8:	e00c      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4619      	mov	r1, r3
 80076e4:	4610      	mov	r0, r2
 80076e6:	f000 fc84 	bl	8007ff2 <TIM_ITRx_SetConfig>
      break;
 80076ea:	e003      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	73fb      	strb	r3, [r7, #15]
      break;
 80076f0:	e000      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80076f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007704:	7bfb      	ldrb	r3, [r7, #15]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	00100070 	.word	0x00100070
 8007714:	00100060 	.word	0x00100060
 8007718:	00100050 	.word	0x00100050
 800771c:	00100040 	.word	0x00100040
 8007720:	00100030 	.word	0x00100030
 8007724:	00100020 	.word	0x00100020

08007728 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a4c      	ldr	r2, [pc, #304]	; (80078bc <TIM_Base_SetConfig+0x144>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d017      	beq.n	80077c0 <TIM_Base_SetConfig+0x48>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007796:	d013      	beq.n	80077c0 <TIM_Base_SetConfig+0x48>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a49      	ldr	r2, [pc, #292]	; (80078c0 <TIM_Base_SetConfig+0x148>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d00f      	beq.n	80077c0 <TIM_Base_SetConfig+0x48>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a48      	ldr	r2, [pc, #288]	; (80078c4 <TIM_Base_SetConfig+0x14c>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d00b      	beq.n	80077c0 <TIM_Base_SetConfig+0x48>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a47      	ldr	r2, [pc, #284]	; (80078c8 <TIM_Base_SetConfig+0x150>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d007      	beq.n	80077c0 <TIM_Base_SetConfig+0x48>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a46      	ldr	r2, [pc, #280]	; (80078cc <TIM_Base_SetConfig+0x154>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d003      	beq.n	80077c0 <TIM_Base_SetConfig+0x48>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a45      	ldr	r2, [pc, #276]	; (80078d0 <TIM_Base_SetConfig+0x158>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d108      	bne.n	80077d2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a39      	ldr	r2, [pc, #228]	; (80078bc <TIM_Base_SetConfig+0x144>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d023      	beq.n	8007822 <TIM_Base_SetConfig+0xaa>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077e0:	d01f      	beq.n	8007822 <TIM_Base_SetConfig+0xaa>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a36      	ldr	r2, [pc, #216]	; (80078c0 <TIM_Base_SetConfig+0x148>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d01b      	beq.n	8007822 <TIM_Base_SetConfig+0xaa>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a35      	ldr	r2, [pc, #212]	; (80078c4 <TIM_Base_SetConfig+0x14c>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d017      	beq.n	8007822 <TIM_Base_SetConfig+0xaa>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a34      	ldr	r2, [pc, #208]	; (80078c8 <TIM_Base_SetConfig+0x150>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d013      	beq.n	8007822 <TIM_Base_SetConfig+0xaa>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a33      	ldr	r2, [pc, #204]	; (80078cc <TIM_Base_SetConfig+0x154>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d00f      	beq.n	8007822 <TIM_Base_SetConfig+0xaa>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a33      	ldr	r2, [pc, #204]	; (80078d4 <TIM_Base_SetConfig+0x15c>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00b      	beq.n	8007822 <TIM_Base_SetConfig+0xaa>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a32      	ldr	r2, [pc, #200]	; (80078d8 <TIM_Base_SetConfig+0x160>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d007      	beq.n	8007822 <TIM_Base_SetConfig+0xaa>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a31      	ldr	r2, [pc, #196]	; (80078dc <TIM_Base_SetConfig+0x164>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d003      	beq.n	8007822 <TIM_Base_SetConfig+0xaa>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a2c      	ldr	r2, [pc, #176]	; (80078d0 <TIM_Base_SetConfig+0x158>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d108      	bne.n	8007834 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	4313      	orrs	r3, r2
 8007832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	4313      	orrs	r3, r2
 8007840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a18      	ldr	r2, [pc, #96]	; (80078bc <TIM_Base_SetConfig+0x144>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d013      	beq.n	8007888 <TIM_Base_SetConfig+0x110>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a1a      	ldr	r2, [pc, #104]	; (80078cc <TIM_Base_SetConfig+0x154>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d00f      	beq.n	8007888 <TIM_Base_SetConfig+0x110>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a1a      	ldr	r2, [pc, #104]	; (80078d4 <TIM_Base_SetConfig+0x15c>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d00b      	beq.n	8007888 <TIM_Base_SetConfig+0x110>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a19      	ldr	r2, [pc, #100]	; (80078d8 <TIM_Base_SetConfig+0x160>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d007      	beq.n	8007888 <TIM_Base_SetConfig+0x110>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a18      	ldr	r2, [pc, #96]	; (80078dc <TIM_Base_SetConfig+0x164>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d003      	beq.n	8007888 <TIM_Base_SetConfig+0x110>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a13      	ldr	r2, [pc, #76]	; (80078d0 <TIM_Base_SetConfig+0x158>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d103      	bne.n	8007890 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	691a      	ldr	r2, [r3, #16]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d105      	bne.n	80078ae <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	f023 0201 	bic.w	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	611a      	str	r2, [r3, #16]
  }
}
 80078ae:	bf00      	nop
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	40012c00 	.word	0x40012c00
 80078c0:	40000400 	.word	0x40000400
 80078c4:	40000800 	.word	0x40000800
 80078c8:	40000c00 	.word	0x40000c00
 80078cc:	40013400 	.word	0x40013400
 80078d0:	40015000 	.word	0x40015000
 80078d4:	40014000 	.word	0x40014000
 80078d8:	40014400 	.word	0x40014400
 80078dc:	40014800 	.word	0x40014800

080078e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	f023 0201 	bic.w	r2, r3, #1
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800790e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 0303 	bic.w	r3, r3, #3
 800791a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	4313      	orrs	r3, r2
 8007924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f023 0302 	bic.w	r3, r3, #2
 800792c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	4313      	orrs	r3, r2
 8007936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a30      	ldr	r2, [pc, #192]	; (80079fc <TIM_OC1_SetConfig+0x11c>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d013      	beq.n	8007968 <TIM_OC1_SetConfig+0x88>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a2f      	ldr	r2, [pc, #188]	; (8007a00 <TIM_OC1_SetConfig+0x120>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d00f      	beq.n	8007968 <TIM_OC1_SetConfig+0x88>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a2e      	ldr	r2, [pc, #184]	; (8007a04 <TIM_OC1_SetConfig+0x124>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d00b      	beq.n	8007968 <TIM_OC1_SetConfig+0x88>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a2d      	ldr	r2, [pc, #180]	; (8007a08 <TIM_OC1_SetConfig+0x128>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d007      	beq.n	8007968 <TIM_OC1_SetConfig+0x88>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a2c      	ldr	r2, [pc, #176]	; (8007a0c <TIM_OC1_SetConfig+0x12c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d003      	beq.n	8007968 <TIM_OC1_SetConfig+0x88>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a2b      	ldr	r2, [pc, #172]	; (8007a10 <TIM_OC1_SetConfig+0x130>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d10c      	bne.n	8007982 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f023 0308 	bic.w	r3, r3, #8
 800796e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	4313      	orrs	r3, r2
 8007978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f023 0304 	bic.w	r3, r3, #4
 8007980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a1d      	ldr	r2, [pc, #116]	; (80079fc <TIM_OC1_SetConfig+0x11c>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d013      	beq.n	80079b2 <TIM_OC1_SetConfig+0xd2>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a1c      	ldr	r2, [pc, #112]	; (8007a00 <TIM_OC1_SetConfig+0x120>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00f      	beq.n	80079b2 <TIM_OC1_SetConfig+0xd2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a1b      	ldr	r2, [pc, #108]	; (8007a04 <TIM_OC1_SetConfig+0x124>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00b      	beq.n	80079b2 <TIM_OC1_SetConfig+0xd2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a1a      	ldr	r2, [pc, #104]	; (8007a08 <TIM_OC1_SetConfig+0x128>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d007      	beq.n	80079b2 <TIM_OC1_SetConfig+0xd2>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a19      	ldr	r2, [pc, #100]	; (8007a0c <TIM_OC1_SetConfig+0x12c>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d003      	beq.n	80079b2 <TIM_OC1_SetConfig+0xd2>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a18      	ldr	r2, [pc, #96]	; (8007a10 <TIM_OC1_SetConfig+0x130>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d111      	bne.n	80079d6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	621a      	str	r2, [r3, #32]
}
 80079f0:	bf00      	nop
 80079f2:	371c      	adds	r7, #28
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	40012c00 	.word	0x40012c00
 8007a00:	40013400 	.word	0x40013400
 8007a04:	40014000 	.word	0x40014000
 8007a08:	40014400 	.word	0x40014400
 8007a0c:	40014800 	.word	0x40014800
 8007a10:	40015000 	.word	0x40015000

08007a14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b087      	sub	sp, #28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	f023 0210 	bic.w	r2, r3, #16
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	021b      	lsls	r3, r3, #8
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f023 0320 	bic.w	r3, r3, #32
 8007a62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	011b      	lsls	r3, r3, #4
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a2c      	ldr	r2, [pc, #176]	; (8007b24 <TIM_OC2_SetConfig+0x110>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d007      	beq.n	8007a88 <TIM_OC2_SetConfig+0x74>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a2b      	ldr	r2, [pc, #172]	; (8007b28 <TIM_OC2_SetConfig+0x114>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d003      	beq.n	8007a88 <TIM_OC2_SetConfig+0x74>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a2a      	ldr	r2, [pc, #168]	; (8007b2c <TIM_OC2_SetConfig+0x118>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d10d      	bne.n	8007aa4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	011b      	lsls	r3, r3, #4
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aa2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a1f      	ldr	r2, [pc, #124]	; (8007b24 <TIM_OC2_SetConfig+0x110>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d013      	beq.n	8007ad4 <TIM_OC2_SetConfig+0xc0>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a1e      	ldr	r2, [pc, #120]	; (8007b28 <TIM_OC2_SetConfig+0x114>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d00f      	beq.n	8007ad4 <TIM_OC2_SetConfig+0xc0>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a1e      	ldr	r2, [pc, #120]	; (8007b30 <TIM_OC2_SetConfig+0x11c>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d00b      	beq.n	8007ad4 <TIM_OC2_SetConfig+0xc0>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a1d      	ldr	r2, [pc, #116]	; (8007b34 <TIM_OC2_SetConfig+0x120>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d007      	beq.n	8007ad4 <TIM_OC2_SetConfig+0xc0>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a1c      	ldr	r2, [pc, #112]	; (8007b38 <TIM_OC2_SetConfig+0x124>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d003      	beq.n	8007ad4 <TIM_OC2_SetConfig+0xc0>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a17      	ldr	r2, [pc, #92]	; (8007b2c <TIM_OC2_SetConfig+0x118>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d113      	bne.n	8007afc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ada:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	621a      	str	r2, [r3, #32]
}
 8007b16:	bf00      	nop
 8007b18:	371c      	adds	r7, #28
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	40012c00 	.word	0x40012c00
 8007b28:	40013400 	.word	0x40013400
 8007b2c:	40015000 	.word	0x40015000
 8007b30:	40014000 	.word	0x40014000
 8007b34:	40014400 	.word	0x40014400
 8007b38:	40014800 	.word	0x40014800

08007b3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b087      	sub	sp, #28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 0303 	bic.w	r3, r3, #3
 8007b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	021b      	lsls	r3, r3, #8
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a2b      	ldr	r2, [pc, #172]	; (8007c48 <TIM_OC3_SetConfig+0x10c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d007      	beq.n	8007bae <TIM_OC3_SetConfig+0x72>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a2a      	ldr	r2, [pc, #168]	; (8007c4c <TIM_OC3_SetConfig+0x110>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d003      	beq.n	8007bae <TIM_OC3_SetConfig+0x72>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a29      	ldr	r2, [pc, #164]	; (8007c50 <TIM_OC3_SetConfig+0x114>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d10d      	bne.n	8007bca <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	021b      	lsls	r3, r3, #8
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a1e      	ldr	r2, [pc, #120]	; (8007c48 <TIM_OC3_SetConfig+0x10c>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d013      	beq.n	8007bfa <TIM_OC3_SetConfig+0xbe>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a1d      	ldr	r2, [pc, #116]	; (8007c4c <TIM_OC3_SetConfig+0x110>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d00f      	beq.n	8007bfa <TIM_OC3_SetConfig+0xbe>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a1d      	ldr	r2, [pc, #116]	; (8007c54 <TIM_OC3_SetConfig+0x118>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d00b      	beq.n	8007bfa <TIM_OC3_SetConfig+0xbe>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a1c      	ldr	r2, [pc, #112]	; (8007c58 <TIM_OC3_SetConfig+0x11c>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d007      	beq.n	8007bfa <TIM_OC3_SetConfig+0xbe>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a1b      	ldr	r2, [pc, #108]	; (8007c5c <TIM_OC3_SetConfig+0x120>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d003      	beq.n	8007bfa <TIM_OC3_SetConfig+0xbe>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a16      	ldr	r2, [pc, #88]	; (8007c50 <TIM_OC3_SetConfig+0x114>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d113      	bne.n	8007c22 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	011b      	lsls	r3, r3, #4
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	621a      	str	r2, [r3, #32]
}
 8007c3c:	bf00      	nop
 8007c3e:	371c      	adds	r7, #28
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr
 8007c48:	40012c00 	.word	0x40012c00
 8007c4c:	40013400 	.word	0x40013400
 8007c50:	40015000 	.word	0x40015000
 8007c54:	40014000 	.word	0x40014000
 8007c58:	40014400 	.word	0x40014400
 8007c5c:	40014800 	.word	0x40014800

08007c60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	021b      	lsls	r3, r3, #8
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	031b      	lsls	r3, r3, #12
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a2c      	ldr	r2, [pc, #176]	; (8007d70 <TIM_OC4_SetConfig+0x110>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d007      	beq.n	8007cd4 <TIM_OC4_SetConfig+0x74>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a2b      	ldr	r2, [pc, #172]	; (8007d74 <TIM_OC4_SetConfig+0x114>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d003      	beq.n	8007cd4 <TIM_OC4_SetConfig+0x74>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a2a      	ldr	r2, [pc, #168]	; (8007d78 <TIM_OC4_SetConfig+0x118>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d10d      	bne.n	8007cf0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	031b      	lsls	r3, r3, #12
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a1f      	ldr	r2, [pc, #124]	; (8007d70 <TIM_OC4_SetConfig+0x110>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d013      	beq.n	8007d20 <TIM_OC4_SetConfig+0xc0>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a1e      	ldr	r2, [pc, #120]	; (8007d74 <TIM_OC4_SetConfig+0x114>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00f      	beq.n	8007d20 <TIM_OC4_SetConfig+0xc0>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a1e      	ldr	r2, [pc, #120]	; (8007d7c <TIM_OC4_SetConfig+0x11c>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d00b      	beq.n	8007d20 <TIM_OC4_SetConfig+0xc0>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a1d      	ldr	r2, [pc, #116]	; (8007d80 <TIM_OC4_SetConfig+0x120>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d007      	beq.n	8007d20 <TIM_OC4_SetConfig+0xc0>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a1c      	ldr	r2, [pc, #112]	; (8007d84 <TIM_OC4_SetConfig+0x124>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d003      	beq.n	8007d20 <TIM_OC4_SetConfig+0xc0>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a17      	ldr	r2, [pc, #92]	; (8007d78 <TIM_OC4_SetConfig+0x118>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d113      	bne.n	8007d48 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d26:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d2e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	019b      	lsls	r3, r3, #6
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	019b      	lsls	r3, r3, #6
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	621a      	str	r2, [r3, #32]
}
 8007d62:	bf00      	nop
 8007d64:	371c      	adds	r7, #28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	40012c00 	.word	0x40012c00
 8007d74:	40013400 	.word	0x40013400
 8007d78:	40015000 	.word	0x40015000
 8007d7c:	40014000 	.word	0x40014000
 8007d80:	40014400 	.word	0x40014400
 8007d84:	40014800 	.word	0x40014800

08007d88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a1b      	ldr	r3, [r3, #32]
 8007d9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007dcc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	041b      	lsls	r3, r3, #16
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a19      	ldr	r2, [pc, #100]	; (8007e44 <TIM_OC5_SetConfig+0xbc>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d013      	beq.n	8007e0a <TIM_OC5_SetConfig+0x82>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a18      	ldr	r2, [pc, #96]	; (8007e48 <TIM_OC5_SetConfig+0xc0>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d00f      	beq.n	8007e0a <TIM_OC5_SetConfig+0x82>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a17      	ldr	r2, [pc, #92]	; (8007e4c <TIM_OC5_SetConfig+0xc4>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d00b      	beq.n	8007e0a <TIM_OC5_SetConfig+0x82>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a16      	ldr	r2, [pc, #88]	; (8007e50 <TIM_OC5_SetConfig+0xc8>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d007      	beq.n	8007e0a <TIM_OC5_SetConfig+0x82>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a15      	ldr	r2, [pc, #84]	; (8007e54 <TIM_OC5_SetConfig+0xcc>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d003      	beq.n	8007e0a <TIM_OC5_SetConfig+0x82>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a14      	ldr	r2, [pc, #80]	; (8007e58 <TIM_OC5_SetConfig+0xd0>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d109      	bne.n	8007e1e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	021b      	lsls	r3, r3, #8
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	621a      	str	r2, [r3, #32]
}
 8007e38:	bf00      	nop
 8007e3a:	371c      	adds	r7, #28
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	40012c00 	.word	0x40012c00
 8007e48:	40013400 	.word	0x40013400
 8007e4c:	40014000 	.word	0x40014000
 8007e50:	40014400 	.word	0x40014400
 8007e54:	40014800 	.word	0x40014800
 8007e58:	40015000 	.word	0x40015000

08007e5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a1b      	ldr	r3, [r3, #32]
 8007e70:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	021b      	lsls	r3, r3, #8
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	051b      	lsls	r3, r3, #20
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a1a      	ldr	r2, [pc, #104]	; (8007f1c <TIM_OC6_SetConfig+0xc0>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d013      	beq.n	8007ee0 <TIM_OC6_SetConfig+0x84>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a19      	ldr	r2, [pc, #100]	; (8007f20 <TIM_OC6_SetConfig+0xc4>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d00f      	beq.n	8007ee0 <TIM_OC6_SetConfig+0x84>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a18      	ldr	r2, [pc, #96]	; (8007f24 <TIM_OC6_SetConfig+0xc8>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d00b      	beq.n	8007ee0 <TIM_OC6_SetConfig+0x84>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a17      	ldr	r2, [pc, #92]	; (8007f28 <TIM_OC6_SetConfig+0xcc>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d007      	beq.n	8007ee0 <TIM_OC6_SetConfig+0x84>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a16      	ldr	r2, [pc, #88]	; (8007f2c <TIM_OC6_SetConfig+0xd0>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d003      	beq.n	8007ee0 <TIM_OC6_SetConfig+0x84>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a15      	ldr	r2, [pc, #84]	; (8007f30 <TIM_OC6_SetConfig+0xd4>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d109      	bne.n	8007ef4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	029b      	lsls	r3, r3, #10
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	685a      	ldr	r2, [r3, #4]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	621a      	str	r2, [r3, #32]
}
 8007f0e:	bf00      	nop
 8007f10:	371c      	adds	r7, #28
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	40012c00 	.word	0x40012c00
 8007f20:	40013400 	.word	0x40013400
 8007f24:	40014000 	.word	0x40014000
 8007f28:	40014400 	.word	0x40014400
 8007f2c:	40014800 	.word	0x40014800
 8007f30:	40015000 	.word	0x40015000

08007f34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	f023 0201 	bic.w	r2, r3, #1
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	011b      	lsls	r3, r3, #4
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f023 030a 	bic.w	r3, r3, #10
 8007f70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	621a      	str	r2, [r3, #32]
}
 8007f86:	bf00      	nop
 8007f88:	371c      	adds	r7, #28
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b087      	sub	sp, #28
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	60f8      	str	r0, [r7, #12]
 8007f9a:	60b9      	str	r1, [r7, #8]
 8007f9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	f023 0210 	bic.w	r2, r3, #16
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	031b      	lsls	r3, r3, #12
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	011b      	lsls	r3, r3, #4
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	621a      	str	r2, [r3, #32]
}
 8007fe6:	bf00      	nop
 8007fe8:	371c      	adds	r7, #28
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b085      	sub	sp, #20
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	4313      	orrs	r3, r2
 8008014:	f043 0307 	orr.w	r3, r3, #7
 8008018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	609a      	str	r2, [r3, #8]
}
 8008020:	bf00      	nop
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800802c:	b480      	push	{r7}
 800802e:	b087      	sub	sp, #28
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	021a      	lsls	r2, r3, #8
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	431a      	orrs	r2, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	4313      	orrs	r3, r2
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	4313      	orrs	r3, r2
 8008058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	609a      	str	r2, [r3, #8]
}
 8008060:	bf00      	nop
 8008062:	371c      	adds	r7, #28
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f003 031f 	and.w	r3, r3, #31
 800807e:	2201      	movs	r2, #1
 8008080:	fa02 f303 	lsl.w	r3, r2, r3
 8008084:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6a1a      	ldr	r2, [r3, #32]
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	43db      	mvns	r3, r3
 800808e:	401a      	ands	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6a1a      	ldr	r2, [r3, #32]
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f003 031f 	and.w	r3, r3, #31
 800809e:	6879      	ldr	r1, [r7, #4]
 80080a0:	fa01 f303 	lsl.w	r3, r1, r3
 80080a4:	431a      	orrs	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	621a      	str	r2, [r3, #32]
}
 80080aa:	bf00      	nop
 80080ac:	371c      	adds	r7, #28
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
	...

080080b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d101      	bne.n	80080d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080cc:	2302      	movs	r3, #2
 80080ce:	e074      	b.n	80081ba <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2202      	movs	r2, #2
 80080dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a34      	ldr	r2, [pc, #208]	; (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d009      	beq.n	800810e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a33      	ldr	r2, [pc, #204]	; (80081cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d004      	beq.n	800810e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a31      	ldr	r2, [pc, #196]	; (80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d108      	bne.n	8008120 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008114:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	4313      	orrs	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800812a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4313      	orrs	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a21      	ldr	r2, [pc, #132]	; (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d022      	beq.n	800818e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008150:	d01d      	beq.n	800818e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a1f      	ldr	r2, [pc, #124]	; (80081d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d018      	beq.n	800818e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a1d      	ldr	r2, [pc, #116]	; (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d013      	beq.n	800818e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a1c      	ldr	r2, [pc, #112]	; (80081dc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d00e      	beq.n	800818e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a15      	ldr	r2, [pc, #84]	; (80081cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d009      	beq.n	800818e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a18      	ldr	r2, [pc, #96]	; (80081e0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d004      	beq.n	800818e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a11      	ldr	r2, [pc, #68]	; (80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d10c      	bne.n	80081a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	4313      	orrs	r3, r2
 800819e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	40012c00 	.word	0x40012c00
 80081cc:	40013400 	.word	0x40013400
 80081d0:	40015000 	.word	0x40015000
 80081d4:	40000400 	.word	0x40000400
 80081d8:	40000800 	.word	0x40000800
 80081dc:	40000c00 	.word	0x40000c00
 80081e0:	40014000 	.word	0x40014000

080081e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d101      	bne.n	8008282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e042      	b.n	8008308 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008288:	2b00      	cmp	r3, #0
 800828a:	d106      	bne.n	800829a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f7fa ffc1 	bl	800321c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2224      	movs	r2, #36	; 0x24
 800829e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f022 0201 	bic.w	r2, r2, #1
 80082b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fb24 	bl	8008908 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f825 	bl	8008310 <UART_SetConfig>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d101      	bne.n	80082d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e01b      	b.n	8008308 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	689a      	ldr	r2, [r3, #8]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0201 	orr.w	r2, r2, #1
 80082fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fba3 	bl	8008a4c <UART_CheckIdleState>
 8008306:	4603      	mov	r3, r0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008314:	b08c      	sub	sp, #48	; 0x30
 8008316:	af00      	add	r7, sp, #0
 8008318:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	689a      	ldr	r2, [r3, #8]
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	431a      	orrs	r2, r3
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	431a      	orrs	r2, r3
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	69db      	ldr	r3, [r3, #28]
 8008334:	4313      	orrs	r3, r2
 8008336:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	4baa      	ldr	r3, [pc, #680]	; (80085e8 <UART_SetConfig+0x2d8>)
 8008340:	4013      	ands	r3, r2
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	6812      	ldr	r2, [r2, #0]
 8008346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008348:	430b      	orrs	r3, r1
 800834a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	68da      	ldr	r2, [r3, #12]
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	430a      	orrs	r2, r1
 8008360:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a9f      	ldr	r2, [pc, #636]	; (80085ec <UART_SetConfig+0x2dc>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d004      	beq.n	800837c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008378:	4313      	orrs	r3, r2
 800837a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008386:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	6812      	ldr	r2, [r2, #0]
 800838e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008390:	430b      	orrs	r3, r1
 8008392:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839a:	f023 010f 	bic.w	r1, r3, #15
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	430a      	orrs	r2, r1
 80083a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a90      	ldr	r2, [pc, #576]	; (80085f0 <UART_SetConfig+0x2e0>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d125      	bne.n	8008400 <UART_SetConfig+0xf0>
 80083b4:	4b8f      	ldr	r3, [pc, #572]	; (80085f4 <UART_SetConfig+0x2e4>)
 80083b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ba:	f003 0303 	and.w	r3, r3, #3
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d81a      	bhi.n	80083f8 <UART_SetConfig+0xe8>
 80083c2:	a201      	add	r2, pc, #4	; (adr r2, 80083c8 <UART_SetConfig+0xb8>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	080083d9 	.word	0x080083d9
 80083cc:	080083e9 	.word	0x080083e9
 80083d0:	080083e1 	.word	0x080083e1
 80083d4:	080083f1 	.word	0x080083f1
 80083d8:	2301      	movs	r3, #1
 80083da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083de:	e116      	b.n	800860e <UART_SetConfig+0x2fe>
 80083e0:	2302      	movs	r3, #2
 80083e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083e6:	e112      	b.n	800860e <UART_SetConfig+0x2fe>
 80083e8:	2304      	movs	r3, #4
 80083ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ee:	e10e      	b.n	800860e <UART_SetConfig+0x2fe>
 80083f0:	2308      	movs	r3, #8
 80083f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083f6:	e10a      	b.n	800860e <UART_SetConfig+0x2fe>
 80083f8:	2310      	movs	r3, #16
 80083fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083fe:	e106      	b.n	800860e <UART_SetConfig+0x2fe>
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a7c      	ldr	r2, [pc, #496]	; (80085f8 <UART_SetConfig+0x2e8>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d138      	bne.n	800847c <UART_SetConfig+0x16c>
 800840a:	4b7a      	ldr	r3, [pc, #488]	; (80085f4 <UART_SetConfig+0x2e4>)
 800840c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008410:	f003 030c 	and.w	r3, r3, #12
 8008414:	2b0c      	cmp	r3, #12
 8008416:	d82d      	bhi.n	8008474 <UART_SetConfig+0x164>
 8008418:	a201      	add	r2, pc, #4	; (adr r2, 8008420 <UART_SetConfig+0x110>)
 800841a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841e:	bf00      	nop
 8008420:	08008455 	.word	0x08008455
 8008424:	08008475 	.word	0x08008475
 8008428:	08008475 	.word	0x08008475
 800842c:	08008475 	.word	0x08008475
 8008430:	08008465 	.word	0x08008465
 8008434:	08008475 	.word	0x08008475
 8008438:	08008475 	.word	0x08008475
 800843c:	08008475 	.word	0x08008475
 8008440:	0800845d 	.word	0x0800845d
 8008444:	08008475 	.word	0x08008475
 8008448:	08008475 	.word	0x08008475
 800844c:	08008475 	.word	0x08008475
 8008450:	0800846d 	.word	0x0800846d
 8008454:	2300      	movs	r3, #0
 8008456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800845a:	e0d8      	b.n	800860e <UART_SetConfig+0x2fe>
 800845c:	2302      	movs	r3, #2
 800845e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008462:	e0d4      	b.n	800860e <UART_SetConfig+0x2fe>
 8008464:	2304      	movs	r3, #4
 8008466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800846a:	e0d0      	b.n	800860e <UART_SetConfig+0x2fe>
 800846c:	2308      	movs	r3, #8
 800846e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008472:	e0cc      	b.n	800860e <UART_SetConfig+0x2fe>
 8008474:	2310      	movs	r3, #16
 8008476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800847a:	e0c8      	b.n	800860e <UART_SetConfig+0x2fe>
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a5e      	ldr	r2, [pc, #376]	; (80085fc <UART_SetConfig+0x2ec>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d125      	bne.n	80084d2 <UART_SetConfig+0x1c2>
 8008486:	4b5b      	ldr	r3, [pc, #364]	; (80085f4 <UART_SetConfig+0x2e4>)
 8008488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800848c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008490:	2b30      	cmp	r3, #48	; 0x30
 8008492:	d016      	beq.n	80084c2 <UART_SetConfig+0x1b2>
 8008494:	2b30      	cmp	r3, #48	; 0x30
 8008496:	d818      	bhi.n	80084ca <UART_SetConfig+0x1ba>
 8008498:	2b20      	cmp	r3, #32
 800849a:	d00a      	beq.n	80084b2 <UART_SetConfig+0x1a2>
 800849c:	2b20      	cmp	r3, #32
 800849e:	d814      	bhi.n	80084ca <UART_SetConfig+0x1ba>
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d002      	beq.n	80084aa <UART_SetConfig+0x19a>
 80084a4:	2b10      	cmp	r3, #16
 80084a6:	d008      	beq.n	80084ba <UART_SetConfig+0x1aa>
 80084a8:	e00f      	b.n	80084ca <UART_SetConfig+0x1ba>
 80084aa:	2300      	movs	r3, #0
 80084ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084b0:	e0ad      	b.n	800860e <UART_SetConfig+0x2fe>
 80084b2:	2302      	movs	r3, #2
 80084b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084b8:	e0a9      	b.n	800860e <UART_SetConfig+0x2fe>
 80084ba:	2304      	movs	r3, #4
 80084bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084c0:	e0a5      	b.n	800860e <UART_SetConfig+0x2fe>
 80084c2:	2308      	movs	r3, #8
 80084c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084c8:	e0a1      	b.n	800860e <UART_SetConfig+0x2fe>
 80084ca:	2310      	movs	r3, #16
 80084cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084d0:	e09d      	b.n	800860e <UART_SetConfig+0x2fe>
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a4a      	ldr	r2, [pc, #296]	; (8008600 <UART_SetConfig+0x2f0>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d125      	bne.n	8008528 <UART_SetConfig+0x218>
 80084dc:	4b45      	ldr	r3, [pc, #276]	; (80085f4 <UART_SetConfig+0x2e4>)
 80084de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80084e6:	2bc0      	cmp	r3, #192	; 0xc0
 80084e8:	d016      	beq.n	8008518 <UART_SetConfig+0x208>
 80084ea:	2bc0      	cmp	r3, #192	; 0xc0
 80084ec:	d818      	bhi.n	8008520 <UART_SetConfig+0x210>
 80084ee:	2b80      	cmp	r3, #128	; 0x80
 80084f0:	d00a      	beq.n	8008508 <UART_SetConfig+0x1f8>
 80084f2:	2b80      	cmp	r3, #128	; 0x80
 80084f4:	d814      	bhi.n	8008520 <UART_SetConfig+0x210>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d002      	beq.n	8008500 <UART_SetConfig+0x1f0>
 80084fa:	2b40      	cmp	r3, #64	; 0x40
 80084fc:	d008      	beq.n	8008510 <UART_SetConfig+0x200>
 80084fe:	e00f      	b.n	8008520 <UART_SetConfig+0x210>
 8008500:	2300      	movs	r3, #0
 8008502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008506:	e082      	b.n	800860e <UART_SetConfig+0x2fe>
 8008508:	2302      	movs	r3, #2
 800850a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800850e:	e07e      	b.n	800860e <UART_SetConfig+0x2fe>
 8008510:	2304      	movs	r3, #4
 8008512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008516:	e07a      	b.n	800860e <UART_SetConfig+0x2fe>
 8008518:	2308      	movs	r3, #8
 800851a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800851e:	e076      	b.n	800860e <UART_SetConfig+0x2fe>
 8008520:	2310      	movs	r3, #16
 8008522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008526:	e072      	b.n	800860e <UART_SetConfig+0x2fe>
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a35      	ldr	r2, [pc, #212]	; (8008604 <UART_SetConfig+0x2f4>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d12a      	bne.n	8008588 <UART_SetConfig+0x278>
 8008532:	4b30      	ldr	r3, [pc, #192]	; (80085f4 <UART_SetConfig+0x2e4>)
 8008534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800853c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008540:	d01a      	beq.n	8008578 <UART_SetConfig+0x268>
 8008542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008546:	d81b      	bhi.n	8008580 <UART_SetConfig+0x270>
 8008548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800854c:	d00c      	beq.n	8008568 <UART_SetConfig+0x258>
 800854e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008552:	d815      	bhi.n	8008580 <UART_SetConfig+0x270>
 8008554:	2b00      	cmp	r3, #0
 8008556:	d003      	beq.n	8008560 <UART_SetConfig+0x250>
 8008558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800855c:	d008      	beq.n	8008570 <UART_SetConfig+0x260>
 800855e:	e00f      	b.n	8008580 <UART_SetConfig+0x270>
 8008560:	2300      	movs	r3, #0
 8008562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008566:	e052      	b.n	800860e <UART_SetConfig+0x2fe>
 8008568:	2302      	movs	r3, #2
 800856a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800856e:	e04e      	b.n	800860e <UART_SetConfig+0x2fe>
 8008570:	2304      	movs	r3, #4
 8008572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008576:	e04a      	b.n	800860e <UART_SetConfig+0x2fe>
 8008578:	2308      	movs	r3, #8
 800857a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800857e:	e046      	b.n	800860e <UART_SetConfig+0x2fe>
 8008580:	2310      	movs	r3, #16
 8008582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008586:	e042      	b.n	800860e <UART_SetConfig+0x2fe>
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a17      	ldr	r2, [pc, #92]	; (80085ec <UART_SetConfig+0x2dc>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d13a      	bne.n	8008608 <UART_SetConfig+0x2f8>
 8008592:	4b18      	ldr	r3, [pc, #96]	; (80085f4 <UART_SetConfig+0x2e4>)
 8008594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008598:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800859c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085a0:	d01a      	beq.n	80085d8 <UART_SetConfig+0x2c8>
 80085a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085a6:	d81b      	bhi.n	80085e0 <UART_SetConfig+0x2d0>
 80085a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085ac:	d00c      	beq.n	80085c8 <UART_SetConfig+0x2b8>
 80085ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085b2:	d815      	bhi.n	80085e0 <UART_SetConfig+0x2d0>
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d003      	beq.n	80085c0 <UART_SetConfig+0x2b0>
 80085b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085bc:	d008      	beq.n	80085d0 <UART_SetConfig+0x2c0>
 80085be:	e00f      	b.n	80085e0 <UART_SetConfig+0x2d0>
 80085c0:	2300      	movs	r3, #0
 80085c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085c6:	e022      	b.n	800860e <UART_SetConfig+0x2fe>
 80085c8:	2302      	movs	r3, #2
 80085ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ce:	e01e      	b.n	800860e <UART_SetConfig+0x2fe>
 80085d0:	2304      	movs	r3, #4
 80085d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085d6:	e01a      	b.n	800860e <UART_SetConfig+0x2fe>
 80085d8:	2308      	movs	r3, #8
 80085da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085de:	e016      	b.n	800860e <UART_SetConfig+0x2fe>
 80085e0:	2310      	movs	r3, #16
 80085e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085e6:	e012      	b.n	800860e <UART_SetConfig+0x2fe>
 80085e8:	cfff69f3 	.word	0xcfff69f3
 80085ec:	40008000 	.word	0x40008000
 80085f0:	40013800 	.word	0x40013800
 80085f4:	40021000 	.word	0x40021000
 80085f8:	40004400 	.word	0x40004400
 80085fc:	40004800 	.word	0x40004800
 8008600:	40004c00 	.word	0x40004c00
 8008604:	40005000 	.word	0x40005000
 8008608:	2310      	movs	r3, #16
 800860a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4aae      	ldr	r2, [pc, #696]	; (80088cc <UART_SetConfig+0x5bc>)
 8008614:	4293      	cmp	r3, r2
 8008616:	f040 8097 	bne.w	8008748 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800861a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800861e:	2b08      	cmp	r3, #8
 8008620:	d823      	bhi.n	800866a <UART_SetConfig+0x35a>
 8008622:	a201      	add	r2, pc, #4	; (adr r2, 8008628 <UART_SetConfig+0x318>)
 8008624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008628:	0800864d 	.word	0x0800864d
 800862c:	0800866b 	.word	0x0800866b
 8008630:	08008655 	.word	0x08008655
 8008634:	0800866b 	.word	0x0800866b
 8008638:	0800865b 	.word	0x0800865b
 800863c:	0800866b 	.word	0x0800866b
 8008640:	0800866b 	.word	0x0800866b
 8008644:	0800866b 	.word	0x0800866b
 8008648:	08008663 	.word	0x08008663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800864c:	f7fd fe4a 	bl	80062e4 <HAL_RCC_GetPCLK1Freq>
 8008650:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008652:	e010      	b.n	8008676 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008654:	4b9e      	ldr	r3, [pc, #632]	; (80088d0 <UART_SetConfig+0x5c0>)
 8008656:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008658:	e00d      	b.n	8008676 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800865a:	f7fd fdd5 	bl	8006208 <HAL_RCC_GetSysClockFreq>
 800865e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008660:	e009      	b.n	8008676 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008666:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008668:	e005      	b.n	8008676 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800866a:	2300      	movs	r3, #0
 800866c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008674:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008678:	2b00      	cmp	r3, #0
 800867a:	f000 8130 	beq.w	80088de <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	4a94      	ldr	r2, [pc, #592]	; (80088d4 <UART_SetConfig+0x5c4>)
 8008684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008688:	461a      	mov	r2, r3
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008690:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	4613      	mov	r3, r2
 8008698:	005b      	lsls	r3, r3, #1
 800869a:	4413      	add	r3, r2
 800869c:	69ba      	ldr	r2, [r7, #24]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d305      	bcc.n	80086ae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086a8:	69ba      	ldr	r2, [r7, #24]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d903      	bls.n	80086b6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80086b4:	e113      	b.n	80088de <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	2200      	movs	r2, #0
 80086ba:	60bb      	str	r3, [r7, #8]
 80086bc:	60fa      	str	r2, [r7, #12]
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c2:	4a84      	ldr	r2, [pc, #528]	; (80088d4 <UART_SetConfig+0x5c4>)
 80086c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	2200      	movs	r2, #0
 80086cc:	603b      	str	r3, [r7, #0]
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086d8:	f7f8 fb88 	bl	8000dec <__aeabi_uldivmod>
 80086dc:	4602      	mov	r2, r0
 80086de:	460b      	mov	r3, r1
 80086e0:	4610      	mov	r0, r2
 80086e2:	4619      	mov	r1, r3
 80086e4:	f04f 0200 	mov.w	r2, #0
 80086e8:	f04f 0300 	mov.w	r3, #0
 80086ec:	020b      	lsls	r3, r1, #8
 80086ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086f2:	0202      	lsls	r2, r0, #8
 80086f4:	6979      	ldr	r1, [r7, #20]
 80086f6:	6849      	ldr	r1, [r1, #4]
 80086f8:	0849      	lsrs	r1, r1, #1
 80086fa:	2000      	movs	r0, #0
 80086fc:	460c      	mov	r4, r1
 80086fe:	4605      	mov	r5, r0
 8008700:	eb12 0804 	adds.w	r8, r2, r4
 8008704:	eb43 0905 	adc.w	r9, r3, r5
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	469a      	mov	sl, r3
 8008710:	4693      	mov	fp, r2
 8008712:	4652      	mov	r2, sl
 8008714:	465b      	mov	r3, fp
 8008716:	4640      	mov	r0, r8
 8008718:	4649      	mov	r1, r9
 800871a:	f7f8 fb67 	bl	8000dec <__aeabi_uldivmod>
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	4613      	mov	r3, r2
 8008724:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800872c:	d308      	bcc.n	8008740 <UART_SetConfig+0x430>
 800872e:	6a3b      	ldr	r3, [r7, #32]
 8008730:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008734:	d204      	bcs.n	8008740 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	6a3a      	ldr	r2, [r7, #32]
 800873c:	60da      	str	r2, [r3, #12]
 800873e:	e0ce      	b.n	80088de <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008746:	e0ca      	b.n	80088de <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	69db      	ldr	r3, [r3, #28]
 800874c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008750:	d166      	bne.n	8008820 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008752:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008756:	2b08      	cmp	r3, #8
 8008758:	d827      	bhi.n	80087aa <UART_SetConfig+0x49a>
 800875a:	a201      	add	r2, pc, #4	; (adr r2, 8008760 <UART_SetConfig+0x450>)
 800875c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008760:	08008785 	.word	0x08008785
 8008764:	0800878d 	.word	0x0800878d
 8008768:	08008795 	.word	0x08008795
 800876c:	080087ab 	.word	0x080087ab
 8008770:	0800879b 	.word	0x0800879b
 8008774:	080087ab 	.word	0x080087ab
 8008778:	080087ab 	.word	0x080087ab
 800877c:	080087ab 	.word	0x080087ab
 8008780:	080087a3 	.word	0x080087a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008784:	f7fd fdae 	bl	80062e4 <HAL_RCC_GetPCLK1Freq>
 8008788:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800878a:	e014      	b.n	80087b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800878c:	f7fd fdc0 	bl	8006310 <HAL_RCC_GetPCLK2Freq>
 8008790:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008792:	e010      	b.n	80087b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008794:	4b4e      	ldr	r3, [pc, #312]	; (80088d0 <UART_SetConfig+0x5c0>)
 8008796:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008798:	e00d      	b.n	80087b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800879a:	f7fd fd35 	bl	8006208 <HAL_RCC_GetSysClockFreq>
 800879e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087a0:	e009      	b.n	80087b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80087a8:	e005      	b.n	80087b6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80087aa:	2300      	movs	r3, #0
 80087ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80087b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f000 8090 	beq.w	80088de <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	4a44      	ldr	r2, [pc, #272]	; (80088d4 <UART_SetConfig+0x5c4>)
 80087c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087c8:	461a      	mov	r2, r3
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80087d0:	005a      	lsls	r2, r3, #1
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	085b      	lsrs	r3, r3, #1
 80087d8:	441a      	add	r2, r3
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	2b0f      	cmp	r3, #15
 80087e8:	d916      	bls.n	8008818 <UART_SetConfig+0x508>
 80087ea:	6a3b      	ldr	r3, [r7, #32]
 80087ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087f0:	d212      	bcs.n	8008818 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087f2:	6a3b      	ldr	r3, [r7, #32]
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	f023 030f 	bic.w	r3, r3, #15
 80087fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	085b      	lsrs	r3, r3, #1
 8008800:	b29b      	uxth	r3, r3
 8008802:	f003 0307 	and.w	r3, r3, #7
 8008806:	b29a      	uxth	r2, r3
 8008808:	8bfb      	ldrh	r3, [r7, #30]
 800880a:	4313      	orrs	r3, r2
 800880c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	8bfa      	ldrh	r2, [r7, #30]
 8008814:	60da      	str	r2, [r3, #12]
 8008816:	e062      	b.n	80088de <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800881e:	e05e      	b.n	80088de <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008820:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008824:	2b08      	cmp	r3, #8
 8008826:	d828      	bhi.n	800887a <UART_SetConfig+0x56a>
 8008828:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <UART_SetConfig+0x520>)
 800882a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882e:	bf00      	nop
 8008830:	08008855 	.word	0x08008855
 8008834:	0800885d 	.word	0x0800885d
 8008838:	08008865 	.word	0x08008865
 800883c:	0800887b 	.word	0x0800887b
 8008840:	0800886b 	.word	0x0800886b
 8008844:	0800887b 	.word	0x0800887b
 8008848:	0800887b 	.word	0x0800887b
 800884c:	0800887b 	.word	0x0800887b
 8008850:	08008873 	.word	0x08008873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008854:	f7fd fd46 	bl	80062e4 <HAL_RCC_GetPCLK1Freq>
 8008858:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800885a:	e014      	b.n	8008886 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800885c:	f7fd fd58 	bl	8006310 <HAL_RCC_GetPCLK2Freq>
 8008860:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008862:	e010      	b.n	8008886 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008864:	4b1a      	ldr	r3, [pc, #104]	; (80088d0 <UART_SetConfig+0x5c0>)
 8008866:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008868:	e00d      	b.n	8008886 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800886a:	f7fd fccd 	bl	8006208 <HAL_RCC_GetSysClockFreq>
 800886e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008870:	e009      	b.n	8008886 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008876:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008878:	e005      	b.n	8008886 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800887a:	2300      	movs	r3, #0
 800887c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008884:	bf00      	nop
    }

    if (pclk != 0U)
 8008886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008888:	2b00      	cmp	r3, #0
 800888a:	d028      	beq.n	80088de <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	4a10      	ldr	r2, [pc, #64]	; (80088d4 <UART_SetConfig+0x5c4>)
 8008892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008896:	461a      	mov	r2, r3
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	fbb3 f2f2 	udiv	r2, r3, r2
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	085b      	lsrs	r3, r3, #1
 80088a4:	441a      	add	r2, r3
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	2b0f      	cmp	r3, #15
 80088b4:	d910      	bls.n	80088d8 <UART_SetConfig+0x5c8>
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088bc:	d20c      	bcs.n	80088d8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088be:	6a3b      	ldr	r3, [r7, #32]
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	60da      	str	r2, [r3, #12]
 80088c8:	e009      	b.n	80088de <UART_SetConfig+0x5ce>
 80088ca:	bf00      	nop
 80088cc:	40008000 	.word	0x40008000
 80088d0:	00f42400 	.word	0x00f42400
 80088d4:	08009258 	.word	0x08009258
      }
      else
      {
        ret = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2201      	movs	r2, #1
 80088ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2200      	movs	r2, #0
 80088f2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	2200      	movs	r2, #0
 80088f8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80088fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3730      	adds	r7, #48	; 0x30
 8008902:	46bd      	mov	sp, r7
 8008904:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008908 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008914:	f003 0308 	and.w	r3, r3, #8
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00a      	beq.n	8008932 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008936:	f003 0301 	and.w	r3, r3, #1
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00a      	beq.n	8008954 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	430a      	orrs	r2, r1
 8008952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00a      	beq.n	8008976 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	430a      	orrs	r2, r1
 8008974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897a:	f003 0304 	and.w	r3, r3, #4
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00a      	beq.n	8008998 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	430a      	orrs	r2, r1
 8008996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899c:	f003 0310 	and.w	r3, r3, #16
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00a      	beq.n	80089ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	430a      	orrs	r2, r1
 80089b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089be:	f003 0320 	and.w	r3, r3, #32
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00a      	beq.n	80089dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	430a      	orrs	r2, r1
 80089da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d01a      	beq.n	8008a1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	430a      	orrs	r2, r1
 80089fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a06:	d10a      	bne.n	8008a1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00a      	beq.n	8008a40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	605a      	str	r2, [r3, #4]
  }
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b098      	sub	sp, #96	; 0x60
 8008a50:	af02      	add	r7, sp, #8
 8008a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a5c:	f7fa fdf4 	bl	8003648 <HAL_GetTick>
 8008a60:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0308 	and.w	r3, r3, #8
 8008a6c:	2b08      	cmp	r3, #8
 8008a6e:	d12f      	bne.n	8008ad0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f88e 	bl	8008ba0 <UART_WaitOnFlagUntilTimeout>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d022      	beq.n	8008ad0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a92:	e853 3f00 	ldrex	r3, [r3]
 8008a96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a9e:	653b      	str	r3, [r7, #80]	; 0x50
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8008aaa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008aae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ab0:	e841 2300 	strex	r3, r2, [r1]
 8008ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1e6      	bne.n	8008a8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2220      	movs	r2, #32
 8008ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e063      	b.n	8008b98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0304 	and.w	r3, r3, #4
 8008ada:	2b04      	cmp	r3, #4
 8008adc:	d149      	bne.n	8008b72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ade:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f857 	bl	8008ba0 <UART_WaitOnFlagUntilTimeout>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d03c      	beq.n	8008b72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b00:	e853 3f00 	ldrex	r3, [r3]
 8008b04:	623b      	str	r3, [r7, #32]
   return(result);
 8008b06:	6a3b      	ldr	r3, [r7, #32]
 8008b08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	461a      	mov	r2, r3
 8008b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b16:	633b      	str	r3, [r7, #48]	; 0x30
 8008b18:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b1e:	e841 2300 	strex	r3, r2, [r1]
 8008b22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1e6      	bne.n	8008af8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3308      	adds	r3, #8
 8008b30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	e853 3f00 	ldrex	r3, [r3]
 8008b38:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f023 0301 	bic.w	r3, r3, #1
 8008b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3308      	adds	r3, #8
 8008b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b4a:	61fa      	str	r2, [r7, #28]
 8008b4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4e:	69b9      	ldr	r1, [r7, #24]
 8008b50:	69fa      	ldr	r2, [r7, #28]
 8008b52:	e841 2300 	strex	r3, r2, [r1]
 8008b56:	617b      	str	r3, [r7, #20]
   return(result);
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1e5      	bne.n	8008b2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2220      	movs	r2, #32
 8008b62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e012      	b.n	8008b98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2220      	movs	r2, #32
 8008b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2220      	movs	r2, #32
 8008b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3758      	adds	r7, #88	; 0x58
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	603b      	str	r3, [r7, #0]
 8008bac:	4613      	mov	r3, r2
 8008bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bb0:	e04f      	b.n	8008c52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bb8:	d04b      	beq.n	8008c52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bba:	f7fa fd45 	bl	8003648 <HAL_GetTick>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d302      	bcc.n	8008bd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d101      	bne.n	8008bd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e04e      	b.n	8008c72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0304 	and.w	r3, r3, #4
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d037      	beq.n	8008c52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	2b80      	cmp	r3, #128	; 0x80
 8008be6:	d034      	beq.n	8008c52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2b40      	cmp	r3, #64	; 0x40
 8008bec:	d031      	beq.n	8008c52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	69db      	ldr	r3, [r3, #28]
 8008bf4:	f003 0308 	and.w	r3, r3, #8
 8008bf8:	2b08      	cmp	r3, #8
 8008bfa:	d110      	bne.n	8008c1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2208      	movs	r2, #8
 8008c02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f000 f838 	bl	8008c7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2208      	movs	r2, #8
 8008c0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e029      	b.n	8008c72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	69db      	ldr	r3, [r3, #28]
 8008c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c2c:	d111      	bne.n	8008c52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f000 f81e 	bl	8008c7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2220      	movs	r2, #32
 8008c42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	e00f      	b.n	8008c72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	69da      	ldr	r2, [r3, #28]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	bf0c      	ite	eq
 8008c62:	2301      	moveq	r3, #1
 8008c64:	2300      	movne	r3, #0
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	461a      	mov	r2, r3
 8008c6a:	79fb      	ldrb	r3, [r7, #7]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d0a0      	beq.n	8008bb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b095      	sub	sp, #84	; 0x54
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c8a:	e853 3f00 	ldrex	r3, [r3]
 8008c8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8008ca2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ca6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ca8:	e841 2300 	strex	r3, r2, [r1]
 8008cac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1e6      	bne.n	8008c82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3308      	adds	r3, #8
 8008cba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	e853 3f00 	ldrex	r3, [r3]
 8008cc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cca:	f023 0301 	bic.w	r3, r3, #1
 8008cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	3308      	adds	r3, #8
 8008cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ce0:	e841 2300 	strex	r3, r2, [r1]
 8008ce4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1e3      	bne.n	8008cb4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d118      	bne.n	8008d26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	e853 3f00 	ldrex	r3, [r3]
 8008d00:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	f023 0310 	bic.w	r3, r3, #16
 8008d08:	647b      	str	r3, [r7, #68]	; 0x44
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d12:	61bb      	str	r3, [r7, #24]
 8008d14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d16:	6979      	ldr	r1, [r7, #20]
 8008d18:	69ba      	ldr	r2, [r7, #24]
 8008d1a:	e841 2300 	strex	r3, r2, [r1]
 8008d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1e6      	bne.n	8008cf4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008d3a:	bf00      	nop
 8008d3c:	3754      	adds	r7, #84	; 0x54
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b085      	sub	sp, #20
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d101      	bne.n	8008d5c <HAL_UARTEx_DisableFifoMode+0x16>
 8008d58:	2302      	movs	r3, #2
 8008d5a:	e027      	b.n	8008dac <HAL_UARTEx_DisableFifoMode+0x66>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2224      	movs	r2, #36	; 0x24
 8008d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f022 0201 	bic.w	r2, r2, #1
 8008d82:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d8a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2220      	movs	r2, #32
 8008d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3714      	adds	r7, #20
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d101      	bne.n	8008dd0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008dcc:	2302      	movs	r3, #2
 8008dce:	e02d      	b.n	8008e2c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2224      	movs	r2, #36	; 0x24
 8008ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f022 0201 	bic.w	r2, r2, #1
 8008df6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	430a      	orrs	r2, r1
 8008e0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f84f 	bl	8008eb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2220      	movs	r2, #32
 8008e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d101      	bne.n	8008e4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e48:	2302      	movs	r3, #2
 8008e4a:	e02d      	b.n	8008ea8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2224      	movs	r2, #36	; 0x24
 8008e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 0201 	bic.w	r2, r2, #1
 8008e72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	430a      	orrs	r2, r1
 8008e86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f811 	bl	8008eb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2220      	movs	r2, #32
 8008e9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d108      	bne.n	8008ed2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ed0:	e031      	b.n	8008f36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ed2:	2308      	movs	r3, #8
 8008ed4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ed6:	2308      	movs	r3, #8
 8008ed8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	0e5b      	lsrs	r3, r3, #25
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	f003 0307 	and.w	r3, r3, #7
 8008ee8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	0f5b      	lsrs	r3, r3, #29
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	f003 0307 	and.w	r3, r3, #7
 8008ef8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	7b3a      	ldrb	r2, [r7, #12]
 8008efe:	4911      	ldr	r1, [pc, #68]	; (8008f44 <UARTEx_SetNbDataToProcess+0x94>)
 8008f00:	5c8a      	ldrb	r2, [r1, r2]
 8008f02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f06:	7b3a      	ldrb	r2, [r7, #12]
 8008f08:	490f      	ldr	r1, [pc, #60]	; (8008f48 <UARTEx_SetNbDataToProcess+0x98>)
 8008f0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
 8008f1a:	7b7a      	ldrb	r2, [r7, #13]
 8008f1c:	4909      	ldr	r1, [pc, #36]	; (8008f44 <UARTEx_SetNbDataToProcess+0x94>)
 8008f1e:	5c8a      	ldrb	r2, [r1, r2]
 8008f20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f24:	7b7a      	ldrb	r2, [r7, #13]
 8008f26:	4908      	ldr	r1, [pc, #32]	; (8008f48 <UARTEx_SetNbDataToProcess+0x98>)
 8008f28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f36:	bf00      	nop
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	08009270 	.word	0x08009270
 8008f48:	08009278 	.word	0x08009278

08008f4c <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	ed93 7a06 	vldr	s14, [r3, #24]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	edd3 7a07 	vldr	s15, [r3, #28]
 8008f62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	edd3 7a08 	vldr	s15, [r3, #32]
 8008f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	edd3 7a06 	vldr	s15, [r3, #24]
 8008f7c:	eeb1 7a67 	vneg.f32	s14, s15
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	edd3 7a08 	vldr	s15, [r3, #32]
 8008f86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a1a      	ldr	r2, [r3, #32]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d006      	beq.n	8008fb0 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	330c      	adds	r3, #12
 8008fa6:	220c      	movs	r2, #12
 8008fa8:	2100      	movs	r1, #0
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 f804 	bl	8008fb8 <memset>
  }

}
 8008fb0:	bf00      	nop
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <memset>:
 8008fb8:	4402      	add	r2, r0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d100      	bne.n	8008fc2 <memset+0xa>
 8008fc0:	4770      	bx	lr
 8008fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8008fc6:	e7f9      	b.n	8008fbc <memset+0x4>

08008fc8 <__errno>:
 8008fc8:	4b01      	ldr	r3, [pc, #4]	; (8008fd0 <__errno+0x8>)
 8008fca:	6818      	ldr	r0, [r3, #0]
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	20000070 	.word	0x20000070

08008fd4 <__libc_init_array>:
 8008fd4:	b570      	push	{r4, r5, r6, lr}
 8008fd6:	4d0d      	ldr	r5, [pc, #52]	; (800900c <__libc_init_array+0x38>)
 8008fd8:	4c0d      	ldr	r4, [pc, #52]	; (8009010 <__libc_init_array+0x3c>)
 8008fda:	1b64      	subs	r4, r4, r5
 8008fdc:	10a4      	asrs	r4, r4, #2
 8008fde:	2600      	movs	r6, #0
 8008fe0:	42a6      	cmp	r6, r4
 8008fe2:	d109      	bne.n	8008ff8 <__libc_init_array+0x24>
 8008fe4:	4d0b      	ldr	r5, [pc, #44]	; (8009014 <__libc_init_array+0x40>)
 8008fe6:	4c0c      	ldr	r4, [pc, #48]	; (8009018 <__libc_init_array+0x44>)
 8008fe8:	f000 f91e 	bl	8009228 <_init>
 8008fec:	1b64      	subs	r4, r4, r5
 8008fee:	10a4      	asrs	r4, r4, #2
 8008ff0:	2600      	movs	r6, #0
 8008ff2:	42a6      	cmp	r6, r4
 8008ff4:	d105      	bne.n	8009002 <__libc_init_array+0x2e>
 8008ff6:	bd70      	pop	{r4, r5, r6, pc}
 8008ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ffc:	4798      	blx	r3
 8008ffe:	3601      	adds	r6, #1
 8009000:	e7ee      	b.n	8008fe0 <__libc_init_array+0xc>
 8009002:	f855 3b04 	ldr.w	r3, [r5], #4
 8009006:	4798      	blx	r3
 8009008:	3601      	adds	r6, #1
 800900a:	e7f2      	b.n	8008ff2 <__libc_init_array+0x1e>
 800900c:	08009288 	.word	0x08009288
 8009010:	08009288 	.word	0x08009288
 8009014:	08009288 	.word	0x08009288
 8009018:	0800928c 	.word	0x0800928c

0800901c <sqrt>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	ed2d 8b02 	vpush	{d8}
 8009022:	ec55 4b10 	vmov	r4, r5, d0
 8009026:	f000 f825 	bl	8009074 <__ieee754_sqrt>
 800902a:	4622      	mov	r2, r4
 800902c:	462b      	mov	r3, r5
 800902e:	4620      	mov	r0, r4
 8009030:	4629      	mov	r1, r5
 8009032:	eeb0 8a40 	vmov.f32	s16, s0
 8009036:	eef0 8a60 	vmov.f32	s17, s1
 800903a:	f7f7 fd43 	bl	8000ac4 <__aeabi_dcmpun>
 800903e:	b990      	cbnz	r0, 8009066 <sqrt+0x4a>
 8009040:	2200      	movs	r2, #0
 8009042:	2300      	movs	r3, #0
 8009044:	4620      	mov	r0, r4
 8009046:	4629      	mov	r1, r5
 8009048:	f7f7 fd14 	bl	8000a74 <__aeabi_dcmplt>
 800904c:	b158      	cbz	r0, 8009066 <sqrt+0x4a>
 800904e:	f7ff ffbb 	bl	8008fc8 <__errno>
 8009052:	2321      	movs	r3, #33	; 0x21
 8009054:	6003      	str	r3, [r0, #0]
 8009056:	2200      	movs	r2, #0
 8009058:	2300      	movs	r3, #0
 800905a:	4610      	mov	r0, r2
 800905c:	4619      	mov	r1, r3
 800905e:	f7f7 fbc1 	bl	80007e4 <__aeabi_ddiv>
 8009062:	ec41 0b18 	vmov	d8, r0, r1
 8009066:	eeb0 0a48 	vmov.f32	s0, s16
 800906a:	eef0 0a68 	vmov.f32	s1, s17
 800906e:	ecbd 8b02 	vpop	{d8}
 8009072:	bd38      	pop	{r3, r4, r5, pc}

08009074 <__ieee754_sqrt>:
 8009074:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	ec55 4b10 	vmov	r4, r5, d0
 800907c:	4e67      	ldr	r6, [pc, #412]	; (800921c <__ieee754_sqrt+0x1a8>)
 800907e:	43ae      	bics	r6, r5
 8009080:	ee10 0a10 	vmov	r0, s0
 8009084:	ee10 2a10 	vmov	r2, s0
 8009088:	4629      	mov	r1, r5
 800908a:	462b      	mov	r3, r5
 800908c:	d10d      	bne.n	80090aa <__ieee754_sqrt+0x36>
 800908e:	f7f7 fa7f 	bl	8000590 <__aeabi_dmul>
 8009092:	4602      	mov	r2, r0
 8009094:	460b      	mov	r3, r1
 8009096:	4620      	mov	r0, r4
 8009098:	4629      	mov	r1, r5
 800909a:	f7f7 f8c3 	bl	8000224 <__adddf3>
 800909e:	4604      	mov	r4, r0
 80090a0:	460d      	mov	r5, r1
 80090a2:	ec45 4b10 	vmov	d0, r4, r5
 80090a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090aa:	2d00      	cmp	r5, #0
 80090ac:	dc0b      	bgt.n	80090c6 <__ieee754_sqrt+0x52>
 80090ae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80090b2:	4326      	orrs	r6, r4
 80090b4:	d0f5      	beq.n	80090a2 <__ieee754_sqrt+0x2e>
 80090b6:	b135      	cbz	r5, 80090c6 <__ieee754_sqrt+0x52>
 80090b8:	f7f7 f8b2 	bl	8000220 <__aeabi_dsub>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	f7f7 fb90 	bl	80007e4 <__aeabi_ddiv>
 80090c4:	e7eb      	b.n	800909e <__ieee754_sqrt+0x2a>
 80090c6:	1509      	asrs	r1, r1, #20
 80090c8:	f000 808d 	beq.w	80091e6 <__ieee754_sqrt+0x172>
 80090cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090d0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80090d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090d8:	07c9      	lsls	r1, r1, #31
 80090da:	bf5c      	itt	pl
 80090dc:	005b      	lslpl	r3, r3, #1
 80090de:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80090e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80090e6:	bf58      	it	pl
 80090e8:	0052      	lslpl	r2, r2, #1
 80090ea:	2500      	movs	r5, #0
 80090ec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80090f0:	1076      	asrs	r6, r6, #1
 80090f2:	0052      	lsls	r2, r2, #1
 80090f4:	f04f 0e16 	mov.w	lr, #22
 80090f8:	46ac      	mov	ip, r5
 80090fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090fe:	eb0c 0001 	add.w	r0, ip, r1
 8009102:	4298      	cmp	r0, r3
 8009104:	bfde      	ittt	le
 8009106:	1a1b      	suble	r3, r3, r0
 8009108:	eb00 0c01 	addle.w	ip, r0, r1
 800910c:	186d      	addle	r5, r5, r1
 800910e:	005b      	lsls	r3, r3, #1
 8009110:	f1be 0e01 	subs.w	lr, lr, #1
 8009114:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009118:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800911c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009120:	d1ed      	bne.n	80090fe <__ieee754_sqrt+0x8a>
 8009122:	4674      	mov	r4, lr
 8009124:	2720      	movs	r7, #32
 8009126:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800912a:	4563      	cmp	r3, ip
 800912c:	eb01 000e 	add.w	r0, r1, lr
 8009130:	dc02      	bgt.n	8009138 <__ieee754_sqrt+0xc4>
 8009132:	d113      	bne.n	800915c <__ieee754_sqrt+0xe8>
 8009134:	4290      	cmp	r0, r2
 8009136:	d811      	bhi.n	800915c <__ieee754_sqrt+0xe8>
 8009138:	2800      	cmp	r0, #0
 800913a:	eb00 0e01 	add.w	lr, r0, r1
 800913e:	da57      	bge.n	80091f0 <__ieee754_sqrt+0x17c>
 8009140:	f1be 0f00 	cmp.w	lr, #0
 8009144:	db54      	blt.n	80091f0 <__ieee754_sqrt+0x17c>
 8009146:	f10c 0801 	add.w	r8, ip, #1
 800914a:	eba3 030c 	sub.w	r3, r3, ip
 800914e:	4290      	cmp	r0, r2
 8009150:	bf88      	it	hi
 8009152:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8009156:	1a12      	subs	r2, r2, r0
 8009158:	440c      	add	r4, r1
 800915a:	46c4      	mov	ip, r8
 800915c:	005b      	lsls	r3, r3, #1
 800915e:	3f01      	subs	r7, #1
 8009160:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009164:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009168:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800916c:	d1dd      	bne.n	800912a <__ieee754_sqrt+0xb6>
 800916e:	4313      	orrs	r3, r2
 8009170:	d01b      	beq.n	80091aa <__ieee754_sqrt+0x136>
 8009172:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009220 <__ieee754_sqrt+0x1ac>
 8009176:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009224 <__ieee754_sqrt+0x1b0>
 800917a:	e9da 0100 	ldrd	r0, r1, [sl]
 800917e:	e9db 2300 	ldrd	r2, r3, [fp]
 8009182:	f7f7 f84d 	bl	8000220 <__aeabi_dsub>
 8009186:	e9da 8900 	ldrd	r8, r9, [sl]
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	4640      	mov	r0, r8
 8009190:	4649      	mov	r1, r9
 8009192:	f7f7 fc79 	bl	8000a88 <__aeabi_dcmple>
 8009196:	b140      	cbz	r0, 80091aa <__ieee754_sqrt+0x136>
 8009198:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800919c:	e9da 0100 	ldrd	r0, r1, [sl]
 80091a0:	e9db 2300 	ldrd	r2, r3, [fp]
 80091a4:	d126      	bne.n	80091f4 <__ieee754_sqrt+0x180>
 80091a6:	3501      	adds	r5, #1
 80091a8:	463c      	mov	r4, r7
 80091aa:	106a      	asrs	r2, r5, #1
 80091ac:	0863      	lsrs	r3, r4, #1
 80091ae:	07e9      	lsls	r1, r5, #31
 80091b0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80091b4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80091b8:	bf48      	it	mi
 80091ba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80091be:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80091c2:	461c      	mov	r4, r3
 80091c4:	e76d      	b.n	80090a2 <__ieee754_sqrt+0x2e>
 80091c6:	0ad3      	lsrs	r3, r2, #11
 80091c8:	3815      	subs	r0, #21
 80091ca:	0552      	lsls	r2, r2, #21
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d0fa      	beq.n	80091c6 <__ieee754_sqrt+0x152>
 80091d0:	02dc      	lsls	r4, r3, #11
 80091d2:	d50a      	bpl.n	80091ea <__ieee754_sqrt+0x176>
 80091d4:	f1c1 0420 	rsb	r4, r1, #32
 80091d8:	fa22 f404 	lsr.w	r4, r2, r4
 80091dc:	1e4d      	subs	r5, r1, #1
 80091de:	408a      	lsls	r2, r1
 80091e0:	4323      	orrs	r3, r4
 80091e2:	1b41      	subs	r1, r0, r5
 80091e4:	e772      	b.n	80090cc <__ieee754_sqrt+0x58>
 80091e6:	4608      	mov	r0, r1
 80091e8:	e7f0      	b.n	80091cc <__ieee754_sqrt+0x158>
 80091ea:	005b      	lsls	r3, r3, #1
 80091ec:	3101      	adds	r1, #1
 80091ee:	e7ef      	b.n	80091d0 <__ieee754_sqrt+0x15c>
 80091f0:	46e0      	mov	r8, ip
 80091f2:	e7aa      	b.n	800914a <__ieee754_sqrt+0xd6>
 80091f4:	f7f7 f816 	bl	8000224 <__adddf3>
 80091f8:	e9da 8900 	ldrd	r8, r9, [sl]
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	4640      	mov	r0, r8
 8009202:	4649      	mov	r1, r9
 8009204:	f7f7 fc36 	bl	8000a74 <__aeabi_dcmplt>
 8009208:	b120      	cbz	r0, 8009214 <__ieee754_sqrt+0x1a0>
 800920a:	1ca0      	adds	r0, r4, #2
 800920c:	bf08      	it	eq
 800920e:	3501      	addeq	r5, #1
 8009210:	3402      	adds	r4, #2
 8009212:	e7ca      	b.n	80091aa <__ieee754_sqrt+0x136>
 8009214:	3401      	adds	r4, #1
 8009216:	f024 0401 	bic.w	r4, r4, #1
 800921a:	e7c6      	b.n	80091aa <__ieee754_sqrt+0x136>
 800921c:	7ff00000 	.word	0x7ff00000
 8009220:	20000078 	.word	0x20000078
 8009224:	20000080 	.word	0x20000080

08009228 <_init>:
 8009228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922a:	bf00      	nop
 800922c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800922e:	bc08      	pop	{r3}
 8009230:	469e      	mov	lr, r3
 8009232:	4770      	bx	lr

08009234 <_fini>:
 8009234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009236:	bf00      	nop
 8009238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800923a:	bc08      	pop	{r3}
 800923c:	469e      	mov	lr, r3
 800923e:	4770      	bx	lr
