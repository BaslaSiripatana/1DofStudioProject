
Studio_readRPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbd4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800bdac  0800bdac  0000cdac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdec  0800bdec  0000d288  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdec  0800bdec  0000cdec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdf4  0800bdf4  0000d288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdf4  0800bdf4  0000cdf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdf8  0800bdf8  0000cdf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800bdfc  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001084  20000288  0800c084  0000d288  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000130c  0800c084  0000d30c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d288  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b468  00000000  00000000  0000d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003149  00000000  00000000  00028720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  0002b870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b3  00000000  00000000  0002cf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000290a1  00000000  00000000  0002e0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac2f  00000000  00000000  0005715c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011566b  00000000  00000000  00071d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001873f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006618  00000000  00000000  0018743c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0018da54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000288 	.word	0x20000288
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bd94 	.word	0x0800bd94

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000028c 	.word	0x2000028c
 8000214:	0800bd94 	.word	0x0800bd94

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000e00:	f000 b96a 	b.w	80010d8 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	460c      	mov	r4, r1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d14e      	bne.n	8000ec6 <__udivmoddi4+0xaa>
 8000e28:	4694      	mov	ip, r2
 8000e2a:	458c      	cmp	ip, r1
 8000e2c:	4686      	mov	lr, r0
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	d962      	bls.n	8000efa <__udivmoddi4+0xde>
 8000e34:	b14a      	cbz	r2, 8000e4a <__udivmoddi4+0x2e>
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	4091      	lsls	r1, r2
 8000e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e44:	4319      	orrs	r1, r3
 8000e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f f68c 	uxth.w	r6, ip
 8000e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d90a      	bls.n	8000e80 <__udivmoddi4+0x64>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e72:	f080 8112 	bcs.w	800109a <__udivmoddi4+0x27e>
 8000e76:	4299      	cmp	r1, r3
 8000e78:	f240 810f 	bls.w	800109a <__udivmoddi4+0x27e>
 8000e7c:	3c02      	subs	r4, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	1a59      	subs	r1, r3, r1
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e92:	fb00 f606 	mul.w	r6, r0, r6
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d90a      	bls.n	8000eb0 <__udivmoddi4+0x94>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea2:	f080 80fc 	bcs.w	800109e <__udivmoddi4+0x282>
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	f240 80f9 	bls.w	800109e <__udivmoddi4+0x282>
 8000eac:	4463      	add	r3, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	b11d      	cbz	r5, 8000ec2 <__udivmoddi4+0xa6>
 8000eba:	40d3      	lsrs	r3, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d905      	bls.n	8000ed6 <__udivmoddi4+0xba>
 8000eca:	b10d      	cbz	r5, 8000ed0 <__udivmoddi4+0xb4>
 8000ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e7f5      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000ed6:	fab3 f183 	clz	r1, r3
 8000eda:	2900      	cmp	r1, #0
 8000edc:	d146      	bne.n	8000f6c <__udivmoddi4+0x150>
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xcc>
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	f0c0 80f0 	bcc.w	80010c8 <__udivmoddi4+0x2ac>
 8000ee8:	1a86      	subs	r6, r0, r2
 8000eea:	eb64 0303 	sbc.w	r3, r4, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d0e6      	beq.n	8000ec2 <__udivmoddi4+0xa6>
 8000ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ef8:	e7e3      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	f040 8090 	bne.w	8001020 <__udivmoddi4+0x204>
 8000f00:	eba1 040c 	sub.w	r4, r1, ip
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f16:	fb08 4416 	mls	r4, r8, r6, r4
 8000f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f1e:	fb07 f006 	mul.w	r0, r7, r6
 8000f22:	4298      	cmp	r0, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x11c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x11a>
 8000f30:	4298      	cmp	r0, r3
 8000f32:	f200 80cd 	bhi.w	80010d0 <__udivmoddi4+0x2b4>
 8000f36:	4626      	mov	r6, r4
 8000f38:	1a1c      	subs	r4, r3, r0
 8000f3a:	fa1f f38e 	uxth.w	r3, lr
 8000f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f42:	fb08 4410 	mls	r4, r8, r0, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb00 f707 	mul.w	r7, r0, r7
 8000f4e:	429f      	cmp	r7, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x148>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x146>
 8000f5c:	429f      	cmp	r7, r3
 8000f5e:	f200 80b0 	bhi.w	80010c2 <__udivmoddi4+0x2a6>
 8000f62:	4620      	mov	r0, r4
 8000f64:	1bdb      	subs	r3, r3, r7
 8000f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f6a:	e7a5      	b.n	8000eb8 <__udivmoddi4+0x9c>
 8000f6c:	f1c1 0620 	rsb	r6, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 f706 	lsr.w	r7, r2, r6
 8000f76:	431f      	orrs	r7, r3
 8000f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000f80:	ea43 030c 	orr.w	r3, r3, ip
 8000f84:	40f4      	lsrs	r4, r6
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	0c38      	lsrs	r0, r7, #16
 8000f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f90:	fbb4 fef0 	udiv	lr, r4, r0
 8000f94:	fa1f fc87 	uxth.w	ip, r7
 8000f98:	fb00 441e 	mls	r4, r0, lr, r4
 8000f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fa4:	45a1      	cmp	r9, r4
 8000fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x1a6>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fb2:	f080 8084 	bcs.w	80010be <__udivmoddi4+0x2a2>
 8000fb6:	45a1      	cmp	r9, r4
 8000fb8:	f240 8081 	bls.w	80010be <__udivmoddi4+0x2a2>
 8000fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	eba4 0409 	sub.w	r4, r4, r9
 8000fc6:	fa1f f983 	uxth.w	r9, r3
 8000fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fce:	fb00 4413 	mls	r4, r0, r3, r4
 8000fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fda:	45a4      	cmp	ip, r4
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x1d2>
 8000fde:	193c      	adds	r4, r7, r4
 8000fe0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fe4:	d267      	bcs.n	80010b6 <__udivmoddi4+0x29a>
 8000fe6:	45a4      	cmp	ip, r4
 8000fe8:	d965      	bls.n	80010b6 <__udivmoddi4+0x29a>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ff6:	eba4 040c 	sub.w	r4, r4, ip
 8000ffa:	429c      	cmp	r4, r3
 8000ffc:	46ce      	mov	lr, r9
 8000ffe:	469c      	mov	ip, r3
 8001000:	d351      	bcc.n	80010a6 <__udivmoddi4+0x28a>
 8001002:	d04e      	beq.n	80010a2 <__udivmoddi4+0x286>
 8001004:	b155      	cbz	r5, 800101c <__udivmoddi4+0x200>
 8001006:	ebb8 030e 	subs.w	r3, r8, lr
 800100a:	eb64 040c 	sbc.w	r4, r4, ip
 800100e:	fa04 f606 	lsl.w	r6, r4, r6
 8001012:	40cb      	lsrs	r3, r1
 8001014:	431e      	orrs	r6, r3
 8001016:	40cc      	lsrs	r4, r1
 8001018:	e9c5 6400 	strd	r6, r4, [r5]
 800101c:	2100      	movs	r1, #0
 800101e:	e750      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8001020:	f1c2 0320 	rsb	r3, r2, #32
 8001024:	fa20 f103 	lsr.w	r1, r0, r3
 8001028:	fa0c fc02 	lsl.w	ip, ip, r2
 800102c:	fa24 f303 	lsr.w	r3, r4, r3
 8001030:	4094      	lsls	r4, r2
 8001032:	430c      	orrs	r4, r1
 8001034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001038:	fa00 fe02 	lsl.w	lr, r0, r2
 800103c:	fa1f f78c 	uxth.w	r7, ip
 8001040:	fbb3 f0f8 	udiv	r0, r3, r8
 8001044:	fb08 3110 	mls	r1, r8, r0, r3
 8001048:	0c23      	lsrs	r3, r4, #16
 800104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104e:	fb00 f107 	mul.w	r1, r0, r7
 8001052:	4299      	cmp	r1, r3
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x24c>
 8001056:	eb1c 0303 	adds.w	r3, ip, r3
 800105a:	f100 36ff 	add.w	r6, r0, #4294967295
 800105e:	d22c      	bcs.n	80010ba <__udivmoddi4+0x29e>
 8001060:	4299      	cmp	r1, r3
 8001062:	d92a      	bls.n	80010ba <__udivmoddi4+0x29e>
 8001064:	3802      	subs	r0, #2
 8001066:	4463      	add	r3, ip
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001070:	fb08 3311 	mls	r3, r8, r1, r3
 8001074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001078:	fb01 f307 	mul.w	r3, r1, r7
 800107c:	42a3      	cmp	r3, r4
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x276>
 8001080:	eb1c 0404 	adds.w	r4, ip, r4
 8001084:	f101 36ff 	add.w	r6, r1, #4294967295
 8001088:	d213      	bcs.n	80010b2 <__udivmoddi4+0x296>
 800108a:	42a3      	cmp	r3, r4
 800108c:	d911      	bls.n	80010b2 <__udivmoddi4+0x296>
 800108e:	3902      	subs	r1, #2
 8001090:	4464      	add	r4, ip
 8001092:	1ae4      	subs	r4, r4, r3
 8001094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001098:	e739      	b.n	8000f0e <__udivmoddi4+0xf2>
 800109a:	4604      	mov	r4, r0
 800109c:	e6f0      	b.n	8000e80 <__udivmoddi4+0x64>
 800109e:	4608      	mov	r0, r1
 80010a0:	e706      	b.n	8000eb0 <__udivmoddi4+0x94>
 80010a2:	45c8      	cmp	r8, r9
 80010a4:	d2ae      	bcs.n	8001004 <__udivmoddi4+0x1e8>
 80010a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ae:	3801      	subs	r0, #1
 80010b0:	e7a8      	b.n	8001004 <__udivmoddi4+0x1e8>
 80010b2:	4631      	mov	r1, r6
 80010b4:	e7ed      	b.n	8001092 <__udivmoddi4+0x276>
 80010b6:	4603      	mov	r3, r0
 80010b8:	e799      	b.n	8000fee <__udivmoddi4+0x1d2>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e7d4      	b.n	8001068 <__udivmoddi4+0x24c>
 80010be:	46d6      	mov	lr, sl
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1a6>
 80010c2:	4463      	add	r3, ip
 80010c4:	3802      	subs	r0, #2
 80010c6:	e74d      	b.n	8000f64 <__udivmoddi4+0x148>
 80010c8:	4606      	mov	r6, r0
 80010ca:	4623      	mov	r3, r4
 80010cc:	4608      	mov	r0, r1
 80010ce:	e70f      	b.n	8000ef0 <__udivmoddi4+0xd4>
 80010d0:	3e02      	subs	r6, #2
 80010d2:	4463      	add	r3, ip
 80010d4:	e730      	b.n	8000f38 <__udivmoddi4+0x11c>
 80010d6:	bf00      	nop

080010d8 <__aeabi_idiv0>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <modbus_1t5_Timeout>:
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);
void Hearthbeat();

// function for interrupt
void modbus_1t5_Timeout()
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2201      	movs	r2, #1
 80010e6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0201 	orr.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	200002a4 	.word	0x200002a4

0800111c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <modbus_3t5_Timeout+0x1c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2201      	movs	r2, #1
 800112a:	755a      	strb	r2, [r3, #21]

}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	200002a4 	.word	0x200002a4

0800113c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f009 fb81 	bl	800a84c <HAL_UART_GetError>
 800114a:	4603      	mov	r3, r0
 800114c:	2b20      	cmp	r3, #32
 800114e:	d101      	bne.n	8001154 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001150:	f7ff ffc4 	bl	80010dc <modbus_1t5_Timeout>

	}
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001166:	4a25      	ldr	r2, [pc, #148]	@ (80011fc <Modbus_init+0xa0>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800116c:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <Modbus_init+0xa0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	4a21      	ldr	r2, [pc, #132]	@ (8001200 <Modbus_init+0xa4>)
 800117a:	210e      	movs	r1, #14
 800117c:	4618      	mov	r0, r3
 800117e:	f007 fe3d 	bl	8008dfc <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2110      	movs	r1, #16
 8001188:	4618      	mov	r0, r3
 800118a:	f009 fb09 	bl	800a7a0 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	4618      	mov	r0, r3
 8001194:	f009 fb20 	bl	800a7d8 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	4a19      	ldr	r2, [pc, #100]	@ (8001204 <Modbus_init+0xa8>)
 800119e:	2104      	movs	r1, #4
 80011a0:	4618      	mov	r0, r3
 80011a2:	f008 fde7 	bl	8009d74 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <Modbus_init+0xa0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <Modbus_init+0xa0>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <Modbus_init+0xa0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80011b8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011bc:	4413      	add	r3, r2
 80011be:	3302      	adds	r3, #2
 80011c0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011c4:	4619      	mov	r1, r3
 80011c6:	f008 ff0f 	bl	8009fe8 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <Modbus_init+0xa0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d10c      	bne.n	80011f4 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f006 fddd 	bl	8007da0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011e6:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <Modbus_init+0xa0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f007 f836 	bl	8008260 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200002a4 	.word	0x200002a4
 8001200:	0800111d 	.word	0x0800111d
 8001204:	0800113d 	.word	0x0800113d

08001208 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001214:	23ff      	movs	r3, #255	@ 0xff
 8001216:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001218:	23ff      	movs	r3, #255	@ 0xff
 800121a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800121c:	e013      	b.n	8001246 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	781a      	ldrb	r2, [r3, #0]
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	4053      	eors	r3, r2
 800122a:	b2db      	uxtb	r3, r3
 800122c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800122e:	4a0f      	ldr	r2, [pc, #60]	@ (800126c <CRC16+0x64>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4413      	add	r3, r2
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	4053      	eors	r3, r2
 800123a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800123c:	4a0c      	ldr	r2, [pc, #48]	@ (8001270 <CRC16+0x68>)
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	4413      	add	r3, r2
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001246:	883b      	ldrh	r3, [r7, #0]
 8001248:	1e5a      	subs	r2, r3, #1
 800124a:	803a      	strh	r2, [r7, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1e6      	bne.n	800121e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	7bbb      	ldrb	r3, [r7, #14]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21b      	sxth	r3, r3
 800125e:	b29b      	uxth	r3, r3
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	20000100 	.word	0x20000100
 8001270:	20000000 	.word	0x20000000

08001274 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800127a:	4b7e      	ldr	r3, [pc, #504]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	7ddb      	ldrb	r3, [r3, #23]
 8001280:	3b01      	subs	r3, #1
 8001282:	2b03      	cmp	r3, #3
 8001284:	d80a      	bhi.n	800129c <Modbus_Protocal_Worker+0x28>
 8001286:	a201      	add	r2, pc, #4	@ (adr r2, 800128c <Modbus_Protocal_Worker+0x18>)
 8001288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128c:	080012a7 	.word	0x080012a7
 8001290:	0800143b 	.word	0x0800143b
 8001294:	08001333 	.word	0x08001333
 8001298:	08001377 	.word	0x08001377
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 800129c:	4b75      	ldr	r3, [pc, #468]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2201      	movs	r2, #1
 80012a2:	75da      	strb	r2, [r3, #23]
		break;
 80012a4:	e0e1      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80012a6:	4b73      	ldr	r3, [pc, #460]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80012b2:	4b70      	ldr	r3, [pc, #448]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2202      	movs	r2, #2
 80012b8:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80012ba:	f000 f9cd 	bl	8001658 <Modbus_Emission>
 80012be:	e018      	b.n	80012f2 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80012c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80012ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d00b      	beq.n	80012f2 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80012da:	4b66      	ldr	r3, [pc, #408]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2200      	movs	r2, #0
 80012e0:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80012e2:	4b64      	ldr	r3, [pc, #400]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2200      	movs	r2, #0
 80012e8:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80012ea:	4b62      	ldr	r3, [pc, #392]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2203      	movs	r2, #3
 80012f0:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80012f2:	4b60      	ldr	r3, [pc, #384]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012fc:	2b20      	cmp	r3, #32
 80012fe:	f040 80ad 	bne.w	800145c <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001302:	4b5c      	ldr	r3, [pc, #368]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2200      	movs	r2, #0
 8001308:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800130c:	4b59      	ldr	r3, [pc, #356]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001312:	4b58      	ldr	r3, [pc, #352]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b57      	ldr	r3, [pc, #348]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800131e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001322:	4413      	add	r3, r2
 8001324:	3302      	adds	r3, #2
 8001326:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800132a:	4619      	mov	r1, r3
 800132c:	f008 fe5c 	bl	8009fe8 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001330:	e094      	b.n	800145c <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001332:	4b50      	ldr	r3, [pc, #320]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	7d1b      	ldrb	r3, [r3, #20]
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 8091 	beq.w	8001460 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800133e:	4b4d      	ldr	r3, [pc, #308]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	22fe      	movs	r2, #254	@ 0xfe
 8001344:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001346:	4b4b      	ldr	r3, [pc, #300]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001350:	4b48      	ldr	r3, [pc, #288]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001360:	4b44      	ldr	r3, [pc, #272]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001362:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001364:	1a8a      	subs	r2, r1, r2
 8001366:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001368:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800136c:	4b41      	ldr	r3, [pc, #260]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2204      	movs	r2, #4
 8001372:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001374:	e074      	b.n	8001460 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001376:	4b3f      	ldr	r3, [pc, #252]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800137e:	f113 0f02 	cmn.w	r3, #2
 8001382:	d150      	bne.n	8001426 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001384:	4b3b      	ldr	r3, [pc, #236]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2200      	movs	r2, #0
 800138a:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 800138c:	4b39      	ldr	r3, [pc, #228]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001394:	4b37      	ldr	r3, [pc, #220]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800139c:	3b02      	subs	r3, #2
 800139e:	4619      	mov	r1, r3
 80013a0:	4610      	mov	r0, r2
 80013a2:	f7ff ff31 	bl	8001208 <CRC16>
 80013a6:	4603      	mov	r3, r0
 80013a8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013aa:	793a      	ldrb	r2, [r7, #4]
 80013ac:	4b31      	ldr	r3, [pc, #196]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013ae:	6819      	ldr	r1, [r3, #0]
 80013b0:	4b30      	ldr	r3, [pc, #192]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013b8:	3b02      	subs	r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d10c      	bne.n	80013de <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80013c4:	797a      	ldrb	r2, [r7, #5]
 80013c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013c8:	6819      	ldr	r1, [r3, #0]
 80013ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013d2:	3b01      	subs	r3, #1
 80013d4:	440b      	add	r3, r1
 80013d6:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d004      	beq.n	80013e8 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80013de:	4b25      	ldr	r3, [pc, #148]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	22ff      	movs	r2, #255	@ 0xff
 80013e4:	759a      	strb	r2, [r3, #22]
				break;
 80013e6:	e040      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80013e8:	4b22      	ldr	r3, [pc, #136]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80013f0:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d113      	bne.n	8001422 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80013fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001402:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800140a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800140c:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001414:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001416:	461a      	mov	r2, r3
 8001418:	f00a fba8 	bl	800bb6c <memcpy>

			//execute command
			Modbus_frame_response();
 800141c:	f000 f904 	bl	8001628 <Modbus_frame_response>
 8001420:	e001      	b.n	8001426 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001422:	bf00      	nop
					}
		break;


	}
}
 8001424:	e021      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8001426:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	7d5b      	ldrb	r3, [r3, #21]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d019      	beq.n	8001464 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001430:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2201      	movs	r2, #1
 8001436:	75da      	strb	r2, [r3, #23]
		break;
 8001438:	e014      	b.n	8001464 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800143a:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001444:	2b20      	cmp	r3, #32
 8001446:	d10f      	bne.n	8001468 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001448:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001452:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <Modbus_Protocal_Worker+0x200>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2201      	movs	r2, #1
 8001458:	75da      	strb	r2, [r3, #23]
		break;
 800145a:	e005      	b.n	8001468 <Modbus_Protocal_Worker+0x1f4>
		break;
 800145c:	bf00      	nop
 800145e:	e004      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		break;
 8001460:	bf00      	nop
 8001462:	e002      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		break;
 8001464:	bf00      	nop
 8001466:	e000      	b.n	800146a <Modbus_Protocal_Worker+0x1f6>
		break;
 8001468:	bf00      	nop
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200002a4 	.word	0x200002a4

08001478 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800147e:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <modbusWrite1Register+0x7c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	7e5b      	ldrb	r3, [r3, #25]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	b29b      	uxth	r3, r3
 8001488:	4a1a      	ldr	r2, [pc, #104]	@ (80014f4 <modbusWrite1Register+0x7c>)
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	7e92      	ldrb	r2, [r2, #26]
 800148e:	4413      	add	r3, r2
 8001490:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001492:	88fa      	ldrh	r2, [r7, #6]
 8001494:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <modbusWrite1Register+0x7c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	429a      	cmp	r2, r3
 800149c:	d903      	bls.n	80014a6 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800149e:	2002      	movs	r0, #2
 80014a0:	f000 f8a0 	bl	80015e4 <ModbusErrorReply>
			 return;
 80014a4:	e023      	b.n	80014ee <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80014a6:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	440b      	add	r3, r1
 80014b6:	7ed2      	ldrb	r2, [r2, #27]
 80014b8:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6859      	ldr	r1, [r3, #4]
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	440b      	add	r3, r1
 80014ca:	7f12      	ldrb	r2, [r2, #28]
 80014cc:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80014d6:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80014dc:	2208      	movs	r2, #8
 80014de:	4619      	mov	r1, r3
 80014e0:	f00a fb44 	bl	800bb6c <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <modbusWrite1Register+0x7c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2205      	movs	r2, #5
 80014ea:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200002a4 	.word	0x200002a4

080014f8 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80014fe:	4b38      	ldr	r3, [pc, #224]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	7edb      	ldrb	r3, [r3, #27]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b29b      	uxth	r3, r3
 8001508:	4a35      	ldr	r2, [pc, #212]	@ (80015e0 <modbusRead1Register+0xe8>)
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	7f12      	ldrb	r2, [r2, #28]
 800150e:	4413      	add	r3, r2
 8001510:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001512:	4b33      	ldr	r3, [pc, #204]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	7e5b      	ldrb	r3, [r3, #25]
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	b29b      	uxth	r3, r3
 800151c:	4a30      	ldr	r2, [pc, #192]	@ (80015e0 <modbusRead1Register+0xe8>)
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	7e92      	ldrb	r2, [r2, #26]
 8001522:	4413      	add	r3, r2
 8001524:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <modbusRead1Register+0x3a>
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	2b7d      	cmp	r3, #125	@ 0x7d
 8001530:	d903      	bls.n	800153a <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001532:	2003      	movs	r0, #3
 8001534:	f000 f856 	bl	80015e4 <ModbusErrorReply>
		 return;
 8001538:	e04e      	b.n	80015d8 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800153a:	88ba      	ldrh	r2, [r7, #4]
 800153c:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <modbusRead1Register+0xe8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	429a      	cmp	r2, r3
 8001544:	d808      	bhi.n	8001558 <modbusRead1Register+0x60>
 8001546:	88ba      	ldrh	r2, [r7, #4]
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	4413      	add	r3, r2
 800154c:	461a      	mov	r2, r3
 800154e:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	429a      	cmp	r2, r3
 8001556:	d903      	bls.n	8001560 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001558:	2002      	movs	r0, #2
 800155a:	f000 f843 	bl	80015e4 <ModbusErrorReply>
		 return;
 800155e:	e03b      	b.n	80015d8 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001560:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2203      	movs	r2, #3
 8001566:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0052      	lsls	r2, r2, #1
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800157a:	2400      	movs	r4, #0
 800157c:	e020      	b.n	80015c0 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800157e:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <modbusRead1Register+0xe8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	88bb      	ldrh	r3, [r7, #4]
 8001586:	4423      	add	r3, r4
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	18d1      	adds	r1, r2, r3
 800158c:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <modbusRead1Register+0xe8>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	1c63      	adds	r3, r4, #1
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	7849      	ldrb	r1, [r1, #1]
 8001596:	4413      	add	r3, r2
 8001598:	460a      	mov	r2, r1
 800159a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <modbusRead1Register+0xe8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	88bb      	ldrh	r3, [r7, #4]
 80015a6:	4423      	add	r3, r4
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	18d1      	adds	r1, r2, r3
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <modbusRead1Register+0xe8>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	0063      	lsls	r3, r4, #1
 80015b2:	3303      	adds	r3, #3
 80015b4:	7809      	ldrb	r1, [r1, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	460a      	mov	r2, r1
 80015ba:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80015be:	3401      	adds	r4, #1
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	429c      	cmp	r4, r3
 80015c4:	dbdb      	blt.n	800157e <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	3301      	adds	r3, #1
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b04      	ldr	r3, [pc, #16]	@ (80015e0 <modbusRead1Register+0xe8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	0052      	lsls	r2, r2, #1
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	200002a4 	.word	0x200002a4

080015e4 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80015ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001624 <ModbusErrorReply+0x40>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	7e1a      	ldrb	r2, [r3, #24]
 80015f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <ModbusErrorReply+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001602:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <ModbusErrorReply+0x40>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	79fa      	ldrb	r2, [r7, #7]
 8001608:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 800160c:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <ModbusErrorReply+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2202      	movs	r2, #2
 8001612:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	200002a4 	.word	0x200002a4

08001628 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 800162c:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <Modbus_frame_response+0x2c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	7e1b      	ldrb	r3, [r3, #24]
 8001632:	2b03      	cmp	r3, #3
 8001634:	d004      	beq.n	8001640 <Modbus_frame_response+0x18>
 8001636:	2b06      	cmp	r3, #6
 8001638:	d105      	bne.n	8001646 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800163a:	f7ff ff1d 	bl	8001478 <modbusWrite1Register>
		break;
 800163e:	e006      	b.n	800164e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001640:	f7ff ff5a 	bl	80014f8 <modbusRead1Register>
		break;
 8001644:	e003      	b.n	800164e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001646:	2001      	movs	r0, #1
 8001648:	f7ff ffcc 	bl	80015e4 <ModbusErrorReply>
		break;
 800164c:	bf00      	nop

	}
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200002a4 	.word	0x200002a4

08001658 <Modbus_Emission>:

void Modbus_Emission()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800165e:	4b38      	ldr	r3, [pc, #224]	@ (8001740 <Modbus_Emission+0xe8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001668:	2b20      	cmp	r3, #32
 800166a:	d15d      	bne.n	8001728 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800166c:	4b34      	ldr	r3, [pc, #208]	@ (8001740 <Modbus_Emission+0xe8>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b33      	ldr	r3, [pc, #204]	@ (8001740 <Modbus_Emission+0xe8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800167a:	4b31      	ldr	r3, [pc, #196]	@ (8001740 <Modbus_Emission+0xe8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001682:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001684:	4b2e      	ldr	r3, [pc, #184]	@ (8001740 <Modbus_Emission+0xe8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 800168c:	4b2c      	ldr	r3, [pc, #176]	@ (8001740 <Modbus_Emission+0xe8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001694:	461a      	mov	r2, r3
 8001696:	f00a fa69 	bl	800bb6c <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800169a:	4b29      	ldr	r3, [pc, #164]	@ (8001740 <Modbus_Emission+0xe8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b26      	ldr	r3, [pc, #152]	@ (8001740 <Modbus_Emission+0xe8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3203      	adds	r2, #3
 80016aa:	b292      	uxth	r2, r2
 80016ac:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016b0:	4b23      	ldr	r3, [pc, #140]	@ (8001740 <Modbus_Emission+0xe8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80016b8:	4b21      	ldr	r3, [pc, #132]	@ (8001740 <Modbus_Emission+0xe8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016c0:	3b02      	subs	r3, #2
 80016c2:	4619      	mov	r1, r3
 80016c4:	4610      	mov	r0, r2
 80016c6:	f7ff fd9f 	bl	8001208 <CRC16>
 80016ca:	4603      	mov	r3, r0
 80016cc:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80016ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <Modbus_Emission+0xe8>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <Modbus_Emission+0xe8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80016da:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80016dc:	7939      	ldrb	r1, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	460a      	mov	r2, r1
 80016e2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80016e6:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <Modbus_Emission+0xe8>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <Modbus_Emission+0xe8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80016f2:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80016f4:	7979      	ldrb	r1, [r7, #5]
 80016f6:	4413      	add	r3, r2
 80016f8:	460a      	mov	r2, r1
 80016fa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80016fe:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <Modbus_Emission+0xe8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001708:	2b20      	cmp	r3, #32
 800170a:	d10d      	bne.n	8001728 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <Modbus_Emission+0xe8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <Modbus_Emission+0xe8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <Modbus_Emission+0xe8>)
 800171c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800171e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001722:	461a      	mov	r2, r3
 8001724:	f008 fbe0 	bl	8009ee8 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <Modbus_Emission+0xe8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2200      	movs	r2, #0
 800172e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <Modbus_Emission+0xe8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2200      	movs	r2, #0
 8001736:	755a      	strb	r2, [r3, #21]

}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200002a4 	.word	0x200002a4

08001744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001744:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800174c:	f003 f821 	bl	8004792 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001750:	f000 faaa 	bl	8001ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001754:	f000 fde2 	bl	800231c <MX_GPIO_Init>
  MX_DMA_Init();
 8001758:	f000 fd9a 	bl	8002290 <MX_DMA_Init>
  MX_TIM3_Init();
 800175c:	f000 fbce 	bl	8001efc <MX_TIM3_Init>
  MX_TIM2_Init();
 8001760:	f000 fb78 	bl	8001e54 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001764:	f000 fc90 	bl	8002088 <MX_TIM5_Init>
  MX_ADC1_Init();
 8001768:	f000 faea 	bl	8001d40 <MX_ADC1_Init>
  MX_TIM4_Init();
 800176c:	f000 fc3e 	bl	8001fec <MX_TIM4_Init>
  MX_TIM6_Init();
 8001770:	f000 fcd8 	bl	8002124 <MX_TIM6_Init>
  MX_TIM16_Init();
 8001774:	f000 fd0e 	bl	8002194 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001778:	f000 fd3c 	bl	80021f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //PWM Motor
  HAL_TIM_Base_Start(&htim3);
 800177c:	48ad      	ldr	r0, [pc, #692]	@ (8001a34 <main+0x2f0>)
 800177e:	f006 fa9f 	bl	8007cc0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001782:	2100      	movs	r1, #0
 8001784:	48ab      	ldr	r0, [pc, #684]	@ (8001a34 <main+0x2f0>)
 8001786:	f006 fbf1 	bl	8007f6c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 800178a:	4baa      	ldr	r3, [pc, #680]	@ (8001a34 <main+0x2f0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001792:	635a      	str	r2, [r3, #52]	@ 0x34

  //Read Encoder
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001794:	213c      	movs	r1, #60	@ 0x3c
 8001796:	48a8      	ldr	r0, [pc, #672]	@ (8001a38 <main+0x2f4>)
 8001798:	f006 fea4 	bl	80084e4 <HAL_TIM_Encoder_Start>

  //time microsec
  HAL_TIM_Base_Start_IT(&htim5);
 800179c:	48a7      	ldr	r0, [pc, #668]	@ (8001a3c <main+0x2f8>)
 800179e:	f006 faff 	bl	8007da0 <HAL_TIM_Base_Start_IT>

  //Read joystick
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 2);
 80017a2:	2202      	movs	r2, #2
 80017a4:	49a6      	ldr	r1, [pc, #664]	@ (8001a40 <main+0x2fc>)
 80017a6:	48a7      	ldr	r0, [pc, #668]	@ (8001a44 <main+0x300>)
 80017a8:	f003 fc60 	bl	800506c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim4);
 80017ac:	48a6      	ldr	r0, [pc, #664]	@ (8001a48 <main+0x304>)
 80017ae:	f006 fa87 	bl	8007cc0 <HAL_TIM_Base_Start>

  //PID Control Position
  PID1.Kp = 0; // 7.5
 80017b2:	4ba6      	ldr	r3, [pc, #664]	@ (8001a4c <main+0x308>)
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  PID1.Ki = 0; // 0.0025
 80017ba:	4ba4      	ldr	r3, [pc, #656]	@ (8001a4c <main+0x308>)
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  PID1.Kd = 0; // 3
 80017c2:	4ba2      	ldr	r3, [pc, #648]	@ (8001a4c <main+0x308>)
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID1, 0);
 80017ca:	2100      	movs	r1, #0
 80017cc:	489f      	ldr	r0, [pc, #636]	@ (8001a4c <main+0x308>)
 80017ce:	f00a f965 	bl	800ba9c <arm_pid_init_f32>

  //PID Control Velocity
  PID2.Kp = 0.003; //0.5
 80017d2:	4b9f      	ldr	r3, [pc, #636]	@ (8001a50 <main+0x30c>)
 80017d4:	4a9f      	ldr	r2, [pc, #636]	@ (8001a54 <main+0x310>)
 80017d6:	619a      	str	r2, [r3, #24]
  PID2.Ki = 0.019; // 0.006
 80017d8:	4b9d      	ldr	r3, [pc, #628]	@ (8001a50 <main+0x30c>)
 80017da:	4a9f      	ldr	r2, [pc, #636]	@ (8001a58 <main+0x314>)
 80017dc:	61da      	str	r2, [r3, #28]
  PID2.Kd = 0.07; // 0.05
 80017de:	4b9c      	ldr	r3, [pc, #624]	@ (8001a50 <main+0x30c>)
 80017e0:	4a9e      	ldr	r2, [pc, #632]	@ (8001a5c <main+0x318>)
 80017e2:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID2, 0);
 80017e4:	2100      	movs	r1, #0
 80017e6:	489a      	ldr	r0, [pc, #616]	@ (8001a50 <main+0x30c>)
 80017e8:	f00a f958 	bl	800ba9c <arm_pid_init_f32>

  //Modbus Setting
  // manaul add
  HAL_TIM_Base_Start_IT(&htim6);
 80017ec:	489c      	ldr	r0, [pc, #624]	@ (8001a60 <main+0x31c>)
 80017ee:	f006 fad7 	bl	8007da0 <HAL_TIM_Base_Start_IT>

  //  modbus
  hmodbus.huart = &huart2;
 80017f2:	4b9c      	ldr	r3, [pc, #624]	@ (8001a64 <main+0x320>)
 80017f4:	4a9c      	ldr	r2, [pc, #624]	@ (8001a68 <main+0x324>)
 80017f6:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80017f8:	4b9a      	ldr	r3, [pc, #616]	@ (8001a64 <main+0x320>)
 80017fa:	4a9c      	ldr	r2, [pc, #624]	@ (8001a6c <main+0x328>)
 80017fc:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80017fe:	4b99      	ldr	r3, [pc, #612]	@ (8001a64 <main+0x320>)
 8001800:	2215      	movs	r2, #21
 8001802:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8001804:	4b97      	ldr	r3, [pc, #604]	@ (8001a64 <main+0x320>)
 8001806:	22c8      	movs	r2, #200	@ 0xc8
 8001808:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 800180a:	4999      	ldr	r1, [pc, #612]	@ (8001a70 <main+0x32c>)
 800180c:	4895      	ldr	r0, [pc, #596]	@ (8001a64 <main+0x320>)
 800180e:	f7ff fca5 	bl	800115c <Modbus_init>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001812:	2201      	movs	r2, #1
 8001814:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001818:	4896      	ldr	r0, [pc, #600]	@ (8001a74 <main+0x330>)
 800181a:	f005 f98d 	bl	8006b38 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //------Modbus Function------//
	  Modbus_Protocal_Worker();
 800181e:	f7ff fd29 	bl	8001274 <Modbus_Protocal_Worker>
	  check_vaccum_status();
 8001822:	f002 f8f5 	bl	8003a10 <check_vaccum_status>
	  check_gripper_status();
 8001826:	f002 f991 	bl	8003b4c <check_gripper_status>
	  set_shelf();
 800182a:	f002 fa37 	bl	8003c9c <set_shelf>
	  Pointmode();
 800182e:	f002 fadf 	bl	8003df0 <Pointmode>
	  Home();
 8001832:	f002 fb5b 	bl	8003eec <Home>
//	  Run_jog();

	  static uint64_t timestamp = 0;
	  static uint64_t timestamp2 = 0;

	  currentTime = micros();
 8001836:	f000 fe95 	bl	8002564 <micros>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	498e      	ldr	r1, [pc, #568]	@ (8001a78 <main+0x334>)
 8001840:	e9c1 2300 	strd	r2, r3, [r1]
	  if (max_velo < QEIdata.linearVel)
 8001844:	4b8d      	ldr	r3, [pc, #564]	@ (8001a7c <main+0x338>)
 8001846:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800184a:	4b8d      	ldr	r3, [pc, #564]	@ (8001a80 <main+0x33c>)
 800184c:	edd3 7a00 	vldr	s15, [r3]
 8001850:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001858:	dd03      	ble.n	8001862 <main+0x11e>
	  {
		  max_velo = QEIdata.linearVel;
 800185a:	4b88      	ldr	r3, [pc, #544]	@ (8001a7c <main+0x338>)
 800185c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185e:	4a88      	ldr	r2, [pc, #544]	@ (8001a80 <main+0x33c>)
 8001860:	6013      	str	r3, [r2, #0]
	  }

	  if(currentTime > timestamp2){
 8001862:	4b85      	ldr	r3, [pc, #532]	@ (8001a78 <main+0x334>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	4b85      	ldr	r3, [pc, #532]	@ (8001a84 <main+0x340>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	4282      	cmp	r2, r0
 8001874:	418b      	sbcs	r3, r1
 8001876:	f080 8121 	bcs.w	8001abc <main+0x378>
		  timestamp2 = currentTime + 167; //6,000 Hz
 800187a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a78 <main+0x334>)
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	f112 04a7 	adds.w	r4, r2, #167	@ 0xa7
 8001884:	f143 0500 	adc.w	r5, r3, #0
 8001888:	4622      	mov	r2, r4
 800188a:	462b      	mov	r3, r5
 800188c:	497d      	ldr	r1, [pc, #500]	@ (8001a84 <main+0x340>)
 800188e:	e9c1 2300 	strd	r2, r3, [r1]

		  //Read encoder
		  QEIEncoderPosVel_Update();
 8001892:	f000 fe7d 	bl	8002590 <QEIEncoderPosVel_Update>

		  //Create Trajectory
		  q_f = setPosition;
 8001896:	4b7c      	ldr	r3, [pc, #496]	@ (8001a88 <main+0x344>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a7c      	ldr	r2, [pc, #496]	@ (8001a8c <main+0x348>)
 800189c:	6013      	str	r3, [r2, #0]
		  checkStartMoving();
 800189e:	f000 ffa3 	bl	80027e8 <checkStartMoving>
		  createTrajectory();
 80018a2:	f001 f9d1 	bl	8002c48 <createTrajectory>

		  if(mode == 1){
 80018a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001a90 <main+0x34c>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d175      	bne.n	800199a <main+0x256>
			  LED_Auto();
 80018ae:	f002 fbd7 	bl	8004060 <LED_Auto>
			  if(fabs(setPosition - QEIdata.linearPos) <= 5 || setPosition == 0){
 80018b2:	4b75      	ldr	r3, [pc, #468]	@ (8001a88 <main+0x344>)
 80018b4:	ed93 7a00 	vldr	s14, [r3]
 80018b8:	4b70      	ldr	r3, [pc, #448]	@ (8001a7c <main+0x338>)
 80018ba:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80018be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c2:	eef0 7ae7 	vabs.f32	s15, s15
 80018c6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80018ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d2:	d907      	bls.n	80018e4 <main+0x1a0>
 80018d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001a88 <main+0x344>)
 80018d6:	edd3 7a00 	vldr	s15, [r3]
 80018da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e2:	d104      	bne.n	80018ee <main+0x1aa>
				  Vin = 0;
 80018e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001a94 <main+0x350>)
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e03a      	b.n	8001964 <main+0x220>
//			  	  Vin = -1.35;
//			  	  check = -1;
//			  }
			  else{
				  //Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 - QEIdata.linearVel);
				  Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
 80018ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001a98 <main+0x354>)
 80018f0:	ed93 7a00 	vldr	s14, [r3]
 80018f4:	4b61      	ldr	r3, [pc, #388]	@ (8001a7c <main+0x338>)
 80018f6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80018fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018fe:	4b54      	ldr	r3, [pc, #336]	@ (8001a50 <main+0x30c>)
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	ed93 7a00 	vldr	s14, [r3]
 800190c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001910:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	edd3 6a01 	vldr	s13, [r3, #4]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001920:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001924:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	edd3 6a02 	vldr	s13, [r3, #8]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	edd3 7a04 	vldr	s15, [r3, #16]
 8001934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001938:	ee37 7a27 	vadd.f32	s14, s14, s15
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001946:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4a4c      	ldr	r2, [pc, #304]	@ (8001a94 <main+0x350>)
 8001962:	6013      	str	r3, [r2, #0]
			  }
			  if(Vin > 24){
 8001964:	4b4b      	ldr	r3, [pc, #300]	@ (8001a94 <main+0x350>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 800196e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	dd02      	ble.n	800197e <main+0x23a>
	  			  Vin = 24;
 8001978:	4b46      	ldr	r3, [pc, #280]	@ (8001a94 <main+0x350>)
 800197a:	4a48      	ldr	r2, [pc, #288]	@ (8001a9c <main+0x358>)
 800197c:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 800197e:	4b45      	ldr	r3, [pc, #276]	@ (8001a94 <main+0x350>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 8001988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001990:	d532      	bpl.n	80019f8 <main+0x2b4>
				  Vin = -24;
 8001992:	4b40      	ldr	r3, [pc, #256]	@ (8001a94 <main+0x350>)
 8001994:	4a42      	ldr	r2, [pc, #264]	@ (8001aa0 <main+0x35c>)
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	e02e      	b.n	80019f8 <main+0x2b4>
			  }
		  }
	      else if(mode == 2){ //manual (control with joy stick)
 800199a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a90 <main+0x34c>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d10a      	bne.n	80019b8 <main+0x274>
	    	  LED_Manual();
 80019a2:	f002 fb83 	bl	80040ac <LED_Manual>
			  JoystickInput();
 80019a6:	f001 fddf 	bl	8003568 <JoystickInput>
			  button_up_down_input();
 80019aa:	f001 fe3d 	bl	8003628 <button_up_down_input>
			  button_reset_input(); //set 0;
 80019ae:	f001 fedd 	bl	800376c <button_reset_input>
			  button_save_position();
 80019b2:	f001 ff5d 	bl	8003870 <button_save_position>
 80019b6:	e01f      	b.n	80019f8 <main+0x2b4>
		  }
		  else if(mode == 3){ //stop mode
 80019b8:	4b35      	ldr	r3, [pc, #212]	@ (8001a90 <main+0x34c>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d104      	bne.n	80019ca <main+0x286>
			  Vin = Vin_force;
 80019c0:	4b38      	ldr	r3, [pc, #224]	@ (8001aa4 <main+0x360>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a33      	ldr	r2, [pc, #204]	@ (8001a94 <main+0x350>)
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	e016      	b.n	80019f8 <main+0x2b4>
		  }
		  else if(mode == 4){ //Emergency mode
 80019ca:	4b31      	ldr	r3, [pc, #196]	@ (8001a90 <main+0x34c>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d112      	bne.n	80019f8 <main+0x2b4>
			  Vin = 0;
 80019d2:	4b30      	ldr	r3, [pc, #192]	@ (8001a94 <main+0x350>)
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
			  LED_Emergency();
 80019da:	f002 facf 	bl	8003f7c <LED_Emergency>

			  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1){
 80019de:	2104      	movs	r1, #4
 80019e0:	4831      	ldr	r0, [pc, #196]	@ (8001aa8 <main+0x364>)
 80019e2:	f005 f891 	bl	8006b08 <HAL_GPIO_ReadPin>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d105      	bne.n	80019f8 <main+0x2b4>
				  mode = 2;
 80019ec:	4b28      	ldr	r3, [pc, #160]	@ (8001a90 <main+0x34c>)
 80019ee:	2202      	movs	r2, #2
 80019f0:	701a      	strb	r2, [r3, #0]
				  emergency_reset = 1;
 80019f2:	4b2e      	ldr	r3, [pc, #184]	@ (8001aac <main+0x368>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]
			  }
		  }

		  if(mode == 1){
 80019f8:	4b25      	ldr	r3, [pc, #148]	@ (8001a90 <main+0x34c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d159      	bne.n	8001ab4 <main+0x370>
			  if(QEIdata.linearPos < -0.5 || QEIdata.linearPos > 450){
 8001a00:	4b1e      	ldr	r3, [pc, #120]	@ (8001a7c <main+0x338>)
 8001a02:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a06:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a12:	d409      	bmi.n	8001a28 <main+0x2e4>
 8001a14:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <main+0x338>)
 8001a16:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a1a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001ab0 <main+0x36c>
 8001a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	dd47      	ble.n	8001ab8 <main+0x374>
				  Vin = 0;
 8001a28:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <main+0x350>)
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e042      	b.n	8001ab8 <main+0x374>
 8001a32:	bf00      	nop
 8001a34:	20000440 	.word	0x20000440
 8001a38:	20000374 	.word	0x20000374
 8001a3c:	200005d8 	.word	0x200005d8
 8001a40:	20000a10 	.word	0x20000a10
 8001a44:	200002a8 	.word	0x200002a8
 8001a48:	2000050c 	.word	0x2000050c
 8001a4c:	20000a9c 	.word	0x20000a9c
 8001a50:	20000ac0 	.word	0x20000ac0
 8001a54:	3b449ba6 	.word	0x3b449ba6
 8001a58:	3c9ba5e3 	.word	0x3c9ba5e3
 8001a5c:	3d8f5c29 	.word	0x3d8f5c29
 8001a60:	200006a4 	.word	0x200006a4
 8001a64:	20000b00 	.word	0x20000b00
 8001a68:	2000083c 	.word	0x2000083c
 8001a6c:	20000770 	.word	0x20000770
 8001a70:	20000fd8 	.word	0x20000fd8
 8001a74:	48000400 	.word	0x48000400
 8001a78:	200011b8 	.word	0x200011b8
 8001a7c:	200009c8 	.word	0x200009c8
 8001a80:	20000ae8 	.word	0x20000ae8
 8001a84:	200011c0 	.word	0x200011c0
 8001a88:	20000ae4 	.word	0x20000ae4
 8001a8c:	20000a34 	.word	0x20000a34
 8001a90:	20000200 	.word	0x20000200
 8001a94:	20000a28 	.word	0x20000a28
 8001a98:	20000a44 	.word	0x20000a44
 8001a9c:	41c00000 	.word	0x41c00000
 8001aa0:	c1c00000 	.word	0xc1c00000
 8001aa4:	20000a2c 	.word	0x20000a2c
 8001aa8:	48000c00 	.word	0x48000c00
 8001aac:	20000a7c 	.word	0x20000a7c
 8001ab0:	43e10000 	.word	0x43e10000
			  }
		  }
		  else{
			  //software limit
			  SoftwareLimit();
 8001ab4:	f001 fd00 	bl	80034b8 <SoftwareLimit>
		  }

		  //Drive Motor which PWM
		  DriveMotor();
 8001ab8:	f001 fca2 	bl	8003400 <DriveMotor>

	  }

	  if(currentTime > timestamp){
 8001abc:	4b67      	ldr	r3, [pc, #412]	@ (8001c5c <main+0x518>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4b66      	ldr	r3, [pc, #408]	@ (8001c60 <main+0x51c>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	4282      	cmp	r2, r0
 8001ace:	418b      	sbcs	r3, r1
 8001ad0:	f080 809e 	bcs.w	8001c10 <main+0x4cc>
		  timestamp = currentTime + 4000; //250 Hz
 8001ad4:	4b61      	ldr	r3, [pc, #388]	@ (8001c5c <main+0x518>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f512 687a 	adds.w	r8, r2, #4000	@ 0xfa0
 8001ade:	f143 0900 	adc.w	r9, r3, #0
 8001ae2:	4642      	mov	r2, r8
 8001ae4:	464b      	mov	r3, r9
 8001ae6:	495e      	ldr	r1, [pc, #376]	@ (8001c60 <main+0x51c>)
 8001ae8:	e9c1 2300 	strd	r2, r3, [r1]

		  //control mode
		  if(mode == 1){ //auto
 8001aec:	4b5d      	ldr	r3, [pc, #372]	@ (8001c64 <main+0x520>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	f040 808d 	bne.w	8001c10 <main+0x4cc>
			  if(fabs(setPosition - QEIdata.linearPos) <= 5 || setPosition == 0){
 8001af6:	4b5c      	ldr	r3, [pc, #368]	@ (8001c68 <main+0x524>)
 8001af8:	ed93 7a00 	vldr	s14, [r3]
 8001afc:	4b5b      	ldr	r3, [pc, #364]	@ (8001c6c <main+0x528>)
 8001afe:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b06:	eef0 7ae7 	vabs.f32	s15, s15
 8001b0a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b16:	d907      	bls.n	8001b28 <main+0x3e4>
 8001b18:	4b53      	ldr	r3, [pc, #332]	@ (8001c68 <main+0x524>)
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b26:	d104      	bne.n	8001b32 <main+0x3ee>
				  Vin = 0;
 8001b28:	4b51      	ldr	r3, [pc, #324]	@ (8001c70 <main+0x52c>)
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e03a      	b.n	8001ba8 <main+0x464>
//				  check = -1;
//			  }
			  else{
				  //setVelocity = arm_pid_f32(&PID1, (setPosition + ref_p)/2 - QEIdata.linearPos);
				  //Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 + QEIdata.linearVel);
				  Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
 8001b32:	4b50      	ldr	r3, [pc, #320]	@ (8001c74 <main+0x530>)
 8001b34:	ed93 7a00 	vldr	s14, [r3]
 8001b38:	4b4c      	ldr	r3, [pc, #304]	@ (8001c6c <main+0x528>)
 8001b3a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b42:	4b4d      	ldr	r3, [pc, #308]	@ (8001c78 <main+0x534>)
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	edc7 7a01 	vstr	s15, [r7, #4]
    out = (S->A0 * in) +
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	ed93 7a00 	vldr	s14, [r3]
 8001b50:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b54:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b64:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001b68:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8a:	edc7 7a00 	vstr	s15, [r7]
    S->state[1] = S->state[0];
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	615a      	str	r2, [r3, #20]
    return (out);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	4a32      	ldr	r2, [pc, #200]	@ (8001c70 <main+0x52c>)
 8001ba6:	6013      	str	r3, [r2, #0]
			  }

			  if(Vin > 24){
 8001ba8:	4b31      	ldr	r3, [pc, #196]	@ (8001c70 <main+0x52c>)
 8001baa:	edd3 7a00 	vldr	s15, [r3]
 8001bae:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8001bb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bba:	dd02      	ble.n	8001bc2 <main+0x47e>
				  Vin = 24;
 8001bbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001c70 <main+0x52c>)
 8001bbe:	4a2f      	ldr	r2, [pc, #188]	@ (8001c7c <main+0x538>)
 8001bc0:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c70 <main+0x52c>)
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 8001bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd4:	d502      	bpl.n	8001bdc <main+0x498>
				  Vin = -24;
 8001bd6:	4b26      	ldr	r3, [pc, #152]	@ (8001c70 <main+0x52c>)
 8001bd8:	4a29      	ldr	r2, [pc, #164]	@ (8001c80 <main+0x53c>)
 8001bda:	601a      	str	r2, [r3, #0]
			  }

			  if(QEIdata.linearPos < -0.5 || QEIdata.linearPos > 450){
 8001bdc:	4b23      	ldr	r3, [pc, #140]	@ (8001c6c <main+0x528>)
 8001bde:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001be2:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bee:	d409      	bmi.n	8001c04 <main+0x4c0>
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c6c <main+0x528>)
 8001bf2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001bf6:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001c84 <main+0x540>
 8001bfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c02:	dd03      	ble.n	8001c0c <main+0x4c8>
			 	  Vin = 0;
 8001c04:	4b1a      	ldr	r3, [pc, #104]	@ (8001c70 <main+0x52c>)
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
			  }

			  //Drive Motor which PWM
			  DriveMotor();
 8001c0c:	f001 fbf8 	bl	8003400 <DriveMotor>
		  }

	  }

	  if((currentTime > timestamp_savestate)&& (trigger_savestate == 1)){
 8001c10:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <main+0x518>)
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c88 <main+0x544>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	4282      	cmp	r2, r0
 8001c22:	418b      	sbcs	r3, r1
 8001c24:	f4bf adfb 	bcs.w	800181e <main+0xda>
 8001c28:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <main+0x548>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	f47f adf6 	bne.w	800181e <main+0xda>
		   S_top = S_top_savestate;
 8001c32:	4b17      	ldr	r3, [pc, #92]	@ (8001c90 <main+0x54c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a17      	ldr	r2, [pc, #92]	@ (8001c94 <main+0x550>)
 8001c38:	6013      	str	r3, [r2, #0]
		   S_down = S_down_savestate;
 8001c3a:	4b17      	ldr	r3, [pc, #92]	@ (8001c98 <main+0x554>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a17      	ldr	r2, [pc, #92]	@ (8001c9c <main+0x558>)
 8001c40:	6013      	str	r3, [r2, #0]
		   mode = mode_savestate;
 8001c42:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <main+0x55c>)
 8001c44:	781a      	ldrb	r2, [r3, #0]
 8001c46:	4b07      	ldr	r3, [pc, #28]	@ (8001c64 <main+0x520>)
 8001c48:	701a      	strb	r2, [r3, #0]
		   trigger_savestate = 0;
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <main+0x548>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
		   check_noise += 1;
 8001c50:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <main+0x560>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	4a13      	ldr	r2, [pc, #76]	@ (8001ca4 <main+0x560>)
 8001c58:	6013      	str	r3, [r2, #0]
  {
 8001c5a:	e5e0      	b.n	800181e <main+0xda>
 8001c5c:	200011b8 	.word	0x200011b8
 8001c60:	200011c8 	.word	0x200011c8
 8001c64:	20000200 	.word	0x20000200
 8001c68:	20000ae4 	.word	0x20000ae4
 8001c6c:	200009c8 	.word	0x200009c8
 8001c70:	20000a28 	.word	0x20000a28
 8001c74:	20000a44 	.word	0x20000a44
 8001c78:	20000ac0 	.word	0x20000ac0
 8001c7c:	41c00000 	.word	0x41c00000
 8001c80:	c1c00000 	.word	0xc1c00000
 8001c84:	43e10000 	.word	0x43e10000
 8001c88:	20001198 	.word	0x20001198
 8001c8c:	200011b0 	.word	0x200011b0
 8001c90:	20000af4 	.word	0x20000af4
 8001c94:	20000aec 	.word	0x20000aec
 8001c98:	20000af8 	.word	0x20000af8
 8001c9c:	20000af0 	.word	0x20000af0
 8001ca0:	20000201 	.word	0x20000201
 8001ca4:	200011b4 	.word	0x200011b4

08001ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b094      	sub	sp, #80	@ 0x50
 8001cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cae:	f107 0318 	add.w	r3, r7, #24
 8001cb2:	2238      	movs	r2, #56	@ 0x38
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f009 ff26 	bl	800bb08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f004 ff64 	bl	8006b98 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cda:	2340      	movs	r3, #64	@ 0x40
 8001cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001cea:	2355      	movs	r3, #85	@ 0x55
 8001cec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cfa:	f107 0318 	add.w	r3, r7, #24
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f004 fffe 	bl	8006d00 <HAL_RCC_OscConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d0a:	f002 f9f5 	bl	80040f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d0e:	230f      	movs	r3, #15
 8001d10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d12:	2303      	movs	r3, #3
 8001d14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2104      	movs	r1, #4
 8001d26:	4618      	mov	r0, r3
 8001d28:	f005 fafc 	bl	8007324 <HAL_RCC_ClockConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001d32:	f002 f9e1 	bl	80040f8 <Error_Handler>
  }
}
 8001d36:	bf00      	nop
 8001d38:	3750      	adds	r7, #80	@ 0x50
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08c      	sub	sp, #48	@ 0x30
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	2220      	movs	r2, #32
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f009 fed5 	bl	800bb08 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001d60:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001d64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d66:	4b38      	ldr	r3, [pc, #224]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001d68:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d6e:	4b36      	ldr	r3, [pc, #216]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d74:	4b34      	ldr	r3, [pc, #208]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001d7a:	4b33      	ldr	r3, [pc, #204]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d80:	4b31      	ldr	r3, [pc, #196]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d86:	4b30      	ldr	r3, [pc, #192]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001d88:	2204      	movs	r2, #4
 8001d8a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d92:	4b2d      	ldr	r3, [pc, #180]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001d98:	4b2b      	ldr	r3, [pc, #172]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001da6:	4b28      	ldr	r3, [pc, #160]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001da8:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 8001dac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001dae:	4b26      	ldr	r3, [pc, #152]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001db0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001db4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001db6:	4b24      	ldr	r3, [pc, #144]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001dbe:	4b22      	ldr	r3, [pc, #136]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001dc4:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dcc:	481e      	ldr	r0, [pc, #120]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001dce:	f002 ff91 	bl	8004cf4 <HAL_ADC_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001dd8:	f002 f98e 	bl	80040f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001de0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001de4:	4619      	mov	r1, r3
 8001de6:	4818      	ldr	r0, [pc, #96]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001de8:	f003 ffc2 	bl	8005d70 <HAL_ADCEx_MultiModeConfigChannel>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001df2:	f002 f981 	bl	80040f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <MX_ADC1_Init+0x10c>)
 8001df8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dfa:	2306      	movs	r3, #6
 8001dfc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e02:	237f      	movs	r3, #127	@ 0x7f
 8001e04:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e06:	2304      	movs	r3, #4
 8001e08:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	4619      	mov	r1, r3
 8001e12:	480d      	ldr	r0, [pc, #52]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001e14:	f003 fa1c 	bl	8005250 <HAL_ADC_ConfigChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001e1e:	f002 f96b 	bl	80040f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <MX_ADC1_Init+0x110>)
 8001e24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e26:	230c      	movs	r3, #12
 8001e28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4806      	ldr	r0, [pc, #24]	@ (8001e48 <MX_ADC1_Init+0x108>)
 8001e30:	f003 fa0e 	bl	8005250 <HAL_ADC_ConfigChannel>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001e3a:	f002 f95d 	bl	80040f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	3730      	adds	r7, #48	@ 0x30
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200002a8 	.word	0x200002a8
 8001e4c:	04300002 	.word	0x04300002
 8001e50:	14f00020 	.word	0x14f00020

08001e54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08c      	sub	sp, #48	@ 0x30
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	2224      	movs	r2, #36	@ 0x24
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f009 fe50 	bl	800bb08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e72:	4b21      	ldr	r3, [pc, #132]	@ (8001ef8 <MX_TIM2_Init+0xa4>)
 8001e74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef8 <MX_TIM2_Init+0xa4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e80:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef8 <MX_TIM2_Init+0xa4>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e86:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef8 <MX_TIM2_Init+0xa4>)
 8001e88:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <MX_TIM2_Init+0xa4>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e94:	4b18      	ldr	r3, [pc, #96]	@ (8001ef8 <MX_TIM2_Init+0xa4>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ebe:	f107 030c 	add.w	r3, r7, #12
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	480c      	ldr	r0, [pc, #48]	@ (8001ef8 <MX_TIM2_Init+0xa4>)
 8001ec6:	f006 fa59 	bl	800837c <HAL_TIM_Encoder_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001ed0:	f002 f912 	bl	80040f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001edc:	463b      	mov	r3, r7
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <MX_TIM2_Init+0xa4>)
 8001ee2:	f007 fe01 	bl	8009ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001eec:	f002 f904 	bl	80040f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ef0:	bf00      	nop
 8001ef2:	3730      	adds	r7, #48	@ 0x30
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000374 	.word	0x20000374

08001efc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08e      	sub	sp, #56	@ 0x38
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	611a      	str	r2, [r3, #16]
 8001f2a:	615a      	str	r2, [r3, #20]
 8001f2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe4 <MX_TIM3_Init+0xe8>)
 8001f30:	4a2d      	ldr	r2, [pc, #180]	@ (8001fe8 <MX_TIM3_Init+0xec>)
 8001f32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001f34:	4b2b      	ldr	r3, [pc, #172]	@ (8001fe4 <MX_TIM3_Init+0xe8>)
 8001f36:	22a9      	movs	r2, #169	@ 0xa9
 8001f38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe4 <MX_TIM3_Init+0xe8>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001f40:	4b28      	ldr	r3, [pc, #160]	@ (8001fe4 <MX_TIM3_Init+0xe8>)
 8001f42:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f48:	4b26      	ldr	r3, [pc, #152]	@ (8001fe4 <MX_TIM3_Init+0xe8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f4e:	4b25      	ldr	r3, [pc, #148]	@ (8001fe4 <MX_TIM3_Init+0xe8>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f54:	4823      	ldr	r0, [pc, #140]	@ (8001fe4 <MX_TIM3_Init+0xe8>)
 8001f56:	f005 fe4f 	bl	8007bf8 <HAL_TIM_Base_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001f60:	f002 f8ca 	bl	80040f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f68:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	481c      	ldr	r0, [pc, #112]	@ (8001fe4 <MX_TIM3_Init+0xe8>)
 8001f72:	f006 fdd3 	bl	8008b1c <HAL_TIM_ConfigClockSource>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001f7c:	f002 f8bc 	bl	80040f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f80:	4818      	ldr	r0, [pc, #96]	@ (8001fe4 <MX_TIM3_Init+0xe8>)
 8001f82:	f005 ff85 	bl	8007e90 <HAL_TIM_PWM_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001f8c:	f002 f8b4 	bl	80040f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4811      	ldr	r0, [pc, #68]	@ (8001fe4 <MX_TIM3_Init+0xe8>)
 8001fa0:	f007 fda2 	bl	8009ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001faa:	f002 f8a5 	bl	80040f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fae:	2360      	movs	r3, #96	@ 0x60
 8001fb0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001fb2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001fb6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4807      	ldr	r0, [pc, #28]	@ (8001fe4 <MX_TIM3_Init+0xe8>)
 8001fc8:	f006 fc94 	bl	80088f4 <HAL_TIM_PWM_ConfigChannel>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001fd2:	f002 f891 	bl	80040f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fd6:	4803      	ldr	r0, [pc, #12]	@ (8001fe4 <MX_TIM3_Init+0xe8>)
 8001fd8:	f002 fa1e 	bl	8004418 <HAL_TIM_MspPostInit>

}
 8001fdc:	bf00      	nop
 8001fde:	3738      	adds	r7, #56	@ 0x38
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000440 	.word	0x20000440
 8001fe8:	40000400 	.word	0x40000400

08001fec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ff2:	f107 0310 	add.w	r3, r7, #16
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800200a:	4b1d      	ldr	r3, [pc, #116]	@ (8002080 <MX_TIM4_Init+0x94>)
 800200c:	4a1d      	ldr	r2, [pc, #116]	@ (8002084 <MX_TIM4_Init+0x98>)
 800200e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8002010:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <MX_TIM4_Init+0x94>)
 8002012:	22a9      	movs	r2, #169	@ 0xa9
 8002014:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002016:	4b1a      	ldr	r3, [pc, #104]	@ (8002080 <MX_TIM4_Init+0x94>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800201c:	4b18      	ldr	r3, [pc, #96]	@ (8002080 <MX_TIM4_Init+0x94>)
 800201e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002022:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002024:	4b16      	ldr	r3, [pc, #88]	@ (8002080 <MX_TIM4_Init+0x94>)
 8002026:	2200      	movs	r2, #0
 8002028:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800202a:	4b15      	ldr	r3, [pc, #84]	@ (8002080 <MX_TIM4_Init+0x94>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002030:	4813      	ldr	r0, [pc, #76]	@ (8002080 <MX_TIM4_Init+0x94>)
 8002032:	f005 fde1 	bl	8007bf8 <HAL_TIM_Base_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800203c:	f002 f85c 	bl	80040f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002040:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002044:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002046:	f107 0310 	add.w	r3, r7, #16
 800204a:	4619      	mov	r1, r3
 800204c:	480c      	ldr	r0, [pc, #48]	@ (8002080 <MX_TIM4_Init+0x94>)
 800204e:	f006 fd65 	bl	8008b1c <HAL_TIM_ConfigClockSource>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002058:	f002 f84e 	bl	80040f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800205c:	2320      	movs	r3, #32
 800205e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	4619      	mov	r1, r3
 8002068:	4805      	ldr	r0, [pc, #20]	@ (8002080 <MX_TIM4_Init+0x94>)
 800206a:	f007 fd3d 	bl	8009ae8 <HAL_TIMEx_MasterConfigSynchronization>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002074:	f002 f840 	bl	80040f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002078:	bf00      	nop
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	2000050c 	.word	0x2000050c
 8002084:	40000800 	.word	0x40000800

08002088 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208e:	f107 0310 	add.w	r3, r7, #16
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80020a6:	4b1d      	ldr	r3, [pc, #116]	@ (800211c <MX_TIM5_Init+0x94>)
 80020a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002120 <MX_TIM5_Init+0x98>)
 80020aa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80020ac:	4b1b      	ldr	r3, [pc, #108]	@ (800211c <MX_TIM5_Init+0x94>)
 80020ae:	22a9      	movs	r2, #169	@ 0xa9
 80020b0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b2:	4b1a      	ldr	r3, [pc, #104]	@ (800211c <MX_TIM5_Init+0x94>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80020b8:	4b18      	ldr	r3, [pc, #96]	@ (800211c <MX_TIM5_Init+0x94>)
 80020ba:	f04f 32ff 	mov.w	r2, #4294967295
 80020be:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c0:	4b16      	ldr	r3, [pc, #88]	@ (800211c <MX_TIM5_Init+0x94>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c6:	4b15      	ldr	r3, [pc, #84]	@ (800211c <MX_TIM5_Init+0x94>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020cc:	4813      	ldr	r0, [pc, #76]	@ (800211c <MX_TIM5_Init+0x94>)
 80020ce:	f005 fd93 	bl	8007bf8 <HAL_TIM_Base_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80020d8:	f002 f80e 	bl	80040f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020e2:	f107 0310 	add.w	r3, r7, #16
 80020e6:	4619      	mov	r1, r3
 80020e8:	480c      	ldr	r0, [pc, #48]	@ (800211c <MX_TIM5_Init+0x94>)
 80020ea:	f006 fd17 	bl	8008b1c <HAL_TIM_ConfigClockSource>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80020f4:	f002 f800 	bl	80040f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f8:	2300      	movs	r3, #0
 80020fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	4619      	mov	r1, r3
 8002104:	4805      	ldr	r0, [pc, #20]	@ (800211c <MX_TIM5_Init+0x94>)
 8002106:	f007 fcef 	bl	8009ae8 <HAL_TIMEx_MasterConfigSynchronization>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002110:	f001 fff2 	bl	80040f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002114:	bf00      	nop
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	200005d8 	.word	0x200005d8
 8002120:	40000c00 	.word	0x40000c00

08002124 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002134:	4b15      	ldr	r3, [pc, #84]	@ (800218c <MX_TIM6_Init+0x68>)
 8002136:	4a16      	ldr	r2, [pc, #88]	@ (8002190 <MX_TIM6_Init+0x6c>)
 8002138:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1699;
 800213a:	4b14      	ldr	r3, [pc, #80]	@ (800218c <MX_TIM6_Init+0x68>)
 800213c:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002140:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002142:	4b12      	ldr	r3, [pc, #72]	@ (800218c <MX_TIM6_Init+0x68>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 8002148:	4b10      	ldr	r3, [pc, #64]	@ (800218c <MX_TIM6_Init+0x68>)
 800214a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800214e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002150:	4b0e      	ldr	r3, [pc, #56]	@ (800218c <MX_TIM6_Init+0x68>)
 8002152:	2200      	movs	r2, #0
 8002154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002156:	480d      	ldr	r0, [pc, #52]	@ (800218c <MX_TIM6_Init+0x68>)
 8002158:	f005 fd4e 	bl	8007bf8 <HAL_TIM_Base_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002162:	f001 ffc9 	bl	80040f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	4619      	mov	r1, r3
 8002172:	4806      	ldr	r0, [pc, #24]	@ (800218c <MX_TIM6_Init+0x68>)
 8002174:	f007 fcb8 	bl	8009ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800217e:	f001 ffbb 	bl	80040f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200006a4 	.word	0x200006a4
 8002190:	40001000 	.word	0x40001000

08002194 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <MX_TIM16_Init+0x58>)
 800219a:	4a15      	ldr	r2, [pc, #84]	@ (80021f0 <MX_TIM16_Init+0x5c>)
 800219c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800219e:	4b13      	ldr	r3, [pc, #76]	@ (80021ec <MX_TIM16_Init+0x58>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a4:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <MX_TIM16_Init+0x58>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80021aa:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <MX_TIM16_Init+0x58>)
 80021ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021b0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	@ (80021ec <MX_TIM16_Init+0x58>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80021b8:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <MX_TIM16_Init+0x58>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021be:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <MX_TIM16_Init+0x58>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80021c4:	4809      	ldr	r0, [pc, #36]	@ (80021ec <MX_TIM16_Init+0x58>)
 80021c6:	f005 fd17 	bl	8007bf8 <HAL_TIM_Base_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80021d0:	f001 ff92 	bl	80040f8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80021d4:	2108      	movs	r1, #8
 80021d6:	4805      	ldr	r0, [pc, #20]	@ (80021ec <MX_TIM16_Init+0x58>)
 80021d8:	f005 ffda 	bl	8008190 <HAL_TIM_OnePulse_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 80021e2:	f001 ff89 	bl	80040f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000770 	.word	0x20000770
 80021f0:	40014400 	.word	0x40014400

080021f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021f8:	4b23      	ldr	r3, [pc, #140]	@ (8002288 <MX_USART2_UART_Init+0x94>)
 80021fa:	4a24      	ldr	r2, [pc, #144]	@ (800228c <MX_USART2_UART_Init+0x98>)
 80021fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80021fe:	4b22      	ldr	r3, [pc, #136]	@ (8002288 <MX_USART2_UART_Init+0x94>)
 8002200:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002204:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002206:	4b20      	ldr	r3, [pc, #128]	@ (8002288 <MX_USART2_UART_Init+0x94>)
 8002208:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800220c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800220e:	4b1e      	ldr	r3, [pc, #120]	@ (8002288 <MX_USART2_UART_Init+0x94>)
 8002210:	2200      	movs	r2, #0
 8002212:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002214:	4b1c      	ldr	r3, [pc, #112]	@ (8002288 <MX_USART2_UART_Init+0x94>)
 8002216:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800221a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800221c:	4b1a      	ldr	r3, [pc, #104]	@ (8002288 <MX_USART2_UART_Init+0x94>)
 800221e:	220c      	movs	r2, #12
 8002220:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002222:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <MX_USART2_UART_Init+0x94>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002228:	4b17      	ldr	r3, [pc, #92]	@ (8002288 <MX_USART2_UART_Init+0x94>)
 800222a:	2200      	movs	r2, #0
 800222c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800222e:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <MX_USART2_UART_Init+0x94>)
 8002230:	2200      	movs	r2, #0
 8002232:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002234:	4b14      	ldr	r3, [pc, #80]	@ (8002288 <MX_USART2_UART_Init+0x94>)
 8002236:	2200      	movs	r2, #0
 8002238:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800223a:	4b13      	ldr	r3, [pc, #76]	@ (8002288 <MX_USART2_UART_Init+0x94>)
 800223c:	2200      	movs	r2, #0
 800223e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002240:	4811      	ldr	r0, [pc, #68]	@ (8002288 <MX_USART2_UART_Init+0x94>)
 8002242:	f007 fd37 	bl	8009cb4 <HAL_UART_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800224c:	f001 ff54 	bl	80040f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002250:	2100      	movs	r1, #0
 8002252:	480d      	ldr	r0, [pc, #52]	@ (8002288 <MX_USART2_UART_Init+0x94>)
 8002254:	f009 fb57 	bl	800b906 <HAL_UARTEx_SetTxFifoThreshold>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800225e:	f001 ff4b 	bl	80040f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002262:	2100      	movs	r1, #0
 8002264:	4808      	ldr	r0, [pc, #32]	@ (8002288 <MX_USART2_UART_Init+0x94>)
 8002266:	f009 fb8c 	bl	800b982 <HAL_UARTEx_SetRxFifoThreshold>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002270:	f001 ff42 	bl	80040f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002274:	4804      	ldr	r0, [pc, #16]	@ (8002288 <MX_USART2_UART_Init+0x94>)
 8002276:	f009 fb0d 	bl	800b894 <HAL_UARTEx_DisableFifoMode>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002280:	f001 ff3a 	bl	80040f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	2000083c 	.word	0x2000083c
 800228c:	40004400 	.word	0x40004400

08002290 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002296:	4b20      	ldr	r3, [pc, #128]	@ (8002318 <MX_DMA_Init+0x88>)
 8002298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800229a:	4a1f      	ldr	r2, [pc, #124]	@ (8002318 <MX_DMA_Init+0x88>)
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80022a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002318 <MX_DMA_Init+0x88>)
 80022a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002318 <MX_DMA_Init+0x88>)
 80022b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b2:	4a19      	ldr	r2, [pc, #100]	@ (8002318 <MX_DMA_Init+0x88>)
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80022ba:	4b17      	ldr	r3, [pc, #92]	@ (8002318 <MX_DMA_Init+0x88>)
 80022bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022c6:	4b14      	ldr	r3, [pc, #80]	@ (8002318 <MX_DMA_Init+0x88>)
 80022c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ca:	4a13      	ldr	r2, [pc, #76]	@ (8002318 <MX_DMA_Init+0x88>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80022d2:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <MX_DMA_Init+0x88>)
 80022d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80022de:	2200      	movs	r2, #0
 80022e0:	2100      	movs	r1, #0
 80022e2:	200b      	movs	r0, #11
 80022e4:	f003 ff27 	bl	8006136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80022e8:	200b      	movs	r0, #11
 80022ea:	f003 ff3e 	bl	800616a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	200c      	movs	r0, #12
 80022f4:	f003 ff1f 	bl	8006136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80022f8:	200c      	movs	r0, #12
 80022fa:	f003 ff36 	bl	800616a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	2038      	movs	r0, #56	@ 0x38
 8002304:	f003 ff17 	bl	8006136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002308:	2038      	movs	r0, #56	@ 0x38
 800230a:	f003 ff2e 	bl	800616a <HAL_NVIC_EnableIRQ>

}
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000

0800231c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	@ 0x28
 8002320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002322:	f107 0314 	add.w	r3, r7, #20
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	60da      	str	r2, [r3, #12]
 8002330:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002332:	4b76      	ldr	r3, [pc, #472]	@ (800250c <MX_GPIO_Init+0x1f0>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002336:	4a75      	ldr	r2, [pc, #468]	@ (800250c <MX_GPIO_Init+0x1f0>)
 8002338:	f043 0304 	orr.w	r3, r3, #4
 800233c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800233e:	4b73      	ldr	r3, [pc, #460]	@ (800250c <MX_GPIO_Init+0x1f0>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800234a:	4b70      	ldr	r3, [pc, #448]	@ (800250c <MX_GPIO_Init+0x1f0>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234e:	4a6f      	ldr	r2, [pc, #444]	@ (800250c <MX_GPIO_Init+0x1f0>)
 8002350:	f043 0320 	orr.w	r3, r3, #32
 8002354:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002356:	4b6d      	ldr	r3, [pc, #436]	@ (800250c <MX_GPIO_Init+0x1f0>)
 8002358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	4b6a      	ldr	r3, [pc, #424]	@ (800250c <MX_GPIO_Init+0x1f0>)
 8002364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002366:	4a69      	ldr	r2, [pc, #420]	@ (800250c <MX_GPIO_Init+0x1f0>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800236e:	4b67      	ldr	r3, [pc, #412]	@ (800250c <MX_GPIO_Init+0x1f0>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800237a:	4b64      	ldr	r3, [pc, #400]	@ (800250c <MX_GPIO_Init+0x1f0>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237e:	4a63      	ldr	r2, [pc, #396]	@ (800250c <MX_GPIO_Init+0x1f0>)
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002386:	4b61      	ldr	r3, [pc, #388]	@ (800250c <MX_GPIO_Init+0x1f0>)
 8002388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002392:	4b5e      	ldr	r3, [pc, #376]	@ (800250c <MX_GPIO_Init+0x1f0>)
 8002394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002396:	4a5d      	ldr	r2, [pc, #372]	@ (800250c <MX_GPIO_Init+0x1f0>)
 8002398:	f043 0308 	orr.w	r3, r3, #8
 800239c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800239e:	4b5b      	ldr	r3, [pc, #364]	@ (800250c <MX_GPIO_Init+0x1f0>)
 80023a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80023aa:	2200      	movs	r2, #0
 80023ac:	f244 11b2 	movw	r1, #16818	@ 0x41b2
 80023b0:	4857      	ldr	r0, [pc, #348]	@ (8002510 <MX_GPIO_Init+0x1f4>)
 80023b2:	f004 fbc1 	bl	8006b38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80023b6:	2200      	movs	r2, #0
 80023b8:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80023bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023c0:	f004 fbba 	bl	8006b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_6, GPIO_PIN_RESET);
 80023c4:	2200      	movs	r2, #0
 80023c6:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80023ca:	4852      	ldr	r0, [pc, #328]	@ (8002514 <MX_GPIO_Init+0x1f8>)
 80023cc:	f004 fbb4 	bl	8006b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9;
 80023d0:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 80023d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80023da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	4619      	mov	r1, r3
 80023e6:	484a      	ldr	r0, [pc, #296]	@ (8002510 <MX_GPIO_Init+0x1f4>)
 80023e8:	f004 fa0c 	bl	8006804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC1 PC4 PC5
                           PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80023ec:	f244 13b2 	movw	r3, #16818	@ 0x41b2
 80023f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f2:	2301      	movs	r3, #1
 80023f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fa:	2300      	movs	r3, #0
 80023fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4619      	mov	r1, r3
 8002404:	4842      	ldr	r0, [pc, #264]	@ (8002510 <MX_GPIO_Init+0x1f4>)
 8002406:	f004 f9fd 	bl	8006804 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800240a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800240e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002410:	2301      	movs	r3, #1
 8002412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	4619      	mov	r1, r3
 8002422:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002426:	f004 f9ed 	bl	8006804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_6;
 800242a:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 800242e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002430:	2301      	movs	r3, #1
 8002432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	4619      	mov	r1, r3
 8002442:	4834      	ldr	r0, [pc, #208]	@ (8002514 <MX_GPIO_Init+0x1f8>)
 8002444:	f004 f9de 	bl	8006804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002448:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800244c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800244e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	4619      	mov	r1, r3
 800245e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002462:	f004 f9cf 	bl	8006804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002466:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800246a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246c:	2300      	movs	r3, #0
 800246e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002470:	2302      	movs	r3, #2
 8002472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	4619      	mov	r1, r3
 800247a:	4825      	ldr	r0, [pc, #148]	@ (8002510 <MX_GPIO_Init+0x1f4>)
 800247c:	f004 f9c2 	bl	8006804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002480:	2304      	movs	r3, #4
 8002482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002484:	2300      	movs	r3, #0
 8002486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002488:	2302      	movs	r3, #2
 800248a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	4619      	mov	r1, r3
 8002492:	4821      	ldr	r0, [pc, #132]	@ (8002518 <MX_GPIO_Init+0x1fc>)
 8002494:	f004 f9b6 	bl	8006804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002498:	2330      	movs	r3, #48	@ 0x30
 800249a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024a0:	2301      	movs	r3, #1
 80024a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	4619      	mov	r1, r3
 80024aa:	481a      	ldr	r0, [pc, #104]	@ (8002514 <MX_GPIO_Init+0x1f8>)
 80024ac:	f004 f9aa 	bl	8006804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024b0:	2380      	movs	r3, #128	@ 0x80
 80024b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024b8:	2302      	movs	r3, #2
 80024ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	4619      	mov	r1, r3
 80024c2:	4814      	ldr	r0, [pc, #80]	@ (8002514 <MX_GPIO_Init+0x1f8>)
 80024c4:	f004 f99e 	bl	8006804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80024d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	4619      	mov	r1, r3
 80024de:	480d      	ldr	r0, [pc, #52]	@ (8002514 <MX_GPIO_Init+0x1f8>)
 80024e0:	f004 f990 	bl	8006804 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80024e4:	2200      	movs	r2, #0
 80024e6:	2100      	movs	r1, #0
 80024e8:	2017      	movs	r0, #23
 80024ea:	f003 fe24 	bl	8006136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80024ee:	2017      	movs	r0, #23
 80024f0:	f003 fe3b 	bl	800616a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024f4:	2200      	movs	r2, #0
 80024f6:	2100      	movs	r1, #0
 80024f8:	2028      	movs	r0, #40	@ 0x28
 80024fa:	f003 fe1c 	bl	8006136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024fe:	2028      	movs	r0, #40	@ 0x28
 8002500:	f003 fe33 	bl	800616a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002504:	bf00      	nop
 8002506:	3728      	adds	r7, #40	@ 0x28
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021000 	.word	0x40021000
 8002510:	48000800 	.word	0x48000800
 8002514:	48000400 	.word	0x48000400
 8002518:	48000c00 	.word	0x48000c00

0800251c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800251c:	b5b0      	push	{r4, r5, r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a0c      	ldr	r2, [pc, #48]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d108      	bne.n	800253e <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += 1;
 800252c:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002532:	1c54      	adds	r4, r2, #1
 8002534:	f143 0500 	adc.w	r5, r3, #0
 8002538:	4b08      	ldr	r3, [pc, #32]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800253a:	e9c3 4500 	strd	r4, r5, [r3]
	}
//	 Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim6)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a07      	ldr	r2, [pc, #28]	@ (8002560 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d103      	bne.n	800254e <HAL_TIM_PeriodElapsedCallback+0x32>
	{
	    //check2 +=1;
		Heartbeat();
 8002546:	f001 f9db 	bl	8003900 <Heartbeat>
		Routine();
 800254a:	f001 f9e7 	bl	800391c <Routine>
	}
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bdb0      	pop	{r4, r5, r7, pc}
 8002556:	bf00      	nop
 8002558:	200005d8 	.word	0x200005d8
 800255c:	20000a08 	.word	0x20000a08
 8002560:	200006a4 	.word	0x200006a4

08002564 <micros>:

uint64_t micros()
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+((_micros - 1) * 2,147,483,647);
 8002568:	4b07      	ldr	r3, [pc, #28]	@ (8002588 <micros+0x24>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	f203 2387 	addw	r3, r3, #647	@ 0x287
 8002572:	2200      	movs	r2, #0
 8002574:	4618      	mov	r0, r3
 8002576:	4611      	mov	r1, r2
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
}
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	200005d8 	.word	0x200005d8
 800258c:	00000000 	.word	0x00000000

08002590 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 8002590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = micros();
 8002598:	f7ff ffe4 	bl	8002564 <micros>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4971      	ldr	r1, [pc, #452]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 80025a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim2);
 80025a6:	4b71      	ldr	r3, [pc, #452]	@ (800276c <QEIEncoderPosVel_Update+0x1dc>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 80025ae:	6013      	str	r3, [r2, #0]
	//Postion 1 turn calculation
	QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 80025b0:	4b6d      	ldr	r3, [pc, #436]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025b8:	ee07 3a90 	vmov	s15, r3
 80025bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025c0:	4b69      	ldr	r3, [pc, #420]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 80025c2:	edc3 7a06 	vstr	s15, [r3, #24]
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 80025c6:	4b68      	ldr	r3, [pc, #416]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	4b67      	ldr	r3, [pc, #412]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	607b      	str	r3, [r7, #4]
	//Handle Warp around
	if(diffPosition > UINT32_MAX/2)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	da02      	bge.n	80025de <QEIEncoderPosVel_Update+0x4e>
		diffPosition -=UINT32_MAX;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3301      	adds	r3, #1
 80025dc:	607b      	str	r3, [r7, #4]
	if(diffPosition < -UINT32_MAX/2)
		diffPosition +=UINT32_MAX;
	//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001; //sec
 80025de:	4b62      	ldr	r3, [pc, #392]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 80025e0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80025e4:	4b60      	ldr	r3, [pc, #384]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 80025e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80025ea:	ebb0 0a02 	subs.w	sl, r0, r2
 80025ee:	eb61 0b03 	sbc.w	fp, r1, r3
 80025f2:	4650      	mov	r0, sl
 80025f4:	4659      	mov	r1, fp
 80025f6:	f7fd ff95 	bl	8000524 <__aeabi_ul2d>
 80025fa:	a357      	add	r3, pc, #348	@ (adr r3, 8002758 <QEIEncoderPosVel_Update+0x1c8>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	f7fd ffc6 	bl	8000590 <__aeabi_dmul>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	f7fe fa90 	bl	8000b30 <__aeabi_d2f>
 8002610:	4603      	mov	r3, r0
 8002612:	603b      	str	r3, [r7, #0]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;  //pulse/sec
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	ee07 3a90 	vmov	s15, r3
 800261a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800261e:	ed97 7a00 	vldr	s14, [r7]
 8002622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002626:	4b50      	ldr	r3, [pc, #320]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 8002628:	edc3 7a07 	vstr	s15, [r3, #28]

	QEIdata.rad_s = (QEIdata.QEIAngularVelocity*2*3.14)/8192;
 800262c:	4b4e      	ldr	r3, [pc, #312]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 800262e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002632:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002636:	ee17 0a90 	vmov	r0, s15
 800263a:	f7fd ff51 	bl	80004e0 <__aeabi_f2d>
 800263e:	a348      	add	r3, pc, #288	@ (adr r3, 8002760 <QEIEncoderPosVel_Update+0x1d0>)
 8002640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002644:	f7fd ffa4 	bl	8000590 <__aeabi_dmul>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4610      	mov	r0, r2
 800264e:	4619      	mov	r1, r3
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	4b46      	ldr	r3, [pc, #280]	@ (8002770 <QEIEncoderPosVel_Update+0x1e0>)
 8002656:	f7fe f8c5 	bl	80007e4 <__aeabi_ddiv>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	f7fe fa65 	bl	8000b30 <__aeabi_d2f>
 8002666:	4603      	mov	r3, r0
 8002668:	4a3f      	ldr	r2, [pc, #252]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 800266a:	6213      	str	r3, [r2, #32]
	QEIdata.rpm = (QEIdata.QEIAngularVelocity*60)/8192;
 800266c:	4b3e      	ldr	r3, [pc, #248]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 800266e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002672:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002774 <QEIEncoderPosVel_Update+0x1e4>
 8002676:	ee27 7a87 	vmul.f32	s14, s15, s14
 800267a:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8002778 <QEIEncoderPosVel_Update+0x1e8>
 800267e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002682:	4b39      	ldr	r3, [pc, #228]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 8002684:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	QEIdata.linearVel = (QEIdata.QEIAngularVelocity*10)/8192; //velocity (mm/s)
 8002688:	4b37      	ldr	r3, [pc, #220]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 800268a:	edd3 7a07 	vldr	s15, [r3, #28]
 800268e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002692:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002696:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002778 <QEIEncoderPosVel_Update+0x1e8>
 800269a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800269e:	4b32      	ldr	r3, [pc, #200]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 80026a0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	QEIdata.Velocity[NEW] = QEIdata.linearVel;
 80026a4:	4b30      	ldr	r3, [pc, #192]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 80026a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a8:	4a2f      	ldr	r2, [pc, #188]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 80026aa:	6313      	str	r3, [r2, #48]	@ 0x30
	QEIdata.linearAcc = (QEIdata.Velocity[NEW]-QEIdata.Velocity[OLD])/diffTime;
 80026ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 80026ae:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80026b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 80026b4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80026b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026bc:	ed97 7a00 	vldr	s14, [r7]
 80026c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026c4:	4b28      	ldr	r3, [pc, #160]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 80026c6:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38


	if(QEIdata.Position[NEW] < 2147483648){
 80026ca:	4b27      	ldr	r3, [pc, #156]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	db11      	blt.n	80026f6 <QEIEncoderPosVel_Update+0x166>
		QEIdata.linearPos = ((float)QEIdata.Position[NEW]*10)/8192; //position (mm)
 80026d2:	4b25      	ldr	r3, [pc, #148]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	ee07 3a90 	vmov	s15, r3
 80026da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026de:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80026e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026e6:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8002778 <QEIEncoderPosVel_Update+0x1e8>
 80026ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 80026f0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 80026f4:	e01c      	b.n	8002730 <QEIEncoderPosVel_Update+0x1a0>
	}
	else{
		QEIdata.linearPos = -((float)(4294967295 - QEIdata.Position[NEW])*10)/8192;
 80026f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2200      	movs	r2, #0
 80026fc:	461c      	mov	r4, r3
 80026fe:	4615      	mov	r5, r2
 8002700:	2300      	movs	r3, #0
 8002702:	f1d4 38ff 	rsbs	r8, r4, #4294967295
 8002706:	eb63 0905 	sbc.w	r9, r3, r5
 800270a:	4640      	mov	r0, r8
 800270c:	4649      	mov	r1, r9
 800270e:	f7fe fb2f 	bl	8000d70 <__aeabi_l2f>
 8002712:	ee07 0a10 	vmov	s14, r0
 8002716:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800271a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271e:	eeb1 7a67 	vneg.f32	s14, s15
 8002722:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002778 <QEIEncoderPosVel_Update+0x1e8>
 8002726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800272a:	4b0f      	ldr	r3, [pc, #60]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 800272c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	}

	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8002730:	4b0d      	ldr	r3, [pc, #52]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0c      	ldr	r2, [pc, #48]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 8002736:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8002738:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 800273a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800273e:	490a      	ldr	r1, [pc, #40]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 8002740:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata.Velocity[OLD] = QEIdata.Velocity[NEW];
 8002744:	4b08      	ldr	r3, [pc, #32]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002748:	4a07      	ldr	r2, [pc, #28]	@ (8002768 <QEIEncoderPosVel_Update+0x1d8>)
 800274a:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002756:	bf00      	nop
 8002758:	a0b5ed8d 	.word	0xa0b5ed8d
 800275c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002760:	51eb851f 	.word	0x51eb851f
 8002764:	40091eb8 	.word	0x40091eb8
 8002768:	200009c8 	.word	0x200009c8
 800276c:	20000374 	.word	0x20000374
 8002770:	40c00000 	.word	0x40c00000
 8002774:	42700000 	.word	0x42700000
 8002778:	46000000 	.word	0x46000000

0800277c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800277c:	b4b0      	push	{r4, r5, r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	80fb      	strh	r3, [r7, #6]
//		else if(mode == 2){
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
//		}
//	}

	if(GPIO_Pin == GPIO_PIN_8){ //check top sensor
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800278c:	d109      	bne.n	80027a2 <HAL_GPIO_EXTI_Callback+0x26>
		if (start_IT > 11 )
 800278e:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <HAL_GPIO_EXTI_Callback+0x60>)
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	2a0c      	cmp	r2, #12
 8002796:	f173 0300 	sbcs.w	r3, r3, #0
 800279a:	d302      	bcc.n	80027a2 <HAL_GPIO_EXTI_Callback+0x26>
		{
			S_top = 1;
 800279c:	4b10      	ldr	r3, [pc, #64]	@ (80027e0 <HAL_GPIO_EXTI_Callback+0x64>)
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
		}

		//Vin = -2;
//		DriveMotor();
	}
	if(GPIO_Pin == GPIO_PIN_9){ //check down sensor
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027a8:	d109      	bne.n	80027be <HAL_GPIO_EXTI_Callback+0x42>

		if (start_IT > 11)
 80027aa:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <HAL_GPIO_EXTI_Callback+0x60>)
 80027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b0:	2a0c      	cmp	r2, #12
 80027b2:	f173 0300 	sbcs.w	r3, r3, #0
 80027b6:	d302      	bcc.n	80027be <HAL_GPIO_EXTI_Callback+0x42>
		{
			S_down = 1;
 80027b8:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <HAL_GPIO_EXTI_Callback+0x68>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]
//			mode = 4; //Emergency mode
//			Vin = 0;
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
//		}
//	}
	start_IT += 1;
 80027be:	4b07      	ldr	r3, [pc, #28]	@ (80027dc <HAL_GPIO_EXTI_Callback+0x60>)
 80027c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c4:	1c54      	adds	r4, r2, #1
 80027c6:	f143 0500 	adc.w	r5, r3, #0
 80027ca:	4b04      	ldr	r3, [pc, #16]	@ (80027dc <HAL_GPIO_EXTI_Callback+0x60>)
 80027cc:	e9c3 4500 	strd	r4, r5, [r3]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bcb0      	pop	{r4, r5, r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000a20 	.word	0x20000a20
 80027e0:	20000aec 	.word	0x20000aec
 80027e4:	20000af0 	.word	0x20000af0

080027e8 <checkStartMoving>:

//-----------------------------------Trajectory------------------------------------------//
void checkStartMoving(){
 80027e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
	if(q_f != q_f_old){
 80027f0:	4b9d      	ldr	r3, [pc, #628]	@ (8002a68 <checkStartMoving+0x280>)
 80027f2:	ed93 7a00 	vldr	s14, [r3]
 80027f6:	4b9d      	ldr	r3, [pc, #628]	@ (8002a6c <checkStartMoving+0x284>)
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	eeb4 7a67 	vcmp.f32	s14, s15
 8002800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002804:	f000 8201 	beq.w	8002c0a <checkStartMoving+0x422>
		q_i = q_f_old;   //Define q_i
 8002808:	4b98      	ldr	r3, [pc, #608]	@ (8002a6c <checkStartMoving+0x284>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a98      	ldr	r2, [pc, #608]	@ (8002a70 <checkStartMoving+0x288>)
 800280e:	6013      	str	r3, [r2, #0]
		delta_q = q_f - q_i;
 8002810:	4b95      	ldr	r3, [pc, #596]	@ (8002a68 <checkStartMoving+0x280>)
 8002812:	ed93 7a00 	vldr	s14, [r3]
 8002816:	4b96      	ldr	r3, [pc, #600]	@ (8002a70 <checkStartMoving+0x288>)
 8002818:	edd3 7a00 	vldr	s15, [r3]
 800281c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002820:	4b94      	ldr	r3, [pc, #592]	@ (8002a74 <checkStartMoving+0x28c>)
 8002822:	edc3 7a00 	vstr	s15, [r3]
		if(delta_q < 0){
 8002826:	4b93      	ldr	r3, [pc, #588]	@ (8002a74 <checkStartMoving+0x28c>)
 8002828:	edd3 7a00 	vldr	s15, [r3]
 800282c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002834:	d504      	bpl.n	8002840 <checkStartMoving+0x58>
			dir = -1;
 8002836:	4b90      	ldr	r3, [pc, #576]	@ (8002a78 <checkStartMoving+0x290>)
 8002838:	f04f 32ff 	mov.w	r2, #4294967295
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	e002      	b.n	8002846 <checkStartMoving+0x5e>
		}
		else{
			dir = 1;
 8002840:	4b8d      	ldr	r3, [pc, #564]	@ (8002a78 <checkStartMoving+0x290>)
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]
		}

		float q_check = fabs(q_d_i + q_2d_max*sqrt(fabs(delta_q)/q_2d_max)*dir);
 8002846:	4b8d      	ldr	r3, [pc, #564]	@ (8002a7c <checkStartMoving+0x294>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7fd fe48 	bl	80004e0 <__aeabi_f2d>
 8002850:	4604      	mov	r4, r0
 8002852:	460d      	mov	r5, r1
 8002854:	4b8a      	ldr	r3, [pc, #552]	@ (8002a80 <checkStartMoving+0x298>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fe41 	bl	80004e0 <__aeabi_f2d>
 800285e:	4680      	mov	r8, r0
 8002860:	4689      	mov	r9, r1
 8002862:	4b84      	ldr	r3, [pc, #528]	@ (8002a74 <checkStartMoving+0x28c>)
 8002864:	edd3 7a00 	vldr	s15, [r3]
 8002868:	eef0 7ae7 	vabs.f32	s15, s15
 800286c:	ee17 0a90 	vmov	r0, s15
 8002870:	f7fd fe36 	bl	80004e0 <__aeabi_f2d>
 8002874:	4682      	mov	sl, r0
 8002876:	468b      	mov	fp, r1
 8002878:	4b81      	ldr	r3, [pc, #516]	@ (8002a80 <checkStartMoving+0x298>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7fd fe2f 	bl	80004e0 <__aeabi_f2d>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4650      	mov	r0, sl
 8002888:	4659      	mov	r1, fp
 800288a:	f7fd ffab 	bl	80007e4 <__aeabi_ddiv>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	ec43 2b17 	vmov	d7, r2, r3
 8002896:	eeb0 0a47 	vmov.f32	s0, s14
 800289a:	eef0 0a67 	vmov.f32	s1, s15
 800289e:	f009 f973 	bl	800bb88 <sqrt>
 80028a2:	ec53 2b10 	vmov	r2, r3, d0
 80028a6:	4640      	mov	r0, r8
 80028a8:	4649      	mov	r1, r9
 80028aa:	f7fd fe71 	bl	8000590 <__aeabi_dmul>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4690      	mov	r8, r2
 80028b4:	4699      	mov	r9, r3
 80028b6:	4b70      	ldr	r3, [pc, #448]	@ (8002a78 <checkStartMoving+0x290>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fd fdfe 	bl	80004bc <__aeabi_i2d>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4640      	mov	r0, r8
 80028c6:	4649      	mov	r1, r9
 80028c8:	f7fd fe62 	bl	8000590 <__aeabi_dmul>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4620      	mov	r0, r4
 80028d2:	4629      	mov	r1, r5
 80028d4:	f7fd fca6 	bl	8000224 <__adddf3>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4610      	mov	r0, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	f7fe f926 	bl	8000b30 <__aeabi_d2f>
 80028e4:	ee07 0a90 	vmov	s15, r0
 80028e8:	eef0 7ae7 	vabs.f32	s15, s15
 80028ec:	edc7 7a01 	vstr	s15, [r7, #4]

		if(q_check >= q_d_max){ //Accelerate to maximum speed
 80028f0:	4b64      	ldr	r3, [pc, #400]	@ (8002a84 <checkStartMoving+0x29c>)
 80028f2:	edd3 7a00 	vldr	s15, [r3]
 80028f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80028fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002902:	f2c0 80cf 	blt.w	8002aa4 <checkStartMoving+0x2bc>
			calmode = 1;
 8002906:	4b60      	ldr	r3, [pc, #384]	@ (8002a88 <checkStartMoving+0x2a0>)
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
			t_acc = fabs((q_d_max-q_d_i)/q_2d_max);
 800290c:	4b5d      	ldr	r3, [pc, #372]	@ (8002a84 <checkStartMoving+0x29c>)
 800290e:	ed93 7a00 	vldr	s14, [r3]
 8002912:	4b5a      	ldr	r3, [pc, #360]	@ (8002a7c <checkStartMoving+0x294>)
 8002914:	edd3 7a00 	vldr	s15, [r3]
 8002918:	ee77 6a67 	vsub.f32	s13, s14, s15
 800291c:	4b58      	ldr	r3, [pc, #352]	@ (8002a80 <checkStartMoving+0x298>)
 800291e:	ed93 7a00 	vldr	s14, [r3]
 8002922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002926:	eef0 7ae7 	vabs.f32	s15, s15
 800292a:	4b58      	ldr	r3, [pc, #352]	@ (8002a8c <checkStartMoving+0x2a4>)
 800292c:	edc3 7a00 	vstr	s15, [r3]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 8002930:	4b52      	ldr	r3, [pc, #328]	@ (8002a7c <checkStartMoving+0x294>)
 8002932:	ed93 7a00 	vldr	s14, [r3]
 8002936:	4b55      	ldr	r3, [pc, #340]	@ (8002a8c <checkStartMoving+0x2a4>)
 8002938:	edd3 7a00 	vldr	s15, [r3]
 800293c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002940:	4b4d      	ldr	r3, [pc, #308]	@ (8002a78 <checkStartMoving+0x290>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	ee07 3a90 	vmov	s15, r3
 8002948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800294c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002950:	ee17 0a90 	vmov	r0, s15
 8002954:	f7fd fdc4 	bl	80004e0 <__aeabi_f2d>
 8002958:	4604      	mov	r4, r0
 800295a:	460d      	mov	r5, r1
 800295c:	4b48      	ldr	r3, [pc, #288]	@ (8002a80 <checkStartMoving+0x298>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd fdbd 	bl	80004e0 <__aeabi_f2d>
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	4b49      	ldr	r3, [pc, #292]	@ (8002a90 <checkStartMoving+0x2a8>)
 800296c:	f7fd fe10 	bl	8000590 <__aeabi_dmul>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4690      	mov	r8, r2
 8002976:	4699      	mov	r9, r3
 8002978:	4b44      	ldr	r3, [pc, #272]	@ (8002a8c <checkStartMoving+0x2a4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fdaf 	bl	80004e0 <__aeabi_f2d>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4640      	mov	r0, r8
 8002988:	4649      	mov	r1, r9
 800298a:	f7fd fe01 	bl	8000590 <__aeabi_dmul>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4690      	mov	r8, r2
 8002994:	4699      	mov	r9, r3
 8002996:	4b3d      	ldr	r3, [pc, #244]	@ (8002a8c <checkStartMoving+0x2a4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fda0 	bl	80004e0 <__aeabi_f2d>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4640      	mov	r0, r8
 80029a6:	4649      	mov	r1, r9
 80029a8:	f7fd fdf2 	bl	8000590 <__aeabi_dmul>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4690      	mov	r8, r2
 80029b2:	4699      	mov	r9, r3
 80029b4:	4b30      	ldr	r3, [pc, #192]	@ (8002a78 <checkStartMoving+0x290>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fd7f 	bl	80004bc <__aeabi_i2d>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4640      	mov	r0, r8
 80029c4:	4649      	mov	r1, r9
 80029c6:	f7fd fde3 	bl	8000590 <__aeabi_dmul>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4620      	mov	r0, r4
 80029d0:	4629      	mov	r1, r5
 80029d2:	f7fd fc27 	bl	8000224 <__adddf3>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4610      	mov	r0, r2
 80029dc:	4619      	mov	r1, r3
 80029de:	f7fe f8a7 	bl	8000b30 <__aeabi_d2f>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002a94 <checkStartMoving+0x2ac>)
 80029e6:	6013      	str	r3, [r2, #0]
			t_const = fabs((q_f-q_i-2*q_acc)/q_d_max);
 80029e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a68 <checkStartMoving+0x280>)
 80029ea:	ed93 7a00 	vldr	s14, [r3]
 80029ee:	4b20      	ldr	r3, [pc, #128]	@ (8002a70 <checkStartMoving+0x288>)
 80029f0:	edd3 7a00 	vldr	s15, [r3]
 80029f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029f8:	4b26      	ldr	r3, [pc, #152]	@ (8002a94 <checkStartMoving+0x2ac>)
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a02:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002a06:	4b1f      	ldr	r3, [pc, #124]	@ (8002a84 <checkStartMoving+0x29c>)
 8002a08:	ed93 7a00 	vldr	s14, [r3]
 8002a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a10:	eef0 7ae7 	vabs.f32	s15, s15
 8002a14:	4b20      	ldr	r3, [pc, #128]	@ (8002a98 <checkStartMoving+0x2b0>)
 8002a16:	edc3 7a00 	vstr	s15, [r3]
			q_const = q_acc + q_d_max*t_const*dir;
 8002a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a84 <checkStartMoving+0x29c>)
 8002a1c:	ed93 7a00 	vldr	s14, [r3]
 8002a20:	4b1d      	ldr	r3, [pc, #116]	@ (8002a98 <checkStartMoving+0x2b0>)
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a2a:	4b13      	ldr	r3, [pc, #76]	@ (8002a78 <checkStartMoving+0x290>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a3a:	4b16      	ldr	r3, [pc, #88]	@ (8002a94 <checkStartMoving+0x2ac>)
 8002a3c:	edd3 7a00 	vldr	s15, [r3]
 8002a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a44:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <checkStartMoving+0x2b4>)
 8002a46:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc + t_const;
 8002a4a:	4b10      	ldr	r3, [pc, #64]	@ (8002a8c <checkStartMoving+0x2a4>)
 8002a4c:	edd3 7a00 	vldr	s15, [r3]
 8002a50:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a54:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <checkStartMoving+0x2b0>)
 8002a56:	edd3 7a00 	vldr	s15, [r3]
 8002a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a5e:	4b10      	ldr	r3, [pc, #64]	@ (8002aa0 <checkStartMoving+0x2b8>)
 8002a60:	edc3 7a00 	vstr	s15, [r3]
 8002a64:	e0c6      	b.n	8002bf4 <checkStartMoving+0x40c>
 8002a66:	bf00      	nop
 8002a68:	20000a34 	.word	0x20000a34
 8002a6c:	20000a4c 	.word	0x20000a4c
 8002a70:	20000a38 	.word	0x20000a38
 8002a74:	20000a3c 	.word	0x20000a3c
 8002a78:	20000214 	.word	0x20000214
 8002a7c:	20000a30 	.word	0x20000a30
 8002a80:	2000020c 	.word	0x2000020c
 8002a84:	20000208 	.word	0x20000208
 8002a88:	20000210 	.word	0x20000210
 8002a8c:	20000a50 	.word	0x20000a50
 8002a90:	3fe00000 	.word	0x3fe00000
 8002a94:	20000a54 	.word	0x20000a54
 8002a98:	20000a58 	.word	0x20000a58
 8002a9c:	20000a5c 	.word	0x20000a5c
 8002aa0:	20000a74 	.word	0x20000a74
		}
		else{ //Accelerating does not reach maximum speed
			calmode = 2;
 8002aa4:	4b5b      	ldr	r3, [pc, #364]	@ (8002c14 <checkStartMoving+0x42c>)
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	701a      	strb	r2, [r3, #0]
			t_acc = sqrt(fabs(delta_q)/q_2d_max);
 8002aaa:	4b5b      	ldr	r3, [pc, #364]	@ (8002c18 <checkStartMoving+0x430>)
 8002aac:	edd3 7a00 	vldr	s15, [r3]
 8002ab0:	eef0 7ae7 	vabs.f32	s15, s15
 8002ab4:	ee17 0a90 	vmov	r0, s15
 8002ab8:	f7fd fd12 	bl	80004e0 <__aeabi_f2d>
 8002abc:	4604      	mov	r4, r0
 8002abe:	460d      	mov	r5, r1
 8002ac0:	4b56      	ldr	r3, [pc, #344]	@ (8002c1c <checkStartMoving+0x434>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fd0b 	bl	80004e0 <__aeabi_f2d>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4620      	mov	r0, r4
 8002ad0:	4629      	mov	r1, r5
 8002ad2:	f7fd fe87 	bl	80007e4 <__aeabi_ddiv>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	ec43 2b17 	vmov	d7, r2, r3
 8002ade:	eeb0 0a47 	vmov.f32	s0, s14
 8002ae2:	eef0 0a67 	vmov.f32	s1, s15
 8002ae6:	f009 f84f 	bl	800bb88 <sqrt>
 8002aea:	ec53 2b10 	vmov	r2, r3, d0
 8002aee:	4610      	mov	r0, r2
 8002af0:	4619      	mov	r1, r3
 8002af2:	f7fe f81d 	bl	8000b30 <__aeabi_d2f>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4a49      	ldr	r2, [pc, #292]	@ (8002c20 <checkStartMoving+0x438>)
 8002afa:	6013      	str	r3, [r2, #0]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 8002afc:	4b49      	ldr	r3, [pc, #292]	@ (8002c24 <checkStartMoving+0x43c>)
 8002afe:	ed93 7a00 	vldr	s14, [r3]
 8002b02:	4b47      	ldr	r3, [pc, #284]	@ (8002c20 <checkStartMoving+0x438>)
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b0c:	4b46      	ldr	r3, [pc, #280]	@ (8002c28 <checkStartMoving+0x440>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	ee07 3a90 	vmov	s15, r3
 8002b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1c:	ee17 0a90 	vmov	r0, s15
 8002b20:	f7fd fcde 	bl	80004e0 <__aeabi_f2d>
 8002b24:	4604      	mov	r4, r0
 8002b26:	460d      	mov	r5, r1
 8002b28:	4b3c      	ldr	r3, [pc, #240]	@ (8002c1c <checkStartMoving+0x434>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd fcd7 	bl	80004e0 <__aeabi_f2d>
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	4b3d      	ldr	r3, [pc, #244]	@ (8002c2c <checkStartMoving+0x444>)
 8002b38:	f7fd fd2a 	bl	8000590 <__aeabi_dmul>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4690      	mov	r8, r2
 8002b42:	4699      	mov	r9, r3
 8002b44:	4b36      	ldr	r3, [pc, #216]	@ (8002c20 <checkStartMoving+0x438>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fd fcc9 	bl	80004e0 <__aeabi_f2d>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4640      	mov	r0, r8
 8002b54:	4649      	mov	r1, r9
 8002b56:	f7fd fd1b 	bl	8000590 <__aeabi_dmul>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4690      	mov	r8, r2
 8002b60:	4699      	mov	r9, r3
 8002b62:	4b2f      	ldr	r3, [pc, #188]	@ (8002c20 <checkStartMoving+0x438>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fcba 	bl	80004e0 <__aeabi_f2d>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4640      	mov	r0, r8
 8002b72:	4649      	mov	r1, r9
 8002b74:	f7fd fd0c 	bl	8000590 <__aeabi_dmul>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4690      	mov	r8, r2
 8002b7e:	4699      	mov	r9, r3
 8002b80:	4b29      	ldr	r3, [pc, #164]	@ (8002c28 <checkStartMoving+0x440>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fd fc99 	bl	80004bc <__aeabi_i2d>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4640      	mov	r0, r8
 8002b90:	4649      	mov	r1, r9
 8002b92:	f7fd fcfd 	bl	8000590 <__aeabi_dmul>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	4629      	mov	r1, r5
 8002b9e:	f7fd fb41 	bl	8000224 <__adddf3>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f7fd ffc1 	bl	8000b30 <__aeabi_d2f>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c30 <checkStartMoving+0x448>)
 8002bb2:	6013      	str	r3, [r2, #0]
			q_d_acc = q_d_i + q_2d_max*t_acc*dir;
 8002bb4:	4b19      	ldr	r3, [pc, #100]	@ (8002c1c <checkStartMoving+0x434>)
 8002bb6:	ed93 7a00 	vldr	s14, [r3]
 8002bba:	4b19      	ldr	r3, [pc, #100]	@ (8002c20 <checkStartMoving+0x438>)
 8002bbc:	edd3 7a00 	vldr	s15, [r3]
 8002bc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bc4:	4b18      	ldr	r3, [pc, #96]	@ (8002c28 <checkStartMoving+0x440>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	ee07 3a90 	vmov	s15, r3
 8002bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bd4:	4b13      	ldr	r3, [pc, #76]	@ (8002c24 <checkStartMoving+0x43c>)
 8002bd6:	edd3 7a00 	vldr	s15, [r3]
 8002bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bde:	4b15      	ldr	r3, [pc, #84]	@ (8002c34 <checkStartMoving+0x44c>)
 8002be0:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc;
 8002be4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c20 <checkStartMoving+0x438>)
 8002be6:	edd3 7a00 	vldr	s15, [r3]
 8002bea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002bee:	4b12      	ldr	r3, [pc, #72]	@ (8002c38 <checkStartMoving+0x450>)
 8002bf0:	edc3 7a00 	vstr	s15, [r3]
		}
		T_start = micros();
 8002bf4:	f7ff fcb6 	bl	8002564 <micros>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	490f      	ldr	r1, [pc, #60]	@ (8002c3c <checkStartMoving+0x454>)
 8002bfe:	e9c1 2300 	strd	r2, r3, [r1]
		q_f_old = q_f;
 8002c02:	4b0f      	ldr	r3, [pc, #60]	@ (8002c40 <checkStartMoving+0x458>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a0f      	ldr	r2, [pc, #60]	@ (8002c44 <checkStartMoving+0x45c>)
 8002c08:	6013      	str	r3, [r2, #0]
	}
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c14:	20000210 	.word	0x20000210
 8002c18:	20000a3c 	.word	0x20000a3c
 8002c1c:	2000020c 	.word	0x2000020c
 8002c20:	20000a50 	.word	0x20000a50
 8002c24:	20000a30 	.word	0x20000a30
 8002c28:	20000214 	.word	0x20000214
 8002c2c:	3fe00000 	.word	0x3fe00000
 8002c30:	20000a54 	.word	0x20000a54
 8002c34:	20000a60 	.word	0x20000a60
 8002c38:	20000a74 	.word	0x20000a74
 8002c3c:	20000a68 	.word	0x20000a68
 8002c40:	20000a34 	.word	0x20000a34
 8002c44:	20000a4c 	.word	0x20000a4c

08002c48 <createTrajectory>:

void createTrajectory(){
 8002c48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c4c:	af00      	add	r7, sp, #0
	if(calmode == 1){
 8002c4e:	4b84      	ldr	r3, [pc, #528]	@ (8002e60 <createTrajectory+0x218>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	f040 822c 	bne.w	80030b0 <createTrajectory+0x468>
		t = (float)(micros()-T_start)/1000000; //sec
 8002c58:	f7ff fc84 	bl	8002564 <micros>
 8002c5c:	4b81      	ldr	r3, [pc, #516]	@ (8002e64 <createTrajectory+0x21c>)
 8002c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c62:	ebb0 0802 	subs.w	r8, r0, r2
 8002c66:	eb61 0903 	sbc.w	r9, r1, r3
 8002c6a:	4640      	mov	r0, r8
 8002c6c:	4649      	mov	r1, r9
 8002c6e:	f7fe f877 	bl	8000d60 <__aeabi_ul2f>
 8002c72:	ee06 0a90 	vmov	s13, r0
 8002c76:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8002e68 <createTrajectory+0x220>
 8002c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c7e:	4b7b      	ldr	r3, [pc, #492]	@ (8002e6c <createTrajectory+0x224>)
 8002c80:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 8002c84:	4b79      	ldr	r3, [pc, #484]	@ (8002e6c <createTrajectory+0x224>)
 8002c86:	edd3 7a00 	vldr	s15, [r3]
 8002c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c92:	f2c0 8094 	blt.w	8002dbe <createTrajectory+0x176>
 8002c96:	4b75      	ldr	r3, [pc, #468]	@ (8002e6c <createTrajectory+0x224>)
 8002c98:	ed93 7a00 	vldr	s14, [r3]
 8002c9c:	4b74      	ldr	r3, [pc, #464]	@ (8002e70 <createTrajectory+0x228>)
 8002c9e:	edd3 7a00 	vldr	s15, [r3]
 8002ca2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002caa:	f140 8088 	bpl.w	8002dbe <createTrajectory+0x176>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 8002cae:	4b71      	ldr	r3, [pc, #452]	@ (8002e74 <createTrajectory+0x22c>)
 8002cb0:	ed93 7a00 	vldr	s14, [r3]
 8002cb4:	4b6d      	ldr	r3, [pc, #436]	@ (8002e6c <createTrajectory+0x224>)
 8002cb6:	edd3 7a00 	vldr	s15, [r3]
 8002cba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cbe:	4b6e      	ldr	r3, [pc, #440]	@ (8002e78 <createTrajectory+0x230>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	ee07 3a90 	vmov	s15, r3
 8002cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cce:	4b6b      	ldr	r3, [pc, #428]	@ (8002e7c <createTrajectory+0x234>)
 8002cd0:	edd3 7a00 	vldr	s15, [r3]
 8002cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd8:	ee17 0a90 	vmov	r0, s15
 8002cdc:	f7fd fc00 	bl	80004e0 <__aeabi_f2d>
 8002ce0:	4604      	mov	r4, r0
 8002ce2:	460d      	mov	r5, r1
 8002ce4:	4b66      	ldr	r3, [pc, #408]	@ (8002e80 <createTrajectory+0x238>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd fbf9 	bl	80004e0 <__aeabi_f2d>
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	4b64      	ldr	r3, [pc, #400]	@ (8002e84 <createTrajectory+0x23c>)
 8002cf4:	f7fd fc4c 	bl	8000590 <__aeabi_dmul>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4690      	mov	r8, r2
 8002cfe:	4699      	mov	r9, r3
 8002d00:	4b5a      	ldr	r3, [pc, #360]	@ (8002e6c <createTrajectory+0x224>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fd fbeb 	bl	80004e0 <__aeabi_f2d>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4640      	mov	r0, r8
 8002d10:	4649      	mov	r1, r9
 8002d12:	f7fd fc3d 	bl	8000590 <__aeabi_dmul>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4690      	mov	r8, r2
 8002d1c:	4699      	mov	r9, r3
 8002d1e:	4b53      	ldr	r3, [pc, #332]	@ (8002e6c <createTrajectory+0x224>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd fbdc 	bl	80004e0 <__aeabi_f2d>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4640      	mov	r0, r8
 8002d2e:	4649      	mov	r1, r9
 8002d30:	f7fd fc2e 	bl	8000590 <__aeabi_dmul>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4690      	mov	r8, r2
 8002d3a:	4699      	mov	r9, r3
 8002d3c:	4b4e      	ldr	r3, [pc, #312]	@ (8002e78 <createTrajectory+0x230>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fd fbbb 	bl	80004bc <__aeabi_i2d>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4640      	mov	r0, r8
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	f7fd fc1f 	bl	8000590 <__aeabi_dmul>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4620      	mov	r0, r4
 8002d58:	4629      	mov	r1, r5
 8002d5a:	f7fd fa63 	bl	8000224 <__adddf3>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4610      	mov	r0, r2
 8002d64:	4619      	mov	r1, r3
 8002d66:	f7fd fee3 	bl	8000b30 <__aeabi_d2f>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4a46      	ldr	r2, [pc, #280]	@ (8002e88 <createTrajectory+0x240>)
 8002d6e:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 8002d70:	4b43      	ldr	r3, [pc, #268]	@ (8002e80 <createTrajectory+0x238>)
 8002d72:	ed93 7a00 	vldr	s14, [r3]
 8002d76:	4b3d      	ldr	r3, [pc, #244]	@ (8002e6c <createTrajectory+0x224>)
 8002d78:	edd3 7a00 	vldr	s15, [r3]
 8002d7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d80:	4b3d      	ldr	r3, [pc, #244]	@ (8002e78 <createTrajectory+0x230>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	ee07 3a90 	vmov	s15, r3
 8002d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d90:	4b38      	ldr	r3, [pc, #224]	@ (8002e74 <createTrajectory+0x22c>)
 8002d92:	edd3 7a00 	vldr	s15, [r3]
 8002d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8002e8c <createTrajectory+0x244>)
 8002d9c:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 8002da0:	4b35      	ldr	r3, [pc, #212]	@ (8002e78 <createTrajectory+0x230>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	ee07 3a90 	vmov	s15, r3
 8002da8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dac:	4b34      	ldr	r3, [pc, #208]	@ (8002e80 <createTrajectory+0x238>)
 8002dae:	edd3 7a00 	vldr	s15, [r3]
 8002db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db6:	4b36      	ldr	r3, [pc, #216]	@ (8002e90 <createTrajectory+0x248>)
 8002db8:	edc3 7a00 	vstr	s15, [r3]
 8002dbc:	e2fd      	b.n	80033ba <createTrajectory+0x772>
		}
		else if((t_acc <= t) && (t < t_acc+t_const)){ //Constant Velocity Segment
 8002dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8002e70 <createTrajectory+0x228>)
 8002dc0:	ed93 7a00 	vldr	s14, [r3]
 8002dc4:	4b29      	ldr	r3, [pc, #164]	@ (8002e6c <createTrajectory+0x224>)
 8002dc6:	edd3 7a00 	vldr	s15, [r3]
 8002dca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd2:	d865      	bhi.n	8002ea0 <createTrajectory+0x258>
 8002dd4:	4b26      	ldr	r3, [pc, #152]	@ (8002e70 <createTrajectory+0x228>)
 8002dd6:	ed93 7a00 	vldr	s14, [r3]
 8002dda:	4b2e      	ldr	r3, [pc, #184]	@ (8002e94 <createTrajectory+0x24c>)
 8002ddc:	edd3 7a00 	vldr	s15, [r3]
 8002de0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002de4:	4b21      	ldr	r3, [pc, #132]	@ (8002e6c <createTrajectory+0x224>)
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df2:	dd55      	ble.n	8002ea0 <createTrajectory+0x258>
			ref_p = q_i + q_acc + q_d_max*(t-t_acc)*dir;
 8002df4:	4b21      	ldr	r3, [pc, #132]	@ (8002e7c <createTrajectory+0x234>)
 8002df6:	ed93 7a00 	vldr	s14, [r3]
 8002dfa:	4b27      	ldr	r3, [pc, #156]	@ (8002e98 <createTrajectory+0x250>)
 8002dfc:	edd3 7a00 	vldr	s15, [r3]
 8002e00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e04:	4b19      	ldr	r3, [pc, #100]	@ (8002e6c <createTrajectory+0x224>)
 8002e06:	edd3 6a00 	vldr	s13, [r3]
 8002e0a:	4b19      	ldr	r3, [pc, #100]	@ (8002e70 <createTrajectory+0x228>)
 8002e0c:	edd3 7a00 	vldr	s15, [r3]
 8002e10:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e14:	4b21      	ldr	r3, [pc, #132]	@ (8002e9c <createTrajectory+0x254>)
 8002e16:	edd3 7a00 	vldr	s15, [r3]
 8002e1a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e1e:	4b16      	ldr	r3, [pc, #88]	@ (8002e78 <createTrajectory+0x230>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	ee07 3a90 	vmov	s15, r3
 8002e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e32:	4b15      	ldr	r3, [pc, #84]	@ (8002e88 <createTrajectory+0x240>)
 8002e34:	edc3 7a00 	vstr	s15, [r3]
			ref_v = q_d_max*dir;
 8002e38:	4b0f      	ldr	r3, [pc, #60]	@ (8002e78 <createTrajectory+0x230>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	ee07 3a90 	vmov	s15, r3
 8002e40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e44:	4b15      	ldr	r3, [pc, #84]	@ (8002e9c <createTrajectory+0x254>)
 8002e46:	edd3 7a00 	vldr	s15, [r3]
 8002e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e8c <createTrajectory+0x244>)
 8002e50:	edc3 7a00 	vstr	s15, [r3]
			ref_a = 0;
 8002e54:	4b0e      	ldr	r3, [pc, #56]	@ (8002e90 <createTrajectory+0x248>)
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e2ad      	b.n	80033ba <createTrajectory+0x772>
 8002e5e:	bf00      	nop
 8002e60:	20000210 	.word	0x20000210
 8002e64:	20000a68 	.word	0x20000a68
 8002e68:	49742400 	.word	0x49742400
 8002e6c:	20000a70 	.word	0x20000a70
 8002e70:	20000a50 	.word	0x20000a50
 8002e74:	20000a30 	.word	0x20000a30
 8002e78:	20000214 	.word	0x20000214
 8002e7c:	20000a38 	.word	0x20000a38
 8002e80:	2000020c 	.word	0x2000020c
 8002e84:	3fe00000 	.word	0x3fe00000
 8002e88:	20000a40 	.word	0x20000a40
 8002e8c:	20000a44 	.word	0x20000a44
 8002e90:	20000a48 	.word	0x20000a48
 8002e94:	20000a58 	.word	0x20000a58
 8002e98:	20000a54 	.word	0x20000a54
 8002e9c:	20000208 	.word	0x20000208
		}
		else if((t_acc+t_const <= t) && (t < 2*t_acc+t_const)){ //Deceleration Segment
 8002ea0:	4b76      	ldr	r3, [pc, #472]	@ (800307c <createTrajectory+0x434>)
 8002ea2:	ed93 7a00 	vldr	s14, [r3]
 8002ea6:	4b76      	ldr	r3, [pc, #472]	@ (8003080 <createTrajectory+0x438>)
 8002ea8:	edd3 7a00 	vldr	s15, [r3]
 8002eac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eb0:	4b74      	ldr	r3, [pc, #464]	@ (8003084 <createTrajectory+0x43c>)
 8002eb2:	edd3 7a00 	vldr	s15, [r3]
 8002eb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebe:	f200 80d8 	bhi.w	8003072 <createTrajectory+0x42a>
 8002ec2:	4b6e      	ldr	r3, [pc, #440]	@ (800307c <createTrajectory+0x434>)
 8002ec4:	edd3 7a00 	vldr	s15, [r3]
 8002ec8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002ecc:	4b6c      	ldr	r3, [pc, #432]	@ (8003080 <createTrajectory+0x438>)
 8002ece:	edd3 7a00 	vldr	s15, [r3]
 8002ed2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ed6:	4b6b      	ldr	r3, [pc, #428]	@ (8003084 <createTrajectory+0x43c>)
 8002ed8:	edd3 7a00 	vldr	s15, [r3]
 8002edc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee4:	f340 80c5 	ble.w	8003072 <createTrajectory+0x42a>
			ref_p = q_i + q_const + q_d_max*(t-t_acc-t_const)*dir-0.5*q_2d_max*(t-t_acc-t_const)*(t-t_acc-t_const)*dir;
 8002ee8:	4b67      	ldr	r3, [pc, #412]	@ (8003088 <createTrajectory+0x440>)
 8002eea:	ed93 7a00 	vldr	s14, [r3]
 8002eee:	4b67      	ldr	r3, [pc, #412]	@ (800308c <createTrajectory+0x444>)
 8002ef0:	edd3 7a00 	vldr	s15, [r3]
 8002ef4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ef8:	4b62      	ldr	r3, [pc, #392]	@ (8003084 <createTrajectory+0x43c>)
 8002efa:	edd3 6a00 	vldr	s13, [r3]
 8002efe:	4b5f      	ldr	r3, [pc, #380]	@ (800307c <createTrajectory+0x434>)
 8002f00:	edd3 7a00 	vldr	s15, [r3]
 8002f04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002f08:	4b5d      	ldr	r3, [pc, #372]	@ (8003080 <createTrajectory+0x438>)
 8002f0a:	edd3 7a00 	vldr	s15, [r3]
 8002f0e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002f12:	4b5f      	ldr	r3, [pc, #380]	@ (8003090 <createTrajectory+0x448>)
 8002f14:	edd3 7a00 	vldr	s15, [r3]
 8002f18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f1c:	4b5d      	ldr	r3, [pc, #372]	@ (8003094 <createTrajectory+0x44c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	ee07 3a90 	vmov	s15, r3
 8002f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f30:	ee17 0a90 	vmov	r0, s15
 8002f34:	f7fd fad4 	bl	80004e0 <__aeabi_f2d>
 8002f38:	4604      	mov	r4, r0
 8002f3a:	460d      	mov	r5, r1
 8002f3c:	4b56      	ldr	r3, [pc, #344]	@ (8003098 <createTrajectory+0x450>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd facd 	bl	80004e0 <__aeabi_f2d>
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	4b54      	ldr	r3, [pc, #336]	@ (800309c <createTrajectory+0x454>)
 8002f4c:	f7fd fb20 	bl	8000590 <__aeabi_dmul>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4690      	mov	r8, r2
 8002f56:	4699      	mov	r9, r3
 8002f58:	4b4a      	ldr	r3, [pc, #296]	@ (8003084 <createTrajectory+0x43c>)
 8002f5a:	ed93 7a00 	vldr	s14, [r3]
 8002f5e:	4b47      	ldr	r3, [pc, #284]	@ (800307c <createTrajectory+0x434>)
 8002f60:	edd3 7a00 	vldr	s15, [r3]
 8002f64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f68:	4b45      	ldr	r3, [pc, #276]	@ (8003080 <createTrajectory+0x438>)
 8002f6a:	edd3 7a00 	vldr	s15, [r3]
 8002f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f72:	ee17 0a90 	vmov	r0, s15
 8002f76:	f7fd fab3 	bl	80004e0 <__aeabi_f2d>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4640      	mov	r0, r8
 8002f80:	4649      	mov	r1, r9
 8002f82:	f7fd fb05 	bl	8000590 <__aeabi_dmul>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4690      	mov	r8, r2
 8002f8c:	4699      	mov	r9, r3
 8002f8e:	4b3d      	ldr	r3, [pc, #244]	@ (8003084 <createTrajectory+0x43c>)
 8002f90:	ed93 7a00 	vldr	s14, [r3]
 8002f94:	4b39      	ldr	r3, [pc, #228]	@ (800307c <createTrajectory+0x434>)
 8002f96:	edd3 7a00 	vldr	s15, [r3]
 8002f9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f9e:	4b38      	ldr	r3, [pc, #224]	@ (8003080 <createTrajectory+0x438>)
 8002fa0:	edd3 7a00 	vldr	s15, [r3]
 8002fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fa8:	ee17 0a90 	vmov	r0, s15
 8002fac:	f7fd fa98 	bl	80004e0 <__aeabi_f2d>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4640      	mov	r0, r8
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	f7fd faea 	bl	8000590 <__aeabi_dmul>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4690      	mov	r8, r2
 8002fc2:	4699      	mov	r9, r3
 8002fc4:	4b33      	ldr	r3, [pc, #204]	@ (8003094 <createTrajectory+0x44c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fd fa77 	bl	80004bc <__aeabi_i2d>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4640      	mov	r0, r8
 8002fd4:	4649      	mov	r1, r9
 8002fd6:	f7fd fadb 	bl	8000590 <__aeabi_dmul>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4620      	mov	r0, r4
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	f7fd f91d 	bl	8000220 <__aeabi_dsub>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4610      	mov	r0, r2
 8002fec:	4619      	mov	r1, r3
 8002fee:	f7fd fd9f 	bl	8000b30 <__aeabi_d2f>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4a2a      	ldr	r2, [pc, #168]	@ (80030a0 <createTrajectory+0x458>)
 8002ff6:	6013      	str	r3, [r2, #0]
			ref_v = -q_2d_max*(t-t_acc-t_const)*dir + q_d_max*dir;
 8002ff8:	4b27      	ldr	r3, [pc, #156]	@ (8003098 <createTrajectory+0x450>)
 8002ffa:	edd3 7a00 	vldr	s15, [r3]
 8002ffe:	eeb1 7a67 	vneg.f32	s14, s15
 8003002:	4b20      	ldr	r3, [pc, #128]	@ (8003084 <createTrajectory+0x43c>)
 8003004:	edd3 6a00 	vldr	s13, [r3]
 8003008:	4b1c      	ldr	r3, [pc, #112]	@ (800307c <createTrajectory+0x434>)
 800300a:	edd3 7a00 	vldr	s15, [r3]
 800300e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003012:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <createTrajectory+0x438>)
 8003014:	edd3 7a00 	vldr	s15, [r3]
 8003018:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800301c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003020:	4b1c      	ldr	r3, [pc, #112]	@ (8003094 <createTrajectory+0x44c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	ee07 3a90 	vmov	s15, r3
 8003028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800302c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003030:	4b18      	ldr	r3, [pc, #96]	@ (8003094 <createTrajectory+0x44c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	ee07 3a90 	vmov	s15, r3
 8003038:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800303c:	4b14      	ldr	r3, [pc, #80]	@ (8003090 <createTrajectory+0x448>)
 800303e:	edd3 7a00 	vldr	s15, [r3]
 8003042:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800304a:	4b16      	ldr	r3, [pc, #88]	@ (80030a4 <createTrajectory+0x45c>)
 800304c:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 8003050:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <createTrajectory+0x450>)
 8003052:	edd3 7a00 	vldr	s15, [r3]
 8003056:	eeb1 7a67 	vneg.f32	s14, s15
 800305a:	4b0e      	ldr	r3, [pc, #56]	@ (8003094 <createTrajectory+0x44c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	ee07 3a90 	vmov	s15, r3
 8003062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800306a:	4b0f      	ldr	r3, [pc, #60]	@ (80030a8 <createTrajectory+0x460>)
 800306c:	edc3 7a00 	vstr	s15, [r3]
 8003070:	e1a3      	b.n	80033ba <createTrajectory+0x772>
		}
		else{
			calmode = 3;
 8003072:	4b0e      	ldr	r3, [pc, #56]	@ (80030ac <createTrajectory+0x464>)
 8003074:	2203      	movs	r2, #3
 8003076:	701a      	strb	r2, [r3, #0]
	else if(calmode == 3){ //stop
		ref_p = q_f;
		ref_v = 0;
		ref_a = 0;
	}
}
 8003078:	e19f      	b.n	80033ba <createTrajectory+0x772>
 800307a:	bf00      	nop
 800307c:	20000a50 	.word	0x20000a50
 8003080:	20000a58 	.word	0x20000a58
 8003084:	20000a70 	.word	0x20000a70
 8003088:	20000a38 	.word	0x20000a38
 800308c:	20000a5c 	.word	0x20000a5c
 8003090:	20000208 	.word	0x20000208
 8003094:	20000214 	.word	0x20000214
 8003098:	2000020c 	.word	0x2000020c
 800309c:	3fe00000 	.word	0x3fe00000
 80030a0:	20000a40 	.word	0x20000a40
 80030a4:	20000a44 	.word	0x20000a44
 80030a8:	20000a48 	.word	0x20000a48
 80030ac:	20000210 	.word	0x20000210
	else if(calmode == 2){
 80030b0:	4bc3      	ldr	r3, [pc, #780]	@ (80033c0 <createTrajectory+0x778>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	f040 816f 	bne.w	8003398 <createTrajectory+0x750>
		t = (float)(micros()-T_start)/1000000; //sec
 80030ba:	f7ff fa53 	bl	8002564 <micros>
 80030be:	4bc1      	ldr	r3, [pc, #772]	@ (80033c4 <createTrajectory+0x77c>)
 80030c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c4:	1a84      	subs	r4, r0, r2
 80030c6:	eb61 0503 	sbc.w	r5, r1, r3
 80030ca:	4620      	mov	r0, r4
 80030cc:	4629      	mov	r1, r5
 80030ce:	f7fd fe47 	bl	8000d60 <__aeabi_ul2f>
 80030d2:	ee06 0a90 	vmov	s13, r0
 80030d6:	ed9f 7abc 	vldr	s14, [pc, #752]	@ 80033c8 <createTrajectory+0x780>
 80030da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030de:	4bbb      	ldr	r3, [pc, #748]	@ (80033cc <createTrajectory+0x784>)
 80030e0:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 80030e4:	4bb9      	ldr	r3, [pc, #740]	@ (80033cc <createTrajectory+0x784>)
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f2:	f2c0 8094 	blt.w	800321e <createTrajectory+0x5d6>
 80030f6:	4bb5      	ldr	r3, [pc, #724]	@ (80033cc <createTrajectory+0x784>)
 80030f8:	ed93 7a00 	vldr	s14, [r3]
 80030fc:	4bb4      	ldr	r3, [pc, #720]	@ (80033d0 <createTrajectory+0x788>)
 80030fe:	edd3 7a00 	vldr	s15, [r3]
 8003102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310a:	f140 8088 	bpl.w	800321e <createTrajectory+0x5d6>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 800310e:	4bb1      	ldr	r3, [pc, #708]	@ (80033d4 <createTrajectory+0x78c>)
 8003110:	ed93 7a00 	vldr	s14, [r3]
 8003114:	4bad      	ldr	r3, [pc, #692]	@ (80033cc <createTrajectory+0x784>)
 8003116:	edd3 7a00 	vldr	s15, [r3]
 800311a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800311e:	4bae      	ldr	r3, [pc, #696]	@ (80033d8 <createTrajectory+0x790>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	ee07 3a90 	vmov	s15, r3
 8003126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800312a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800312e:	4bab      	ldr	r3, [pc, #684]	@ (80033dc <createTrajectory+0x794>)
 8003130:	edd3 7a00 	vldr	s15, [r3]
 8003134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003138:	ee17 0a90 	vmov	r0, s15
 800313c:	f7fd f9d0 	bl	80004e0 <__aeabi_f2d>
 8003140:	4604      	mov	r4, r0
 8003142:	460d      	mov	r5, r1
 8003144:	4ba6      	ldr	r3, [pc, #664]	@ (80033e0 <createTrajectory+0x798>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f7fd f9c9 	bl	80004e0 <__aeabi_f2d>
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	4ba4      	ldr	r3, [pc, #656]	@ (80033e4 <createTrajectory+0x79c>)
 8003154:	f7fd fa1c 	bl	8000590 <__aeabi_dmul>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4690      	mov	r8, r2
 800315e:	4699      	mov	r9, r3
 8003160:	4b9a      	ldr	r3, [pc, #616]	@ (80033cc <createTrajectory+0x784>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd f9bb 	bl	80004e0 <__aeabi_f2d>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4640      	mov	r0, r8
 8003170:	4649      	mov	r1, r9
 8003172:	f7fd fa0d 	bl	8000590 <__aeabi_dmul>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4690      	mov	r8, r2
 800317c:	4699      	mov	r9, r3
 800317e:	4b93      	ldr	r3, [pc, #588]	@ (80033cc <createTrajectory+0x784>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd f9ac 	bl	80004e0 <__aeabi_f2d>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4640      	mov	r0, r8
 800318e:	4649      	mov	r1, r9
 8003190:	f7fd f9fe 	bl	8000590 <__aeabi_dmul>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4690      	mov	r8, r2
 800319a:	4699      	mov	r9, r3
 800319c:	4b8e      	ldr	r3, [pc, #568]	@ (80033d8 <createTrajectory+0x790>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fd f98b 	bl	80004bc <__aeabi_i2d>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4640      	mov	r0, r8
 80031ac:	4649      	mov	r1, r9
 80031ae:	f7fd f9ef 	bl	8000590 <__aeabi_dmul>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4620      	mov	r0, r4
 80031b8:	4629      	mov	r1, r5
 80031ba:	f7fd f833 	bl	8000224 <__adddf3>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4610      	mov	r0, r2
 80031c4:	4619      	mov	r1, r3
 80031c6:	f7fd fcb3 	bl	8000b30 <__aeabi_d2f>
 80031ca:	4603      	mov	r3, r0
 80031cc:	4a86      	ldr	r2, [pc, #536]	@ (80033e8 <createTrajectory+0x7a0>)
 80031ce:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 80031d0:	4b83      	ldr	r3, [pc, #524]	@ (80033e0 <createTrajectory+0x798>)
 80031d2:	ed93 7a00 	vldr	s14, [r3]
 80031d6:	4b7d      	ldr	r3, [pc, #500]	@ (80033cc <createTrajectory+0x784>)
 80031d8:	edd3 7a00 	vldr	s15, [r3]
 80031dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031e0:	4b7d      	ldr	r3, [pc, #500]	@ (80033d8 <createTrajectory+0x790>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	ee07 3a90 	vmov	s15, r3
 80031e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031f0:	4b78      	ldr	r3, [pc, #480]	@ (80033d4 <createTrajectory+0x78c>)
 80031f2:	edd3 7a00 	vldr	s15, [r3]
 80031f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fa:	4b7c      	ldr	r3, [pc, #496]	@ (80033ec <createTrajectory+0x7a4>)
 80031fc:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 8003200:	4b75      	ldr	r3, [pc, #468]	@ (80033d8 <createTrajectory+0x790>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	ee07 3a90 	vmov	s15, r3
 8003208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800320c:	4b74      	ldr	r3, [pc, #464]	@ (80033e0 <createTrajectory+0x798>)
 800320e:	edd3 7a00 	vldr	s15, [r3]
 8003212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003216:	4b76      	ldr	r3, [pc, #472]	@ (80033f0 <createTrajectory+0x7a8>)
 8003218:	edc3 7a00 	vstr	s15, [r3]
 800321c:	e0cd      	b.n	80033ba <createTrajectory+0x772>
		else if((t_acc <= t) && (t < t_acc*2)){
 800321e:	4b6c      	ldr	r3, [pc, #432]	@ (80033d0 <createTrajectory+0x788>)
 8003220:	ed93 7a00 	vldr	s14, [r3]
 8003224:	4b69      	ldr	r3, [pc, #420]	@ (80033cc <createTrajectory+0x784>)
 8003226:	edd3 7a00 	vldr	s15, [r3]
 800322a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800322e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003232:	f200 80ad 	bhi.w	8003390 <createTrajectory+0x748>
 8003236:	4b66      	ldr	r3, [pc, #408]	@ (80033d0 <createTrajectory+0x788>)
 8003238:	edd3 7a00 	vldr	s15, [r3]
 800323c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003240:	4b62      	ldr	r3, [pc, #392]	@ (80033cc <createTrajectory+0x784>)
 8003242:	edd3 7a00 	vldr	s15, [r3]
 8003246:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800324a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324e:	f340 809f 	ble.w	8003390 <createTrajectory+0x748>
			ref_p = q_i + q_acc + q_d_acc*(t-t_acc) - 0.5*q_2d_max*(t-t_acc)*(t-t_acc)*dir;
 8003252:	4b62      	ldr	r3, [pc, #392]	@ (80033dc <createTrajectory+0x794>)
 8003254:	ed93 7a00 	vldr	s14, [r3]
 8003258:	4b66      	ldr	r3, [pc, #408]	@ (80033f4 <createTrajectory+0x7ac>)
 800325a:	edd3 7a00 	vldr	s15, [r3]
 800325e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003262:	4b5a      	ldr	r3, [pc, #360]	@ (80033cc <createTrajectory+0x784>)
 8003264:	edd3 6a00 	vldr	s13, [r3]
 8003268:	4b59      	ldr	r3, [pc, #356]	@ (80033d0 <createTrajectory+0x788>)
 800326a:	edd3 7a00 	vldr	s15, [r3]
 800326e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003272:	4b61      	ldr	r3, [pc, #388]	@ (80033f8 <createTrajectory+0x7b0>)
 8003274:	edd3 7a00 	vldr	s15, [r3]
 8003278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800327c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003280:	ee17 0a90 	vmov	r0, s15
 8003284:	f7fd f92c 	bl	80004e0 <__aeabi_f2d>
 8003288:	4604      	mov	r4, r0
 800328a:	460d      	mov	r5, r1
 800328c:	4b54      	ldr	r3, [pc, #336]	@ (80033e0 <createTrajectory+0x798>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd f925 	bl	80004e0 <__aeabi_f2d>
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	4b52      	ldr	r3, [pc, #328]	@ (80033e4 <createTrajectory+0x79c>)
 800329c:	f7fd f978 	bl	8000590 <__aeabi_dmul>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4690      	mov	r8, r2
 80032a6:	4699      	mov	r9, r3
 80032a8:	4b48      	ldr	r3, [pc, #288]	@ (80033cc <createTrajectory+0x784>)
 80032aa:	ed93 7a00 	vldr	s14, [r3]
 80032ae:	4b48      	ldr	r3, [pc, #288]	@ (80033d0 <createTrajectory+0x788>)
 80032b0:	edd3 7a00 	vldr	s15, [r3]
 80032b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032b8:	ee17 0a90 	vmov	r0, s15
 80032bc:	f7fd f910 	bl	80004e0 <__aeabi_f2d>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4640      	mov	r0, r8
 80032c6:	4649      	mov	r1, r9
 80032c8:	f7fd f962 	bl	8000590 <__aeabi_dmul>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4690      	mov	r8, r2
 80032d2:	4699      	mov	r9, r3
 80032d4:	4b3d      	ldr	r3, [pc, #244]	@ (80033cc <createTrajectory+0x784>)
 80032d6:	ed93 7a00 	vldr	s14, [r3]
 80032da:	4b3d      	ldr	r3, [pc, #244]	@ (80033d0 <createTrajectory+0x788>)
 80032dc:	edd3 7a00 	vldr	s15, [r3]
 80032e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e4:	ee17 0a90 	vmov	r0, s15
 80032e8:	f7fd f8fa 	bl	80004e0 <__aeabi_f2d>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4640      	mov	r0, r8
 80032f2:	4649      	mov	r1, r9
 80032f4:	f7fd f94c 	bl	8000590 <__aeabi_dmul>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4690      	mov	r8, r2
 80032fe:	4699      	mov	r9, r3
 8003300:	4b35      	ldr	r3, [pc, #212]	@ (80033d8 <createTrajectory+0x790>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd f8d9 	bl	80004bc <__aeabi_i2d>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4640      	mov	r0, r8
 8003310:	4649      	mov	r1, r9
 8003312:	f7fd f93d 	bl	8000590 <__aeabi_dmul>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4620      	mov	r0, r4
 800331c:	4629      	mov	r1, r5
 800331e:	f7fc ff7f 	bl	8000220 <__aeabi_dsub>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4610      	mov	r0, r2
 8003328:	4619      	mov	r1, r3
 800332a:	f7fd fc01 	bl	8000b30 <__aeabi_d2f>
 800332e:	4603      	mov	r3, r0
 8003330:	4a2d      	ldr	r2, [pc, #180]	@ (80033e8 <createTrajectory+0x7a0>)
 8003332:	6013      	str	r3, [r2, #0]
			ref_v = q_d_acc - q_2d_max*(t-t_acc)*dir;
 8003334:	4b30      	ldr	r3, [pc, #192]	@ (80033f8 <createTrajectory+0x7b0>)
 8003336:	ed93 7a00 	vldr	s14, [r3]
 800333a:	4b24      	ldr	r3, [pc, #144]	@ (80033cc <createTrajectory+0x784>)
 800333c:	edd3 6a00 	vldr	s13, [r3]
 8003340:	4b23      	ldr	r3, [pc, #140]	@ (80033d0 <createTrajectory+0x788>)
 8003342:	edd3 7a00 	vldr	s15, [r3]
 8003346:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800334a:	4b25      	ldr	r3, [pc, #148]	@ (80033e0 <createTrajectory+0x798>)
 800334c:	edd3 7a00 	vldr	s15, [r3]
 8003350:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003354:	4b20      	ldr	r3, [pc, #128]	@ (80033d8 <createTrajectory+0x790>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	ee07 3a90 	vmov	s15, r3
 800335c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003368:	4b20      	ldr	r3, [pc, #128]	@ (80033ec <createTrajectory+0x7a4>)
 800336a:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 800336e:	4b1c      	ldr	r3, [pc, #112]	@ (80033e0 <createTrajectory+0x798>)
 8003370:	edd3 7a00 	vldr	s15, [r3]
 8003374:	eeb1 7a67 	vneg.f32	s14, s15
 8003378:	4b17      	ldr	r3, [pc, #92]	@ (80033d8 <createTrajectory+0x790>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	ee07 3a90 	vmov	s15, r3
 8003380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003388:	4b19      	ldr	r3, [pc, #100]	@ (80033f0 <createTrajectory+0x7a8>)
 800338a:	edc3 7a00 	vstr	s15, [r3]
 800338e:	e014      	b.n	80033ba <createTrajectory+0x772>
			calmode = 3;
 8003390:	4b0b      	ldr	r3, [pc, #44]	@ (80033c0 <createTrajectory+0x778>)
 8003392:	2203      	movs	r2, #3
 8003394:	701a      	strb	r2, [r3, #0]
}
 8003396:	e010      	b.n	80033ba <createTrajectory+0x772>
	else if(calmode == 3){ //stop
 8003398:	4b09      	ldr	r3, [pc, #36]	@ (80033c0 <createTrajectory+0x778>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b03      	cmp	r3, #3
 800339e:	d10c      	bne.n	80033ba <createTrajectory+0x772>
		ref_p = q_f;
 80033a0:	4b16      	ldr	r3, [pc, #88]	@ (80033fc <createTrajectory+0x7b4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a10      	ldr	r2, [pc, #64]	@ (80033e8 <createTrajectory+0x7a0>)
 80033a6:	6013      	str	r3, [r2, #0]
		ref_v = 0;
 80033a8:	4b10      	ldr	r3, [pc, #64]	@ (80033ec <createTrajectory+0x7a4>)
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
		ref_a = 0;
 80033b0:	4b0f      	ldr	r3, [pc, #60]	@ (80033f0 <createTrajectory+0x7a8>)
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
}
 80033b8:	e7ff      	b.n	80033ba <createTrajectory+0x772>
 80033ba:	bf00      	nop
 80033bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033c0:	20000210 	.word	0x20000210
 80033c4:	20000a68 	.word	0x20000a68
 80033c8:	49742400 	.word	0x49742400
 80033cc:	20000a70 	.word	0x20000a70
 80033d0:	20000a50 	.word	0x20000a50
 80033d4:	20000a30 	.word	0x20000a30
 80033d8:	20000214 	.word	0x20000214
 80033dc:	20000a38 	.word	0x20000a38
 80033e0:	2000020c 	.word	0x2000020c
 80033e4:	3fe00000 	.word	0x3fe00000
 80033e8:	20000a40 	.word	0x20000a40
 80033ec:	20000a44 	.word	0x20000a44
 80033f0:	20000a48 	.word	0x20000a48
 80033f4:	20000a54 	.word	0x20000a54
 80033f8:	20000a60 	.word	0x20000a60
 80033fc:	20000a34 	.word	0x20000a34

08003400 <DriveMotor>:

//--------------------------Drive Motor----------------//

void DriveMotor(){
 8003400:	b598      	push	{r3, r4, r7, lr}
 8003402:	af00      	add	r7, sp, #0
//		S_down_savestate = S_down;
//		mode_savestate = mode;
//		timestamp_savestate = micros() + 50000;
//	}
	//PWM Motor
	duty_cycle = (fabs(Vin)*100)/24;
 8003404:	4b26      	ldr	r3, [pc, #152]	@ (80034a0 <DriveMotor+0xa0>)
 8003406:	edd3 7a00 	vldr	s15, [r3]
 800340a:	eef0 7ae7 	vabs.f32	s15, s15
 800340e:	ee17 0a90 	vmov	r0, s15
 8003412:	f7fd f865 	bl	80004e0 <__aeabi_f2d>
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	4b22      	ldr	r3, [pc, #136]	@ (80034a4 <DriveMotor+0xa4>)
 800341c:	f7fd f8b8 	bl	8000590 <__aeabi_dmul>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	4b1e      	ldr	r3, [pc, #120]	@ (80034a8 <DriveMotor+0xa8>)
 800342e:	f7fd f9d9 	bl	80007e4 <__aeabi_ddiv>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4610      	mov	r0, r2
 8003438:	4619      	mov	r1, r3
 800343a:	f7fd fb79 	bl	8000b30 <__aeabi_d2f>
 800343e:	4603      	mov	r3, r0
 8003440:	4a1a      	ldr	r2, [pc, #104]	@ (80034ac <DriveMotor+0xac>)
 8003442:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycle*9.99);
 8003444:	4b19      	ldr	r3, [pc, #100]	@ (80034ac <DriveMotor+0xac>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7fd f849 	bl	80004e0 <__aeabi_f2d>
 800344e:	a312      	add	r3, pc, #72	@ (adr r3, 8003498 <DriveMotor+0x98>)
 8003450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003454:	f7fd f89c 	bl	8000590 <__aeabi_dmul>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4914      	ldr	r1, [pc, #80]	@ (80034b0 <DriveMotor+0xb0>)
 800345e:	680c      	ldr	r4, [r1, #0]
 8003460:	4610      	mov	r0, r2
 8003462:	4619      	mov	r1, r3
 8003464:	f7fd fb44 	bl	8000af0 <__aeabi_d2uiz>
 8003468:	4603      	mov	r3, r0
 800346a:	6363      	str	r3, [r4, #52]	@ 0x34

	//Control Motor Direction
	if(Vin < 0){
 800346c:	4b0c      	ldr	r3, [pc, #48]	@ (80034a0 <DriveMotor+0xa0>)
 800346e:	edd3 7a00 	vldr	s15, [r3]
 8003472:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347a:	d505      	bpl.n	8003488 <DriveMotor+0x88>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 800347c:	2201      	movs	r2, #1
 800347e:	2120      	movs	r1, #32
 8003480:	480c      	ldr	r0, [pc, #48]	@ (80034b4 <DriveMotor+0xb4>)
 8003482:	f003 fb59 	bl	8006b38 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
	}
//	Vin_old = Vin;
}
 8003486:	e004      	b.n	8003492 <DriveMotor+0x92>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 8003488:	2200      	movs	r2, #0
 800348a:	2120      	movs	r1, #32
 800348c:	4809      	ldr	r0, [pc, #36]	@ (80034b4 <DriveMotor+0xb4>)
 800348e:	f003 fb53 	bl	8006b38 <HAL_GPIO_WritePin>
}
 8003492:	bf00      	nop
 8003494:	bd98      	pop	{r3, r4, r7, pc}
 8003496:	bf00      	nop
 8003498:	47ae147b 	.word	0x47ae147b
 800349c:	4023fae1 	.word	0x4023fae1
 80034a0:	20000a28 	.word	0x20000a28
 80034a4:	40590000 	.word	0x40590000
 80034a8:	40380000 	.word	0x40380000
 80034ac:	20000204 	.word	0x20000204
 80034b0:	20000440 	.word	0x20000440
 80034b4:	48000800 	.word	0x48000800

080034b8 <SoftwareLimit>:

void SoftwareLimit(){
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
	if(S_top == 1 && Vin >= -2){
 80034bc:	4b26      	ldr	r3, [pc, #152]	@ (8003558 <SoftwareLimit+0xa0>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d10e      	bne.n	80034e2 <SoftwareLimit+0x2a>
 80034c4:	4b25      	ldr	r3, [pc, #148]	@ (800355c <SoftwareLimit+0xa4>)
 80034c6:	edd3 7a00 	vldr	s15, [r3]
 80034ca:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80034ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d6:	db04      	blt.n	80034e2 <SoftwareLimit+0x2a>
		Vin = 0;
 80034d8:	4b20      	ldr	r3, [pc, #128]	@ (800355c <SoftwareLimit+0xa4>)
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	e010      	b.n	8003504 <SoftwareLimit+0x4c>
	}
	else if(S_top == 1 && Vin < -2){
 80034e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003558 <SoftwareLimit+0xa0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d10c      	bne.n	8003504 <SoftwareLimit+0x4c>
 80034ea:	4b1c      	ldr	r3, [pc, #112]	@ (800355c <SoftwareLimit+0xa4>)
 80034ec:	edd3 7a00 	vldr	s15, [r3]
 80034f0:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80034f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fc:	d502      	bpl.n	8003504 <SoftwareLimit+0x4c>
		S_top = 0;
 80034fe:	4b16      	ldr	r3, [pc, #88]	@ (8003558 <SoftwareLimit+0xa0>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
	}

	if(S_down == 1 && Vin <= 2){
 8003504:	4b16      	ldr	r3, [pc, #88]	@ (8003560 <SoftwareLimit+0xa8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d10e      	bne.n	800352a <SoftwareLimit+0x72>
 800350c:	4b13      	ldr	r3, [pc, #76]	@ (800355c <SoftwareLimit+0xa4>)
 800350e:	edd3 7a00 	vldr	s15, [r3]
 8003512:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800351a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351e:	d804      	bhi.n	800352a <SoftwareLimit+0x72>
		Vin = 0;
 8003520:	4b0e      	ldr	r3, [pc, #56]	@ (800355c <SoftwareLimit+0xa4>)
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
	}
	else if(S_down == 1 && Vin > 2){
		S_down = 0;
	}

}
 8003528:	e011      	b.n	800354e <SoftwareLimit+0x96>
	else if(S_down == 1 && Vin > 2){
 800352a:	4b0d      	ldr	r3, [pc, #52]	@ (8003560 <SoftwareLimit+0xa8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d10d      	bne.n	800354e <SoftwareLimit+0x96>
 8003532:	4b0a      	ldr	r3, [pc, #40]	@ (800355c <SoftwareLimit+0xa4>)
 8003534:	edd3 7a00 	vldr	s15, [r3]
 8003538:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800353c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003544:	dc00      	bgt.n	8003548 <SoftwareLimit+0x90>
}
 8003546:	e002      	b.n	800354e <SoftwareLimit+0x96>
		S_down = 0;
 8003548:	4b05      	ldr	r3, [pc, #20]	@ (8003560 <SoftwareLimit+0xa8>)
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
}
 800354e:	bf00      	nop
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	20000aec 	.word	0x20000aec
 800355c:	20000a28 	.word	0x20000a28
 8003560:	20000af0 	.word	0x20000af0
 8003564:	00000000 	.word	0x00000000

08003568 <JoystickInput>:


//------------------------------------Joy---------------------------------------//

void JoystickInput(){
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	af00      	add	r7, sp, #0
	//Control y-axis by joy
	Vin = (float)(ADCBuffer[1]-1850)*24/2048; //0->24V
 800356c:	4b2a      	ldr	r3, [pc, #168]	@ (8003618 <JoystickInput+0xb0>)
 800356e:	885b      	ldrh	r3, [r3, #2]
 8003570:	f2a3 733a 	subw	r3, r3, #1850	@ 0x73a
 8003574:	ee07 3a90 	vmov	s15, r3
 8003578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800357c:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8003580:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003584:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800361c <JoystickInput+0xb4>
 8003588:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800358c:	4b24      	ldr	r3, [pc, #144]	@ (8003620 <JoystickInput+0xb8>)
 800358e:	edc3 7a00 	vstr	s15, [r3]
	if(Vin > -3 && Vin < 3){
 8003592:	4b23      	ldr	r3, [pc, #140]	@ (8003620 <JoystickInput+0xb8>)
 8003594:	edd3 7a00 	vldr	s15, [r3]
 8003598:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 800359c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a4:	dd0d      	ble.n	80035c2 <JoystickInput+0x5a>
 80035a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003620 <JoystickInput+0xb8>)
 80035a8:	edd3 7a00 	vldr	s15, [r3]
 80035ac:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80035b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b8:	d503      	bpl.n	80035c2 <JoystickInput+0x5a>
		Vin = 0;
 80035ba:	4b19      	ldr	r3, [pc, #100]	@ (8003620 <JoystickInput+0xb8>)
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
	}

	//Control x-axis by joy
	x_position += ((ADCBuffer[0]-2048)*0.005);
 80035c2:	4b18      	ldr	r3, [pc, #96]	@ (8003624 <JoystickInput+0xbc>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fc ff8a 	bl	80004e0 <__aeabi_f2d>
 80035cc:	4604      	mov	r4, r0
 80035ce:	460d      	mov	r5, r1
 80035d0:	4b11      	ldr	r3, [pc, #68]	@ (8003618 <JoystickInput+0xb0>)
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fc ff6f 	bl	80004bc <__aeabi_i2d>
 80035de:	a30c      	add	r3, pc, #48	@ (adr r3, 8003610 <JoystickInput+0xa8>)
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f7fc ffd4 	bl	8000590 <__aeabi_dmul>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4620      	mov	r0, r4
 80035ee:	4629      	mov	r1, r5
 80035f0:	f7fc fe18 	bl	8000224 <__adddf3>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4610      	mov	r0, r2
 80035fa:	4619      	mov	r1, r3
 80035fc:	f7fd fa98 	bl	8000b30 <__aeabi_d2f>
 8003600:	4603      	mov	r3, r0
 8003602:	4a08      	ldr	r2, [pc, #32]	@ (8003624 <JoystickInput+0xbc>)
 8003604:	6013      	str	r3, [r2, #0]
}
 8003606:	bf00      	nop
 8003608:	bdb0      	pop	{r4, r5, r7, pc}
 800360a:	bf00      	nop
 800360c:	f3af 8000 	nop.w
 8003610:	47ae147b 	.word	0x47ae147b
 8003614:	3f747ae1 	.word	0x3f747ae1
 8003618:	20000a10 	.word	0x20000a10
 800361c:	45000000 	.word	0x45000000
 8003620:	20000a28 	.word	0x20000a28
 8003624:	20000a14 	.word	0x20000a14

08003628 <button_up_down_input>:

void button_up_down_input(){
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
	//check button up
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 1){
 800362c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003630:	4844      	ldr	r0, [pc, #272]	@ (8003744 <button_up_down_input+0x11c>)
 8003632:	f003 fa69 	bl	8006b08 <HAL_GPIO_ReadPin>
 8003636:	4603      	mov	r3, r0
 8003638:	2b01      	cmp	r3, #1
 800363a:	d113      	bne.n	8003664 <button_up_down_input+0x3c>
		set_manual_point = QEIdata.linearPos + 10; //stem 10 mm
 800363c:	4b42      	ldr	r3, [pc, #264]	@ (8003748 <button_up_down_input+0x120>)
 800363e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003642:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003646:	ee77 7a87 	vadd.f32	s15, s15, s14
 800364a:	4b40      	ldr	r3, [pc, #256]	@ (800374c <button_up_down_input+0x124>)
 800364c:	edc3 7a00 	vstr	s15, [r3]
		check_up = 1;
 8003650:	4b3f      	ldr	r3, [pc, #252]	@ (8003750 <button_up_down_input+0x128>)
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]
		B_up = 1;
 8003656:	4b3f      	ldr	r3, [pc, #252]	@ (8003754 <button_up_down_input+0x12c>)
 8003658:	2201      	movs	r2, #1
 800365a:	701a      	strb	r2, [r3, #0]
		check_state_B = 1;
 800365c:	4b3e      	ldr	r3, [pc, #248]	@ (8003758 <button_up_down_input+0x130>)
 800365e:	2201      	movs	r2, #1
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e005      	b.n	8003670 <button_up_down_input+0x48>
	}
	else{
		B_up = 0;
 8003664:	4b3b      	ldr	r3, [pc, #236]	@ (8003754 <button_up_down_input+0x12c>)
 8003666:	2200      	movs	r2, #0
 8003668:	701a      	strb	r2, [r3, #0]
		check_state_B = 2;
 800366a:	4b3b      	ldr	r3, [pc, #236]	@ (8003758 <button_up_down_input+0x130>)
 800366c:	2202      	movs	r2, #2
 800366e:	601a      	str	r2, [r3, #0]
	}
	if(QEIdata.linearPos < set_manual_point && check_up == 1){
 8003670:	4b35      	ldr	r3, [pc, #212]	@ (8003748 <button_up_down_input+0x120>)
 8003672:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003676:	4b35      	ldr	r3, [pc, #212]	@ (800374c <button_up_down_input+0x124>)
 8003678:	edd3 7a00 	vldr	s15, [r3]
 800367c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003684:	d50b      	bpl.n	800369e <button_up_down_input+0x76>
 8003686:	4b32      	ldr	r3, [pc, #200]	@ (8003750 <button_up_down_input+0x128>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d107      	bne.n	800369e <button_up_down_input+0x76>
		Vin = 4;
 800368e:	4b33      	ldr	r3, [pc, #204]	@ (800375c <button_up_down_input+0x134>)
 8003690:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8003694:	601a      	str	r2, [r3, #0]
		check_state_B = 3;
 8003696:	4b30      	ldr	r3, [pc, #192]	@ (8003758 <button_up_down_input+0x130>)
 8003698:	2203      	movs	r2, #3
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e005      	b.n	80036aa <button_up_down_input+0x82>
	}
	else{
		check_up = 0;
 800369e:	4b2c      	ldr	r3, [pc, #176]	@ (8003750 <button_up_down_input+0x128>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	701a      	strb	r2, [r3, #0]
		check_state_B = 4;
 80036a4:	4b2c      	ldr	r3, [pc, #176]	@ (8003758 <button_up_down_input+0x130>)
 80036a6:	2204      	movs	r2, #4
 80036a8:	601a      	str	r2, [r3, #0]
	}

	//check button down
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == 1){
 80036aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80036ae:	4825      	ldr	r0, [pc, #148]	@ (8003744 <button_up_down_input+0x11c>)
 80036b0:	f003 fa2a 	bl	8006b08 <HAL_GPIO_ReadPin>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d113      	bne.n	80036e2 <button_up_down_input+0xba>
		set_manual_point = QEIdata.linearPos - 10;
 80036ba:	4b23      	ldr	r3, [pc, #140]	@ (8003748 <button_up_down_input+0x120>)
 80036bc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80036c0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80036c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036c8:	4b20      	ldr	r3, [pc, #128]	@ (800374c <button_up_down_input+0x124>)
 80036ca:	edc3 7a00 	vstr	s15, [r3]
		check_down = 1;
 80036ce:	4b24      	ldr	r3, [pc, #144]	@ (8003760 <button_up_down_input+0x138>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	701a      	strb	r2, [r3, #0]
		B_down = 1;
 80036d4:	4b23      	ldr	r3, [pc, #140]	@ (8003764 <button_up_down_input+0x13c>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
		check_state_B = 5;
 80036da:	4b1f      	ldr	r3, [pc, #124]	@ (8003758 <button_up_down_input+0x130>)
 80036dc:	2205      	movs	r2, #5
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	e005      	b.n	80036ee <button_up_down_input+0xc6>
	}
	else{
		B_down = 0;
 80036e2:	4b20      	ldr	r3, [pc, #128]	@ (8003764 <button_up_down_input+0x13c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
		check_state_B = 6;
 80036e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003758 <button_up_down_input+0x130>)
 80036ea:	2206      	movs	r2, #6
 80036ec:	601a      	str	r2, [r3, #0]
	}
	if(QEIdata.linearPos > set_manual_point && check_down == 1){
 80036ee:	4b16      	ldr	r3, [pc, #88]	@ (8003748 <button_up_down_input+0x120>)
 80036f0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80036f4:	4b15      	ldr	r3, [pc, #84]	@ (800374c <button_up_down_input+0x124>)
 80036f6:	edd3 7a00 	vldr	s15, [r3]
 80036fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003702:	dd0a      	ble.n	800371a <button_up_down_input+0xf2>
 8003704:	4b16      	ldr	r3, [pc, #88]	@ (8003760 <button_up_down_input+0x138>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d106      	bne.n	800371a <button_up_down_input+0xf2>
		Vin = -3;
 800370c:	4b13      	ldr	r3, [pc, #76]	@ (800375c <button_up_down_input+0x134>)
 800370e:	4a16      	ldr	r2, [pc, #88]	@ (8003768 <button_up_down_input+0x140>)
 8003710:	601a      	str	r2, [r3, #0]
		check_state_B = 7;
 8003712:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <button_up_down_input+0x130>)
 8003714:	2207      	movs	r2, #7
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	e005      	b.n	8003726 <button_up_down_input+0xfe>
	}
	else{
		check_down = 0;
 800371a:	4b11      	ldr	r3, [pc, #68]	@ (8003760 <button_up_down_input+0x138>)
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
		check_state_B = 8;
 8003720:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <button_up_down_input+0x130>)
 8003722:	2208      	movs	r2, #8
 8003724:	601a      	str	r2, [r3, #0]
	}

	if(check_up == 0 && check_down == 0){
 8003726:	4b0a      	ldr	r3, [pc, #40]	@ (8003750 <button_up_down_input+0x128>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d107      	bne.n	800373e <button_up_down_input+0x116>
 800372e:	4b0c      	ldr	r3, [pc, #48]	@ (8003760 <button_up_down_input+0x138>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d103      	bne.n	800373e <button_up_down_input+0x116>
		Vin = 0;
 8003736:	4b09      	ldr	r3, [pc, #36]	@ (800375c <button_up_down_input+0x134>)
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
	}
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	48000800 	.word	0x48000800
 8003748:	200009c8 	.word	0x200009c8
 800374c:	20000a18 	.word	0x20000a18
 8003750:	20000a1c 	.word	0x20000a1c
 8003754:	20000a78 	.word	0x20000a78
 8003758:	20000afc 	.word	0x20000afc
 800375c:	20000a28 	.word	0x20000a28
 8003760:	20000a1d 	.word	0x20000a1d
 8003764:	20000a79 	.word	0x20000a79
 8003768:	c0400000 	.word	0xc0400000

0800376c <button_reset_input>:

void button_reset_input(){
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
	//check button reset
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1 || (Home_state_triger == 0 && set_Home_state == 1) || emergency_reset == 1){
 8003770:	2104      	movs	r1, #4
 8003772:	4834      	ldr	r0, [pc, #208]	@ (8003844 <button_reset_input+0xd8>)
 8003774:	f003 f9c8 	bl	8006b08 <HAL_GPIO_ReadPin>
 8003778:	4603      	mov	r3, r0
 800377a:	2b01      	cmp	r3, #1
 800377c:	d00b      	beq.n	8003796 <button_reset_input+0x2a>
 800377e:	4b32      	ldr	r3, [pc, #200]	@ (8003848 <button_reset_input+0xdc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <button_reset_input+0x22>
 8003786:	4b31      	ldr	r3, [pc, #196]	@ (800384c <button_reset_input+0xe0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d003      	beq.n	8003796 <button_reset_input+0x2a>
 800378e:	4b30      	ldr	r3, [pc, #192]	@ (8003850 <button_reset_input+0xe4>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d14f      	bne.n	8003836 <button_reset_input+0xca>
		B_reset = 1;
 8003796:	4b2f      	ldr	r3, [pc, #188]	@ (8003854 <button_reset_input+0xe8>)
 8003798:	2201      	movs	r2, #1
 800379a:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 800379c:	e008      	b.n	80037b0 <button_reset_input+0x44>
			Modbus_Protocal_Worker();
 800379e:	f7fd fd69 	bl	8001274 <Modbus_Protocal_Worker>
			Vin = -3.5;
 80037a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003858 <button_reset_input+0xec>)
 80037a4:	4a2d      	ldr	r2, [pc, #180]	@ (800385c <button_reset_input+0xf0>)
 80037a6:	601a      	str	r2, [r3, #0]
			//software limit
			SoftwareLimit();
 80037a8:	f7ff fe86 	bl	80034b8 <SoftwareLimit>
			//Drive Motor which PWM
			DriveMotor();
 80037ac:	f7ff fe28 	bl	8003400 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 80037b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037b4:	482a      	ldr	r0, [pc, #168]	@ (8003860 <button_reset_input+0xf4>)
 80037b6:	f003 f9a7 	bl	8006b08 <HAL_GPIO_ReadPin>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0ee      	beq.n	800379e <button_reset_input+0x32>
		}

		Vin = 2.1;
 80037c0:	4b25      	ldr	r3, [pc, #148]	@ (8003858 <button_reset_input+0xec>)
 80037c2:	4a28      	ldr	r2, [pc, #160]	@ (8003864 <button_reset_input+0xf8>)
 80037c4:	601a      	str	r2, [r3, #0]
		DriveMotor();
 80037c6:	f7ff fe1b 	bl	8003400 <DriveMotor>
		HAL_Delay(1000);
 80037ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80037ce:	f001 f851 	bl	8004874 <HAL_Delay>
		SoftwareLimit();
 80037d2:	f7ff fe71 	bl	80034b8 <SoftwareLimit>

		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 80037d6:	e008      	b.n	80037ea <button_reset_input+0x7e>
			Modbus_Protocal_Worker();
 80037d8:	f7fd fd4c 	bl	8001274 <Modbus_Protocal_Worker>
			Vin = -1.3;
 80037dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003858 <button_reset_input+0xec>)
 80037de:	4a22      	ldr	r2, [pc, #136]	@ (8003868 <button_reset_input+0xfc>)
 80037e0:	601a      	str	r2, [r3, #0]
			//software limit
			SoftwareLimit();
 80037e2:	f7ff fe69 	bl	80034b8 <SoftwareLimit>
			//Drive Motor which PWM
			DriveMotor();
 80037e6:	f7ff fe0b 	bl	8003400 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 80037ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037ee:	481c      	ldr	r0, [pc, #112]	@ (8003860 <button_reset_input+0xf4>)
 80037f0:	f003 f98a 	bl	8006b08 <HAL_GPIO_ReadPin>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0ee      	beq.n	80037d8 <button_reset_input+0x6c>
		}
		Vin = 0;
 80037fa:	4b17      	ldr	r3, [pc, #92]	@ (8003858 <button_reset_input+0xec>)
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim2, 0); //set position to 0
 8003802:	4b1a      	ldr	r3, [pc, #104]	@ (800386c <button_reset_input+0x100>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	625a      	str	r2, [r3, #36]	@ 0x24

		if(Home_state_triger == 0 && set_Home_state == 1){
 800380a:	4b0f      	ldr	r3, [pc, #60]	@ (8003848 <button_reset_input+0xdc>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <button_reset_input+0xba>
 8003812:	4b0e      	ldr	r3, [pc, #56]	@ (800384c <button_reset_input+0xe0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d105      	bne.n	8003826 <button_reset_input+0xba>
			Home_state_triger = 1;
 800381a:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <button_reset_input+0xdc>)
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]
			B_reset = 0;
 8003820:	4b0c      	ldr	r3, [pc, #48]	@ (8003854 <button_reset_input+0xe8>)
 8003822:	2200      	movs	r2, #0
 8003824:	701a      	strb	r2, [r3, #0]
		}

		if(emergency_reset == 1){
 8003826:	4b0a      	ldr	r3, [pc, #40]	@ (8003850 <button_reset_input+0xe4>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <button_reset_input+0xd2>
			emergency_reset = 0;
 800382e:	4b08      	ldr	r3, [pc, #32]	@ (8003850 <button_reset_input+0xe4>)
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
		if(emergency_reset == 1){
 8003834:	e003      	b.n	800383e <button_reset_input+0xd2>

		}
	}
	else{
		B_reset = 0;
 8003836:	4b07      	ldr	r3, [pc, #28]	@ (8003854 <button_reset_input+0xe8>)
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
	}
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	48000c00 	.word	0x48000c00
 8003848:	2000118c 	.word	0x2000118c
 800384c:	20001188 	.word	0x20001188
 8003850:	20000a7c 	.word	0x20000a7c
 8003854:	20000a7a 	.word	0x20000a7a
 8003858:	20000a28 	.word	0x20000a28
 800385c:	c0600000 	.word	0xc0600000
 8003860:	48000800 	.word	0x48000800
 8003864:	40066666 	.word	0x40066666
 8003868:	bfa66666 	.word	0xbfa66666
 800386c:	20000374 	.word	0x20000374

08003870 <button_save_position>:

void button_save_position(){
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && B_save == 0 && fabs(QEIdata.linearPos-last_shelf_save) > 20){
 8003874:	2180      	movs	r1, #128	@ 0x80
 8003876:	481c      	ldr	r0, [pc, #112]	@ (80038e8 <button_save_position+0x78>)
 8003878:	f003 f946 	bl	8006b08 <HAL_GPIO_ReadPin>
 800387c:	4603      	mov	r3, r0
 800387e:	2b01      	cmp	r3, #1
 8003880:	d12b      	bne.n	80038da <button_save_position+0x6a>
 8003882:	4b1a      	ldr	r3, [pc, #104]	@ (80038ec <button_save_position+0x7c>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d127      	bne.n	80038da <button_save_position+0x6a>
 800388a:	4b19      	ldr	r3, [pc, #100]	@ (80038f0 <button_save_position+0x80>)
 800388c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003890:	4b18      	ldr	r3, [pc, #96]	@ (80038f4 <button_save_position+0x84>)
 8003892:	edd3 7a00 	vldr	s15, [r3]
 8003896:	ee77 7a67 	vsub.f32	s15, s14, s15
 800389a:	eef0 7ae7 	vabs.f32	s15, s15
 800389e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80038a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038aa:	dd16      	ble.n	80038da <button_save_position+0x6a>
		B_save = 1;
 80038ac:	4b0f      	ldr	r3, [pc, #60]	@ (80038ec <button_save_position+0x7c>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	701a      	strb	r2, [r3, #0]
		count_save += 1;
 80038b2:	4b11      	ldr	r3, [pc, #68]	@ (80038f8 <button_save_position+0x88>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	3301      	adds	r3, #1
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	4b0f      	ldr	r3, [pc, #60]	@ (80038f8 <button_save_position+0x88>)
 80038bc:	701a      	strb	r2, [r3, #0]
		shelves_pos[count_save] = QEIdata.linearPos;
 80038be:	4b0e      	ldr	r3, [pc, #56]	@ (80038f8 <button_save_position+0x88>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	4b0a      	ldr	r3, [pc, #40]	@ (80038f0 <button_save_position+0x80>)
 80038c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038c8:	490c      	ldr	r1, [pc, #48]	@ (80038fc <button_save_position+0x8c>)
 80038ca:	0083      	lsls	r3, r0, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	601a      	str	r2, [r3, #0]
		last_shelf_save =  QEIdata.linearPos;
 80038d0:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <button_save_position+0x80>)
 80038d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d4:	4a07      	ldr	r2, [pc, #28]	@ (80038f4 <button_save_position+0x84>)
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	e003      	b.n	80038e2 <button_save_position+0x72>
	}
	else{
		B_save = 0;
 80038da:	4b04      	ldr	r3, [pc, #16]	@ (80038ec <button_save_position+0x7c>)
 80038dc:	2200      	movs	r2, #0
 80038de:	701a      	strb	r2, [r3, #0]
	}
}
 80038e0:	bf00      	nop
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	48000400 	.word	0x48000400
 80038ec:	20000a7b 	.word	0x20000a7b
 80038f0:	200009c8 	.word	0x200009c8
 80038f4:	20000a98 	.word	0x20000a98
 80038f8:	20000a7d 	.word	0x20000a7d
 80038fc:	20000a80 	.word	0x20000a80

08003900 <Heartbeat>:

//-------------------------------------------------//
//-------------------------MODBUS FUNCTIONS--------------------------//
void Heartbeat(){
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16 = 22881;
 8003904:	4b04      	ldr	r3, [pc, #16]	@ (8003918 <Heartbeat+0x18>)
 8003906:	f645 1261 	movw	r2, #22881	@ 0x5961
 800390a:	801a      	strh	r2, [r3, #0]
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	20000fd8 	.word	0x20000fd8

0800391c <Routine>:

void Routine(){
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0){
 8003920:	2110      	movs	r1, #16
 8003922:	4835      	ldr	r0, [pc, #212]	@ (80039f8 <Routine+0xdc>)
 8003924:	f003 f8f0 	bl	8006b08 <HAL_GPIO_ReadPin>
 8003928:	4603      	mov	r3, r0
 800392a:	2b01      	cmp	r3, #1
 800392c:	d10a      	bne.n	8003944 <Routine+0x28>
 800392e:	2120      	movs	r1, #32
 8003930:	4831      	ldr	r0, [pc, #196]	@ (80039f8 <Routine+0xdc>)
 8003932:	f003 f8e9 	bl	8006b08 <HAL_GPIO_ReadPin>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d103      	bne.n	8003944 <Routine+0x28>
			gripper_status = 0;
 800393c:	4b2f      	ldr	r3, [pc, #188]	@ (80039fc <Routine+0xe0>)
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	e010      	b.n	8003966 <Routine+0x4a>
		}
		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1){
 8003944:	2110      	movs	r1, #16
 8003946:	482c      	ldr	r0, [pc, #176]	@ (80039f8 <Routine+0xdc>)
 8003948:	f003 f8de 	bl	8006b08 <HAL_GPIO_ReadPin>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <Routine+0x4a>
 8003952:	2120      	movs	r1, #32
 8003954:	4828      	ldr	r0, [pc, #160]	@ (80039f8 <Routine+0xdc>)
 8003956:	f003 f8d7 	bl	8006b08 <HAL_GPIO_ReadPin>
 800395a:	4603      	mov	r3, r0
 800395c:	2b01      	cmp	r3, #1
 800395e:	d102      	bne.n	8003966 <Routine+0x4a>
			gripper_status = 1;
 8003960:	4b26      	ldr	r3, [pc, #152]	@ (80039fc <Routine+0xe0>)
 8003962:	2201      	movs	r2, #1
 8003964:	601a      	str	r2, [r3, #0]
		}
		if (gripper_status == 0 ) // not suck  in
 8003966:	4b25      	ldr	r3, [pc, #148]	@ (80039fc <Routine+0xe0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d106      	bne.n	800397c <Routine+0x60>
		{
			registerFrame[0x04].U16 = 0b0000;
 800396e:	4b24      	ldr	r3, [pc, #144]	@ (8003a00 <Routine+0xe4>)
 8003970:	2200      	movs	r2, #0
 8003972:	811a      	strh	r2, [r3, #8]
			registerFrame[0x04].U16 = 0b0001;
 8003974:	4b22      	ldr	r3, [pc, #136]	@ (8003a00 <Routine+0xe4>)
 8003976:	2201      	movs	r2, #1
 8003978:	811a      	strh	r2, [r3, #8]
 800397a:	e009      	b.n	8003990 <Routine+0x74>
		}
		else if (gripper_status == 1) // suck in
 800397c:	4b1f      	ldr	r3, [pc, #124]	@ (80039fc <Routine+0xe0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d105      	bne.n	8003990 <Routine+0x74>
		{
			registerFrame[0x04].U16 = 0b0000;
 8003984:	4b1e      	ldr	r3, [pc, #120]	@ (8003a00 <Routine+0xe4>)
 8003986:	2200      	movs	r2, #0
 8003988:	811a      	strh	r2, [r3, #8]
			registerFrame[0x04].U16 = 0b0010;
 800398a:	4b1d      	ldr	r3, [pc, #116]	@ (8003a00 <Routine+0xe4>)
 800398c:	2202      	movs	r2, #2
 800398e:	811a      	strh	r2, [r3, #8]
		}
		registerFrame[0x10].U16 = Moving_status;
 8003990:	4b1c      	ldr	r3, [pc, #112]	@ (8003a04 <Routine+0xe8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	b29a      	uxth	r2, r3
 8003996:	4b1a      	ldr	r3, [pc, #104]	@ (8003a00 <Routine+0xe4>)
 8003998:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = QEIdata.linearPos*10;
 800399a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a08 <Routine+0xec>)
 800399c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80039a0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80039a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ac:	ee17 3a90 	vmov	r3, s15
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	4b13      	ldr	r3, [pc, #76]	@ (8003a00 <Routine+0xe4>)
 80039b4:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[0x12].U16 = QEIdata.linearVel;
 80039b6:	4b14      	ldr	r3, [pc, #80]	@ (8003a08 <Routine+0xec>)
 80039b8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80039bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039c0:	ee17 3a90 	vmov	r3, s15
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003a00 <Routine+0xe4>)
 80039c8:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[0x13].U16 = QEIdata.linearAcc;
 80039ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003a08 <Routine+0xec>)
 80039cc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80039d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039d4:	ee17 3a90 	vmov	r3, s15
 80039d8:	b29a      	uxth	r2, r3
 80039da:	4b09      	ldr	r3, [pc, #36]	@ (8003a00 <Routine+0xe4>)
 80039dc:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[0x40].U16 = x_position;
 80039de:	4b0b      	ldr	r3, [pc, #44]	@ (8003a0c <Routine+0xf0>)
 80039e0:	edd3 7a00 	vldr	s15, [r3]
 80039e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039e8:	ee17 3a90 	vmov	r3, s15
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	4b04      	ldr	r3, [pc, #16]	@ (8003a00 <Routine+0xe4>)
 80039f0:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
}
 80039f4:	bf00      	nop
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	48000400 	.word	0x48000400
 80039fc:	2000116c 	.word	0x2000116c
 8003a00:	20000fd8 	.word	0x20000fd8
 8003a04:	20001190 	.word	0x20001190
 8003a08:	200009c8 	.word	0x200009c8
 8003a0c:	20000a14 	.word	0x20000a14

08003a10 <check_vaccum_status>:

void check_vaccum_status()
{
 8003a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
	check_state = 1;
 8003a18:	493e      	ldr	r1, [pc, #248]	@ (8003b14 <check_vaccum_status+0x104>)
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	6008      	str	r0, [r1, #0]
	if(registerFrame[0x02].U16 == 0b0000){ // not suck  in
 8003a1e:	493e      	ldr	r1, [pc, #248]	@ (8003b18 <check_vaccum_status+0x108>)
 8003a20:	8889      	ldrh	r1, [r1, #4]
 8003a22:	2900      	cmp	r1, #0
 8003a24:	d132      	bne.n	8003a8c <check_vaccum_status+0x7c>

		vaccum_status = 0;
 8003a26:	493d      	ldr	r1, [pc, #244]	@ (8003b1c <check_vaccum_status+0x10c>)
 8003a28:	2000      	movs	r0, #0
 8003a2a:	6008      	str	r0, [r1, #0]
		if (prev_vac_savestate != vaccum_status)
 8003a2c:	493b      	ldr	r1, [pc, #236]	@ (8003b1c <check_vaccum_status+0x10c>)
 8003a2e:	6809      	ldr	r1, [r1, #0]
 8003a30:	17c8      	asrs	r0, r1, #31
 8003a32:	460a      	mov	r2, r1
 8003a34:	4603      	mov	r3, r0
 8003a36:	493a      	ldr	r1, [pc, #232]	@ (8003b20 <check_vaccum_status+0x110>)
 8003a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a3c:	428b      	cmp	r3, r1
 8003a3e:	bf08      	it	eq
 8003a40:	4282      	cmpeq	r2, r0
 8003a42:	d01a      	beq.n	8003a7a <check_vaccum_status+0x6a>
			{
				trigger_savestate = 1;
 8003a44:	4b37      	ldr	r3, [pc, #220]	@ (8003b24 <check_vaccum_status+0x114>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	701a      	strb	r2, [r3, #0]
				S_top_savestate = S_top;
 8003a4a:	4b37      	ldr	r3, [pc, #220]	@ (8003b28 <check_vaccum_status+0x118>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a37      	ldr	r2, [pc, #220]	@ (8003b2c <check_vaccum_status+0x11c>)
 8003a50:	6013      	str	r3, [r2, #0]
				S_down_savestate = S_down;
 8003a52:	4b37      	ldr	r3, [pc, #220]	@ (8003b30 <check_vaccum_status+0x120>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a37      	ldr	r2, [pc, #220]	@ (8003b34 <check_vaccum_status+0x124>)
 8003a58:	6013      	str	r3, [r2, #0]
				mode_savestate = mode;
 8003a5a:	4b37      	ldr	r3, [pc, #220]	@ (8003b38 <check_vaccum_status+0x128>)
 8003a5c:	781a      	ldrb	r2, [r3, #0]
 8003a5e:	4b37      	ldr	r3, [pc, #220]	@ (8003b3c <check_vaccum_status+0x12c>)
 8003a60:	701a      	strb	r2, [r3, #0]
				timestamp_savestate = micros() + 500000;
 8003a62:	f7fe fd7f 	bl	8002564 <micros>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4935      	ldr	r1, [pc, #212]	@ (8003b40 <check_vaccum_status+0x130>)
 8003a6c:	eb12 0a01 	adds.w	sl, r2, r1
 8003a70:	f143 0b00 	adc.w	fp, r3, #0
 8003a74:	4b33      	ldr	r3, [pc, #204]	@ (8003b44 <check_vaccum_status+0x134>)
 8003a76:	e9c3 ab00 	strd	sl, fp, [r3]
			}
		HAL_Delay(50);
 8003a7a:	2032      	movs	r0, #50	@ 0x32
 8003a7c:	f000 fefa 	bl	8004874 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8003a80:	2201      	movs	r2, #1
 8003a82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003a86:	4830      	ldr	r0, [pc, #192]	@ (8003b48 <check_vaccum_status+0x138>)
 8003a88:	f003 f856 	bl	8006b38 <HAL_GPIO_WritePin>
	}
	if(registerFrame[0x02].U16 == 0b0001){ //suck  in
 8003a8c:	4b22      	ldr	r3, [pc, #136]	@ (8003b18 <check_vaccum_status+0x108>)
 8003a8e:	889b      	ldrh	r3, [r3, #4]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d12f      	bne.n	8003af4 <check_vaccum_status+0xe4>
		vaccum_status = 1;
 8003a94:	4b21      	ldr	r3, [pc, #132]	@ (8003b1c <check_vaccum_status+0x10c>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	601a      	str	r2, [r3, #0]
		if (prev_vac_savestate != vaccum_status)
 8003a9a:	4b20      	ldr	r3, [pc, #128]	@ (8003b1c <check_vaccum_status+0x10c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	17da      	asrs	r2, r3, #31
 8003aa0:	461c      	mov	r4, r3
 8003aa2:	4615      	mov	r5, r2
 8003aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8003b20 <check_vaccum_status+0x110>)
 8003aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aaa:	429d      	cmp	r5, r3
 8003aac:	bf08      	it	eq
 8003aae:	4294      	cmpeq	r4, r2
 8003ab0:	d01a      	beq.n	8003ae8 <check_vaccum_status+0xd8>
			{
				trigger_savestate = 1;
 8003ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8003b24 <check_vaccum_status+0x114>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	701a      	strb	r2, [r3, #0]
				S_top_savestate = S_top;
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b28 <check_vaccum_status+0x118>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1b      	ldr	r2, [pc, #108]	@ (8003b2c <check_vaccum_status+0x11c>)
 8003abe:	6013      	str	r3, [r2, #0]
				S_down_savestate = S_down;
 8003ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b30 <check_vaccum_status+0x120>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b34 <check_vaccum_status+0x124>)
 8003ac6:	6013      	str	r3, [r2, #0]
				mode_savestate = mode;
 8003ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b38 <check_vaccum_status+0x128>)
 8003aca:	781a      	ldrb	r2, [r3, #0]
 8003acc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b3c <check_vaccum_status+0x12c>)
 8003ace:	701a      	strb	r2, [r3, #0]
				timestamp_savestate = micros() + 500000;
 8003ad0:	f7fe fd48 	bl	8002564 <micros>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4919      	ldr	r1, [pc, #100]	@ (8003b40 <check_vaccum_status+0x130>)
 8003ada:	eb12 0801 	adds.w	r8, r2, r1
 8003ade:	f143 0900 	adc.w	r9, r3, #0
 8003ae2:	4b18      	ldr	r3, [pc, #96]	@ (8003b44 <check_vaccum_status+0x134>)
 8003ae4:	e9c3 8900 	strd	r8, r9, [r3]
			}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003aee:	4816      	ldr	r0, [pc, #88]	@ (8003b48 <check_vaccum_status+0x138>)
 8003af0:	f003 f822 	bl	8006b38 <HAL_GPIO_WritePin>
	}

	prev_vac_savestate = vaccum_status;
 8003af4:	4b09      	ldr	r3, [pc, #36]	@ (8003b1c <check_vaccum_status+0x10c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	17da      	asrs	r2, r3, #31
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	607a      	str	r2, [r7, #4]
 8003afe:	4b08      	ldr	r3, [pc, #32]	@ (8003b20 <check_vaccum_status+0x110>)
 8003b00:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003b04:	e9c3 1200 	strd	r1, r2, [r3]
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b12:	bf00      	nop
 8003b14:	20001170 	.word	0x20001170
 8003b18:	20000fd8 	.word	0x20000fd8
 8003b1c:	20001168 	.word	0x20001168
 8003b20:	200011a0 	.word	0x200011a0
 8003b24:	200011b0 	.word	0x200011b0
 8003b28:	20000aec 	.word	0x20000aec
 8003b2c:	20000af4 	.word	0x20000af4
 8003b30:	20000af0 	.word	0x20000af0
 8003b34:	20000af8 	.word	0x20000af8
 8003b38:	20000200 	.word	0x20000200
 8003b3c:	20000201 	.word	0x20000201
 8003b40:	0007a120 	.word	0x0007a120
 8003b44:	20001198 	.word	0x20001198
 8003b48:	48000400 	.word	0x48000400

08003b4c <check_gripper_status>:

void check_gripper_status()
{
 8003b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
	check_state = 2;
 8003b54:	4943      	ldr	r1, [pc, #268]	@ (8003c64 <check_gripper_status+0x118>)
 8003b56:	2002      	movs	r0, #2
 8003b58:	6008      	str	r0, [r1, #0]

	if(registerFrame[0x03].U16 == 0b0000) //backward ,not on
 8003b5a:	4943      	ldr	r1, [pc, #268]	@ (8003c68 <check_gripper_status+0x11c>)
 8003b5c:	88c9      	ldrh	r1, [r1, #6]
 8003b5e:	2900      	cmp	r1, #0
 8003b60:	d136      	bne.n	8003bd0 <check_gripper_status+0x84>
	//if(test_Gripper == 0)
	{

		gripper_status = 0;
 8003b62:	4942      	ldr	r1, [pc, #264]	@ (8003c6c <check_gripper_status+0x120>)
 8003b64:	2000      	movs	r0, #0
 8003b66:	6008      	str	r0, [r1, #0]

		if (prev_grp_savestate != gripper_status)
 8003b68:	4940      	ldr	r1, [pc, #256]	@ (8003c6c <check_gripper_status+0x120>)
 8003b6a:	6809      	ldr	r1, [r1, #0]
 8003b6c:	17c8      	asrs	r0, r1, #31
 8003b6e:	460a      	mov	r2, r1
 8003b70:	4603      	mov	r3, r0
 8003b72:	493f      	ldr	r1, [pc, #252]	@ (8003c70 <check_gripper_status+0x124>)
 8003b74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b78:	428b      	cmp	r3, r1
 8003b7a:	bf08      	it	eq
 8003b7c:	4282      	cmpeq	r2, r0
 8003b7e:	d01a      	beq.n	8003bb6 <check_gripper_status+0x6a>
			{
					trigger_savestate = 1;
 8003b80:	4b3c      	ldr	r3, [pc, #240]	@ (8003c74 <check_gripper_status+0x128>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	701a      	strb	r2, [r3, #0]
					S_top_savestate = S_top;
 8003b86:	4b3c      	ldr	r3, [pc, #240]	@ (8003c78 <check_gripper_status+0x12c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a3c      	ldr	r2, [pc, #240]	@ (8003c7c <check_gripper_status+0x130>)
 8003b8c:	6013      	str	r3, [r2, #0]
					S_down_savestate = S_down;
 8003b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8003c80 <check_gripper_status+0x134>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a3c      	ldr	r2, [pc, #240]	@ (8003c84 <check_gripper_status+0x138>)
 8003b94:	6013      	str	r3, [r2, #0]
					mode_savestate = mode;
 8003b96:	4b3c      	ldr	r3, [pc, #240]	@ (8003c88 <check_gripper_status+0x13c>)
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8003c8c <check_gripper_status+0x140>)
 8003b9c:	701a      	strb	r2, [r3, #0]
					timestamp_savestate = micros() + 500000;
 8003b9e:	f7fe fce1 	bl	8002564 <micros>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	493a      	ldr	r1, [pc, #232]	@ (8003c90 <check_gripper_status+0x144>)
 8003ba8:	eb12 0a01 	adds.w	sl, r2, r1
 8003bac:	f143 0b00 	adc.w	fp, r3, #0
 8003bb0:	4b38      	ldr	r3, [pc, #224]	@ (8003c94 <check_gripper_status+0x148>)
 8003bb2:	e9c3 ab00 	strd	sl, fp, [r3]
			}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003bbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bc0:	f002 ffba 	bl	8006b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003bca:	4833      	ldr	r0, [pc, #204]	@ (8003c98 <check_gripper_status+0x14c>)
 8003bcc:	f002 ffb4 	bl	8006b38 <HAL_GPIO_WritePin>
	}
	if(registerFrame[0x03].U16 == 0b0001) //Forward
 8003bd0:	4b25      	ldr	r3, [pc, #148]	@ (8003c68 <check_gripper_status+0x11c>)
 8003bd2:	88db      	ldrh	r3, [r3, #6]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d136      	bne.n	8003c46 <check_gripper_status+0xfa>
	//if(test_Gripper == 1)
	{
		gripper_status = 1;
 8003bd8:	4b24      	ldr	r3, [pc, #144]	@ (8003c6c <check_gripper_status+0x120>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

		if (prev_grp_savestate != gripper_status)
 8003bde:	4b23      	ldr	r3, [pc, #140]	@ (8003c6c <check_gripper_status+0x120>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	17da      	asrs	r2, r3, #31
 8003be4:	461c      	mov	r4, r3
 8003be6:	4615      	mov	r5, r2
 8003be8:	4b21      	ldr	r3, [pc, #132]	@ (8003c70 <check_gripper_status+0x124>)
 8003bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bee:	429d      	cmp	r5, r3
 8003bf0:	bf08      	it	eq
 8003bf2:	4294      	cmpeq	r4, r2
 8003bf4:	d01a      	beq.n	8003c2c <check_gripper_status+0xe0>
			{
					trigger_savestate = 1;
 8003bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8003c74 <check_gripper_status+0x128>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	701a      	strb	r2, [r3, #0]
					S_top_savestate = S_top;
 8003bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8003c78 <check_gripper_status+0x12c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1e      	ldr	r2, [pc, #120]	@ (8003c7c <check_gripper_status+0x130>)
 8003c02:	6013      	str	r3, [r2, #0]
					S_down_savestate = S_down;
 8003c04:	4b1e      	ldr	r3, [pc, #120]	@ (8003c80 <check_gripper_status+0x134>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1e      	ldr	r2, [pc, #120]	@ (8003c84 <check_gripper_status+0x138>)
 8003c0a:	6013      	str	r3, [r2, #0]
					mode_savestate = mode;
 8003c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8003c88 <check_gripper_status+0x13c>)
 8003c0e:	781a      	ldrb	r2, [r3, #0]
 8003c10:	4b1e      	ldr	r3, [pc, #120]	@ (8003c8c <check_gripper_status+0x140>)
 8003c12:	701a      	strb	r2, [r3, #0]
					timestamp_savestate = micros() + 500000;
 8003c14:	f7fe fca6 	bl	8002564 <micros>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	491c      	ldr	r1, [pc, #112]	@ (8003c90 <check_gripper_status+0x144>)
 8003c1e:	eb12 0801 	adds.w	r8, r2, r1
 8003c22:	f143 0900 	adc.w	r9, r3, #0
 8003c26:	4b1b      	ldr	r3, [pc, #108]	@ (8003c94 <check_gripper_status+0x148>)
 8003c28:	e9c3 8900 	strd	r8, r9, [r3]
			}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c36:	f002 ff7f 	bl	8006b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c40:	4815      	ldr	r0, [pc, #84]	@ (8003c98 <check_gripper_status+0x14c>)
 8003c42:	f002 ff79 	bl	8006b38 <HAL_GPIO_WritePin>
	}

	prev_grp_savestate = gripper_status;
 8003c46:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <check_gripper_status+0x120>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	17da      	asrs	r2, r3, #31
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	4b07      	ldr	r3, [pc, #28]	@ (8003c70 <check_gripper_status+0x124>)
 8003c52:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c56:	e9c3 1200 	strd	r1, r2, [r3]
}
 8003c5a:	bf00      	nop
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c64:	20001170 	.word	0x20001170
 8003c68:	20000fd8 	.word	0x20000fd8
 8003c6c:	2000116c 	.word	0x2000116c
 8003c70:	200011a8 	.word	0x200011a8
 8003c74:	200011b0 	.word	0x200011b0
 8003c78:	20000aec 	.word	0x20000aec
 8003c7c:	20000af4 	.word	0x20000af4
 8003c80:	20000af0 	.word	0x20000af0
 8003c84:	20000af8 	.word	0x20000af8
 8003c88:	20000200 	.word	0x20000200
 8003c8c:	20000201 	.word	0x20000201
 8003c90:	0007a120 	.word	0x0007a120
 8003c94:	20001198 	.word	0x20001198
 8003c98:	48000800 	.word	0x48000800

08003c9c <set_shelf>:

void set_shelf()
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
	check_state = 3;
 8003ca0:	4b4b      	ldr	r3, [pc, #300]	@ (8003dd0 <set_shelf+0x134>)
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	601a      	str	r2, [r3, #0]
	if(registerFrame[0x01].U16 ==  0b0001)
 8003ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8003dd4 <set_shelf+0x138>)
 8003ca8:	885b      	ldrh	r3, [r3, #2]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d104      	bne.n	8003cb8 <set_shelf+0x1c>
	{
		set_shelf_state = 1;
 8003cae:	4b4a      	ldr	r3, [pc, #296]	@ (8003dd8 <set_shelf+0x13c>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
		LED_Manual();
 8003cb4:	f000 f9fa 	bl	80040ac <LED_Manual>
	}
	if (set_shelf_state == 1 && Enter_click == 0)
 8003cb8:	4b47      	ldr	r3, [pc, #284]	@ (8003dd8 <set_shelf+0x13c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d11e      	bne.n	8003cfe <set_shelf+0x62>
 8003cc0:	4b46      	ldr	r3, [pc, #280]	@ (8003ddc <set_shelf+0x140>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d11a      	bne.n	8003cfe <set_shelf+0x62>
	{
			registerFrame[0x01].U16 = 0b0000;
 8003cc8:	4b42      	ldr	r3, [pc, #264]	@ (8003dd4 <set_shelf+0x138>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	805a      	strh	r2, [r3, #2]
			Moving_status = 1;
 8003cce:	4b44      	ldr	r3, [pc, #272]	@ (8003de0 <set_shelf+0x144>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
			registerFrame[0x10].U16 = Moving_status; // set shelve
 8003cd4:	4b42      	ldr	r3, [pc, #264]	@ (8003de0 <set_shelf+0x144>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	4b3e      	ldr	r3, [pc, #248]	@ (8003dd4 <set_shelf+0x138>)
 8003cdc:	841a      	strh	r2, [r3, #32]
			mode = 2; //manual
 8003cde:	4b41      	ldr	r3, [pc, #260]	@ (8003de4 <set_shelf+0x148>)
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	701a      	strb	r2, [r3, #0]
			if(count_save == 5){
 8003ce4:	4b40      	ldr	r3, [pc, #256]	@ (8003de8 <set_shelf+0x14c>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b05      	cmp	r3, #5
 8003cea:	d108      	bne.n	8003cfe <set_shelf+0x62>
				Enter_click = 1;
 8003cec:	4b3b      	ldr	r3, [pc, #236]	@ (8003ddc <set_shelf+0x140>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
				count_save = 0;
 8003cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8003de8 <set_shelf+0x14c>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	701a      	strb	r2, [r3, #0]
				mode = 3;
 8003cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8003de4 <set_shelf+0x148>)
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	701a      	strb	r2, [r3, #0]
			}
	}
	if (set_shelf_state == 1 && Enter_click == 1)
 8003cfe:	4b36      	ldr	r3, [pc, #216]	@ (8003dd8 <set_shelf+0x13c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d161      	bne.n	8003dca <set_shelf+0x12e>
 8003d06:	4b35      	ldr	r3, [pc, #212]	@ (8003ddc <set_shelf+0x140>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d15d      	bne.n	8003dca <set_shelf+0x12e>
	{
		registerFrame[0x01].U16 = 0b0000;
 8003d0e:	4b31      	ldr	r3, [pc, #196]	@ (8003dd4 <set_shelf+0x138>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	805a      	strh	r2, [r3, #2]
		registerFrame[0x23].U16 = shelves_pos[1]*10;
 8003d14:	4b35      	ldr	r3, [pc, #212]	@ (8003dec <set_shelf+0x150>)
 8003d16:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d1a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d26:	ee17 3a90 	vmov	r3, s15
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	4b29      	ldr	r3, [pc, #164]	@ (8003dd4 <set_shelf+0x138>)
 8003d2e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		registerFrame[0x24].U16 = shelves_pos[2]*10;
 8003d32:	4b2e      	ldr	r3, [pc, #184]	@ (8003dec <set_shelf+0x150>)
 8003d34:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d38:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003d3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d44:	ee17 3a90 	vmov	r3, s15
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	4b22      	ldr	r3, [pc, #136]	@ (8003dd4 <set_shelf+0x138>)
 8003d4c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		registerFrame[0x25].U16 = shelves_pos[3]*10;
 8003d50:	4b26      	ldr	r3, [pc, #152]	@ (8003dec <set_shelf+0x150>)
 8003d52:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d56:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d62:	ee17 3a90 	vmov	r3, s15
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd4 <set_shelf+0x138>)
 8003d6a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		registerFrame[0x26].U16 = shelves_pos[4]*10;
 8003d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8003dec <set_shelf+0x150>)
 8003d70:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d74:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d80:	ee17 3a90 	vmov	r3, s15
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	4b13      	ldr	r3, [pc, #76]	@ (8003dd4 <set_shelf+0x138>)
 8003d88:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		registerFrame[0x27].U16 = shelves_pos[5]*10;
 8003d8c:	4b17      	ldr	r3, [pc, #92]	@ (8003dec <set_shelf+0x150>)
 8003d8e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003d92:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d9e:	ee17 3a90 	vmov	r3, s15
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd4 <set_shelf+0x138>)
 8003da6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
		Moving_status = 0;
 8003daa:	4b0d      	ldr	r3, [pc, #52]	@ (8003de0 <set_shelf+0x144>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
		registerFrame[0x10].U16 = Moving_status;
 8003db0:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <set_shelf+0x144>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	4b07      	ldr	r3, [pc, #28]	@ (8003dd4 <set_shelf+0x138>)
 8003db8:	841a      	strh	r2, [r3, #32]
		set_shelf_state = 0;
 8003dba:	4b07      	ldr	r3, [pc, #28]	@ (8003dd8 <set_shelf+0x13c>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]
		Enter_click = 0;
 8003dc0:	4b06      	ldr	r3, [pc, #24]	@ (8003ddc <set_shelf+0x140>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
		LED_Ready();
 8003dc6:	f000 f925 	bl	8004014 <LED_Ready>
	}

}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20001170 	.word	0x20001170
 8003dd4:	20000fd8 	.word	0x20000fd8
 8003dd8:	20001178 	.word	0x20001178
 8003ddc:	20001174 	.word	0x20001174
 8003de0:	20001190 	.word	0x20001190
 8003de4:	20000200 	.word	0x20000200
 8003de8:	20000a7d 	.word	0x20000a7d
 8003dec:	20000a80 	.word	0x20000a80

08003df0 <Pointmode>:

void Pointmode()
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 ==  0b1000) // Run Point Mode
 8003df4:	4b34      	ldr	r3, [pc, #208]	@ (8003ec8 <Pointmode+0xd8>)
 8003df6:	885b      	ldrh	r3, [r3, #2]
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d116      	bne.n	8003e2a <Pointmode+0x3a>
		{
			 set_point_state = 1;
 8003dfc:	4b33      	ldr	r3, [pc, #204]	@ (8003ecc <Pointmode+0xdc>)
 8003dfe:	2201      	movs	r2, #1
 8003e00:	601a      	str	r2, [r3, #0]
			 set_point_modbus = (registerFrame[0x30].U16) / 10;
 8003e02:	4b31      	ldr	r3, [pc, #196]	@ (8003ec8 <Pointmode+0xd8>)
 8003e04:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003e08:	4a31      	ldr	r2, [pc, #196]	@ (8003ed0 <Pointmode+0xe0>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	08db      	lsrs	r3, r3, #3
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003ed4 <Pointmode+0xe4>)
 8003e1c:	edc3 7a00 	vstr	s15, [r3]
			 registerFrame[0x01].U16 = 0b0000;
 8003e20:	4b29      	ldr	r3, [pc, #164]	@ (8003ec8 <Pointmode+0xd8>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	805a      	strh	r2, [r3, #2]
			 LED_Auto();
 8003e26:	f000 f91b 	bl	8004060 <LED_Auto>
//			 Modbus_Protocal_Worker();
		}

	if (point_state_triger == 0 && set_point_state == 1)
 8003e2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ed8 <Pointmode+0xe8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d12b      	bne.n	8003e8a <Pointmode+0x9a>
 8003e32:	4b26      	ldr	r3, [pc, #152]	@ (8003ecc <Pointmode+0xdc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d127      	bne.n	8003e8a <Pointmode+0x9a>
		{
				Moving_status = 16;
 8003e3a:	4b28      	ldr	r3, [pc, #160]	@ (8003edc <Pointmode+0xec>)
 8003e3c:	2210      	movs	r2, #16
 8003e3e:	601a      	str	r2, [r3, #0]
				registerFrame[0x10].U16 = Moving_status;
 8003e40:	4b26      	ldr	r3, [pc, #152]	@ (8003edc <Pointmode+0xec>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	4b20      	ldr	r3, [pc, #128]	@ (8003ec8 <Pointmode+0xd8>)
 8003e48:	841a      	strh	r2, [r3, #32]
				mode = 1;
 8003e4a:	4b25      	ldr	r3, [pc, #148]	@ (8003ee0 <Pointmode+0xf0>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	701a      	strb	r2, [r3, #0]
				setPosition = set_point_modbus;
 8003e50:	4b20      	ldr	r3, [pc, #128]	@ (8003ed4 <Pointmode+0xe4>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a23      	ldr	r2, [pc, #140]	@ (8003ee4 <Pointmode+0xf4>)
 8003e56:	6013      	str	r3, [r2, #0]
				if(fabs(setPosition-QEIdata.linearPos) <= 5){
 8003e58:	4b22      	ldr	r3, [pc, #136]	@ (8003ee4 <Pointmode+0xf4>)
 8003e5a:	ed93 7a00 	vldr	s14, [r3]
 8003e5e:	4b22      	ldr	r3, [pc, #136]	@ (8003ee8 <Pointmode+0xf8>)
 8003e60:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003e64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e68:	eef0 7ae7 	vabs.f32	s15, s15
 8003e6c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003e70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e78:	d805      	bhi.n	8003e86 <Pointmode+0x96>
					mode = 3;
 8003e7a:	4b19      	ldr	r3, [pc, #100]	@ (8003ee0 <Pointmode+0xf0>)
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	701a      	strb	r2, [r3, #0]
					point_state_triger = 1;
 8003e80:	4b15      	ldr	r3, [pc, #84]	@ (8003ed8 <Pointmode+0xe8>)
 8003e82:	2201      	movs	r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
				}
				Modbus_Protocal_Worker();
 8003e86:	f7fd f9f5 	bl	8001274 <Modbus_Protocal_Worker>
		}
	if (point_state_triger == 1 && set_point_state == 1)
 8003e8a:	4b13      	ldr	r3, [pc, #76]	@ (8003ed8 <Pointmode+0xe8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d118      	bne.n	8003ec4 <Pointmode+0xd4>
 8003e92:	4b0e      	ldr	r3, [pc, #56]	@ (8003ecc <Pointmode+0xdc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d114      	bne.n	8003ec4 <Pointmode+0xd4>
		{
			mode = 3;
 8003e9a:	4b11      	ldr	r3, [pc, #68]	@ (8003ee0 <Pointmode+0xf0>)
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	701a      	strb	r2, [r3, #0]
			Moving_status = 0;
 8003ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8003edc <Pointmode+0xec>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
			registerFrame[0x10].U16 = Moving_status;
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8003edc <Pointmode+0xec>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <Pointmode+0xd8>)
 8003eae:	841a      	strh	r2, [r3, #32]
			set_point_state = 0;
 8003eb0:	4b06      	ldr	r3, [pc, #24]	@ (8003ecc <Pointmode+0xdc>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
			point_state_triger = 0;
 8003eb6:	4b08      	ldr	r3, [pc, #32]	@ (8003ed8 <Pointmode+0xe8>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
			Modbus_Protocal_Worker();
 8003ebc:	f7fd f9da 	bl	8001274 <Modbus_Protocal_Worker>
			LED_Ready();
 8003ec0:	f000 f8a8 	bl	8004014 <LED_Ready>
//
		}
}
 8003ec4:	bf00      	nop
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000fd8 	.word	0x20000fd8
 8003ecc:	20001184 	.word	0x20001184
 8003ed0:	cccccccd 	.word	0xcccccccd
 8003ed4:	2000117c 	.word	0x2000117c
 8003ed8:	20001180 	.word	0x20001180
 8003edc:	20001190 	.word	0x20001190
 8003ee0:	20000200 	.word	0x20000200
 8003ee4:	20000ae4 	.word	0x20000ae4
 8003ee8:	200009c8 	.word	0x200009c8

08003eec <Home>:
void Home()
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 ==  0b0010) // Run Home Mode
 8003ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f68 <Home+0x7c>)
 8003ef2:	885b      	ldrh	r3, [r3, #2]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d107      	bne.n	8003f08 <Home+0x1c>
	{
		set_Home_state = 1;
 8003ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8003f6c <Home+0x80>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
		registerFrame[0x01].U16 = 0b0000;
 8003efe:	4b1a      	ldr	r3, [pc, #104]	@ (8003f68 <Home+0x7c>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	805a      	strh	r2, [r3, #2]
		LED_Homing();
 8003f04:	f000 f860 	bl	8003fc8 <LED_Homing>
//		Modbus_Protocal_Worker();
	}
	if(Home_state_triger == 0 && set_Home_state == 1)
 8003f08:	4b19      	ldr	r3, [pc, #100]	@ (8003f70 <Home+0x84>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10e      	bne.n	8003f2e <Home+0x42>
 8003f10:	4b16      	ldr	r3, [pc, #88]	@ (8003f6c <Home+0x80>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d10a      	bne.n	8003f2e <Home+0x42>
	{
		Moving_status = 2;
 8003f18:	4b16      	ldr	r3, [pc, #88]	@ (8003f74 <Home+0x88>)
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	601a      	str	r2, [r3, #0]
		registerFrame[0x10].U16 = Moving_status;
 8003f1e:	4b15      	ldr	r3, [pc, #84]	@ (8003f74 <Home+0x88>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	4b10      	ldr	r3, [pc, #64]	@ (8003f68 <Home+0x7c>)
 8003f26:	841a      	strh	r2, [r3, #32]
		//set home
		mode = 2;
 8003f28:	4b13      	ldr	r3, [pc, #76]	@ (8003f78 <Home+0x8c>)
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	701a      	strb	r2, [r3, #0]
//		Modbus_Protocal_Worker();
	}
	if(Home_state_triger == 1 && set_Home_state == 1)
 8003f2e:	4b10      	ldr	r3, [pc, #64]	@ (8003f70 <Home+0x84>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d116      	bne.n	8003f64 <Home+0x78>
 8003f36:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <Home+0x80>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d112      	bne.n	8003f64 <Home+0x78>
	{
		mode = 3;
 8003f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f78 <Home+0x8c>)
 8003f40:	2203      	movs	r2, #3
 8003f42:	701a      	strb	r2, [r3, #0]
		Moving_status = 0;
 8003f44:	4b0b      	ldr	r3, [pc, #44]	@ (8003f74 <Home+0x88>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]
		registerFrame[0x10].U16 = Moving_status;
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f74 <Home+0x88>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	4b05      	ldr	r3, [pc, #20]	@ (8003f68 <Home+0x7c>)
 8003f52:	841a      	strh	r2, [r3, #32]
		set_Home_state = 0;
 8003f54:	4b05      	ldr	r3, [pc, #20]	@ (8003f6c <Home+0x80>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
		Home_state_triger = 0;
 8003f5a:	4b05      	ldr	r3, [pc, #20]	@ (8003f70 <Home+0x84>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
//		Modbus_Protocal_Worker();
		LED_Ready();
 8003f60:	f000 f858 	bl	8004014 <LED_Ready>
	}
}
 8003f64:	bf00      	nop
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20000fd8 	.word	0x20000fd8
 8003f6c:	20001188 	.word	0x20001188
 8003f70:	2000118c 	.word	0x2000118c
 8003f74:	20001190 	.word	0x20001190
 8003f78:	20000200 	.word	0x20000200

08003f7c <LED_Emergency>:
}
//-----------------------------------------------------------//

//-----------------------LED STATUS--------------------------//

void LED_Emergency(){
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8003f80:	2200      	movs	r2, #0
 8003f82:	2140      	movs	r1, #64	@ 0x40
 8003f84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f88:	f002 fdd6 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	2180      	movs	r1, #128	@ 0x80
 8003f90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f94:	f002 fdd0 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8003f98:	2201      	movs	r2, #1
 8003f9a:	2140      	movs	r1, #64	@ 0x40
 8003f9c:	4808      	ldr	r0, [pc, #32]	@ (8003fc0 <LED_Emergency+0x44>)
 8003f9e:	f002 fdcb 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	2180      	movs	r1, #128	@ 0x80
 8003fa6:	4807      	ldr	r0, [pc, #28]	@ (8003fc4 <LED_Emergency+0x48>)
 8003fa8:	f002 fdc6 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8003fac:	2201      	movs	r2, #1
 8003fae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fb6:	f002 fdbf 	bl	8006b38 <HAL_GPIO_WritePin>
}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	48000400 	.word	0x48000400
 8003fc4:	48000800 	.word	0x48000800

08003fc8 <LED_Homing>:

void LED_Homing(){
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8003fcc:	2201      	movs	r2, #1
 8003fce:	2140      	movs	r1, #64	@ 0x40
 8003fd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fd4:	f002 fdb0 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2180      	movs	r1, #128	@ 0x80
 8003fdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fe0:	f002 fdaa 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	2140      	movs	r1, #64	@ 0x40
 8003fe8:	4808      	ldr	r0, [pc, #32]	@ (800400c <LED_Homing+0x44>)
 8003fea:	f002 fda5 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8003fee:	2201      	movs	r2, #1
 8003ff0:	2180      	movs	r1, #128	@ 0x80
 8003ff2:	4807      	ldr	r0, [pc, #28]	@ (8004010 <LED_Homing+0x48>)
 8003ff4:	f002 fda0 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ffe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004002:	f002 fd99 	bl	8006b38 <HAL_GPIO_WritePin>
}
 8004006:	bf00      	nop
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	48000400 	.word	0x48000400
 8004010:	48000800 	.word	0x48000800

08004014 <LED_Ready>:

void LED_Ready(){
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8004018:	2201      	movs	r2, #1
 800401a:	2140      	movs	r1, #64	@ 0x40
 800401c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004020:	f002 fd8a 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8004024:	2201      	movs	r2, #1
 8004026:	2180      	movs	r1, #128	@ 0x80
 8004028:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800402c:	f002 fd84 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8004030:	2200      	movs	r2, #0
 8004032:	2140      	movs	r1, #64	@ 0x40
 8004034:	4808      	ldr	r0, [pc, #32]	@ (8004058 <LED_Ready+0x44>)
 8004036:	f002 fd7f 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 800403a:	2201      	movs	r2, #1
 800403c:	2180      	movs	r1, #128	@ 0x80
 800403e:	4807      	ldr	r0, [pc, #28]	@ (800405c <LED_Ready+0x48>)
 8004040:	f002 fd7a 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8004044:	2201      	movs	r2, #1
 8004046:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800404a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800404e:	f002 fd73 	bl	8006b38 <HAL_GPIO_WritePin>
}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	48000400 	.word	0x48000400
 800405c:	48000800 	.word	0x48000800

08004060 <LED_Auto>:

void LED_Auto(){
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8004064:	2201      	movs	r2, #1
 8004066:	2140      	movs	r1, #64	@ 0x40
 8004068:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800406c:	f002 fd64 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8004070:	2201      	movs	r2, #1
 8004072:	2180      	movs	r1, #128	@ 0x80
 8004074:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004078:	f002 fd5e 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 800407c:	2201      	movs	r2, #1
 800407e:	2140      	movs	r1, #64	@ 0x40
 8004080:	4808      	ldr	r0, [pc, #32]	@ (80040a4 <LED_Auto+0x44>)
 8004082:	f002 fd59 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8004086:	2200      	movs	r2, #0
 8004088:	2180      	movs	r1, #128	@ 0x80
 800408a:	4807      	ldr	r0, [pc, #28]	@ (80040a8 <LED_Auto+0x48>)
 800408c:	f002 fd54 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8004090:	2201      	movs	r2, #1
 8004092:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004096:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800409a:	f002 fd4d 	bl	8006b38 <HAL_GPIO_WritePin>
}
 800409e:	bf00      	nop
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	48000400 	.word	0x48000400
 80040a8:	48000800 	.word	0x48000800

080040ac <LED_Manual>:

void LED_Manual(){
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80040b0:	2201      	movs	r2, #1
 80040b2:	2140      	movs	r1, #64	@ 0x40
 80040b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040b8:	f002 fd3e 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80040bc:	2201      	movs	r2, #1
 80040be:	2180      	movs	r1, #128	@ 0x80
 80040c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040c4:	f002 fd38 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 80040c8:	2201      	movs	r2, #1
 80040ca:	2140      	movs	r1, #64	@ 0x40
 80040cc:	4808      	ldr	r0, [pc, #32]	@ (80040f0 <LED_Manual+0x44>)
 80040ce:	f002 fd33 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 80040d2:	2201      	movs	r2, #1
 80040d4:	2180      	movs	r1, #128	@ 0x80
 80040d6:	4807      	ldr	r0, [pc, #28]	@ (80040f4 <LED_Manual+0x48>)
 80040d8:	f002 fd2e 	bl	8006b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80040dc:	2200      	movs	r2, #0
 80040de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80040e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040e6:	f002 fd27 	bl	8006b38 <HAL_GPIO_WritePin>
}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	48000400 	.word	0x48000400
 80040f4:	48000800 	.word	0x48000800

080040f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040fc:	b672      	cpsid	i
}
 80040fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004100:	bf00      	nop
 8004102:	e7fd      	b.n	8004100 <Error_Handler+0x8>

08004104 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800410a:	4b0f      	ldr	r3, [pc, #60]	@ (8004148 <HAL_MspInit+0x44>)
 800410c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410e:	4a0e      	ldr	r2, [pc, #56]	@ (8004148 <HAL_MspInit+0x44>)
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	6613      	str	r3, [r2, #96]	@ 0x60
 8004116:	4b0c      	ldr	r3, [pc, #48]	@ (8004148 <HAL_MspInit+0x44>)
 8004118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	607b      	str	r3, [r7, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004122:	4b09      	ldr	r3, [pc, #36]	@ (8004148 <HAL_MspInit+0x44>)
 8004124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004126:	4a08      	ldr	r2, [pc, #32]	@ (8004148 <HAL_MspInit+0x44>)
 8004128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800412c:	6593      	str	r3, [r2, #88]	@ 0x58
 800412e:	4b06      	ldr	r3, [pc, #24]	@ (8004148 <HAL_MspInit+0x44>)
 8004130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800413a:	f002 fdd1 	bl	8006ce0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40021000 	.word	0x40021000

0800414c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b0a0      	sub	sp, #128	@ 0x80
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004154:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	605a      	str	r2, [r3, #4]
 800415e:	609a      	str	r2, [r3, #8]
 8004160:	60da      	str	r2, [r3, #12]
 8004162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004164:	f107 0318 	add.w	r3, r7, #24
 8004168:	2254      	movs	r2, #84	@ 0x54
 800416a:	2100      	movs	r1, #0
 800416c:	4618      	mov	r0, r3
 800416e:	f007 fccb 	bl	800bb08 <memset>
  if(hadc->Instance==ADC1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800417a:	d178      	bne.n	800426e <HAL_ADC_MspInit+0x122>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800417c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004180:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004182:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004186:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004188:	f107 0318 	add.w	r3, r7, #24
 800418c:	4618      	mov	r0, r3
 800418e:	f003 fae5 	bl	800775c <HAL_RCCEx_PeriphCLKConfig>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004198:	f7ff ffae 	bl	80040f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800419c:	4b36      	ldr	r3, [pc, #216]	@ (8004278 <HAL_ADC_MspInit+0x12c>)
 800419e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041a0:	4a35      	ldr	r2, [pc, #212]	@ (8004278 <HAL_ADC_MspInit+0x12c>)
 80041a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80041a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041a8:	4b33      	ldr	r3, [pc, #204]	@ (8004278 <HAL_ADC_MspInit+0x12c>)
 80041aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041b4:	4b30      	ldr	r3, [pc, #192]	@ (8004278 <HAL_ADC_MspInit+0x12c>)
 80041b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041b8:	4a2f      	ldr	r2, [pc, #188]	@ (8004278 <HAL_ADC_MspInit+0x12c>)
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004278 <HAL_ADC_MspInit+0x12c>)
 80041c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004278 <HAL_ADC_MspInit+0x12c>)
 80041ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d0:	4a29      	ldr	r2, [pc, #164]	@ (8004278 <HAL_ADC_MspInit+0x12c>)
 80041d2:	f043 0302 	orr.w	r3, r3, #2
 80041d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041d8:	4b27      	ldr	r3, [pc, #156]	@ (8004278 <HAL_ADC_MspInit+0x12c>)
 80041da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80041e4:	2301      	movs	r3, #1
 80041e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041e8:	2303      	movs	r3, #3
 80041ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80041f4:	4619      	mov	r1, r3
 80041f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041fa:	f002 fb03 	bl	8006804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80041fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004202:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004204:	2303      	movs	r3, #3
 8004206:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004208:	2300      	movs	r3, #0
 800420a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800420c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004210:	4619      	mov	r1, r3
 8004212:	481a      	ldr	r0, [pc, #104]	@ (800427c <HAL_ADC_MspInit+0x130>)
 8004214:	f002 faf6 	bl	8006804 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 8004218:	4b19      	ldr	r3, [pc, #100]	@ (8004280 <HAL_ADC_MspInit+0x134>)
 800421a:	4a1a      	ldr	r2, [pc, #104]	@ (8004284 <HAL_ADC_MspInit+0x138>)
 800421c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800421e:	4b18      	ldr	r3, [pc, #96]	@ (8004280 <HAL_ADC_MspInit+0x134>)
 8004220:	2205      	movs	r2, #5
 8004222:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004224:	4b16      	ldr	r3, [pc, #88]	@ (8004280 <HAL_ADC_MspInit+0x134>)
 8004226:	2200      	movs	r2, #0
 8004228:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800422a:	4b15      	ldr	r3, [pc, #84]	@ (8004280 <HAL_ADC_MspInit+0x134>)
 800422c:	2200      	movs	r2, #0
 800422e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004230:	4b13      	ldr	r3, [pc, #76]	@ (8004280 <HAL_ADC_MspInit+0x134>)
 8004232:	2280      	movs	r2, #128	@ 0x80
 8004234:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004236:	4b12      	ldr	r3, [pc, #72]	@ (8004280 <HAL_ADC_MspInit+0x134>)
 8004238:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800423c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800423e:	4b10      	ldr	r3, [pc, #64]	@ (8004280 <HAL_ADC_MspInit+0x134>)
 8004240:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004244:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004246:	4b0e      	ldr	r3, [pc, #56]	@ (8004280 <HAL_ADC_MspInit+0x134>)
 8004248:	2220      	movs	r2, #32
 800424a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800424c:	4b0c      	ldr	r3, [pc, #48]	@ (8004280 <HAL_ADC_MspInit+0x134>)
 800424e:	2200      	movs	r2, #0
 8004250:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004252:	480b      	ldr	r0, [pc, #44]	@ (8004280 <HAL_ADC_MspInit+0x134>)
 8004254:	f001 ffa4 	bl	80061a0 <HAL_DMA_Init>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 800425e:	f7ff ff4b 	bl	80040f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a06      	ldr	r2, [pc, #24]	@ (8004280 <HAL_ADC_MspInit+0x134>)
 8004266:	655a      	str	r2, [r3, #84]	@ 0x54
 8004268:	4a05      	ldr	r2, [pc, #20]	@ (8004280 <HAL_ADC_MspInit+0x134>)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800426e:	bf00      	nop
 8004270:	3780      	adds	r7, #128	@ 0x80
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40021000 	.word	0x40021000
 800427c:	48000400 	.word	0x48000400
 8004280:	20000314 	.word	0x20000314
 8004284:	40020408 	.word	0x40020408

08004288 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	@ 0x28
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004290:	f107 0314 	add.w	r3, r7, #20
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	609a      	str	r2, [r3, #8]
 800429c:	60da      	str	r2, [r3, #12]
 800429e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a8:	d129      	bne.n	80042fe <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042aa:	4b17      	ldr	r3, [pc, #92]	@ (8004308 <HAL_TIM_Encoder_MspInit+0x80>)
 80042ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ae:	4a16      	ldr	r2, [pc, #88]	@ (8004308 <HAL_TIM_Encoder_MspInit+0x80>)
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80042b6:	4b14      	ldr	r3, [pc, #80]	@ (8004308 <HAL_TIM_Encoder_MspInit+0x80>)
 80042b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042c2:	4b11      	ldr	r3, [pc, #68]	@ (8004308 <HAL_TIM_Encoder_MspInit+0x80>)
 80042c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c6:	4a10      	ldr	r2, [pc, #64]	@ (8004308 <HAL_TIM_Encoder_MspInit+0x80>)
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004308 <HAL_TIM_Encoder_MspInit+0x80>)
 80042d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80042da:	f248 0302 	movw	r3, #32770	@ 0x8002
 80042de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e0:	2302      	movs	r3, #2
 80042e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e8:	2300      	movs	r3, #0
 80042ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042ec:	2301      	movs	r3, #1
 80042ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f0:	f107 0314 	add.w	r3, r7, #20
 80042f4:	4619      	mov	r1, r3
 80042f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042fa:	f002 fa83 	bl	8006804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80042fe:	bf00      	nop
 8004300:	3728      	adds	r7, #40	@ 0x28
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000

0800430c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a39      	ldr	r2, [pc, #228]	@ (8004400 <HAL_TIM_Base_MspInit+0xf4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d10c      	bne.n	8004338 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800431e:	4b39      	ldr	r3, [pc, #228]	@ (8004404 <HAL_TIM_Base_MspInit+0xf8>)
 8004320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004322:	4a38      	ldr	r2, [pc, #224]	@ (8004404 <HAL_TIM_Base_MspInit+0xf8>)
 8004324:	f043 0302 	orr.w	r3, r3, #2
 8004328:	6593      	str	r3, [r2, #88]	@ 0x58
 800432a:	4b36      	ldr	r3, [pc, #216]	@ (8004404 <HAL_TIM_Base_MspInit+0xf8>)
 800432c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004336:	e05e      	b.n	80043f6 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM4)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a32      	ldr	r2, [pc, #200]	@ (8004408 <HAL_TIM_Base_MspInit+0xfc>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d10c      	bne.n	800435c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004342:	4b30      	ldr	r3, [pc, #192]	@ (8004404 <HAL_TIM_Base_MspInit+0xf8>)
 8004344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004346:	4a2f      	ldr	r2, [pc, #188]	@ (8004404 <HAL_TIM_Base_MspInit+0xf8>)
 8004348:	f043 0304 	orr.w	r3, r3, #4
 800434c:	6593      	str	r3, [r2, #88]	@ 0x58
 800434e:	4b2d      	ldr	r3, [pc, #180]	@ (8004404 <HAL_TIM_Base_MspInit+0xf8>)
 8004350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	69bb      	ldr	r3, [r7, #24]
}
 800435a:	e04c      	b.n	80043f6 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM5)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a2a      	ldr	r2, [pc, #168]	@ (800440c <HAL_TIM_Base_MspInit+0x100>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d114      	bne.n	8004390 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004366:	4b27      	ldr	r3, [pc, #156]	@ (8004404 <HAL_TIM_Base_MspInit+0xf8>)
 8004368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436a:	4a26      	ldr	r2, [pc, #152]	@ (8004404 <HAL_TIM_Base_MspInit+0xf8>)
 800436c:	f043 0308 	orr.w	r3, r3, #8
 8004370:	6593      	str	r3, [r2, #88]	@ 0x58
 8004372:	4b24      	ldr	r3, [pc, #144]	@ (8004404 <HAL_TIM_Base_MspInit+0xf8>)
 8004374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800437e:	2200      	movs	r2, #0
 8004380:	2100      	movs	r1, #0
 8004382:	2032      	movs	r0, #50	@ 0x32
 8004384:	f001 fed7 	bl	8006136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004388:	2032      	movs	r0, #50	@ 0x32
 800438a:	f001 feee 	bl	800616a <HAL_NVIC_EnableIRQ>
}
 800438e:	e032      	b.n	80043f6 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM6)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1e      	ldr	r2, [pc, #120]	@ (8004410 <HAL_TIM_Base_MspInit+0x104>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d114      	bne.n	80043c4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800439a:	4b1a      	ldr	r3, [pc, #104]	@ (8004404 <HAL_TIM_Base_MspInit+0xf8>)
 800439c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439e:	4a19      	ldr	r2, [pc, #100]	@ (8004404 <HAL_TIM_Base_MspInit+0xf8>)
 80043a0:	f043 0310 	orr.w	r3, r3, #16
 80043a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80043a6:	4b17      	ldr	r3, [pc, #92]	@ (8004404 <HAL_TIM_Base_MspInit+0xf8>)
 80043a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043aa:	f003 0310 	and.w	r3, r3, #16
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80043b2:	2200      	movs	r2, #0
 80043b4:	2100      	movs	r1, #0
 80043b6:	2036      	movs	r0, #54	@ 0x36
 80043b8:	f001 febd 	bl	8006136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80043bc:	2036      	movs	r0, #54	@ 0x36
 80043be:	f001 fed4 	bl	800616a <HAL_NVIC_EnableIRQ>
}
 80043c2:	e018      	b.n	80043f6 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a12      	ldr	r2, [pc, #72]	@ (8004414 <HAL_TIM_Base_MspInit+0x108>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d113      	bne.n	80043f6 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80043ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004404 <HAL_TIM_Base_MspInit+0xf8>)
 80043d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004404 <HAL_TIM_Base_MspInit+0xf8>)
 80043d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80043da:	4b0a      	ldr	r3, [pc, #40]	@ (8004404 <HAL_TIM_Base_MspInit+0xf8>)
 80043dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80043e6:	2200      	movs	r2, #0
 80043e8:	2100      	movs	r1, #0
 80043ea:	2019      	movs	r0, #25
 80043ec:	f001 fea3 	bl	8006136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80043f0:	2019      	movs	r0, #25
 80043f2:	f001 feba 	bl	800616a <HAL_NVIC_EnableIRQ>
}
 80043f6:	bf00      	nop
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40000400 	.word	0x40000400
 8004404:	40021000 	.word	0x40021000
 8004408:	40000800 	.word	0x40000800
 800440c:	40000c00 	.word	0x40000c00
 8004410:	40001000 	.word	0x40001000
 8004414:	40014400 	.word	0x40014400

08004418 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004420:	f107 030c 	add.w	r3, r7, #12
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	605a      	str	r2, [r3, #4]
 800442a:	609a      	str	r2, [r3, #8]
 800442c:	60da      	str	r2, [r3, #12]
 800442e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a11      	ldr	r2, [pc, #68]	@ (800447c <HAL_TIM_MspPostInit+0x64>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d11b      	bne.n	8004472 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800443a:	4b11      	ldr	r3, [pc, #68]	@ (8004480 <HAL_TIM_MspPostInit+0x68>)
 800443c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443e:	4a10      	ldr	r2, [pc, #64]	@ (8004480 <HAL_TIM_MspPostInit+0x68>)
 8004440:	f043 0304 	orr.w	r3, r3, #4
 8004444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004446:	4b0e      	ldr	r3, [pc, #56]	@ (8004480 <HAL_TIM_MspPostInit+0x68>)
 8004448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	60bb      	str	r3, [r7, #8]
 8004450:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004452:	2340      	movs	r3, #64	@ 0x40
 8004454:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004456:	2302      	movs	r3, #2
 8004458:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800445e:	2300      	movs	r3, #0
 8004460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004462:	2302      	movs	r3, #2
 8004464:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004466:	f107 030c 	add.w	r3, r7, #12
 800446a:	4619      	mov	r1, r3
 800446c:	4805      	ldr	r0, [pc, #20]	@ (8004484 <HAL_TIM_MspPostInit+0x6c>)
 800446e:	f002 f9c9 	bl	8006804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004472:	bf00      	nop
 8004474:	3720      	adds	r7, #32
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40000400 	.word	0x40000400
 8004480:	40021000 	.word	0x40021000
 8004484:	48000800 	.word	0x48000800

08004488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b09e      	sub	sp, #120	@ 0x78
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004490:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	609a      	str	r2, [r3, #8]
 800449c:	60da      	str	r2, [r3, #12]
 800449e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044a0:	f107 0310 	add.w	r3, r7, #16
 80044a4:	2254      	movs	r2, #84	@ 0x54
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f007 fb2d 	bl	800bb08 <memset>
  if(huart->Instance==USART2)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a4d      	ldr	r2, [pc, #308]	@ (80045e8 <HAL_UART_MspInit+0x160>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	f040 8092 	bne.w	80045de <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80044ba:	2302      	movs	r3, #2
 80044bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80044be:	2300      	movs	r3, #0
 80044c0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044c2:	f107 0310 	add.w	r3, r7, #16
 80044c6:	4618      	mov	r0, r3
 80044c8:	f003 f948 	bl	800775c <HAL_RCCEx_PeriphCLKConfig>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80044d2:	f7ff fe11 	bl	80040f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80044d6:	4b45      	ldr	r3, [pc, #276]	@ (80045ec <HAL_UART_MspInit+0x164>)
 80044d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044da:	4a44      	ldr	r2, [pc, #272]	@ (80045ec <HAL_UART_MspInit+0x164>)
 80044dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80044e2:	4b42      	ldr	r3, [pc, #264]	@ (80045ec <HAL_UART_MspInit+0x164>)
 80044e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ee:	4b3f      	ldr	r3, [pc, #252]	@ (80045ec <HAL_UART_MspInit+0x164>)
 80044f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044f2:	4a3e      	ldr	r2, [pc, #248]	@ (80045ec <HAL_UART_MspInit+0x164>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044fa:	4b3c      	ldr	r3, [pc, #240]	@ (80045ec <HAL_UART_MspInit+0x164>)
 80044fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004506:	230c      	movs	r3, #12
 8004508:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450a:	2302      	movs	r3, #2
 800450c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450e:	2300      	movs	r3, #0
 8004510:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004512:	2300      	movs	r3, #0
 8004514:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004516:	2307      	movs	r3, #7
 8004518:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800451a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800451e:	4619      	mov	r1, r3
 8004520:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004524:	f002 f96e 	bl	8006804 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8004528:	4b31      	ldr	r3, [pc, #196]	@ (80045f0 <HAL_UART_MspInit+0x168>)
 800452a:	4a32      	ldr	r2, [pc, #200]	@ (80045f4 <HAL_UART_MspInit+0x16c>)
 800452c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800452e:	4b30      	ldr	r3, [pc, #192]	@ (80045f0 <HAL_UART_MspInit+0x168>)
 8004530:	221b      	movs	r2, #27
 8004532:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004534:	4b2e      	ldr	r3, [pc, #184]	@ (80045f0 <HAL_UART_MspInit+0x168>)
 8004536:	2210      	movs	r2, #16
 8004538:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800453a:	4b2d      	ldr	r3, [pc, #180]	@ (80045f0 <HAL_UART_MspInit+0x168>)
 800453c:	2200      	movs	r2, #0
 800453e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004540:	4b2b      	ldr	r3, [pc, #172]	@ (80045f0 <HAL_UART_MspInit+0x168>)
 8004542:	2280      	movs	r2, #128	@ 0x80
 8004544:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004546:	4b2a      	ldr	r3, [pc, #168]	@ (80045f0 <HAL_UART_MspInit+0x168>)
 8004548:	2200      	movs	r2, #0
 800454a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800454c:	4b28      	ldr	r3, [pc, #160]	@ (80045f0 <HAL_UART_MspInit+0x168>)
 800454e:	2200      	movs	r2, #0
 8004550:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004552:	4b27      	ldr	r3, [pc, #156]	@ (80045f0 <HAL_UART_MspInit+0x168>)
 8004554:	2200      	movs	r2, #0
 8004556:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004558:	4b25      	ldr	r3, [pc, #148]	@ (80045f0 <HAL_UART_MspInit+0x168>)
 800455a:	2200      	movs	r2, #0
 800455c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800455e:	4824      	ldr	r0, [pc, #144]	@ (80045f0 <HAL_UART_MspInit+0x168>)
 8004560:	f001 fe1e 	bl	80061a0 <HAL_DMA_Init>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800456a:	f7ff fdc5 	bl	80040f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a1f      	ldr	r2, [pc, #124]	@ (80045f0 <HAL_UART_MspInit+0x168>)
 8004572:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004574:	4a1e      	ldr	r2, [pc, #120]	@ (80045f0 <HAL_UART_MspInit+0x168>)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800457a:	4b1f      	ldr	r3, [pc, #124]	@ (80045f8 <HAL_UART_MspInit+0x170>)
 800457c:	4a1f      	ldr	r2, [pc, #124]	@ (80045fc <HAL_UART_MspInit+0x174>)
 800457e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004580:	4b1d      	ldr	r3, [pc, #116]	@ (80045f8 <HAL_UART_MspInit+0x170>)
 8004582:	221a      	movs	r2, #26
 8004584:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004586:	4b1c      	ldr	r3, [pc, #112]	@ (80045f8 <HAL_UART_MspInit+0x170>)
 8004588:	2200      	movs	r2, #0
 800458a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800458c:	4b1a      	ldr	r3, [pc, #104]	@ (80045f8 <HAL_UART_MspInit+0x170>)
 800458e:	2200      	movs	r2, #0
 8004590:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004592:	4b19      	ldr	r3, [pc, #100]	@ (80045f8 <HAL_UART_MspInit+0x170>)
 8004594:	2280      	movs	r2, #128	@ 0x80
 8004596:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004598:	4b17      	ldr	r3, [pc, #92]	@ (80045f8 <HAL_UART_MspInit+0x170>)
 800459a:	2200      	movs	r2, #0
 800459c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800459e:	4b16      	ldr	r3, [pc, #88]	@ (80045f8 <HAL_UART_MspInit+0x170>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80045a4:	4b14      	ldr	r3, [pc, #80]	@ (80045f8 <HAL_UART_MspInit+0x170>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80045aa:	4b13      	ldr	r3, [pc, #76]	@ (80045f8 <HAL_UART_MspInit+0x170>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80045b0:	4811      	ldr	r0, [pc, #68]	@ (80045f8 <HAL_UART_MspInit+0x170>)
 80045b2:	f001 fdf5 	bl	80061a0 <HAL_DMA_Init>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80045bc:	f7ff fd9c 	bl	80040f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a0d      	ldr	r2, [pc, #52]	@ (80045f8 <HAL_UART_MspInit+0x170>)
 80045c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80045c8:	4a0b      	ldr	r2, [pc, #44]	@ (80045f8 <HAL_UART_MspInit+0x170>)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80045ce:	2200      	movs	r2, #0
 80045d0:	2100      	movs	r1, #0
 80045d2:	2026      	movs	r0, #38	@ 0x26
 80045d4:	f001 fdaf 	bl	8006136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80045d8:	2026      	movs	r0, #38	@ 0x26
 80045da:	f001 fdc6 	bl	800616a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80045de:	bf00      	nop
 80045e0:	3778      	adds	r7, #120	@ 0x78
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	40004400 	.word	0x40004400
 80045ec:	40021000 	.word	0x40021000
 80045f0:	20000908 	.word	0x20000908
 80045f4:	40020008 	.word	0x40020008
 80045f8:	20000968 	.word	0x20000968
 80045fc:	4002001c 	.word	0x4002001c

08004600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004604:	bf00      	nop
 8004606:	e7fd      	b.n	8004604 <NMI_Handler+0x4>

08004608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800460c:	bf00      	nop
 800460e:	e7fd      	b.n	800460c <HardFault_Handler+0x4>

08004610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004614:	bf00      	nop
 8004616:	e7fd      	b.n	8004614 <MemManage_Handler+0x4>

08004618 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800461c:	bf00      	nop
 800461e:	e7fd      	b.n	800461c <BusFault_Handler+0x4>

08004620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004624:	bf00      	nop
 8004626:	e7fd      	b.n	8004624 <UsageFault_Handler+0x4>

08004628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800462c:	bf00      	nop
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004636:	b480      	push	{r7}
 8004638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800463a:	bf00      	nop
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004648:	bf00      	nop
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004656:	f000 f8ef 	bl	8004838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800465a:	bf00      	nop
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004664:	4802      	ldr	r0, [pc, #8]	@ (8004670 <DMA1_Channel1_IRQHandler+0x10>)
 8004666:	f001 ff7e 	bl	8006566 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800466a:	bf00      	nop
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000908 	.word	0x20000908

08004674 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004678:	4802      	ldr	r0, [pc, #8]	@ (8004684 <DMA1_Channel2_IRQHandler+0x10>)
 800467a:	f001 ff74 	bl	8006566 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800467e:	bf00      	nop
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000968 	.word	0x20000968

08004688 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800468c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004690:	f002 fa6a 	bl	8006b68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004694:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004698:	f002 fa66 	bl	8006b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800469c:	bf00      	nop
 800469e:	bd80      	pop	{r7, pc}

080046a0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80046a4:	4802      	ldr	r0, [pc, #8]	@ (80046b0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80046a6:	f003 ffab 	bl	8008600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80046aa:	bf00      	nop
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000770 	.word	0x20000770

080046b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80046b8:	4802      	ldr	r0, [pc, #8]	@ (80046c4 <USART2_IRQHandler+0x10>)
 80046ba:	f005 fce1 	bl	800a080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80046be:	bf00      	nop
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	2000083c 	.word	0x2000083c

080046c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80046cc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80046d0:	f002 fa4a 	bl	8006b68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80046d4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80046d8:	f002 fa46 	bl	8006b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80046dc:	bf00      	nop
 80046de:	bd80      	pop	{r7, pc}

080046e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80046e4:	4802      	ldr	r0, [pc, #8]	@ (80046f0 <TIM5_IRQHandler+0x10>)
 80046e6:	f003 ff8b 	bl	8008600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80046ea:	bf00      	nop
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	200005d8 	.word	0x200005d8

080046f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80046f8:	4802      	ldr	r0, [pc, #8]	@ (8004704 <TIM6_DAC_IRQHandler+0x10>)
 80046fa:	f003 ff81 	bl	8008600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80046fe:	bf00      	nop
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	200006a4 	.word	0x200006a4

08004708 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800470c:	4802      	ldr	r0, [pc, #8]	@ (8004718 <DMA2_Channel1_IRQHandler+0x10>)
 800470e:	f001 ff2a 	bl	8006566 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004712:	bf00      	nop
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000314 	.word	0x20000314

0800471c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004720:	4b06      	ldr	r3, [pc, #24]	@ (800473c <SystemInit+0x20>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004726:	4a05      	ldr	r2, [pc, #20]	@ (800473c <SystemInit+0x20>)
 8004728:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800472c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004730:	bf00      	nop
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	e000ed00 	.word	0xe000ed00

08004740 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 8004740:	480d      	ldr	r0, [pc, #52]	@ (8004778 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004742:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004744:	f7ff ffea 	bl	800471c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004748:	480c      	ldr	r0, [pc, #48]	@ (800477c <LoopForever+0x6>)
  ldr r1, =_edata
 800474a:	490d      	ldr	r1, [pc, #52]	@ (8004780 <LoopForever+0xa>)
  ldr r2, =_sidata
 800474c:	4a0d      	ldr	r2, [pc, #52]	@ (8004784 <LoopForever+0xe>)
  movs r3, #0
 800474e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004750:	e002      	b.n	8004758 <LoopCopyDataInit>

08004752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004756:	3304      	adds	r3, #4

08004758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800475a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800475c:	d3f9      	bcc.n	8004752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800475e:	4a0a      	ldr	r2, [pc, #40]	@ (8004788 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004760:	4c0a      	ldr	r4, [pc, #40]	@ (800478c <LoopForever+0x16>)
  movs r3, #0
 8004762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004764:	e001      	b.n	800476a <LoopFillZerobss>

08004766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004768:	3204      	adds	r2, #4

0800476a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800476a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800476c:	d3fb      	bcc.n	8004766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800476e:	f007 f9d9 	bl	800bb24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004772:	f7fc ffe7 	bl	8001744 <main>

08004776 <LoopForever>:

LoopForever:
    b LoopForever
 8004776:	e7fe      	b.n	8004776 <LoopForever>
  ldr   r0, =_estack
 8004778:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800477c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004780:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8004784:	0800bdfc 	.word	0x0800bdfc
  ldr r2, =_sbss
 8004788:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 800478c:	2000130c 	.word	0x2000130c

08004790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004790:	e7fe      	b.n	8004790 <ADC1_2_IRQHandler>

08004792 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800479c:	2003      	movs	r0, #3
 800479e:	f001 fcbf 	bl	8006120 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047a2:	2000      	movs	r0, #0
 80047a4:	f000 f80e 	bl	80047c4 <HAL_InitTick>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	71fb      	strb	r3, [r7, #7]
 80047b2:	e001      	b.n	80047b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80047b4:	f7ff fca6 	bl	8004104 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80047b8:	79fb      	ldrb	r3, [r7, #7]

}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80047d0:	4b16      	ldr	r3, [pc, #88]	@ (800482c <HAL_InitTick+0x68>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d022      	beq.n	800481e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80047d8:	4b15      	ldr	r3, [pc, #84]	@ (8004830 <HAL_InitTick+0x6c>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4b13      	ldr	r3, [pc, #76]	@ (800482c <HAL_InitTick+0x68>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80047e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	4618      	mov	r0, r3
 80047ee:	f001 fcca 	bl	8006186 <HAL_SYSTICK_Config>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10f      	bne.n	8004818 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b0f      	cmp	r3, #15
 80047fc:	d809      	bhi.n	8004812 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047fe:	2200      	movs	r2, #0
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	f04f 30ff 	mov.w	r0, #4294967295
 8004806:	f001 fc96 	bl	8006136 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800480a:	4a0a      	ldr	r2, [pc, #40]	@ (8004834 <HAL_InitTick+0x70>)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	e007      	b.n	8004822 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	73fb      	strb	r3, [r7, #15]
 8004816:	e004      	b.n	8004822 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	73fb      	strb	r3, [r7, #15]
 800481c:	e001      	b.n	8004822 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004822:	7bfb      	ldrb	r3, [r7, #15]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000220 	.word	0x20000220
 8004830:	20000218 	.word	0x20000218
 8004834:	2000021c 	.word	0x2000021c

08004838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800483c:	4b05      	ldr	r3, [pc, #20]	@ (8004854 <HAL_IncTick+0x1c>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	4b05      	ldr	r3, [pc, #20]	@ (8004858 <HAL_IncTick+0x20>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4413      	add	r3, r2
 8004846:	4a03      	ldr	r2, [pc, #12]	@ (8004854 <HAL_IncTick+0x1c>)
 8004848:	6013      	str	r3, [r2, #0]
}
 800484a:	bf00      	nop
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	200011d0 	.word	0x200011d0
 8004858:	20000220 	.word	0x20000220

0800485c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  return uwTick;
 8004860:	4b03      	ldr	r3, [pc, #12]	@ (8004870 <HAL_GetTick+0x14>)
 8004862:	681b      	ldr	r3, [r3, #0]
}
 8004864:	4618      	mov	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	200011d0 	.word	0x200011d0

08004874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800487c:	f7ff ffee 	bl	800485c <HAL_GetTick>
 8004880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488c:	d004      	beq.n	8004898 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800488e:	4b09      	ldr	r3, [pc, #36]	@ (80048b4 <HAL_Delay+0x40>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4413      	add	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004898:	bf00      	nop
 800489a:	f7ff ffdf 	bl	800485c <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d8f7      	bhi.n	800489a <HAL_Delay+0x26>
  {
  }
}
 80048aa:	bf00      	nop
 80048ac:	bf00      	nop
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20000220 	.word	0x20000220

080048b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	609a      	str	r2, [r3, #8]
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	609a      	str	r2, [r3, #8]
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004914:	4618      	mov	r0, r3
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3360      	adds	r3, #96	@ 0x60
 8004932:	461a      	mov	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	4b08      	ldr	r3, [pc, #32]	@ (8004964 <LL_ADC_SetOffset+0x44>)
 8004942:	4013      	ands	r3, r2
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	4313      	orrs	r3, r2
 8004950:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004958:	bf00      	nop
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	03fff000 	.word	0x03fff000

08004968 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3360      	adds	r3, #96	@ 0x60
 8004976:	461a      	mov	r2, r3
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3360      	adds	r3, #96	@ 0x60
 80049a4:	461a      	mov	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	431a      	orrs	r2, r3
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b087      	sub	sp, #28
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3360      	adds	r3, #96	@ 0x60
 80049da:	461a      	mov	r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80049f4:	bf00      	nop
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3360      	adds	r3, #96	@ 0x60
 8004a10:	461a      	mov	r2, r3
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	431a      	orrs	r2, r3
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004a2a:	bf00      	nop
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	615a      	str	r2, [r3, #20]
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b087      	sub	sp, #28
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3330      	adds	r3, #48	@ 0x30
 8004a92:	461a      	mov	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	0a1b      	lsrs	r3, r3, #8
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	f003 030c 	and.w	r3, r3, #12
 8004a9e:	4413      	add	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f003 031f 	and.w	r3, r3, #31
 8004aac:	211f      	movs	r1, #31
 8004aae:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	401a      	ands	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	0e9b      	lsrs	r3, r3, #26
 8004aba:	f003 011f 	and.w	r1, r3, #31
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f003 031f 	and.w	r3, r3, #31
 8004ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004ace:	bf00      	nop
 8004ad0:	371c      	adds	r7, #28
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b087      	sub	sp, #28
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3314      	adds	r3, #20
 8004aea:	461a      	mov	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	0e5b      	lsrs	r3, r3, #25
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	4413      	add	r3, r2
 8004af8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	0d1b      	lsrs	r3, r3, #20
 8004b02:	f003 031f 	and.w	r3, r3, #31
 8004b06:	2107      	movs	r1, #7
 8004b08:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	401a      	ands	r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	0d1b      	lsrs	r3, r3, #20
 8004b14:	f003 031f 	and.w	r3, r3, #31
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004b24:	bf00      	nop
 8004b26:	371c      	adds	r7, #28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	401a      	ands	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f003 0318 	and.w	r3, r3, #24
 8004b52:	4908      	ldr	r1, [pc, #32]	@ (8004b74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004b54:	40d9      	lsrs	r1, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	400b      	ands	r3, r1
 8004b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	0007ffff 	.word	0x0007ffff

08004b78 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 031f 	and.w	r3, r3, #31
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004ba4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6093      	str	r3, [r2, #8]
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bcc:	d101      	bne.n	8004bd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004bf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004bf4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c1c:	d101      	bne.n	8004c22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c44:	f043 0201 	orr.w	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <LL_ADC_IsEnabled+0x18>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <LL_ADC_IsEnabled+0x1a>
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c8e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c92:	f043 0204 	orr.w	r2, r3, #4
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d101      	bne.n	8004cbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d101      	bne.n	8004ce4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004cf4:	b590      	push	{r4, r7, lr}
 8004cf6:	b089      	sub	sp, #36	@ 0x24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e1a9      	b.n	8005062 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d109      	bne.n	8004d30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7ff fa15 	bl	800414c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff ff3f 	bl	8004bb8 <LL_ADC_IsDeepPowerDownEnabled>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d004      	beq.n	8004d4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff ff25 	bl	8004b94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff ff5a 	bl	8004c08 <LL_ADC_IsInternalRegulatorEnabled>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d115      	bne.n	8004d86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff ff3e 	bl	8004be0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d64:	4b9c      	ldr	r3, [pc, #624]	@ (8004fd8 <HAL_ADC_Init+0x2e4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	099b      	lsrs	r3, r3, #6
 8004d6a:	4a9c      	ldr	r2, [pc, #624]	@ (8004fdc <HAL_ADC_Init+0x2e8>)
 8004d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d70:	099b      	lsrs	r3, r3, #6
 8004d72:	3301      	adds	r3, #1
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d78:	e002      	b.n	8004d80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f9      	bne.n	8004d7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff ff3c 	bl	8004c08 <LL_ADC_IsInternalRegulatorEnabled>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10d      	bne.n	8004db2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d9a:	f043 0210 	orr.w	r2, r3, #16
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da6:	f043 0201 	orr.w	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff ff75 	bl	8004ca6 <LL_ADC_REG_IsConversionOngoing>
 8004dbc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc2:	f003 0310 	and.w	r3, r3, #16
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f040 8142 	bne.w	8005050 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f040 813e 	bne.w	8005050 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004ddc:	f043 0202 	orr.w	r2, r3, #2
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff ff35 	bl	8004c58 <LL_ADC_IsEnabled>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d141      	bne.n	8004e78 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dfc:	d004      	beq.n	8004e08 <HAL_ADC_Init+0x114>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a77      	ldr	r2, [pc, #476]	@ (8004fe0 <HAL_ADC_Init+0x2ec>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d10f      	bne.n	8004e28 <HAL_ADC_Init+0x134>
 8004e08:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004e0c:	f7ff ff24 	bl	8004c58 <LL_ADC_IsEnabled>
 8004e10:	4604      	mov	r4, r0
 8004e12:	4873      	ldr	r0, [pc, #460]	@ (8004fe0 <HAL_ADC_Init+0x2ec>)
 8004e14:	f7ff ff20 	bl	8004c58 <LL_ADC_IsEnabled>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	4323      	orrs	r3, r4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	bf0c      	ite	eq
 8004e20:	2301      	moveq	r3, #1
 8004e22:	2300      	movne	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	e012      	b.n	8004e4e <HAL_ADC_Init+0x15a>
 8004e28:	486e      	ldr	r0, [pc, #440]	@ (8004fe4 <HAL_ADC_Init+0x2f0>)
 8004e2a:	f7ff ff15 	bl	8004c58 <LL_ADC_IsEnabled>
 8004e2e:	4604      	mov	r4, r0
 8004e30:	486d      	ldr	r0, [pc, #436]	@ (8004fe8 <HAL_ADC_Init+0x2f4>)
 8004e32:	f7ff ff11 	bl	8004c58 <LL_ADC_IsEnabled>
 8004e36:	4603      	mov	r3, r0
 8004e38:	431c      	orrs	r4, r3
 8004e3a:	486c      	ldr	r0, [pc, #432]	@ (8004fec <HAL_ADC_Init+0x2f8>)
 8004e3c:	f7ff ff0c 	bl	8004c58 <LL_ADC_IsEnabled>
 8004e40:	4603      	mov	r3, r0
 8004e42:	4323      	orrs	r3, r4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	bf0c      	ite	eq
 8004e48:	2301      	moveq	r3, #1
 8004e4a:	2300      	movne	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d012      	beq.n	8004e78 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e5a:	d004      	beq.n	8004e66 <HAL_ADC_Init+0x172>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a5f      	ldr	r2, [pc, #380]	@ (8004fe0 <HAL_ADC_Init+0x2ec>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d101      	bne.n	8004e6a <HAL_ADC_Init+0x176>
 8004e66:	4a62      	ldr	r2, [pc, #392]	@ (8004ff0 <HAL_ADC_Init+0x2fc>)
 8004e68:	e000      	b.n	8004e6c <HAL_ADC_Init+0x178>
 8004e6a:	4a62      	ldr	r2, [pc, #392]	@ (8004ff4 <HAL_ADC_Init+0x300>)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	4619      	mov	r1, r3
 8004e72:	4610      	mov	r0, r2
 8004e74:	f7ff fd20 	bl	80048b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	7f5b      	ldrb	r3, [r3, #29]
 8004e7c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e82:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004e88:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004e8e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e96:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d106      	bne.n	8004eb4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	045b      	lsls	r3, r3, #17
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d009      	beq.n	8004ed0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	4b48      	ldr	r3, [pc, #288]	@ (8004ff8 <HAL_ADC_Init+0x304>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	69b9      	ldr	r1, [r7, #24]
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff fee4 	bl	8004ccc <LL_ADC_INJ_IsConversionOngoing>
 8004f04:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d17f      	bne.n	800500c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d17c      	bne.n	800500c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f16:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f1e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f20:	4313      	orrs	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f2e:	f023 0302 	bic.w	r3, r3, #2
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	69b9      	ldr	r1, [r7, #24]
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d017      	beq.n	8004f74 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004f52:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004f5c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004f60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6911      	ldr	r1, [r2, #16]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004f72:	e013      	b.n	8004f9c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004f82:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004f94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f98:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d12a      	bne.n	8004ffc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004fb0:	f023 0304 	bic.w	r3, r3, #4
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004fbc:	4311      	orrs	r1, r2
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004fc2:	4311      	orrs	r1, r2
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0201 	orr.w	r2, r2, #1
 8004fd4:	611a      	str	r2, [r3, #16]
 8004fd6:	e019      	b.n	800500c <HAL_ADC_Init+0x318>
 8004fd8:	20000218 	.word	0x20000218
 8004fdc:	053e2d63 	.word	0x053e2d63
 8004fe0:	50000100 	.word	0x50000100
 8004fe4:	50000400 	.word	0x50000400
 8004fe8:	50000500 	.word	0x50000500
 8004fec:	50000600 	.word	0x50000600
 8004ff0:	50000300 	.word	0x50000300
 8004ff4:	50000700 	.word	0x50000700
 8004ff8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0201 	bic.w	r2, r2, #1
 800500a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d10c      	bne.n	800502e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	f023 010f 	bic.w	r1, r3, #15
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	1e5a      	subs	r2, r3, #1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	631a      	str	r2, [r3, #48]	@ 0x30
 800502c:	e007      	b.n	800503e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 020f 	bic.w	r2, r2, #15
 800503c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005042:	f023 0303 	bic.w	r3, r3, #3
 8005046:	f043 0201 	orr.w	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800504e:	e007      	b.n	8005060 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005054:	f043 0210 	orr.w	r2, r3, #16
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005060:	7ffb      	ldrb	r3, [r7, #31]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3724      	adds	r7, #36	@ 0x24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd90      	pop	{r4, r7, pc}
 800506a:	bf00      	nop

0800506c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005080:	d004      	beq.n	800508c <HAL_ADC_Start_DMA+0x20>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a5a      	ldr	r2, [pc, #360]	@ (80051f0 <HAL_ADC_Start_DMA+0x184>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d101      	bne.n	8005090 <HAL_ADC_Start_DMA+0x24>
 800508c:	4b59      	ldr	r3, [pc, #356]	@ (80051f4 <HAL_ADC_Start_DMA+0x188>)
 800508e:	e000      	b.n	8005092 <HAL_ADC_Start_DMA+0x26>
 8005090:	4b59      	ldr	r3, [pc, #356]	@ (80051f8 <HAL_ADC_Start_DMA+0x18c>)
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff fd70 	bl	8004b78 <LL_ADC_GetMultimode>
 8005098:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff fe01 	bl	8004ca6 <LL_ADC_REG_IsConversionOngoing>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f040 809b 	bne.w	80051e2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_ADC_Start_DMA+0x4e>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e096      	b.n	80051e8 <HAL_ADC_Start_DMA+0x17c>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a4d      	ldr	r2, [pc, #308]	@ (80051fc <HAL_ADC_Start_DMA+0x190>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d008      	beq.n	80050de <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	2b05      	cmp	r3, #5
 80050d6:	d002      	beq.n	80050de <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	2b09      	cmp	r3, #9
 80050dc:	d17a      	bne.n	80051d4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 fcf6 	bl	8005ad0 <ADC_Enable>
 80050e4:	4603      	mov	r3, r0
 80050e6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80050e8:	7dfb      	ldrb	r3, [r7, #23]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d16d      	bne.n	80051ca <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a3a      	ldr	r2, [pc, #232]	@ (80051f0 <HAL_ADC_Start_DMA+0x184>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d009      	beq.n	8005120 <HAL_ADC_Start_DMA+0xb4>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a3b      	ldr	r2, [pc, #236]	@ (8005200 <HAL_ADC_Start_DMA+0x194>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d002      	beq.n	800511c <HAL_ADC_Start_DMA+0xb0>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	e003      	b.n	8005124 <HAL_ADC_Start_DMA+0xb8>
 800511c:	4b39      	ldr	r3, [pc, #228]	@ (8005204 <HAL_ADC_Start_DMA+0x198>)
 800511e:	e001      	b.n	8005124 <HAL_ADC_Start_DMA+0xb8>
 8005120:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	6812      	ldr	r2, [r2, #0]
 8005128:	4293      	cmp	r3, r2
 800512a:	d002      	beq.n	8005132 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d105      	bne.n	800513e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005136:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005142:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d006      	beq.n	8005158 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800514e:	f023 0206 	bic.w	r2, r3, #6
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	661a      	str	r2, [r3, #96]	@ 0x60
 8005156:	e002      	b.n	800515e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005162:	4a29      	ldr	r2, [pc, #164]	@ (8005208 <HAL_ADC_Start_DMA+0x19c>)
 8005164:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800516a:	4a28      	ldr	r2, [pc, #160]	@ (800520c <HAL_ADC_Start_DMA+0x1a0>)
 800516c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005172:	4a27      	ldr	r2, [pc, #156]	@ (8005210 <HAL_ADC_Start_DMA+0x1a4>)
 8005174:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	221c      	movs	r2, #28
 800517c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0210 	orr.w	r2, r2, #16
 8005194:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0201 	orr.w	r2, r2, #1
 80051a4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3340      	adds	r3, #64	@ 0x40
 80051b0:	4619      	mov	r1, r3
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f001 f89b 	bl	80062f0 <HAL_DMA_Start_IT>
 80051ba:	4603      	mov	r3, r0
 80051bc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7ff fd5b 	bl	8004c7e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80051c8:	e00d      	b.n	80051e6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80051d2:	e008      	b.n	80051e6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80051e0:	e001      	b.n	80051e6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80051e2:	2302      	movs	r3, #2
 80051e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80051e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	50000100 	.word	0x50000100
 80051f4:	50000300 	.word	0x50000300
 80051f8:	50000700 	.word	0x50000700
 80051fc:	50000600 	.word	0x50000600
 8005200:	50000500 	.word	0x50000500
 8005204:	50000400 	.word	0x50000400
 8005208:	08005bfd 	.word	0x08005bfd
 800520c:	08005cd5 	.word	0x08005cd5
 8005210:	08005cf1 	.word	0x08005cf1

08005214 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b0b6      	sub	sp, #216	@ 0xd8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005260:	2300      	movs	r3, #0
 8005262:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800526a:	2b01      	cmp	r3, #1
 800526c:	d102      	bne.n	8005274 <HAL_ADC_ConfigChannel+0x24>
 800526e:	2302      	movs	r3, #2
 8005270:	f000 bc13 	b.w	8005a9a <HAL_ADC_ConfigChannel+0x84a>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fd10 	bl	8004ca6 <LL_ADC_REG_IsConversionOngoing>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	f040 83f3 	bne.w	8005a74 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6859      	ldr	r1, [r3, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	f7ff fbf1 	bl	8004a82 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff fcfe 	bl	8004ca6 <LL_ADC_REG_IsConversionOngoing>
 80052aa:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff fd0a 	bl	8004ccc <LL_ADC_INJ_IsConversionOngoing>
 80052b8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80052bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f040 81d9 	bne.w	8005678 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80052c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f040 81d4 	bne.w	8005678 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052d8:	d10f      	bne.n	80052fa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2200      	movs	r2, #0
 80052e4:	4619      	mov	r1, r3
 80052e6:	f7ff fbf8 	bl	8004ada <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fb9f 	bl	8004a36 <LL_ADC_SetSamplingTimeCommonConfig>
 80052f8:	e00e      	b.n	8005318 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6819      	ldr	r1, [r3, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	461a      	mov	r2, r3
 8005308:	f7ff fbe7 	bl	8004ada <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2100      	movs	r1, #0
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff fb8f 	bl	8004a36 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	695a      	ldr	r2, [r3, #20]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	08db      	lsrs	r3, r3, #3
 8005324:	f003 0303 	and.w	r3, r3, #3
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	fa02 f303 	lsl.w	r3, r2, r3
 800532e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	2b04      	cmp	r3, #4
 8005338:	d022      	beq.n	8005380 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	6919      	ldr	r1, [r3, #16]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800534a:	f7ff fae9 	bl	8004920 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6919      	ldr	r1, [r3, #16]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	461a      	mov	r2, r3
 800535c:	f7ff fb35 	bl	80049ca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6818      	ldr	r0, [r3, #0]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800536c:	2b01      	cmp	r3, #1
 800536e:	d102      	bne.n	8005376 <HAL_ADC_ConfigChannel+0x126>
 8005370:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005374:	e000      	b.n	8005378 <HAL_ADC_ConfigChannel+0x128>
 8005376:	2300      	movs	r3, #0
 8005378:	461a      	mov	r2, r3
 800537a:	f7ff fb41 	bl	8004a00 <LL_ADC_SetOffsetSaturation>
 800537e:	e17b      	b.n	8005678 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2100      	movs	r1, #0
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff faee 	bl	8004968 <LL_ADC_GetOffsetChannel>
 800538c:	4603      	mov	r3, r0
 800538e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10a      	bne.n	80053ac <HAL_ADC_ConfigChannel+0x15c>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2100      	movs	r1, #0
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff fae3 	bl	8004968 <LL_ADC_GetOffsetChannel>
 80053a2:	4603      	mov	r3, r0
 80053a4:	0e9b      	lsrs	r3, r3, #26
 80053a6:	f003 021f 	and.w	r2, r3, #31
 80053aa:	e01e      	b.n	80053ea <HAL_ADC_ConfigChannel+0x19a>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2100      	movs	r1, #0
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff fad8 	bl	8004968 <LL_ADC_GetOffsetChannel>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80053c2:	fa93 f3a3 	rbit	r3, r3
 80053c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80053ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80053ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80053d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80053da:	2320      	movs	r3, #32
 80053dc:	e004      	b.n	80053e8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80053de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80053e2:	fab3 f383 	clz	r3, r3
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d105      	bne.n	8005402 <HAL_ADC_ConfigChannel+0x1b2>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	0e9b      	lsrs	r3, r3, #26
 80053fc:	f003 031f 	and.w	r3, r3, #31
 8005400:	e018      	b.n	8005434 <HAL_ADC_ConfigChannel+0x1e4>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800540e:	fa93 f3a3 	rbit	r3, r3
 8005412:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800541a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800541e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005426:	2320      	movs	r3, #32
 8005428:	e004      	b.n	8005434 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800542a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800542e:	fab3 f383 	clz	r3, r3
 8005432:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005434:	429a      	cmp	r2, r3
 8005436:	d106      	bne.n	8005446 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2200      	movs	r2, #0
 800543e:	2100      	movs	r1, #0
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff faa7 	bl	8004994 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2101      	movs	r1, #1
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff fa8b 	bl	8004968 <LL_ADC_GetOffsetChannel>
 8005452:	4603      	mov	r3, r0
 8005454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10a      	bne.n	8005472 <HAL_ADC_ConfigChannel+0x222>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2101      	movs	r1, #1
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fa80 	bl	8004968 <LL_ADC_GetOffsetChannel>
 8005468:	4603      	mov	r3, r0
 800546a:	0e9b      	lsrs	r3, r3, #26
 800546c:	f003 021f 	and.w	r2, r3, #31
 8005470:	e01e      	b.n	80054b0 <HAL_ADC_ConfigChannel+0x260>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2101      	movs	r1, #1
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff fa75 	bl	8004968 <LL_ADC_GetOffsetChannel>
 800547e:	4603      	mov	r3, r0
 8005480:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005484:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005488:	fa93 f3a3 	rbit	r3, r3
 800548c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005490:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005494:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005498:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80054a0:	2320      	movs	r3, #32
 80054a2:	e004      	b.n	80054ae <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80054a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80054a8:	fab3 f383 	clz	r3, r3
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d105      	bne.n	80054c8 <HAL_ADC_ConfigChannel+0x278>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	0e9b      	lsrs	r3, r3, #26
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	e018      	b.n	80054fa <HAL_ADC_ConfigChannel+0x2aa>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054d4:	fa93 f3a3 	rbit	r3, r3
 80054d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80054dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80054e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80054ec:	2320      	movs	r3, #32
 80054ee:	e004      	b.n	80054fa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80054f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054f4:	fab3 f383 	clz	r3, r3
 80054f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d106      	bne.n	800550c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2200      	movs	r2, #0
 8005504:	2101      	movs	r1, #1
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff fa44 	bl	8004994 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2102      	movs	r1, #2
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff fa28 	bl	8004968 <LL_ADC_GetOffsetChannel>
 8005518:	4603      	mov	r3, r0
 800551a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10a      	bne.n	8005538 <HAL_ADC_ConfigChannel+0x2e8>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2102      	movs	r1, #2
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff fa1d 	bl	8004968 <LL_ADC_GetOffsetChannel>
 800552e:	4603      	mov	r3, r0
 8005530:	0e9b      	lsrs	r3, r3, #26
 8005532:	f003 021f 	and.w	r2, r3, #31
 8005536:	e01e      	b.n	8005576 <HAL_ADC_ConfigChannel+0x326>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2102      	movs	r1, #2
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fa12 	bl	8004968 <LL_ADC_GetOffsetChannel>
 8005544:	4603      	mov	r3, r0
 8005546:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800554e:	fa93 f3a3 	rbit	r3, r3
 8005552:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005556:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800555a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800555e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005566:	2320      	movs	r3, #32
 8005568:	e004      	b.n	8005574 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800556a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800556e:	fab3 f383 	clz	r3, r3
 8005572:	b2db      	uxtb	r3, r3
 8005574:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800557e:	2b00      	cmp	r3, #0
 8005580:	d105      	bne.n	800558e <HAL_ADC_ConfigChannel+0x33e>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	0e9b      	lsrs	r3, r3, #26
 8005588:	f003 031f 	and.w	r3, r3, #31
 800558c:	e016      	b.n	80055bc <HAL_ADC_ConfigChannel+0x36c>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005596:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800559a:	fa93 f3a3 	rbit	r3, r3
 800559e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80055a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80055a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80055a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80055ae:	2320      	movs	r3, #32
 80055b0:	e004      	b.n	80055bc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80055b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055b6:	fab3 f383 	clz	r3, r3
 80055ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80055bc:	429a      	cmp	r2, r3
 80055be:	d106      	bne.n	80055ce <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2200      	movs	r2, #0
 80055c6:	2102      	movs	r1, #2
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7ff f9e3 	bl	8004994 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2103      	movs	r1, #3
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff f9c7 	bl	8004968 <LL_ADC_GetOffsetChannel>
 80055da:	4603      	mov	r3, r0
 80055dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10a      	bne.n	80055fa <HAL_ADC_ConfigChannel+0x3aa>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2103      	movs	r1, #3
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff f9bc 	bl	8004968 <LL_ADC_GetOffsetChannel>
 80055f0:	4603      	mov	r3, r0
 80055f2:	0e9b      	lsrs	r3, r3, #26
 80055f4:	f003 021f 	and.w	r2, r3, #31
 80055f8:	e017      	b.n	800562a <HAL_ADC_ConfigChannel+0x3da>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2103      	movs	r1, #3
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff f9b1 	bl	8004968 <LL_ADC_GetOffsetChannel>
 8005606:	4603      	mov	r3, r0
 8005608:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800560c:	fa93 f3a3 	rbit	r3, r3
 8005610:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005612:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005614:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005616:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800561c:	2320      	movs	r3, #32
 800561e:	e003      	b.n	8005628 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005620:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005622:	fab3 f383 	clz	r3, r3
 8005626:	b2db      	uxtb	r3, r3
 8005628:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005632:	2b00      	cmp	r3, #0
 8005634:	d105      	bne.n	8005642 <HAL_ADC_ConfigChannel+0x3f2>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	0e9b      	lsrs	r3, r3, #26
 800563c:	f003 031f 	and.w	r3, r3, #31
 8005640:	e011      	b.n	8005666 <HAL_ADC_ConfigChannel+0x416>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005648:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800564a:	fa93 f3a3 	rbit	r3, r3
 800564e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005650:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005652:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005654:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800565a:	2320      	movs	r3, #32
 800565c:	e003      	b.n	8005666 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800565e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005660:	fab3 f383 	clz	r3, r3
 8005664:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005666:	429a      	cmp	r2, r3
 8005668:	d106      	bne.n	8005678 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2200      	movs	r2, #0
 8005670:	2103      	movs	r1, #3
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff f98e 	bl	8004994 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff faeb 	bl	8004c58 <LL_ADC_IsEnabled>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	f040 813d 	bne.w	8005904 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	6819      	ldr	r1, [r3, #0]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	461a      	mov	r2, r3
 8005698:	f7ff fa4a 	bl	8004b30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	4aa2      	ldr	r2, [pc, #648]	@ (800592c <HAL_ADC_ConfigChannel+0x6dc>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	f040 812e 	bne.w	8005904 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10b      	bne.n	80056d0 <HAL_ADC_ConfigChannel+0x480>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	0e9b      	lsrs	r3, r3, #26
 80056be:	3301      	adds	r3, #1
 80056c0:	f003 031f 	and.w	r3, r3, #31
 80056c4:	2b09      	cmp	r3, #9
 80056c6:	bf94      	ite	ls
 80056c8:	2301      	movls	r3, #1
 80056ca:	2300      	movhi	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	e019      	b.n	8005704 <HAL_ADC_ConfigChannel+0x4b4>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056d8:	fa93 f3a3 	rbit	r3, r3
 80056dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80056de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056e0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80056e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80056e8:	2320      	movs	r3, #32
 80056ea:	e003      	b.n	80056f4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80056ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056ee:	fab3 f383 	clz	r3, r3
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	3301      	adds	r3, #1
 80056f6:	f003 031f 	and.w	r3, r3, #31
 80056fa:	2b09      	cmp	r3, #9
 80056fc:	bf94      	ite	ls
 80056fe:	2301      	movls	r3, #1
 8005700:	2300      	movhi	r3, #0
 8005702:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005704:	2b00      	cmp	r3, #0
 8005706:	d079      	beq.n	80057fc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005710:	2b00      	cmp	r3, #0
 8005712:	d107      	bne.n	8005724 <HAL_ADC_ConfigChannel+0x4d4>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	0e9b      	lsrs	r3, r3, #26
 800571a:	3301      	adds	r3, #1
 800571c:	069b      	lsls	r3, r3, #26
 800571e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005722:	e015      	b.n	8005750 <HAL_ADC_ConfigChannel+0x500>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800572c:	fa93 f3a3 	rbit	r3, r3
 8005730:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005734:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800573c:	2320      	movs	r3, #32
 800573e:	e003      	b.n	8005748 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005742:	fab3 f383 	clz	r3, r3
 8005746:	b2db      	uxtb	r3, r3
 8005748:	3301      	adds	r3, #1
 800574a:	069b      	lsls	r3, r3, #26
 800574c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005758:	2b00      	cmp	r3, #0
 800575a:	d109      	bne.n	8005770 <HAL_ADC_ConfigChannel+0x520>
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	0e9b      	lsrs	r3, r3, #26
 8005762:	3301      	adds	r3, #1
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	2101      	movs	r1, #1
 800576a:	fa01 f303 	lsl.w	r3, r1, r3
 800576e:	e017      	b.n	80057a0 <HAL_ADC_ConfigChannel+0x550>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005776:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005778:	fa93 f3a3 	rbit	r3, r3
 800577c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800577e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005780:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005788:	2320      	movs	r3, #32
 800578a:	e003      	b.n	8005794 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800578c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800578e:	fab3 f383 	clz	r3, r3
 8005792:	b2db      	uxtb	r3, r3
 8005794:	3301      	adds	r3, #1
 8005796:	f003 031f 	and.w	r3, r3, #31
 800579a:	2101      	movs	r1, #1
 800579c:	fa01 f303 	lsl.w	r3, r1, r3
 80057a0:	ea42 0103 	orr.w	r1, r2, r3
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <HAL_ADC_ConfigChannel+0x576>
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	0e9b      	lsrs	r3, r3, #26
 80057b6:	3301      	adds	r3, #1
 80057b8:	f003 021f 	and.w	r2, r3, #31
 80057bc:	4613      	mov	r3, r2
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	4413      	add	r3, r2
 80057c2:	051b      	lsls	r3, r3, #20
 80057c4:	e018      	b.n	80057f8 <HAL_ADC_ConfigChannel+0x5a8>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ce:	fa93 f3a3 	rbit	r3, r3
 80057d2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80057d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80057d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80057de:	2320      	movs	r3, #32
 80057e0:	e003      	b.n	80057ea <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80057e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057e4:	fab3 f383 	clz	r3, r3
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	3301      	adds	r3, #1
 80057ec:	f003 021f 	and.w	r2, r3, #31
 80057f0:	4613      	mov	r3, r2
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	4413      	add	r3, r2
 80057f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057f8:	430b      	orrs	r3, r1
 80057fa:	e07e      	b.n	80058fa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005804:	2b00      	cmp	r3, #0
 8005806:	d107      	bne.n	8005818 <HAL_ADC_ConfigChannel+0x5c8>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	0e9b      	lsrs	r3, r3, #26
 800580e:	3301      	adds	r3, #1
 8005810:	069b      	lsls	r3, r3, #26
 8005812:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005816:	e015      	b.n	8005844 <HAL_ADC_ConfigChannel+0x5f4>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005820:	fa93 f3a3 	rbit	r3, r3
 8005824:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005828:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800582a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005830:	2320      	movs	r3, #32
 8005832:	e003      	b.n	800583c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005836:	fab3 f383 	clz	r3, r3
 800583a:	b2db      	uxtb	r3, r3
 800583c:	3301      	adds	r3, #1
 800583e:	069b      	lsls	r3, r3, #26
 8005840:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800584c:	2b00      	cmp	r3, #0
 800584e:	d109      	bne.n	8005864 <HAL_ADC_ConfigChannel+0x614>
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	0e9b      	lsrs	r3, r3, #26
 8005856:	3301      	adds	r3, #1
 8005858:	f003 031f 	and.w	r3, r3, #31
 800585c:	2101      	movs	r1, #1
 800585e:	fa01 f303 	lsl.w	r3, r1, r3
 8005862:	e017      	b.n	8005894 <HAL_ADC_ConfigChannel+0x644>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	fa93 f3a3 	rbit	r3, r3
 8005870:	61fb      	str	r3, [r7, #28]
  return result;
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800587c:	2320      	movs	r3, #32
 800587e:	e003      	b.n	8005888 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005882:	fab3 f383 	clz	r3, r3
 8005886:	b2db      	uxtb	r3, r3
 8005888:	3301      	adds	r3, #1
 800588a:	f003 031f 	and.w	r3, r3, #31
 800588e:	2101      	movs	r1, #1
 8005890:	fa01 f303 	lsl.w	r3, r1, r3
 8005894:	ea42 0103 	orr.w	r1, r2, r3
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10d      	bne.n	80058c0 <HAL_ADC_ConfigChannel+0x670>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	0e9b      	lsrs	r3, r3, #26
 80058aa:	3301      	adds	r3, #1
 80058ac:	f003 021f 	and.w	r2, r3, #31
 80058b0:	4613      	mov	r3, r2
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	4413      	add	r3, r2
 80058b6:	3b1e      	subs	r3, #30
 80058b8:	051b      	lsls	r3, r3, #20
 80058ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80058be:	e01b      	b.n	80058f8 <HAL_ADC_ConfigChannel+0x6a8>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	fa93 f3a3 	rbit	r3, r3
 80058cc:	613b      	str	r3, [r7, #16]
  return result;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80058d8:	2320      	movs	r3, #32
 80058da:	e003      	b.n	80058e4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	fab3 f383 	clz	r3, r3
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	3301      	adds	r3, #1
 80058e6:	f003 021f 	and.w	r2, r3, #31
 80058ea:	4613      	mov	r3, r2
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	4413      	add	r3, r2
 80058f0:	3b1e      	subs	r3, #30
 80058f2:	051b      	lsls	r3, r3, #20
 80058f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058f8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058fe:	4619      	mov	r1, r3
 8005900:	f7ff f8eb 	bl	8004ada <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	4b09      	ldr	r3, [pc, #36]	@ (8005930 <HAL_ADC_ConfigChannel+0x6e0>)
 800590a:	4013      	ands	r3, r2
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 80be 	beq.w	8005a8e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800591a:	d004      	beq.n	8005926 <HAL_ADC_ConfigChannel+0x6d6>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a04      	ldr	r2, [pc, #16]	@ (8005934 <HAL_ADC_ConfigChannel+0x6e4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d10a      	bne.n	800593c <HAL_ADC_ConfigChannel+0x6ec>
 8005926:	4b04      	ldr	r3, [pc, #16]	@ (8005938 <HAL_ADC_ConfigChannel+0x6e8>)
 8005928:	e009      	b.n	800593e <HAL_ADC_ConfigChannel+0x6ee>
 800592a:	bf00      	nop
 800592c:	407f0000 	.word	0x407f0000
 8005930:	80080000 	.word	0x80080000
 8005934:	50000100 	.word	0x50000100
 8005938:	50000300 	.word	0x50000300
 800593c:	4b59      	ldr	r3, [pc, #356]	@ (8005aa4 <HAL_ADC_ConfigChannel+0x854>)
 800593e:	4618      	mov	r0, r3
 8005940:	f7fe ffe0 	bl	8004904 <LL_ADC_GetCommonPathInternalCh>
 8005944:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a56      	ldr	r2, [pc, #344]	@ (8005aa8 <HAL_ADC_ConfigChannel+0x858>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d004      	beq.n	800595c <HAL_ADC_ConfigChannel+0x70c>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a55      	ldr	r2, [pc, #340]	@ (8005aac <HAL_ADC_ConfigChannel+0x85c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d13a      	bne.n	80059d2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800595c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005960:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d134      	bne.n	80059d2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005970:	d005      	beq.n	800597e <HAL_ADC_ConfigChannel+0x72e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a4e      	ldr	r2, [pc, #312]	@ (8005ab0 <HAL_ADC_ConfigChannel+0x860>)
 8005978:	4293      	cmp	r3, r2
 800597a:	f040 8085 	bne.w	8005a88 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005986:	d004      	beq.n	8005992 <HAL_ADC_ConfigChannel+0x742>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a49      	ldr	r2, [pc, #292]	@ (8005ab4 <HAL_ADC_ConfigChannel+0x864>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d101      	bne.n	8005996 <HAL_ADC_ConfigChannel+0x746>
 8005992:	4a49      	ldr	r2, [pc, #292]	@ (8005ab8 <HAL_ADC_ConfigChannel+0x868>)
 8005994:	e000      	b.n	8005998 <HAL_ADC_ConfigChannel+0x748>
 8005996:	4a43      	ldr	r2, [pc, #268]	@ (8005aa4 <HAL_ADC_ConfigChannel+0x854>)
 8005998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800599c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80059a0:	4619      	mov	r1, r3
 80059a2:	4610      	mov	r0, r2
 80059a4:	f7fe ff9b 	bl	80048de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80059a8:	4b44      	ldr	r3, [pc, #272]	@ (8005abc <HAL_ADC_ConfigChannel+0x86c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	099b      	lsrs	r3, r3, #6
 80059ae:	4a44      	ldr	r2, [pc, #272]	@ (8005ac0 <HAL_ADC_ConfigChannel+0x870>)
 80059b0:	fba2 2303 	umull	r2, r3, r2, r3
 80059b4:	099b      	lsrs	r3, r3, #6
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	4613      	mov	r3, r2
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	4413      	add	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80059c2:	e002      	b.n	80059ca <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f9      	bne.n	80059c4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80059d0:	e05a      	b.n	8005a88 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a3b      	ldr	r2, [pc, #236]	@ (8005ac4 <HAL_ADC_ConfigChannel+0x874>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d125      	bne.n	8005a28 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80059dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d11f      	bne.n	8005a28 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a31      	ldr	r2, [pc, #196]	@ (8005ab4 <HAL_ADC_ConfigChannel+0x864>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d104      	bne.n	80059fc <HAL_ADC_ConfigChannel+0x7ac>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a34      	ldr	r2, [pc, #208]	@ (8005ac8 <HAL_ADC_ConfigChannel+0x878>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d047      	beq.n	8005a8c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a04:	d004      	beq.n	8005a10 <HAL_ADC_ConfigChannel+0x7c0>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8005ab4 <HAL_ADC_ConfigChannel+0x864>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d101      	bne.n	8005a14 <HAL_ADC_ConfigChannel+0x7c4>
 8005a10:	4a29      	ldr	r2, [pc, #164]	@ (8005ab8 <HAL_ADC_ConfigChannel+0x868>)
 8005a12:	e000      	b.n	8005a16 <HAL_ADC_ConfigChannel+0x7c6>
 8005a14:	4a23      	ldr	r2, [pc, #140]	@ (8005aa4 <HAL_ADC_ConfigChannel+0x854>)
 8005a16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4610      	mov	r0, r2
 8005a22:	f7fe ff5c 	bl	80048de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a26:	e031      	b.n	8005a8c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a27      	ldr	r2, [pc, #156]	@ (8005acc <HAL_ADC_ConfigChannel+0x87c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d12d      	bne.n	8005a8e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005a32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d127      	bne.n	8005a8e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab4 <HAL_ADC_ConfigChannel+0x864>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d022      	beq.n	8005a8e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a50:	d004      	beq.n	8005a5c <HAL_ADC_ConfigChannel+0x80c>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a17      	ldr	r2, [pc, #92]	@ (8005ab4 <HAL_ADC_ConfigChannel+0x864>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d101      	bne.n	8005a60 <HAL_ADC_ConfigChannel+0x810>
 8005a5c:	4a16      	ldr	r2, [pc, #88]	@ (8005ab8 <HAL_ADC_ConfigChannel+0x868>)
 8005a5e:	e000      	b.n	8005a62 <HAL_ADC_ConfigChannel+0x812>
 8005a60:	4a10      	ldr	r2, [pc, #64]	@ (8005aa4 <HAL_ADC_ConfigChannel+0x854>)
 8005a62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	f7fe ff36 	bl	80048de <LL_ADC_SetCommonPathInternalCh>
 8005a72:	e00c      	b.n	8005a8e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a78:	f043 0220 	orr.w	r2, r3, #32
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005a86:	e002      	b.n	8005a8e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a88:	bf00      	nop
 8005a8a:	e000      	b.n	8005a8e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005a96:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	37d8      	adds	r7, #216	@ 0xd8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	50000700 	.word	0x50000700
 8005aa8:	c3210000 	.word	0xc3210000
 8005aac:	90c00010 	.word	0x90c00010
 8005ab0:	50000600 	.word	0x50000600
 8005ab4:	50000100 	.word	0x50000100
 8005ab8:	50000300 	.word	0x50000300
 8005abc:	20000218 	.word	0x20000218
 8005ac0:	053e2d63 	.word	0x053e2d63
 8005ac4:	c7520000 	.word	0xc7520000
 8005ac8:	50000500 	.word	0x50000500
 8005acc:	cb840000 	.word	0xcb840000

08005ad0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff f8b9 	bl	8004c58 <LL_ADC_IsEnabled>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d176      	bne.n	8005bda <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	4b3c      	ldr	r3, [pc, #240]	@ (8005be4 <ADC_Enable+0x114>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00d      	beq.n	8005b16 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005afe:	f043 0210 	orr.w	r2, r3, #16
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b0a:	f043 0201 	orr.w	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e062      	b.n	8005bdc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff f888 	bl	8004c30 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b28:	d004      	beq.n	8005b34 <ADC_Enable+0x64>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a2e      	ldr	r2, [pc, #184]	@ (8005be8 <ADC_Enable+0x118>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d101      	bne.n	8005b38 <ADC_Enable+0x68>
 8005b34:	4b2d      	ldr	r3, [pc, #180]	@ (8005bec <ADC_Enable+0x11c>)
 8005b36:	e000      	b.n	8005b3a <ADC_Enable+0x6a>
 8005b38:	4b2d      	ldr	r3, [pc, #180]	@ (8005bf0 <ADC_Enable+0x120>)
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fe fee2 	bl	8004904 <LL_ADC_GetCommonPathInternalCh>
 8005b40:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005b42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d013      	beq.n	8005b72 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8005bf4 <ADC_Enable+0x124>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	099b      	lsrs	r3, r3, #6
 8005b50:	4a29      	ldr	r2, [pc, #164]	@ (8005bf8 <ADC_Enable+0x128>)
 8005b52:	fba2 2303 	umull	r2, r3, r2, r3
 8005b56:	099b      	lsrs	r3, r3, #6
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005b64:	e002      	b.n	8005b6c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1f9      	bne.n	8005b66 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005b72:	f7fe fe73 	bl	800485c <HAL_GetTick>
 8005b76:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b78:	e028      	b.n	8005bcc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7ff f86a 	bl	8004c58 <LL_ADC_IsEnabled>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d104      	bne.n	8005b94 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff f84e 	bl	8004c30 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005b94:	f7fe fe62 	bl	800485c <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d914      	bls.n	8005bcc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d00d      	beq.n	8005bcc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb4:	f043 0210 	orr.w	r2, r3, #16
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bc0:	f043 0201 	orr.w	r2, r3, #1
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e007      	b.n	8005bdc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d1cf      	bne.n	8005b7a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	8000003f 	.word	0x8000003f
 8005be8:	50000100 	.word	0x50000100
 8005bec:	50000300 	.word	0x50000300
 8005bf0:	50000700 	.word	0x50000700
 8005bf4:	20000218 	.word	0x20000218
 8005bf8:	053e2d63 	.word	0x053e2d63

08005bfc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c0e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d14b      	bne.n	8005cae <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c1a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0308 	and.w	r3, r3, #8
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d021      	beq.n	8005c74 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fe ff11 	bl	8004a5c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d032      	beq.n	8005ca6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d12b      	bne.n	8005ca6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c52:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d11f      	bne.n	8005ca6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c6a:	f043 0201 	orr.w	r2, r3, #1
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c72:	e018      	b.n	8005ca6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d111      	bne.n	8005ca6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d105      	bne.n	8005ca6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c9e:	f043 0201 	orr.w	r2, r3, #1
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f7ff fab4 	bl	8005214 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005cac:	e00e      	b.n	8005ccc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb2:	f003 0310 	and.w	r3, r3, #16
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7ff fabe 	bl	800523c <HAL_ADC_ErrorCallback>
}
 8005cc0:	e004      	b.n	8005ccc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	4798      	blx	r3
}
 8005ccc:	bf00      	nop
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7ff faa0 	bl	8005228 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ce8:	bf00      	nop
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d0e:	f043 0204 	orr.w	r2, r3, #4
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f7ff fa90 	bl	800523c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d1c:	bf00      	nop
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <LL_ADC_IsEnabled>:
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d101      	bne.n	8005d3c <LL_ADC_IsEnabled+0x18>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <LL_ADC_IsEnabled+0x1a>
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <LL_ADC_REG_IsConversionOngoing>:
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 0304 	and.w	r3, r3, #4
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d101      	bne.n	8005d62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005d70:	b590      	push	{r4, r7, lr}
 8005d72:	b0a1      	sub	sp, #132	@ 0x84
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e0e7      	b.n	8005f5e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005d96:	2300      	movs	r3, #0
 8005d98:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005da6:	d102      	bne.n	8005dae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005da8:	4b6f      	ldr	r3, [pc, #444]	@ (8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005daa:	60bb      	str	r3, [r7, #8]
 8005dac:	e009      	b.n	8005dc2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a6e      	ldr	r2, [pc, #440]	@ (8005f6c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d102      	bne.n	8005dbe <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005db8:	4b6d      	ldr	r3, [pc, #436]	@ (8005f70 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005dba:	60bb      	str	r3, [r7, #8]
 8005dbc:	e001      	b.n	8005dc2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10b      	bne.n	8005de0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dcc:	f043 0220 	orr.w	r2, r3, #32
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e0be      	b.n	8005f5e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff ffb1 	bl	8005d4a <LL_ADC_REG_IsConversionOngoing>
 8005de8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7ff ffab 	bl	8005d4a <LL_ADC_REG_IsConversionOngoing>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f040 80a0 	bne.w	8005f3c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005dfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f040 809c 	bne.w	8005f3c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e0c:	d004      	beq.n	8005e18 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a55      	ldr	r2, [pc, #340]	@ (8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d101      	bne.n	8005e1c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005e18:	4b56      	ldr	r3, [pc, #344]	@ (8005f74 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005e1a:	e000      	b.n	8005e1e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005e1c:	4b56      	ldr	r3, [pc, #344]	@ (8005f78 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005e1e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d04b      	beq.n	8005ec0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005e28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	6859      	ldr	r1, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005e3a:	035b      	lsls	r3, r3, #13
 8005e3c:	430b      	orrs	r3, r1
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e4c:	d004      	beq.n	8005e58 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a45      	ldr	r2, [pc, #276]	@ (8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d10f      	bne.n	8005e78 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005e58:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005e5c:	f7ff ff62 	bl	8005d24 <LL_ADC_IsEnabled>
 8005e60:	4604      	mov	r4, r0
 8005e62:	4841      	ldr	r0, [pc, #260]	@ (8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005e64:	f7ff ff5e 	bl	8005d24 <LL_ADC_IsEnabled>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	4323      	orrs	r3, r4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	bf0c      	ite	eq
 8005e70:	2301      	moveq	r3, #1
 8005e72:	2300      	movne	r3, #0
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	e012      	b.n	8005e9e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005e78:	483c      	ldr	r0, [pc, #240]	@ (8005f6c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005e7a:	f7ff ff53 	bl	8005d24 <LL_ADC_IsEnabled>
 8005e7e:	4604      	mov	r4, r0
 8005e80:	483b      	ldr	r0, [pc, #236]	@ (8005f70 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005e82:	f7ff ff4f 	bl	8005d24 <LL_ADC_IsEnabled>
 8005e86:	4603      	mov	r3, r0
 8005e88:	431c      	orrs	r4, r3
 8005e8a:	483c      	ldr	r0, [pc, #240]	@ (8005f7c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005e8c:	f7ff ff4a 	bl	8005d24 <LL_ADC_IsEnabled>
 8005e90:	4603      	mov	r3, r0
 8005e92:	4323      	orrs	r3, r4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	bf0c      	ite	eq
 8005e98:	2301      	moveq	r3, #1
 8005e9a:	2300      	movne	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d056      	beq.n	8005f50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005ea2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005eaa:	f023 030f 	bic.w	r3, r3, #15
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	6811      	ldr	r1, [r2, #0]
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	6892      	ldr	r2, [r2, #8]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ebc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ebe:	e047      	b.n	8005f50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005ec0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ec8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005eca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ed4:	d004      	beq.n	8005ee0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a23      	ldr	r2, [pc, #140]	@ (8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d10f      	bne.n	8005f00 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005ee0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005ee4:	f7ff ff1e 	bl	8005d24 <LL_ADC_IsEnabled>
 8005ee8:	4604      	mov	r4, r0
 8005eea:	481f      	ldr	r0, [pc, #124]	@ (8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005eec:	f7ff ff1a 	bl	8005d24 <LL_ADC_IsEnabled>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	4323      	orrs	r3, r4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	bf0c      	ite	eq
 8005ef8:	2301      	moveq	r3, #1
 8005efa:	2300      	movne	r3, #0
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	e012      	b.n	8005f26 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005f00:	481a      	ldr	r0, [pc, #104]	@ (8005f6c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005f02:	f7ff ff0f 	bl	8005d24 <LL_ADC_IsEnabled>
 8005f06:	4604      	mov	r4, r0
 8005f08:	4819      	ldr	r0, [pc, #100]	@ (8005f70 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005f0a:	f7ff ff0b 	bl	8005d24 <LL_ADC_IsEnabled>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	431c      	orrs	r4, r3
 8005f12:	481a      	ldr	r0, [pc, #104]	@ (8005f7c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005f14:	f7ff ff06 	bl	8005d24 <LL_ADC_IsEnabled>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	4323      	orrs	r3, r4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	bf0c      	ite	eq
 8005f20:	2301      	moveq	r3, #1
 8005f22:	2300      	movne	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d012      	beq.n	8005f50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005f2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005f32:	f023 030f 	bic.w	r3, r3, #15
 8005f36:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005f38:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f3a:	e009      	b.n	8005f50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f40:	f043 0220 	orr.w	r2, r3, #32
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005f4e:	e000      	b.n	8005f52 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005f5a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3784      	adds	r7, #132	@ 0x84
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd90      	pop	{r4, r7, pc}
 8005f66:	bf00      	nop
 8005f68:	50000100 	.word	0x50000100
 8005f6c:	50000400 	.word	0x50000400
 8005f70:	50000500 	.word	0x50000500
 8005f74:	50000300 	.word	0x50000300
 8005f78:	50000700 	.word	0x50000700
 8005f7c:	50000600 	.word	0x50000600

08005f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f90:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005fa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fb2:	4a04      	ldr	r2, [pc, #16]	@ (8005fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	60d3      	str	r3, [r2, #12]
}
 8005fb8:	bf00      	nop
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	e000ed00 	.word	0xe000ed00

08005fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fcc:	4b04      	ldr	r3, [pc, #16]	@ (8005fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	0a1b      	lsrs	r3, r3, #8
 8005fd2:	f003 0307 	and.w	r3, r3, #7
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	e000ed00 	.word	0xe000ed00

08005fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	4603      	mov	r3, r0
 8005fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	db0b      	blt.n	800600e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ff6:	79fb      	ldrb	r3, [r7, #7]
 8005ff8:	f003 021f 	and.w	r2, r3, #31
 8005ffc:	4907      	ldr	r1, [pc, #28]	@ (800601c <__NVIC_EnableIRQ+0x38>)
 8005ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	2001      	movs	r0, #1
 8006006:	fa00 f202 	lsl.w	r2, r0, r2
 800600a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	e000e100 	.word	0xe000e100

08006020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	4603      	mov	r3, r0
 8006028:	6039      	str	r1, [r7, #0]
 800602a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800602c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006030:	2b00      	cmp	r3, #0
 8006032:	db0a      	blt.n	800604a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	b2da      	uxtb	r2, r3
 8006038:	490c      	ldr	r1, [pc, #48]	@ (800606c <__NVIC_SetPriority+0x4c>)
 800603a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800603e:	0112      	lsls	r2, r2, #4
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	440b      	add	r3, r1
 8006044:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006048:	e00a      	b.n	8006060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	b2da      	uxtb	r2, r3
 800604e:	4908      	ldr	r1, [pc, #32]	@ (8006070 <__NVIC_SetPriority+0x50>)
 8006050:	79fb      	ldrb	r3, [r7, #7]
 8006052:	f003 030f 	and.w	r3, r3, #15
 8006056:	3b04      	subs	r3, #4
 8006058:	0112      	lsls	r2, r2, #4
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	440b      	add	r3, r1
 800605e:	761a      	strb	r2, [r3, #24]
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	e000e100 	.word	0xe000e100
 8006070:	e000ed00 	.word	0xe000ed00

08006074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006074:	b480      	push	{r7}
 8006076:	b089      	sub	sp, #36	@ 0x24
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	f1c3 0307 	rsb	r3, r3, #7
 800608e:	2b04      	cmp	r3, #4
 8006090:	bf28      	it	cs
 8006092:	2304      	movcs	r3, #4
 8006094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	3304      	adds	r3, #4
 800609a:	2b06      	cmp	r3, #6
 800609c:	d902      	bls.n	80060a4 <NVIC_EncodePriority+0x30>
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	3b03      	subs	r3, #3
 80060a2:	e000      	b.n	80060a6 <NVIC_EncodePriority+0x32>
 80060a4:	2300      	movs	r3, #0
 80060a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060a8:	f04f 32ff 	mov.w	r2, #4294967295
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	43da      	mvns	r2, r3
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	401a      	ands	r2, r3
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060bc:	f04f 31ff 	mov.w	r1, #4294967295
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	fa01 f303 	lsl.w	r3, r1, r3
 80060c6:	43d9      	mvns	r1, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060cc:	4313      	orrs	r3, r2
         );
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3724      	adds	r7, #36	@ 0x24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
	...

080060dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060ec:	d301      	bcc.n	80060f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060ee:	2301      	movs	r3, #1
 80060f0:	e00f      	b.n	8006112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060f2:	4a0a      	ldr	r2, [pc, #40]	@ (800611c <SysTick_Config+0x40>)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060fa:	210f      	movs	r1, #15
 80060fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006100:	f7ff ff8e 	bl	8006020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006104:	4b05      	ldr	r3, [pc, #20]	@ (800611c <SysTick_Config+0x40>)
 8006106:	2200      	movs	r2, #0
 8006108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800610a:	4b04      	ldr	r3, [pc, #16]	@ (800611c <SysTick_Config+0x40>)
 800610c:	2207      	movs	r2, #7
 800610e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	e000e010 	.word	0xe000e010

08006120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7ff ff29 	bl	8005f80 <__NVIC_SetPriorityGrouping>
}
 800612e:	bf00      	nop
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b086      	sub	sp, #24
 800613a:	af00      	add	r7, sp, #0
 800613c:	4603      	mov	r3, r0
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	607a      	str	r2, [r7, #4]
 8006142:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006144:	f7ff ff40 	bl	8005fc8 <__NVIC_GetPriorityGrouping>
 8006148:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	68b9      	ldr	r1, [r7, #8]
 800614e:	6978      	ldr	r0, [r7, #20]
 8006150:	f7ff ff90 	bl	8006074 <NVIC_EncodePriority>
 8006154:	4602      	mov	r2, r0
 8006156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800615a:	4611      	mov	r1, r2
 800615c:	4618      	mov	r0, r3
 800615e:	f7ff ff5f 	bl	8006020 <__NVIC_SetPriority>
}
 8006162:	bf00      	nop
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b082      	sub	sp, #8
 800616e:	af00      	add	r7, sp, #0
 8006170:	4603      	mov	r3, r0
 8006172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006178:	4618      	mov	r0, r3
 800617a:	f7ff ff33 	bl	8005fe4 <__NVIC_EnableIRQ>
}
 800617e:	bf00      	nop
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b082      	sub	sp, #8
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7ff ffa4 	bl	80060dc <SysTick_Config>
 8006194:	4603      	mov	r3, r0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e08d      	b.n	80062ce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	4b47      	ldr	r3, [pc, #284]	@ (80062d8 <HAL_DMA_Init+0x138>)
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d80f      	bhi.n	80061de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	4b45      	ldr	r3, [pc, #276]	@ (80062dc <HAL_DMA_Init+0x13c>)
 80061c6:	4413      	add	r3, r2
 80061c8:	4a45      	ldr	r2, [pc, #276]	@ (80062e0 <HAL_DMA_Init+0x140>)
 80061ca:	fba2 2303 	umull	r2, r3, r2, r3
 80061ce:	091b      	lsrs	r3, r3, #4
 80061d0:	009a      	lsls	r2, r3, #2
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a42      	ldr	r2, [pc, #264]	@ (80062e4 <HAL_DMA_Init+0x144>)
 80061da:	641a      	str	r2, [r3, #64]	@ 0x40
 80061dc:	e00e      	b.n	80061fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	4b40      	ldr	r3, [pc, #256]	@ (80062e8 <HAL_DMA_Init+0x148>)
 80061e6:	4413      	add	r3, r2
 80061e8:	4a3d      	ldr	r2, [pc, #244]	@ (80062e0 <HAL_DMA_Init+0x140>)
 80061ea:	fba2 2303 	umull	r2, r3, r2, r3
 80061ee:	091b      	lsrs	r3, r3, #4
 80061f0:	009a      	lsls	r2, r3, #2
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a3c      	ldr	r2, [pc, #240]	@ (80062ec <HAL_DMA_Init+0x14c>)
 80061fa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006216:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006220:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800622c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006238:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4313      	orrs	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fa76 	bl	8006740 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800625c:	d102      	bne.n	8006264 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006278:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d010      	beq.n	80062a4 <HAL_DMA_Init+0x104>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2b04      	cmp	r3, #4
 8006288:	d80c      	bhi.n	80062a4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fa96 	bl	80067bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80062a0:	605a      	str	r2, [r3, #4]
 80062a2:	e008      	b.n	80062b6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	40020407 	.word	0x40020407
 80062dc:	bffdfff8 	.word	0xbffdfff8
 80062e0:	cccccccd 	.word	0xcccccccd
 80062e4:	40020000 	.word	0x40020000
 80062e8:	bffdfbf8 	.word	0xbffdfbf8
 80062ec:	40020400 	.word	0x40020400

080062f0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006308:	2b01      	cmp	r3, #1
 800630a:	d101      	bne.n	8006310 <HAL_DMA_Start_IT+0x20>
 800630c:	2302      	movs	r3, #2
 800630e:	e066      	b.n	80063de <HAL_DMA_Start_IT+0xee>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b01      	cmp	r3, #1
 8006322:	d155      	bne.n	80063d0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0201 	bic.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	68b9      	ldr	r1, [r7, #8]
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 f9bb 	bl	80066c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006352:	2b00      	cmp	r3, #0
 8006354:	d008      	beq.n	8006368 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f042 020e 	orr.w	r2, r2, #14
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	e00f      	b.n	8006388 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0204 	bic.w	r2, r2, #4
 8006376:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 020a 	orr.w	r2, r2, #10
 8006386:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d007      	beq.n	80063a6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063a4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d007      	beq.n	80063be <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063bc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f042 0201 	orr.w	r2, r2, #1
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	e005      	b.n	80063dc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80063d8:	2302      	movs	r3, #2
 80063da:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80063dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b085      	sub	sp, #20
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d005      	beq.n	800640a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2204      	movs	r2, #4
 8006402:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	73fb      	strb	r3, [r7, #15]
 8006408:	e037      	b.n	800647a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 020e 	bic.w	r2, r2, #14
 8006418:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006424:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006428:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0201 	bic.w	r2, r2, #1
 8006438:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800643e:	f003 021f 	and.w	r2, r3, #31
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	2101      	movs	r1, #1
 8006448:	fa01 f202 	lsl.w	r2, r1, r2
 800644c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006456:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00c      	beq.n	800647a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800646a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800646e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006478:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800648a:	7bfb      	ldrb	r3, [r7, #15]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d00d      	beq.n	80064cc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2204      	movs	r2, #4
 80064b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	73fb      	strb	r3, [r7, #15]
 80064ca:	e047      	b.n	800655c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 020e 	bic.w	r2, r2, #14
 80064da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0201 	bic.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006500:	f003 021f 	and.w	r2, r3, #31
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006508:	2101      	movs	r1, #1
 800650a:	fa01 f202 	lsl.w	r2, r1, r2
 800650e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006518:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00c      	beq.n	800653c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800652c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006530:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800653a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	4798      	blx	r3
    }
  }
  return status;
 800655c:	7bfb      	ldrb	r3, [r7, #15]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	2204      	movs	r2, #4
 8006588:	409a      	lsls	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	4013      	ands	r3, r2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d026      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x7a>
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f003 0304 	and.w	r3, r3, #4
 8006598:	2b00      	cmp	r3, #0
 800659a:	d021      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d107      	bne.n	80065ba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 0204 	bic.w	r2, r2, #4
 80065b8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065be:	f003 021f 	and.w	r2, r3, #31
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c6:	2104      	movs	r1, #4
 80065c8:	fa01 f202 	lsl.w	r2, r1, r2
 80065cc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d071      	beq.n	80066ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80065de:	e06c      	b.n	80066ba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e4:	f003 031f 	and.w	r3, r3, #31
 80065e8:	2202      	movs	r2, #2
 80065ea:	409a      	lsls	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4013      	ands	r3, r2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d02e      	beq.n	8006652 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d029      	beq.n	8006652 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0320 	and.w	r3, r3, #32
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10b      	bne.n	8006624 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 020a 	bic.w	r2, r2, #10
 800661a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006628:	f003 021f 	and.w	r2, r3, #31
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006630:	2102      	movs	r1, #2
 8006632:	fa01 f202 	lsl.w	r2, r1, r2
 8006636:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d038      	beq.n	80066ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006650:	e033      	b.n	80066ba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006656:	f003 031f 	and.w	r3, r3, #31
 800665a:	2208      	movs	r2, #8
 800665c:	409a      	lsls	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4013      	ands	r3, r2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d02a      	beq.n	80066bc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f003 0308 	and.w	r3, r3, #8
 800666c:	2b00      	cmp	r3, #0
 800666e:	d025      	beq.n	80066bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 020e 	bic.w	r2, r2, #14
 800667e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006684:	f003 021f 	and.w	r2, r3, #31
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668c:	2101      	movs	r1, #1
 800668e:	fa01 f202 	lsl.w	r2, r1, r2
 8006692:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d004      	beq.n	80066bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80066ba:	bf00      	nop
 80066bc:	bf00      	nop
}
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80066da:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d004      	beq.n	80066ee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80066ec:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f2:	f003 021f 	and.w	r2, r3, #31
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fa:	2101      	movs	r1, #1
 80066fc:	fa01 f202 	lsl.w	r2, r1, r2
 8006700:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	2b10      	cmp	r3, #16
 8006710:	d108      	bne.n	8006724 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006722:	e007      	b.n	8006734 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	60da      	str	r2, [r3, #12]
}
 8006734:	bf00      	nop
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	461a      	mov	r2, r3
 800674e:	4b16      	ldr	r3, [pc, #88]	@ (80067a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006750:	429a      	cmp	r2, r3
 8006752:	d802      	bhi.n	800675a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006754:	4b15      	ldr	r3, [pc, #84]	@ (80067ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006756:	617b      	str	r3, [r7, #20]
 8006758:	e001      	b.n	800675e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800675a:	4b15      	ldr	r3, [pc, #84]	@ (80067b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800675c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	b2db      	uxtb	r3, r3
 8006768:	3b08      	subs	r3, #8
 800676a:	4a12      	ldr	r2, [pc, #72]	@ (80067b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800676c:	fba2 2303 	umull	r2, r3, r2, r3
 8006770:	091b      	lsrs	r3, r3, #4
 8006772:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006778:	089b      	lsrs	r3, r3, #2
 800677a:	009a      	lsls	r2, r3, #2
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	4413      	add	r3, r2
 8006780:	461a      	mov	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a0b      	ldr	r2, [pc, #44]	@ (80067b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800678a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f003 031f 	and.w	r3, r3, #31
 8006792:	2201      	movs	r2, #1
 8006794:	409a      	lsls	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800679a:	bf00      	nop
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	40020407 	.word	0x40020407
 80067ac:	40020800 	.word	0x40020800
 80067b0:	40020820 	.word	0x40020820
 80067b4:	cccccccd 	.word	0xcccccccd
 80067b8:	40020880 	.word	0x40020880

080067bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4b0b      	ldr	r3, [pc, #44]	@ (80067fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80067d0:	4413      	add	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	461a      	mov	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a08      	ldr	r2, [pc, #32]	@ (8006800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80067de:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	f003 031f 	and.w	r3, r3, #31
 80067e8:	2201      	movs	r2, #1
 80067ea:	409a      	lsls	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80067f0:	bf00      	nop
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	1000823f 	.word	0x1000823f
 8006800:	40020940 	.word	0x40020940

08006804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006804:	b480      	push	{r7}
 8006806:	b087      	sub	sp, #28
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800680e:	2300      	movs	r3, #0
 8006810:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006812:	e15a      	b.n	8006aca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	2101      	movs	r1, #1
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	fa01 f303 	lsl.w	r3, r1, r3
 8006820:	4013      	ands	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 814c 	beq.w	8006ac4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f003 0303 	and.w	r3, r3, #3
 8006834:	2b01      	cmp	r3, #1
 8006836:	d005      	beq.n	8006844 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006840:	2b02      	cmp	r3, #2
 8006842:	d130      	bne.n	80068a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	2203      	movs	r2, #3
 8006850:	fa02 f303 	lsl.w	r3, r2, r3
 8006854:	43db      	mvns	r3, r3
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	4013      	ands	r3, r2
 800685a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	68da      	ldr	r2, [r3, #12]
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	fa02 f303 	lsl.w	r3, r2, r3
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	4313      	orrs	r3, r2
 800686c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800687a:	2201      	movs	r2, #1
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	fa02 f303 	lsl.w	r3, r2, r3
 8006882:	43db      	mvns	r3, r3
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	4013      	ands	r3, r2
 8006888:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	091b      	lsrs	r3, r3, #4
 8006890:	f003 0201 	and.w	r2, r3, #1
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	fa02 f303 	lsl.w	r3, r2, r3
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	4313      	orrs	r3, r2
 800689e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f003 0303 	and.w	r3, r3, #3
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d017      	beq.n	80068e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	2203      	movs	r2, #3
 80068be:	fa02 f303 	lsl.w	r3, r2, r3
 80068c2:	43db      	mvns	r3, r3
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4013      	ands	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	fa02 f303 	lsl.w	r3, r2, r3
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f003 0303 	and.w	r3, r3, #3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d123      	bne.n	8006936 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	08da      	lsrs	r2, r3, #3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3208      	adds	r2, #8
 80068f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f003 0307 	and.w	r3, r3, #7
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	220f      	movs	r2, #15
 8006906:	fa02 f303 	lsl.w	r3, r2, r3
 800690a:	43db      	mvns	r3, r3
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4013      	ands	r3, r2
 8006910:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	691a      	ldr	r2, [r3, #16]
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	fa02 f303 	lsl.w	r3, r2, r3
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4313      	orrs	r3, r2
 8006926:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	08da      	lsrs	r2, r3, #3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3208      	adds	r2, #8
 8006930:	6939      	ldr	r1, [r7, #16]
 8006932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	2203      	movs	r2, #3
 8006942:	fa02 f303 	lsl.w	r3, r2, r3
 8006946:	43db      	mvns	r3, r3
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4013      	ands	r3, r2
 800694c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f003 0203 	and.w	r2, r3, #3
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	fa02 f303 	lsl.w	r3, r2, r3
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4313      	orrs	r3, r2
 8006962:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 80a6 	beq.w	8006ac4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006978:	4b5b      	ldr	r3, [pc, #364]	@ (8006ae8 <HAL_GPIO_Init+0x2e4>)
 800697a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800697c:	4a5a      	ldr	r2, [pc, #360]	@ (8006ae8 <HAL_GPIO_Init+0x2e4>)
 800697e:	f043 0301 	orr.w	r3, r3, #1
 8006982:	6613      	str	r3, [r2, #96]	@ 0x60
 8006984:	4b58      	ldr	r3, [pc, #352]	@ (8006ae8 <HAL_GPIO_Init+0x2e4>)
 8006986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	60bb      	str	r3, [r7, #8]
 800698e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006990:	4a56      	ldr	r2, [pc, #344]	@ (8006aec <HAL_GPIO_Init+0x2e8>)
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	089b      	lsrs	r3, r3, #2
 8006996:	3302      	adds	r3, #2
 8006998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800699c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f003 0303 	and.w	r3, r3, #3
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	220f      	movs	r2, #15
 80069a8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ac:	43db      	mvns	r3, r3
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	4013      	ands	r3, r2
 80069b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80069ba:	d01f      	beq.n	80069fc <HAL_GPIO_Init+0x1f8>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a4c      	ldr	r2, [pc, #304]	@ (8006af0 <HAL_GPIO_Init+0x2ec>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d019      	beq.n	80069f8 <HAL_GPIO_Init+0x1f4>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a4b      	ldr	r2, [pc, #300]	@ (8006af4 <HAL_GPIO_Init+0x2f0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d013      	beq.n	80069f4 <HAL_GPIO_Init+0x1f0>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a4a      	ldr	r2, [pc, #296]	@ (8006af8 <HAL_GPIO_Init+0x2f4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d00d      	beq.n	80069f0 <HAL_GPIO_Init+0x1ec>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a49      	ldr	r2, [pc, #292]	@ (8006afc <HAL_GPIO_Init+0x2f8>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d007      	beq.n	80069ec <HAL_GPIO_Init+0x1e8>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a48      	ldr	r2, [pc, #288]	@ (8006b00 <HAL_GPIO_Init+0x2fc>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d101      	bne.n	80069e8 <HAL_GPIO_Init+0x1e4>
 80069e4:	2305      	movs	r3, #5
 80069e6:	e00a      	b.n	80069fe <HAL_GPIO_Init+0x1fa>
 80069e8:	2306      	movs	r3, #6
 80069ea:	e008      	b.n	80069fe <HAL_GPIO_Init+0x1fa>
 80069ec:	2304      	movs	r3, #4
 80069ee:	e006      	b.n	80069fe <HAL_GPIO_Init+0x1fa>
 80069f0:	2303      	movs	r3, #3
 80069f2:	e004      	b.n	80069fe <HAL_GPIO_Init+0x1fa>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e002      	b.n	80069fe <HAL_GPIO_Init+0x1fa>
 80069f8:	2301      	movs	r3, #1
 80069fa:	e000      	b.n	80069fe <HAL_GPIO_Init+0x1fa>
 80069fc:	2300      	movs	r3, #0
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	f002 0203 	and.w	r2, r2, #3
 8006a04:	0092      	lsls	r2, r2, #2
 8006a06:	4093      	lsls	r3, r2
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a0e:	4937      	ldr	r1, [pc, #220]	@ (8006aec <HAL_GPIO_Init+0x2e8>)
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	089b      	lsrs	r3, r3, #2
 8006a14:	3302      	adds	r3, #2
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a1c:	4b39      	ldr	r3, [pc, #228]	@ (8006b04 <HAL_GPIO_Init+0x300>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	43db      	mvns	r3, r3
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006a40:	4a30      	ldr	r2, [pc, #192]	@ (8006b04 <HAL_GPIO_Init+0x300>)
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006a46:	4b2f      	ldr	r3, [pc, #188]	@ (8006b04 <HAL_GPIO_Init+0x300>)
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	43db      	mvns	r3, r3
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	4013      	ands	r3, r2
 8006a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006a6a:	4a26      	ldr	r2, [pc, #152]	@ (8006b04 <HAL_GPIO_Init+0x300>)
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006a70:	4b24      	ldr	r3, [pc, #144]	@ (8006b04 <HAL_GPIO_Init+0x300>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006a94:	4a1b      	ldr	r2, [pc, #108]	@ (8006b04 <HAL_GPIO_Init+0x300>)
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8006b04 <HAL_GPIO_Init+0x300>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	43db      	mvns	r3, r3
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006abe:	4a11      	ldr	r2, [pc, #68]	@ (8006b04 <HAL_GPIO_Init+0x300>)
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f47f ae9d 	bne.w	8006814 <HAL_GPIO_Init+0x10>
  }
}
 8006ada:	bf00      	nop
 8006adc:	bf00      	nop
 8006ade:	371c      	adds	r7, #28
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr
 8006ae8:	40021000 	.word	0x40021000
 8006aec:	40010000 	.word	0x40010000
 8006af0:	48000400 	.word	0x48000400
 8006af4:	48000800 	.word	0x48000800
 8006af8:	48000c00 	.word	0x48000c00
 8006afc:	48001000 	.word	0x48001000
 8006b00:	48001400 	.word	0x48001400
 8006b04:	40010400 	.word	0x40010400

08006b08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	691a      	ldr	r2, [r3, #16]
 8006b18:	887b      	ldrh	r3, [r7, #2]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b20:	2301      	movs	r3, #1
 8006b22:	73fb      	strb	r3, [r7, #15]
 8006b24:	e001      	b.n	8006b2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b26:	2300      	movs	r3, #0
 8006b28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	807b      	strh	r3, [r7, #2]
 8006b44:	4613      	mov	r3, r2
 8006b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b48:	787b      	ldrb	r3, [r7, #1]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006b4e:	887a      	ldrh	r2, [r7, #2]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006b54:	e002      	b.n	8006b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006b56:	887a      	ldrh	r2, [r7, #2]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	4603      	mov	r3, r0
 8006b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006b72:	4b08      	ldr	r3, [pc, #32]	@ (8006b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b74:	695a      	ldr	r2, [r3, #20]
 8006b76:	88fb      	ldrh	r3, [r7, #6]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d006      	beq.n	8006b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b7e:	4a05      	ldr	r2, [pc, #20]	@ (8006b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b80:	88fb      	ldrh	r3, [r7, #6]
 8006b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b84:	88fb      	ldrh	r3, [r7, #6]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fb fdf8 	bl	800277c <HAL_GPIO_EXTI_Callback>
  }
}
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	40010400 	.word	0x40010400

08006b98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d141      	bne.n	8006c2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ba6:	4b4b      	ldr	r3, [pc, #300]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bb2:	d131      	bne.n	8006c18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006bb4:	4b47      	ldr	r3, [pc, #284]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bba:	4a46      	ldr	r2, [pc, #280]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006bc4:	4b43      	ldr	r3, [pc, #268]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006bcc:	4a41      	ldr	r2, [pc, #260]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006bd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006bd4:	4b40      	ldr	r3, [pc, #256]	@ (8006cd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2232      	movs	r2, #50	@ 0x32
 8006bda:	fb02 f303 	mul.w	r3, r2, r3
 8006bde:	4a3f      	ldr	r2, [pc, #252]	@ (8006cdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006be0:	fba2 2303 	umull	r2, r3, r2, r3
 8006be4:	0c9b      	lsrs	r3, r3, #18
 8006be6:	3301      	adds	r3, #1
 8006be8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006bea:	e002      	b.n	8006bf2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006bf2:	4b38      	ldr	r3, [pc, #224]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bfe:	d102      	bne.n	8006c06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1f2      	bne.n	8006bec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c06:	4b33      	ldr	r3, [pc, #204]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c12:	d158      	bne.n	8006cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e057      	b.n	8006cc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c18:	4b2e      	ldr	r3, [pc, #184]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006c28:	e04d      	b.n	8006cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c30:	d141      	bne.n	8006cb6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c32:	4b28      	ldr	r3, [pc, #160]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c3e:	d131      	bne.n	8006ca4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c40:	4b24      	ldr	r3, [pc, #144]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c46:	4a23      	ldr	r2, [pc, #140]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c50:	4b20      	ldr	r3, [pc, #128]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006c58:	4a1e      	ldr	r2, [pc, #120]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c60:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2232      	movs	r2, #50	@ 0x32
 8006c66:	fb02 f303 	mul.w	r3, r2, r3
 8006c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8006cdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c70:	0c9b      	lsrs	r3, r3, #18
 8006c72:	3301      	adds	r3, #1
 8006c74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c76:	e002      	b.n	8006c7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c7e:	4b15      	ldr	r3, [pc, #84]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c8a:	d102      	bne.n	8006c92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1f2      	bne.n	8006c78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c92:	4b10      	ldr	r3, [pc, #64]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c9e:	d112      	bne.n	8006cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e011      	b.n	8006cc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006caa:	4a0a      	ldr	r2, [pc, #40]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006cb4:	e007      	b.n	8006cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006cb6:	4b07      	ldr	r3, [pc, #28]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006cbe:	4a05      	ldr	r2, [pc, #20]	@ (8006cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006cc4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	40007000 	.word	0x40007000
 8006cd8:	20000218 	.word	0x20000218
 8006cdc:	431bde83 	.word	0x431bde83

08006ce0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006ce4:	4b05      	ldr	r3, [pc, #20]	@ (8006cfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	4a04      	ldr	r2, [pc, #16]	@ (8006cfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006cea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006cee:	6093      	str	r3, [r2, #8]
}
 8006cf0:	bf00      	nop
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	40007000 	.word	0x40007000

08006d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b088      	sub	sp, #32
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e2fe      	b.n	8007310 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d075      	beq.n	8006e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d1e:	4b97      	ldr	r3, [pc, #604]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 030c 	and.w	r3, r3, #12
 8006d26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d28:	4b94      	ldr	r3, [pc, #592]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f003 0303 	and.w	r3, r3, #3
 8006d30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2b0c      	cmp	r3, #12
 8006d36:	d102      	bne.n	8006d3e <HAL_RCC_OscConfig+0x3e>
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d002      	beq.n	8006d44 <HAL_RCC_OscConfig+0x44>
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d10b      	bne.n	8006d5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d44:	4b8d      	ldr	r3, [pc, #564]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d05b      	beq.n	8006e08 <HAL_RCC_OscConfig+0x108>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d157      	bne.n	8006e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e2d9      	b.n	8007310 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d64:	d106      	bne.n	8006d74 <HAL_RCC_OscConfig+0x74>
 8006d66:	4b85      	ldr	r3, [pc, #532]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a84      	ldr	r2, [pc, #528]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	e01d      	b.n	8006db0 <HAL_RCC_OscConfig+0xb0>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d7c:	d10c      	bne.n	8006d98 <HAL_RCC_OscConfig+0x98>
 8006d7e:	4b7f      	ldr	r3, [pc, #508]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a7e      	ldr	r2, [pc, #504]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006d84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	4b7c      	ldr	r3, [pc, #496]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a7b      	ldr	r2, [pc, #492]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	e00b      	b.n	8006db0 <HAL_RCC_OscConfig+0xb0>
 8006d98:	4b78      	ldr	r3, [pc, #480]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a77      	ldr	r2, [pc, #476]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	4b75      	ldr	r3, [pc, #468]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a74      	ldr	r2, [pc, #464]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d013      	beq.n	8006de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db8:	f7fd fd50 	bl	800485c <HAL_GetTick>
 8006dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dbe:	e008      	b.n	8006dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dc0:	f7fd fd4c 	bl	800485c <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	2b64      	cmp	r3, #100	@ 0x64
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e29e      	b.n	8007310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dd2:	4b6a      	ldr	r3, [pc, #424]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0f0      	beq.n	8006dc0 <HAL_RCC_OscConfig+0xc0>
 8006dde:	e014      	b.n	8006e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de0:	f7fd fd3c 	bl	800485c <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006de8:	f7fd fd38 	bl	800485c <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b64      	cmp	r3, #100	@ 0x64
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e28a      	b.n	8007310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006dfa:	4b60      	ldr	r3, [pc, #384]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1f0      	bne.n	8006de8 <HAL_RCC_OscConfig+0xe8>
 8006e06:	e000      	b.n	8006e0a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d075      	beq.n	8006f02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e16:	4b59      	ldr	r3, [pc, #356]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f003 030c 	and.w	r3, r3, #12
 8006e1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e20:	4b56      	ldr	r3, [pc, #344]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f003 0303 	and.w	r3, r3, #3
 8006e28:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	2b0c      	cmp	r3, #12
 8006e2e:	d102      	bne.n	8006e36 <HAL_RCC_OscConfig+0x136>
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d002      	beq.n	8006e3c <HAL_RCC_OscConfig+0x13c>
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	d11f      	bne.n	8006e7c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e3c:	4b4f      	ldr	r3, [pc, #316]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d005      	beq.n	8006e54 <HAL_RCC_OscConfig+0x154>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e25d      	b.n	8007310 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e54:	4b49      	ldr	r3, [pc, #292]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	061b      	lsls	r3, r3, #24
 8006e62:	4946      	ldr	r1, [pc, #280]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006e68:	4b45      	ldr	r3, [pc, #276]	@ (8006f80 <HAL_RCC_OscConfig+0x280>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fd fca9 	bl	80047c4 <HAL_InitTick>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d043      	beq.n	8006f00 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e249      	b.n	8007310 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d023      	beq.n	8006ecc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e84:	4b3d      	ldr	r3, [pc, #244]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a3c      	ldr	r2, [pc, #240]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006e8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e90:	f7fd fce4 	bl	800485c <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e96:	e008      	b.n	8006eaa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e98:	f7fd fce0 	bl	800485c <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e232      	b.n	8007310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006eaa:	4b34      	ldr	r3, [pc, #208]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0f0      	beq.n	8006e98 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eb6:	4b31      	ldr	r3, [pc, #196]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	061b      	lsls	r3, r3, #24
 8006ec4:	492d      	ldr	r1, [pc, #180]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	604b      	str	r3, [r1, #4]
 8006eca:	e01a      	b.n	8006f02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006ed2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed8:	f7fd fcc0 	bl	800485c <HAL_GetTick>
 8006edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ede:	e008      	b.n	8006ef2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ee0:	f7fd fcbc 	bl	800485c <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e20e      	b.n	8007310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ef2:	4b22      	ldr	r3, [pc, #136]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1f0      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x1e0>
 8006efe:	e000      	b.n	8006f02 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0308 	and.w	r3, r3, #8
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d041      	beq.n	8006f92 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d01c      	beq.n	8006f50 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f16:	4b19      	ldr	r3, [pc, #100]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f1c:	4a17      	ldr	r2, [pc, #92]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006f1e:	f043 0301 	orr.w	r3, r3, #1
 8006f22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f26:	f7fd fc99 	bl	800485c <HAL_GetTick>
 8006f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f2c:	e008      	b.n	8006f40 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f2e:	f7fd fc95 	bl	800485c <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d901      	bls.n	8006f40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e1e7      	b.n	8007310 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f40:	4b0e      	ldr	r3, [pc, #56]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0ef      	beq.n	8006f2e <HAL_RCC_OscConfig+0x22e>
 8006f4e:	e020      	b.n	8006f92 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f50:	4b0a      	ldr	r3, [pc, #40]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f56:	4a09      	ldr	r2, [pc, #36]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006f58:	f023 0301 	bic.w	r3, r3, #1
 8006f5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f60:	f7fd fc7c 	bl	800485c <HAL_GetTick>
 8006f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f66:	e00d      	b.n	8006f84 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f68:	f7fd fc78 	bl	800485c <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d906      	bls.n	8006f84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e1ca      	b.n	8007310 <HAL_RCC_OscConfig+0x610>
 8006f7a:	bf00      	nop
 8006f7c:	40021000 	.word	0x40021000
 8006f80:	2000021c 	.word	0x2000021c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f84:	4b8c      	ldr	r3, [pc, #560]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 8006f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1ea      	bne.n	8006f68 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0304 	and.w	r3, r3, #4
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 80a6 	beq.w	80070ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006fa4:	4b84      	ldr	r3, [pc, #528]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 8006fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x2b4>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e000      	b.n	8006fb6 <HAL_RCC_OscConfig+0x2b6>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00d      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fba:	4b7f      	ldr	r3, [pc, #508]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 8006fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fbe:	4a7e      	ldr	r2, [pc, #504]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 8006fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fc6:	4b7c      	ldr	r3, [pc, #496]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 8006fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fd6:	4b79      	ldr	r3, [pc, #484]	@ (80071bc <HAL_RCC_OscConfig+0x4bc>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d118      	bne.n	8007014 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fe2:	4b76      	ldr	r3, [pc, #472]	@ (80071bc <HAL_RCC_OscConfig+0x4bc>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a75      	ldr	r2, [pc, #468]	@ (80071bc <HAL_RCC_OscConfig+0x4bc>)
 8006fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fee:	f7fd fc35 	bl	800485c <HAL_GetTick>
 8006ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ff4:	e008      	b.n	8007008 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ff6:	f7fd fc31 	bl	800485c <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	2b02      	cmp	r3, #2
 8007002:	d901      	bls.n	8007008 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e183      	b.n	8007310 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007008:	4b6c      	ldr	r3, [pc, #432]	@ (80071bc <HAL_RCC_OscConfig+0x4bc>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0f0      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d108      	bne.n	800702e <HAL_RCC_OscConfig+0x32e>
 800701c:	4b66      	ldr	r3, [pc, #408]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 800701e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007022:	4a65      	ldr	r2, [pc, #404]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 8007024:	f043 0301 	orr.w	r3, r3, #1
 8007028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800702c:	e024      	b.n	8007078 <HAL_RCC_OscConfig+0x378>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	2b05      	cmp	r3, #5
 8007034:	d110      	bne.n	8007058 <HAL_RCC_OscConfig+0x358>
 8007036:	4b60      	ldr	r3, [pc, #384]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 8007038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800703c:	4a5e      	ldr	r2, [pc, #376]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 800703e:	f043 0304 	orr.w	r3, r3, #4
 8007042:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007046:	4b5c      	ldr	r3, [pc, #368]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 8007048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800704c:	4a5a      	ldr	r2, [pc, #360]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 800704e:	f043 0301 	orr.w	r3, r3, #1
 8007052:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007056:	e00f      	b.n	8007078 <HAL_RCC_OscConfig+0x378>
 8007058:	4b57      	ldr	r3, [pc, #348]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 800705a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800705e:	4a56      	ldr	r2, [pc, #344]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 8007060:	f023 0301 	bic.w	r3, r3, #1
 8007064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007068:	4b53      	ldr	r3, [pc, #332]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 800706a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800706e:	4a52      	ldr	r2, [pc, #328]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 8007070:	f023 0304 	bic.w	r3, r3, #4
 8007074:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d016      	beq.n	80070ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007080:	f7fd fbec 	bl	800485c <HAL_GetTick>
 8007084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007086:	e00a      	b.n	800709e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007088:	f7fd fbe8 	bl	800485c <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007096:	4293      	cmp	r3, r2
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e138      	b.n	8007310 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800709e:	4b46      	ldr	r3, [pc, #280]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 80070a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d0ed      	beq.n	8007088 <HAL_RCC_OscConfig+0x388>
 80070ac:	e015      	b.n	80070da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ae:	f7fd fbd5 	bl	800485c <HAL_GetTick>
 80070b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070b4:	e00a      	b.n	80070cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070b6:	f7fd fbd1 	bl	800485c <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d901      	bls.n	80070cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e121      	b.n	8007310 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070cc:	4b3a      	ldr	r3, [pc, #232]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 80070ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1ed      	bne.n	80070b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80070da:	7ffb      	ldrb	r3, [r7, #31]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d105      	bne.n	80070ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070e0:	4b35      	ldr	r3, [pc, #212]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 80070e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070e4:	4a34      	ldr	r2, [pc, #208]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 80070e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0320 	and.w	r3, r3, #32
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d03c      	beq.n	8007172 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d01c      	beq.n	800713a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007100:	4b2d      	ldr	r3, [pc, #180]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 8007102:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007106:	4a2c      	ldr	r2, [pc, #176]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 8007108:	f043 0301 	orr.w	r3, r3, #1
 800710c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007110:	f7fd fba4 	bl	800485c <HAL_GetTick>
 8007114:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007116:	e008      	b.n	800712a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007118:	f7fd fba0 	bl	800485c <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	2b02      	cmp	r3, #2
 8007124:	d901      	bls.n	800712a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e0f2      	b.n	8007310 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800712a:	4b23      	ldr	r3, [pc, #140]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 800712c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007130:	f003 0302 	and.w	r3, r3, #2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0ef      	beq.n	8007118 <HAL_RCC_OscConfig+0x418>
 8007138:	e01b      	b.n	8007172 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800713a:	4b1f      	ldr	r3, [pc, #124]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 800713c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007140:	4a1d      	ldr	r2, [pc, #116]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 8007142:	f023 0301 	bic.w	r3, r3, #1
 8007146:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800714a:	f7fd fb87 	bl	800485c <HAL_GetTick>
 800714e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007150:	e008      	b.n	8007164 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007152:	f7fd fb83 	bl	800485c <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d901      	bls.n	8007164 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e0d5      	b.n	8007310 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007164:	4b14      	ldr	r3, [pc, #80]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 8007166:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1ef      	bne.n	8007152 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	2b00      	cmp	r3, #0
 8007178:	f000 80c9 	beq.w	800730e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800717c:	4b0e      	ldr	r3, [pc, #56]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f003 030c 	and.w	r3, r3, #12
 8007184:	2b0c      	cmp	r3, #12
 8007186:	f000 8083 	beq.w	8007290 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	2b02      	cmp	r3, #2
 8007190:	d15e      	bne.n	8007250 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007192:	4b09      	ldr	r3, [pc, #36]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a08      	ldr	r2, [pc, #32]	@ (80071b8 <HAL_RCC_OscConfig+0x4b8>)
 8007198:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800719c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800719e:	f7fd fb5d 	bl	800485c <HAL_GetTick>
 80071a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071a4:	e00c      	b.n	80071c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071a6:	f7fd fb59 	bl	800485c <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d905      	bls.n	80071c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e0ab      	b.n	8007310 <HAL_RCC_OscConfig+0x610>
 80071b8:	40021000 	.word	0x40021000
 80071bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071c0:	4b55      	ldr	r3, [pc, #340]	@ (8007318 <HAL_RCC_OscConfig+0x618>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1ec      	bne.n	80071a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071cc:	4b52      	ldr	r3, [pc, #328]	@ (8007318 <HAL_RCC_OscConfig+0x618>)
 80071ce:	68da      	ldr	r2, [r3, #12]
 80071d0:	4b52      	ldr	r3, [pc, #328]	@ (800731c <HAL_RCC_OscConfig+0x61c>)
 80071d2:	4013      	ands	r3, r2
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	6a11      	ldr	r1, [r2, #32]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80071dc:	3a01      	subs	r2, #1
 80071de:	0112      	lsls	r2, r2, #4
 80071e0:	4311      	orrs	r1, r2
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80071e6:	0212      	lsls	r2, r2, #8
 80071e8:	4311      	orrs	r1, r2
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80071ee:	0852      	lsrs	r2, r2, #1
 80071f0:	3a01      	subs	r2, #1
 80071f2:	0552      	lsls	r2, r2, #21
 80071f4:	4311      	orrs	r1, r2
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80071fa:	0852      	lsrs	r2, r2, #1
 80071fc:	3a01      	subs	r2, #1
 80071fe:	0652      	lsls	r2, r2, #25
 8007200:	4311      	orrs	r1, r2
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007206:	06d2      	lsls	r2, r2, #27
 8007208:	430a      	orrs	r2, r1
 800720a:	4943      	ldr	r1, [pc, #268]	@ (8007318 <HAL_RCC_OscConfig+0x618>)
 800720c:	4313      	orrs	r3, r2
 800720e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007210:	4b41      	ldr	r3, [pc, #260]	@ (8007318 <HAL_RCC_OscConfig+0x618>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a40      	ldr	r2, [pc, #256]	@ (8007318 <HAL_RCC_OscConfig+0x618>)
 8007216:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800721a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800721c:	4b3e      	ldr	r3, [pc, #248]	@ (8007318 <HAL_RCC_OscConfig+0x618>)
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	4a3d      	ldr	r2, [pc, #244]	@ (8007318 <HAL_RCC_OscConfig+0x618>)
 8007222:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007226:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007228:	f7fd fb18 	bl	800485c <HAL_GetTick>
 800722c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800722e:	e008      	b.n	8007242 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007230:	f7fd fb14 	bl	800485c <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	2b02      	cmp	r3, #2
 800723c:	d901      	bls.n	8007242 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e066      	b.n	8007310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007242:	4b35      	ldr	r3, [pc, #212]	@ (8007318 <HAL_RCC_OscConfig+0x618>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0f0      	beq.n	8007230 <HAL_RCC_OscConfig+0x530>
 800724e:	e05e      	b.n	800730e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007250:	4b31      	ldr	r3, [pc, #196]	@ (8007318 <HAL_RCC_OscConfig+0x618>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a30      	ldr	r2, [pc, #192]	@ (8007318 <HAL_RCC_OscConfig+0x618>)
 8007256:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800725a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800725c:	f7fd fafe 	bl	800485c <HAL_GetTick>
 8007260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007262:	e008      	b.n	8007276 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007264:	f7fd fafa 	bl	800485c <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e04c      	b.n	8007310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007276:	4b28      	ldr	r3, [pc, #160]	@ (8007318 <HAL_RCC_OscConfig+0x618>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1f0      	bne.n	8007264 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007282:	4b25      	ldr	r3, [pc, #148]	@ (8007318 <HAL_RCC_OscConfig+0x618>)
 8007284:	68da      	ldr	r2, [r3, #12]
 8007286:	4924      	ldr	r1, [pc, #144]	@ (8007318 <HAL_RCC_OscConfig+0x618>)
 8007288:	4b25      	ldr	r3, [pc, #148]	@ (8007320 <HAL_RCC_OscConfig+0x620>)
 800728a:	4013      	ands	r3, r2
 800728c:	60cb      	str	r3, [r1, #12]
 800728e:	e03e      	b.n	800730e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	69db      	ldr	r3, [r3, #28]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d101      	bne.n	800729c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e039      	b.n	8007310 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800729c:	4b1e      	ldr	r3, [pc, #120]	@ (8007318 <HAL_RCC_OscConfig+0x618>)
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f003 0203 	and.w	r2, r3, #3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a1b      	ldr	r3, [r3, #32]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d12c      	bne.n	800730a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ba:	3b01      	subs	r3, #1
 80072bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072be:	429a      	cmp	r2, r3
 80072c0:	d123      	bne.n	800730a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d11b      	bne.n	800730a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80072de:	429a      	cmp	r2, r3
 80072e0:	d113      	bne.n	800730a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ec:	085b      	lsrs	r3, r3, #1
 80072ee:	3b01      	subs	r3, #1
 80072f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d109      	bne.n	800730a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007300:	085b      	lsrs	r3, r3, #1
 8007302:	3b01      	subs	r3, #1
 8007304:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007306:	429a      	cmp	r2, r3
 8007308:	d001      	beq.n	800730e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e000      	b.n	8007310 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3720      	adds	r7, #32
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	40021000 	.word	0x40021000
 800731c:	019f800c 	.word	0x019f800c
 8007320:	feeefffc 	.word	0xfeeefffc

08007324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800732e:	2300      	movs	r3, #0
 8007330:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e11e      	b.n	800757a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800733c:	4b91      	ldr	r3, [pc, #580]	@ (8007584 <HAL_RCC_ClockConfig+0x260>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 030f 	and.w	r3, r3, #15
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	429a      	cmp	r2, r3
 8007348:	d910      	bls.n	800736c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800734a:	4b8e      	ldr	r3, [pc, #568]	@ (8007584 <HAL_RCC_ClockConfig+0x260>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f023 020f 	bic.w	r2, r3, #15
 8007352:	498c      	ldr	r1, [pc, #560]	@ (8007584 <HAL_RCC_ClockConfig+0x260>)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	4313      	orrs	r3, r2
 8007358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800735a:	4b8a      	ldr	r3, [pc, #552]	@ (8007584 <HAL_RCC_ClockConfig+0x260>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 030f 	and.w	r3, r3, #15
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	429a      	cmp	r2, r3
 8007366:	d001      	beq.n	800736c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e106      	b.n	800757a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b00      	cmp	r3, #0
 8007376:	d073      	beq.n	8007460 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	2b03      	cmp	r3, #3
 800737e:	d129      	bne.n	80073d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007380:	4b81      	ldr	r3, [pc, #516]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e0f4      	b.n	800757a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007390:	f000 f99e 	bl	80076d0 <RCC_GetSysClockFreqFromPLLSource>
 8007394:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	4a7c      	ldr	r2, [pc, #496]	@ (800758c <HAL_RCC_ClockConfig+0x268>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d93f      	bls.n	800741e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800739e:	4b7a      	ldr	r3, [pc, #488]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d009      	beq.n	80073be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d033      	beq.n	800741e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d12f      	bne.n	800741e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80073be:	4b72      	ldr	r3, [pc, #456]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073c6:	4a70      	ldr	r2, [pc, #448]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 80073c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80073ce:	2380      	movs	r3, #128	@ 0x80
 80073d0:	617b      	str	r3, [r7, #20]
 80073d2:	e024      	b.n	800741e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d107      	bne.n	80073ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80073dc:	4b6a      	ldr	r3, [pc, #424]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d109      	bne.n	80073fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e0c6      	b.n	800757a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073ec:	4b66      	ldr	r3, [pc, #408]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e0be      	b.n	800757a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80073fc:	f000 f8ce 	bl	800759c <HAL_RCC_GetSysClockFreq>
 8007400:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	4a61      	ldr	r2, [pc, #388]	@ (800758c <HAL_RCC_ClockConfig+0x268>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d909      	bls.n	800741e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800740a:	4b5f      	ldr	r3, [pc, #380]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007412:	4a5d      	ldr	r2, [pc, #372]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 8007414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007418:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800741a:	2380      	movs	r3, #128	@ 0x80
 800741c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800741e:	4b5a      	ldr	r3, [pc, #360]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	f023 0203 	bic.w	r2, r3, #3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	4957      	ldr	r1, [pc, #348]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 800742c:	4313      	orrs	r3, r2
 800742e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007430:	f7fd fa14 	bl	800485c <HAL_GetTick>
 8007434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007436:	e00a      	b.n	800744e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007438:	f7fd fa10 	bl	800485c <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007446:	4293      	cmp	r3, r2
 8007448:	d901      	bls.n	800744e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e095      	b.n	800757a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800744e:	4b4e      	ldr	r3, [pc, #312]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f003 020c 	and.w	r2, r3, #12
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	429a      	cmp	r2, r3
 800745e:	d1eb      	bne.n	8007438 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0302 	and.w	r3, r3, #2
 8007468:	2b00      	cmp	r3, #0
 800746a:	d023      	beq.n	80074b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007478:	4b43      	ldr	r3, [pc, #268]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	4a42      	ldr	r2, [pc, #264]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 800747e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007482:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0308 	and.w	r3, r3, #8
 800748c:	2b00      	cmp	r3, #0
 800748e:	d007      	beq.n	80074a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007490:	4b3d      	ldr	r3, [pc, #244]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007498:	4a3b      	ldr	r2, [pc, #236]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 800749a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800749e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074a0:	4b39      	ldr	r3, [pc, #228]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	4936      	ldr	r1, [pc, #216]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	608b      	str	r3, [r1, #8]
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2b80      	cmp	r3, #128	@ 0x80
 80074b8:	d105      	bne.n	80074c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80074ba:	4b33      	ldr	r3, [pc, #204]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	4a32      	ldr	r2, [pc, #200]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 80074c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074c6:	4b2f      	ldr	r3, [pc, #188]	@ (8007584 <HAL_RCC_ClockConfig+0x260>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 030f 	and.w	r3, r3, #15
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d21d      	bcs.n	8007510 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074d4:	4b2b      	ldr	r3, [pc, #172]	@ (8007584 <HAL_RCC_ClockConfig+0x260>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f023 020f 	bic.w	r2, r3, #15
 80074dc:	4929      	ldr	r1, [pc, #164]	@ (8007584 <HAL_RCC_ClockConfig+0x260>)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80074e4:	f7fd f9ba 	bl	800485c <HAL_GetTick>
 80074e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ea:	e00a      	b.n	8007502 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074ec:	f7fd f9b6 	bl	800485c <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e03b      	b.n	800757a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007502:	4b20      	ldr	r3, [pc, #128]	@ (8007584 <HAL_RCC_ClockConfig+0x260>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 030f 	and.w	r3, r3, #15
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d1ed      	bne.n	80074ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	2b00      	cmp	r3, #0
 800751a:	d008      	beq.n	800752e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800751c:	4b1a      	ldr	r3, [pc, #104]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	4917      	ldr	r1, [pc, #92]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 800752a:	4313      	orrs	r3, r2
 800752c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0308 	and.w	r3, r3, #8
 8007536:	2b00      	cmp	r3, #0
 8007538:	d009      	beq.n	800754e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800753a:	4b13      	ldr	r3, [pc, #76]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	00db      	lsls	r3, r3, #3
 8007548:	490f      	ldr	r1, [pc, #60]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 800754a:	4313      	orrs	r3, r2
 800754c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800754e:	f000 f825 	bl	800759c <HAL_RCC_GetSysClockFreq>
 8007552:	4602      	mov	r2, r0
 8007554:	4b0c      	ldr	r3, [pc, #48]	@ (8007588 <HAL_RCC_ClockConfig+0x264>)
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	091b      	lsrs	r3, r3, #4
 800755a:	f003 030f 	and.w	r3, r3, #15
 800755e:	490c      	ldr	r1, [pc, #48]	@ (8007590 <HAL_RCC_ClockConfig+0x26c>)
 8007560:	5ccb      	ldrb	r3, [r1, r3]
 8007562:	f003 031f 	and.w	r3, r3, #31
 8007566:	fa22 f303 	lsr.w	r3, r2, r3
 800756a:	4a0a      	ldr	r2, [pc, #40]	@ (8007594 <HAL_RCC_ClockConfig+0x270>)
 800756c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800756e:	4b0a      	ldr	r3, [pc, #40]	@ (8007598 <HAL_RCC_ClockConfig+0x274>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4618      	mov	r0, r3
 8007574:	f7fd f926 	bl	80047c4 <HAL_InitTick>
 8007578:	4603      	mov	r3, r0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	40022000 	.word	0x40022000
 8007588:	40021000 	.word	0x40021000
 800758c:	04c4b400 	.word	0x04c4b400
 8007590:	0800bdac 	.word	0x0800bdac
 8007594:	20000218 	.word	0x20000218
 8007598:	2000021c 	.word	0x2000021c

0800759c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80075a2:	4b2c      	ldr	r3, [pc, #176]	@ (8007654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f003 030c 	and.w	r3, r3, #12
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	d102      	bne.n	80075b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80075ae:	4b2a      	ldr	r3, [pc, #168]	@ (8007658 <HAL_RCC_GetSysClockFreq+0xbc>)
 80075b0:	613b      	str	r3, [r7, #16]
 80075b2:	e047      	b.n	8007644 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80075b4:	4b27      	ldr	r3, [pc, #156]	@ (8007654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f003 030c 	and.w	r3, r3, #12
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d102      	bne.n	80075c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80075c0:	4b26      	ldr	r3, [pc, #152]	@ (800765c <HAL_RCC_GetSysClockFreq+0xc0>)
 80075c2:	613b      	str	r3, [r7, #16]
 80075c4:	e03e      	b.n	8007644 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80075c6:	4b23      	ldr	r3, [pc, #140]	@ (8007654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f003 030c 	and.w	r3, r3, #12
 80075ce:	2b0c      	cmp	r3, #12
 80075d0:	d136      	bne.n	8007640 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80075d2:	4b20      	ldr	r3, [pc, #128]	@ (8007654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f003 0303 	and.w	r3, r3, #3
 80075da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80075dc:	4b1d      	ldr	r3, [pc, #116]	@ (8007654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	091b      	lsrs	r3, r3, #4
 80075e2:	f003 030f 	and.w	r3, r3, #15
 80075e6:	3301      	adds	r3, #1
 80075e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d10c      	bne.n	800760a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80075f0:	4a1a      	ldr	r2, [pc, #104]	@ (800765c <HAL_RCC_GetSysClockFreq+0xc0>)
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f8:	4a16      	ldr	r2, [pc, #88]	@ (8007654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075fa:	68d2      	ldr	r2, [r2, #12]
 80075fc:	0a12      	lsrs	r2, r2, #8
 80075fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007602:	fb02 f303 	mul.w	r3, r2, r3
 8007606:	617b      	str	r3, [r7, #20]
      break;
 8007608:	e00c      	b.n	8007624 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800760a:	4a13      	ldr	r2, [pc, #76]	@ (8007658 <HAL_RCC_GetSysClockFreq+0xbc>)
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007612:	4a10      	ldr	r2, [pc, #64]	@ (8007654 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007614:	68d2      	ldr	r2, [r2, #12]
 8007616:	0a12      	lsrs	r2, r2, #8
 8007618:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800761c:	fb02 f303 	mul.w	r3, r2, r3
 8007620:	617b      	str	r3, [r7, #20]
      break;
 8007622:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007624:	4b0b      	ldr	r3, [pc, #44]	@ (8007654 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	0e5b      	lsrs	r3, r3, #25
 800762a:	f003 0303 	and.w	r3, r3, #3
 800762e:	3301      	adds	r3, #1
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	fbb2 f3f3 	udiv	r3, r2, r3
 800763c:	613b      	str	r3, [r7, #16]
 800763e:	e001      	b.n	8007644 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007640:	2300      	movs	r3, #0
 8007642:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007644:	693b      	ldr	r3, [r7, #16]
}
 8007646:	4618      	mov	r0, r3
 8007648:	371c      	adds	r7, #28
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	40021000 	.word	0x40021000
 8007658:	00f42400 	.word	0x00f42400
 800765c:	016e3600 	.word	0x016e3600

08007660 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007660:	b480      	push	{r7}
 8007662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007664:	4b03      	ldr	r3, [pc, #12]	@ (8007674 <HAL_RCC_GetHCLKFreq+0x14>)
 8007666:	681b      	ldr	r3, [r3, #0]
}
 8007668:	4618      	mov	r0, r3
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	20000218 	.word	0x20000218

08007678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800767c:	f7ff fff0 	bl	8007660 <HAL_RCC_GetHCLKFreq>
 8007680:	4602      	mov	r2, r0
 8007682:	4b06      	ldr	r3, [pc, #24]	@ (800769c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	0a1b      	lsrs	r3, r3, #8
 8007688:	f003 0307 	and.w	r3, r3, #7
 800768c:	4904      	ldr	r1, [pc, #16]	@ (80076a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800768e:	5ccb      	ldrb	r3, [r1, r3]
 8007690:	f003 031f 	and.w	r3, r3, #31
 8007694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007698:	4618      	mov	r0, r3
 800769a:	bd80      	pop	{r7, pc}
 800769c:	40021000 	.word	0x40021000
 80076a0:	0800bdbc 	.word	0x0800bdbc

080076a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80076a8:	f7ff ffda 	bl	8007660 <HAL_RCC_GetHCLKFreq>
 80076ac:	4602      	mov	r2, r0
 80076ae:	4b06      	ldr	r3, [pc, #24]	@ (80076c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	0adb      	lsrs	r3, r3, #11
 80076b4:	f003 0307 	and.w	r3, r3, #7
 80076b8:	4904      	ldr	r1, [pc, #16]	@ (80076cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80076ba:	5ccb      	ldrb	r3, [r1, r3]
 80076bc:	f003 031f 	and.w	r3, r3, #31
 80076c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	40021000 	.word	0x40021000
 80076cc:	0800bdbc 	.word	0x0800bdbc

080076d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b087      	sub	sp, #28
 80076d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076d6:	4b1e      	ldr	r3, [pc, #120]	@ (8007750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076e0:	4b1b      	ldr	r3, [pc, #108]	@ (8007750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	091b      	lsrs	r3, r3, #4
 80076e6:	f003 030f 	and.w	r3, r3, #15
 80076ea:	3301      	adds	r3, #1
 80076ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d10c      	bne.n	800770e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076f4:	4a17      	ldr	r2, [pc, #92]	@ (8007754 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076fc:	4a14      	ldr	r2, [pc, #80]	@ (8007750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076fe:	68d2      	ldr	r2, [r2, #12]
 8007700:	0a12      	lsrs	r2, r2, #8
 8007702:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007706:	fb02 f303 	mul.w	r3, r2, r3
 800770a:	617b      	str	r3, [r7, #20]
    break;
 800770c:	e00c      	b.n	8007728 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800770e:	4a12      	ldr	r2, [pc, #72]	@ (8007758 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	fbb2 f3f3 	udiv	r3, r2, r3
 8007716:	4a0e      	ldr	r2, [pc, #56]	@ (8007750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007718:	68d2      	ldr	r2, [r2, #12]
 800771a:	0a12      	lsrs	r2, r2, #8
 800771c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007720:	fb02 f303 	mul.w	r3, r2, r3
 8007724:	617b      	str	r3, [r7, #20]
    break;
 8007726:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007728:	4b09      	ldr	r3, [pc, #36]	@ (8007750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	0e5b      	lsrs	r3, r3, #25
 800772e:	f003 0303 	and.w	r3, r3, #3
 8007732:	3301      	adds	r3, #1
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007740:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007742:	687b      	ldr	r3, [r7, #4]
}
 8007744:	4618      	mov	r0, r3
 8007746:	371c      	adds	r7, #28
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	40021000 	.word	0x40021000
 8007754:	016e3600 	.word	0x016e3600
 8007758:	00f42400 	.word	0x00f42400

0800775c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007764:	2300      	movs	r3, #0
 8007766:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007768:	2300      	movs	r3, #0
 800776a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 8098 	beq.w	80078aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800777a:	2300      	movs	r3, #0
 800777c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800777e:	4b43      	ldr	r3, [pc, #268]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10d      	bne.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800778a:	4b40      	ldr	r3, [pc, #256]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800778c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800778e:	4a3f      	ldr	r2, [pc, #252]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007794:	6593      	str	r3, [r2, #88]	@ 0x58
 8007796:	4b3d      	ldr	r3, [pc, #244]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800779a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800779e:	60bb      	str	r3, [r7, #8]
 80077a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077a2:	2301      	movs	r3, #1
 80077a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077a6:	4b3a      	ldr	r3, [pc, #232]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a39      	ldr	r2, [pc, #228]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077b2:	f7fd f853 	bl	800485c <HAL_GetTick>
 80077b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077b8:	e009      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077ba:	f7fd f84f 	bl	800485c <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d902      	bls.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	74fb      	strb	r3, [r7, #19]
        break;
 80077cc:	e005      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077ce:	4b30      	ldr	r3, [pc, #192]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d0ef      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80077da:	7cfb      	ldrb	r3, [r7, #19]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d159      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80077e0:	4b2a      	ldr	r3, [pc, #168]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d01e      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077f6:	697a      	ldr	r2, [r7, #20]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d019      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80077fc:	4b23      	ldr	r3, [pc, #140]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007806:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007808:	4b20      	ldr	r3, [pc, #128]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800780a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800780e:	4a1f      	ldr	r2, [pc, #124]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007818:	4b1c      	ldr	r3, [pc, #112]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800781a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800781e:	4a1b      	ldr	r2, [pc, #108]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007820:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007828:	4a18      	ldr	r2, [pc, #96]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b00      	cmp	r3, #0
 8007838:	d016      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800783a:	f7fd f80f 	bl	800485c <HAL_GetTick>
 800783e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007840:	e00b      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007842:	f7fd f80b 	bl	800485c <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007850:	4293      	cmp	r3, r2
 8007852:	d902      	bls.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	74fb      	strb	r3, [r7, #19]
            break;
 8007858:	e006      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800785a:	4b0c      	ldr	r3, [pc, #48]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800785c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d0ec      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007868:	7cfb      	ldrb	r3, [r7, #19]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10b      	bne.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800786e:	4b07      	ldr	r3, [pc, #28]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007874:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800787c:	4903      	ldr	r1, [pc, #12]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800787e:	4313      	orrs	r3, r2
 8007880:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007884:	e008      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007886:	7cfb      	ldrb	r3, [r7, #19]
 8007888:	74bb      	strb	r3, [r7, #18]
 800788a:	e005      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800788c:	40021000 	.word	0x40021000
 8007890:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007894:	7cfb      	ldrb	r3, [r7, #19]
 8007896:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007898:	7c7b      	ldrb	r3, [r7, #17]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d105      	bne.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800789e:	4ba7      	ldr	r3, [pc, #668]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078a2:	4aa6      	ldr	r2, [pc, #664]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078b6:	4ba1      	ldr	r3, [pc, #644]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078bc:	f023 0203 	bic.w	r2, r3, #3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	499d      	ldr	r1, [pc, #628]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0302 	and.w	r3, r3, #2
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80078d8:	4b98      	ldr	r3, [pc, #608]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078de:	f023 020c 	bic.w	r2, r3, #12
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	4995      	ldr	r1, [pc, #596]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0304 	and.w	r3, r3, #4
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80078fa:	4b90      	ldr	r3, [pc, #576]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007900:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	498c      	ldr	r1, [pc, #560]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800790a:	4313      	orrs	r3, r2
 800790c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800791c:	4b87      	ldr	r3, [pc, #540]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800791e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007922:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	4984      	ldr	r1, [pc, #528]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800792c:	4313      	orrs	r3, r2
 800792e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0310 	and.w	r3, r3, #16
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800793e:	4b7f      	ldr	r3, [pc, #508]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007944:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	695b      	ldr	r3, [r3, #20]
 800794c:	497b      	ldr	r1, [pc, #492]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800794e:	4313      	orrs	r3, r2
 8007950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0320 	and.w	r3, r3, #32
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00a      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007960:	4b76      	ldr	r3, [pc, #472]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007966:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	4973      	ldr	r1, [pc, #460]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007970:	4313      	orrs	r3, r2
 8007972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007982:	4b6e      	ldr	r3, [pc, #440]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007988:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	69db      	ldr	r3, [r3, #28]
 8007990:	496a      	ldr	r1, [pc, #424]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007992:	4313      	orrs	r3, r2
 8007994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00a      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80079a4:	4b65      	ldr	r3, [pc, #404]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	4962      	ldr	r1, [pc, #392]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80079c6:	4b5d      	ldr	r3, [pc, #372]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d4:	4959      	ldr	r1, [pc, #356]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00a      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80079e8:	4b54      	ldr	r3, [pc, #336]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079ee:	f023 0203 	bic.w	r2, r3, #3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f6:	4951      	ldr	r1, [pc, #324]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079f8:	4313      	orrs	r3, r2
 80079fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00a      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a0a:	4b4c      	ldr	r3, [pc, #304]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a10:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a18:	4948      	ldr	r1, [pc, #288]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d015      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a2c:	4b43      	ldr	r3, [pc, #268]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3a:	4940      	ldr	r1, [pc, #256]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a4a:	d105      	bne.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a4c:	4b3b      	ldr	r3, [pc, #236]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	4a3a      	ldr	r2, [pc, #232]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d015      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007a64:	4b35      	ldr	r3, [pc, #212]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a72:	4932      	ldr	r1, [pc, #200]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a82:	d105      	bne.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a84:	4b2d      	ldr	r3, [pc, #180]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	4a2c      	ldr	r2, [pc, #176]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a8e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d015      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a9c:	4b27      	ldr	r3, [pc, #156]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aa2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aaa:	4924      	ldr	r1, [pc, #144]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aac:	4313      	orrs	r3, r2
 8007aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007aba:	d105      	bne.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007abc:	4b1f      	ldr	r3, [pc, #124]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ac6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d015      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ad4:	4b19      	ldr	r3, [pc, #100]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ada:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ae2:	4916      	ldr	r1, [pc, #88]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007af2:	d105      	bne.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007af4:	4b11      	ldr	r3, [pc, #68]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	4a10      	ldr	r2, [pc, #64]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007afa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007afe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d019      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1a:	4908      	ldr	r1, [pc, #32]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b2a:	d109      	bne.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b2c:	4b03      	ldr	r3, [pc, #12]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	4a02      	ldr	r2, [pc, #8]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b36:	60d3      	str	r3, [r2, #12]
 8007b38:	e002      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007b3a:	bf00      	nop
 8007b3c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d015      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007b4c:	4b29      	ldr	r3, [pc, #164]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b52:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b5a:	4926      	ldr	r1, [pc, #152]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b6a:	d105      	bne.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007b6c:	4b21      	ldr	r3, [pc, #132]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	4a20      	ldr	r2, [pc, #128]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b76:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d015      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007b84:	4b1b      	ldr	r3, [pc, #108]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b8a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b92:	4918      	ldr	r1, [pc, #96]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ba2:	d105      	bne.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ba4:	4b13      	ldr	r3, [pc, #76]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	4a12      	ldr	r2, [pc, #72]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007baa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d015      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bca:	490a      	ldr	r1, [pc, #40]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bda:	d105      	bne.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bdc:	4b05      	ldr	r3, [pc, #20]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	4a04      	ldr	r2, [pc, #16]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007be2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007be6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007be8:	7cbb      	ldrb	r3, [r7, #18]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	40021000 	.word	0x40021000

08007bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e054      	b.n	8007cb4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d111      	bne.n	8007c3a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f001 feec 	bl	80099fc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d102      	bne.n	8007c32 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a23      	ldr	r2, [pc, #140]	@ (8007cbc <HAL_TIM_Base_Init+0xc4>)
 8007c30:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	3304      	adds	r3, #4
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	f001 fa35 	bl	80090bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	0800430d 	.word	0x0800430d

08007cc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d001      	beq.n	8007cd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e04c      	b.n	8007d72 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a26      	ldr	r2, [pc, #152]	@ (8007d80 <HAL_TIM_Base_Start+0xc0>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d022      	beq.n	8007d30 <HAL_TIM_Base_Start+0x70>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cf2:	d01d      	beq.n	8007d30 <HAL_TIM_Base_Start+0x70>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a22      	ldr	r2, [pc, #136]	@ (8007d84 <HAL_TIM_Base_Start+0xc4>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d018      	beq.n	8007d30 <HAL_TIM_Base_Start+0x70>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a21      	ldr	r2, [pc, #132]	@ (8007d88 <HAL_TIM_Base_Start+0xc8>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d013      	beq.n	8007d30 <HAL_TIM_Base_Start+0x70>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8007d8c <HAL_TIM_Base_Start+0xcc>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d00e      	beq.n	8007d30 <HAL_TIM_Base_Start+0x70>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a1e      	ldr	r2, [pc, #120]	@ (8007d90 <HAL_TIM_Base_Start+0xd0>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d009      	beq.n	8007d30 <HAL_TIM_Base_Start+0x70>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a1c      	ldr	r2, [pc, #112]	@ (8007d94 <HAL_TIM_Base_Start+0xd4>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d004      	beq.n	8007d30 <HAL_TIM_Base_Start+0x70>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8007d98 <HAL_TIM_Base_Start+0xd8>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d115      	bne.n	8007d5c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689a      	ldr	r2, [r3, #8]
 8007d36:	4b19      	ldr	r3, [pc, #100]	@ (8007d9c <HAL_TIM_Base_Start+0xdc>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2b06      	cmp	r3, #6
 8007d40:	d015      	beq.n	8007d6e <HAL_TIM_Base_Start+0xae>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d48:	d011      	beq.n	8007d6e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f042 0201 	orr.w	r2, r2, #1
 8007d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d5a:	e008      	b.n	8007d6e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f042 0201 	orr.w	r2, r2, #1
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	e000      	b.n	8007d70 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	40012c00 	.word	0x40012c00
 8007d84:	40000400 	.word	0x40000400
 8007d88:	40000800 	.word	0x40000800
 8007d8c:	40000c00 	.word	0x40000c00
 8007d90:	40013400 	.word	0x40013400
 8007d94:	40014000 	.word	0x40014000
 8007d98:	40015000 	.word	0x40015000
 8007d9c:	00010007 	.word	0x00010007

08007da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d001      	beq.n	8007db8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e054      	b.n	8007e62 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68da      	ldr	r2, [r3, #12]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f042 0201 	orr.w	r2, r2, #1
 8007dce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a26      	ldr	r2, [pc, #152]	@ (8007e70 <HAL_TIM_Base_Start_IT+0xd0>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d022      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0x80>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007de2:	d01d      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0x80>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a22      	ldr	r2, [pc, #136]	@ (8007e74 <HAL_TIM_Base_Start_IT+0xd4>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d018      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0x80>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a21      	ldr	r2, [pc, #132]	@ (8007e78 <HAL_TIM_Base_Start_IT+0xd8>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d013      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0x80>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8007e7c <HAL_TIM_Base_Start_IT+0xdc>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d00e      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0x80>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a1e      	ldr	r2, [pc, #120]	@ (8007e80 <HAL_TIM_Base_Start_IT+0xe0>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d009      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0x80>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a1c      	ldr	r2, [pc, #112]	@ (8007e84 <HAL_TIM_Base_Start_IT+0xe4>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d004      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0x80>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8007e88 <HAL_TIM_Base_Start_IT+0xe8>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d115      	bne.n	8007e4c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689a      	ldr	r2, [r3, #8]
 8007e26:	4b19      	ldr	r3, [pc, #100]	@ (8007e8c <HAL_TIM_Base_Start_IT+0xec>)
 8007e28:	4013      	ands	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2b06      	cmp	r3, #6
 8007e30:	d015      	beq.n	8007e5e <HAL_TIM_Base_Start_IT+0xbe>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e38:	d011      	beq.n	8007e5e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f042 0201 	orr.w	r2, r2, #1
 8007e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e4a:	e008      	b.n	8007e5e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0201 	orr.w	r2, r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	e000      	b.n	8007e60 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	40012c00 	.word	0x40012c00
 8007e74:	40000400 	.word	0x40000400
 8007e78:	40000800 	.word	0x40000800
 8007e7c:	40000c00 	.word	0x40000c00
 8007e80:	40013400 	.word	0x40013400
 8007e84:	40014000 	.word	0x40014000
 8007e88:	40015000 	.word	0x40015000
 8007e8c:	00010007 	.word	0x00010007

08007e90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e054      	b.n	8007f4c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d111      	bne.n	8007ed2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 fda0 	bl	80099fc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d102      	bne.n	8007eca <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a23      	ldr	r2, [pc, #140]	@ (8007f54 <HAL_TIM_PWM_Init+0xc4>)
 8007ec8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	f001 f8e9 	bl	80090bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	08007f59 	.word	0x08007f59

08007f58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d109      	bne.n	8007f90 <HAL_TIM_PWM_Start+0x24>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	bf14      	ite	ne
 8007f88:	2301      	movne	r3, #1
 8007f8a:	2300      	moveq	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	e03c      	b.n	800800a <HAL_TIM_PWM_Start+0x9e>
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	d109      	bne.n	8007faa <HAL_TIM_PWM_Start+0x3e>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	bf14      	ite	ne
 8007fa2:	2301      	movne	r3, #1
 8007fa4:	2300      	moveq	r3, #0
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	e02f      	b.n	800800a <HAL_TIM_PWM_Start+0x9e>
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b08      	cmp	r3, #8
 8007fae:	d109      	bne.n	8007fc4 <HAL_TIM_PWM_Start+0x58>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	bf14      	ite	ne
 8007fbc:	2301      	movne	r3, #1
 8007fbe:	2300      	moveq	r3, #0
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	e022      	b.n	800800a <HAL_TIM_PWM_Start+0x9e>
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2b0c      	cmp	r3, #12
 8007fc8:	d109      	bne.n	8007fde <HAL_TIM_PWM_Start+0x72>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	bf14      	ite	ne
 8007fd6:	2301      	movne	r3, #1
 8007fd8:	2300      	moveq	r3, #0
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	e015      	b.n	800800a <HAL_TIM_PWM_Start+0x9e>
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b10      	cmp	r3, #16
 8007fe2:	d109      	bne.n	8007ff8 <HAL_TIM_PWM_Start+0x8c>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	bf14      	ite	ne
 8007ff0:	2301      	movne	r3, #1
 8007ff2:	2300      	moveq	r3, #0
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	e008      	b.n	800800a <HAL_TIM_PWM_Start+0x9e>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b01      	cmp	r3, #1
 8008002:	bf14      	ite	ne
 8008004:	2301      	movne	r3, #1
 8008006:	2300      	moveq	r3, #0
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e0a6      	b.n	8008160 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d104      	bne.n	8008022 <HAL_TIM_PWM_Start+0xb6>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2202      	movs	r2, #2
 800801c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008020:	e023      	b.n	800806a <HAL_TIM_PWM_Start+0xfe>
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b04      	cmp	r3, #4
 8008026:	d104      	bne.n	8008032 <HAL_TIM_PWM_Start+0xc6>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008030:	e01b      	b.n	800806a <HAL_TIM_PWM_Start+0xfe>
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2b08      	cmp	r3, #8
 8008036:	d104      	bne.n	8008042 <HAL_TIM_PWM_Start+0xd6>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2202      	movs	r2, #2
 800803c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008040:	e013      	b.n	800806a <HAL_TIM_PWM_Start+0xfe>
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b0c      	cmp	r3, #12
 8008046:	d104      	bne.n	8008052 <HAL_TIM_PWM_Start+0xe6>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008050:	e00b      	b.n	800806a <HAL_TIM_PWM_Start+0xfe>
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b10      	cmp	r3, #16
 8008056:	d104      	bne.n	8008062 <HAL_TIM_PWM_Start+0xf6>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008060:	e003      	b.n	800806a <HAL_TIM_PWM_Start+0xfe>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2202      	movs	r2, #2
 8008066:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2201      	movs	r2, #1
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	4618      	mov	r0, r3
 8008074:	f001 fc9c 	bl	80099b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a3a      	ldr	r2, [pc, #232]	@ (8008168 <HAL_TIM_PWM_Start+0x1fc>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d018      	beq.n	80080b4 <HAL_TIM_PWM_Start+0x148>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a39      	ldr	r2, [pc, #228]	@ (800816c <HAL_TIM_PWM_Start+0x200>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d013      	beq.n	80080b4 <HAL_TIM_PWM_Start+0x148>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a37      	ldr	r2, [pc, #220]	@ (8008170 <HAL_TIM_PWM_Start+0x204>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d00e      	beq.n	80080b4 <HAL_TIM_PWM_Start+0x148>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a36      	ldr	r2, [pc, #216]	@ (8008174 <HAL_TIM_PWM_Start+0x208>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d009      	beq.n	80080b4 <HAL_TIM_PWM_Start+0x148>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a34      	ldr	r2, [pc, #208]	@ (8008178 <HAL_TIM_PWM_Start+0x20c>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d004      	beq.n	80080b4 <HAL_TIM_PWM_Start+0x148>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a33      	ldr	r2, [pc, #204]	@ (800817c <HAL_TIM_PWM_Start+0x210>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d101      	bne.n	80080b8 <HAL_TIM_PWM_Start+0x14c>
 80080b4:	2301      	movs	r3, #1
 80080b6:	e000      	b.n	80080ba <HAL_TIM_PWM_Start+0x14e>
 80080b8:	2300      	movs	r3, #0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d007      	beq.n	80080ce <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80080cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a25      	ldr	r2, [pc, #148]	@ (8008168 <HAL_TIM_PWM_Start+0x1fc>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d022      	beq.n	800811e <HAL_TIM_PWM_Start+0x1b2>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080e0:	d01d      	beq.n	800811e <HAL_TIM_PWM_Start+0x1b2>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a26      	ldr	r2, [pc, #152]	@ (8008180 <HAL_TIM_PWM_Start+0x214>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d018      	beq.n	800811e <HAL_TIM_PWM_Start+0x1b2>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a24      	ldr	r2, [pc, #144]	@ (8008184 <HAL_TIM_PWM_Start+0x218>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d013      	beq.n	800811e <HAL_TIM_PWM_Start+0x1b2>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a23      	ldr	r2, [pc, #140]	@ (8008188 <HAL_TIM_PWM_Start+0x21c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d00e      	beq.n	800811e <HAL_TIM_PWM_Start+0x1b2>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a19      	ldr	r2, [pc, #100]	@ (800816c <HAL_TIM_PWM_Start+0x200>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d009      	beq.n	800811e <HAL_TIM_PWM_Start+0x1b2>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a18      	ldr	r2, [pc, #96]	@ (8008170 <HAL_TIM_PWM_Start+0x204>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d004      	beq.n	800811e <HAL_TIM_PWM_Start+0x1b2>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a18      	ldr	r2, [pc, #96]	@ (800817c <HAL_TIM_PWM_Start+0x210>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d115      	bne.n	800814a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	4b19      	ldr	r3, [pc, #100]	@ (800818c <HAL_TIM_PWM_Start+0x220>)
 8008126:	4013      	ands	r3, r2
 8008128:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2b06      	cmp	r3, #6
 800812e:	d015      	beq.n	800815c <HAL_TIM_PWM_Start+0x1f0>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008136:	d011      	beq.n	800815c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f042 0201 	orr.w	r2, r2, #1
 8008146:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008148:	e008      	b.n	800815c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f042 0201 	orr.w	r2, r2, #1
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	e000      	b.n	800815e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800815c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	40012c00 	.word	0x40012c00
 800816c:	40013400 	.word	0x40013400
 8008170:	40014000 	.word	0x40014000
 8008174:	40014400 	.word	0x40014400
 8008178:	40014800 	.word	0x40014800
 800817c:	40015000 	.word	0x40015000
 8008180:	40000400 	.word	0x40000400
 8008184:	40000800 	.word	0x40000800
 8008188:	40000c00 	.word	0x40000c00
 800818c:	00010007 	.word	0x00010007

08008190 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e04c      	b.n	800823e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d111      	bne.n	80081d4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 fc1f 	bl	80099fc <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d102      	bne.n	80081cc <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a1f      	ldr	r2, [pc, #124]	@ (8008248 <HAL_TIM_OnePulse_Init+0xb8>)
 80081ca:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3304      	adds	r3, #4
 80081e4:	4619      	mov	r1, r3
 80081e6:	4610      	mov	r0, r2
 80081e8:	f000 ff68 	bl	80090bc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f022 0208 	bic.w	r2, r2, #8
 80081fa:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6819      	ldr	r1, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	430a      	orrs	r2, r1
 800820a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	0800824d 	.word	0x0800824d

0800824c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008270:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008278:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008280:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008288:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d108      	bne.n	80082a2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008290:	7bbb      	ldrb	r3, [r7, #14]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d105      	bne.n	80082a2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008296:	7b7b      	ldrb	r3, [r7, #13]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d102      	bne.n	80082a2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800829c:	7b3b      	ldrb	r3, [r7, #12]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d001      	beq.n	80082a6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e059      	b.n	800835a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2202      	movs	r2, #2
 80082aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2202      	movs	r2, #2
 80082b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2202      	movs	r2, #2
 80082ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2202      	movs	r2, #2
 80082c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68da      	ldr	r2, [r3, #12]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f042 0202 	orr.w	r2, r2, #2
 80082d4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68da      	ldr	r2, [r3, #12]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f042 0204 	orr.w	r2, r2, #4
 80082e4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2201      	movs	r2, #1
 80082ec:	2100      	movs	r1, #0
 80082ee:	4618      	mov	r0, r3
 80082f0:	f001 fb5e 	bl	80099b0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2201      	movs	r2, #1
 80082fa:	2104      	movs	r1, #4
 80082fc:	4618      	mov	r0, r3
 80082fe:	f001 fb57 	bl	80099b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a17      	ldr	r2, [pc, #92]	@ (8008364 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d018      	beq.n	800833e <HAL_TIM_OnePulse_Start_IT+0xde>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a15      	ldr	r2, [pc, #84]	@ (8008368 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d013      	beq.n	800833e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a14      	ldr	r2, [pc, #80]	@ (800836c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d00e      	beq.n	800833e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a12      	ldr	r2, [pc, #72]	@ (8008370 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d009      	beq.n	800833e <HAL_TIM_OnePulse_Start_IT+0xde>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a11      	ldr	r2, [pc, #68]	@ (8008374 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d004      	beq.n	800833e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a0f      	ldr	r2, [pc, #60]	@ (8008378 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d101      	bne.n	8008342 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800833e:	2301      	movs	r3, #1
 8008340:	e000      	b.n	8008344 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8008342:	2300      	movs	r3, #0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d007      	beq.n	8008358 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008356:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	40012c00 	.word	0x40012c00
 8008368:	40013400 	.word	0x40013400
 800836c:	40014000 	.word	0x40014000
 8008370:	40014400 	.word	0x40014400
 8008374:	40014800 	.word	0x40014800
 8008378:	40015000 	.word	0x40015000

0800837c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e0a2      	b.n	80084d6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b00      	cmp	r3, #0
 800839a:	d111      	bne.n	80083c0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f001 fb29 	bl	80099fc <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d102      	bne.n	80083b8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a4a      	ldr	r2, [pc, #296]	@ (80084e0 <HAL_TIM_Encoder_Init+0x164>)
 80083b6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	6812      	ldr	r2, [r2, #0]
 80083d2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80083d6:	f023 0307 	bic.w	r3, r3, #7
 80083da:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3304      	adds	r3, #4
 80083e4:	4619      	mov	r1, r3
 80083e6:	4610      	mov	r0, r2
 80083e8:	f000 fe68 	bl	80090bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	4313      	orrs	r3, r2
 800840c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008414:	f023 0303 	bic.w	r3, r3, #3
 8008418:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	689a      	ldr	r2, [r3, #8]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	021b      	lsls	r3, r3, #8
 8008424:	4313      	orrs	r3, r2
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	4313      	orrs	r3, r2
 800842a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008432:	f023 030c 	bic.w	r3, r3, #12
 8008436:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800843e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	68da      	ldr	r2, [r3, #12]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	69db      	ldr	r3, [r3, #28]
 800844c:	021b      	lsls	r3, r3, #8
 800844e:	4313      	orrs	r3, r2
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	4313      	orrs	r3, r2
 8008454:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	011a      	lsls	r2, r3, #4
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	031b      	lsls	r3, r3, #12
 8008462:	4313      	orrs	r3, r2
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	4313      	orrs	r3, r2
 8008468:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008470:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008478:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	011b      	lsls	r3, r3, #4
 8008484:	4313      	orrs	r3, r2
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	4313      	orrs	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	08004289 	.word	0x08004289

080084e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80084fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008504:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800850c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d110      	bne.n	8008536 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008514:	7bfb      	ldrb	r3, [r7, #15]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d102      	bne.n	8008520 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800851a:	7b7b      	ldrb	r3, [r7, #13]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d001      	beq.n	8008524 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e069      	b.n	80085f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2202      	movs	r2, #2
 8008528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2202      	movs	r2, #2
 8008530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008534:	e031      	b.n	800859a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b04      	cmp	r3, #4
 800853a:	d110      	bne.n	800855e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800853c:	7bbb      	ldrb	r3, [r7, #14]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d102      	bne.n	8008548 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008542:	7b3b      	ldrb	r3, [r7, #12]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d001      	beq.n	800854c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e055      	b.n	80085f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2202      	movs	r2, #2
 8008550:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2202      	movs	r2, #2
 8008558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800855c:	e01d      	b.n	800859a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800855e:	7bfb      	ldrb	r3, [r7, #15]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d108      	bne.n	8008576 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d105      	bne.n	8008576 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800856a:	7b7b      	ldrb	r3, [r7, #13]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d102      	bne.n	8008576 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008570:	7b3b      	ldrb	r3, [r7, #12]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d001      	beq.n	800857a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e03e      	b.n	80085f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2202      	movs	r2, #2
 800857e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2202      	movs	r2, #2
 8008586:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2202      	movs	r2, #2
 800858e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2202      	movs	r2, #2
 8008596:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d003      	beq.n	80085a8 <HAL_TIM_Encoder_Start+0xc4>
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	d008      	beq.n	80085b8 <HAL_TIM_Encoder_Start+0xd4>
 80085a6:	e00f      	b.n	80085c8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2201      	movs	r2, #1
 80085ae:	2100      	movs	r1, #0
 80085b0:	4618      	mov	r0, r3
 80085b2:	f001 f9fd 	bl	80099b0 <TIM_CCxChannelCmd>
      break;
 80085b6:	e016      	b.n	80085e6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2201      	movs	r2, #1
 80085be:	2104      	movs	r1, #4
 80085c0:	4618      	mov	r0, r3
 80085c2:	f001 f9f5 	bl	80099b0 <TIM_CCxChannelCmd>
      break;
 80085c6:	e00e      	b.n	80085e6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2201      	movs	r2, #1
 80085ce:	2100      	movs	r1, #0
 80085d0:	4618      	mov	r0, r3
 80085d2:	f001 f9ed 	bl	80099b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2201      	movs	r2, #1
 80085dc:	2104      	movs	r1, #4
 80085de:	4618      	mov	r0, r3
 80085e0:	f001 f9e6 	bl	80099b0 <TIM_CCxChannelCmd>
      break;
 80085e4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f042 0201 	orr.w	r2, r2, #1
 80085f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f003 0302 	and.w	r3, r3, #2
 800861e:	2b00      	cmp	r3, #0
 8008620:	d026      	beq.n	8008670 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b00      	cmp	r3, #0
 800862a:	d021      	beq.n	8008670 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f06f 0202 	mvn.w	r2, #2
 8008634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	f003 0303 	and.w	r3, r3, #3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d005      	beq.n	8008656 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	4798      	blx	r3
 8008654:	e009      	b.n	800866a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f003 0304 	and.w	r3, r3, #4
 8008676:	2b00      	cmp	r3, #0
 8008678:	d026      	beq.n	80086c8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f003 0304 	and.w	r3, r3, #4
 8008680:	2b00      	cmp	r3, #0
 8008682:	d021      	beq.n	80086c8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f06f 0204 	mvn.w	r2, #4
 800868c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2202      	movs	r2, #2
 8008692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d005      	beq.n	80086ae <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	4798      	blx	r3
 80086ac:	e009      	b.n	80086c2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f003 0308 	and.w	r3, r3, #8
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d026      	beq.n	8008720 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f003 0308 	and.w	r3, r3, #8
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d021      	beq.n	8008720 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f06f 0208 	mvn.w	r2, #8
 80086e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2204      	movs	r2, #4
 80086ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	f003 0303 	and.w	r3, r3, #3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d005      	beq.n	8008706 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	4798      	blx	r3
 8008704:	e009      	b.n	800871a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	f003 0310 	and.w	r3, r3, #16
 8008726:	2b00      	cmp	r3, #0
 8008728:	d026      	beq.n	8008778 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f003 0310 	and.w	r3, r3, #16
 8008730:	2b00      	cmp	r3, #0
 8008732:	d021      	beq.n	8008778 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f06f 0210 	mvn.w	r2, #16
 800873c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2208      	movs	r2, #8
 8008742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	69db      	ldr	r3, [r3, #28]
 800874a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800874e:	2b00      	cmp	r3, #0
 8008750:	d005      	beq.n	800875e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	4798      	blx	r3
 800875c:	e009      	b.n	8008772 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00e      	beq.n	80087a0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b00      	cmp	r3, #0
 800878a:	d009      	beq.n	80087a0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f06f 0201 	mvn.w	r2, #1
 8008794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d104      	bne.n	80087b4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00e      	beq.n	80087d2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d009      	beq.n	80087d2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80087c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00e      	beq.n	80087fa <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d009      	beq.n	80087fa <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80087ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00e      	beq.n	8008822 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800880a:	2b00      	cmp	r3, #0
 800880c:	d009      	beq.n	8008822 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f003 0320 	and.w	r3, r3, #32
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00e      	beq.n	800884a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f003 0320 	and.w	r3, r3, #32
 8008832:	2b00      	cmp	r3, #0
 8008834:	d009      	beq.n	800884a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f06f 0220 	mvn.w	r2, #32
 800883e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00e      	beq.n	8008872 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d009      	beq.n	8008872 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00e      	beq.n	800889a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008882:	2b00      	cmp	r3, #0
 8008884:	d009      	beq.n	800889a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800888e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00e      	beq.n	80088c2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d009      	beq.n	80088c2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80088b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00e      	beq.n	80088ea <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d009      	beq.n	80088ea <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80088de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088ea:	bf00      	nop
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
	...

080088f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008900:	2300      	movs	r3, #0
 8008902:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800890a:	2b01      	cmp	r3, #1
 800890c:	d101      	bne.n	8008912 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800890e:	2302      	movs	r3, #2
 8008910:	e0ff      	b.n	8008b12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2b14      	cmp	r3, #20
 800891e:	f200 80f0 	bhi.w	8008b02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008922:	a201      	add	r2, pc, #4	@ (adr r2, 8008928 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008928:	0800897d 	.word	0x0800897d
 800892c:	08008b03 	.word	0x08008b03
 8008930:	08008b03 	.word	0x08008b03
 8008934:	08008b03 	.word	0x08008b03
 8008938:	080089bd 	.word	0x080089bd
 800893c:	08008b03 	.word	0x08008b03
 8008940:	08008b03 	.word	0x08008b03
 8008944:	08008b03 	.word	0x08008b03
 8008948:	080089ff 	.word	0x080089ff
 800894c:	08008b03 	.word	0x08008b03
 8008950:	08008b03 	.word	0x08008b03
 8008954:	08008b03 	.word	0x08008b03
 8008958:	08008a3f 	.word	0x08008a3f
 800895c:	08008b03 	.word	0x08008b03
 8008960:	08008b03 	.word	0x08008b03
 8008964:	08008b03 	.word	0x08008b03
 8008968:	08008a81 	.word	0x08008a81
 800896c:	08008b03 	.word	0x08008b03
 8008970:	08008b03 	.word	0x08008b03
 8008974:	08008b03 	.word	0x08008b03
 8008978:	08008ac1 	.word	0x08008ac1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68b9      	ldr	r1, [r7, #8]
 8008982:	4618      	mov	r0, r3
 8008984:	f000 fc4e 	bl	8009224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	699a      	ldr	r2, [r3, #24]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f042 0208 	orr.w	r2, r2, #8
 8008996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	699a      	ldr	r2, [r3, #24]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f022 0204 	bic.w	r2, r2, #4
 80089a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6999      	ldr	r1, [r3, #24]
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	691a      	ldr	r2, [r3, #16]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	430a      	orrs	r2, r1
 80089b8:	619a      	str	r2, [r3, #24]
      break;
 80089ba:	e0a5      	b.n	8008b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68b9      	ldr	r1, [r7, #8]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f000 fcc8 	bl	8009358 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	699a      	ldr	r2, [r3, #24]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	699a      	ldr	r2, [r3, #24]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6999      	ldr	r1, [r3, #24]
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	021a      	lsls	r2, r3, #8
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	430a      	orrs	r2, r1
 80089fa:	619a      	str	r2, [r3, #24]
      break;
 80089fc:	e084      	b.n	8008b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68b9      	ldr	r1, [r7, #8]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 fd3b 	bl	8009480 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	69da      	ldr	r2, [r3, #28]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f042 0208 	orr.w	r2, r2, #8
 8008a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	69da      	ldr	r2, [r3, #28]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f022 0204 	bic.w	r2, r2, #4
 8008a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	69d9      	ldr	r1, [r3, #28]
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	691a      	ldr	r2, [r3, #16]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	61da      	str	r2, [r3, #28]
      break;
 8008a3c:	e064      	b.n	8008b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68b9      	ldr	r1, [r7, #8]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 fdad 	bl	80095a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	69da      	ldr	r2, [r3, #28]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	69da      	ldr	r2, [r3, #28]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	69d9      	ldr	r1, [r3, #28]
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	021a      	lsls	r2, r3, #8
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	61da      	str	r2, [r3, #28]
      break;
 8008a7e:	e043      	b.n	8008b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68b9      	ldr	r1, [r7, #8]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 fe20 	bl	80096cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f042 0208 	orr.w	r2, r2, #8
 8008a9a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f022 0204 	bic.w	r2, r2, #4
 8008aaa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	691a      	ldr	r2, [r3, #16]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	430a      	orrs	r2, r1
 8008abc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008abe:	e023      	b.n	8008b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68b9      	ldr	r1, [r7, #8]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 fe6a 	bl	80097a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ada:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008aea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	021a      	lsls	r2, r3, #8
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	430a      	orrs	r2, r1
 8008afe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008b00:	e002      	b.n	8008b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	75fb      	strb	r3, [r7, #23]
      break;
 8008b06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3718      	adds	r7, #24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop

08008b1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d101      	bne.n	8008b38 <HAL_TIM_ConfigClockSource+0x1c>
 8008b34:	2302      	movs	r3, #2
 8008b36:	e0f6      	b.n	8008d26 <HAL_TIM_ConfigClockSource+0x20a>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2202      	movs	r2, #2
 8008b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008b56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a6f      	ldr	r2, [pc, #444]	@ (8008d30 <HAL_TIM_ConfigClockSource+0x214>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	f000 80c1 	beq.w	8008cfa <HAL_TIM_ConfigClockSource+0x1de>
 8008b78:	4a6d      	ldr	r2, [pc, #436]	@ (8008d30 <HAL_TIM_ConfigClockSource+0x214>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	f200 80c6 	bhi.w	8008d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8008b80:	4a6c      	ldr	r2, [pc, #432]	@ (8008d34 <HAL_TIM_ConfigClockSource+0x218>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	f000 80b9 	beq.w	8008cfa <HAL_TIM_ConfigClockSource+0x1de>
 8008b88:	4a6a      	ldr	r2, [pc, #424]	@ (8008d34 <HAL_TIM_ConfigClockSource+0x218>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	f200 80be 	bhi.w	8008d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8008b90:	4a69      	ldr	r2, [pc, #420]	@ (8008d38 <HAL_TIM_ConfigClockSource+0x21c>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	f000 80b1 	beq.w	8008cfa <HAL_TIM_ConfigClockSource+0x1de>
 8008b98:	4a67      	ldr	r2, [pc, #412]	@ (8008d38 <HAL_TIM_ConfigClockSource+0x21c>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	f200 80b6 	bhi.w	8008d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8008ba0:	4a66      	ldr	r2, [pc, #408]	@ (8008d3c <HAL_TIM_ConfigClockSource+0x220>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	f000 80a9 	beq.w	8008cfa <HAL_TIM_ConfigClockSource+0x1de>
 8008ba8:	4a64      	ldr	r2, [pc, #400]	@ (8008d3c <HAL_TIM_ConfigClockSource+0x220>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	f200 80ae 	bhi.w	8008d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8008bb0:	4a63      	ldr	r2, [pc, #396]	@ (8008d40 <HAL_TIM_ConfigClockSource+0x224>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	f000 80a1 	beq.w	8008cfa <HAL_TIM_ConfigClockSource+0x1de>
 8008bb8:	4a61      	ldr	r2, [pc, #388]	@ (8008d40 <HAL_TIM_ConfigClockSource+0x224>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	f200 80a6 	bhi.w	8008d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8008bc0:	4a60      	ldr	r2, [pc, #384]	@ (8008d44 <HAL_TIM_ConfigClockSource+0x228>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	f000 8099 	beq.w	8008cfa <HAL_TIM_ConfigClockSource+0x1de>
 8008bc8:	4a5e      	ldr	r2, [pc, #376]	@ (8008d44 <HAL_TIM_ConfigClockSource+0x228>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	f200 809e 	bhi.w	8008d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8008bd0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008bd4:	f000 8091 	beq.w	8008cfa <HAL_TIM_ConfigClockSource+0x1de>
 8008bd8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008bdc:	f200 8096 	bhi.w	8008d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8008be0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008be4:	f000 8089 	beq.w	8008cfa <HAL_TIM_ConfigClockSource+0x1de>
 8008be8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bec:	f200 808e 	bhi.w	8008d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8008bf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bf4:	d03e      	beq.n	8008c74 <HAL_TIM_ConfigClockSource+0x158>
 8008bf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bfa:	f200 8087 	bhi.w	8008d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8008bfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c02:	f000 8086 	beq.w	8008d12 <HAL_TIM_ConfigClockSource+0x1f6>
 8008c06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c0a:	d87f      	bhi.n	8008d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8008c0c:	2b70      	cmp	r3, #112	@ 0x70
 8008c0e:	d01a      	beq.n	8008c46 <HAL_TIM_ConfigClockSource+0x12a>
 8008c10:	2b70      	cmp	r3, #112	@ 0x70
 8008c12:	d87b      	bhi.n	8008d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8008c14:	2b60      	cmp	r3, #96	@ 0x60
 8008c16:	d050      	beq.n	8008cba <HAL_TIM_ConfigClockSource+0x19e>
 8008c18:	2b60      	cmp	r3, #96	@ 0x60
 8008c1a:	d877      	bhi.n	8008d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8008c1c:	2b50      	cmp	r3, #80	@ 0x50
 8008c1e:	d03c      	beq.n	8008c9a <HAL_TIM_ConfigClockSource+0x17e>
 8008c20:	2b50      	cmp	r3, #80	@ 0x50
 8008c22:	d873      	bhi.n	8008d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8008c24:	2b40      	cmp	r3, #64	@ 0x40
 8008c26:	d058      	beq.n	8008cda <HAL_TIM_ConfigClockSource+0x1be>
 8008c28:	2b40      	cmp	r3, #64	@ 0x40
 8008c2a:	d86f      	bhi.n	8008d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8008c2c:	2b30      	cmp	r3, #48	@ 0x30
 8008c2e:	d064      	beq.n	8008cfa <HAL_TIM_ConfigClockSource+0x1de>
 8008c30:	2b30      	cmp	r3, #48	@ 0x30
 8008c32:	d86b      	bhi.n	8008d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8008c34:	2b20      	cmp	r3, #32
 8008c36:	d060      	beq.n	8008cfa <HAL_TIM_ConfigClockSource+0x1de>
 8008c38:	2b20      	cmp	r3, #32
 8008c3a:	d867      	bhi.n	8008d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d05c      	beq.n	8008cfa <HAL_TIM_ConfigClockSource+0x1de>
 8008c40:	2b10      	cmp	r3, #16
 8008c42:	d05a      	beq.n	8008cfa <HAL_TIM_ConfigClockSource+0x1de>
 8008c44:	e062      	b.n	8008d0c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c56:	f000 fe8b 	bl	8009970 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008c68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	609a      	str	r2, [r3, #8]
      break;
 8008c72:	e04f      	b.n	8008d14 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c84:	f000 fe74 	bl	8009970 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	689a      	ldr	r2, [r3, #8]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c96:	609a      	str	r2, [r3, #8]
      break;
 8008c98:	e03c      	b.n	8008d14 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f000 fde6 	bl	8009878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2150      	movs	r1, #80	@ 0x50
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f000 fe3f 	bl	8009936 <TIM_ITRx_SetConfig>
      break;
 8008cb8:	e02c      	b.n	8008d14 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	f000 fe05 	bl	80098d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2160      	movs	r1, #96	@ 0x60
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 fe2f 	bl	8009936 <TIM_ITRx_SetConfig>
      break;
 8008cd8:	e01c      	b.n	8008d14 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	f000 fdc6 	bl	8009878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2140      	movs	r1, #64	@ 0x40
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 fe1f 	bl	8009936 <TIM_ITRx_SetConfig>
      break;
 8008cf8:	e00c      	b.n	8008d14 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4619      	mov	r1, r3
 8008d04:	4610      	mov	r0, r2
 8008d06:	f000 fe16 	bl	8009936 <TIM_ITRx_SetConfig>
      break;
 8008d0a:	e003      	b.n	8008d14 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d10:	e000      	b.n	8008d14 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008d12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	00100070 	.word	0x00100070
 8008d34:	00100060 	.word	0x00100060
 8008d38:	00100050 	.word	0x00100050
 8008d3c:	00100040 	.word	0x00100040
 8008d40:	00100030 	.word	0x00100030
 8008d44:	00100020 	.word	0x00100020

08008d48 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b087      	sub	sp, #28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	460b      	mov	r3, r1
 8008e06:	607a      	str	r2, [r7, #4]
 8008e08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e14a      	b.n	80090ae <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	f040 80dd 	bne.w	8008fe0 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008e26:	7afb      	ldrb	r3, [r7, #11]
 8008e28:	2b1f      	cmp	r3, #31
 8008e2a:	f200 80d6 	bhi.w	8008fda <HAL_TIM_RegisterCallback+0x1de>
 8008e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e34 <HAL_TIM_RegisterCallback+0x38>)
 8008e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e34:	08008eb5 	.word	0x08008eb5
 8008e38:	08008ebd 	.word	0x08008ebd
 8008e3c:	08008ec5 	.word	0x08008ec5
 8008e40:	08008ecd 	.word	0x08008ecd
 8008e44:	08008ed5 	.word	0x08008ed5
 8008e48:	08008edd 	.word	0x08008edd
 8008e4c:	08008ee5 	.word	0x08008ee5
 8008e50:	08008eed 	.word	0x08008eed
 8008e54:	08008ef5 	.word	0x08008ef5
 8008e58:	08008efd 	.word	0x08008efd
 8008e5c:	08008f05 	.word	0x08008f05
 8008e60:	08008f0d 	.word	0x08008f0d
 8008e64:	08008f15 	.word	0x08008f15
 8008e68:	08008f1d 	.word	0x08008f1d
 8008e6c:	08008f27 	.word	0x08008f27
 8008e70:	08008f31 	.word	0x08008f31
 8008e74:	08008f3b 	.word	0x08008f3b
 8008e78:	08008f45 	.word	0x08008f45
 8008e7c:	08008f4f 	.word	0x08008f4f
 8008e80:	08008f59 	.word	0x08008f59
 8008e84:	08008f63 	.word	0x08008f63
 8008e88:	08008f6d 	.word	0x08008f6d
 8008e8c:	08008f77 	.word	0x08008f77
 8008e90:	08008f81 	.word	0x08008f81
 8008e94:	08008f8b 	.word	0x08008f8b
 8008e98:	08008f95 	.word	0x08008f95
 8008e9c:	08008f9f 	.word	0x08008f9f
 8008ea0:	08008fa9 	.word	0x08008fa9
 8008ea4:	08008fb3 	.word	0x08008fb3
 8008ea8:	08008fbd 	.word	0x08008fbd
 8008eac:	08008fc7 	.word	0x08008fc7
 8008eb0:	08008fd1 	.word	0x08008fd1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008eba:	e0f7      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008ec2:	e0f3      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008eca:	e0ef      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008ed2:	e0eb      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008eda:	e0e7      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008ee2:	e0e3      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008eea:	e0df      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008ef2:	e0db      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008efa:	e0d7      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008f02:	e0d3      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008f0a:	e0cf      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008f12:	e0cb      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008f1a:	e0c7      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008f24:	e0c2      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8008f2e:	e0bd      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008f38:	e0b8      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008f42:	e0b3      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008f4c:	e0ae      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008f56:	e0a9      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008f60:	e0a4      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008f6a:	e09f      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008f74:	e09a      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008f7e:	e095      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008f88:	e090      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008f92:	e08b      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008f9c:	e086      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008fa6:	e081      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008fb0:	e07c      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008fba:	e077      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008fc4:	e072      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008fce:	e06d      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008fd8:	e068      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	75fb      	strb	r3, [r7, #23]
        break;
 8008fde:	e065      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d15d      	bne.n	80090a8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008fec:	7afb      	ldrb	r3, [r7, #11]
 8008fee:	2b0d      	cmp	r3, #13
 8008ff0:	d857      	bhi.n	80090a2 <HAL_TIM_RegisterCallback+0x2a6>
 8008ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff8 <HAL_TIM_RegisterCallback+0x1fc>)
 8008ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff8:	08009031 	.word	0x08009031
 8008ffc:	08009039 	.word	0x08009039
 8009000:	08009041 	.word	0x08009041
 8009004:	08009049 	.word	0x08009049
 8009008:	08009051 	.word	0x08009051
 800900c:	08009059 	.word	0x08009059
 8009010:	08009061 	.word	0x08009061
 8009014:	08009069 	.word	0x08009069
 8009018:	08009071 	.word	0x08009071
 800901c:	08009079 	.word	0x08009079
 8009020:	08009081 	.word	0x08009081
 8009024:	08009089 	.word	0x08009089
 8009028:	08009091 	.word	0x08009091
 800902c:	08009099 	.word	0x08009099
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009036:	e039      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800903e:	e035      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009046:	e031      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800904e:	e02d      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009056:	e029      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800905e:	e025      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009066:	e021      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800906e:	e01d      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009076:	e019      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800907e:	e015      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009086:	e011      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800908e:	e00d      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009096:	e009      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80090a0:	e004      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	75fb      	strb	r3, [r7, #23]
        break;
 80090a6:	e001      	b.n	80090ac <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	371c      	adds	r7, #28
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop

080090bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a4c      	ldr	r2, [pc, #304]	@ (8009200 <TIM_Base_SetConfig+0x144>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d017      	beq.n	8009104 <TIM_Base_SetConfig+0x48>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090da:	d013      	beq.n	8009104 <TIM_Base_SetConfig+0x48>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a49      	ldr	r2, [pc, #292]	@ (8009204 <TIM_Base_SetConfig+0x148>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d00f      	beq.n	8009104 <TIM_Base_SetConfig+0x48>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a48      	ldr	r2, [pc, #288]	@ (8009208 <TIM_Base_SetConfig+0x14c>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d00b      	beq.n	8009104 <TIM_Base_SetConfig+0x48>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a47      	ldr	r2, [pc, #284]	@ (800920c <TIM_Base_SetConfig+0x150>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d007      	beq.n	8009104 <TIM_Base_SetConfig+0x48>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a46      	ldr	r2, [pc, #280]	@ (8009210 <TIM_Base_SetConfig+0x154>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d003      	beq.n	8009104 <TIM_Base_SetConfig+0x48>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a45      	ldr	r2, [pc, #276]	@ (8009214 <TIM_Base_SetConfig+0x158>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d108      	bne.n	8009116 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800910a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	4313      	orrs	r3, r2
 8009114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a39      	ldr	r2, [pc, #228]	@ (8009200 <TIM_Base_SetConfig+0x144>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d023      	beq.n	8009166 <TIM_Base_SetConfig+0xaa>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009124:	d01f      	beq.n	8009166 <TIM_Base_SetConfig+0xaa>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a36      	ldr	r2, [pc, #216]	@ (8009204 <TIM_Base_SetConfig+0x148>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d01b      	beq.n	8009166 <TIM_Base_SetConfig+0xaa>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a35      	ldr	r2, [pc, #212]	@ (8009208 <TIM_Base_SetConfig+0x14c>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d017      	beq.n	8009166 <TIM_Base_SetConfig+0xaa>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a34      	ldr	r2, [pc, #208]	@ (800920c <TIM_Base_SetConfig+0x150>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d013      	beq.n	8009166 <TIM_Base_SetConfig+0xaa>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a33      	ldr	r2, [pc, #204]	@ (8009210 <TIM_Base_SetConfig+0x154>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d00f      	beq.n	8009166 <TIM_Base_SetConfig+0xaa>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a33      	ldr	r2, [pc, #204]	@ (8009218 <TIM_Base_SetConfig+0x15c>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d00b      	beq.n	8009166 <TIM_Base_SetConfig+0xaa>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a32      	ldr	r2, [pc, #200]	@ (800921c <TIM_Base_SetConfig+0x160>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d007      	beq.n	8009166 <TIM_Base_SetConfig+0xaa>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a31      	ldr	r2, [pc, #196]	@ (8009220 <TIM_Base_SetConfig+0x164>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d003      	beq.n	8009166 <TIM_Base_SetConfig+0xaa>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a2c      	ldr	r2, [pc, #176]	@ (8009214 <TIM_Base_SetConfig+0x158>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d108      	bne.n	8009178 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800916c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	4313      	orrs	r3, r2
 8009176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	4313      	orrs	r3, r2
 8009184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	689a      	ldr	r2, [r3, #8]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a18      	ldr	r2, [pc, #96]	@ (8009200 <TIM_Base_SetConfig+0x144>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d013      	beq.n	80091cc <TIM_Base_SetConfig+0x110>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a1a      	ldr	r2, [pc, #104]	@ (8009210 <TIM_Base_SetConfig+0x154>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d00f      	beq.n	80091cc <TIM_Base_SetConfig+0x110>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a1a      	ldr	r2, [pc, #104]	@ (8009218 <TIM_Base_SetConfig+0x15c>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d00b      	beq.n	80091cc <TIM_Base_SetConfig+0x110>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a19      	ldr	r2, [pc, #100]	@ (800921c <TIM_Base_SetConfig+0x160>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d007      	beq.n	80091cc <TIM_Base_SetConfig+0x110>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a18      	ldr	r2, [pc, #96]	@ (8009220 <TIM_Base_SetConfig+0x164>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d003      	beq.n	80091cc <TIM_Base_SetConfig+0x110>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a13      	ldr	r2, [pc, #76]	@ (8009214 <TIM_Base_SetConfig+0x158>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d103      	bne.n	80091d4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	691a      	ldr	r2, [r3, #16]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	f003 0301 	and.w	r3, r3, #1
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d105      	bne.n	80091f2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	f023 0201 	bic.w	r2, r3, #1
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	611a      	str	r2, [r3, #16]
  }
}
 80091f2:	bf00      	nop
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	40012c00 	.word	0x40012c00
 8009204:	40000400 	.word	0x40000400
 8009208:	40000800 	.word	0x40000800
 800920c:	40000c00 	.word	0x40000c00
 8009210:	40013400 	.word	0x40013400
 8009214:	40015000 	.word	0x40015000
 8009218:	40014000 	.word	0x40014000
 800921c:	40014400 	.word	0x40014400
 8009220:	40014800 	.word	0x40014800

08009224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a1b      	ldr	r3, [r3, #32]
 8009238:	f023 0201 	bic.w	r2, r3, #1
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f023 0303 	bic.w	r3, r3, #3
 800925e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	4313      	orrs	r3, r2
 8009268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	f023 0302 	bic.w	r3, r3, #2
 8009270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	4313      	orrs	r3, r2
 800927a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a30      	ldr	r2, [pc, #192]	@ (8009340 <TIM_OC1_SetConfig+0x11c>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d013      	beq.n	80092ac <TIM_OC1_SetConfig+0x88>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a2f      	ldr	r2, [pc, #188]	@ (8009344 <TIM_OC1_SetConfig+0x120>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d00f      	beq.n	80092ac <TIM_OC1_SetConfig+0x88>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a2e      	ldr	r2, [pc, #184]	@ (8009348 <TIM_OC1_SetConfig+0x124>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d00b      	beq.n	80092ac <TIM_OC1_SetConfig+0x88>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a2d      	ldr	r2, [pc, #180]	@ (800934c <TIM_OC1_SetConfig+0x128>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d007      	beq.n	80092ac <TIM_OC1_SetConfig+0x88>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a2c      	ldr	r2, [pc, #176]	@ (8009350 <TIM_OC1_SetConfig+0x12c>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d003      	beq.n	80092ac <TIM_OC1_SetConfig+0x88>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a2b      	ldr	r2, [pc, #172]	@ (8009354 <TIM_OC1_SetConfig+0x130>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d10c      	bne.n	80092c6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	f023 0308 	bic.w	r3, r3, #8
 80092b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	697a      	ldr	r2, [r7, #20]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f023 0304 	bic.w	r3, r3, #4
 80092c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009340 <TIM_OC1_SetConfig+0x11c>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d013      	beq.n	80092f6 <TIM_OC1_SetConfig+0xd2>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a1c      	ldr	r2, [pc, #112]	@ (8009344 <TIM_OC1_SetConfig+0x120>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d00f      	beq.n	80092f6 <TIM_OC1_SetConfig+0xd2>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a1b      	ldr	r2, [pc, #108]	@ (8009348 <TIM_OC1_SetConfig+0x124>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d00b      	beq.n	80092f6 <TIM_OC1_SetConfig+0xd2>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a1a      	ldr	r2, [pc, #104]	@ (800934c <TIM_OC1_SetConfig+0x128>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d007      	beq.n	80092f6 <TIM_OC1_SetConfig+0xd2>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a19      	ldr	r2, [pc, #100]	@ (8009350 <TIM_OC1_SetConfig+0x12c>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d003      	beq.n	80092f6 <TIM_OC1_SetConfig+0xd2>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a18      	ldr	r2, [pc, #96]	@ (8009354 <TIM_OC1_SetConfig+0x130>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d111      	bne.n	800931a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	693a      	ldr	r2, [r7, #16]
 800930c:	4313      	orrs	r3, r2
 800930e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	4313      	orrs	r3, r2
 8009318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	685a      	ldr	r2, [r3, #4]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	621a      	str	r2, [r3, #32]
}
 8009334:	bf00      	nop
 8009336:	371c      	adds	r7, #28
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr
 8009340:	40012c00 	.word	0x40012c00
 8009344:	40013400 	.word	0x40013400
 8009348:	40014000 	.word	0x40014000
 800934c:	40014400 	.word	0x40014400
 8009350:	40014800 	.word	0x40014800
 8009354:	40015000 	.word	0x40015000

08009358 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009358:	b480      	push	{r7}
 800935a:	b087      	sub	sp, #28
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a1b      	ldr	r3, [r3, #32]
 8009366:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a1b      	ldr	r3, [r3, #32]
 800936c:	f023 0210 	bic.w	r2, r3, #16
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009386:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800938a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	021b      	lsls	r3, r3, #8
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	4313      	orrs	r3, r2
 800939e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	f023 0320 	bic.w	r3, r3, #32
 80093a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	011b      	lsls	r3, r3, #4
 80093ae:	697a      	ldr	r2, [r7, #20]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a2c      	ldr	r2, [pc, #176]	@ (8009468 <TIM_OC2_SetConfig+0x110>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d007      	beq.n	80093cc <TIM_OC2_SetConfig+0x74>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a2b      	ldr	r2, [pc, #172]	@ (800946c <TIM_OC2_SetConfig+0x114>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d003      	beq.n	80093cc <TIM_OC2_SetConfig+0x74>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a2a      	ldr	r2, [pc, #168]	@ (8009470 <TIM_OC2_SetConfig+0x118>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d10d      	bne.n	80093e8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	011b      	lsls	r3, r3, #4
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	4313      	orrs	r3, r2
 80093de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a1f      	ldr	r2, [pc, #124]	@ (8009468 <TIM_OC2_SetConfig+0x110>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d013      	beq.n	8009418 <TIM_OC2_SetConfig+0xc0>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a1e      	ldr	r2, [pc, #120]	@ (800946c <TIM_OC2_SetConfig+0x114>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d00f      	beq.n	8009418 <TIM_OC2_SetConfig+0xc0>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009474 <TIM_OC2_SetConfig+0x11c>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d00b      	beq.n	8009418 <TIM_OC2_SetConfig+0xc0>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a1d      	ldr	r2, [pc, #116]	@ (8009478 <TIM_OC2_SetConfig+0x120>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d007      	beq.n	8009418 <TIM_OC2_SetConfig+0xc0>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a1c      	ldr	r2, [pc, #112]	@ (800947c <TIM_OC2_SetConfig+0x124>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d003      	beq.n	8009418 <TIM_OC2_SetConfig+0xc0>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a17      	ldr	r2, [pc, #92]	@ (8009470 <TIM_OC2_SetConfig+0x118>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d113      	bne.n	8009440 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800941e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009426:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	4313      	orrs	r3, r2
 8009432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	4313      	orrs	r3, r2
 800943e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	685a      	ldr	r2, [r3, #4]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	697a      	ldr	r2, [r7, #20]
 8009458:	621a      	str	r2, [r3, #32]
}
 800945a:	bf00      	nop
 800945c:	371c      	adds	r7, #28
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	40012c00 	.word	0x40012c00
 800946c:	40013400 	.word	0x40013400
 8009470:	40015000 	.word	0x40015000
 8009474:	40014000 	.word	0x40014000
 8009478:	40014400 	.word	0x40014400
 800947c:	40014800 	.word	0x40014800

08009480 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009480:	b480      	push	{r7}
 8009482:	b087      	sub	sp, #28
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a1b      	ldr	r3, [r3, #32]
 8009494:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	69db      	ldr	r3, [r3, #28]
 80094a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f023 0303 	bic.w	r3, r3, #3
 80094ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80094cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	021b      	lsls	r3, r3, #8
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a2b      	ldr	r2, [pc, #172]	@ (800958c <TIM_OC3_SetConfig+0x10c>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d007      	beq.n	80094f2 <TIM_OC3_SetConfig+0x72>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a2a      	ldr	r2, [pc, #168]	@ (8009590 <TIM_OC3_SetConfig+0x110>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d003      	beq.n	80094f2 <TIM_OC3_SetConfig+0x72>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a29      	ldr	r2, [pc, #164]	@ (8009594 <TIM_OC3_SetConfig+0x114>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d10d      	bne.n	800950e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80094f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	021b      	lsls	r3, r3, #8
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	4313      	orrs	r3, r2
 8009504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800950c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a1e      	ldr	r2, [pc, #120]	@ (800958c <TIM_OC3_SetConfig+0x10c>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d013      	beq.n	800953e <TIM_OC3_SetConfig+0xbe>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a1d      	ldr	r2, [pc, #116]	@ (8009590 <TIM_OC3_SetConfig+0x110>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d00f      	beq.n	800953e <TIM_OC3_SetConfig+0xbe>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4a1d      	ldr	r2, [pc, #116]	@ (8009598 <TIM_OC3_SetConfig+0x118>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d00b      	beq.n	800953e <TIM_OC3_SetConfig+0xbe>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a1c      	ldr	r2, [pc, #112]	@ (800959c <TIM_OC3_SetConfig+0x11c>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d007      	beq.n	800953e <TIM_OC3_SetConfig+0xbe>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a1b      	ldr	r2, [pc, #108]	@ (80095a0 <TIM_OC3_SetConfig+0x120>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d003      	beq.n	800953e <TIM_OC3_SetConfig+0xbe>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a16      	ldr	r2, [pc, #88]	@ (8009594 <TIM_OC3_SetConfig+0x114>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d113      	bne.n	8009566 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800954c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	011b      	lsls	r3, r3, #4
 8009554:	693a      	ldr	r2, [r7, #16]
 8009556:	4313      	orrs	r3, r2
 8009558:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	011b      	lsls	r3, r3, #4
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	4313      	orrs	r3, r2
 8009564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	621a      	str	r2, [r3, #32]
}
 8009580:	bf00      	nop
 8009582:	371c      	adds	r7, #28
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	40012c00 	.word	0x40012c00
 8009590:	40013400 	.word	0x40013400
 8009594:	40015000 	.word	0x40015000
 8009598:	40014000 	.word	0x40014000
 800959c:	40014400 	.word	0x40014400
 80095a0:	40014800 	.word	0x40014800

080095a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b087      	sub	sp, #28
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a1b      	ldr	r3, [r3, #32]
 80095b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	69db      	ldr	r3, [r3, #28]
 80095ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80095d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	021b      	lsls	r3, r3, #8
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80095f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	031b      	lsls	r3, r3, #12
 80095fa:	697a      	ldr	r2, [r7, #20]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a2c      	ldr	r2, [pc, #176]	@ (80096b4 <TIM_OC4_SetConfig+0x110>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d007      	beq.n	8009618 <TIM_OC4_SetConfig+0x74>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a2b      	ldr	r2, [pc, #172]	@ (80096b8 <TIM_OC4_SetConfig+0x114>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d003      	beq.n	8009618 <TIM_OC4_SetConfig+0x74>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a2a      	ldr	r2, [pc, #168]	@ (80096bc <TIM_OC4_SetConfig+0x118>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d10d      	bne.n	8009634 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800961e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	031b      	lsls	r3, r3, #12
 8009626:	697a      	ldr	r2, [r7, #20]
 8009628:	4313      	orrs	r3, r2
 800962a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009632:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a1f      	ldr	r2, [pc, #124]	@ (80096b4 <TIM_OC4_SetConfig+0x110>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d013      	beq.n	8009664 <TIM_OC4_SetConfig+0xc0>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a1e      	ldr	r2, [pc, #120]	@ (80096b8 <TIM_OC4_SetConfig+0x114>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d00f      	beq.n	8009664 <TIM_OC4_SetConfig+0xc0>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a1e      	ldr	r2, [pc, #120]	@ (80096c0 <TIM_OC4_SetConfig+0x11c>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d00b      	beq.n	8009664 <TIM_OC4_SetConfig+0xc0>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a1d      	ldr	r2, [pc, #116]	@ (80096c4 <TIM_OC4_SetConfig+0x120>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d007      	beq.n	8009664 <TIM_OC4_SetConfig+0xc0>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a1c      	ldr	r2, [pc, #112]	@ (80096c8 <TIM_OC4_SetConfig+0x124>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d003      	beq.n	8009664 <TIM_OC4_SetConfig+0xc0>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a17      	ldr	r2, [pc, #92]	@ (80096bc <TIM_OC4_SetConfig+0x118>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d113      	bne.n	800968c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800966a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009672:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	695b      	ldr	r3, [r3, #20]
 8009678:	019b      	lsls	r3, r3, #6
 800967a:	693a      	ldr	r2, [r7, #16]
 800967c:	4313      	orrs	r3, r2
 800967e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	019b      	lsls	r3, r3, #6
 8009686:	693a      	ldr	r2, [r7, #16]
 8009688:	4313      	orrs	r3, r2
 800968a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	693a      	ldr	r2, [r7, #16]
 8009690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	697a      	ldr	r2, [r7, #20]
 80096a4:	621a      	str	r2, [r3, #32]
}
 80096a6:	bf00      	nop
 80096a8:	371c      	adds	r7, #28
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	40012c00 	.word	0x40012c00
 80096b8:	40013400 	.word	0x40013400
 80096bc:	40015000 	.word	0x40015000
 80096c0:	40014000 	.word	0x40014000
 80096c4:	40014400 	.word	0x40014400
 80096c8:	40014800 	.word	0x40014800

080096cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b087      	sub	sp, #28
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6a1b      	ldr	r3, [r3, #32]
 80096e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	4313      	orrs	r3, r2
 8009708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009710:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	041b      	lsls	r3, r3, #16
 8009718:	693a      	ldr	r2, [r7, #16]
 800971a:	4313      	orrs	r3, r2
 800971c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a19      	ldr	r2, [pc, #100]	@ (8009788 <TIM_OC5_SetConfig+0xbc>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d013      	beq.n	800974e <TIM_OC5_SetConfig+0x82>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a18      	ldr	r2, [pc, #96]	@ (800978c <TIM_OC5_SetConfig+0xc0>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d00f      	beq.n	800974e <TIM_OC5_SetConfig+0x82>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a17      	ldr	r2, [pc, #92]	@ (8009790 <TIM_OC5_SetConfig+0xc4>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d00b      	beq.n	800974e <TIM_OC5_SetConfig+0x82>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a16      	ldr	r2, [pc, #88]	@ (8009794 <TIM_OC5_SetConfig+0xc8>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d007      	beq.n	800974e <TIM_OC5_SetConfig+0x82>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a15      	ldr	r2, [pc, #84]	@ (8009798 <TIM_OC5_SetConfig+0xcc>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d003      	beq.n	800974e <TIM_OC5_SetConfig+0x82>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a14      	ldr	r2, [pc, #80]	@ (800979c <TIM_OC5_SetConfig+0xd0>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d109      	bne.n	8009762 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009754:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	021b      	lsls	r3, r3, #8
 800975c:	697a      	ldr	r2, [r7, #20]
 800975e:	4313      	orrs	r3, r2
 8009760:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	685a      	ldr	r2, [r3, #4]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	693a      	ldr	r2, [r7, #16]
 800977a:	621a      	str	r2, [r3, #32]
}
 800977c:	bf00      	nop
 800977e:	371c      	adds	r7, #28
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr
 8009788:	40012c00 	.word	0x40012c00
 800978c:	40013400 	.word	0x40013400
 8009790:	40014000 	.word	0x40014000
 8009794:	40014400 	.word	0x40014400
 8009798:	40014800 	.word	0x40014800
 800979c:	40015000 	.word	0x40015000

080097a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b087      	sub	sp, #28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a1b      	ldr	r3, [r3, #32]
 80097b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80097ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	021b      	lsls	r3, r3, #8
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	4313      	orrs	r3, r2
 80097de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80097e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	051b      	lsls	r3, r3, #20
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a1a      	ldr	r2, [pc, #104]	@ (8009860 <TIM_OC6_SetConfig+0xc0>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d013      	beq.n	8009824 <TIM_OC6_SetConfig+0x84>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a19      	ldr	r2, [pc, #100]	@ (8009864 <TIM_OC6_SetConfig+0xc4>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d00f      	beq.n	8009824 <TIM_OC6_SetConfig+0x84>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a18      	ldr	r2, [pc, #96]	@ (8009868 <TIM_OC6_SetConfig+0xc8>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d00b      	beq.n	8009824 <TIM_OC6_SetConfig+0x84>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a17      	ldr	r2, [pc, #92]	@ (800986c <TIM_OC6_SetConfig+0xcc>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d007      	beq.n	8009824 <TIM_OC6_SetConfig+0x84>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a16      	ldr	r2, [pc, #88]	@ (8009870 <TIM_OC6_SetConfig+0xd0>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d003      	beq.n	8009824 <TIM_OC6_SetConfig+0x84>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a15      	ldr	r2, [pc, #84]	@ (8009874 <TIM_OC6_SetConfig+0xd4>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d109      	bne.n	8009838 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800982a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	695b      	ldr	r3, [r3, #20]
 8009830:	029b      	lsls	r3, r3, #10
 8009832:	697a      	ldr	r2, [r7, #20]
 8009834:	4313      	orrs	r3, r2
 8009836:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	685a      	ldr	r2, [r3, #4]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	621a      	str	r2, [r3, #32]
}
 8009852:	bf00      	nop
 8009854:	371c      	adds	r7, #28
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	40012c00 	.word	0x40012c00
 8009864:	40013400 	.word	0x40013400
 8009868:	40014000 	.word	0x40014000
 800986c:	40014400 	.word	0x40014400
 8009870:	40014800 	.word	0x40014800
 8009874:	40015000 	.word	0x40015000

08009878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009878:	b480      	push	{r7}
 800987a:	b087      	sub	sp, #28
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6a1b      	ldr	r3, [r3, #32]
 8009888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6a1b      	ldr	r3, [r3, #32]
 800988e:	f023 0201 	bic.w	r2, r3, #1
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	699b      	ldr	r3, [r3, #24]
 800989a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80098a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	011b      	lsls	r3, r3, #4
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	f023 030a 	bic.w	r3, r3, #10
 80098b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	621a      	str	r2, [r3, #32]
}
 80098ca:	bf00      	nop
 80098cc:	371c      	adds	r7, #28
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098d6:	b480      	push	{r7}
 80098d8:	b087      	sub	sp, #28
 80098da:	af00      	add	r7, sp, #0
 80098dc:	60f8      	str	r0, [r7, #12]
 80098de:	60b9      	str	r1, [r7, #8]
 80098e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6a1b      	ldr	r3, [r3, #32]
 80098ec:	f023 0210 	bic.w	r2, r3, #16
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009900:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	031b      	lsls	r3, r3, #12
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	4313      	orrs	r3, r2
 800990a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009912:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	011b      	lsls	r3, r3, #4
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	4313      	orrs	r3, r2
 800991c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	693a      	ldr	r2, [r7, #16]
 8009922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	621a      	str	r2, [r3, #32]
}
 800992a:	bf00      	nop
 800992c:	371c      	adds	r7, #28
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr

08009936 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009936:	b480      	push	{r7}
 8009938:	b085      	sub	sp, #20
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800994c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009950:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	4313      	orrs	r3, r2
 8009958:	f043 0307 	orr.w	r3, r3, #7
 800995c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	609a      	str	r2, [r3, #8]
}
 8009964:	bf00      	nop
 8009966:	3714      	adds	r7, #20
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009970:	b480      	push	{r7}
 8009972:	b087      	sub	sp, #28
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
 800997c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800998a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	021a      	lsls	r2, r3, #8
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	431a      	orrs	r2, r3
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	4313      	orrs	r3, r2
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	4313      	orrs	r3, r2
 800999c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	697a      	ldr	r2, [r7, #20]
 80099a2:	609a      	str	r2, [r3, #8]
}
 80099a4:	bf00      	nop
 80099a6:	371c      	adds	r7, #28
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b087      	sub	sp, #28
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	f003 031f 	and.w	r3, r3, #31
 80099c2:	2201      	movs	r2, #1
 80099c4:	fa02 f303 	lsl.w	r3, r2, r3
 80099c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6a1a      	ldr	r2, [r3, #32]
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	43db      	mvns	r3, r3
 80099d2:	401a      	ands	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6a1a      	ldr	r2, [r3, #32]
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f003 031f 	and.w	r3, r3, #31
 80099e2:	6879      	ldr	r1, [r7, #4]
 80099e4:	fa01 f303 	lsl.w	r3, r1, r3
 80099e8:	431a      	orrs	r2, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	621a      	str	r2, [r3, #32]
}
 80099ee:	bf00      	nop
 80099f0:	371c      	adds	r7, #28
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
	...

080099fc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a26      	ldr	r2, [pc, #152]	@ (8009aa0 <TIM_ResetCallback+0xa4>)
 8009a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a25      	ldr	r2, [pc, #148]	@ (8009aa4 <TIM_ResetCallback+0xa8>)
 8009a10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a24      	ldr	r2, [pc, #144]	@ (8009aa8 <TIM_ResetCallback+0xac>)
 8009a18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a23      	ldr	r2, [pc, #140]	@ (8009aac <TIM_ResetCallback+0xb0>)
 8009a20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a22      	ldr	r2, [pc, #136]	@ (8009ab0 <TIM_ResetCallback+0xb4>)
 8009a28:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a21      	ldr	r2, [pc, #132]	@ (8009ab4 <TIM_ResetCallback+0xb8>)
 8009a30:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a20      	ldr	r2, [pc, #128]	@ (8009ab8 <TIM_ResetCallback+0xbc>)
 8009a38:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8009abc <TIM_ResetCallback+0xc0>)
 8009a40:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a1e      	ldr	r2, [pc, #120]	@ (8009ac0 <TIM_ResetCallback+0xc4>)
 8009a48:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8009ac4 <TIM_ResetCallback+0xc8>)
 8009a50:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a1c      	ldr	r2, [pc, #112]	@ (8009ac8 <TIM_ResetCallback+0xcc>)
 8009a58:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8009acc <TIM_ResetCallback+0xd0>)
 8009a60:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a1a      	ldr	r2, [pc, #104]	@ (8009ad0 <TIM_ResetCallback+0xd4>)
 8009a68:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a19      	ldr	r2, [pc, #100]	@ (8009ad4 <TIM_ResetCallback+0xd8>)
 8009a70:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a18      	ldr	r2, [pc, #96]	@ (8009ad8 <TIM_ResetCallback+0xdc>)
 8009a78:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a17      	ldr	r2, [pc, #92]	@ (8009adc <TIM_ResetCallback+0xe0>)
 8009a80:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a16      	ldr	r2, [pc, #88]	@ (8009ae0 <TIM_ResetCallback+0xe4>)
 8009a88:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a15      	ldr	r2, [pc, #84]	@ (8009ae4 <TIM_ResetCallback+0xe8>)
 8009a90:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	0800251d 	.word	0x0800251d
 8009aa4:	08008d49 	.word	0x08008d49
 8009aa8:	08008dc1 	.word	0x08008dc1
 8009aac:	08008dd5 	.word	0x08008dd5
 8009ab0:	08008d71 	.word	0x08008d71
 8009ab4:	08008d85 	.word	0x08008d85
 8009ab8:	08008d5d 	.word	0x08008d5d
 8009abc:	08008d99 	.word	0x08008d99
 8009ac0:	08008dad 	.word	0x08008dad
 8009ac4:	08008de9 	.word	0x08008de9
 8009ac8:	08009c15 	.word	0x08009c15
 8009acc:	08009c29 	.word	0x08009c29
 8009ad0:	08009c3d 	.word	0x08009c3d
 8009ad4:	08009c51 	.word	0x08009c51
 8009ad8:	08009c65 	.word	0x08009c65
 8009adc:	08009c79 	.word	0x08009c79
 8009ae0:	08009c8d 	.word	0x08009c8d
 8009ae4:	08009ca1 	.word	0x08009ca1

08009ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d101      	bne.n	8009b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009afc:	2302      	movs	r3, #2
 8009afe:	e074      	b.n	8009bea <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a34      	ldr	r2, [pc, #208]	@ (8009bf8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d009      	beq.n	8009b3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a33      	ldr	r2, [pc, #204]	@ (8009bfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d004      	beq.n	8009b3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a31      	ldr	r2, [pc, #196]	@ (8009c00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d108      	bne.n	8009b50 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009b44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a21      	ldr	r2, [pc, #132]	@ (8009bf8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d022      	beq.n	8009bbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b80:	d01d      	beq.n	8009bbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a1f      	ldr	r2, [pc, #124]	@ (8009c04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d018      	beq.n	8009bbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a1d      	ldr	r2, [pc, #116]	@ (8009c08 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d013      	beq.n	8009bbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8009c0c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d00e      	beq.n	8009bbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a15      	ldr	r2, [pc, #84]	@ (8009bfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d009      	beq.n	8009bbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a18      	ldr	r2, [pc, #96]	@ (8009c10 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d004      	beq.n	8009bbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a11      	ldr	r2, [pc, #68]	@ (8009c00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d10c      	bne.n	8009bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	68ba      	ldr	r2, [r7, #8]
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	40012c00 	.word	0x40012c00
 8009bfc:	40013400 	.word	0x40013400
 8009c00:	40015000 	.word	0x40015000
 8009c04:	40000400 	.word	0x40000400
 8009c08:	40000800 	.word	0x40000800
 8009c0c:	40000c00 	.word	0x40000c00
 8009c10:	40014000 	.word	0x40014000

08009c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c1c:	bf00      	nop
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c44:	bf00      	nop
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d101      	bne.n	8009cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e050      	b.n	8009d68 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d114      	bne.n	8009cfa <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fdc5 	bl	800a868 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d103      	bne.n	8009cf0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a21      	ldr	r2, [pc, #132]	@ (8009d70 <HAL_UART_Init+0xbc>)
 8009cec:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2224      	movs	r2, #36	@ 0x24
 8009cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f022 0201 	bic.w	r2, r2, #1
 8009d10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d002      	beq.n	8009d20 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f001 f8f2 	bl	800af04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fdf3 	bl	800a90c <UART_SetConfig>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d101      	bne.n	8009d30 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e01b      	b.n	8009d68 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009d3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	689a      	ldr	r2, [r3, #8]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009d4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f042 0201 	orr.w	r2, r2, #1
 8009d5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f001 f971 	bl	800b048 <UART_CheckIdleState>
 8009d66:	4603      	mov	r3, r0
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3708      	adds	r7, #8
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	08004489 	.word	0x08004489

08009d74 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b087      	sub	sp, #28
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	607a      	str	r2, [r7, #4]
 8009d80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d109      	bne.n	8009da0 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e09c      	b.n	8009eda <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009da6:	2b20      	cmp	r3, #32
 8009da8:	d16c      	bne.n	8009e84 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009daa:	7afb      	ldrb	r3, [r7, #11]
 8009dac:	2b0c      	cmp	r3, #12
 8009dae:	d85e      	bhi.n	8009e6e <HAL_UART_RegisterCallback+0xfa>
 8009db0:	a201      	add	r2, pc, #4	@ (adr r2, 8009db8 <HAL_UART_RegisterCallback+0x44>)
 8009db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db6:	bf00      	nop
 8009db8:	08009ded 	.word	0x08009ded
 8009dbc:	08009df7 	.word	0x08009df7
 8009dc0:	08009e01 	.word	0x08009e01
 8009dc4:	08009e0b 	.word	0x08009e0b
 8009dc8:	08009e15 	.word	0x08009e15
 8009dcc:	08009e1f 	.word	0x08009e1f
 8009dd0:	08009e29 	.word	0x08009e29
 8009dd4:	08009e33 	.word	0x08009e33
 8009dd8:	08009e3d 	.word	0x08009e3d
 8009ddc:	08009e47 	.word	0x08009e47
 8009de0:	08009e51 	.word	0x08009e51
 8009de4:	08009e5b 	.word	0x08009e5b
 8009de8:	08009e65 	.word	0x08009e65
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009df4:	e070      	b.n	8009ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009dfe:	e06b      	b.n	8009ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009e08:	e066      	b.n	8009ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009e12:	e061      	b.n	8009ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009e1c:	e05c      	b.n	8009ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009e26:	e057      	b.n	8009ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009e30:	e052      	b.n	8009ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009e3a:	e04d      	b.n	8009ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009e44:	e048      	b.n	8009ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009e4e:	e043      	b.n	8009ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009e58:	e03e      	b.n	8009ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009e62:	e039      	b.n	8009ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009e6c:	e034      	b.n	8009ed8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	75fb      	strb	r3, [r7, #23]
        break;
 8009e82:	e029      	b.n	8009ed8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d11a      	bne.n	8009ec4 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009e8e:	7afb      	ldrb	r3, [r7, #11]
 8009e90:	2b0b      	cmp	r3, #11
 8009e92:	d002      	beq.n	8009e9a <HAL_UART_RegisterCallback+0x126>
 8009e94:	2b0c      	cmp	r3, #12
 8009e96:	d005      	beq.n	8009ea4 <HAL_UART_RegisterCallback+0x130>
 8009e98:	e009      	b.n	8009eae <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009ea2:	e019      	b.n	8009ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009eac:	e014      	b.n	8009ed8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009eb4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	75fb      	strb	r3, [r7, #23]
        break;
 8009ec2:	e009      	b.n	8009ed8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009eca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	371c      	adds	r7, #28
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop

08009ee8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b08a      	sub	sp, #40	@ 0x28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009efc:	2b20      	cmp	r3, #32
 8009efe:	d167      	bne.n	8009fd0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d002      	beq.n	8009f0c <HAL_UART_Transmit_DMA+0x24>
 8009f06:	88fb      	ldrh	r3, [r7, #6]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d101      	bne.n	8009f10 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e060      	b.n	8009fd2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	68ba      	ldr	r2, [r7, #8]
 8009f14:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	88fa      	ldrh	r2, [r7, #6]
 8009f1a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	88fa      	ldrh	r2, [r7, #6]
 8009f22:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2221      	movs	r2, #33	@ 0x21
 8009f32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d028      	beq.n	8009f90 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f42:	4a26      	ldr	r2, [pc, #152]	@ (8009fdc <HAL_UART_Transmit_DMA+0xf4>)
 8009f44:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f4a:	4a25      	ldr	r2, [pc, #148]	@ (8009fe0 <HAL_UART_Transmit_DMA+0xf8>)
 8009f4c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f52:	4a24      	ldr	r2, [pc, #144]	@ (8009fe4 <HAL_UART_Transmit_DMA+0xfc>)
 8009f54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f66:	4619      	mov	r1, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	3328      	adds	r3, #40	@ 0x28
 8009f6e:	461a      	mov	r2, r3
 8009f70:	88fb      	ldrh	r3, [r7, #6]
 8009f72:	f7fc f9bd 	bl	80062f0 <HAL_DMA_Start_IT>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d009      	beq.n	8009f90 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2210      	movs	r2, #16
 8009f80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2220      	movs	r2, #32
 8009f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e020      	b.n	8009fd2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2240      	movs	r2, #64	@ 0x40
 8009f96:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	3308      	adds	r3, #8
 8009f9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	e853 3f00 	ldrex	r3, [r3]
 8009fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3308      	adds	r3, #8
 8009fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fb8:	623a      	str	r2, [r7, #32]
 8009fba:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbc:	69f9      	ldr	r1, [r7, #28]
 8009fbe:	6a3a      	ldr	r2, [r7, #32]
 8009fc0:	e841 2300 	strex	r3, r2, [r1]
 8009fc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1e5      	bne.n	8009f98 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	e000      	b.n	8009fd2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009fd0:	2302      	movs	r3, #2
  }
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3728      	adds	r7, #40	@ 0x28
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	0800b513 	.word	0x0800b513
 8009fe0:	0800b5b1 	.word	0x0800b5b1
 8009fe4:	0800b74b 	.word	0x0800b74b

08009fe8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b08a      	sub	sp, #40	@ 0x28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ffc:	2b20      	cmp	r3, #32
 8009ffe:	d137      	bne.n	800a070 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d002      	beq.n	800a00c <HAL_UART_Receive_DMA+0x24>
 800a006:	88fb      	ldrh	r3, [r7, #6]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d101      	bne.n	800a010 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a00c:	2301      	movs	r3, #1
 800a00e:	e030      	b.n	800a072 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2200      	movs	r2, #0
 800a014:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a18      	ldr	r2, [pc, #96]	@ (800a07c <HAL_UART_Receive_DMA+0x94>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d01f      	beq.n	800a060 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d018      	beq.n	800a060 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	e853 3f00 	ldrex	r3, [r3]
 800a03a:	613b      	str	r3, [r7, #16]
   return(result);
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a042:	627b      	str	r3, [r7, #36]	@ 0x24
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	461a      	mov	r2, r3
 800a04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04c:	623b      	str	r3, [r7, #32]
 800a04e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a050:	69f9      	ldr	r1, [r7, #28]
 800a052:	6a3a      	ldr	r2, [r7, #32]
 800a054:	e841 2300 	strex	r3, r2, [r1]
 800a058:	61bb      	str	r3, [r7, #24]
   return(result);
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1e6      	bne.n	800a02e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a060:	88fb      	ldrh	r3, [r7, #6]
 800a062:	461a      	mov	r2, r3
 800a064:	68b9      	ldr	r1, [r7, #8]
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f001 f906 	bl	800b278 <UART_Start_Receive_DMA>
 800a06c:	4603      	mov	r3, r0
 800a06e:	e000      	b.n	800a072 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a070:	2302      	movs	r3, #2
  }
}
 800a072:	4618      	mov	r0, r3
 800a074:	3728      	adds	r7, #40	@ 0x28
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	40008000 	.word	0x40008000

0800a080 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b0ba      	sub	sp, #232	@ 0xe8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	69db      	ldr	r3, [r3, #28]
 800a08e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a0a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a0aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a0b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d11b      	bne.n	800a0f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a0bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0c0:	f003 0320 	and.w	r3, r3, #32
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d015      	beq.n	800a0f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a0c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0cc:	f003 0320 	and.w	r3, r3, #32
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d105      	bne.n	800a0e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a0d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d009      	beq.n	800a0f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f000 82f3 	beq.w	800a6d0 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	4798      	blx	r3
      }
      return;
 800a0f2:	e2ed      	b.n	800a6d0 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a0f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 8129 	beq.w	800a350 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a0fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a102:	4b90      	ldr	r3, [pc, #576]	@ (800a344 <HAL_UART_IRQHandler+0x2c4>)
 800a104:	4013      	ands	r3, r2
 800a106:	2b00      	cmp	r3, #0
 800a108:	d106      	bne.n	800a118 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a10a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a10e:	4b8e      	ldr	r3, [pc, #568]	@ (800a348 <HAL_UART_IRQHandler+0x2c8>)
 800a110:	4013      	ands	r3, r2
 800a112:	2b00      	cmp	r3, #0
 800a114:	f000 811c 	beq.w	800a350 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a11c:	f003 0301 	and.w	r3, r3, #1
 800a120:	2b00      	cmp	r3, #0
 800a122:	d011      	beq.n	800a148 <HAL_UART_IRQHandler+0xc8>
 800a124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00b      	beq.n	800a148 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2201      	movs	r2, #1
 800a136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a13e:	f043 0201 	orr.w	r2, r3, #1
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a14c:	f003 0302 	and.w	r3, r3, #2
 800a150:	2b00      	cmp	r3, #0
 800a152:	d011      	beq.n	800a178 <HAL_UART_IRQHandler+0xf8>
 800a154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a158:	f003 0301 	and.w	r3, r3, #1
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d00b      	beq.n	800a178 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2202      	movs	r2, #2
 800a166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a16e:	f043 0204 	orr.w	r2, r3, #4
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a17c:	f003 0304 	and.w	r3, r3, #4
 800a180:	2b00      	cmp	r3, #0
 800a182:	d011      	beq.n	800a1a8 <HAL_UART_IRQHandler+0x128>
 800a184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a188:	f003 0301 	and.w	r3, r3, #1
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00b      	beq.n	800a1a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2204      	movs	r2, #4
 800a196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a19e:	f043 0202 	orr.w	r2, r3, #2
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a1a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1ac:	f003 0308 	and.w	r3, r3, #8
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d017      	beq.n	800a1e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a1b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1b8:	f003 0320 	and.w	r3, r3, #32
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d105      	bne.n	800a1cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a1c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a1c4:	4b5f      	ldr	r3, [pc, #380]	@ (800a344 <HAL_UART_IRQHandler+0x2c4>)
 800a1c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00b      	beq.n	800a1e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2208      	movs	r2, #8
 800a1d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1da:	f043 0208 	orr.w	r2, r3, #8
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a1e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d012      	beq.n	800a216 <HAL_UART_IRQHandler+0x196>
 800a1f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00c      	beq.n	800a216 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a204:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a20c:	f043 0220 	orr.w	r2, r3, #32
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f000 8259 	beq.w	800a6d4 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a226:	f003 0320 	and.w	r3, r3, #32
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d013      	beq.n	800a256 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a22e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a232:	f003 0320 	and.w	r3, r3, #32
 800a236:	2b00      	cmp	r3, #0
 800a238:	d105      	bne.n	800a246 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a23a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a23e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a242:	2b00      	cmp	r3, #0
 800a244:	d007      	beq.n	800a256 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d003      	beq.n	800a256 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a25c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a26a:	2b40      	cmp	r3, #64	@ 0x40
 800a26c:	d005      	beq.n	800a27a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a26e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a272:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a276:	2b00      	cmp	r3, #0
 800a278:	d058      	beq.n	800a32c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f001 f8e3 	bl	800b446 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a28a:	2b40      	cmp	r3, #64	@ 0x40
 800a28c:	d148      	bne.n	800a320 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	3308      	adds	r3, #8
 800a294:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a298:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a29c:	e853 3f00 	ldrex	r3, [r3]
 800a2a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a2a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a2a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3308      	adds	r3, #8
 800a2b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a2ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a2be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a2c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a2ca:	e841 2300 	strex	r3, r2, [r1]
 800a2ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a2d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1d9      	bne.n	800a28e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d017      	beq.n	800a314 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2ea:	4a18      	ldr	r2, [pc, #96]	@ (800a34c <HAL_UART_IRQHandler+0x2cc>)
 800a2ec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7fc f8cf 	bl	8006498 <HAL_DMA_Abort_IT>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d01f      	beq.n	800a340 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a30e:	4610      	mov	r0, r2
 800a310:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a312:	e015      	b.n	800a340 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a31e:	e00f      	b.n	800a340 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a32a:	e009      	b.n	800a340 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a33e:	e1c9      	b.n	800a6d4 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a340:	bf00      	nop
    return;
 800a342:	e1c7      	b.n	800a6d4 <HAL_UART_IRQHandler+0x654>
 800a344:	10000001 	.word	0x10000001
 800a348:	04000120 	.word	0x04000120
 800a34c:	0800b7cf 	.word	0x0800b7cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a354:	2b01      	cmp	r3, #1
 800a356:	f040 8157 	bne.w	800a608 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a35a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a35e:	f003 0310 	and.w	r3, r3, #16
 800a362:	2b00      	cmp	r3, #0
 800a364:	f000 8150 	beq.w	800a608 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a36c:	f003 0310 	and.w	r3, r3, #16
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 8149 	beq.w	800a608 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2210      	movs	r2, #16
 800a37c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a388:	2b40      	cmp	r3, #64	@ 0x40
 800a38a:	f040 80bd 	bne.w	800a508 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a39c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f000 8199 	beq.w	800a6d8 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a3ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	f080 8191 	bcs.w	800a6d8 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a3bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 0320 	and.w	r3, r3, #32
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f040 8087 	bne.w	800a4e2 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a3e0:	e853 3f00 	ldrex	r3, [r3]
 800a3e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a3e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a3fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a402:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a406:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a40a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a40e:	e841 2300 	strex	r3, r2, [r1]
 800a412:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a416:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d1da      	bne.n	800a3d4 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	3308      	adds	r3, #8
 800a424:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a426:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a428:	e853 3f00 	ldrex	r3, [r3]
 800a42c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a42e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a430:	f023 0301 	bic.w	r3, r3, #1
 800a434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	3308      	adds	r3, #8
 800a43e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a442:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a446:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a448:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a44a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a44e:	e841 2300 	strex	r3, r2, [r1]
 800a452:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a454:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1e1      	bne.n	800a41e <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	3308      	adds	r3, #8
 800a460:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a462:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a464:	e853 3f00 	ldrex	r3, [r3]
 800a468:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a46a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a46c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a470:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	3308      	adds	r3, #8
 800a47a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a47e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a480:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a482:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a484:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a486:	e841 2300 	strex	r3, r2, [r1]
 800a48a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a48c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1e3      	bne.n	800a45a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2220      	movs	r2, #32
 800a496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4a8:	e853 3f00 	ldrex	r3, [r3]
 800a4ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a4ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4b0:	f023 0310 	bic.w	r3, r3, #16
 800a4b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	461a      	mov	r2, r3
 800a4be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a4c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a4c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a4ca:	e841 2300 	strex	r3, r2, [r1]
 800a4ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a4d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1e4      	bne.n	800a4a0 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fb ff82 	bl	80063e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2202      	movs	r2, #2
 800a4e6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a4fa:	b292      	uxth	r2, r2
 800a4fc:	1a8a      	subs	r2, r1, r2
 800a4fe:	b292      	uxth	r2, r2
 800a500:	4611      	mov	r1, r2
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a506:	e0e7      	b.n	800a6d8 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a514:	b29b      	uxth	r3, r3
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a522:	b29b      	uxth	r3, r3
 800a524:	2b00      	cmp	r3, #0
 800a526:	f000 80d9 	beq.w	800a6dc <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800a52a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f000 80d4 	beq.w	800a6dc <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53c:	e853 3f00 	ldrex	r3, [r3]
 800a540:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a544:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a548:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	461a      	mov	r2, r3
 800a552:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a556:	647b      	str	r3, [r7, #68]	@ 0x44
 800a558:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a55c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a55e:	e841 2300 	strex	r3, r2, [r1]
 800a562:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1e4      	bne.n	800a534 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	3308      	adds	r3, #8
 800a570:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a574:	e853 3f00 	ldrex	r3, [r3]
 800a578:	623b      	str	r3, [r7, #32]
   return(result);
 800a57a:	6a3b      	ldr	r3, [r7, #32]
 800a57c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a580:	f023 0301 	bic.w	r3, r3, #1
 800a584:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	3308      	adds	r3, #8
 800a58e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a592:	633a      	str	r2, [r7, #48]	@ 0x30
 800a594:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a596:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a59a:	e841 2300 	strex	r3, r2, [r1]
 800a59e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d1e1      	bne.n	800a56a <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2220      	movs	r2, #32
 800a5aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	e853 3f00 	ldrex	r3, [r3]
 800a5c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f023 0310 	bic.w	r3, r3, #16
 800a5ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a5dc:	61fb      	str	r3, [r7, #28]
 800a5de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e0:	69b9      	ldr	r1, [r7, #24]
 800a5e2:	69fa      	ldr	r2, [r7, #28]
 800a5e4:	e841 2300 	strex	r3, r2, [r1]
 800a5e8:	617b      	str	r3, [r7, #20]
   return(result);
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d1e4      	bne.n	800a5ba <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2202      	movs	r2, #2
 800a5f4:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a5fc:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a600:	4611      	mov	r1, r2
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a606:	e069      	b.n	800a6dc <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a60c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a610:	2b00      	cmp	r3, #0
 800a612:	d010      	beq.n	800a636 <HAL_UART_IRQHandler+0x5b6>
 800a614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a618:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00a      	beq.n	800a636 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a628:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a634:	e055      	b.n	800a6e2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a63a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d014      	beq.n	800a66c <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d105      	bne.n	800a65a <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a64e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a652:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a656:	2b00      	cmp	r3, #0
 800a658:	d008      	beq.n	800a66c <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d03e      	beq.n	800a6e0 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	4798      	blx	r3
    }
    return;
 800a66a:	e039      	b.n	800a6e0 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a66c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a674:	2b00      	cmp	r3, #0
 800a676:	d009      	beq.n	800a68c <HAL_UART_IRQHandler+0x60c>
 800a678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a67c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a680:	2b00      	cmp	r3, #0
 800a682:	d003      	beq.n	800a68c <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f001 f8ba 	bl	800b7fe <UART_EndTransmit_IT>
    return;
 800a68a:	e02a      	b.n	800a6e2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a68c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a690:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00b      	beq.n	800a6b0 <HAL_UART_IRQHandler+0x630>
 800a698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a69c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d005      	beq.n	800a6b0 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6ae:	e018      	b.n	800a6e2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a6b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d012      	beq.n	800a6e2 <HAL_UART_IRQHandler+0x662>
 800a6bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	da0e      	bge.n	800a6e2 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6ce:	e008      	b.n	800a6e2 <HAL_UART_IRQHandler+0x662>
      return;
 800a6d0:	bf00      	nop
 800a6d2:	e006      	b.n	800a6e2 <HAL_UART_IRQHandler+0x662>
    return;
 800a6d4:	bf00      	nop
 800a6d6:	e004      	b.n	800a6e2 <HAL_UART_IRQHandler+0x662>
      return;
 800a6d8:	bf00      	nop
 800a6da:	e002      	b.n	800a6e2 <HAL_UART_IRQHandler+0x662>
      return;
 800a6dc:	bf00      	nop
 800a6de:	e000      	b.n	800a6e2 <HAL_UART_IRQHandler+0x662>
    return;
 800a6e0:	bf00      	nop
  }
}
 800a6e2:	37e8      	adds	r7, #232	@ 0xe8
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a6f0:	bf00      	nop
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a72c:	bf00      	nop
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	460b      	mov	r3, r1
 800a792:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a794:	bf00      	nop
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a09      	ldr	r2, [pc, #36]	@ (800a7d4 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d009      	beq.n	800a7c8 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	695b      	ldr	r3, [r3, #20]
 800a7ba:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	615a      	str	r2, [r3, #20]
  }
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr
 800a7d4:	40008000 	.word	0x40008000

0800a7d8 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a18      	ldr	r2, [pc, #96]	@ (800a848 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d027      	beq.n	800a83a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7f0:	2b20      	cmp	r3, #32
 800a7f2:	d120      	bne.n	800a836 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d101      	bne.n	800a802 <HAL_UART_EnableReceiverTimeout+0x2a>
 800a7fe:	2302      	movs	r3, #2
 800a800:	e01c      	b.n	800a83c <HAL_UART_EnableReceiverTimeout+0x64>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2224      	movs	r2, #36	@ 0x24
 800a80e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	685a      	ldr	r2, [r3, #4]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a820:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2220      	movs	r2, #32
 800a826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a832:	2300      	movs	r3, #0
 800a834:	e002      	b.n	800a83c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a836:	2302      	movs	r3, #2
 800a838:	e000      	b.n	800a83c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
  }
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr
 800a848:	40008000 	.word	0x40008000

0800a84c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	370c      	adds	r7, #12
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
	...

0800a868 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a1a      	ldr	r2, [pc, #104]	@ (800a8dc <UART_InitCallbacksToDefault+0x74>)
 800a874:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a19      	ldr	r2, [pc, #100]	@ (800a8e0 <UART_InitCallbacksToDefault+0x78>)
 800a87c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a18      	ldr	r2, [pc, #96]	@ (800a8e4 <UART_InitCallbacksToDefault+0x7c>)
 800a884:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a17      	ldr	r2, [pc, #92]	@ (800a8e8 <UART_InitCallbacksToDefault+0x80>)
 800a88c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a16      	ldr	r2, [pc, #88]	@ (800a8ec <UART_InitCallbacksToDefault+0x84>)
 800a894:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a15      	ldr	r2, [pc, #84]	@ (800a8f0 <UART_InitCallbacksToDefault+0x88>)
 800a89c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	4a14      	ldr	r2, [pc, #80]	@ (800a8f4 <UART_InitCallbacksToDefault+0x8c>)
 800a8a4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a13      	ldr	r2, [pc, #76]	@ (800a8f8 <UART_InitCallbacksToDefault+0x90>)
 800a8ac:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	4a12      	ldr	r2, [pc, #72]	@ (800a8fc <UART_InitCallbacksToDefault+0x94>)
 800a8b4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a11      	ldr	r2, [pc, #68]	@ (800a900 <UART_InitCallbacksToDefault+0x98>)
 800a8bc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a10      	ldr	r2, [pc, #64]	@ (800a904 <UART_InitCallbacksToDefault+0x9c>)
 800a8c4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a0f      	ldr	r2, [pc, #60]	@ (800a908 <UART_InitCallbacksToDefault+0xa0>)
 800a8cc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	0800a6fd 	.word	0x0800a6fd
 800a8e0:	0800a6e9 	.word	0x0800a6e9
 800a8e4:	0800a725 	.word	0x0800a725
 800a8e8:	0800a711 	.word	0x0800a711
 800a8ec:	0800a739 	.word	0x0800a739
 800a8f0:	0800a74d 	.word	0x0800a74d
 800a8f4:	0800a761 	.word	0x0800a761
 800a8f8:	0800a775 	.word	0x0800a775
 800a8fc:	0800b859 	.word	0x0800b859
 800a900:	0800b86d 	.word	0x0800b86d
 800a904:	0800b881 	.word	0x0800b881
 800a908:	0800a789 	.word	0x0800a789

0800a90c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a90c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a910:	b08c      	sub	sp, #48	@ 0x30
 800a912:	af00      	add	r7, sp, #0
 800a914:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a916:	2300      	movs	r3, #0
 800a918:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	689a      	ldr	r2, [r3, #8]
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	691b      	ldr	r3, [r3, #16]
 800a924:	431a      	orrs	r2, r3
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	695b      	ldr	r3, [r3, #20]
 800a92a:	431a      	orrs	r2, r3
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	69db      	ldr	r3, [r3, #28]
 800a930:	4313      	orrs	r3, r2
 800a932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	4baa      	ldr	r3, [pc, #680]	@ (800abe4 <UART_SetConfig+0x2d8>)
 800a93c:	4013      	ands	r3, r2
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	6812      	ldr	r2, [r2, #0]
 800a942:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a944:	430b      	orrs	r3, r1
 800a946:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	68da      	ldr	r2, [r3, #12]
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	430a      	orrs	r2, r1
 800a95c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	699b      	ldr	r3, [r3, #24]
 800a962:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a9f      	ldr	r2, [pc, #636]	@ (800abe8 <UART_SetConfig+0x2dc>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d004      	beq.n	800a978 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a974:	4313      	orrs	r3, r2
 800a976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a982:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	6812      	ldr	r2, [r2, #0]
 800a98a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a98c:	430b      	orrs	r3, r1
 800a98e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a996:	f023 010f 	bic.w	r1, r3, #15
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	430a      	orrs	r2, r1
 800a9a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a90      	ldr	r2, [pc, #576]	@ (800abec <UART_SetConfig+0x2e0>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d125      	bne.n	800a9fc <UART_SetConfig+0xf0>
 800a9b0:	4b8f      	ldr	r3, [pc, #572]	@ (800abf0 <UART_SetConfig+0x2e4>)
 800a9b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9b6:	f003 0303 	and.w	r3, r3, #3
 800a9ba:	2b03      	cmp	r3, #3
 800a9bc:	d81a      	bhi.n	800a9f4 <UART_SetConfig+0xe8>
 800a9be:	a201      	add	r2, pc, #4	@ (adr r2, 800a9c4 <UART_SetConfig+0xb8>)
 800a9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c4:	0800a9d5 	.word	0x0800a9d5
 800a9c8:	0800a9e5 	.word	0x0800a9e5
 800a9cc:	0800a9dd 	.word	0x0800a9dd
 800a9d0:	0800a9ed 	.word	0x0800a9ed
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9da:	e116      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800a9dc:	2302      	movs	r3, #2
 800a9de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9e2:	e112      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800a9e4:	2304      	movs	r3, #4
 800a9e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9ea:	e10e      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800a9ec:	2308      	movs	r3, #8
 800a9ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9f2:	e10a      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800a9f4:	2310      	movs	r3, #16
 800a9f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9fa:	e106      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a7c      	ldr	r2, [pc, #496]	@ (800abf4 <UART_SetConfig+0x2e8>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d138      	bne.n	800aa78 <UART_SetConfig+0x16c>
 800aa06:	4b7a      	ldr	r3, [pc, #488]	@ (800abf0 <UART_SetConfig+0x2e4>)
 800aa08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa0c:	f003 030c 	and.w	r3, r3, #12
 800aa10:	2b0c      	cmp	r3, #12
 800aa12:	d82d      	bhi.n	800aa70 <UART_SetConfig+0x164>
 800aa14:	a201      	add	r2, pc, #4	@ (adr r2, 800aa1c <UART_SetConfig+0x110>)
 800aa16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1a:	bf00      	nop
 800aa1c:	0800aa51 	.word	0x0800aa51
 800aa20:	0800aa71 	.word	0x0800aa71
 800aa24:	0800aa71 	.word	0x0800aa71
 800aa28:	0800aa71 	.word	0x0800aa71
 800aa2c:	0800aa61 	.word	0x0800aa61
 800aa30:	0800aa71 	.word	0x0800aa71
 800aa34:	0800aa71 	.word	0x0800aa71
 800aa38:	0800aa71 	.word	0x0800aa71
 800aa3c:	0800aa59 	.word	0x0800aa59
 800aa40:	0800aa71 	.word	0x0800aa71
 800aa44:	0800aa71 	.word	0x0800aa71
 800aa48:	0800aa71 	.word	0x0800aa71
 800aa4c:	0800aa69 	.word	0x0800aa69
 800aa50:	2300      	movs	r3, #0
 800aa52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa56:	e0d8      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800aa58:	2302      	movs	r3, #2
 800aa5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa5e:	e0d4      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800aa60:	2304      	movs	r3, #4
 800aa62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa66:	e0d0      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800aa68:	2308      	movs	r3, #8
 800aa6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa6e:	e0cc      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800aa70:	2310      	movs	r3, #16
 800aa72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa76:	e0c8      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a5e      	ldr	r2, [pc, #376]	@ (800abf8 <UART_SetConfig+0x2ec>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d125      	bne.n	800aace <UART_SetConfig+0x1c2>
 800aa82:	4b5b      	ldr	r3, [pc, #364]	@ (800abf0 <UART_SetConfig+0x2e4>)
 800aa84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800aa8c:	2b30      	cmp	r3, #48	@ 0x30
 800aa8e:	d016      	beq.n	800aabe <UART_SetConfig+0x1b2>
 800aa90:	2b30      	cmp	r3, #48	@ 0x30
 800aa92:	d818      	bhi.n	800aac6 <UART_SetConfig+0x1ba>
 800aa94:	2b20      	cmp	r3, #32
 800aa96:	d00a      	beq.n	800aaae <UART_SetConfig+0x1a2>
 800aa98:	2b20      	cmp	r3, #32
 800aa9a:	d814      	bhi.n	800aac6 <UART_SetConfig+0x1ba>
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d002      	beq.n	800aaa6 <UART_SetConfig+0x19a>
 800aaa0:	2b10      	cmp	r3, #16
 800aaa2:	d008      	beq.n	800aab6 <UART_SetConfig+0x1aa>
 800aaa4:	e00f      	b.n	800aac6 <UART_SetConfig+0x1ba>
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aaac:	e0ad      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800aaae:	2302      	movs	r3, #2
 800aab0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aab4:	e0a9      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800aab6:	2304      	movs	r3, #4
 800aab8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aabc:	e0a5      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800aabe:	2308      	movs	r3, #8
 800aac0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aac4:	e0a1      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800aac6:	2310      	movs	r3, #16
 800aac8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aacc:	e09d      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a4a      	ldr	r2, [pc, #296]	@ (800abfc <UART_SetConfig+0x2f0>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d125      	bne.n	800ab24 <UART_SetConfig+0x218>
 800aad8:	4b45      	ldr	r3, [pc, #276]	@ (800abf0 <UART_SetConfig+0x2e4>)
 800aada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aade:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800aae2:	2bc0      	cmp	r3, #192	@ 0xc0
 800aae4:	d016      	beq.n	800ab14 <UART_SetConfig+0x208>
 800aae6:	2bc0      	cmp	r3, #192	@ 0xc0
 800aae8:	d818      	bhi.n	800ab1c <UART_SetConfig+0x210>
 800aaea:	2b80      	cmp	r3, #128	@ 0x80
 800aaec:	d00a      	beq.n	800ab04 <UART_SetConfig+0x1f8>
 800aaee:	2b80      	cmp	r3, #128	@ 0x80
 800aaf0:	d814      	bhi.n	800ab1c <UART_SetConfig+0x210>
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d002      	beq.n	800aafc <UART_SetConfig+0x1f0>
 800aaf6:	2b40      	cmp	r3, #64	@ 0x40
 800aaf8:	d008      	beq.n	800ab0c <UART_SetConfig+0x200>
 800aafa:	e00f      	b.n	800ab1c <UART_SetConfig+0x210>
 800aafc:	2300      	movs	r3, #0
 800aafe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab02:	e082      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800ab04:	2302      	movs	r3, #2
 800ab06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab0a:	e07e      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800ab0c:	2304      	movs	r3, #4
 800ab0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab12:	e07a      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800ab14:	2308      	movs	r3, #8
 800ab16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab1a:	e076      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800ab1c:	2310      	movs	r3, #16
 800ab1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab22:	e072      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a35      	ldr	r2, [pc, #212]	@ (800ac00 <UART_SetConfig+0x2f4>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d12a      	bne.n	800ab84 <UART_SetConfig+0x278>
 800ab2e:	4b30      	ldr	r3, [pc, #192]	@ (800abf0 <UART_SetConfig+0x2e4>)
 800ab30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab3c:	d01a      	beq.n	800ab74 <UART_SetConfig+0x268>
 800ab3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab42:	d81b      	bhi.n	800ab7c <UART_SetConfig+0x270>
 800ab44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab48:	d00c      	beq.n	800ab64 <UART_SetConfig+0x258>
 800ab4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab4e:	d815      	bhi.n	800ab7c <UART_SetConfig+0x270>
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d003      	beq.n	800ab5c <UART_SetConfig+0x250>
 800ab54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab58:	d008      	beq.n	800ab6c <UART_SetConfig+0x260>
 800ab5a:	e00f      	b.n	800ab7c <UART_SetConfig+0x270>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab62:	e052      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800ab64:	2302      	movs	r3, #2
 800ab66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab6a:	e04e      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800ab6c:	2304      	movs	r3, #4
 800ab6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab72:	e04a      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800ab74:	2308      	movs	r3, #8
 800ab76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab7a:	e046      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800ab7c:	2310      	movs	r3, #16
 800ab7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab82:	e042      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a17      	ldr	r2, [pc, #92]	@ (800abe8 <UART_SetConfig+0x2dc>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d13a      	bne.n	800ac04 <UART_SetConfig+0x2f8>
 800ab8e:	4b18      	ldr	r3, [pc, #96]	@ (800abf0 <UART_SetConfig+0x2e4>)
 800ab90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ab98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab9c:	d01a      	beq.n	800abd4 <UART_SetConfig+0x2c8>
 800ab9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aba2:	d81b      	bhi.n	800abdc <UART_SetConfig+0x2d0>
 800aba4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aba8:	d00c      	beq.n	800abc4 <UART_SetConfig+0x2b8>
 800abaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abae:	d815      	bhi.n	800abdc <UART_SetConfig+0x2d0>
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d003      	beq.n	800abbc <UART_SetConfig+0x2b0>
 800abb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abb8:	d008      	beq.n	800abcc <UART_SetConfig+0x2c0>
 800abba:	e00f      	b.n	800abdc <UART_SetConfig+0x2d0>
 800abbc:	2300      	movs	r3, #0
 800abbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abc2:	e022      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800abc4:	2302      	movs	r3, #2
 800abc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abca:	e01e      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800abcc:	2304      	movs	r3, #4
 800abce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abd2:	e01a      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800abd4:	2308      	movs	r3, #8
 800abd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abda:	e016      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800abdc:	2310      	movs	r3, #16
 800abde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abe2:	e012      	b.n	800ac0a <UART_SetConfig+0x2fe>
 800abe4:	cfff69f3 	.word	0xcfff69f3
 800abe8:	40008000 	.word	0x40008000
 800abec:	40013800 	.word	0x40013800
 800abf0:	40021000 	.word	0x40021000
 800abf4:	40004400 	.word	0x40004400
 800abf8:	40004800 	.word	0x40004800
 800abfc:	40004c00 	.word	0x40004c00
 800ac00:	40005000 	.word	0x40005000
 800ac04:	2310      	movs	r3, #16
 800ac06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4aae      	ldr	r2, [pc, #696]	@ (800aec8 <UART_SetConfig+0x5bc>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	f040 8097 	bne.w	800ad44 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ac1a:	2b08      	cmp	r3, #8
 800ac1c:	d823      	bhi.n	800ac66 <UART_SetConfig+0x35a>
 800ac1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac24 <UART_SetConfig+0x318>)
 800ac20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac24:	0800ac49 	.word	0x0800ac49
 800ac28:	0800ac67 	.word	0x0800ac67
 800ac2c:	0800ac51 	.word	0x0800ac51
 800ac30:	0800ac67 	.word	0x0800ac67
 800ac34:	0800ac57 	.word	0x0800ac57
 800ac38:	0800ac67 	.word	0x0800ac67
 800ac3c:	0800ac67 	.word	0x0800ac67
 800ac40:	0800ac67 	.word	0x0800ac67
 800ac44:	0800ac5f 	.word	0x0800ac5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac48:	f7fc fd16 	bl	8007678 <HAL_RCC_GetPCLK1Freq>
 800ac4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac4e:	e010      	b.n	800ac72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac50:	4b9e      	ldr	r3, [pc, #632]	@ (800aecc <UART_SetConfig+0x5c0>)
 800ac52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac54:	e00d      	b.n	800ac72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac56:	f7fc fca1 	bl	800759c <HAL_RCC_GetSysClockFreq>
 800ac5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac5c:	e009      	b.n	800ac72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac64:	e005      	b.n	800ac72 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ac66:	2300      	movs	r3, #0
 800ac68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ac70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f000 8130 	beq.w	800aeda <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac7e:	4a94      	ldr	r2, [pc, #592]	@ (800aed0 <UART_SetConfig+0x5c4>)
 800ac80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac84:	461a      	mov	r2, r3
 800ac86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac88:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	685a      	ldr	r2, [r3, #4]
 800ac92:	4613      	mov	r3, r2
 800ac94:	005b      	lsls	r3, r3, #1
 800ac96:	4413      	add	r3, r2
 800ac98:	69ba      	ldr	r2, [r7, #24]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d305      	bcc.n	800acaa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aca4:	69ba      	ldr	r2, [r7, #24]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d903      	bls.n	800acb2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800acb0:	e113      	b.n	800aeda <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb4:	2200      	movs	r2, #0
 800acb6:	60bb      	str	r3, [r7, #8]
 800acb8:	60fa      	str	r2, [r7, #12]
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acbe:	4a84      	ldr	r2, [pc, #528]	@ (800aed0 <UART_SetConfig+0x5c4>)
 800acc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	2200      	movs	r2, #0
 800acc8:	603b      	str	r3, [r7, #0]
 800acca:	607a      	str	r2, [r7, #4]
 800accc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800acd4:	f7f6 f88a 	bl	8000dec <__aeabi_uldivmod>
 800acd8:	4602      	mov	r2, r0
 800acda:	460b      	mov	r3, r1
 800acdc:	4610      	mov	r0, r2
 800acde:	4619      	mov	r1, r3
 800ace0:	f04f 0200 	mov.w	r2, #0
 800ace4:	f04f 0300 	mov.w	r3, #0
 800ace8:	020b      	lsls	r3, r1, #8
 800acea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800acee:	0202      	lsls	r2, r0, #8
 800acf0:	6979      	ldr	r1, [r7, #20]
 800acf2:	6849      	ldr	r1, [r1, #4]
 800acf4:	0849      	lsrs	r1, r1, #1
 800acf6:	2000      	movs	r0, #0
 800acf8:	460c      	mov	r4, r1
 800acfa:	4605      	mov	r5, r0
 800acfc:	eb12 0804 	adds.w	r8, r2, r4
 800ad00:	eb43 0905 	adc.w	r9, r3, r5
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	469a      	mov	sl, r3
 800ad0c:	4693      	mov	fp, r2
 800ad0e:	4652      	mov	r2, sl
 800ad10:	465b      	mov	r3, fp
 800ad12:	4640      	mov	r0, r8
 800ad14:	4649      	mov	r1, r9
 800ad16:	f7f6 f869 	bl	8000dec <__aeabi_uldivmod>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	4613      	mov	r3, r2
 800ad20:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad22:	6a3b      	ldr	r3, [r7, #32]
 800ad24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad28:	d308      	bcc.n	800ad3c <UART_SetConfig+0x430>
 800ad2a:	6a3b      	ldr	r3, [r7, #32]
 800ad2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad30:	d204      	bcs.n	800ad3c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	6a3a      	ldr	r2, [r7, #32]
 800ad38:	60da      	str	r2, [r3, #12]
 800ad3a:	e0ce      	b.n	800aeda <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ad42:	e0ca      	b.n	800aeda <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	69db      	ldr	r3, [r3, #28]
 800ad48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad4c:	d166      	bne.n	800ae1c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ad4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad52:	2b08      	cmp	r3, #8
 800ad54:	d827      	bhi.n	800ada6 <UART_SetConfig+0x49a>
 800ad56:	a201      	add	r2, pc, #4	@ (adr r2, 800ad5c <UART_SetConfig+0x450>)
 800ad58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5c:	0800ad81 	.word	0x0800ad81
 800ad60:	0800ad89 	.word	0x0800ad89
 800ad64:	0800ad91 	.word	0x0800ad91
 800ad68:	0800ada7 	.word	0x0800ada7
 800ad6c:	0800ad97 	.word	0x0800ad97
 800ad70:	0800ada7 	.word	0x0800ada7
 800ad74:	0800ada7 	.word	0x0800ada7
 800ad78:	0800ada7 	.word	0x0800ada7
 800ad7c:	0800ad9f 	.word	0x0800ad9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad80:	f7fc fc7a 	bl	8007678 <HAL_RCC_GetPCLK1Freq>
 800ad84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad86:	e014      	b.n	800adb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad88:	f7fc fc8c 	bl	80076a4 <HAL_RCC_GetPCLK2Freq>
 800ad8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad8e:	e010      	b.n	800adb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad90:	4b4e      	ldr	r3, [pc, #312]	@ (800aecc <UART_SetConfig+0x5c0>)
 800ad92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad94:	e00d      	b.n	800adb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad96:	f7fc fc01 	bl	800759c <HAL_RCC_GetSysClockFreq>
 800ad9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad9c:	e009      	b.n	800adb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ada2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ada4:	e005      	b.n	800adb2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ada6:	2300      	movs	r3, #0
 800ada8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800adb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800adb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 8090 	beq.w	800aeda <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adbe:	4a44      	ldr	r2, [pc, #272]	@ (800aed0 <UART_SetConfig+0x5c4>)
 800adc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adc4:	461a      	mov	r2, r3
 800adc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc8:	fbb3 f3f2 	udiv	r3, r3, r2
 800adcc:	005a      	lsls	r2, r3, #1
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	085b      	lsrs	r3, r3, #1
 800add4:	441a      	add	r2, r3
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	fbb2 f3f3 	udiv	r3, r2, r3
 800adde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ade0:	6a3b      	ldr	r3, [r7, #32]
 800ade2:	2b0f      	cmp	r3, #15
 800ade4:	d916      	bls.n	800ae14 <UART_SetConfig+0x508>
 800ade6:	6a3b      	ldr	r3, [r7, #32]
 800ade8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adec:	d212      	bcs.n	800ae14 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800adee:	6a3b      	ldr	r3, [r7, #32]
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	f023 030f 	bic.w	r3, r3, #15
 800adf6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800adf8:	6a3b      	ldr	r3, [r7, #32]
 800adfa:	085b      	lsrs	r3, r3, #1
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	f003 0307 	and.w	r3, r3, #7
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	8bfb      	ldrh	r3, [r7, #30]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	8bfa      	ldrh	r2, [r7, #30]
 800ae10:	60da      	str	r2, [r3, #12]
 800ae12:	e062      	b.n	800aeda <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ae1a:	e05e      	b.n	800aeda <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae20:	2b08      	cmp	r3, #8
 800ae22:	d828      	bhi.n	800ae76 <UART_SetConfig+0x56a>
 800ae24:	a201      	add	r2, pc, #4	@ (adr r2, 800ae2c <UART_SetConfig+0x520>)
 800ae26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2a:	bf00      	nop
 800ae2c:	0800ae51 	.word	0x0800ae51
 800ae30:	0800ae59 	.word	0x0800ae59
 800ae34:	0800ae61 	.word	0x0800ae61
 800ae38:	0800ae77 	.word	0x0800ae77
 800ae3c:	0800ae67 	.word	0x0800ae67
 800ae40:	0800ae77 	.word	0x0800ae77
 800ae44:	0800ae77 	.word	0x0800ae77
 800ae48:	0800ae77 	.word	0x0800ae77
 800ae4c:	0800ae6f 	.word	0x0800ae6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae50:	f7fc fc12 	bl	8007678 <HAL_RCC_GetPCLK1Freq>
 800ae54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae56:	e014      	b.n	800ae82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae58:	f7fc fc24 	bl	80076a4 <HAL_RCC_GetPCLK2Freq>
 800ae5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae5e:	e010      	b.n	800ae82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae60:	4b1a      	ldr	r3, [pc, #104]	@ (800aecc <UART_SetConfig+0x5c0>)
 800ae62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae64:	e00d      	b.n	800ae82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae66:	f7fc fb99 	bl	800759c <HAL_RCC_GetSysClockFreq>
 800ae6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae6c:	e009      	b.n	800ae82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae74:	e005      	b.n	800ae82 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ae76:	2300      	movs	r3, #0
 800ae78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ae80:	bf00      	nop
    }

    if (pclk != 0U)
 800ae82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d028      	beq.n	800aeda <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae8c:	4a10      	ldr	r2, [pc, #64]	@ (800aed0 <UART_SetConfig+0x5c4>)
 800ae8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae92:	461a      	mov	r2, r3
 800ae94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae96:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	085b      	lsrs	r3, r3, #1
 800aea0:	441a      	add	r2, r3
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeaa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aeac:	6a3b      	ldr	r3, [r7, #32]
 800aeae:	2b0f      	cmp	r3, #15
 800aeb0:	d910      	bls.n	800aed4 <UART_SetConfig+0x5c8>
 800aeb2:	6a3b      	ldr	r3, [r7, #32]
 800aeb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aeb8:	d20c      	bcs.n	800aed4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aeba:	6a3b      	ldr	r3, [r7, #32]
 800aebc:	b29a      	uxth	r2, r3
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	60da      	str	r2, [r3, #12]
 800aec4:	e009      	b.n	800aeda <UART_SetConfig+0x5ce>
 800aec6:	bf00      	nop
 800aec8:	40008000 	.word	0x40008000
 800aecc:	00f42400 	.word	0x00f42400
 800aed0:	0800bdc4 	.word	0x0800bdc4
      }
      else
      {
        ret = HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	2201      	movs	r2, #1
 800aede:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	2201      	movs	r2, #1
 800aee6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	2200      	movs	r2, #0
 800aeee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	2200      	movs	r2, #0
 800aef4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aef6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3730      	adds	r7, #48	@ 0x30
 800aefe:	46bd      	mov	sp, r7
 800af00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800af04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af10:	f003 0308 	and.w	r3, r3, #8
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00a      	beq.n	800af2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	430a      	orrs	r2, r1
 800af2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af32:	f003 0301 	and.w	r3, r3, #1
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00a      	beq.n	800af50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	430a      	orrs	r2, r1
 800af4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af54:	f003 0302 	and.w	r3, r3, #2
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00a      	beq.n	800af72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	430a      	orrs	r2, r1
 800af70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af76:	f003 0304 	and.w	r3, r3, #4
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00a      	beq.n	800af94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	430a      	orrs	r2, r1
 800af92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af98:	f003 0310 	and.w	r3, r3, #16
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00a      	beq.n	800afb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	430a      	orrs	r2, r1
 800afb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afba:	f003 0320 	and.w	r3, r3, #32
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00a      	beq.n	800afd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	430a      	orrs	r2, r1
 800afd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d01a      	beq.n	800b01a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	430a      	orrs	r2, r1
 800aff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800affe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b002:	d10a      	bne.n	800b01a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	430a      	orrs	r2, r1
 800b018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b01e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00a      	beq.n	800b03c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	430a      	orrs	r2, r1
 800b03a:	605a      	str	r2, [r3, #4]
  }
}
 800b03c:	bf00      	nop
 800b03e:	370c      	adds	r7, #12
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b098      	sub	sp, #96	@ 0x60
 800b04c:	af02      	add	r7, sp, #8
 800b04e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b058:	f7f9 fc00 	bl	800485c <HAL_GetTick>
 800b05c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f003 0308 	and.w	r3, r3, #8
 800b068:	2b08      	cmp	r3, #8
 800b06a:	d12f      	bne.n	800b0cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b06c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b074:	2200      	movs	r2, #0
 800b076:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f88e 	bl	800b19c <UART_WaitOnFlagUntilTimeout>
 800b080:	4603      	mov	r3, r0
 800b082:	2b00      	cmp	r3, #0
 800b084:	d022      	beq.n	800b0cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b08e:	e853 3f00 	ldrex	r3, [r3]
 800b092:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b09a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0ac:	e841 2300 	strex	r3, r2, [r1]
 800b0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b0b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1e6      	bne.n	800b086 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2220      	movs	r2, #32
 800b0bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	e063      	b.n	800b194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f003 0304 	and.w	r3, r3, #4
 800b0d6:	2b04      	cmp	r3, #4
 800b0d8:	d149      	bne.n	800b16e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 f857 	bl	800b19c <UART_WaitOnFlagUntilTimeout>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d03c      	beq.n	800b16e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0fc:	e853 3f00 	ldrex	r3, [r3]
 800b100:	623b      	str	r3, [r7, #32]
   return(result);
 800b102:	6a3b      	ldr	r3, [r7, #32]
 800b104:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b108:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	461a      	mov	r2, r3
 800b110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b112:	633b      	str	r3, [r7, #48]	@ 0x30
 800b114:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b11a:	e841 2300 	strex	r3, r2, [r1]
 800b11e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b122:	2b00      	cmp	r3, #0
 800b124:	d1e6      	bne.n	800b0f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	3308      	adds	r3, #8
 800b12c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	e853 3f00 	ldrex	r3, [r3]
 800b134:	60fb      	str	r3, [r7, #12]
   return(result);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f023 0301 	bic.w	r3, r3, #1
 800b13c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	3308      	adds	r3, #8
 800b144:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b146:	61fa      	str	r2, [r7, #28]
 800b148:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14a:	69b9      	ldr	r1, [r7, #24]
 800b14c:	69fa      	ldr	r2, [r7, #28]
 800b14e:	e841 2300 	strex	r3, r2, [r1]
 800b152:	617b      	str	r3, [r7, #20]
   return(result);
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d1e5      	bne.n	800b126 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2220      	movs	r2, #32
 800b15e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b16a:	2303      	movs	r3, #3
 800b16c:	e012      	b.n	800b194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2220      	movs	r2, #32
 800b172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2220      	movs	r2, #32
 800b17a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	3758      	adds	r7, #88	@ 0x58
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	603b      	str	r3, [r7, #0]
 800b1a8:	4613      	mov	r3, r2
 800b1aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1ac:	e04f      	b.n	800b24e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b4:	d04b      	beq.n	800b24e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1b6:	f7f9 fb51 	bl	800485c <HAL_GetTick>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	1ad3      	subs	r3, r2, r3
 800b1c0:	69ba      	ldr	r2, [r7, #24]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d302      	bcc.n	800b1cc <UART_WaitOnFlagUntilTimeout+0x30>
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d101      	bne.n	800b1d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	e04e      	b.n	800b26e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f003 0304 	and.w	r3, r3, #4
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d037      	beq.n	800b24e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	2b80      	cmp	r3, #128	@ 0x80
 800b1e2:	d034      	beq.n	800b24e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	2b40      	cmp	r3, #64	@ 0x40
 800b1e8:	d031      	beq.n	800b24e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	69db      	ldr	r3, [r3, #28]
 800b1f0:	f003 0308 	and.w	r3, r3, #8
 800b1f4:	2b08      	cmp	r3, #8
 800b1f6:	d110      	bne.n	800b21a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	2208      	movs	r2, #8
 800b1fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f000 f920 	bl	800b446 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2208      	movs	r2, #8
 800b20a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	e029      	b.n	800b26e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	69db      	ldr	r3, [r3, #28]
 800b220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b228:	d111      	bne.n	800b24e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b232:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f000 f906 	bl	800b446 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2220      	movs	r2, #32
 800b23e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b24a:	2303      	movs	r3, #3
 800b24c:	e00f      	b.n	800b26e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	69da      	ldr	r2, [r3, #28]
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	4013      	ands	r3, r2
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	bf0c      	ite	eq
 800b25e:	2301      	moveq	r3, #1
 800b260:	2300      	movne	r3, #0
 800b262:	b2db      	uxtb	r3, r3
 800b264:	461a      	mov	r2, r3
 800b266:	79fb      	ldrb	r3, [r7, #7]
 800b268:	429a      	cmp	r2, r3
 800b26a:	d0a0      	beq.n	800b1ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3710      	adds	r7, #16
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
	...

0800b278 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b096      	sub	sp, #88	@ 0x58
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	4613      	mov	r3, r2
 800b284:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	68ba      	ldr	r2, [r7, #8]
 800b28a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	88fa      	ldrh	r2, [r7, #6]
 800b290:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2200      	movs	r2, #0
 800b298:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2222      	movs	r2, #34	@ 0x22
 800b2a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d02d      	beq.n	800b30a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2b4:	4a40      	ldr	r2, [pc, #256]	@ (800b3b8 <UART_Start_Receive_DMA+0x140>)
 800b2b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2be:	4a3f      	ldr	r2, [pc, #252]	@ (800b3bc <UART_Start_Receive_DMA+0x144>)
 800b2c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2c8:	4a3d      	ldr	r2, [pc, #244]	@ (800b3c0 <UART_Start_Receive_DMA+0x148>)
 800b2ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	3324      	adds	r3, #36	@ 0x24
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	88fb      	ldrh	r3, [r7, #6]
 800b2ec:	f7fb f800 	bl	80062f0 <HAL_DMA_Start_IT>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d009      	beq.n	800b30a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2210      	movs	r2, #16
 800b2fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2220      	movs	r2, #32
 800b302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b306:	2301      	movs	r3, #1
 800b308:	e051      	b.n	800b3ae <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d018      	beq.n	800b344 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b31a:	e853 3f00 	ldrex	r3, [r3]
 800b31e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b326:	657b      	str	r3, [r7, #84]	@ 0x54
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	461a      	mov	r2, r3
 800b32e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b330:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b332:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b334:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b336:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b338:	e841 2300 	strex	r3, r2, [r1]
 800b33c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b33e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b340:	2b00      	cmp	r3, #0
 800b342:	d1e6      	bne.n	800b312 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	3308      	adds	r3, #8
 800b34a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b34e:	e853 3f00 	ldrex	r3, [r3]
 800b352:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b356:	f043 0301 	orr.w	r3, r3, #1
 800b35a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	3308      	adds	r3, #8
 800b362:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b364:	637a      	str	r2, [r7, #52]	@ 0x34
 800b366:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b368:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b36a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b36c:	e841 2300 	strex	r3, r2, [r1]
 800b370:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1e5      	bne.n	800b344 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	3308      	adds	r3, #8
 800b37e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	e853 3f00 	ldrex	r3, [r3]
 800b386:	613b      	str	r3, [r7, #16]
   return(result);
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b38e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	3308      	adds	r3, #8
 800b396:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b398:	623a      	str	r2, [r7, #32]
 800b39a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39c:	69f9      	ldr	r1, [r7, #28]
 800b39e:	6a3a      	ldr	r2, [r7, #32]
 800b3a0:	e841 2300 	strex	r3, r2, [r1]
 800b3a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1e5      	bne.n	800b378 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3758      	adds	r7, #88	@ 0x58
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	0800b5d1 	.word	0x0800b5d1
 800b3bc:	0800b705 	.word	0x0800b705
 800b3c0:	0800b74b 	.word	0x0800b74b

0800b3c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b08f      	sub	sp, #60	@ 0x3c
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d2:	6a3b      	ldr	r3, [r7, #32]
 800b3d4:	e853 3f00 	ldrex	r3, [r3]
 800b3d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b3e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3ec:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3f2:	e841 2300 	strex	r3, r2, [r1]
 800b3f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1e6      	bne.n	800b3cc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	3308      	adds	r3, #8
 800b404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	e853 3f00 	ldrex	r3, [r3]
 800b40c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b414:	633b      	str	r3, [r7, #48]	@ 0x30
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	3308      	adds	r3, #8
 800b41c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b41e:	61ba      	str	r2, [r7, #24]
 800b420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b422:	6979      	ldr	r1, [r7, #20]
 800b424:	69ba      	ldr	r2, [r7, #24]
 800b426:	e841 2300 	strex	r3, r2, [r1]
 800b42a:	613b      	str	r3, [r7, #16]
   return(result);
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1e5      	bne.n	800b3fe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2220      	movs	r2, #32
 800b436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b43a:	bf00      	nop
 800b43c:	373c      	adds	r7, #60	@ 0x3c
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr

0800b446 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b446:	b480      	push	{r7}
 800b448:	b095      	sub	sp, #84	@ 0x54
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b456:	e853 3f00 	ldrex	r3, [r3]
 800b45a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b45e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	461a      	mov	r2, r3
 800b46a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b46c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b46e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b470:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b472:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b474:	e841 2300 	strex	r3, r2, [r1]
 800b478:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d1e6      	bne.n	800b44e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	3308      	adds	r3, #8
 800b486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b488:	6a3b      	ldr	r3, [r7, #32]
 800b48a:	e853 3f00 	ldrex	r3, [r3]
 800b48e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b496:	f023 0301 	bic.w	r3, r3, #1
 800b49a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	3308      	adds	r3, #8
 800b4a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b4a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4ac:	e841 2300 	strex	r3, r2, [r1]
 800b4b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d1e3      	bne.n	800b480 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d118      	bne.n	800b4f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	e853 3f00 	ldrex	r3, [r3]
 800b4cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	f023 0310 	bic.w	r3, r3, #16
 800b4d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	461a      	mov	r2, r3
 800b4dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4de:	61bb      	str	r3, [r7, #24]
 800b4e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e2:	6979      	ldr	r1, [r7, #20]
 800b4e4:	69ba      	ldr	r2, [r7, #24]
 800b4e6:	e841 2300 	strex	r3, r2, [r1]
 800b4ea:	613b      	str	r3, [r7, #16]
   return(result);
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d1e6      	bne.n	800b4c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2220      	movs	r2, #32
 800b4f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b506:	bf00      	nop
 800b508:	3754      	adds	r7, #84	@ 0x54
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr

0800b512 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b512:	b580      	push	{r7, lr}
 800b514:	b090      	sub	sp, #64	@ 0x40
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b51e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f003 0320 	and.w	r3, r3, #32
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d137      	bne.n	800b59e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b52e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b530:	2200      	movs	r2, #0
 800b532:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	3308      	adds	r3, #8
 800b53c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b540:	e853 3f00 	ldrex	r3, [r3]
 800b544:	623b      	str	r3, [r7, #32]
   return(result);
 800b546:	6a3b      	ldr	r3, [r7, #32]
 800b548:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b54c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b54e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	3308      	adds	r3, #8
 800b554:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b556:	633a      	str	r2, [r7, #48]	@ 0x30
 800b558:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b55a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b55c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b55e:	e841 2300 	strex	r3, r2, [r1]
 800b562:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1e5      	bne.n	800b536 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b56a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	e853 3f00 	ldrex	r3, [r3]
 800b576:	60fb      	str	r3, [r7, #12]
   return(result);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b57e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	461a      	mov	r2, r3
 800b586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b588:	61fb      	str	r3, [r7, #28]
 800b58a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58c:	69b9      	ldr	r1, [r7, #24]
 800b58e:	69fa      	ldr	r2, [r7, #28]
 800b590:	e841 2300 	strex	r3, r2, [r1]
 800b594:	617b      	str	r3, [r7, #20]
   return(result);
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1e6      	bne.n	800b56a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b59c:	e004      	b.n	800b5a8 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b59e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b5a4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b5a6:	4798      	blx	r3
}
 800b5a8:	bf00      	nop
 800b5aa:	3740      	adds	r7, #64	@ 0x40
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5bc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5c8:	bf00      	nop
 800b5ca:	3710      	adds	r7, #16
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b09c      	sub	sp, #112	@ 0x70
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5dc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f003 0320 	and.w	r3, r3, #32
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d171      	bne.n	800b6d0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b5ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5fc:	e853 3f00 	ldrex	r3, [r3]
 800b600:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b604:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b608:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b60a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	461a      	mov	r2, r3
 800b610:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b612:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b614:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b616:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b618:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b61a:	e841 2300 	strex	r3, r2, [r1]
 800b61e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1e6      	bne.n	800b5f4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	3308      	adds	r3, #8
 800b62c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b630:	e853 3f00 	ldrex	r3, [r3]
 800b634:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b638:	f023 0301 	bic.w	r3, r3, #1
 800b63c:	667b      	str	r3, [r7, #100]	@ 0x64
 800b63e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	3308      	adds	r3, #8
 800b644:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b646:	647a      	str	r2, [r7, #68]	@ 0x44
 800b648:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b64a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b64c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b64e:	e841 2300 	strex	r3, r2, [r1]
 800b652:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b656:	2b00      	cmp	r3, #0
 800b658:	d1e5      	bne.n	800b626 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b65a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	3308      	adds	r3, #8
 800b660:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b664:	e853 3f00 	ldrex	r3, [r3]
 800b668:	623b      	str	r3, [r7, #32]
   return(result);
 800b66a:	6a3b      	ldr	r3, [r7, #32]
 800b66c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b670:	663b      	str	r3, [r7, #96]	@ 0x60
 800b672:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	3308      	adds	r3, #8
 800b678:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b67a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b67c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b682:	e841 2300 	strex	r3, r2, [r1]
 800b686:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1e5      	bne.n	800b65a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b68e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b690:	2220      	movs	r2, #32
 800b692:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b698:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d118      	bne.n	800b6d0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b69e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	e853 3f00 	ldrex	r3, [r3]
 800b6aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f023 0310 	bic.w	r3, r3, #16
 800b6b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b6b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6bc:	61fb      	str	r3, [r7, #28]
 800b6be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c0:	69b9      	ldr	r1, [r7, #24]
 800b6c2:	69fa      	ldr	r2, [r7, #28]
 800b6c4:	e841 2300 	strex	r3, r2, [r1]
 800b6c8:	617b      	str	r3, [r7, #20]
   return(result);
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d1e6      	bne.n	800b69e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d109      	bne.n	800b6f2 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b6de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b6e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b6e6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b6ea:	4611      	mov	r1, r2
 800b6ec:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b6ee:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6f0:	e004      	b.n	800b6fc <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b6f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b6f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b6fa:	4798      	blx	r3
}
 800b6fc:	bf00      	nop
 800b6fe:	3770      	adds	r7, #112	@ 0x70
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b710:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2201      	movs	r2, #1
 800b716:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d10b      	bne.n	800b738 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b726:	68fa      	ldr	r2, [r7, #12]
 800b728:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b72c:	0852      	lsrs	r2, r2, #1
 800b72e:	b292      	uxth	r2, r2
 800b730:	4611      	mov	r1, r2
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b736:	e004      	b.n	800b742 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	4798      	blx	r3
}
 800b742:	bf00      	nop
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b086      	sub	sp, #24
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b756:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b75e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b766:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b772:	2b80      	cmp	r3, #128	@ 0x80
 800b774:	d109      	bne.n	800b78a <UART_DMAError+0x40>
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	2b21      	cmp	r3, #33	@ 0x21
 800b77a:	d106      	bne.n	800b78a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	2200      	movs	r2, #0
 800b780:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b784:	6978      	ldr	r0, [r7, #20]
 800b786:	f7ff fe1d 	bl	800b3c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b794:	2b40      	cmp	r3, #64	@ 0x40
 800b796:	d109      	bne.n	800b7ac <UART_DMAError+0x62>
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2b22      	cmp	r3, #34	@ 0x22
 800b79c:	d106      	bne.n	800b7ac <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b7a6:	6978      	ldr	r0, [r7, #20]
 800b7a8:	f7ff fe4d 	bl	800b446 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7b2:	f043 0210 	orr.w	r2, r3, #16
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7c2:	6978      	ldr	r0, [r7, #20]
 800b7c4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7c6:	bf00      	nop
 800b7c8:	3718      	adds	r7, #24
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b084      	sub	sp, #16
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7f6:	bf00      	nop
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b088      	sub	sp, #32
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	e853 3f00 	ldrex	r3, [r3]
 800b812:	60bb      	str	r3, [r7, #8]
   return(result);
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b81a:	61fb      	str	r3, [r7, #28]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	461a      	mov	r2, r3
 800b822:	69fb      	ldr	r3, [r7, #28]
 800b824:	61bb      	str	r3, [r7, #24]
 800b826:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b828:	6979      	ldr	r1, [r7, #20]
 800b82a:	69ba      	ldr	r2, [r7, #24]
 800b82c:	e841 2300 	strex	r3, r2, [r1]
 800b830:	613b      	str	r3, [r7, #16]
   return(result);
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d1e6      	bne.n	800b806 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2220      	movs	r2, #32
 800b83c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b850:	bf00      	nop
 800b852:	3720      	adds	r7, #32
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b874:	bf00      	nop
 800b876:	370c      	adds	r7, #12
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b888:	bf00      	nop
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d101      	bne.n	800b8aa <HAL_UARTEx_DisableFifoMode+0x16>
 800b8a6:	2302      	movs	r3, #2
 800b8a8:	e027      	b.n	800b8fa <HAL_UARTEx_DisableFifoMode+0x66>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2224      	movs	r2, #36	@ 0x24
 800b8b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f022 0201 	bic.w	r2, r2, #1
 800b8d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b8d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	68fa      	ldr	r2, [r7, #12]
 800b8e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2220      	movs	r2, #32
 800b8ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8f8:	2300      	movs	r3, #0
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3714      	adds	r7, #20
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr

0800b906 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b084      	sub	sp, #16
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
 800b90e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b916:	2b01      	cmp	r3, #1
 800b918:	d101      	bne.n	800b91e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b91a:	2302      	movs	r3, #2
 800b91c:	e02d      	b.n	800b97a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2201      	movs	r2, #1
 800b922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2224      	movs	r2, #36	@ 0x24
 800b92a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f022 0201 	bic.w	r2, r2, #1
 800b944:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	683a      	ldr	r2, [r7, #0]
 800b956:	430a      	orrs	r2, r1
 800b958:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 f850 	bl	800ba00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68fa      	ldr	r2, [r7, #12]
 800b966:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2220      	movs	r2, #32
 800b96c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b978:	2300      	movs	r3, #0
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b084      	sub	sp, #16
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b992:	2b01      	cmp	r3, #1
 800b994:	d101      	bne.n	800b99a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b996:	2302      	movs	r3, #2
 800b998:	e02d      	b.n	800b9f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2201      	movs	r2, #1
 800b99e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2224      	movs	r2, #36	@ 0x24
 800b9a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f022 0201 	bic.w	r2, r2, #1
 800b9c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	689b      	ldr	r3, [r3, #8]
 800b9c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	683a      	ldr	r2, [r7, #0]
 800b9d2:	430a      	orrs	r2, r1
 800b9d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 f812 	bl	800ba00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	68fa      	ldr	r2, [r7, #12]
 800b9e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2220      	movs	r2, #32
 800b9e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
	...

0800ba00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b085      	sub	sp, #20
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d108      	bne.n	800ba22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2201      	movs	r2, #1
 800ba14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ba20:	e031      	b.n	800ba86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ba22:	2308      	movs	r3, #8
 800ba24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ba26:	2308      	movs	r3, #8
 800ba28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	0e5b      	lsrs	r3, r3, #25
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	f003 0307 	and.w	r3, r3, #7
 800ba38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	0f5b      	lsrs	r3, r3, #29
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	f003 0307 	and.w	r3, r3, #7
 800ba48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba4a:	7bbb      	ldrb	r3, [r7, #14]
 800ba4c:	7b3a      	ldrb	r2, [r7, #12]
 800ba4e:	4911      	ldr	r1, [pc, #68]	@ (800ba94 <UARTEx_SetNbDataToProcess+0x94>)
 800ba50:	5c8a      	ldrb	r2, [r1, r2]
 800ba52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba56:	7b3a      	ldrb	r2, [r7, #12]
 800ba58:	490f      	ldr	r1, [pc, #60]	@ (800ba98 <UARTEx_SetNbDataToProcess+0x98>)
 800ba5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba68:	7bfb      	ldrb	r3, [r7, #15]
 800ba6a:	7b7a      	ldrb	r2, [r7, #13]
 800ba6c:	4909      	ldr	r1, [pc, #36]	@ (800ba94 <UARTEx_SetNbDataToProcess+0x94>)
 800ba6e:	5c8a      	ldrb	r2, [r1, r2]
 800ba70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba74:	7b7a      	ldrb	r2, [r7, #13]
 800ba76:	4908      	ldr	r1, [pc, #32]	@ (800ba98 <UARTEx_SetNbDataToProcess+0x98>)
 800ba78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ba86:	bf00      	nop
 800ba88:	3714      	adds	r7, #20
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	0800bddc 	.word	0x0800bddc
 800ba98:	0800bde4 	.word	0x0800bde4

0800ba9c <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	ed93 7a06 	vldr	s14, [r3, #24]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	edd3 7a07 	vldr	s15, [r3, #28]
 800bab2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	edd3 7a08 	vldr	s15, [r3, #32]
 800babc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	edd3 7a06 	vldr	s15, [r3, #24]
 800bacc:	eeb1 7a67 	vneg.f32	s14, s15
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	edd3 7a08 	vldr	s15, [r3, #32]
 800bad6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bada:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6a1a      	ldr	r2, [r3, #32]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d006      	beq.n	800bb00 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	330c      	adds	r3, #12
 800baf6:	220c      	movs	r2, #12
 800baf8:	2100      	movs	r1, #0
 800bafa:	4618      	mov	r0, r3
 800bafc:	f000 f804 	bl	800bb08 <memset>
  }

}
 800bb00:	bf00      	nop
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <memset>:
 800bb08:	4402      	add	r2, r0
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d100      	bne.n	800bb12 <memset+0xa>
 800bb10:	4770      	bx	lr
 800bb12:	f803 1b01 	strb.w	r1, [r3], #1
 800bb16:	e7f9      	b.n	800bb0c <memset+0x4>

0800bb18 <__errno>:
 800bb18:	4b01      	ldr	r3, [pc, #4]	@ (800bb20 <__errno+0x8>)
 800bb1a:	6818      	ldr	r0, [r3, #0]
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	20000224 	.word	0x20000224

0800bb24 <__libc_init_array>:
 800bb24:	b570      	push	{r4, r5, r6, lr}
 800bb26:	4d0d      	ldr	r5, [pc, #52]	@ (800bb5c <__libc_init_array+0x38>)
 800bb28:	4c0d      	ldr	r4, [pc, #52]	@ (800bb60 <__libc_init_array+0x3c>)
 800bb2a:	1b64      	subs	r4, r4, r5
 800bb2c:	10a4      	asrs	r4, r4, #2
 800bb2e:	2600      	movs	r6, #0
 800bb30:	42a6      	cmp	r6, r4
 800bb32:	d109      	bne.n	800bb48 <__libc_init_array+0x24>
 800bb34:	4d0b      	ldr	r5, [pc, #44]	@ (800bb64 <__libc_init_array+0x40>)
 800bb36:	4c0c      	ldr	r4, [pc, #48]	@ (800bb68 <__libc_init_array+0x44>)
 800bb38:	f000 f92c 	bl	800bd94 <_init>
 800bb3c:	1b64      	subs	r4, r4, r5
 800bb3e:	10a4      	asrs	r4, r4, #2
 800bb40:	2600      	movs	r6, #0
 800bb42:	42a6      	cmp	r6, r4
 800bb44:	d105      	bne.n	800bb52 <__libc_init_array+0x2e>
 800bb46:	bd70      	pop	{r4, r5, r6, pc}
 800bb48:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb4c:	4798      	blx	r3
 800bb4e:	3601      	adds	r6, #1
 800bb50:	e7ee      	b.n	800bb30 <__libc_init_array+0xc>
 800bb52:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb56:	4798      	blx	r3
 800bb58:	3601      	adds	r6, #1
 800bb5a:	e7f2      	b.n	800bb42 <__libc_init_array+0x1e>
 800bb5c:	0800bdf4 	.word	0x0800bdf4
 800bb60:	0800bdf4 	.word	0x0800bdf4
 800bb64:	0800bdf4 	.word	0x0800bdf4
 800bb68:	0800bdf8 	.word	0x0800bdf8

0800bb6c <memcpy>:
 800bb6c:	440a      	add	r2, r1
 800bb6e:	4291      	cmp	r1, r2
 800bb70:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb74:	d100      	bne.n	800bb78 <memcpy+0xc>
 800bb76:	4770      	bx	lr
 800bb78:	b510      	push	{r4, lr}
 800bb7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb82:	4291      	cmp	r1, r2
 800bb84:	d1f9      	bne.n	800bb7a <memcpy+0xe>
 800bb86:	bd10      	pop	{r4, pc}

0800bb88 <sqrt>:
 800bb88:	b538      	push	{r3, r4, r5, lr}
 800bb8a:	ed2d 8b02 	vpush	{d8}
 800bb8e:	ec55 4b10 	vmov	r4, r5, d0
 800bb92:	f000 f825 	bl	800bbe0 <__ieee754_sqrt>
 800bb96:	4622      	mov	r2, r4
 800bb98:	462b      	mov	r3, r5
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	4629      	mov	r1, r5
 800bb9e:	eeb0 8a40 	vmov.f32	s16, s0
 800bba2:	eef0 8a60 	vmov.f32	s17, s1
 800bba6:	f7f4 ff8d 	bl	8000ac4 <__aeabi_dcmpun>
 800bbaa:	b990      	cbnz	r0, 800bbd2 <sqrt+0x4a>
 800bbac:	2200      	movs	r2, #0
 800bbae:	2300      	movs	r3, #0
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	4629      	mov	r1, r5
 800bbb4:	f7f4 ff5e 	bl	8000a74 <__aeabi_dcmplt>
 800bbb8:	b158      	cbz	r0, 800bbd2 <sqrt+0x4a>
 800bbba:	f7ff ffad 	bl	800bb18 <__errno>
 800bbbe:	2321      	movs	r3, #33	@ 0x21
 800bbc0:	6003      	str	r3, [r0, #0]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	4610      	mov	r0, r2
 800bbc8:	4619      	mov	r1, r3
 800bbca:	f7f4 fe0b 	bl	80007e4 <__aeabi_ddiv>
 800bbce:	ec41 0b18 	vmov	d8, r0, r1
 800bbd2:	eeb0 0a48 	vmov.f32	s0, s16
 800bbd6:	eef0 0a68 	vmov.f32	s1, s17
 800bbda:	ecbd 8b02 	vpop	{d8}
 800bbde:	bd38      	pop	{r3, r4, r5, pc}

0800bbe0 <__ieee754_sqrt>:
 800bbe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe4:	4a68      	ldr	r2, [pc, #416]	@ (800bd88 <__ieee754_sqrt+0x1a8>)
 800bbe6:	ec55 4b10 	vmov	r4, r5, d0
 800bbea:	43aa      	bics	r2, r5
 800bbec:	462b      	mov	r3, r5
 800bbee:	4621      	mov	r1, r4
 800bbf0:	d110      	bne.n	800bc14 <__ieee754_sqrt+0x34>
 800bbf2:	4622      	mov	r2, r4
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	4629      	mov	r1, r5
 800bbf8:	f7f4 fcca 	bl	8000590 <__aeabi_dmul>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	460b      	mov	r3, r1
 800bc00:	4620      	mov	r0, r4
 800bc02:	4629      	mov	r1, r5
 800bc04:	f7f4 fb0e 	bl	8000224 <__adddf3>
 800bc08:	4604      	mov	r4, r0
 800bc0a:	460d      	mov	r5, r1
 800bc0c:	ec45 4b10 	vmov	d0, r4, r5
 800bc10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc14:	2d00      	cmp	r5, #0
 800bc16:	dc0e      	bgt.n	800bc36 <__ieee754_sqrt+0x56>
 800bc18:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bc1c:	4322      	orrs	r2, r4
 800bc1e:	d0f5      	beq.n	800bc0c <__ieee754_sqrt+0x2c>
 800bc20:	b19d      	cbz	r5, 800bc4a <__ieee754_sqrt+0x6a>
 800bc22:	4622      	mov	r2, r4
 800bc24:	4620      	mov	r0, r4
 800bc26:	4629      	mov	r1, r5
 800bc28:	f7f4 fafa 	bl	8000220 <__aeabi_dsub>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	f7f4 fdd8 	bl	80007e4 <__aeabi_ddiv>
 800bc34:	e7e8      	b.n	800bc08 <__ieee754_sqrt+0x28>
 800bc36:	152a      	asrs	r2, r5, #20
 800bc38:	d115      	bne.n	800bc66 <__ieee754_sqrt+0x86>
 800bc3a:	2000      	movs	r0, #0
 800bc3c:	e009      	b.n	800bc52 <__ieee754_sqrt+0x72>
 800bc3e:	0acb      	lsrs	r3, r1, #11
 800bc40:	3a15      	subs	r2, #21
 800bc42:	0549      	lsls	r1, r1, #21
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d0fa      	beq.n	800bc3e <__ieee754_sqrt+0x5e>
 800bc48:	e7f7      	b.n	800bc3a <__ieee754_sqrt+0x5a>
 800bc4a:	462a      	mov	r2, r5
 800bc4c:	e7fa      	b.n	800bc44 <__ieee754_sqrt+0x64>
 800bc4e:	005b      	lsls	r3, r3, #1
 800bc50:	3001      	adds	r0, #1
 800bc52:	02dc      	lsls	r4, r3, #11
 800bc54:	d5fb      	bpl.n	800bc4e <__ieee754_sqrt+0x6e>
 800bc56:	1e44      	subs	r4, r0, #1
 800bc58:	1b12      	subs	r2, r2, r4
 800bc5a:	f1c0 0420 	rsb	r4, r0, #32
 800bc5e:	fa21 f404 	lsr.w	r4, r1, r4
 800bc62:	4323      	orrs	r3, r4
 800bc64:	4081      	lsls	r1, r0
 800bc66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc6a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800bc6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc72:	07d2      	lsls	r2, r2, #31
 800bc74:	bf5c      	itt	pl
 800bc76:	005b      	lslpl	r3, r3, #1
 800bc78:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800bc7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc80:	bf58      	it	pl
 800bc82:	0049      	lslpl	r1, r1, #1
 800bc84:	2600      	movs	r6, #0
 800bc86:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800bc8a:	106d      	asrs	r5, r5, #1
 800bc8c:	0049      	lsls	r1, r1, #1
 800bc8e:	2016      	movs	r0, #22
 800bc90:	4632      	mov	r2, r6
 800bc92:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800bc96:	1917      	adds	r7, r2, r4
 800bc98:	429f      	cmp	r7, r3
 800bc9a:	bfde      	ittt	le
 800bc9c:	193a      	addle	r2, r7, r4
 800bc9e:	1bdb      	suble	r3, r3, r7
 800bca0:	1936      	addle	r6, r6, r4
 800bca2:	0fcf      	lsrs	r7, r1, #31
 800bca4:	3801      	subs	r0, #1
 800bca6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800bcaa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bcae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bcb2:	d1f0      	bne.n	800bc96 <__ieee754_sqrt+0xb6>
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	2720      	movs	r7, #32
 800bcb8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	eb00 0e0c 	add.w	lr, r0, ip
 800bcc2:	db02      	blt.n	800bcca <__ieee754_sqrt+0xea>
 800bcc4:	d113      	bne.n	800bcee <__ieee754_sqrt+0x10e>
 800bcc6:	458e      	cmp	lr, r1
 800bcc8:	d811      	bhi.n	800bcee <__ieee754_sqrt+0x10e>
 800bcca:	f1be 0f00 	cmp.w	lr, #0
 800bcce:	eb0e 000c 	add.w	r0, lr, ip
 800bcd2:	da42      	bge.n	800bd5a <__ieee754_sqrt+0x17a>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	db40      	blt.n	800bd5a <__ieee754_sqrt+0x17a>
 800bcd8:	f102 0801 	add.w	r8, r2, #1
 800bcdc:	1a9b      	subs	r3, r3, r2
 800bcde:	458e      	cmp	lr, r1
 800bce0:	bf88      	it	hi
 800bce2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bce6:	eba1 010e 	sub.w	r1, r1, lr
 800bcea:	4464      	add	r4, ip
 800bcec:	4642      	mov	r2, r8
 800bcee:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bcf2:	3f01      	subs	r7, #1
 800bcf4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800bcf8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bcfc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bd00:	d1dc      	bne.n	800bcbc <__ieee754_sqrt+0xdc>
 800bd02:	4319      	orrs	r1, r3
 800bd04:	d01b      	beq.n	800bd3e <__ieee754_sqrt+0x15e>
 800bd06:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800bd8c <__ieee754_sqrt+0x1ac>
 800bd0a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800bd90 <__ieee754_sqrt+0x1b0>
 800bd0e:	e9da 0100 	ldrd	r0, r1, [sl]
 800bd12:	e9db 2300 	ldrd	r2, r3, [fp]
 800bd16:	f7f4 fa83 	bl	8000220 <__aeabi_dsub>
 800bd1a:	e9da 8900 	ldrd	r8, r9, [sl]
 800bd1e:	4602      	mov	r2, r0
 800bd20:	460b      	mov	r3, r1
 800bd22:	4640      	mov	r0, r8
 800bd24:	4649      	mov	r1, r9
 800bd26:	f7f4 feaf 	bl	8000a88 <__aeabi_dcmple>
 800bd2a:	b140      	cbz	r0, 800bd3e <__ieee754_sqrt+0x15e>
 800bd2c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bd30:	e9da 0100 	ldrd	r0, r1, [sl]
 800bd34:	e9db 2300 	ldrd	r2, r3, [fp]
 800bd38:	d111      	bne.n	800bd5e <__ieee754_sqrt+0x17e>
 800bd3a:	3601      	adds	r6, #1
 800bd3c:	463c      	mov	r4, r7
 800bd3e:	1072      	asrs	r2, r6, #1
 800bd40:	0863      	lsrs	r3, r4, #1
 800bd42:	07f1      	lsls	r1, r6, #31
 800bd44:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800bd48:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800bd4c:	bf48      	it	mi
 800bd4e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800bd52:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800bd56:	4618      	mov	r0, r3
 800bd58:	e756      	b.n	800bc08 <__ieee754_sqrt+0x28>
 800bd5a:	4690      	mov	r8, r2
 800bd5c:	e7be      	b.n	800bcdc <__ieee754_sqrt+0xfc>
 800bd5e:	f7f4 fa61 	bl	8000224 <__adddf3>
 800bd62:	e9da 8900 	ldrd	r8, r9, [sl]
 800bd66:	4602      	mov	r2, r0
 800bd68:	460b      	mov	r3, r1
 800bd6a:	4640      	mov	r0, r8
 800bd6c:	4649      	mov	r1, r9
 800bd6e:	f7f4 fe81 	bl	8000a74 <__aeabi_dcmplt>
 800bd72:	b120      	cbz	r0, 800bd7e <__ieee754_sqrt+0x19e>
 800bd74:	1ca0      	adds	r0, r4, #2
 800bd76:	bf08      	it	eq
 800bd78:	3601      	addeq	r6, #1
 800bd7a:	3402      	adds	r4, #2
 800bd7c:	e7df      	b.n	800bd3e <__ieee754_sqrt+0x15e>
 800bd7e:	1c63      	adds	r3, r4, #1
 800bd80:	f023 0401 	bic.w	r4, r3, #1
 800bd84:	e7db      	b.n	800bd3e <__ieee754_sqrt+0x15e>
 800bd86:	bf00      	nop
 800bd88:	7ff00000 	.word	0x7ff00000
 800bd8c:	20000280 	.word	0x20000280
 800bd90:	20000278 	.word	0x20000278

0800bd94 <_init>:
 800bd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd96:	bf00      	nop
 800bd98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd9a:	bc08      	pop	{r3}
 800bd9c:	469e      	mov	lr, r3
 800bd9e:	4770      	bx	lr

0800bda0 <_fini>:
 800bda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda2:	bf00      	nop
 800bda4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bda6:	bc08      	pop	{r3}
 800bda8:	469e      	mov	lr, r3
 800bdaa:	4770      	bx	lr
